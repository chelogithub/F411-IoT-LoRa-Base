
F411-IoT-LoRa-Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000778  0800d47c  0800d47c  0001d47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbf4  0800dbf4  00020198  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbf4  0800dbf4  0001dbf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbfc  0800dbfc  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbfc  0800dbfc  0001dbfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc00  0800dc00  0001dc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  0800dc04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d0c  20000198  0800dd9c  00020198  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002ea4  0800dd9c  00022ea4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012134  00000000  00000000  0002020b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b13  00000000  00000000  0003233f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  00034e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c4e  00000000  00000000  00035d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000181d5  00000000  00000000  000369be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015447  00000000  00000000  0004eb93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000914d6  00000000  00000000  00063fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b94  00000000  00000000  000f54b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000fa044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000198 	.word	0x20000198
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d464 	.word	0x0800d464

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000019c 	.word	0x2000019c
 80001dc:	0800d464 	.word	0x0800d464

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	b08f      	sub	sp, #60	; 0x3c
 8000698:	af06      	add	r7, sp, #24
	  //----------------------- LoRa ------------------------//

	  //----------------------- LoRa ------------------------//

	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 800069a:	4898      	ldr	r0, [pc, #608]	; (80008fc <main+0x268>)
 800069c:	f004 ffca 	bl	8005634 <Inicializar>
 	  	wf.RESET_PORT=GPIOA;
 80006a0:	4b96      	ldr	r3, [pc, #600]	; (80008fc <main+0x268>)
 80006a2:	4a97      	ldr	r2, [pc, #604]	; (8000900 <main+0x26c>)
 80006a4:	601a      	str	r2, [r3, #0]
 	  	wf.RESET_PIN=GPIO_PIN_8;
 80006a6:	4b95      	ldr	r3, [pc, #596]	; (80008fc <main+0x268>)
 80006a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ac:	809a      	strh	r2, [r3, #4]
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80006ae:	4995      	ldr	r1, [pc, #596]	; (8000904 <main+0x270>)
 80006b0:	4895      	ldr	r0, [pc, #596]	; (8000908 <main+0x274>)
 80006b2:	f00b fef1 	bl	800c498 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 80006b6:	4995      	ldr	r1, [pc, #596]	; (800090c <main+0x278>)
 80006b8:	4895      	ldr	r0, [pc, #596]	; (8000910 <main+0x27c>)
 80006ba:	f00b feed 	bl	800c498 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 80006be:	4995      	ldr	r1, [pc, #596]	; (8000914 <main+0x280>)
 80006c0:	4895      	ldr	r0, [pc, #596]	; (8000918 <main+0x284>)
 80006c2:	f00b fee9 	bl	800c498 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 80006c6:	4995      	ldr	r1, [pc, #596]	; (800091c <main+0x288>)
 80006c8:	4895      	ldr	r0, [pc, #596]	; (8000920 <main+0x28c>)
 80006ca:	f00b fee5 	bl	800c498 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 80006ce:	4995      	ldr	r1, [pc, #596]	; (8000924 <main+0x290>)
 80006d0:	4895      	ldr	r0, [pc, #596]	; (8000928 <main+0x294>)
 80006d2:	f00b fee1 	bl	800c498 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 80006d6:	4995      	ldr	r1, [pc, #596]	; (800092c <main+0x298>)
 80006d8:	4895      	ldr	r0, [pc, #596]	; (8000930 <main+0x29c>)
 80006da:	f00b fedd 	bl	800c498 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 80006de:	4995      	ldr	r1, [pc, #596]	; (8000934 <main+0x2a0>)
 80006e0:	4895      	ldr	r0, [pc, #596]	; (8000938 <main+0x2a4>)
 80006e2:	f00b fed9 	bl	800c498 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 80006e6:	4995      	ldr	r1, [pc, #596]	; (800093c <main+0x2a8>)
 80006e8:	4895      	ldr	r0, [pc, #596]	; (8000940 <main+0x2ac>)
 80006ea:	f00b fed5 	bl	800c498 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 80006ee:	4b83      	ldr	r3, [pc, #524]	; (80008fc <main+0x268>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 80006f6:	4b81      	ldr	r3, [pc, #516]	; (80008fc <main+0x268>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[1]=0x00;
 80006fe:	4b7f      	ldr	r3, [pc, #508]	; (80008fc <main+0x268>)
 8000700:	2200      	movs	r2, #0
 8000702:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[2]=0x00;
 8000706:	4b7d      	ldr	r3, [pc, #500]	; (80008fc <main+0x268>)
 8000708:	2200      	movs	r2, #0
 800070a:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[3]=0x00;
 800070e:	4b7b      	ldr	r3, [pc, #492]	; (80008fc <main+0x268>)
 8000710:	2200      	movs	r2, #0
 8000712:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[4]=0x00;
 8000716:	4b79      	ldr	r3, [pc, #484]	; (80008fc <main+0x268>)
 8000718:	2200      	movs	r2, #0
 800071a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[5]=0x06;
 800071e:	4b77      	ldr	r3, [pc, #476]	; (80008fc <main+0x268>)
 8000720:	2206      	movs	r2, #6
 8000722:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[6]=0x01;
 8000726:	4b75      	ldr	r3, [pc, #468]	; (80008fc <main+0x268>)
 8000728:	2201      	movs	r2, #1
 800072a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[7]=0x03;
 800072e:	4b73      	ldr	r3, [pc, #460]	; (80008fc <main+0x268>)
 8000730:	2203      	movs	r2, #3
 8000732:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 8000736:	4b71      	ldr	r3, [pc, #452]	; (80008fc <main+0x268>)
 8000738:	2200      	movs	r2, #0
 800073a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[9]=0x00;
 800073e:	4b6f      	ldr	r3, [pc, #444]	; (80008fc <main+0x268>)
 8000740:	2200      	movs	r2, #0
 8000742:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[10]=0x00;
 8000746:	4b6d      	ldr	r3, [pc, #436]	; (80008fc <main+0x268>)
 8000748:	2200      	movs	r2, #0
 800074a:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[11]=0x0A;
 800074e:	4b6b      	ldr	r3, [pc, #428]	; (80008fc <main+0x268>)
 8000750:	220a      	movs	r2, #10
 8000752:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._data2SND[12]=0x00;
 8000756:	4b69      	ldr	r3, [pc, #420]	; (80008fc <main+0x268>)
 8000758:	2200      	movs	r2, #0
 800075a:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
		wf._data2SND[13]=0x33;
 800075e:	4b67      	ldr	r3, [pc, #412]	; (80008fc <main+0x268>)
 8000760:	2233      	movs	r2, #51	; 0x33
 8000762:	f883 22a5 	strb.w	r2, [r3, #677]	; 0x2a5
		wf._data2SND[14]=0x34;
 8000766:	4b65      	ldr	r3, [pc, #404]	; (80008fc <main+0x268>)
 8000768:	2234      	movs	r2, #52	; 0x34
 800076a:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6
		wf._data2SND[15]=0x35;
 800076e:	4b63      	ldr	r3, [pc, #396]	; (80008fc <main+0x268>)
 8000770:	2235      	movs	r2, #53	; 0x35
 8000772:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
		wf._n_D2SND=12;
 8000776:	4b61      	ldr	r3, [pc, #388]	; (80008fc <main+0x268>)
 8000778:	220c      	movs	r2, #12
 800077a:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 800077e:	4b5f      	ldr	r3, [pc, #380]	; (80008fc <main+0x268>)
 8000780:	2264      	movs	r2, #100	; 0x64
 8000782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 8000786:	4b5d      	ldr	r3, [pc, #372]	; (80008fc <main+0x268>)
 8000788:	2202      	movs	r2, #2
 800078a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._NO_IP=1;
 800078e:	4b5b      	ldr	r3, [pc, #364]	; (80008fc <main+0x268>)
 8000790:	2201      	movs	r2, #1
 8000792:	f8c3 2d58 	str.w	r2, [r3, #3416]	; 0xd58
		wf._DBG_EN=1;
 8000796:	4b59      	ldr	r3, [pc, #356]	; (80008fc <main+0x268>)
 8000798:	2201      	movs	r2, #1
 800079a:	f8c3 2d5c 	str.w	r2, [r3, #3420]	; 0xd5c
		 //----------------------- WIFI ------------------------//

		for(uint8_t i=0;i<=16;i++)
 800079e:	2300      	movs	r3, #0
 80007a0:	77fb      	strb	r3, [r7, #31]
 80007a2:	e006      	b.n	80007b2 <main+0x11e>
		{
			decimal[i]=1;
 80007a4:	7ffb      	ldrb	r3, [r7, #31]
 80007a6:	4a67      	ldr	r2, [pc, #412]	; (8000944 <main+0x2b0>)
 80007a8:	2101      	movs	r1, #1
 80007aa:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<=16;i++)
 80007ac:	7ffb      	ldrb	r3, [r7, #31]
 80007ae:	3301      	adds	r3, #1
 80007b0:	77fb      	strb	r3, [r7, #31]
 80007b2:	7ffb      	ldrb	r3, [r7, #31]
 80007b4:	2b10      	cmp	r3, #16
 80007b6:	d9f5      	bls.n	80007a4 <main+0x110>
		}
	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_lr);		//ETHERNET como cliente TCP envía  ModBUS
 80007b8:	4863      	ldr	r0, [pc, #396]	; (8000948 <main+0x2b4>)
 80007ba:	f00a fe95 	bl	800b4e8 <ModBUS_Config>
		mb_lr._mode = CLIENTE;
 80007be:	4b62      	ldr	r3, [pc, #392]	; (8000948 <main+0x2b4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	711a      	strb	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c4:	f001 fb9c 	bl	8001f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c8:	f000 faa4 	bl	8000d14 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 80007cc:	4b5f      	ldr	r3, [pc, #380]	; (800094c <main+0x2b8>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a5f      	ldr	r2, [pc, #380]	; (8000950 <main+0x2bc>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	099b      	lsrs	r3, r3, #6
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff11 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007de:	f000 fc77 	bl	80010d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007e2:	f000 fbf7 	bl	8000fd4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007e6:	f000 fc1f 	bl	8001028 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80007ea:	f000 fc47 	bl	800107c <MX_USART6_UART_Init>
  MX_TIM2_Init();
 80007ee:	f000 faf9 	bl	8000de4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80007f2:	f000 fb73 	bl	8000edc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2102      	movs	r1, #2
 80007fa:	4841      	ldr	r0, [pc, #260]	; (8000900 <main+0x26c>)
 80007fc:	f002 f854 	bl	80028a8 <HAL_GPIO_WritePin>
  ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000800:	210e      	movs	r1, #14
 8000802:	4854      	ldr	r0, [pc, #336]	; (8000954 <main+0x2c0>)
 8000804:	f000 fce8 	bl	80011d8 <ITM0_Write>
     HW_RESET(&wf);
 8000808:	483c      	ldr	r0, [pc, #240]	; (80008fc <main+0x268>)
 800080a:	f004 fe0f 	bl	800542c <HW_RESET>
     if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 800080e:	4b3b      	ldr	r3, [pc, #236]	; (80008fc <main+0x268>)
 8000810:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8000814:	2b00      	cmp	r3, #0
 8000816:	d003      	beq.n	8000820 <main+0x18c>
 8000818:	2113      	movs	r1, #19
 800081a:	484f      	ldr	r0, [pc, #316]	; (8000958 <main+0x2c4>)
 800081c:	f000 fcdc 	bl	80011d8 <ITM0_Write>
     HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000820:	2201      	movs	r2, #1
 8000822:	494e      	ldr	r1, [pc, #312]	; (800095c <main+0x2c8>)
 8000824:	484e      	ldr	r0, [pc, #312]	; (8000960 <main+0x2cc>)
 8000826:	f003 fe72 	bl	800450e <HAL_UART_Receive_IT>
     HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1);
 800082a:	2201      	movs	r2, #1
 800082c:	494d      	ldr	r1, [pc, #308]	; (8000964 <main+0x2d0>)
 800082e:	484e      	ldr	r0, [pc, #312]	; (8000968 <main+0x2d4>)
 8000830:	f003 fe6d 	bl	800450e <HAL_UART_Receive_IT>

     if(ESP8266_HW_Init(&huart1)==1)
 8000834:	484a      	ldr	r0, [pc, #296]	; (8000960 <main+0x2cc>)
 8000836:	f000 ffe7 	bl	8001808 <ESP8266_HW_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b01      	cmp	r3, #1
 800083e:	d10c      	bne.n	800085a <main+0x1c6>
     {
   	  ESP_HW_Init=1;
 8000840:	4b4a      	ldr	r3, [pc, #296]	; (800096c <main+0x2d8>)
 8000842:	2201      	movs	r2, #1
 8000844:	701a      	strb	r2, [r3, #0]
   	  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000846:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <main+0x268>)
 8000848:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800084c:	2b00      	cmp	r3, #0
 800084e:	d026      	beq.n	800089e <main+0x20a>
 8000850:	2113      	movs	r1, #19
 8000852:	4847      	ldr	r0, [pc, #284]	; (8000970 <main+0x2dc>)
 8000854:	f000 fcc0 	bl	80011d8 <ITM0_Write>
 8000858:	e021      	b.n	800089e <main+0x20a>
     }
     else
     {
	   HW_RESET(&wf);
 800085a:	4828      	ldr	r0, [pc, #160]	; (80008fc <main+0x268>)
 800085c:	f004 fde6 	bl	800542c <HW_RESET>
   	  if(ESP8266_HW_Init(&huart1)==1)
 8000860:	483f      	ldr	r0, [pc, #252]	; (8000960 <main+0x2cc>)
 8000862:	f000 ffd1 	bl	8001808 <ESP8266_HW_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b01      	cmp	r3, #1
 800086a:	d10c      	bne.n	8000886 <main+0x1f2>
   	  {
   		  ESP_HW_Init=1;
 800086c:	4b3f      	ldr	r3, [pc, #252]	; (800096c <main+0x2d8>)
 800086e:	2201      	movs	r2, #1
 8000870:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000872:	4b22      	ldr	r3, [pc, #136]	; (80008fc <main+0x268>)
 8000874:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8000878:	2b00      	cmp	r3, #0
 800087a:	d010      	beq.n	800089e <main+0x20a>
 800087c:	2113      	movs	r1, #19
 800087e:	483c      	ldr	r0, [pc, #240]	; (8000970 <main+0x2dc>)
 8000880:	f000 fcaa 	bl	80011d8 <ITM0_Write>
 8000884:	e00b      	b.n	800089e <main+0x20a>
   	  }
   	  else
   	  {
   		  ESP_HW_Init=0;
 8000886:	4b39      	ldr	r3, [pc, #228]	; (800096c <main+0x2d8>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 800088c:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <main+0x268>)
 800088e:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8000892:	2b00      	cmp	r3, #0
 8000894:	d003      	beq.n	800089e <main+0x20a>
 8000896:	2115      	movs	r1, #21
 8000898:	4836      	ldr	r0, [pc, #216]	; (8000974 <main+0x2e0>)
 800089a:	f000 fc9d 	bl	80011d8 <ITM0_Write>
   	  }
     }

     HAL_Delay(1000);
 800089e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a2:	f001 fb9f 	bl	8001fe4 <HAL_Delay>

    /* USER CODE BEGIN 3 */


	  /**************[ INICIO PIDO ENVIAR DATOS ]**************/
  if (ESP_HW_Init==1)
 80008a6:	4b31      	ldr	r3, [pc, #196]	; (800096c <main+0x2d8>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	f040 80b2 	bne.w	8000a14 <main+0x380>
	  	  {
			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(lr._data_available))
 80008b0:	4b31      	ldr	r3, [pc, #196]	; (8000978 <main+0x2e4>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	f040 80ad 	bne.w	8000a14 <main+0x380>
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <main+0x268>)
 80008bc:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	f040 80a7 	bne.w	8000a14 <main+0x380>
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <main+0x268>)
 80008c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008cc:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80008d0:	f340 80a0 	ble.w	8000a14 <main+0x380>
 80008d4:	4b29      	ldr	r3, [pc, #164]	; (800097c <main+0x2e8>)
 80008d6:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f000 809a 	beq.w	8000a14 <main+0x380>
	  			{	lr._data_available=0;
 80008e0:	4b26      	ldr	r3, [pc, #152]	; (800097c <main+0x2e8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
	  				wf_snd_flag_ticks=0;
 80008e8:	4b25      	ldr	r3, [pc, #148]	; (8000980 <main+0x2ec>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
	  				WF_SND_FLAG=0;
 80008ee:	4b22      	ldr	r3, [pc, #136]	; (8000978 <main+0x2e4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
		  			for(uint8_t i=0;i<=16;i++)
 80008f4:	2300      	movs	r3, #0
 80008f6:	77bb      	strb	r3, [r7, #30]
 80008f8:	e052      	b.n	80009a0 <main+0x30c>
 80008fa:	bf00      	nop
 80008fc:	20000b14 	.word	0x20000b14
 8000900:	40020000 	.word	0x40020000
 8000904:	20000024 	.word	0x20000024
 8000908:	20000b1a 	.word	0x20000b1a
 800090c:	2000002c 	.word	0x2000002c
 8000910:	20000b3a 	.word	0x20000b3a
 8000914:	20000038 	.word	0x20000038
 8000918:	20000b4a 	.word	0x20000b4a
 800091c:	20000048 	.word	0x20000048
 8000920:	20000b5a 	.word	0x20000b5a
 8000924:	20000050 	.word	0x20000050
 8000928:	20000b60 	.word	0x20000b60
 800092c:	20000060 	.word	0x20000060
 8000930:	20000b76 	.word	0x20000b76
 8000934:	20000070 	.word	0x20000070
 8000938:	20000b86 	.word	0x20000b86
 800093c:	20000080 	.word	0x20000080
 8000940:	20000b70 	.word	0x20000b70
 8000944:	200022c4 	.word	0x200022c4
 8000948:	20001874 	.word	0x20001874
 800094c:	20000084 	.word	0x20000084
 8000950:	10624dd3 	.word	0x10624dd3
 8000954:	0800d47c 	.word	0x0800d47c
 8000958:	0800d48c 	.word	0x0800d48c
 800095c:	20002d14 	.word	0x20002d14
 8000960:	20000244 	.word	0x20000244
 8000964:	20002d18 	.word	0x20002d18
 8000968:	20000288 	.word	0x20000288
 800096c:	200022d8 	.word	0x200022d8
 8000970:	0800d4a0 	.word	0x0800d4a0
 8000974:	0800d4b4 	.word	0x0800d4b4
 8000978:	200022e3 	.word	0x200022e3
 800097c:	20000310 	.word	0x20000310
 8000980:	20002d1c 	.word	0x20002d1c
		  				{
		  					datos[i]=ModBUS_F03_Read(&mb_lr,i);//datos[i]=ModBUS_F03_Read(&mb_lr,i);
 8000984:	7fbc      	ldrb	r4, [r7, #30]
 8000986:	7fbb      	ldrb	r3, [r7, #30]
 8000988:	4619      	mov	r1, r3
 800098a:	4864      	ldr	r0, [pc, #400]	; (8000b1c <main+0x488>)
 800098c:	f00a fe2f 	bl	800b5ee <ModBUS_F03_Read>
 8000990:	4603      	mov	r3, r0
 8000992:	461a      	mov	r2, r3
 8000994:	4b62      	ldr	r3, [pc, #392]	; (8000b20 <main+0x48c>)
 8000996:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		  			for(uint8_t i=0;i<=16;i++)
 800099a:	7fbb      	ldrb	r3, [r7, #30]
 800099c:	3301      	adds	r3, #1
 800099e:	77bb      	strb	r3, [r7, #30]
 80009a0:	7fbb      	ldrb	r3, [r7, #30]
 80009a2:	2b10      	cmp	r3, #16
 80009a4:	d9ee      	bls.n	8000984 <main+0x2f0>
		  				}

		  				if(httpPOST2(ENDPOINT, SERVER_IP,PORT,&datos,&decimal,16,TEST_1,post,body, 512))
 80009a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009aa:	9305      	str	r3, [sp, #20]
 80009ac:	4b5d      	ldr	r3, [pc, #372]	; (8000b24 <main+0x490>)
 80009ae:	9304      	str	r3, [sp, #16]
 80009b0:	4b5d      	ldr	r3, [pc, #372]	; (8000b28 <main+0x494>)
 80009b2:	9303      	str	r3, [sp, #12]
 80009b4:	2301      	movs	r3, #1
 80009b6:	9302      	str	r3, [sp, #8]
 80009b8:	2310      	movs	r3, #16
 80009ba:	9301      	str	r3, [sp, #4]
 80009bc:	4b5b      	ldr	r3, [pc, #364]	; (8000b2c <main+0x498>)
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	4b57      	ldr	r3, [pc, #348]	; (8000b20 <main+0x48c>)
 80009c2:	4a5b      	ldr	r2, [pc, #364]	; (8000b30 <main+0x49c>)
 80009c4:	495b      	ldr	r1, [pc, #364]	; (8000b34 <main+0x4a0>)
 80009c6:	485c      	ldr	r0, [pc, #368]	; (8000b38 <main+0x4a4>)
 80009c8:	f009 fea6 	bl	800a718 <httpPOST2>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d020      	beq.n	8000a14 <main+0x380>
							{
							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 80009d2:	4855      	ldr	r0, [pc, #340]	; (8000b28 <main+0x494>)
 80009d4:	f7ff fc0e 	bl	80001f4 <strlen>
 80009d8:	4603      	mov	r3, r0
 80009da:	461a      	mov	r2, r3
 80009dc:	2341      	movs	r3, #65	; 0x41
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	2300      	movs	r3, #0
 80009e2:	4951      	ldr	r1, [pc, #324]	; (8000b28 <main+0x494>)
 80009e4:	4855      	ldr	r0, [pc, #340]	; (8000b3c <main+0x4a8>)
 80009e6:	f00b fa23 	bl	800be30 <CopiaVector>
							wf._n_D2SND=strlen(post);
 80009ea:	484f      	ldr	r0, [pc, #316]	; (8000b28 <main+0x494>)
 80009ec:	f7ff fc02 	bl	80001f4 <strlen>
 80009f0:	4603      	mov	r3, r0
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b52      	ldr	r3, [pc, #328]	; (8000b40 <main+0x4ac>)
 80009f6:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
								if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 80009fa:	4b51      	ldr	r3, [pc, #324]	; (8000b40 <main+0x4ac>)
 80009fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d807      	bhi.n	8000a14 <main+0x380>
								{
									EnviarDatos(&wf);
 8000a04:	484e      	ldr	r0, [pc, #312]	; (8000b40 <main+0x4ac>)
 8000a06:	f004 fdff 	bl	8005608 <EnviarDatos>
									wf._estado_conexion=TCP_SND_EN_CURSO;
 8000a0a:	4b4d      	ldr	r3, [pc, #308]	; (8000b40 <main+0x4ac>)
 8000a0c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000a10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							}
	  			}
	  	  }
	  /**************[ FIN PIDO ENVIAR DATOS ]**************/

	  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000a14:	4b4b      	ldr	r3, [pc, #300]	; (8000b44 <main+0x4b0>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d003      	beq.n	8000a24 <main+0x390>
 8000a1c:	4b4a      	ldr	r3, [pc, #296]	; (8000b48 <main+0x4b4>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d140      	bne.n	8000aa6 <main+0x412>
	  		{
	  			if(FLAG_UART1==1)
 8000a24:	4b47      	ldr	r3, [pc, #284]	; (8000b44 <main+0x4b0>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d11c      	bne.n	8000a66 <main+0x3d2>
	  				{
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000a2c:	4b47      	ldr	r3, [pc, #284]	; (8000b4c <main+0x4b8>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b47      	ldr	r3, [pc, #284]	; (8000b50 <main+0x4bc>)
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	2301      	movs	r3, #1
 8000a36:	4947      	ldr	r1, [pc, #284]	; (8000b54 <main+0x4c0>)
 8000a38:	4847      	ldr	r0, [pc, #284]	; (8000b58 <main+0x4c4>)
 8000a3a:	f00b f9f9 	bl	800be30 <CopiaVector>
	  					FLAG_UART1=0;
 8000a3e:	4b41      	ldr	r3, [pc, #260]	; (8000b44 <main+0x4b0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]

	  						if (error_rxdata==3)
 8000a44:	4b45      	ldr	r3, [pc, #276]	; (8000b5c <main+0x4c8>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b03      	cmp	r3, #3
 8000a4a:	d102      	bne.n	8000a52 <main+0x3be>
	  						{
	  							error_rxdata=0;
 8000a4c:	4b43      	ldr	r3, [pc, #268]	; (8000b5c <main+0x4c8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
	  						}
	  						if (error_rxdata==1)
 8000a52:	4b42      	ldr	r3, [pc, #264]	; (8000b5c <main+0x4c8>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d105      	bne.n	8000a66 <main+0x3d2>
	  						{
	  							error_rxdata=5;
 8000a5a:	4b40      	ldr	r3, [pc, #256]	; (8000b5c <main+0x4c8>)
 8000a5c:	2205      	movs	r2, #5
 8000a5e:	701a      	strb	r2, [r3, #0]
	  							error_rxdata=0;
 8000a60:	4b3e      	ldr	r3, [pc, #248]	; (8000b5c <main+0x4c8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
	  						}
	  				}
	  			if(FLAG_TIMEOUT==1)
 8000a66:	4b38      	ldr	r3, [pc, #224]	; (8000b48 <main+0x4b4>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d102      	bne.n	8000a74 <main+0x3e0>
	  					{
	  						FLAG_TIMEOUT=0;
 8000a6e:	4b36      	ldr	r3, [pc, #216]	; (8000b48 <main+0x4b4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
	  					}

	  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000a74:	4b3a      	ldr	r3, [pc, #232]	; (8000b60 <main+0x4cc>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d114      	bne.n	8000aa6 <main+0x412>
	  				{
	  					/*************** Copio y proceso info recibida ***************/
	  					wf._n_orig=UART_RX_items;
 8000a7c:	4b33      	ldr	r3, [pc, #204]	; (8000b4c <main+0x4b8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a2f      	ldr	r2, [pc, #188]	; (8000b40 <main+0x4ac>)
 8000a82:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000a86:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <main+0x4b8>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4b31      	ldr	r3, [pc, #196]	; (8000b50 <main+0x4bc>)
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	2301      	movs	r3, #1
 8000a90:	4930      	ldr	r1, [pc, #192]	; (8000b54 <main+0x4c0>)
 8000a92:	4831      	ldr	r0, [pc, #196]	; (8000b58 <main+0x4c4>)
 8000a94:	f00b f9cc 	bl	800be30 <CopiaVector>
	  					resultado=AT_ESP8266_ND(&wf);
 8000a98:	4829      	ldr	r0, [pc, #164]	; (8000b40 <main+0x4ac>)
 8000a9a:	f004 fe9b 	bl	80057d4 <AT_ESP8266_ND>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4b30      	ldr	r3, [pc, #192]	; (8000b64 <main+0x4d0>)
 8000aa4:	701a      	strb	r2, [r3, #0]
	  					}

	  		}
// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT
	  		if((FLAG_UART2 == 1)||(lr.tmr_dly_ON==1))  //Evento de dato recibido LoRA debo verificar que es
 8000aa6:	4b30      	ldr	r3, [pc, #192]	; (8000b68 <main+0x4d4>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d005      	beq.n	8000aba <main+0x426>
 8000aae:	4b2f      	ldr	r3, [pc, #188]	; (8000b6c <main+0x4d8>)
 8000ab0:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	f040 80ea 	bne.w	8000c8e <main+0x5fa>
	  		{
	  			if(FLAG_UART2==1)
 8000aba:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <main+0x4d4>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	f040 8098 	bne.w	8000bf4 <main+0x560>
	  				{
	  				FLAG_UART2=0;
 8000ac4:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <main+0x4d4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
	  				LoRa_decode(&lr);
 8000aca:	4828      	ldr	r0, [pc, #160]	; (8000b6c <main+0x4d8>)
 8000acc:	f00a f854 	bl	800ab78 <LoRa_decode>
	  				if(lr._data_available)
 8000ad0:	4b26      	ldr	r3, [pc, #152]	; (8000b6c <main+0x4d8>)
 8000ad2:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 808c 	beq.w	8000bf4 <main+0x560>
	  				{
	  					CopiaVector(lr.dataRCV_hld,lr.dataRCV,lr._n_dataRCV,1,"D");
 8000adc:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <main+0x4d8>)
 8000ade:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	; 0x4d8
 8000ae2:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <main+0x4dc>)
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	4922      	ldr	r1, [pc, #136]	; (8000b74 <main+0x4e0>)
 8000aea:	4823      	ldr	r0, [pc, #140]	; (8000b78 <main+0x4e4>)
 8000aec:	f00b f9a0 	bl	800be30 <CopiaVector>
	  					char num[6];
	  					int i=0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
	  					int n=0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
	  					int lnn=0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
	  					lnn=strlen(lr.dataRCV_hld);
 8000afc:	481e      	ldr	r0, [pc, #120]	; (8000b78 <main+0x4e4>)
 8000afe:	f7ff fb79 	bl	80001f4 <strlen>
 8000b02:	4603      	mov	r3, r0
 8000b04:	60fb      	str	r3, [r7, #12]
	  					while(i < lnn-1)
 8000b06:	e070      	b.n	8000bea <main+0x556>
	  					{
							if( i!=0) i++;
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d002      	beq.n	8000b14 <main+0x480>
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	3301      	adds	r3, #1
 8000b12:	61bb      	str	r3, [r7, #24]
							int j=0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]

								while(lr.dataRCV_hld[i] != ';')
 8000b18:	e049      	b.n	8000bae <main+0x51a>
 8000b1a:	bf00      	nop
 8000b1c:	20001874 	.word	0x20001874
 8000b20:	200022e4 	.word	0x200022e4
 8000b24:	200020c4 	.word	0x200020c4
 8000b28:	20001ec4 	.word	0x20001ec4
 8000b2c:	200022c4 	.word	0x200022c4
 8000b30:	2000001c 	.word	0x2000001c
 8000b34:	2000000c 	.word	0x2000000c
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000dac 	.word	0x20000dac
 8000b40:	20000b14 	.word	0x20000b14
 8000b44:	200022dd 	.word	0x200022dd
 8000b48:	200022dc 	.word	0x200022dc
 8000b4c:	20002d20 	.word	0x20002d20
 8000b50:	20002d10 	.word	0x20002d10
 8000b54:	20002910 	.word	0x20002910
 8000b58:	200011ac 	.word	0x200011ac
 8000b5c:	200022e0 	.word	0x200022e0
 8000b60:	200022d8 	.word	0x200022d8
 8000b64:	200022df 	.word	0x200022df
 8000b68:	200022de 	.word	0x200022de
 8000b6c:	20000310 	.word	0x20000310
 8000b70:	0800d4cc 	.word	0x0800d4cc
 8000b74:	200004e6 	.word	0x200004e6
 8000b78:	20000666 	.word	0x20000666
								{
									if(lr.dataRCV_hld[i] != '.')
 8000b7c:	4a58      	ldr	r2, [pc, #352]	; (8000ce0 <main+0x64c>)
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	4413      	add	r3, r2
 8000b82:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b2e      	cmp	r3, #46	; 0x2e
 8000b8a:	d00d      	beq.n	8000ba8 <main+0x514>
									{
										num[j]=lr.dataRCV_hld[i];
 8000b8c:	4a54      	ldr	r2, [pc, #336]	; (8000ce0 <main+0x64c>)
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	4413      	add	r3, r2
 8000b92:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000b96:	7819      	ldrb	r1, [r3, #0]
 8000b98:	1d3a      	adds	r2, r7, #4
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	460a      	mov	r2, r1
 8000ba0:	701a      	strb	r2, [r3, #0]
										j++;
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	613b      	str	r3, [r7, #16]
									}
									i++;
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	3301      	adds	r3, #1
 8000bac:	61bb      	str	r3, [r7, #24]
								while(lr.dataRCV_hld[i] != ';')
 8000bae:	4a4c      	ldr	r2, [pc, #304]	; (8000ce0 <main+0x64c>)
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b3b      	cmp	r3, #59	; 0x3b
 8000bbc:	d1de      	bne.n	8000b7c <main+0x4e8>
								}
							num[j]='\0';
 8000bbe:	1d3a      	adds	r2, r7, #4
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
							ModBUS_F03_Assign(&mb_lr,n,atoi(num,10));
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	b2dc      	uxtb	r4, r3
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	210a      	movs	r1, #10
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f00b f978 	bl	800bec6 <atoi>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4621      	mov	r1, r4
 8000bde:	4841      	ldr	r0, [pc, #260]	; (8000ce4 <main+0x650>)
 8000be0:	f00a fcd6 	bl	800b590 <ModBUS_F03_Assign>
							n++;//Incremento posición  a almacenar
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	3301      	adds	r3, #1
 8000be8:	617b      	str	r3, [r7, #20]
	  					while(i < lnn-1)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	db89      	blt.n	8000b08 <main+0x474>
	  					}
	  				}
	  				}

	  			if(lr.tmr_dly_ON==1)
 8000bf4:	4b3a      	ldr	r3, [pc, #232]	; (8000ce0 <main+0x64c>)
 8000bf6:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d147      	bne.n	8000c8e <main+0x5fa>
	  				{
	  					lr.tmr_dly_ON=0;
 8000bfe:	4b38      	ldr	r3, [pc, #224]	; (8000ce0 <main+0x64c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
	  					LoRa_reset_sndTIMER(&lr,3000);
 8000c06:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000c0a:	4835      	ldr	r0, [pc, #212]	; (8000ce0 <main+0x64c>)
 8000c0c:	f009 ff98 	bl	800ab40 <LoRa_reset_sndTIMER>
						lr.dest_address[0]='\0';
 8000c10:	4b33      	ldr	r3, [pc, #204]	; (8000ce0 <main+0x64c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	759a      	strb	r2, [r3, #22]
						lr.txbuff[0]='\0';
 8000c16:	4b32      	ldr	r3, [pc, #200]	; (8000ce0 <main+0x64c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
			  			strncat(lr.dest_address,"1",1);
 8000c1e:	4832      	ldr	r0, [pc, #200]	; (8000ce8 <main+0x654>)
 8000c20:	f7ff fae8 	bl	80001f4 <strlen>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <main+0x654>)
 8000c2a:	4413      	add	r3, r2
 8000c2c:	492f      	ldr	r1, [pc, #188]	; (8000cec <main+0x658>)
 8000c2e:	461a      	mov	r2, r3
 8000c30:	460b      	mov	r3, r1
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	8013      	strh	r3, [r2, #0]
			  			strncat(lr.txbuff,"prueba de envio de mensaje de texto",strlen("prueba de envio de mensaje de texto"));
 8000c36:	482e      	ldr	r0, [pc, #184]	; (8000cf0 <main+0x65c>)
 8000c38:	f7ff fadc 	bl	80001f4 <strlen>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	461a      	mov	r2, r3
 8000c40:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <main+0x65c>)
 8000c42:	4413      	add	r3, r2
 8000c44:	4a2b      	ldr	r2, [pc, #172]	; (8000cf4 <main+0x660>)
 8000c46:	4614      	mov	r4, r2
 8000c48:	469c      	mov	ip, r3
 8000c4a:	f104 0e20 	add.w	lr, r4, #32
 8000c4e:	4665      	mov	r5, ip
 8000c50:	4626      	mov	r6, r4
 8000c52:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c54:	6028      	str	r0, [r5, #0]
 8000c56:	6069      	str	r1, [r5, #4]
 8000c58:	60aa      	str	r2, [r5, #8]
 8000c5a:	60eb      	str	r3, [r5, #12]
 8000c5c:	3410      	adds	r4, #16
 8000c5e:	f10c 0c10 	add.w	ip, ip, #16
 8000c62:	4574      	cmp	r4, lr
 8000c64:	d1f3      	bne.n	8000c4e <main+0x5ba>
 8000c66:	4663      	mov	r3, ip
 8000c68:	4622      	mov	r2, r4
 8000c6a:	6810      	ldr	r0, [r2, #0]
 8000c6c:	6018      	str	r0, [r3, #0]
			  			lr.txitems=strlen("prueba de envio de mensaje de texto");
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <main+0x64c>)
 8000c70:	2223      	movs	r2, #35	; 0x23
 8000c72:	f8c3 27e0 	str.w	r2, [r3, #2016]	; 0x7e0
		  				lr.estado=_SENT;										//
 8000c76:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <main+0x64c>)
 8000c78:	2214      	movs	r2, #20
 8000c7a:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
			  			error=LoRa_Send(&lr,&huart2);
 8000c7e:	491e      	ldr	r1, [pc, #120]	; (8000cf8 <main+0x664>)
 8000c80:	4817      	ldr	r0, [pc, #92]	; (8000ce0 <main+0x64c>)
 8000c82:	f009 feaf 	bl	800a9e4 <LoRa_Send>
 8000c86:	4603      	mov	r3, r0
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <main+0x668>)
 8000c8c:	701a      	strb	r2, [r3, #0]
	  				}
	  		}

	  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <main+0x66c>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d108      	bne.n	8000ca8 <main+0x614>
	  			{
	  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000c96:	2201      	movs	r2, #1
 8000c98:	491a      	ldr	r1, [pc, #104]	; (8000d04 <main+0x670>)
 8000c9a:	481b      	ldr	r0, [pc, #108]	; (8000d08 <main+0x674>)
 8000c9c:	f008 f844 	bl	8008d28 <WiFi_Conn_ND>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <main+0x678>)
 8000ca6:	701a      	strb	r2, [r3, #0]
	  			}
	  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <main+0x67c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	f47f adfa 	bne.w	80008a6 <main+0x212>
	  			{

	  				HW_RESET(&wf);
 8000cb2:	4815      	ldr	r0, [pc, #84]	; (8000d08 <main+0x674>)
 8000cb4:	f004 fbba 	bl	800542c <HW_RESET>
	  				HAL_Delay(5000);//210419
 8000cb8:	f241 3088 	movw	r0, #5000	; 0x1388
 8000cbc:	f001 f992 	bl	8001fe4 <HAL_Delay>
	  				esp_restart=0;
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <main+0x67c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
	  				wf._estado=0;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <main+0x674>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  				wf._estado_conexion=100;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <main+0x674>)
 8000cd0:	2264      	movs	r2, #100	; 0x64
 8000cd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  				ConectarWIFI(&wf);
 8000cd6:	480c      	ldr	r0, [pc, #48]	; (8000d08 <main+0x674>)
 8000cd8:	f004 fbfc 	bl	80054d4 <ConectarWIFI>
  if (ESP_HW_Init==1)
 8000cdc:	e5e3      	b.n	80008a6 <main+0x212>
 8000cde:	bf00      	nop
 8000ce0:	20000310 	.word	0x20000310
 8000ce4:	20001874 	.word	0x20001874
 8000ce8:	20000326 	.word	0x20000326
 8000cec:	0800d4d0 	.word	0x0800d4d0
 8000cf0:	200007ec 	.word	0x200007ec
 8000cf4:	0800d4d4 	.word	0x0800d4d4
 8000cf8:	20000288 	.word	0x20000288
 8000cfc:	200022d5 	.word	0x200022d5
 8000d00:	200022d8 	.word	0x200022d8
 8000d04:	20000244 	.word	0x20000244
 8000d08:	20000b14 	.word	0x20000b14
 8000d0c:	200022e2 	.word	0x200022e2
 8000d10:	200022e1 	.word	0x200022e1

08000d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b094      	sub	sp, #80	; 0x50
 8000d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1a:	f107 0320 	add.w	r3, r7, #32
 8000d1e:	2230      	movs	r2, #48	; 0x30
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f00b facf 	bl	800c2c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <SystemClock_Config+0xc8>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	4a26      	ldr	r2, [pc, #152]	; (8000ddc <SystemClock_Config+0xc8>)
 8000d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d46:	6413      	str	r3, [r2, #64]	; 0x40
 8000d48:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <SystemClock_Config+0xc8>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d54:	2300      	movs	r3, #0
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <SystemClock_Config+0xcc>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a20      	ldr	r2, [pc, #128]	; (8000de0 <SystemClock_Config+0xcc>)
 8000d5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <SystemClock_Config+0xcc>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d70:	2301      	movs	r3, #1
 8000d72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000d84:	230c      	movs	r3, #12
 8000d86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000d88:	2360      	movs	r3, #96	; 0x60
 8000d8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d90:	2304      	movs	r3, #4
 8000d92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d94:	f107 0320 	add.w	r3, r7, #32
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f001 fdb9 	bl	8002910 <HAL_RCC_OscConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000da4:	f000 fde0 	bl	8001968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da8:	230f      	movs	r3, #15
 8000daa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dac:	2302      	movs	r3, #2
 8000dae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	2103      	movs	r1, #3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f002 f81b 	bl	8002e00 <HAL_RCC_ClockConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000dd0:	f000 fdca 	bl	8001968 <Error_Handler>
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	3750      	adds	r7, #80	; 0x50
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40007000 	.word	0x40007000

08000de4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08e      	sub	sp, #56	; 0x38
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df8:	f107 0320 	add.w	r3, r7, #32
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
 8000e10:	615a      	str	r2, [r3, #20]
 8000e12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e14:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <MX_TIM2_Init+0xf4>)
 8000e16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8000e1c:	4b2e      	ldr	r3, [pc, #184]	; (8000ed8 <MX_TIM2_Init+0xf4>)
 8000e1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <MX_TIM2_Init+0xf4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8000e2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <MX_TIM2_Init+0xf4>)
 8000e2c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000e30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e32:	4b29      	ldr	r3, [pc, #164]	; (8000ed8 <MX_TIM2_Init+0xf4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e38:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <MX_TIM2_Init+0xf4>)
 8000e3a:	2280      	movs	r2, #128	; 0x80
 8000e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e3e:	4826      	ldr	r0, [pc, #152]	; (8000ed8 <MX_TIM2_Init+0xf4>)
 8000e40:	f002 f9be 	bl	80031c0 <HAL_TIM_Base_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000e4a:	f000 fd8d 	bl	8001968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e58:	4619      	mov	r1, r3
 8000e5a:	481f      	ldr	r0, [pc, #124]	; (8000ed8 <MX_TIM2_Init+0xf4>)
 8000e5c:	f002 fdc6 	bl	80039ec <HAL_TIM_ConfigClockSource>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000e66:	f000 fd7f 	bl	8001968 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000e6a:	481b      	ldr	r0, [pc, #108]	; (8000ed8 <MX_TIM2_Init+0xf4>)
 8000e6c:	f002 f9f7 	bl	800325e <HAL_TIM_OC_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000e76:	f000 fd77 	bl	8001968 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000e7a:	2108      	movs	r1, #8
 8000e7c:	4816      	ldr	r0, [pc, #88]	; (8000ed8 <MX_TIM2_Init+0xf4>)
 8000e7e:	f002 fbf7 	bl	8003670 <HAL_TIM_OnePulse_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000e88:	f000 fd6e 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e94:	f107 0320 	add.w	r3, r7, #32
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480f      	ldr	r0, [pc, #60]	; (8000ed8 <MX_TIM2_Init+0xf4>)
 8000e9c:	f003 f962 	bl	8004164 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8000ea6:	f000 fd5f 	bl	8001968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8000eaa:	2320      	movs	r3, #32
 8000eac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_TIM2_Init+0xf4>)
 8000ec2:	f002 fd37 	bl	8003934 <HAL_TIM_OC_ConfigChannel>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8000ecc:	f000 fd4c 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	3738      	adds	r7, #56	; 0x38
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200001b4 	.word	0x200001b4

08000edc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08e      	sub	sp, #56	; 0x38
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef0:	f107 0320 	add.w	r3, r7, #32
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
 8000f08:	615a      	str	r2, [r3, #20]
 8000f0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f0c:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <MX_TIM3_Init+0xf0>)
 8000f0e:	4a30      	ldr	r2, [pc, #192]	; (8000fd0 <MX_TIM3_Init+0xf4>)
 8000f10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8000f12:	4b2e      	ldr	r3, [pc, #184]	; (8000fcc <MX_TIM3_Init+0xf0>)
 8000f14:	2264      	movs	r2, #100	; 0x64
 8000f16:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f18:	4b2c      	ldr	r3, [pc, #176]	; (8000fcc <MX_TIM3_Init+0xf0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <MX_TIM3_Init+0xf0>)
 8000f20:	2296      	movs	r2, #150	; 0x96
 8000f22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f24:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <MX_TIM3_Init+0xf0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f2a:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <MX_TIM3_Init+0xf0>)
 8000f2c:	2280      	movs	r2, #128	; 0x80
 8000f2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f30:	4826      	ldr	r0, [pc, #152]	; (8000fcc <MX_TIM3_Init+0xf0>)
 8000f32:	f002 f945 	bl	80031c0 <HAL_TIM_Base_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000f3c:	f000 fd14 	bl	8001968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	481f      	ldr	r0, [pc, #124]	; (8000fcc <MX_TIM3_Init+0xf0>)
 8000f4e:	f002 fd4d 	bl	80039ec <HAL_TIM_ConfigClockSource>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000f58:	f000 fd06 	bl	8001968 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000f5c:	481b      	ldr	r0, [pc, #108]	; (8000fcc <MX_TIM3_Init+0xf0>)
 8000f5e:	f002 f97e 	bl	800325e <HAL_TIM_OC_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000f68:	f000 fcfe 	bl	8001968 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8000f6c:	2108      	movs	r1, #8
 8000f6e:	4817      	ldr	r0, [pc, #92]	; (8000fcc <MX_TIM3_Init+0xf0>)
 8000f70:	f002 fb7e 	bl	8003670 <HAL_TIM_OnePulse_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000f7a:	f000 fcf5 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f86:	f107 0320 	add.w	r3, r7, #32
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480f      	ldr	r0, [pc, #60]	; (8000fcc <MX_TIM3_Init+0xf0>)
 8000f8e:	f003 f8e9 	bl	8004164 <HAL_TIMEx_MasterConfigSynchronization>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000f98:	f000 fce6 	bl	8001968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8000f9c:	2320      	movs	r3, #32
 8000f9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2200      	movs	r2, #0
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4806      	ldr	r0, [pc, #24]	; (8000fcc <MX_TIM3_Init+0xf0>)
 8000fb4:	f002 fcbe 	bl	8003934 <HAL_TIM_OC_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000fbe:	f000 fcd3 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	3738      	adds	r7, #56	; 0x38
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200001fc 	.word	0x200001fc
 8000fd0:	40000400 	.word	0x40000400

08000fd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <MX_USART1_UART_Init+0x50>)
 8000fdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8000fe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fe4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 800100c:	f003 f92c 	bl	8004268 <HAL_UART_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001016:	f000 fca7 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000244 	.word	0x20000244
 8001024:	40011000 	.word	0x40011000

08001028 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_USART2_UART_Init+0x4c>)
 800102e:	4a12      	ldr	r2, [pc, #72]	; (8001078 <MX_USART2_UART_Init+0x50>)
 8001030:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <MX_USART2_UART_Init+0x4c>)
 8001034:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001038:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_USART2_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_USART2_UART_Init+0x4c>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <MX_USART2_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_USART2_UART_Init+0x4c>)
 800104e:	220c      	movs	r2, #12
 8001050:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <MX_USART2_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_USART2_UART_Init+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_USART2_UART_Init+0x4c>)
 8001060:	f003 f902 	bl	8004268 <HAL_UART_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800106a:	f000 fc7d 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000288 	.word	0x20000288
 8001078:	40004400 	.word	0x40004400

0800107c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_USART6_UART_Init+0x4c>)
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <MX_USART6_UART_Init+0x50>)
 8001084:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <MX_USART6_UART_Init+0x4c>)
 8001088:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800108c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_USART6_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_USART6_UART_Init+0x4c>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <MX_USART6_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_USART6_UART_Init+0x4c>)
 80010a2:	220c      	movs	r2, #12
 80010a4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <MX_USART6_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_USART6_UART_Init+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_USART6_UART_Init+0x4c>)
 80010b4:	f003 f8d8 	bl	8004268 <HAL_UART_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80010be:	f000 fc53 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200002cc 	.word	0x200002cc
 80010cc:	40011400 	.word	0x40011400

080010d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	4b38      	ldr	r3, [pc, #224]	; (80011cc <MX_GPIO_Init+0xfc>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a37      	ldr	r2, [pc, #220]	; (80011cc <MX_GPIO_Init+0xfc>)
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b35      	ldr	r3, [pc, #212]	; (80011cc <MX_GPIO_Init+0xfc>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b31      	ldr	r3, [pc, #196]	; (80011cc <MX_GPIO_Init+0xfc>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a30      	ldr	r2, [pc, #192]	; (80011cc <MX_GPIO_Init+0xfc>)
 800110c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <MX_GPIO_Init+0xfc>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <MX_GPIO_Init+0xfc>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a29      	ldr	r2, [pc, #164]	; (80011cc <MX_GPIO_Init+0xfc>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b27      	ldr	r3, [pc, #156]	; (80011cc <MX_GPIO_Init+0xfc>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	4b23      	ldr	r3, [pc, #140]	; (80011cc <MX_GPIO_Init+0xfc>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a22      	ldr	r2, [pc, #136]	; (80011cc <MX_GPIO_Init+0xfc>)
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <MX_GPIO_Init+0xfc>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800115c:	481c      	ldr	r0, [pc, #112]	; (80011d0 <MX_GPIO_Init+0x100>)
 800115e:	f001 fba3 	bl	80028a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WIFI_EN_Pin, GPIO_PIN_SET);
 8001162:	2201      	movs	r2, #1
 8001164:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001168:	481a      	ldr	r0, [pc, #104]	; (80011d4 <MX_GPIO_Init+0x104>)
 800116a:	f001 fb9d 	bl	80028a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 800116e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	4812      	ldr	r0, [pc, #72]	; (80011d0 <MX_GPIO_Init+0x100>)
 8001188:	f001 f926 	bl	80023d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_BTN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin;
 800118c:	2301      	movs	r3, #1
 800118e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001190:	2300      	movs	r3, #0
 8001192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_BTN_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	480d      	ldr	r0, [pc, #52]	; (80011d4 <MX_GPIO_Init+0x104>)
 80011a0:	f001 f91a 	bl	80023d8 <HAL_GPIO_Init>



  /*Configure GPIO pin : WIFI_EN_Pin */
  GPIO_InitStruct.Pin = WIFI_EN_Pin;
 80011a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_EN_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_GPIO_Init+0x104>)
 80011be:	f001 f90b 	bl	80023d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011c2:	bf00      	nop
 80011c4:	3728      	adds	r7, #40	; 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020800 	.word	0x40020800
 80011d4:	40020000 	.word	0x40020000

080011d8 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	e009      	b.n	80011fc <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fa27 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3301      	adds	r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	dbf1      	blt.n	80011e8 <ITM0_Write+0x10>
  }
  return len;
 8001204:	683b      	ldr	r3, [r7, #0]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 8001214:	4b55      	ldr	r3, [pc, #340]	; (800136c <SysTick_Handler+0x15c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	4a54      	ldr	r2, [pc, #336]	; (800136c <SysTick_Handler+0x15c>)
 800121c:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 800121e:	4b54      	ldr	r3, [pc, #336]	; (8001370 <SysTick_Handler+0x160>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	3301      	adds	r3, #1
 8001224:	4a52      	ldr	r2, [pc, #328]	; (8001370 <SysTick_Handler+0x160>)
 8001226:	6013      	str	r3, [r2, #0]
	if(mb_lr._w_answer) MB_TOUT_ticks++;
 8001228:	4b52      	ldr	r3, [pc, #328]	; (8001374 <SysTick_Handler+0x164>)
 800122a:	7a1b      	ldrb	r3, [r3, #8]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d004      	beq.n	800123a <SysTick_Handler+0x2a>
 8001230:	4b51      	ldr	r3, [pc, #324]	; (8001378 <SysTick_Handler+0x168>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	4a50      	ldr	r2, [pc, #320]	; (8001378 <SysTick_Handler+0x168>)
 8001238:	6013      	str	r3, [r2, #0]
	if ( mb_lr._w_answer && (mb_lr._timeout < MB_TOUT_ticks))
 800123a:	4b4e      	ldr	r3, [pc, #312]	; (8001374 <SysTick_Handler+0x164>)
 800123c:	7a1b      	ldrb	r3, [r3, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00c      	beq.n	800125c <SysTick_Handler+0x4c>
 8001242:	4b4c      	ldr	r3, [pc, #304]	; (8001374 <SysTick_Handler+0x164>)
 8001244:	88db      	ldrh	r3, [r3, #6]
 8001246:	461a      	mov	r2, r3
 8001248:	4b4b      	ldr	r3, [pc, #300]	; (8001378 <SysTick_Handler+0x168>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	429a      	cmp	r2, r3
 800124e:	da05      	bge.n	800125c <SysTick_Handler+0x4c>
		{
			mb_lr._w_answer=0;
 8001250:	4b48      	ldr	r3, [pc, #288]	; (8001374 <SysTick_Handler+0x164>)
 8001252:	2200      	movs	r2, #0
 8001254:	721a      	strb	r2, [r3, #8]
			MB_TOUT_ticks=0;
 8001256:	4b48      	ldr	r3, [pc, #288]	; (8001378 <SysTick_Handler+0x168>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
		}
// ENVIO DATOS LoRa ---------------------------------------------------------------//

	if(lr.tmr_dly_en==1)
 800125c:	4b47      	ldr	r3, [pc, #284]	; (800137c <SysTick_Handler+0x16c>)
 800125e:	f893 37ed 	ldrb.w	r3, [r3, #2029]	; 0x7ed
 8001262:	2b01      	cmp	r3, #1
 8001264:	d116      	bne.n	8001294 <SysTick_Handler+0x84>
	{
		lr.tmr_dlyCNT++;
 8001266:	4b45      	ldr	r3, [pc, #276]	; (800137c <SysTick_Handler+0x16c>)
 8001268:	f8d3 37f4 	ldr.w	r3, [r3, #2036]	; 0x7f4
 800126c:	3301      	adds	r3, #1
 800126e:	4a43      	ldr	r2, [pc, #268]	; (800137c <SysTick_Handler+0x16c>)
 8001270:	f8c2 37f4 	str.w	r3, [r2, #2036]	; 0x7f4
		if(lr.tmr_dlyCNT > lr.tmr_dly)
 8001274:	4b41      	ldr	r3, [pc, #260]	; (800137c <SysTick_Handler+0x16c>)
 8001276:	f8d3 27f4 	ldr.w	r2, [r3, #2036]	; 0x7f4
 800127a:	4b40      	ldr	r3, [pc, #256]	; (800137c <SysTick_Handler+0x16c>)
 800127c:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
 8001280:	429a      	cmp	r2, r3
 8001282:	dd07      	ble.n	8001294 <SysTick_Handler+0x84>
		{
			lr.tmr_dly_ON=1;
 8001284:	4b3d      	ldr	r3, [pc, #244]	; (800137c <SysTick_Handler+0x16c>)
 8001286:	2201      	movs	r2, #1
 8001288:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
			lr.tmr_dly_en=0;
 800128c:	4b3b      	ldr	r3, [pc, #236]	; (800137c <SysTick_Handler+0x16c>)
 800128e:	2200      	movs	r2, #0
 8001290:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		}
	}
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 8001294:	4b3a      	ldr	r3, [pc, #232]	; (8001380 <SysTick_Handler+0x170>)
 8001296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800129a:	f240 2261 	movw	r2, #609	; 0x261
 800129e:	4293      	cmp	r3, r2
 80012a0:	d005      	beq.n	80012ae <SysTick_Handler+0x9e>
 80012a2:	4b37      	ldr	r3, [pc, #220]	; (8001380 <SysTick_Handler+0x170>)
 80012a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012a8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80012ac:	d109      	bne.n	80012c2 <SysTick_Handler+0xb2>
 80012ae:	4b34      	ldr	r3, [pc, #208]	; (8001380 <SysTick_Handler+0x170>)
 80012b0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d104      	bne.n	80012c2 <SysTick_Handler+0xb2>
 80012b8:	4b32      	ldr	r3, [pc, #200]	; (8001384 <SysTick_Handler+0x174>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	4a31      	ldr	r2, [pc, #196]	; (8001384 <SysTick_Handler+0x174>)
 80012c0:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 2000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;
 80012c2:	4b30      	ldr	r3, [pc, #192]	; (8001384 <SysTick_Handler+0x174>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012ca:	db0c      	blt.n	80012e6 <SysTick_Handler+0xd6>
 80012cc:	4b2c      	ldr	r3, [pc, #176]	; (8001380 <SysTick_Handler+0x170>)
 80012ce:	f8d3 3ab4 	ldr.w	r3, [r3, #2740]	; 0xab4
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d007      	beq.n	80012e6 <SysTick_Handler+0xd6>
 80012d6:	4b2a      	ldr	r3, [pc, #168]	; (8001380 <SysTick_Handler+0x170>)
 80012d8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d102      	bne.n	80012e6 <SysTick_Handler+0xd6>
 80012e0:	4b29      	ldr	r3, [pc, #164]	; (8001388 <SysTick_Handler+0x178>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 80012e6:	4b21      	ldr	r3, [pc, #132]	; (800136c <SysTick_Handler+0x15c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b64      	cmp	r3, #100	; 0x64
 80012ec:	d113      	bne.n	8001316 <SysTick_Handler+0x106>
  {

	  ms_ticks=0;
 80012ee:	4b1f      	ldr	r3, [pc, #124]	; (800136c <SysTick_Handler+0x15c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 80012f4:	4b25      	ldr	r3, [pc, #148]	; (800138c <SysTick_Handler+0x17c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	4a24      	ldr	r2, [pc, #144]	; (800138c <SysTick_Handler+0x17c>)
 80012fc:	6013      	str	r3, [r2, #0]

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80012fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001302:	4823      	ldr	r0, [pc, #140]	; (8001390 <SysTick_Handler+0x180>)
 8001304:	f001 fae9 	bl	80028da <HAL_GPIO_TogglePin>

	  if(min_ticks==2)//if(min_ticks==10)
 8001308:	4b20      	ldr	r3, [pc, #128]	; (800138c <SysTick_Handler+0x17c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d102      	bne.n	8001316 <SysTick_Handler+0x106>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001310:	4b1e      	ldr	r3, [pc, #120]	; (800138c <SysTick_Handler+0x17c>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <SysTick_Handler+0x184>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d104      	bne.n	8001328 <SysTick_Handler+0x118>
 800131e:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <SysTick_Handler+0x188>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <SysTick_Handler+0x188>)
 8001326:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <SysTick_Handler+0x188>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	dd0f      	ble.n	8001350 <SysTick_Handler+0x140>
	{
		USART1_ticks=0;
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <SysTick_Handler+0x188>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <SysTick_Handler+0x18c>)
 8001338:	2201      	movs	r2, #1
 800133a:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <SysTick_Handler+0x184>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <SysTick_Handler+0x190>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <SysTick_Handler+0x194>)
 8001348:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <SysTick_Handler+0x190>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001350:	f000 fe28 	bl	8001fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <SysTick_Handler+0x170>)
 8001356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800135a:	2b04      	cmp	r3, #4
 800135c:	d126      	bne.n	80013ac <SysTick_Handler+0x19c>
	{
		ticks++;
 800135e:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <SysTick_Handler+0x198>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	3301      	adds	r3, #1
 8001364:	4a10      	ldr	r2, [pc, #64]	; (80013a8 <SysTick_Handler+0x198>)
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	e023      	b.n	80013b2 <SysTick_Handler+0x1a2>
 800136a:	bf00      	nop
 800136c:	20002308 	.word	0x20002308
 8001370:	20002d28 	.word	0x20002d28
 8001374:	20001874 	.word	0x20001874
 8001378:	20002d2c 	.word	0x20002d2c
 800137c:	20000310 	.word	0x20000310
 8001380:	20000b14 	.word	0x20000b14
 8001384:	20002d1c 	.word	0x20002d1c
 8001388:	200022e3 	.word	0x200022e3
 800138c:	2000230c 	.word	0x2000230c
 8001390:	40020800 	.word	0x40020800
 8001394:	200022db 	.word	0x200022db
 8001398:	20002d3c 	.word	0x20002d3c
 800139c:	20002d40 	.word	0x20002d40
 80013a0:	20002d38 	.word	0x20002d38
 80013a4:	20002d44 	.word	0x20002d44
 80013a8:	20002d30 	.word	0x20002d30
	}
	else
	{
		ticks=0;
 80013ac:	4b4f      	ldr	r3, [pc, #316]	; (80014ec <SysTick_Handler+0x2dc>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
	}

    if((wf._estado_conexion==TCP_CONN_EN_CURSO) || (wf._estado_conexion==CONEXION_EN_CURSO)) wf._ticks2++;	//Conteo
 80013b2:	4b4f      	ldr	r3, [pc, #316]	; (80014f0 <SysTick_Handler+0x2e0>)
 80013b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013b8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80013bc:	d004      	beq.n	80013c8 <SysTick_Handler+0x1b8>
 80013be:	4b4c      	ldr	r3, [pc, #304]	; (80014f0 <SysTick_Handler+0x2e0>)
 80013c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013c4:	2bc8      	cmp	r3, #200	; 0xc8
 80013c6:	d106      	bne.n	80013d6 <SysTick_Handler+0x1c6>
 80013c8:	4b49      	ldr	r3, [pc, #292]	; (80014f0 <SysTick_Handler+0x2e0>)
 80013ca:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 80013ce:	3301      	adds	r3, #1
 80013d0:	4a47      	ldr	r2, [pc, #284]	; (80014f0 <SysTick_Handler+0x2e0>)
 80013d2:	f8c2 3cbc 	str.w	r3, [r2, #3260]	; 0xcbc

 	if((wf._estado_conexion==CONEXION_EN_CURSO) && (wf._ticks2 >10000))
 80013d6:	4b46      	ldr	r3, [pc, #280]	; (80014f0 <SysTick_Handler+0x2e0>)
 80013d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013dc:	2bc8      	cmp	r3, #200	; 0xc8
 80013de:	d10d      	bne.n	80013fc <SysTick_Handler+0x1ec>
 80013e0:	4b43      	ldr	r3, [pc, #268]	; (80014f0 <SysTick_Handler+0x2e0>)
 80013e2:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 80013e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80013ea:	4293      	cmp	r3, r2
 80013ec:	dd06      	ble.n	80013fc <SysTick_Handler+0x1ec>
 	{
 		wf._ticks2=0;
 80013ee:	4b40      	ldr	r3, [pc, #256]	; (80014f0 <SysTick_Handler+0x2e0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
 		esp_restart=1;
 80013f6:	4b3f      	ldr	r3, [pc, #252]	; (80014f4 <SysTick_Handler+0x2e4>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	701a      	strb	r2, [r3, #0]
 	}
 	if(wf._estado_conexion==TCP_CONN_ERROR || wf._estado_conexion==CONEXION_ERROR) wf._ticks2++;
 80013fc:	4b3c      	ldr	r3, [pc, #240]	; (80014f0 <SysTick_Handler+0x2e0>)
 80013fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001402:	f240 225d 	movw	r2, #605	; 0x25d
 8001406:	4293      	cmp	r3, r2
 8001408:	d004      	beq.n	8001414 <SysTick_Handler+0x204>
 800140a:	4b39      	ldr	r3, [pc, #228]	; (80014f0 <SysTick_Handler+0x2e0>)
 800140c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001410:	2bcd      	cmp	r3, #205	; 0xcd
 8001412:	d106      	bne.n	8001422 <SysTick_Handler+0x212>
 8001414:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <SysTick_Handler+0x2e0>)
 8001416:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 800141a:	3301      	adds	r3, #1
 800141c:	4a34      	ldr	r2, [pc, #208]	; (80014f0 <SysTick_Handler+0x2e0>)
 800141e:	f8c2 3cbc 	str.w	r3, [r2, #3260]	; 0xcbc

if(wf._ejecucion==1)
 8001422:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <SysTick_Handler+0x2e0>)
 8001424:	f8d3 3ab4 	ldr.w	r3, [r3, #2740]	; 0xab4
 8001428:	2b01      	cmp	r3, #1
 800142a:	d158      	bne.n	80014de <SysTick_Handler+0x2ce>
	{
		if (FLAG_TIMEOUT!=1)
 800142c:	4b32      	ldr	r3, [pc, #200]	; (80014f8 <SysTick_Handler+0x2e8>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d017      	beq.n	8001464 <SysTick_Handler+0x254>
		{
			if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 8001434:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <SysTick_Handler+0x2e0>)
 8001436:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 800143a:	2b02      	cmp	r3, #2
 800143c:	d006      	beq.n	800144c <SysTick_Handler+0x23c>
 800143e:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <SysTick_Handler+0x2e0>)
 8001440:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001444:	3301      	adds	r3, #1
 8001446:	4a2a      	ldr	r2, [pc, #168]	; (80014f0 <SysTick_Handler+0x2e0>)
 8001448:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
			if(wf._instruccion==2) wf._ticks2++;
 800144c:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <SysTick_Handler+0x2e0>)
 800144e:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8001452:	2b02      	cmp	r3, #2
 8001454:	d106      	bne.n	8001464 <SysTick_Handler+0x254>
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <SysTick_Handler+0x2e0>)
 8001458:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 800145c:	3301      	adds	r3, #1
 800145e:	4a24      	ldr	r2, [pc, #144]	; (80014f0 <SysTick_Handler+0x2e0>)
 8001460:	f8c2 3cbc 	str.w	r3, [r2, #3260]	; 0xcbc
		}
		if ((wf._instruccion!=2)&&(wf._ticks > 5500))
 8001464:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <SysTick_Handler+0x2e0>)
 8001466:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 800146a:	2b02      	cmp	r3, #2
 800146c:	d018      	beq.n	80014a0 <SysTick_Handler+0x290>
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <SysTick_Handler+0x2e0>)
 8001470:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001474:	f241 527c 	movw	r2, #5500	; 0x157c
 8001478:	4293      	cmp	r3, r2
 800147a:	dd11      	ble.n	80014a0 <SysTick_Handler+0x290>
		{
			FLAG_TIMEOUT=1;
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <SysTick_Handler+0x2e8>)
 800147e:	2201      	movs	r2, #1
 8001480:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001482:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <SysTick_Handler+0x2ec>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	f242 020c 	movw	r2, #8204	; 0x200c
 800148c:	4293      	cmp	r3, r2
 800148e:	d107      	bne.n	80014a0 <SysTick_Handler+0x290>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8001490:	2201      	movs	r2, #1
 8001492:	491b      	ldr	r1, [pc, #108]	; (8001500 <SysTick_Handler+0x2f0>)
 8001494:	4819      	ldr	r0, [pc, #100]	; (80014fc <SysTick_Handler+0x2ec>)
 8001496:	f003 f83a 	bl	800450e <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <SysTick_Handler+0x2f4>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
			}
		}
		if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <SysTick_Handler+0x2e0>)
 80014a2:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d11d      	bne.n	80014e6 <SysTick_Handler+0x2d6>
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <SysTick_Handler+0x2e0>)
 80014ac:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 80014b0:	f245 0214 	movw	r2, #20500	; 0x5014
 80014b4:	4293      	cmp	r3, r2
 80014b6:	dd16      	ble.n	80014e6 <SysTick_Handler+0x2d6>
		{
			FLAG_TIMEOUT=1;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <SysTick_Handler+0x2e8>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <SysTick_Handler+0x2ec>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	f242 020c 	movw	r2, #8204	; 0x200c
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d10c      	bne.n	80014e6 <SysTick_Handler+0x2d6>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 80014cc:	2201      	movs	r2, #1
 80014ce:	490c      	ldr	r1, [pc, #48]	; (8001500 <SysTick_Handler+0x2f0>)
 80014d0:	480a      	ldr	r0, [pc, #40]	; (80014fc <SysTick_Handler+0x2ec>)
 80014d2:	f003 f81c 	bl	800450e <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <SysTick_Handler+0x2f4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
	else
	{
		wf._ticks=0;
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 80014dc:	e003      	b.n	80014e6 <SysTick_Handler+0x2d6>
		wf._ticks=0;
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <SysTick_Handler+0x2e0>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20002d30 	.word	0x20002d30
 80014f0:	20000b14 	.word	0x20000b14
 80014f4:	200022e1 	.word	0x200022e1
 80014f8:	200022dc 	.word	0x200022dc
 80014fc:	20000244 	.word	0x20000244
 8001500:	20002d14 	.word	0x20002d14
 8001504:	200022d9 	.word	0x200022d9

08001508 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a22      	ldr	r2, [pc, #136]	; (80015a0 <HAL_UART_ErrorCallback+0x98>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d11c      	bne.n	8001554 <HAL_UART_ErrorCallback+0x4c>
	{
		 volatile int aore=0;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		 wf._debug_count9++;
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <HAL_UART_ErrorCallback+0x9c>)
 8001524:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8001528:	3301      	adds	r3, #1
 800152a:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <HAL_UART_ErrorCallback+0x9c>)
 800152c:	f8c2 3d28 	str.w	r3, [r2, #3368]	; 0xd28
		 aore=ERRUART->Instance->SR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	617b      	str	r3, [r7, #20]
		 bore=ERRUART->Instance->DR;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	613b      	str	r3, [r7, #16]
		 HAL_UART_DeInit(ERRUART);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f002 fede 	bl	8004302 <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 8001546:	f7ff fd45 	bl	8000fd4 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 800154a:	2201      	movs	r2, #1
 800154c:	4916      	ldr	r1, [pc, #88]	; (80015a8 <HAL_UART_ErrorCallback+0xa0>)
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f002 ffdd 	bl	800450e <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a14      	ldr	r2, [pc, #80]	; (80015ac <HAL_UART_ErrorCallback+0xa4>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d11c      	bne.n	8001598 <HAL_UART_ErrorCallback+0x90>
	{
		 volatile int aore=0;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]

		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		 wf._debug_count9++;
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_UART_ErrorCallback+0x9c>)
 8001568:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 800156c:	3301      	adds	r3, #1
 800156e:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <HAL_UART_ErrorCallback+0x9c>)
 8001570:	f8c2 3d28 	str.w	r3, [r2, #3368]	; 0xd28
		 aore=ERRUART->Instance->SR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	60fb      	str	r3, [r7, #12]
		 bore=ERRUART->Instance->DR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	60bb      	str	r3, [r7, #8]
		 HAL_UART_DeInit(ERRUART);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f002 febc 	bl	8004302 <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 800158a:	f7ff fd4d 	bl	8001028 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART2_RX_byte,1);
 800158e:	2201      	movs	r2, #1
 8001590:	4907      	ldr	r1, [pc, #28]	; (80015b0 <HAL_UART_ErrorCallback+0xa8>)
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f002 ffbb 	bl	800450e <HAL_UART_Receive_IT>
	}
}
 8001598:	bf00      	nop
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40011000 	.word	0x40011000
 80015a4:	20000b14 	.word	0x20000b14
 80015a8:	20002d14 	.word	0x20002d14
 80015ac:	40004400 	.word	0x40004400
 80015b0:	20002d18 	.word	0x20002d18

080015b4 <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a2c      	ldr	r2, [pc, #176]	; (8001674 <HAL_UART_RxCpltCallback+0xc0>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d124      	bne.n	8001610 <HAL_UART_RxCpltCallback+0x5c>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <HAL_UART_RxCpltCallback+0xc4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a2c      	ldr	r2, [pc, #176]	; (800167c <HAL_UART_RxCpltCallback+0xc8>)
 80015cc:	7811      	ldrb	r1, [r2, #0]
 80015ce:	4a2c      	ldr	r2, [pc, #176]	; (8001680 <HAL_UART_RxCpltCallback+0xcc>)
 80015d0:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 80015d2:	4b29      	ldr	r3, [pc, #164]	; (8001678 <HAL_UART_RxCpltCallback+0xc4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	4a27      	ldr	r2, [pc, #156]	; (8001678 <HAL_UART_RxCpltCallback+0xc4>)
 80015da:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=1022) UART_RX_pos=1022;
 80015dc:	4b26      	ldr	r3, [pc, #152]	; (8001678 <HAL_UART_RxCpltCallback+0xc4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f240 32fd 	movw	r2, #1021	; 0x3fd
 80015e4:	4293      	cmp	r3, r2
 80015e6:	dd03      	ble.n	80015f0 <HAL_UART_RxCpltCallback+0x3c>
 80015e8:	4b23      	ldr	r3, [pc, #140]	; (8001678 <HAL_UART_RxCpltCallback+0xc4>)
 80015ea:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80015ee:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 80015f0:	2100      	movs	r1, #0
 80015f2:	4824      	ldr	r0, [pc, #144]	; (8001684 <HAL_UART_RxCpltCallback+0xd0>)
 80015f4:	f001 fe8c 	bl	8003310 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 80015f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015fc:	2201      	movs	r2, #1
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <HAL_UART_RxCpltCallback+0xd4>)
 8001602:	2201      	movs	r2, #1
 8001604:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 8001606:	2201      	movs	r2, #1
 8001608:	491c      	ldr	r1, [pc, #112]	; (800167c <HAL_UART_RxCpltCallback+0xc8>)
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f002 ff7f 	bl	800450e <HAL_UART_Receive_IT>
		 }
// LoRa USART2 TIMER3
	if(INTSERIE->Instance==USART2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a1d      	ldr	r2, [pc, #116]	; (800168c <HAL_UART_RxCpltCallback+0xd8>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d127      	bne.n	800166a <HAL_UART_RxCpltCallback+0xb6>
		 {
			UART2_RX_vect[UART2_RX_pos]=UART2_RX_byte[0];
 800161a:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <HAL_UART_RxCpltCallback+0xdc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a1d      	ldr	r2, [pc, #116]	; (8001694 <HAL_UART_RxCpltCallback+0xe0>)
 8001620:	7811      	ldrb	r1, [r2, #0]
 8001622:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <HAL_UART_RxCpltCallback+0xe4>)
 8001624:	54d1      	strb	r1, [r2, r3]
			UART2_RX_pos++;
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <HAL_UART_RxCpltCallback+0xdc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	3301      	adds	r3, #1
 800162c:	4a18      	ldr	r2, [pc, #96]	; (8001690 <HAL_UART_RxCpltCallback+0xdc>)
 800162e:	6013      	str	r3, [r2, #0]
			if(UART2_RX_pos>=512) UART2_RX_pos=512;
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_UART_RxCpltCallback+0xdc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001638:	db03      	blt.n	8001642 <HAL_UART_RxCpltCallback+0x8e>
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <HAL_UART_RxCpltCallback+0xdc>)
 800163c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001640:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001642:	2201      	movs	r2, #1
 8001644:	2102      	movs	r1, #2
 8001646:	4815      	ldr	r0, [pc, #84]	; (800169c <HAL_UART_RxCpltCallback+0xe8>)
 8001648:	f001 f92e 	bl	80028a8 <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 800164c:	2100      	movs	r1, #0
 800164e:	4814      	ldr	r0, [pc, #80]	; (80016a0 <HAL_UART_RxCpltCallback+0xec>)
 8001650:	f001 fe5e 	bl	8003310 <HAL_TIM_OC_Start_IT>
			TIM3->CNT=1;
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <HAL_UART_RxCpltCallback+0xf0>)
 8001656:	2201      	movs	r2, #1
 8001658:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART2_TMR=1;	//Habilito Timeout de software
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <HAL_UART_RxCpltCallback+0xf4>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART2_RX_byte,1);
 8001660:	2201      	movs	r2, #1
 8001662:	490c      	ldr	r1, [pc, #48]	; (8001694 <HAL_UART_RxCpltCallback+0xe0>)
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f002 ff52 	bl	800450e <HAL_UART_Receive_IT>
		 }
 }
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40011000 	.word	0x40011000
 8001678:	20002d48 	.word	0x20002d48
 800167c:	20002d14 	.word	0x20002d14
 8001680:	20002310 	.word	0x20002310
 8001684:	200001b4 	.word	0x200001b4
 8001688:	200022d9 	.word	0x200022d9
 800168c:	40004400 	.word	0x40004400
 8001690:	20002d4c 	.word	0x20002d4c
 8001694:	20002d18 	.word	0x20002d18
 8001698:	20002710 	.word	0x20002710
 800169c:	40020000 	.word	0x40020000
 80016a0:	200001fc 	.word	0x200001fc
 80016a4:	40000400 	.word	0x40000400
 80016a8:	200022da 	.word	0x200022da

080016ac <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	6078      	str	r0, [r7, #4]
// WiFi	USART 1 TIMER2
		if(TIMER->Instance==TIM2)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016bc:	d12d      	bne.n	800171a <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 80016be:	2100      	movs	r1, #0
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f001 ff23 	bl	800350c <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 80016c6:	4b39      	ldr	r3, [pc, #228]	; (80017ac <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 80016cc:	4b38      	ldr	r3, [pc, #224]	; (80017b0 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 80016d2:	4b38      	ldr	r3, [pc, #224]	; (80017b4 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a38      	ldr	r2, [pc, #224]	; (80017b8 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 80016d8:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 80016da:	4b36      	ldr	r3, [pc, #216]	; (80017b4 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[1022]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 80016e0:	4b36      	ldr	r3, [pc, #216]	; (80017bc <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 23fe 	strb.w	r2, [r3, #1022]	; 0x3fe
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 80016e8:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	2301      	movs	r3, #1
 80016f2:	4932      	ldr	r1, [pc, #200]	; (80017bc <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 80016f4:	4833      	ldr	r0, [pc, #204]	; (80017c4 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 80016f6:	f00a fb9b 	bl	800be30 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 80016fa:	2201      	movs	r2, #1
 80016fc:	4932      	ldr	r1, [pc, #200]	; (80017c8 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 80016fe:	4833      	ldr	r0, [pc, #204]	; (80017cc <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 8001700:	f002 ff05 	bl	800450e <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 8001704:	4b32      	ldr	r3, [pc, #200]	; (80017d0 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8001706:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800170a:	2b01      	cmp	r3, #1
 800170c:	d105      	bne.n	800171a <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 800170e:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4619      	mov	r1, r3
 8001714:	482b      	ldr	r0, [pc, #172]	; (80017c4 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8001716:	f7ff fd5f 	bl	80011d8 <ITM0_Write>
				 }
		}
// LoRa USART2 TIMER3
		if(TIMER->Instance==TIM3)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a2d      	ldr	r2, [pc, #180]	; (80017d4 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d13f      	bne.n	80017a4 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8001724:	2100      	movs	r1, #0
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f001 fef0 	bl	800350c <HAL_TIM_OC_Stop_IT>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 800172c:	2200      	movs	r2, #0
 800172e:	2102      	movs	r1, #2
 8001730:	4829      	ldr	r0, [pc, #164]	; (80017d8 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8001732:	f001 f8b9 	bl	80028a8 <HAL_GPIO_WritePin>
				 FLAG_UART2=1;
 8001736:	4b29      	ldr	r3, [pc, #164]	; (80017dc <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
				 EN_UART2_TMR=0;
 800173c:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
				 UART2_RX_items=UART2_RX_pos;
 8001742:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a28      	ldr	r2, [pc, #160]	; (80017e8 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8001748:	6013      	str	r3, [r2, #0]
				 UART2_RX_pos=0;
 800174a:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
				 UART2_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8001750:	4b26      	ldr	r3, [pc, #152]	; (80017ec <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(lr.rxbuff,UART2_RX_vect,UART2_RX_items,1,CMP_VECT);
 8001758:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2301      	movs	r3, #1
 8001762:	4922      	ldr	r1, [pc, #136]	; (80017ec <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8001764:	4822      	ldr	r0, [pc, #136]	; (80017f0 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8001766:	f00a fb63 	bl	800be30 <CopiaVector>
				 lr.rxitems=UART2_RX_items;
 800176a:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a21      	ldr	r2, [pc, #132]	; (80017f4 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8001770:	f8c2 37dc 	str.w	r3, [r2, #2012]	; 0x7dc
				 HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8001774:	2201      	movs	r2, #1
 8001776:	4920      	ldr	r1, [pc, #128]	; (80017f8 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8001778:	4820      	ldr	r0, [pc, #128]	; (80017fc <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 800177a:	f002 fec8 	bl	800450e <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8001780:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8001784:	2b01      	cmp	r3, #1
 8001786:	d10d      	bne.n	80017a4 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
				 {
					 ITM0_Write("\r\nData LoRa recibida = ",strlen("\r\nData LoRa recibida = "));
 8001788:	2117      	movs	r1, #23
 800178a:	481d      	ldr	r0, [pc, #116]	; (8001800 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 800178c:	f7ff fd24 	bl	80011d8 <ITM0_Write>
					 ITM0_Write((uint8_t *)UART2_RX_vect,UART2_RX_items);
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4619      	mov	r1, r3
 8001796:	4815      	ldr	r0, [pc, #84]	; (80017ec <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8001798:	f7ff fd1e 	bl	80011d8 <ITM0_Write>
					 ITM0_Write("\r\n",strlen("\r\n"));
 800179c:	2102      	movs	r1, #2
 800179e:	4819      	ldr	r0, [pc, #100]	; (8001804 <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 80017a0:	f7ff fd1a 	bl	80011d8 <ITM0_Write>
				 }
		}
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200022dd 	.word	0x200022dd
 80017b0:	200022d9 	.word	0x200022d9
 80017b4:	20002d48 	.word	0x20002d48
 80017b8:	20002d20 	.word	0x20002d20
 80017bc:	20002310 	.word	0x20002310
 80017c0:	20002d10 	.word	0x20002d10
 80017c4:	20002910 	.word	0x20002910
 80017c8:	20002d14 	.word	0x20002d14
 80017cc:	20000244 	.word	0x20000244
 80017d0:	20000b14 	.word	0x20000b14
 80017d4:	40000400 	.word	0x40000400
 80017d8:	40020000 	.word	0x40020000
 80017dc:	200022de 	.word	0x200022de
 80017e0:	200022da 	.word	0x200022da
 80017e4:	20002d4c 	.word	0x20002d4c
 80017e8:	20002d24 	.word	0x20002d24
 80017ec:	20002710 	.word	0x20002710
 80017f0:	20000366 	.word	0x20000366
 80017f4:	20000310 	.word	0x20000310
 80017f8:	20002d18 	.word	0x20002d18
 80017fc:	20000288 	.word	0x20000288
 8001800:	0800d4f8 	.word	0x0800d4f8
 8001804:	0800d510 	.word	0x0800d510

08001808 <ESP8266_HW_Init>:

uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af06      	add	r7, sp, #24
 800180e:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 8001810:	2364      	movs	r3, #100	; 0x64
 8001812:	220c      	movs	r2, #12
 8001814:	4945      	ldr	r1, [pc, #276]	; (800192c <ESP8266_HW_Init+0x124>)
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f002 fda2 	bl	8004360 <HAL_UART_Transmit>
		  HAL_Delay(500);
 800181c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001820:	f000 fbe0 	bl	8001fe4 <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 8001824:	4b42      	ldr	r3, [pc, #264]	; (8001930 <ESP8266_HW_Init+0x128>)
 8001826:	2205      	movs	r2, #5
 8001828:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
		  wf._n_orig=UART_RX_items;
 800182c:	4b41      	ldr	r3, [pc, #260]	; (8001934 <ESP8266_HW_Init+0x12c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a3f      	ldr	r2, [pc, #252]	; (8001930 <ESP8266_HW_Init+0x128>)
 8001832:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 8001836:	e00e      	b.n	8001856 <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 8001838:	4b3e      	ldr	r3, [pc, #248]	; (8001934 <ESP8266_HW_Init+0x12c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a3c      	ldr	r2, [pc, #240]	; (8001930 <ESP8266_HW_Init+0x128>)
 800183e:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
			  	  if (ESP_ticks>=5000)
 8001842:	4b3d      	ldr	r3, [pc, #244]	; (8001938 <ESP8266_HW_Init+0x130>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f241 3287 	movw	r2, #4999	; 0x1387
 800184a:	4293      	cmp	r3, r2
 800184c:	dd03      	ble.n	8001856 <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 800184e:	4b3b      	ldr	r3, [pc, #236]	; (800193c <ESP8266_HW_Init+0x134>)
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
			  		 break;
 8001854:	e014      	b.n	8001880 <ESP8266_HW_Init+0x78>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 8001856:	4b3a      	ldr	r3, [pc, #232]	; (8001940 <ESP8266_HW_Init+0x138>)
 8001858:	2200      	movs	r2, #0
 800185a:	9205      	str	r2, [sp, #20]
 800185c:	9304      	str	r3, [sp, #16]
 800185e:	4b39      	ldr	r3, [pc, #228]	; (8001944 <ESP8266_HW_Init+0x13c>)
 8001860:	9303      	str	r3, [sp, #12]
 8001862:	4b39      	ldr	r3, [pc, #228]	; (8001948 <ESP8266_HW_Init+0x140>)
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	4b39      	ldr	r3, [pc, #228]	; (800194c <ESP8266_HW_Init+0x144>)
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	4b39      	ldr	r3, [pc, #228]	; (8001950 <ESP8266_HW_Init+0x148>)
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	4b39      	ldr	r3, [pc, #228]	; (8001954 <ESP8266_HW_Init+0x14c>)
 8001870:	4a39      	ldr	r2, [pc, #228]	; (8001958 <ESP8266_HW_Init+0x150>)
 8001872:	493a      	ldr	r1, [pc, #232]	; (800195c <ESP8266_HW_Init+0x154>)
 8001874:	483a      	ldr	r0, [pc, #232]	; (8001960 <ESP8266_HW_Init+0x158>)
 8001876:	f009 fee9 	bl	800b64c <FT_String_ND>
 800187a:	4603      	mov	r3, r0
 800187c:	2b01      	cmp	r3, #1
 800187e:	d1db      	bne.n	8001838 <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 8001880:	4b2e      	ldr	r3, [pc, #184]	; (800193c <ESP8266_HW_Init+0x134>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d12b      	bne.n	80018e0 <ESP8266_HW_Init+0xd8>
		  {
			  wf._n_fcomp=strlen("ready");
 8001888:	4b29      	ldr	r3, [pc, #164]	; (8001930 <ESP8266_HW_Init+0x128>)
 800188a:	2205      	movs	r2, #5
 800188c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
			  wf._n_orig=UART_RX_items;
 8001890:	4b28      	ldr	r3, [pc, #160]	; (8001934 <ESP8266_HW_Init+0x12c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a26      	ldr	r2, [pc, #152]	; (8001930 <ESP8266_HW_Init+0x128>)
 8001896:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 800189a:	e00a      	b.n	80018b2 <ESP8266_HW_Init+0xaa>
			  {
				  wf._n_orig=UART_RX_items;
 800189c:	4b25      	ldr	r3, [pc, #148]	; (8001934 <ESP8266_HW_Init+0x12c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a23      	ldr	r2, [pc, #140]	; (8001930 <ESP8266_HW_Init+0x128>)
 80018a2:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
				  if (ESP_ticks>=5000)
 80018a6:	4b24      	ldr	r3, [pc, #144]	; (8001938 <ESP8266_HW_Init+0x130>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f241 3287 	movw	r2, #4999	; 0x1387
 80018ae:	4293      	cmp	r3, r2
 80018b0:	dc15      	bgt.n	80018de <ESP8266_HW_Init+0xd6>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 80018b2:	4b23      	ldr	r3, [pc, #140]	; (8001940 <ESP8266_HW_Init+0x138>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	9205      	str	r2, [sp, #20]
 80018b8:	9304      	str	r3, [sp, #16]
 80018ba:	4b22      	ldr	r3, [pc, #136]	; (8001944 <ESP8266_HW_Init+0x13c>)
 80018bc:	9303      	str	r3, [sp, #12]
 80018be:	4b22      	ldr	r3, [pc, #136]	; (8001948 <ESP8266_HW_Init+0x140>)
 80018c0:	9302      	str	r3, [sp, #8]
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <ESP8266_HW_Init+0x144>)
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <ESP8266_HW_Init+0x148>)
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	4b22      	ldr	r3, [pc, #136]	; (8001954 <ESP8266_HW_Init+0x14c>)
 80018cc:	4a22      	ldr	r2, [pc, #136]	; (8001958 <ESP8266_HW_Init+0x150>)
 80018ce:	4923      	ldr	r1, [pc, #140]	; (800195c <ESP8266_HW_Init+0x154>)
 80018d0:	4823      	ldr	r0, [pc, #140]	; (8001960 <ESP8266_HW_Init+0x158>)
 80018d2:	f009 febb 	bl	800b64c <FT_String_ND>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d1df      	bne.n	800189c <ESP8266_HW_Init+0x94>
 80018dc:	e000      	b.n	80018e0 <ESP8266_HW_Init+0xd8>
					 {
					 break;
 80018de:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 80018e0:	4b15      	ldr	r3, [pc, #84]	; (8001938 <ESP8266_HW_Init+0x130>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f241 3287 	movw	r2, #4999	; 0x1387
 80018e8:	4293      	cmp	r3, r2
 80018ea:	dc06      	bgt.n	80018fa <ESP8266_HW_Init+0xf2>
		  {
			  ESP_REinit=10;
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <ESP8266_HW_Init+0x15c>)
 80018ee:	220a      	movs	r2, #10
 80018f0:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <ESP8266_HW_Init+0x130>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	e008      	b.n	800190c <ESP8266_HW_Init+0x104>
		  }
		  else
		  {
			  ESP_REinit++;
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <ESP8266_HW_Init+0x15c>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	3301      	adds	r3, #1
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b18      	ldr	r3, [pc, #96]	; (8001964 <ESP8266_HW_Init+0x15c>)
 8001904:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <ESP8266_HW_Init+0x130>)
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <ESP8266_HW_Init+0x15c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b05      	cmp	r3, #5
 8001912:	f67f af7d 	bls.w	8001810 <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <ESP8266_HW_Init+0x15c>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b0a      	cmp	r3, #10
 800191c:	d101      	bne.n	8001922 <ESP8266_HW_Init+0x11a>
	  {
		  return(1);
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <ESP8266_HW_Init+0x11c>
	  }
	  else
	  {
		  return(0);
 8001922:	2300      	movs	r3, #0
	  }
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	0800d514 	.word	0x0800d514
 8001930:	20000b14 	.word	0x20000b14
 8001934:	20002d20 	.word	0x20002d20
 8001938:	20002d28 	.word	0x20002d28
 800193c:	200022d7 	.word	0x200022d7
 8001940:	20001868 	.word	0x20001868
 8001944:	200015ac 	.word	0x200015ac
 8001948:	20002d34 	.word	0x20002d34
 800194c:	20001800 	.word	0x20001800
 8001950:	200013ac 	.word	0x200013ac
 8001954:	2000180c 	.word	0x2000180c
 8001958:	0800d524 	.word	0x0800d524
 800195c:	200017f8 	.word	0x200017f8
 8001960:	20002910 	.word	0x20002910
 8001964:	200022d6 	.word	0x200022d6

08001968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800196c:	b672      	cpsid	i
}
 800196e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001970:	e7fe      	b.n	8001970 <Error_Handler+0x8>
	...

08001974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_MspInit+0x4c>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <HAL_MspInit+0x4c>)
 8001984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001988:	6453      	str	r3, [r2, #68]	; 0x44
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <HAL_MspInit+0x4c>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	603b      	str	r3, [r7, #0]
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_MspInit+0x4c>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <HAL_MspInit+0x4c>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	6413      	str	r3, [r2, #64]	; 0x40
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_MspInit+0x4c>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800

080019c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d4:	d116      	bne.n	8001a04 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <HAL_TIM_Base_MspInit+0x80>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	4a19      	ldr	r2, [pc, #100]	; (8001a44 <HAL_TIM_Base_MspInit+0x80>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6413      	str	r3, [r2, #64]	; 0x40
 80019e6:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <HAL_TIM_Base_MspInit+0x80>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	201c      	movs	r0, #28
 80019f8:	f000 fc17 	bl	800222a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019fc:	201c      	movs	r0, #28
 80019fe:	f000 fc30 	bl	8002262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a02:	e01a      	b.n	8001a3a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0f      	ldr	r2, [pc, #60]	; (8001a48 <HAL_TIM_Base_MspInit+0x84>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d115      	bne.n	8001a3a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_TIM_Base_MspInit+0x80>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <HAL_TIM_Base_MspInit+0x80>)
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_TIM_Base_MspInit+0x80>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	201d      	movs	r0, #29
 8001a30:	f000 fbfb 	bl	800222a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a34:	201d      	movs	r0, #29
 8001a36:	f000 fc14 	bl	8002262 <HAL_NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40000400 	.word	0x40000400

08001a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08e      	sub	sp, #56	; 0x38
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a54      	ldr	r2, [pc, #336]	; (8001bbc <HAL_UART_MspInit+0x170>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d135      	bne.n	8001ada <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]
 8001a72:	4b53      	ldr	r3, [pc, #332]	; (8001bc0 <HAL_UART_MspInit+0x174>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a52      	ldr	r2, [pc, #328]	; (8001bc0 <HAL_UART_MspInit+0x174>)
 8001a78:	f043 0310 	orr.w	r3, r3, #16
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b50      	ldr	r3, [pc, #320]	; (8001bc0 <HAL_UART_MspInit+0x174>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	623b      	str	r3, [r7, #32]
 8001a88:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	4b4c      	ldr	r3, [pc, #304]	; (8001bc0 <HAL_UART_MspInit+0x174>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a4b      	ldr	r2, [pc, #300]	; (8001bc0 <HAL_UART_MspInit+0x174>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b49      	ldr	r3, [pc, #292]	; (8001bc0 <HAL_UART_MspInit+0x174>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_WF_Pin|USART1_RX_WF_Pin;
 8001aa6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ab8:	2307      	movs	r3, #7
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4840      	ldr	r0, [pc, #256]	; (8001bc4 <HAL_UART_MspInit+0x178>)
 8001ac4:	f000 fc88 	bl	80023d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2100      	movs	r1, #0
 8001acc:	2025      	movs	r0, #37	; 0x25
 8001ace:	f000 fbac 	bl	800222a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ad2:	2025      	movs	r0, #37	; 0x25
 8001ad4:	f000 fbc5 	bl	8002262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ad8:	e06b      	b.n	8001bb2 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a3a      	ldr	r2, [pc, #232]	; (8001bc8 <HAL_UART_MspInit+0x17c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d134      	bne.n	8001b4e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61bb      	str	r3, [r7, #24]
 8001ae8:	4b35      	ldr	r3, [pc, #212]	; (8001bc0 <HAL_UART_MspInit+0x174>)
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	4a34      	ldr	r2, [pc, #208]	; (8001bc0 <HAL_UART_MspInit+0x174>)
 8001aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af2:	6413      	str	r3, [r2, #64]	; 0x40
 8001af4:	4b32      	ldr	r3, [pc, #200]	; (8001bc0 <HAL_UART_MspInit+0x174>)
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <HAL_UART_MspInit+0x174>)
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	4a2d      	ldr	r2, [pc, #180]	; (8001bc0 <HAL_UART_MspInit+0x174>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b10:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <HAL_UART_MspInit+0x174>)
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART2_TX_LR_Pin|USART2_RX_LR_Pin;
 8001b1c:	230c      	movs	r3, #12
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b2c:	2307      	movs	r3, #7
 8001b2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b34:	4619      	mov	r1, r3
 8001b36:	4823      	ldr	r0, [pc, #140]	; (8001bc4 <HAL_UART_MspInit+0x178>)
 8001b38:	f000 fc4e 	bl	80023d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2100      	movs	r1, #0
 8001b40:	2026      	movs	r0, #38	; 0x26
 8001b42:	f000 fb72 	bl	800222a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b46:	2026      	movs	r0, #38	; 0x26
 8001b48:	f000 fb8b 	bl	8002262 <HAL_NVIC_EnableIRQ>
}
 8001b4c:	e031      	b.n	8001bb2 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1e      	ldr	r2, [pc, #120]	; (8001bcc <HAL_UART_MspInit+0x180>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d12c      	bne.n	8001bb2 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b58:	2300      	movs	r3, #0
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <HAL_UART_MspInit+0x174>)
 8001b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b60:	4a17      	ldr	r2, [pc, #92]	; (8001bc0 <HAL_UART_MspInit+0x174>)
 8001b62:	f043 0320 	orr.w	r3, r3, #32
 8001b66:	6453      	str	r3, [r2, #68]	; 0x44
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_UART_MspInit+0x174>)
 8001b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6c:	f003 0320 	and.w	r3, r3, #32
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <HAL_UART_MspInit+0x174>)
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	4a10      	ldr	r2, [pc, #64]	; (8001bc0 <HAL_UART_MspInit+0x174>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6313      	str	r3, [r2, #48]	; 0x30
 8001b84:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <HAL_UART_MspInit+0x174>)
 8001b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b90:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001baa:	4619      	mov	r1, r3
 8001bac:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <HAL_UART_MspInit+0x178>)
 8001bae:	f000 fc13 	bl	80023d8 <HAL_GPIO_Init>
}
 8001bb2:	bf00      	nop
 8001bb4:	3738      	adds	r7, #56	; 0x38
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40011000 	.word	0x40011000
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40004400 	.word	0x40004400
 8001bcc:	40011400 	.word	0x40011400

08001bd0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <HAL_UART_MspDeInit+0x80>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d10e      	bne.n	8001c00 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001be2:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <HAL_UART_MspDeInit+0x84>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	4a1b      	ldr	r2, [pc, #108]	; (8001c54 <HAL_UART_MspDeInit+0x84>)
 8001be8:	f023 0310 	bic.w	r3, r3, #16
 8001bec:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART1_TX_WF_Pin|USART1_RX_WF_Pin);
 8001bee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001bf2:	4819      	ldr	r0, [pc, #100]	; (8001c58 <HAL_UART_MspDeInit+0x88>)
 8001bf4:	f000 fd74 	bl	80026e0 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001bf8:	2025      	movs	r0, #37	; 0x25
 8001bfa:	f000 fb40 	bl	800227e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8001bfe:	e022      	b.n	8001c46 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a15      	ldr	r2, [pc, #84]	; (8001c5c <HAL_UART_MspDeInit+0x8c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d10d      	bne.n	8001c26 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_UART_MspDeInit+0x84>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	4a11      	ldr	r2, [pc, #68]	; (8001c54 <HAL_UART_MspDeInit+0x84>)
 8001c10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001c14:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART2_TX_LR_Pin|USART2_RX_LR_Pin);
 8001c16:	210c      	movs	r1, #12
 8001c18:	480f      	ldr	r0, [pc, #60]	; (8001c58 <HAL_UART_MspDeInit+0x88>)
 8001c1a:	f000 fd61 	bl	80026e0 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001c1e:	2026      	movs	r0, #38	; 0x26
 8001c20:	f000 fb2d 	bl	800227e <HAL_NVIC_DisableIRQ>
}
 8001c24:	e00f      	b.n	8001c46 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART6)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a0d      	ldr	r2, [pc, #52]	; (8001c60 <HAL_UART_MspDeInit+0x90>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d10a      	bne.n	8001c46 <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART6_CLK_DISABLE();
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_UART_MspDeInit+0x84>)
 8001c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c34:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <HAL_UART_MspDeInit+0x84>)
 8001c36:	f023 0320 	bic.w	r3, r3, #32
 8001c3a:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8001c3c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001c40:	4805      	ldr	r0, [pc, #20]	; (8001c58 <HAL_UART_MspDeInit+0x88>)
 8001c42:	f000 fd4d 	bl	80026e0 <HAL_GPIO_DeInit>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40011000 	.word	0x40011000
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	40004400 	.word	0x40004400
 8001c60:	40011400 	.word	0x40011400

08001c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <NMI_Handler+0x4>

08001c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c6e:	e7fe      	b.n	8001c6e <HardFault_Handler+0x4>

08001c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <MemManage_Handler+0x4>

08001c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <BusFault_Handler+0x4>

08001c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <UsageFault_Handler+0x4>

08001c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <TIM2_IRQHandler+0x10>)
 8001cb2:	f001 fd37 	bl	8003724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200001b4 	.word	0x200001b4

08001cc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <TIM3_IRQHandler+0x10>)
 8001cc6:	f001 fd2d 	bl	8003724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200001fc 	.word	0x200001fc

08001cd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <USART1_IRQHandler+0x10>)
 8001cda:	f002 fc49 	bl	8004570 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000244 	.word	0x20000244

08001ce8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <USART2_IRQHandler+0x10>)
 8001cee:	f002 fc3f 	bl	8004570 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000288 	.word	0x20000288

08001cfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
	return 1;
 8001d00:	2301      	movs	r3, #1
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <_kill>:

int _kill(int pid, int sig)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d16:	f00a fb93 	bl	800c440 <__errno>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2216      	movs	r2, #22
 8001d1e:	601a      	str	r2, [r3, #0]
	return -1;
 8001d20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <_exit>:

void _exit (int status)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ffe7 	bl	8001d0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d3e:	e7fe      	b.n	8001d3e <_exit+0x12>

08001d40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	e00a      	b.n	8001d68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d52:	f3af 8000 	nop.w
 8001d56:	4601      	mov	r1, r0
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	60ba      	str	r2, [r7, #8]
 8001d5e:	b2ca      	uxtb	r2, r1
 8001d60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	3301      	adds	r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	dbf0      	blt.n	8001d52 <_read+0x12>
	}

return len;
 8001d70:	687b      	ldr	r3, [r7, #4]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e009      	b.n	8001da0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	60ba      	str	r2, [r7, #8]
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	dbf1      	blt.n	8001d8c <_write+0x12>
	}
	return len;
 8001da8:	687b      	ldr	r3, [r7, #4]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <_close>:

int _close(int file)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
	return -1;
 8001dba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dda:	605a      	str	r2, [r3, #4]
	return 0;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <_isatty>:

int _isatty(int file)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
	return 1;
 8001df2:	2301      	movs	r3, #1
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e24:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <_sbrk+0x5c>)
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <_sbrk+0x60>)
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <_sbrk+0x64>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d102      	bne.n	8001e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <_sbrk+0x64>)
 8001e3a:	4a12      	ldr	r2, [pc, #72]	; (8001e84 <_sbrk+0x68>)
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <_sbrk+0x64>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d207      	bcs.n	8001e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e4c:	f00a faf8 	bl	800c440 <__errno>
 8001e50:	4603      	mov	r3, r0
 8001e52:	220c      	movs	r2, #12
 8001e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5a:	e009      	b.n	8001e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <_sbrk+0x64>)
 8001e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20020000 	.word	0x20020000
 8001e7c:	00000400 	.word	0x00000400
 8001e80:	20002d50 	.word	0x20002d50
 8001e84:	20002ea8 	.word	0x20002ea8

08001e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <SystemInit+0x20>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e92:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <SystemInit+0x20>)
 8001e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eb0:	480d      	ldr	r0, [pc, #52]	; (8001ee8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eb2:	490e      	ldr	r1, [pc, #56]	; (8001eec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001eb4:	4a0e      	ldr	r2, [pc, #56]	; (8001ef0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb8:	e002      	b.n	8001ec0 <LoopCopyDataInit>

08001eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ebe:	3304      	adds	r3, #4

08001ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec4:	d3f9      	bcc.n	8001eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec6:	4a0b      	ldr	r2, [pc, #44]	; (8001ef4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ec8:	4c0b      	ldr	r4, [pc, #44]	; (8001ef8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ecc:	e001      	b.n	8001ed2 <LoopFillZerobss>

08001ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed0:	3204      	adds	r2, #4

08001ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed4:	d3fb      	bcc.n	8001ece <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ed6:	f7ff ffd7 	bl	8001e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eda:	f00a fab7 	bl	800c44c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ede:	f7fe fbd9 	bl	8000694 <main>
  bx  lr    
 8001ee2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ee4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eec:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8001ef0:	0800dc04 	.word	0x0800dc04
  ldr r2, =_sbss
 8001ef4:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8001ef8:	20002ea4 	.word	0x20002ea4

08001efc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001efc:	e7fe      	b.n	8001efc <ADC_IRQHandler>
	...

08001f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <HAL_Init+0x40>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0d      	ldr	r2, [pc, #52]	; (8001f40 <HAL_Init+0x40>)
 8001f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_Init+0x40>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <HAL_Init+0x40>)
 8001f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <HAL_Init+0x40>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <HAL_Init+0x40>)
 8001f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f28:	2003      	movs	r0, #3
 8001f2a:	f000 f973 	bl	8002214 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f2e:	200f      	movs	r0, #15
 8001f30:	f000 f808 	bl	8001f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f34:	f7ff fd1e 	bl	8001974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023c00 	.word	0x40023c00

08001f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_InitTick+0x54>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_InitTick+0x58>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4619      	mov	r1, r3
 8001f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 f999 	bl	800229a <HAL_SYSTICK_Config>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e00e      	b.n	8001f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b0f      	cmp	r3, #15
 8001f76:	d80a      	bhi.n	8001f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f80:	f000 f953 	bl	800222a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f84:	4a06      	ldr	r2, [pc, #24]	; (8001fa0 <HAL_InitTick+0x5c>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e000      	b.n	8001f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000084 	.word	0x20000084
 8001f9c:	2000008c 	.word	0x2000008c
 8001fa0:	20000088 	.word	0x20000088

08001fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x20>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb6:	6013      	str	r3, [r2, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	2000008c 	.word	0x2000008c
 8001fc8:	20002d54 	.word	0x20002d54

08001fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_GetTick+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20002d54 	.word	0x20002d54

08001fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fec:	f7ff ffee 	bl	8001fcc <HAL_GetTick>
 8001ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d005      	beq.n	800200a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <HAL_Delay+0x44>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800200a:	bf00      	nop
 800200c:	f7ff ffde 	bl	8001fcc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	429a      	cmp	r2, r3
 800201a:	d8f7      	bhi.n	800200c <HAL_Delay+0x28>
  {
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	2000008c 	.word	0x2000008c

0800202c <__NVIC_SetPriorityGrouping>:
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	60d3      	str	r3, [r2, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_GetPriorityGrouping>:
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <__NVIC_GetPriorityGrouping+0x18>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	f003 0307 	and.w	r3, r3, #7
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_EnableIRQ>:
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	db0b      	blt.n	80020ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	4907      	ldr	r1, [pc, #28]	; (80020c8 <__NVIC_EnableIRQ+0x38>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	2001      	movs	r0, #1
 80020b2:	fa00 f202 	lsl.w	r2, r0, r2
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000e100 	.word	0xe000e100

080020cc <__NVIC_DisableIRQ>:
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	db12      	blt.n	8002104 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	f003 021f 	and.w	r2, r3, #31
 80020e4:	490a      	ldr	r1, [pc, #40]	; (8002110 <__NVIC_DisableIRQ+0x44>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	2001      	movs	r0, #1
 80020ee:	fa00 f202 	lsl.w	r2, r0, r2
 80020f2:	3320      	adds	r3, #32
 80020f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80020f8:	f3bf 8f4f 	dsb	sy
}
 80020fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80020fe:	f3bf 8f6f 	isb	sy
}
 8002102:	bf00      	nop
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000e100 	.word	0xe000e100

08002114 <__NVIC_SetPriority>:
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	6039      	str	r1, [r7, #0]
 800211e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002124:	2b00      	cmp	r3, #0
 8002126:	db0a      	blt.n	800213e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	490c      	ldr	r1, [pc, #48]	; (8002160 <__NVIC_SetPriority+0x4c>)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	0112      	lsls	r2, r2, #4
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	440b      	add	r3, r1
 8002138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800213c:	e00a      	b.n	8002154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	b2da      	uxtb	r2, r3
 8002142:	4908      	ldr	r1, [pc, #32]	; (8002164 <__NVIC_SetPriority+0x50>)
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	3b04      	subs	r3, #4
 800214c:	0112      	lsls	r2, r2, #4
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	440b      	add	r3, r1
 8002152:	761a      	strb	r2, [r3, #24]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000e100 	.word	0xe000e100
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <NVIC_EncodePriority>:
{
 8002168:	b480      	push	{r7}
 800216a:	b089      	sub	sp, #36	; 0x24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f1c3 0307 	rsb	r3, r3, #7
 8002182:	2b04      	cmp	r3, #4
 8002184:	bf28      	it	cs
 8002186:	2304      	movcs	r3, #4
 8002188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3304      	adds	r3, #4
 800218e:	2b06      	cmp	r3, #6
 8002190:	d902      	bls.n	8002198 <NVIC_EncodePriority+0x30>
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3b03      	subs	r3, #3
 8002196:	e000      	b.n	800219a <NVIC_EncodePriority+0x32>
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800219c:	f04f 32ff 	mov.w	r2, #4294967295
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43da      	mvns	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	401a      	ands	r2, r3
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b0:	f04f 31ff 	mov.w	r1, #4294967295
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ba:	43d9      	mvns	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c0:	4313      	orrs	r3, r2
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3724      	adds	r7, #36	; 0x24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <SysTick_Config>:
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e0:	d301      	bcc.n	80021e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00f      	b.n	8002206 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <SysTick_Config+0x40>)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ee:	210f      	movs	r1, #15
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295
 80021f4:	f7ff ff8e 	bl	8002114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <SysTick_Config+0x40>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021fe:	4b04      	ldr	r3, [pc, #16]	; (8002210 <SysTick_Config+0x40>)
 8002200:	2207      	movs	r2, #7
 8002202:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	e000e010 	.word	0xe000e010

08002214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff ff05 	bl	800202c <__NVIC_SetPriorityGrouping>
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800222a:	b580      	push	{r7, lr}
 800222c:	b086      	sub	sp, #24
 800222e:	af00      	add	r7, sp, #0
 8002230:	4603      	mov	r3, r0
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
 8002236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800223c:	f7ff ff1a 	bl	8002074 <__NVIC_GetPriorityGrouping>
 8002240:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68b9      	ldr	r1, [r7, #8]
 8002246:	6978      	ldr	r0, [r7, #20]
 8002248:	f7ff ff8e 	bl	8002168 <NVIC_EncodePriority>
 800224c:	4602      	mov	r2, r0
 800224e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002252:	4611      	mov	r1, r2
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff5d 	bl	8002114 <__NVIC_SetPriority>
}
 800225a:	bf00      	nop
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	4603      	mov	r3, r0
 800226a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800226c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff0d 	bl	8002090 <__NVIC_EnableIRQ>
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff1d 	bl	80020cc <__NVIC_DisableIRQ>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff ff94 	bl	80021d0 <SysTick_Config>
 80022a8:	4603      	mov	r3, r0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022c0:	f7ff fe84 	bl	8001fcc <HAL_GetTick>
 80022c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d008      	beq.n	80022e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2280      	movs	r2, #128	; 0x80
 80022d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e052      	b.n	800238a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0216 	bic.w	r2, r2, #22
 80022f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002302:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	2b00      	cmp	r3, #0
 800230a:	d103      	bne.n	8002314 <HAL_DMA_Abort+0x62>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002310:	2b00      	cmp	r3, #0
 8002312:	d007      	beq.n	8002324 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0208 	bic.w	r2, r2, #8
 8002322:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002334:	e013      	b.n	800235e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002336:	f7ff fe49 	bl	8001fcc <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b05      	cmp	r3, #5
 8002342:	d90c      	bls.n	800235e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2220      	movs	r2, #32
 8002348:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2203      	movs	r2, #3
 800234e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e015      	b.n	800238a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1e4      	bne.n	8002336 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002370:	223f      	movs	r2, #63	; 0x3f
 8002372:	409a      	lsls	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d004      	beq.n	80023b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2280      	movs	r2, #128	; 0x80
 80023aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e00c      	b.n	80023ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2205      	movs	r2, #5
 80023b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0201 	bic.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d8:	b480      	push	{r7}
 80023da:	b089      	sub	sp, #36	; 0x24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	e159      	b.n	80026a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023f4:	2201      	movs	r2, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	429a      	cmp	r2, r3
 800240e:	f040 8148 	bne.w	80026a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b01      	cmp	r3, #1
 800241c:	d005      	beq.n	800242a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002426:	2b02      	cmp	r3, #2
 8002428:	d130      	bne.n	800248c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	2203      	movs	r2, #3
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002460:	2201      	movs	r2, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	f003 0201 	and.w	r2, r3, #1
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b03      	cmp	r3, #3
 8002496:	d017      	beq.n	80024c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	2203      	movs	r2, #3
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d123      	bne.n	800251c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	08da      	lsrs	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3208      	adds	r2, #8
 80024dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	220f      	movs	r2, #15
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	08da      	lsrs	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3208      	adds	r2, #8
 8002516:	69b9      	ldr	r1, [r7, #24]
 8002518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	2203      	movs	r2, #3
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0203 	and.w	r2, r3, #3
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80a2 	beq.w	80026a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b57      	ldr	r3, [pc, #348]	; (80026c0 <HAL_GPIO_Init+0x2e8>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	4a56      	ldr	r2, [pc, #344]	; (80026c0 <HAL_GPIO_Init+0x2e8>)
 8002568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800256c:	6453      	str	r3, [r2, #68]	; 0x44
 800256e:	4b54      	ldr	r3, [pc, #336]	; (80026c0 <HAL_GPIO_Init+0x2e8>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800257a:	4a52      	ldr	r2, [pc, #328]	; (80026c4 <HAL_GPIO_Init+0x2ec>)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	089b      	lsrs	r3, r3, #2
 8002580:	3302      	adds	r3, #2
 8002582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	220f      	movs	r2, #15
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a49      	ldr	r2, [pc, #292]	; (80026c8 <HAL_GPIO_Init+0x2f0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d019      	beq.n	80025da <HAL_GPIO_Init+0x202>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a48      	ldr	r2, [pc, #288]	; (80026cc <HAL_GPIO_Init+0x2f4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d013      	beq.n	80025d6 <HAL_GPIO_Init+0x1fe>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a47      	ldr	r2, [pc, #284]	; (80026d0 <HAL_GPIO_Init+0x2f8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d00d      	beq.n	80025d2 <HAL_GPIO_Init+0x1fa>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a46      	ldr	r2, [pc, #280]	; (80026d4 <HAL_GPIO_Init+0x2fc>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d007      	beq.n	80025ce <HAL_GPIO_Init+0x1f6>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a45      	ldr	r2, [pc, #276]	; (80026d8 <HAL_GPIO_Init+0x300>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d101      	bne.n	80025ca <HAL_GPIO_Init+0x1f2>
 80025c6:	2304      	movs	r3, #4
 80025c8:	e008      	b.n	80025dc <HAL_GPIO_Init+0x204>
 80025ca:	2307      	movs	r3, #7
 80025cc:	e006      	b.n	80025dc <HAL_GPIO_Init+0x204>
 80025ce:	2303      	movs	r3, #3
 80025d0:	e004      	b.n	80025dc <HAL_GPIO_Init+0x204>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e002      	b.n	80025dc <HAL_GPIO_Init+0x204>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_GPIO_Init+0x204>
 80025da:	2300      	movs	r3, #0
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	f002 0203 	and.w	r2, r2, #3
 80025e2:	0092      	lsls	r2, r2, #2
 80025e4:	4093      	lsls	r3, r2
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ec:	4935      	ldr	r1, [pc, #212]	; (80026c4 <HAL_GPIO_Init+0x2ec>)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	3302      	adds	r3, #2
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025fa:	4b38      	ldr	r3, [pc, #224]	; (80026dc <HAL_GPIO_Init+0x304>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800261e:	4a2f      	ldr	r2, [pc, #188]	; (80026dc <HAL_GPIO_Init+0x304>)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002624:	4b2d      	ldr	r3, [pc, #180]	; (80026dc <HAL_GPIO_Init+0x304>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002648:	4a24      	ldr	r2, [pc, #144]	; (80026dc <HAL_GPIO_Init+0x304>)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800264e:	4b23      	ldr	r3, [pc, #140]	; (80026dc <HAL_GPIO_Init+0x304>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002672:	4a1a      	ldr	r2, [pc, #104]	; (80026dc <HAL_GPIO_Init+0x304>)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002678:	4b18      	ldr	r3, [pc, #96]	; (80026dc <HAL_GPIO_Init+0x304>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800269c:	4a0f      	ldr	r2, [pc, #60]	; (80026dc <HAL_GPIO_Init+0x304>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3301      	adds	r3, #1
 80026a6:	61fb      	str	r3, [r7, #28]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	2b0f      	cmp	r3, #15
 80026ac:	f67f aea2 	bls.w	80023f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026b0:	bf00      	nop
 80026b2:	bf00      	nop
 80026b4:	3724      	adds	r7, #36	; 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40013800 	.word	0x40013800
 80026c8:	40020000 	.word	0x40020000
 80026cc:	40020400 	.word	0x40020400
 80026d0:	40020800 	.word	0x40020800
 80026d4:	40020c00 	.word	0x40020c00
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40013c00 	.word	0x40013c00

080026e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	e0bb      	b.n	8002874 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026fc:	2201      	movs	r2, #1
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	429a      	cmp	r2, r3
 8002714:	f040 80ab 	bne.w	800286e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002718:	4a5c      	ldr	r2, [pc, #368]	; (800288c <HAL_GPIO_DeInit+0x1ac>)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	089b      	lsrs	r3, r3, #2
 800271e:	3302      	adds	r3, #2
 8002720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002724:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	220f      	movs	r2, #15
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	4013      	ands	r3, r2
 8002738:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a54      	ldr	r2, [pc, #336]	; (8002890 <HAL_GPIO_DeInit+0x1b0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d019      	beq.n	8002776 <HAL_GPIO_DeInit+0x96>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a53      	ldr	r2, [pc, #332]	; (8002894 <HAL_GPIO_DeInit+0x1b4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d013      	beq.n	8002772 <HAL_GPIO_DeInit+0x92>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a52      	ldr	r2, [pc, #328]	; (8002898 <HAL_GPIO_DeInit+0x1b8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00d      	beq.n	800276e <HAL_GPIO_DeInit+0x8e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a51      	ldr	r2, [pc, #324]	; (800289c <HAL_GPIO_DeInit+0x1bc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d007      	beq.n	800276a <HAL_GPIO_DeInit+0x8a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a50      	ldr	r2, [pc, #320]	; (80028a0 <HAL_GPIO_DeInit+0x1c0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d101      	bne.n	8002766 <HAL_GPIO_DeInit+0x86>
 8002762:	2304      	movs	r3, #4
 8002764:	e008      	b.n	8002778 <HAL_GPIO_DeInit+0x98>
 8002766:	2307      	movs	r3, #7
 8002768:	e006      	b.n	8002778 <HAL_GPIO_DeInit+0x98>
 800276a:	2303      	movs	r3, #3
 800276c:	e004      	b.n	8002778 <HAL_GPIO_DeInit+0x98>
 800276e:	2302      	movs	r3, #2
 8002770:	e002      	b.n	8002778 <HAL_GPIO_DeInit+0x98>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_GPIO_DeInit+0x98>
 8002776:	2300      	movs	r3, #0
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	f002 0203 	and.w	r2, r2, #3
 800277e:	0092      	lsls	r2, r2, #2
 8002780:	4093      	lsls	r3, r2
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	429a      	cmp	r2, r3
 8002786:	d132      	bne.n	80027ee <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002788:	4b46      	ldr	r3, [pc, #280]	; (80028a4 <HAL_GPIO_DeInit+0x1c4>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	43db      	mvns	r3, r3
 8002790:	4944      	ldr	r1, [pc, #272]	; (80028a4 <HAL_GPIO_DeInit+0x1c4>)
 8002792:	4013      	ands	r3, r2
 8002794:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002796:	4b43      	ldr	r3, [pc, #268]	; (80028a4 <HAL_GPIO_DeInit+0x1c4>)
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	43db      	mvns	r3, r3
 800279e:	4941      	ldr	r1, [pc, #260]	; (80028a4 <HAL_GPIO_DeInit+0x1c4>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80027a4:	4b3f      	ldr	r3, [pc, #252]	; (80028a4 <HAL_GPIO_DeInit+0x1c4>)
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	493d      	ldr	r1, [pc, #244]	; (80028a4 <HAL_GPIO_DeInit+0x1c4>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80027b2:	4b3c      	ldr	r3, [pc, #240]	; (80028a4 <HAL_GPIO_DeInit+0x1c4>)
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	493a      	ldr	r1, [pc, #232]	; (80028a4 <HAL_GPIO_DeInit+0x1c4>)
 80027bc:	4013      	ands	r3, r2
 80027be:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	220f      	movs	r2, #15
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80027d0:	4a2e      	ldr	r2, [pc, #184]	; (800288c <HAL_GPIO_DeInit+0x1ac>)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	089b      	lsrs	r3, r3, #2
 80027d6:	3302      	adds	r3, #2
 80027d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	43da      	mvns	r2, r3
 80027e0:	482a      	ldr	r0, [pc, #168]	; (800288c <HAL_GPIO_DeInit+0x1ac>)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	089b      	lsrs	r3, r3, #2
 80027e6:	400a      	ands	r2, r1
 80027e8:	3302      	adds	r3, #2
 80027ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	2103      	movs	r1, #3
 80027f8:	fa01 f303 	lsl.w	r3, r1, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	401a      	ands	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	08da      	lsrs	r2, r3, #3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3208      	adds	r2, #8
 800280c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	220f      	movs	r2, #15
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	08d2      	lsrs	r2, r2, #3
 8002824:	4019      	ands	r1, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3208      	adds	r2, #8
 800282a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	2103      	movs	r1, #3
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	401a      	ands	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	2101      	movs	r1, #1
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	fa01 f303 	lsl.w	r3, r1, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	401a      	ands	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	2103      	movs	r1, #3
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	401a      	ands	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	3301      	adds	r3, #1
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2b0f      	cmp	r3, #15
 8002878:	f67f af40 	bls.w	80026fc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40013800 	.word	0x40013800
 8002890:	40020000 	.word	0x40020000
 8002894:	40020400 	.word	0x40020400
 8002898:	40020800 	.word	0x40020800
 800289c:	40020c00 	.word	0x40020c00
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40013c00 	.word	0x40013c00

080028a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	807b      	strh	r3, [r7, #2]
 80028b4:	4613      	mov	r3, r2
 80028b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b8:	787b      	ldrb	r3, [r7, #1]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028be:	887a      	ldrh	r2, [r7, #2]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028c4:	e003      	b.n	80028ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028c6:	887b      	ldrh	r3, [r7, #2]
 80028c8:	041a      	lsls	r2, r3, #16
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	619a      	str	r2, [r3, #24]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028da:	b480      	push	{r7}
 80028dc:	b085      	sub	sp, #20
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	460b      	mov	r3, r1
 80028e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028ec:	887a      	ldrh	r2, [r7, #2]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4013      	ands	r3, r2
 80028f2:	041a      	lsls	r2, r3, #16
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	43d9      	mvns	r1, r3
 80028f8:	887b      	ldrh	r3, [r7, #2]
 80028fa:	400b      	ands	r3, r1
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	619a      	str	r2, [r3, #24]
}
 8002902:	bf00      	nop
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e267      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d075      	beq.n	8002a1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800292e:	4b88      	ldr	r3, [pc, #544]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b04      	cmp	r3, #4
 8002938:	d00c      	beq.n	8002954 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293a:	4b85      	ldr	r3, [pc, #532]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002942:	2b08      	cmp	r3, #8
 8002944:	d112      	bne.n	800296c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002946:	4b82      	ldr	r3, [pc, #520]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002952:	d10b      	bne.n	800296c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002954:	4b7e      	ldr	r3, [pc, #504]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d05b      	beq.n	8002a18 <HAL_RCC_OscConfig+0x108>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d157      	bne.n	8002a18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e242      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002974:	d106      	bne.n	8002984 <HAL_RCC_OscConfig+0x74>
 8002976:	4b76      	ldr	r3, [pc, #472]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a75      	ldr	r2, [pc, #468]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 800297c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	e01d      	b.n	80029c0 <HAL_RCC_OscConfig+0xb0>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800298c:	d10c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x98>
 800298e:	4b70      	ldr	r3, [pc, #448]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a6f      	ldr	r2, [pc, #444]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	4b6d      	ldr	r3, [pc, #436]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a6c      	ldr	r2, [pc, #432]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 80029a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e00b      	b.n	80029c0 <HAL_RCC_OscConfig+0xb0>
 80029a8:	4b69      	ldr	r3, [pc, #420]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a68      	ldr	r2, [pc, #416]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 80029ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	4b66      	ldr	r3, [pc, #408]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a65      	ldr	r2, [pc, #404]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 80029ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d013      	beq.n	80029f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7ff fb00 	bl	8001fcc <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029d0:	f7ff fafc 	bl	8001fcc <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b64      	cmp	r3, #100	; 0x64
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e207      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e2:	4b5b      	ldr	r3, [pc, #364]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0xc0>
 80029ee:	e014      	b.n	8002a1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f0:	f7ff faec 	bl	8001fcc <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f8:	f7ff fae8 	bl	8001fcc <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	; 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e1f3      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0a:	4b51      	ldr	r3, [pc, #324]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0xe8>
 8002a16:	e000      	b.n	8002a1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d063      	beq.n	8002aee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a26:	4b4a      	ldr	r3, [pc, #296]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00b      	beq.n	8002a4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a32:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d11c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a3e:	4b44      	ldr	r3, [pc, #272]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d116      	bne.n	8002a78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4a:	4b41      	ldr	r3, [pc, #260]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_RCC_OscConfig+0x152>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e1c7      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a62:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4937      	ldr	r1, [pc, #220]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a76:	e03a      	b.n	8002aee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d020      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a80:	4b34      	ldr	r3, [pc, #208]	; (8002b54 <HAL_RCC_OscConfig+0x244>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a86:	f7ff faa1 	bl	8001fcc <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a8e:	f7ff fa9d 	bl	8001fcc <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e1a8      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa0:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aac:	4b28      	ldr	r3, [pc, #160]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4925      	ldr	r1, [pc, #148]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	600b      	str	r3, [r1, #0]
 8002ac0:	e015      	b.n	8002aee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ac2:	4b24      	ldr	r3, [pc, #144]	; (8002b54 <HAL_RCC_OscConfig+0x244>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7ff fa80 	bl	8001fcc <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ad0:	f7ff fa7c 	bl	8001fcc <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e187      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d036      	beq.n	8002b68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d016      	beq.n	8002b30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b02:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <HAL_RCC_OscConfig+0x248>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7ff fa60 	bl	8001fcc <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b10:	f7ff fa5c 	bl	8001fcc <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e167      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b22:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0x200>
 8002b2e:	e01b      	b.n	8002b68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <HAL_RCC_OscConfig+0x248>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b36:	f7ff fa49 	bl	8001fcc <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3c:	e00e      	b.n	8002b5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b3e:	f7ff fa45 	bl	8001fcc <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d907      	bls.n	8002b5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e150      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
 8002b50:	40023800 	.word	0x40023800
 8002b54:	42470000 	.word	0x42470000
 8002b58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b5c:	4b88      	ldr	r3, [pc, #544]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1ea      	bne.n	8002b3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 8097 	beq.w	8002ca4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b76:	2300      	movs	r3, #0
 8002b78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b7a:	4b81      	ldr	r3, [pc, #516]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10f      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	4b7d      	ldr	r3, [pc, #500]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a7c      	ldr	r2, [pc, #496]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	4b7a      	ldr	r3, [pc, #488]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba6:	4b77      	ldr	r3, [pc, #476]	; (8002d84 <HAL_RCC_OscConfig+0x474>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d118      	bne.n	8002be4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bb2:	4b74      	ldr	r3, [pc, #464]	; (8002d84 <HAL_RCC_OscConfig+0x474>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a73      	ldr	r2, [pc, #460]	; (8002d84 <HAL_RCC_OscConfig+0x474>)
 8002bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bbe:	f7ff fa05 	bl	8001fcc <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc6:	f7ff fa01 	bl	8001fcc <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e10c      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd8:	4b6a      	ldr	r3, [pc, #424]	; (8002d84 <HAL_RCC_OscConfig+0x474>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f0      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d106      	bne.n	8002bfa <HAL_RCC_OscConfig+0x2ea>
 8002bec:	4b64      	ldr	r3, [pc, #400]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf0:	4a63      	ldr	r2, [pc, #396]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf8:	e01c      	b.n	8002c34 <HAL_RCC_OscConfig+0x324>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	2b05      	cmp	r3, #5
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCC_OscConfig+0x30c>
 8002c02:	4b5f      	ldr	r3, [pc, #380]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	4a5e      	ldr	r2, [pc, #376]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c08:	f043 0304 	orr.w	r3, r3, #4
 8002c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0e:	4b5c      	ldr	r3, [pc, #368]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	4a5b      	ldr	r2, [pc, #364]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1a:	e00b      	b.n	8002c34 <HAL_RCC_OscConfig+0x324>
 8002c1c:	4b58      	ldr	r3, [pc, #352]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c20:	4a57      	ldr	r2, [pc, #348]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c22:	f023 0301 	bic.w	r3, r3, #1
 8002c26:	6713      	str	r3, [r2, #112]	; 0x70
 8002c28:	4b55      	ldr	r3, [pc, #340]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2c:	4a54      	ldr	r2, [pc, #336]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c2e:	f023 0304 	bic.w	r3, r3, #4
 8002c32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d015      	beq.n	8002c68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3c:	f7ff f9c6 	bl	8001fcc <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c44:	f7ff f9c2 	bl	8001fcc <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e0cb      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5a:	4b49      	ldr	r3, [pc, #292]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0ee      	beq.n	8002c44 <HAL_RCC_OscConfig+0x334>
 8002c66:	e014      	b.n	8002c92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c68:	f7ff f9b0 	bl	8001fcc <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c6e:	e00a      	b.n	8002c86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c70:	f7ff f9ac 	bl	8001fcc <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e0b5      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c86:	4b3e      	ldr	r3, [pc, #248]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1ee      	bne.n	8002c70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c92:	7dfb      	ldrb	r3, [r7, #23]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d105      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c98:	4b39      	ldr	r3, [pc, #228]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	4a38      	ldr	r2, [pc, #224]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 80a1 	beq.w	8002df0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cae:	4b34      	ldr	r3, [pc, #208]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d05c      	beq.n	8002d74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d141      	bne.n	8002d46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc2:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <HAL_RCC_OscConfig+0x478>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7ff f980 	bl	8001fcc <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7ff f97c 	bl	8001fcc <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e087      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce2:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69da      	ldr	r2, [r3, #28]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	019b      	lsls	r3, r3, #6
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	085b      	lsrs	r3, r3, #1
 8002d06:	3b01      	subs	r3, #1
 8002d08:	041b      	lsls	r3, r3, #16
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	061b      	lsls	r3, r3, #24
 8002d12:	491b      	ldr	r1, [pc, #108]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d18:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <HAL_RCC_OscConfig+0x478>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1e:	f7ff f955 	bl	8001fcc <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d26:	f7ff f951 	bl	8001fcc <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e05c      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x416>
 8002d44:	e054      	b.n	8002df0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d46:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <HAL_RCC_OscConfig+0x478>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7ff f93e 	bl	8001fcc <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d54:	f7ff f93a 	bl	8001fcc <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e045      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x444>
 8002d72:	e03d      	b.n	8002df0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d107      	bne.n	8002d8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e038      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40007000 	.word	0x40007000
 8002d88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d8c:	4b1b      	ldr	r3, [pc, #108]	; (8002dfc <HAL_RCC_OscConfig+0x4ec>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d028      	beq.n	8002dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d121      	bne.n	8002dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d11a      	bne.n	8002dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d111      	bne.n	8002dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	085b      	lsrs	r3, r3, #1
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d107      	bne.n	8002dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e000      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800

08002e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0cc      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e14:	4b68      	ldr	r3, [pc, #416]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d90c      	bls.n	8002e3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e22:	4b65      	ldr	r3, [pc, #404]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2a:	4b63      	ldr	r3, [pc, #396]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d001      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0b8      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d020      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e54:	4b59      	ldr	r3, [pc, #356]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4a58      	ldr	r2, [pc, #352]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e6c:	4b53      	ldr	r3, [pc, #332]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	4a52      	ldr	r2, [pc, #328]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e78:	4b50      	ldr	r3, [pc, #320]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	494d      	ldr	r1, [pc, #308]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d044      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d107      	bne.n	8002eae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9e:	4b47      	ldr	r3, [pc, #284]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d119      	bne.n	8002ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e07f      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d003      	beq.n	8002ebe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d107      	bne.n	8002ece <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ebe:	4b3f      	ldr	r3, [pc, #252]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d109      	bne.n	8002ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e06f      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ece:	4b3b      	ldr	r3, [pc, #236]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e067      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ede:	4b37      	ldr	r3, [pc, #220]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f023 0203 	bic.w	r2, r3, #3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	4934      	ldr	r1, [pc, #208]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ef0:	f7ff f86c 	bl	8001fcc <HAL_GetTick>
 8002ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef6:	e00a      	b.n	8002f0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef8:	f7ff f868 	bl	8001fcc <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e04f      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0e:	4b2b      	ldr	r3, [pc, #172]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 020c 	and.w	r2, r3, #12
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d1eb      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f20:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d20c      	bcs.n	8002f48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f36:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d001      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e032      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f54:	4b19      	ldr	r3, [pc, #100]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	4916      	ldr	r1, [pc, #88]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d009      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f72:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	490e      	ldr	r1, [pc, #56]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f86:	f000 f821 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	091b      	lsrs	r3, r3, #4
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	490a      	ldr	r1, [pc, #40]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f98:	5ccb      	ldrb	r3, [r1, r3]
 8002f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9e:	4a09      	ldr	r2, [pc, #36]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fa2:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe ffcc 	bl	8001f44 <HAL_InitTick>

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40023c00 	.word	0x40023c00
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	0800d9d4 	.word	0x0800d9d4
 8002fc4:	20000084 	.word	0x20000084
 8002fc8:	20000088 	.word	0x20000088

08002fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fd0:	b090      	sub	sp, #64	; 0x40
 8002fd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd8:	2300      	movs	r3, #0
 8002fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fdc:	2300      	movs	r3, #0
 8002fde:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fe4:	4b59      	ldr	r3, [pc, #356]	; (800314c <HAL_RCC_GetSysClockFreq+0x180>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d00d      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0x40>
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	f200 80a1 	bhi.w	8003138 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <HAL_RCC_GetSysClockFreq+0x34>
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d003      	beq.n	8003006 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ffe:	e09b      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003000:	4b53      	ldr	r3, [pc, #332]	; (8003150 <HAL_RCC_GetSysClockFreq+0x184>)
 8003002:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003004:	e09b      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003006:	4b53      	ldr	r3, [pc, #332]	; (8003154 <HAL_RCC_GetSysClockFreq+0x188>)
 8003008:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800300a:	e098      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800300c:	4b4f      	ldr	r3, [pc, #316]	; (800314c <HAL_RCC_GetSysClockFreq+0x180>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003014:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003016:	4b4d      	ldr	r3, [pc, #308]	; (800314c <HAL_RCC_GetSysClockFreq+0x180>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d028      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003022:	4b4a      	ldr	r3, [pc, #296]	; (800314c <HAL_RCC_GetSysClockFreq+0x180>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	099b      	lsrs	r3, r3, #6
 8003028:	2200      	movs	r2, #0
 800302a:	623b      	str	r3, [r7, #32]
 800302c:	627a      	str	r2, [r7, #36]	; 0x24
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003034:	2100      	movs	r1, #0
 8003036:	4b47      	ldr	r3, [pc, #284]	; (8003154 <HAL_RCC_GetSysClockFreq+0x188>)
 8003038:	fb03 f201 	mul.w	r2, r3, r1
 800303c:	2300      	movs	r3, #0
 800303e:	fb00 f303 	mul.w	r3, r0, r3
 8003042:	4413      	add	r3, r2
 8003044:	4a43      	ldr	r2, [pc, #268]	; (8003154 <HAL_RCC_GetSysClockFreq+0x188>)
 8003046:	fba0 1202 	umull	r1, r2, r0, r2
 800304a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800304c:	460a      	mov	r2, r1
 800304e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003052:	4413      	add	r3, r2
 8003054:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003058:	2200      	movs	r2, #0
 800305a:	61bb      	str	r3, [r7, #24]
 800305c:	61fa      	str	r2, [r7, #28]
 800305e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003062:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003066:	f7fd f923 	bl	80002b0 <__aeabi_uldivmod>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4613      	mov	r3, r2
 8003070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003072:	e053      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003074:	4b35      	ldr	r3, [pc, #212]	; (800314c <HAL_RCC_GetSysClockFreq+0x180>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	099b      	lsrs	r3, r3, #6
 800307a:	2200      	movs	r2, #0
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	617a      	str	r2, [r7, #20]
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003086:	f04f 0b00 	mov.w	fp, #0
 800308a:	4652      	mov	r2, sl
 800308c:	465b      	mov	r3, fp
 800308e:	f04f 0000 	mov.w	r0, #0
 8003092:	f04f 0100 	mov.w	r1, #0
 8003096:	0159      	lsls	r1, r3, #5
 8003098:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800309c:	0150      	lsls	r0, r2, #5
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	ebb2 080a 	subs.w	r8, r2, sl
 80030a6:	eb63 090b 	sbc.w	r9, r3, fp
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030be:	ebb2 0408 	subs.w	r4, r2, r8
 80030c2:	eb63 0509 	sbc.w	r5, r3, r9
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	00eb      	lsls	r3, r5, #3
 80030d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030d4:	00e2      	lsls	r2, r4, #3
 80030d6:	4614      	mov	r4, r2
 80030d8:	461d      	mov	r5, r3
 80030da:	eb14 030a 	adds.w	r3, r4, sl
 80030de:	603b      	str	r3, [r7, #0]
 80030e0:	eb45 030b 	adc.w	r3, r5, fp
 80030e4:	607b      	str	r3, [r7, #4]
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030f2:	4629      	mov	r1, r5
 80030f4:	028b      	lsls	r3, r1, #10
 80030f6:	4621      	mov	r1, r4
 80030f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030fc:	4621      	mov	r1, r4
 80030fe:	028a      	lsls	r2, r1, #10
 8003100:	4610      	mov	r0, r2
 8003102:	4619      	mov	r1, r3
 8003104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003106:	2200      	movs	r2, #0
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	60fa      	str	r2, [r7, #12]
 800310c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003110:	f7fd f8ce 	bl	80002b0 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4613      	mov	r3, r2
 800311a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <HAL_RCC_GetSysClockFreq+0x180>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	0c1b      	lsrs	r3, r3, #16
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	3301      	adds	r3, #1
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800312c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	fbb2 f3f3 	udiv	r3, r2, r3
 8003134:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003136:	e002      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <HAL_RCC_GetSysClockFreq+0x184>)
 800313a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800313c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800313e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003140:	4618      	mov	r0, r3
 8003142:	3740      	adds	r7, #64	; 0x40
 8003144:	46bd      	mov	sp, r7
 8003146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800
 8003150:	00f42400 	.word	0x00f42400
 8003154:	017d7840 	.word	0x017d7840

08003158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800315c:	4b03      	ldr	r3, [pc, #12]	; (800316c <HAL_RCC_GetHCLKFreq+0x14>)
 800315e:	681b      	ldr	r3, [r3, #0]
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	20000084 	.word	0x20000084

08003170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003174:	f7ff fff0 	bl	8003158 <HAL_RCC_GetHCLKFreq>
 8003178:	4602      	mov	r2, r0
 800317a:	4b05      	ldr	r3, [pc, #20]	; (8003190 <HAL_RCC_GetPCLK1Freq+0x20>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	0a9b      	lsrs	r3, r3, #10
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	4903      	ldr	r1, [pc, #12]	; (8003194 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003186:	5ccb      	ldrb	r3, [r1, r3]
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800318c:	4618      	mov	r0, r3
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40023800 	.word	0x40023800
 8003194:	0800d9e4 	.word	0x0800d9e4

08003198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800319c:	f7ff ffdc 	bl	8003158 <HAL_RCC_GetHCLKFreq>
 80031a0:	4602      	mov	r2, r0
 80031a2:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	0b5b      	lsrs	r3, r3, #13
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	4903      	ldr	r1, [pc, #12]	; (80031bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ae:	5ccb      	ldrb	r3, [r1, r3]
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40023800 	.word	0x40023800
 80031bc:	0800d9e4 	.word	0x0800d9e4

080031c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e041      	b.n	8003256 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fe fbec 	bl	80019c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3304      	adds	r3, #4
 80031fc:	4619      	mov	r1, r3
 80031fe:	4610      	mov	r0, r2
 8003200:	f000 fce4 	bl	8003bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e041      	b.n	80032f4 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d106      	bne.n	800328a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f839 	bl	80032fc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2202      	movs	r2, #2
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3304      	adds	r3, #4
 800329a:	4619      	mov	r1, r3
 800329c:	4610      	mov	r0, r2
 800329e:	f000 fc95 	bl	8003bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800331a:	2300      	movs	r3, #0
 800331c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d109      	bne.n	8003338 <HAL_TIM_OC_Start_IT+0x28>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b01      	cmp	r3, #1
 800332e:	bf14      	ite	ne
 8003330:	2301      	movne	r3, #1
 8003332:	2300      	moveq	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	e022      	b.n	800337e <HAL_TIM_OC_Start_IT+0x6e>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2b04      	cmp	r3, #4
 800333c:	d109      	bne.n	8003352 <HAL_TIM_OC_Start_IT+0x42>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b01      	cmp	r3, #1
 8003348:	bf14      	ite	ne
 800334a:	2301      	movne	r3, #1
 800334c:	2300      	moveq	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	e015      	b.n	800337e <HAL_TIM_OC_Start_IT+0x6e>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b08      	cmp	r3, #8
 8003356:	d109      	bne.n	800336c <HAL_TIM_OC_Start_IT+0x5c>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b01      	cmp	r3, #1
 8003362:	bf14      	ite	ne
 8003364:	2301      	movne	r3, #1
 8003366:	2300      	moveq	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	e008      	b.n	800337e <HAL_TIM_OC_Start_IT+0x6e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b01      	cmp	r3, #1
 8003376:	bf14      	ite	ne
 8003378:	2301      	movne	r3, #1
 800337a:	2300      	moveq	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e0b3      	b.n	80034ee <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d104      	bne.n	8003396 <HAL_TIM_OC_Start_IT+0x86>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003394:	e013      	b.n	80033be <HAL_TIM_OC_Start_IT+0xae>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b04      	cmp	r3, #4
 800339a:	d104      	bne.n	80033a6 <HAL_TIM_OC_Start_IT+0x96>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033a4:	e00b      	b.n	80033be <HAL_TIM_OC_Start_IT+0xae>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d104      	bne.n	80033b6 <HAL_TIM_OC_Start_IT+0xa6>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033b4:	e003      	b.n	80033be <HAL_TIM_OC_Start_IT+0xae>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2202      	movs	r2, #2
 80033ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b0c      	cmp	r3, #12
 80033c2:	d841      	bhi.n	8003448 <HAL_TIM_OC_Start_IT+0x138>
 80033c4:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <HAL_TIM_OC_Start_IT+0xbc>)
 80033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ca:	bf00      	nop
 80033cc:	08003401 	.word	0x08003401
 80033d0:	08003449 	.word	0x08003449
 80033d4:	08003449 	.word	0x08003449
 80033d8:	08003449 	.word	0x08003449
 80033dc:	08003413 	.word	0x08003413
 80033e0:	08003449 	.word	0x08003449
 80033e4:	08003449 	.word	0x08003449
 80033e8:	08003449 	.word	0x08003449
 80033ec:	08003425 	.word	0x08003425
 80033f0:	08003449 	.word	0x08003449
 80033f4:	08003449 	.word	0x08003449
 80033f8:	08003449 	.word	0x08003449
 80033fc:	08003437 	.word	0x08003437
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0202 	orr.w	r2, r2, #2
 800340e:	60da      	str	r2, [r3, #12]
      break;
 8003410:	e01d      	b.n	800344e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0204 	orr.w	r2, r2, #4
 8003420:	60da      	str	r2, [r3, #12]
      break;
 8003422:	e014      	b.n	800344e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0208 	orr.w	r2, r2, #8
 8003432:	60da      	str	r2, [r3, #12]
      break;
 8003434:	e00b      	b.n	800344e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 0210 	orr.w	r2, r2, #16
 8003444:	60da      	str	r2, [r3, #12]
      break;
 8003446:	e002      	b.n	800344e <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	73fb      	strb	r3, [r7, #15]
      break;
 800344c:	bf00      	nop
  }

  if (status == HAL_OK)
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d14b      	bne.n	80034ec <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2201      	movs	r2, #1
 800345a:	6839      	ldr	r1, [r7, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fe5b 	bl	8004118 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a24      	ldr	r2, [pc, #144]	; (80034f8 <HAL_TIM_OC_Start_IT+0x1e8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d107      	bne.n	800347c <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800347a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a1d      	ldr	r2, [pc, #116]	; (80034f8 <HAL_TIM_OC_Start_IT+0x1e8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d018      	beq.n	80034b8 <HAL_TIM_OC_Start_IT+0x1a8>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348e:	d013      	beq.n	80034b8 <HAL_TIM_OC_Start_IT+0x1a8>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a19      	ldr	r2, [pc, #100]	; (80034fc <HAL_TIM_OC_Start_IT+0x1ec>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00e      	beq.n	80034b8 <HAL_TIM_OC_Start_IT+0x1a8>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a18      	ldr	r2, [pc, #96]	; (8003500 <HAL_TIM_OC_Start_IT+0x1f0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d009      	beq.n	80034b8 <HAL_TIM_OC_Start_IT+0x1a8>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a16      	ldr	r2, [pc, #88]	; (8003504 <HAL_TIM_OC_Start_IT+0x1f4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d004      	beq.n	80034b8 <HAL_TIM_OC_Start_IT+0x1a8>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a15      	ldr	r2, [pc, #84]	; (8003508 <HAL_TIM_OC_Start_IT+0x1f8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d111      	bne.n	80034dc <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2b06      	cmp	r3, #6
 80034c8:	d010      	beq.n	80034ec <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0201 	orr.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034da:	e007      	b.n	80034ec <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40010000 	.word	0x40010000
 80034fc:	40000400 	.word	0x40000400
 8003500:	40000800 	.word	0x40000800
 8003504:	40000c00 	.word	0x40000c00
 8003508:	40014000 	.word	0x40014000

0800350c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b0c      	cmp	r3, #12
 800351e:	d841      	bhi.n	80035a4 <HAL_TIM_OC_Stop_IT+0x98>
 8003520:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <HAL_TIM_OC_Stop_IT+0x1c>)
 8003522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003526:	bf00      	nop
 8003528:	0800355d 	.word	0x0800355d
 800352c:	080035a5 	.word	0x080035a5
 8003530:	080035a5 	.word	0x080035a5
 8003534:	080035a5 	.word	0x080035a5
 8003538:	0800356f 	.word	0x0800356f
 800353c:	080035a5 	.word	0x080035a5
 8003540:	080035a5 	.word	0x080035a5
 8003544:	080035a5 	.word	0x080035a5
 8003548:	08003581 	.word	0x08003581
 800354c:	080035a5 	.word	0x080035a5
 8003550:	080035a5 	.word	0x080035a5
 8003554:	080035a5 	.word	0x080035a5
 8003558:	08003593 	.word	0x08003593
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0202 	bic.w	r2, r2, #2
 800356a:	60da      	str	r2, [r3, #12]
      break;
 800356c:	e01d      	b.n	80035aa <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0204 	bic.w	r2, r2, #4
 800357c:	60da      	str	r2, [r3, #12]
      break;
 800357e:	e014      	b.n	80035aa <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0208 	bic.w	r2, r2, #8
 800358e:	60da      	str	r2, [r3, #12]
      break;
 8003590:	e00b      	b.n	80035aa <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0210 	bic.w	r2, r2, #16
 80035a0:	60da      	str	r2, [r3, #12]
      break;
 80035a2:	e002      	b.n	80035aa <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
      break;
 80035a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d157      	bne.n	8003660 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2200      	movs	r2, #0
 80035b6:	6839      	ldr	r1, [r7, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 fdad 	bl	8004118 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a2a      	ldr	r2, [pc, #168]	; (800366c <HAL_TIM_OC_Stop_IT+0x160>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d117      	bne.n	80035f8 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6a1a      	ldr	r2, [r3, #32]
 80035ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10f      	bne.n	80035f8 <HAL_TIM_OC_Stop_IT+0xec>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6a1a      	ldr	r2, [r3, #32]
 80035de:	f240 4344 	movw	r3, #1092	; 0x444
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d107      	bne.n	80035f8 <HAL_TIM_OC_Stop_IT+0xec>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035f6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6a1a      	ldr	r2, [r3, #32]
 80035fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8003602:	4013      	ands	r3, r2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10f      	bne.n	8003628 <HAL_TIM_OC_Stop_IT+0x11c>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6a1a      	ldr	r2, [r3, #32]
 800360e:	f240 4344 	movw	r3, #1092	; 0x444
 8003612:	4013      	ands	r3, r2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d107      	bne.n	8003628 <HAL_TIM_OC_Stop_IT+0x11c>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0201 	bic.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d104      	bne.n	8003638 <HAL_TIM_OC_Stop_IT+0x12c>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003636:	e013      	b.n	8003660 <HAL_TIM_OC_Stop_IT+0x154>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	2b04      	cmp	r3, #4
 800363c:	d104      	bne.n	8003648 <HAL_TIM_OC_Stop_IT+0x13c>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003646:	e00b      	b.n	8003660 <HAL_TIM_OC_Stop_IT+0x154>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	2b08      	cmp	r3, #8
 800364c:	d104      	bne.n	8003658 <HAL_TIM_OC_Stop_IT+0x14c>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003656:	e003      	b.n	8003660 <HAL_TIM_OC_Stop_IT+0x154>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003660:	7bfb      	ldrb	r3, [r7, #15]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40010000 	.word	0x40010000

08003670 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e041      	b.n	8003708 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d106      	bne.n	800369e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f839 	bl	8003710 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2202      	movs	r2, #2
 80036a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3304      	adds	r3, #4
 80036ae:	4619      	mov	r1, r3
 80036b0:	4610      	mov	r0, r2
 80036b2:	f000 fa8b 	bl	8003bcc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0208 	bic.w	r2, r2, #8
 80036c4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6819      	ldr	r1, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b02      	cmp	r3, #2
 8003738:	d122      	bne.n	8003780 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b02      	cmp	r3, #2
 8003746:	d11b      	bne.n	8003780 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f06f 0202 	mvn.w	r2, #2
 8003750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fa11 	bl	8003b8e <HAL_TIM_IC_CaptureCallback>
 800376c:	e005      	b.n	800377a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fd ff9c 	bl	80016ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fa14 	bl	8003ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b04      	cmp	r3, #4
 800378c:	d122      	bne.n	80037d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b04      	cmp	r3, #4
 800379a:	d11b      	bne.n	80037d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0204 	mvn.w	r2, #4
 80037a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2202      	movs	r2, #2
 80037aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f9e7 	bl	8003b8e <HAL_TIM_IC_CaptureCallback>
 80037c0:	e005      	b.n	80037ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fd ff72 	bl	80016ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f9ea 	bl	8003ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d122      	bne.n	8003828 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d11b      	bne.n	8003828 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0208 	mvn.w	r2, #8
 80037f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2204      	movs	r2, #4
 80037fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f9bd 	bl	8003b8e <HAL_TIM_IC_CaptureCallback>
 8003814:	e005      	b.n	8003822 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fd ff48 	bl	80016ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f9c0 	bl	8003ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	2b10      	cmp	r3, #16
 8003834:	d122      	bne.n	800387c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b10      	cmp	r3, #16
 8003842:	d11b      	bne.n	800387c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0210 	mvn.w	r2, #16
 800384c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2208      	movs	r2, #8
 8003852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f993 	bl	8003b8e <HAL_TIM_IC_CaptureCallback>
 8003868:	e005      	b.n	8003876 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fd ff1e 	bl	80016ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f996 	bl	8003ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b01      	cmp	r3, #1
 8003888:	d10e      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b01      	cmp	r3, #1
 8003896:	d107      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0201 	mvn.w	r2, #1
 80038a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f969 	bl	8003b7a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b2:	2b80      	cmp	r3, #128	; 0x80
 80038b4:	d10e      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c0:	2b80      	cmp	r3, #128	; 0x80
 80038c2:	d107      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fcc0 	bl	8004254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038de:	2b40      	cmp	r3, #64	; 0x40
 80038e0:	d10e      	bne.n	8003900 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ec:	2b40      	cmp	r3, #64	; 0x40
 80038ee:	d107      	bne.n	8003900 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f95b 	bl	8003bb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b20      	cmp	r3, #32
 800390c:	d10e      	bne.n	800392c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b20      	cmp	r3, #32
 800391a:	d107      	bne.n	800392c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0220 	mvn.w	r2, #32
 8003924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fc8a 	bl	8004240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <HAL_TIM_OC_ConfigChannel+0x1e>
 800394e:	2302      	movs	r3, #2
 8003950:	e048      	b.n	80039e4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b0c      	cmp	r3, #12
 800395e:	d839      	bhi.n	80039d4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003960:	a201      	add	r2, pc, #4	; (adr r2, 8003968 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003966:	bf00      	nop
 8003968:	0800399d 	.word	0x0800399d
 800396c:	080039d5 	.word	0x080039d5
 8003970:	080039d5 	.word	0x080039d5
 8003974:	080039d5 	.word	0x080039d5
 8003978:	080039ab 	.word	0x080039ab
 800397c:	080039d5 	.word	0x080039d5
 8003980:	080039d5 	.word	0x080039d5
 8003984:	080039d5 	.word	0x080039d5
 8003988:	080039b9 	.word	0x080039b9
 800398c:	080039d5 	.word	0x080039d5
 8003990:	080039d5 	.word	0x080039d5
 8003994:	080039d5 	.word	0x080039d5
 8003998:	080039c7 	.word	0x080039c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 f992 	bl	8003ccc <TIM_OC1_SetConfig>
      break;
 80039a8:	e017      	b.n	80039da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 f9f1 	bl	8003d98 <TIM_OC2_SetConfig>
      break;
 80039b6:	e010      	b.n	80039da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fa56 	bl	8003e70 <TIM_OC3_SetConfig>
      break;
 80039c4:	e009      	b.n	80039da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68b9      	ldr	r1, [r7, #8]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fab9 	bl	8003f44 <TIM_OC4_SetConfig>
      break;
 80039d2:	e002      	b.n	80039da <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	75fb      	strb	r3, [r7, #23]
      break;
 80039d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_TIM_ConfigClockSource+0x1c>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e0b4      	b.n	8003b72 <HAL_TIM_ConfigClockSource+0x186>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a40:	d03e      	beq.n	8003ac0 <HAL_TIM_ConfigClockSource+0xd4>
 8003a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a46:	f200 8087 	bhi.w	8003b58 <HAL_TIM_ConfigClockSource+0x16c>
 8003a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a4e:	f000 8086 	beq.w	8003b5e <HAL_TIM_ConfigClockSource+0x172>
 8003a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a56:	d87f      	bhi.n	8003b58 <HAL_TIM_ConfigClockSource+0x16c>
 8003a58:	2b70      	cmp	r3, #112	; 0x70
 8003a5a:	d01a      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0xa6>
 8003a5c:	2b70      	cmp	r3, #112	; 0x70
 8003a5e:	d87b      	bhi.n	8003b58 <HAL_TIM_ConfigClockSource+0x16c>
 8003a60:	2b60      	cmp	r3, #96	; 0x60
 8003a62:	d050      	beq.n	8003b06 <HAL_TIM_ConfigClockSource+0x11a>
 8003a64:	2b60      	cmp	r3, #96	; 0x60
 8003a66:	d877      	bhi.n	8003b58 <HAL_TIM_ConfigClockSource+0x16c>
 8003a68:	2b50      	cmp	r3, #80	; 0x50
 8003a6a:	d03c      	beq.n	8003ae6 <HAL_TIM_ConfigClockSource+0xfa>
 8003a6c:	2b50      	cmp	r3, #80	; 0x50
 8003a6e:	d873      	bhi.n	8003b58 <HAL_TIM_ConfigClockSource+0x16c>
 8003a70:	2b40      	cmp	r3, #64	; 0x40
 8003a72:	d058      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x13a>
 8003a74:	2b40      	cmp	r3, #64	; 0x40
 8003a76:	d86f      	bhi.n	8003b58 <HAL_TIM_ConfigClockSource+0x16c>
 8003a78:	2b30      	cmp	r3, #48	; 0x30
 8003a7a:	d064      	beq.n	8003b46 <HAL_TIM_ConfigClockSource+0x15a>
 8003a7c:	2b30      	cmp	r3, #48	; 0x30
 8003a7e:	d86b      	bhi.n	8003b58 <HAL_TIM_ConfigClockSource+0x16c>
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	d060      	beq.n	8003b46 <HAL_TIM_ConfigClockSource+0x15a>
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d867      	bhi.n	8003b58 <HAL_TIM_ConfigClockSource+0x16c>
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d05c      	beq.n	8003b46 <HAL_TIM_ConfigClockSource+0x15a>
 8003a8c:	2b10      	cmp	r3, #16
 8003a8e:	d05a      	beq.n	8003b46 <HAL_TIM_ConfigClockSource+0x15a>
 8003a90:	e062      	b.n	8003b58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	6899      	ldr	r1, [r3, #8]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f000 fb19 	bl	80040d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ab4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	609a      	str	r2, [r3, #8]
      break;
 8003abe:	e04f      	b.n	8003b60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	6899      	ldr	r1, [r3, #8]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f000 fb02 	bl	80040d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ae2:	609a      	str	r2, [r3, #8]
      break;
 8003ae4:	e03c      	b.n	8003b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	6859      	ldr	r1, [r3, #4]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	461a      	mov	r2, r3
 8003af4:	f000 fa76 	bl	8003fe4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2150      	movs	r1, #80	; 0x50
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 facf 	bl	80040a2 <TIM_ITRx_SetConfig>
      break;
 8003b04:	e02c      	b.n	8003b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	6859      	ldr	r1, [r3, #4]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	461a      	mov	r2, r3
 8003b14:	f000 fa95 	bl	8004042 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2160      	movs	r1, #96	; 0x60
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fabf 	bl	80040a2 <TIM_ITRx_SetConfig>
      break;
 8003b24:	e01c      	b.n	8003b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6818      	ldr	r0, [r3, #0]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	6859      	ldr	r1, [r3, #4]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	461a      	mov	r2, r3
 8003b34:	f000 fa56 	bl	8003fe4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2140      	movs	r1, #64	; 0x40
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 faaf 	bl	80040a2 <TIM_ITRx_SetConfig>
      break;
 8003b44:	e00c      	b.n	8003b60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4610      	mov	r0, r2
 8003b52:	f000 faa6 	bl	80040a2 <TIM_ITRx_SetConfig>
      break;
 8003b56:	e003      	b.n	8003b60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b5c:	e000      	b.n	8003b60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
	...

08003bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a34      	ldr	r2, [pc, #208]	; (8003cb0 <TIM_Base_SetConfig+0xe4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00f      	beq.n	8003c04 <TIM_Base_SetConfig+0x38>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bea:	d00b      	beq.n	8003c04 <TIM_Base_SetConfig+0x38>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a31      	ldr	r2, [pc, #196]	; (8003cb4 <TIM_Base_SetConfig+0xe8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d007      	beq.n	8003c04 <TIM_Base_SetConfig+0x38>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a30      	ldr	r2, [pc, #192]	; (8003cb8 <TIM_Base_SetConfig+0xec>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d003      	beq.n	8003c04 <TIM_Base_SetConfig+0x38>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a2f      	ldr	r2, [pc, #188]	; (8003cbc <TIM_Base_SetConfig+0xf0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d108      	bne.n	8003c16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a25      	ldr	r2, [pc, #148]	; (8003cb0 <TIM_Base_SetConfig+0xe4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d01b      	beq.n	8003c56 <TIM_Base_SetConfig+0x8a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c24:	d017      	beq.n	8003c56 <TIM_Base_SetConfig+0x8a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a22      	ldr	r2, [pc, #136]	; (8003cb4 <TIM_Base_SetConfig+0xe8>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <TIM_Base_SetConfig+0x8a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a21      	ldr	r2, [pc, #132]	; (8003cb8 <TIM_Base_SetConfig+0xec>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00f      	beq.n	8003c56 <TIM_Base_SetConfig+0x8a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a20      	ldr	r2, [pc, #128]	; (8003cbc <TIM_Base_SetConfig+0xf0>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00b      	beq.n	8003c56 <TIM_Base_SetConfig+0x8a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a1f      	ldr	r2, [pc, #124]	; (8003cc0 <TIM_Base_SetConfig+0xf4>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d007      	beq.n	8003c56 <TIM_Base_SetConfig+0x8a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a1e      	ldr	r2, [pc, #120]	; (8003cc4 <TIM_Base_SetConfig+0xf8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d003      	beq.n	8003c56 <TIM_Base_SetConfig+0x8a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <TIM_Base_SetConfig+0xfc>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d108      	bne.n	8003c68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a08      	ldr	r2, [pc, #32]	; (8003cb0 <TIM_Base_SetConfig+0xe4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d103      	bne.n	8003c9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	615a      	str	r2, [r3, #20]
}
 8003ca2:	bf00      	nop
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40010000 	.word	0x40010000
 8003cb4:	40000400 	.word	0x40000400
 8003cb8:	40000800 	.word	0x40000800
 8003cbc:	40000c00 	.word	0x40000c00
 8003cc0:	40014000 	.word	0x40014000
 8003cc4:	40014400 	.word	0x40014400
 8003cc8:	40014800 	.word	0x40014800

08003ccc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	f023 0201 	bic.w	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 0303 	bic.w	r3, r3, #3
 8003d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f023 0302 	bic.w	r3, r3, #2
 8003d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a1c      	ldr	r2, [pc, #112]	; (8003d94 <TIM_OC1_SetConfig+0xc8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d10c      	bne.n	8003d42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f023 0308 	bic.w	r3, r3, #8
 8003d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f023 0304 	bic.w	r3, r3, #4
 8003d40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a13      	ldr	r2, [pc, #76]	; (8003d94 <TIM_OC1_SetConfig+0xc8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d111      	bne.n	8003d6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	621a      	str	r2, [r3, #32]
}
 8003d88:	bf00      	nop
 8003d8a:	371c      	adds	r7, #28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	40010000 	.word	0x40010000

08003d98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	f023 0210 	bic.w	r2, r3, #16
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	021b      	lsls	r3, r3, #8
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f023 0320 	bic.w	r3, r3, #32
 8003de2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a1e      	ldr	r2, [pc, #120]	; (8003e6c <TIM_OC2_SetConfig+0xd4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d10d      	bne.n	8003e14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a15      	ldr	r2, [pc, #84]	; (8003e6c <TIM_OC2_SetConfig+0xd4>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d113      	bne.n	8003e44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	621a      	str	r2, [r3, #32]
}
 8003e5e:	bf00      	nop
 8003e60:	371c      	adds	r7, #28
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40010000 	.word	0x40010000

08003e70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f023 0303 	bic.w	r3, r3, #3
 8003ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	021b      	lsls	r3, r3, #8
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a1d      	ldr	r2, [pc, #116]	; (8003f40 <TIM_OC3_SetConfig+0xd0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d10d      	bne.n	8003eea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ed4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	021b      	lsls	r3, r3, #8
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a14      	ldr	r2, [pc, #80]	; (8003f40 <TIM_OC3_SetConfig+0xd0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d113      	bne.n	8003f1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	621a      	str	r2, [r3, #32]
}
 8003f34:	bf00      	nop
 8003f36:	371c      	adds	r7, #28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	40010000 	.word	0x40010000

08003f44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	031b      	lsls	r3, r3, #12
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a10      	ldr	r2, [pc, #64]	; (8003fe0 <TIM_OC4_SetConfig+0x9c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d109      	bne.n	8003fb8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003faa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	019b      	lsls	r3, r3, #6
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	621a      	str	r2, [r3, #32]
}
 8003fd2:	bf00      	nop
 8003fd4:	371c      	adds	r7, #28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40010000 	.word	0x40010000

08003fe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f023 0201 	bic.w	r2, r3, #1
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800400e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f023 030a 	bic.w	r3, r3, #10
 8004020:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	621a      	str	r2, [r3, #32]
}
 8004036:	bf00      	nop
 8004038:	371c      	adds	r7, #28
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004042:	b480      	push	{r7}
 8004044:	b087      	sub	sp, #28
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	f023 0210 	bic.w	r2, r3, #16
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800406c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	031b      	lsls	r3, r3, #12
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800407e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	621a      	str	r2, [r3, #32]
}
 8004096:	bf00      	nop
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b085      	sub	sp, #20
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	f043 0307 	orr.w	r3, r3, #7
 80040c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	609a      	str	r2, [r3, #8]
}
 80040cc:	bf00      	nop
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	021a      	lsls	r2, r3, #8
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4313      	orrs	r3, r2
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	4313      	orrs	r3, r2
 8004104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	609a      	str	r2, [r3, #8]
}
 800410c:	bf00      	nop
 800410e:	371c      	adds	r7, #28
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f003 031f 	and.w	r3, r3, #31
 800412a:	2201      	movs	r2, #1
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a1a      	ldr	r2, [r3, #32]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	43db      	mvns	r3, r3
 800413a:	401a      	ands	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a1a      	ldr	r2, [r3, #32]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f003 031f 	and.w	r3, r3, #31
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	fa01 f303 	lsl.w	r3, r1, r3
 8004150:	431a      	orrs	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	621a      	str	r2, [r3, #32]
}
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
	...

08004164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004178:	2302      	movs	r3, #2
 800417a:	e050      	b.n	800421e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1c      	ldr	r2, [pc, #112]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d018      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c8:	d013      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a18      	ldr	r2, [pc, #96]	; (8004230 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00e      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a16      	ldr	r2, [pc, #88]	; (8004234 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d009      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a15      	ldr	r2, [pc, #84]	; (8004238 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d004      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a13      	ldr	r2, [pc, #76]	; (800423c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d10c      	bne.n	800420c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	4313      	orrs	r3, r2
 8004202:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40010000 	.word	0x40010000
 8004230:	40000400 	.word	0x40000400
 8004234:	40000800 	.word	0x40000800
 8004238:	40000c00 	.word	0x40000c00
 800423c:	40014000 	.word	0x40014000

08004240 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e03f      	b.n	80042fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fd fbdc 	bl	8001a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2224      	movs	r2, #36	; 0x24
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 fe49 	bl	8004f44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695a      	ldr	r2, [r3, #20]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e021      	b.n	8004358 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2224      	movs	r2, #36	; 0x24
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800432a:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7fd fc4f 	bl	8001bd0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08a      	sub	sp, #40	; 0x28
 8004364:	af02      	add	r7, sp, #8
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	4613      	mov	r3, r2
 800436e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b20      	cmp	r3, #32
 800437e:	d17c      	bne.n	800447a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <HAL_UART_Transmit+0x2c>
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e075      	b.n	800447c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004396:	2b01      	cmp	r3, #1
 8004398:	d101      	bne.n	800439e <HAL_UART_Transmit+0x3e>
 800439a:	2302      	movs	r3, #2
 800439c:	e06e      	b.n	800447c <HAL_UART_Transmit+0x11c>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2221      	movs	r2, #33	; 0x21
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043b4:	f7fd fe0a 	bl	8001fcc <HAL_GetTick>
 80043b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	88fa      	ldrh	r2, [r7, #6]
 80043be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	88fa      	ldrh	r2, [r7, #6]
 80043c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ce:	d108      	bne.n	80043e2 <HAL_UART_Transmit+0x82>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d104      	bne.n	80043e2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043d8:	2300      	movs	r3, #0
 80043da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	61bb      	str	r3, [r7, #24]
 80043e0:	e003      	b.n	80043ea <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043f2:	e02a      	b.n	800444a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	2200      	movs	r2, #0
 80043fc:	2180      	movs	r1, #128	; 0x80
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 fb5a 	bl	8004ab8 <UART_WaitOnFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e036      	b.n	800447c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10b      	bne.n	800442c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004422:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	3302      	adds	r3, #2
 8004428:	61bb      	str	r3, [r7, #24]
 800442a:	e007      	b.n	800443c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	781a      	ldrb	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	3301      	adds	r3, #1
 800443a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1cf      	bne.n	80043f4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2200      	movs	r2, #0
 800445c:	2140      	movs	r1, #64	; 0x40
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 fb2a 	bl	8004ab8 <UART_WaitOnFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e006      	b.n	800447c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	e000      	b.n	800447c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800447a:	2302      	movs	r3, #2
  }
}
 800447c:	4618      	mov	r0, r3
 800447e:	3720      	adds	r7, #32
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	4613      	mov	r3, r2
 8004490:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b20      	cmp	r3, #32
 800449c:	d130      	bne.n	8004500 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <HAL_UART_Transmit_IT+0x26>
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e029      	b.n	8004502 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_UART_Transmit_IT+0x38>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e022      	b.n	8004502 <HAL_UART_Transmit_IT+0x7e>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	88fa      	ldrh	r2, [r7, #6]
 80044ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	88fa      	ldrh	r2, [r7, #6]
 80044d4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2221      	movs	r2, #33	; 0x21
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044fa:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	e000      	b.n	8004502 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004500:	2302      	movs	r3, #2
  }
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	4613      	mov	r3, r2
 800451a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b20      	cmp	r3, #32
 8004526:	d11d      	bne.n	8004564 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <HAL_UART_Receive_IT+0x26>
 800452e:	88fb      	ldrh	r3, [r7, #6]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e016      	b.n	8004566 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_UART_Receive_IT+0x38>
 8004542:	2302      	movs	r3, #2
 8004544:	e00f      	b.n	8004566 <HAL_UART_Receive_IT+0x58>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004554:	88fb      	ldrh	r3, [r7, #6]
 8004556:	461a      	mov	r2, r3
 8004558:	68b9      	ldr	r1, [r7, #8]
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 fb1a 	bl	8004b94 <UART_Start_Receive_IT>
 8004560:	4603      	mov	r3, r0
 8004562:	e000      	b.n	8004566 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004564:	2302      	movs	r3, #2
  }
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b0ba      	sub	sp, #232	; 0xe8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004596:	2300      	movs	r3, #0
 8004598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800459c:	2300      	movs	r3, #0
 800459e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80045ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10f      	bne.n	80045d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d009      	beq.n	80045d6 <HAL_UART_IRQHandler+0x66>
 80045c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fbfd 	bl	8004dce <UART_Receive_IT>
      return;
 80045d4:	e256      	b.n	8004a84 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 80de 	beq.w	800479c <HAL_UART_IRQHandler+0x22c>
 80045e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d106      	bne.n	80045fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80d1 	beq.w	800479c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00b      	beq.n	800461e <HAL_UART_IRQHandler+0xae>
 8004606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800460a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f043 0201 	orr.w	r2, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800461e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00b      	beq.n	8004642 <HAL_UART_IRQHandler+0xd2>
 800462a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f043 0202 	orr.w	r2, r3, #2
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00b      	beq.n	8004666 <HAL_UART_IRQHandler+0xf6>
 800464e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d005      	beq.n	8004666 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f043 0204 	orr.w	r2, r3, #4
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d011      	beq.n	8004696 <HAL_UART_IRQHandler+0x126>
 8004672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d105      	bne.n	800468a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800467e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d005      	beq.n	8004696 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f043 0208 	orr.w	r2, r3, #8
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 81ed 	beq.w	8004a7a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_UART_IRQHandler+0x14e>
 80046ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 fb88 	bl	8004dce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	bf0c      	ite	eq
 80046cc:	2301      	moveq	r3, #1
 80046ce:	2300      	movne	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d103      	bne.n	80046ea <HAL_UART_IRQHandler+0x17a>
 80046e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d04f      	beq.n	800478a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fa90 	bl	8004c10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fa:	2b40      	cmp	r3, #64	; 0x40
 80046fc:	d141      	bne.n	8004782 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3314      	adds	r3, #20
 8004704:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004708:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004714:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800471c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3314      	adds	r3, #20
 8004726:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800472a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800472e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004732:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004736:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800473a:	e841 2300 	strex	r3, r2, [r1]
 800473e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1d9      	bne.n	80046fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	2b00      	cmp	r3, #0
 8004750:	d013      	beq.n	800477a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	4a7d      	ldr	r2, [pc, #500]	; (800494c <HAL_UART_IRQHandler+0x3dc>)
 8004758:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475e:	4618      	mov	r0, r3
 8004760:	f7fd fe17 	bl	8002392 <HAL_DMA_Abort_IT>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d016      	beq.n	8004798 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004774:	4610      	mov	r0, r2
 8004776:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004778:	e00e      	b.n	8004798 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fc fec4 	bl	8001508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004780:	e00a      	b.n	8004798 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fc fec0 	bl	8001508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004788:	e006      	b.n	8004798 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fc febc 	bl	8001508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004796:	e170      	b.n	8004a7a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004798:	bf00      	nop
    return;
 800479a:	e16e      	b.n	8004a7a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	f040 814a 	bne.w	8004a3a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 8143 	beq.w	8004a3a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 813c 	beq.w	8004a3a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047c2:	2300      	movs	r3, #0
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e2:	2b40      	cmp	r3, #64	; 0x40
 80047e4:	f040 80b4 	bne.w	8004950 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 8140 	beq.w	8004a7e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004802:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004806:	429a      	cmp	r2, r3
 8004808:	f080 8139 	bcs.w	8004a7e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004812:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800481e:	f000 8088 	beq.w	8004932 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	330c      	adds	r3, #12
 8004828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004830:	e853 3f00 	ldrex	r3, [r3]
 8004834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004838:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800483c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	330c      	adds	r3, #12
 800484a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800484e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004852:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800485a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800485e:	e841 2300 	strex	r3, r2, [r1]
 8004862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1d9      	bne.n	8004822 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3314      	adds	r3, #20
 8004874:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004878:	e853 3f00 	ldrex	r3, [r3]
 800487c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800487e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004880:	f023 0301 	bic.w	r3, r3, #1
 8004884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3314      	adds	r3, #20
 800488e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004892:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004896:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004898:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800489a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e1      	bne.n	800486e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3314      	adds	r3, #20
 80048b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3314      	adds	r3, #20
 80048ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e3      	bne.n	80048aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	330c      	adds	r3, #12
 80048f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048fa:	e853 3f00 	ldrex	r3, [r3]
 80048fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004902:	f023 0310 	bic.w	r3, r3, #16
 8004906:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	330c      	adds	r3, #12
 8004910:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004914:	65ba      	str	r2, [r7, #88]	; 0x58
 8004916:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800491a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800491c:	e841 2300 	strex	r3, r2, [r1]
 8004920:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e3      	bne.n	80048f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492c:	4618      	mov	r0, r3
 800492e:	f7fd fcc0 	bl	80022b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800493a:	b29b      	uxth	r3, r3
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	b29b      	uxth	r3, r3
 8004940:	4619      	mov	r1, r3
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f8ac 	bl	8004aa0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004948:	e099      	b.n	8004a7e <HAL_UART_IRQHandler+0x50e>
 800494a:	bf00      	nop
 800494c:	08004cd7 	.word	0x08004cd7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004958:	b29b      	uxth	r3, r3
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 808b 	beq.w	8004a82 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800496c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 8086 	beq.w	8004a82 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	330c      	adds	r3, #12
 800497c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004988:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800498c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	330c      	adds	r3, #12
 8004996:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800499a:	647a      	str	r2, [r7, #68]	; 0x44
 800499c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e3      	bne.n	8004976 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3314      	adds	r3, #20
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	e853 3f00 	ldrex	r3, [r3]
 80049bc:	623b      	str	r3, [r7, #32]
   return(result);
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	f023 0301 	bic.w	r3, r3, #1
 80049c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3314      	adds	r3, #20
 80049ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049d2:	633a      	str	r2, [r7, #48]	; 0x30
 80049d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e3      	bne.n	80049ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	330c      	adds	r3, #12
 80049fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	e853 3f00 	ldrex	r3, [r3]
 8004a02:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0310 	bic.w	r3, r3, #16
 8004a0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	330c      	adds	r3, #12
 8004a14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a18:	61fa      	str	r2, [r7, #28]
 8004a1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1c:	69b9      	ldr	r1, [r7, #24]
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	e841 2300 	strex	r3, r2, [r1]
 8004a24:	617b      	str	r3, [r7, #20]
   return(result);
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1e3      	bne.n	80049f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a30:	4619      	mov	r1, r3
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f834 	bl	8004aa0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a38:	e023      	b.n	8004a82 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d009      	beq.n	8004a5a <HAL_UART_IRQHandler+0x4ea>
 8004a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f953 	bl	8004cfe <UART_Transmit_IT>
    return;
 8004a58:	e014      	b.n	8004a84 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00e      	beq.n	8004a84 <HAL_UART_IRQHandler+0x514>
 8004a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d008      	beq.n	8004a84 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f993 	bl	8004d9e <UART_EndTransmit_IT>
    return;
 8004a78:	e004      	b.n	8004a84 <HAL_UART_IRQHandler+0x514>
    return;
 8004a7a:	bf00      	nop
 8004a7c:	e002      	b.n	8004a84 <HAL_UART_IRQHandler+0x514>
      return;
 8004a7e:	bf00      	nop
 8004a80:	e000      	b.n	8004a84 <HAL_UART_IRQHandler+0x514>
      return;
 8004a82:	bf00      	nop
  }
}
 8004a84:	37e8      	adds	r7, #232	; 0xe8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop

08004a8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b090      	sub	sp, #64	; 0x40
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ac8:	e050      	b.n	8004b6c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad0:	d04c      	beq.n	8004b6c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d007      	beq.n	8004ae8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ad8:	f7fd fa78 	bl	8001fcc <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d241      	bcs.n	8004b6c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	330c      	adds	r3, #12
 8004aee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	e853 3f00 	ldrex	r3, [r3]
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	330c      	adds	r3, #12
 8004b06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b08:	637a      	str	r2, [r7, #52]	; 0x34
 8004b0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b10:	e841 2300 	strex	r3, r2, [r1]
 8004b14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1e5      	bne.n	8004ae8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3314      	adds	r3, #20
 8004b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	e853 3f00 	ldrex	r3, [r3]
 8004b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f023 0301 	bic.w	r3, r3, #1
 8004b32:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3314      	adds	r3, #20
 8004b3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b3c:	623a      	str	r2, [r7, #32]
 8004b3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	69f9      	ldr	r1, [r7, #28]
 8004b42:	6a3a      	ldr	r2, [r7, #32]
 8004b44:	e841 2300 	strex	r3, r2, [r1]
 8004b48:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e5      	bne.n	8004b1c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e00f      	b.n	8004b8c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	4013      	ands	r3, r2
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	bf0c      	ite	eq
 8004b7c:	2301      	moveq	r3, #1
 8004b7e:	2300      	movne	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	461a      	mov	r2, r3
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d09f      	beq.n	8004aca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3740      	adds	r7, #64	; 0x40
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	88fa      	ldrh	r2, [r7, #6]
 8004bac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	88fa      	ldrh	r2, [r7, #6]
 8004bb2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2222      	movs	r2, #34	; 0x22
 8004bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d007      	beq.n	8004be2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004be0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695a      	ldr	r2, [r3, #20]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0201 	orr.w	r2, r2, #1
 8004bf0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f042 0220 	orr.w	r2, r2, #32
 8004c00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b095      	sub	sp, #84	; 0x54
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	330c      	adds	r3, #12
 8004c1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c22:	e853 3f00 	ldrex	r3, [r3]
 8004c26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	330c      	adds	r3, #12
 8004c36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c38:	643a      	str	r2, [r7, #64]	; 0x40
 8004c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c40:	e841 2300 	strex	r3, r2, [r1]
 8004c44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e5      	bne.n	8004c18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3314      	adds	r3, #20
 8004c52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	e853 3f00 	ldrex	r3, [r3]
 8004c5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	f023 0301 	bic.w	r3, r3, #1
 8004c62:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3314      	adds	r3, #20
 8004c6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c74:	e841 2300 	strex	r3, r2, [r1]
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e5      	bne.n	8004c4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d119      	bne.n	8004cbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f023 0310 	bic.w	r3, r3, #16
 8004c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	330c      	adds	r3, #12
 8004ca6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ca8:	61ba      	str	r2, [r7, #24]
 8004caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	6979      	ldr	r1, [r7, #20]
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e5      	bne.n	8004c88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cca:	bf00      	nop
 8004ccc:	3754      	adds	r7, #84	; 0x54
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b084      	sub	sp, #16
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f7fc fc09 	bl	8001508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cf6:	bf00      	nop
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b085      	sub	sp, #20
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b21      	cmp	r3, #33	; 0x21
 8004d10:	d13e      	bne.n	8004d90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1a:	d114      	bne.n	8004d46 <UART_Transmit_IT+0x48>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d110      	bne.n	8004d46 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	1c9a      	adds	r2, r3, #2
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	621a      	str	r2, [r3, #32]
 8004d44:	e008      	b.n	8004d58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	1c59      	adds	r1, r3, #1
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6211      	str	r1, [r2, #32]
 8004d50:	781a      	ldrb	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	4619      	mov	r1, r3
 8004d66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10f      	bne.n	8004d8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	e000      	b.n	8004d92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d90:	2302      	movs	r3, #2
  }
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b082      	sub	sp, #8
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004db4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff fe64 	bl	8004a8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b08c      	sub	sp, #48	; 0x30
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b22      	cmp	r3, #34	; 0x22
 8004de0:	f040 80ab 	bne.w	8004f3a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dec:	d117      	bne.n	8004e1e <UART_Receive_IT+0x50>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d113      	bne.n	8004e1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e16:	1c9a      	adds	r2, r3, #2
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	629a      	str	r2, [r3, #40]	; 0x28
 8004e1c:	e026      	b.n	8004e6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e24:	2300      	movs	r3, #0
 8004e26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e30:	d007      	beq.n	8004e42 <UART_Receive_IT+0x74>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10a      	bne.n	8004e50 <UART_Receive_IT+0x82>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4c:	701a      	strb	r2, [r3, #0]
 8004e4e:	e008      	b.n	8004e62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d15a      	bne.n	8004f36 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0220 	bic.w	r2, r2, #32
 8004e8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695a      	ldr	r2, [r3, #20]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0201 	bic.w	r2, r2, #1
 8004eae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d135      	bne.n	8004f2c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	330c      	adds	r3, #12
 8004ecc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f023 0310 	bic.w	r3, r3, #16
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	330c      	adds	r3, #12
 8004ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee6:	623a      	str	r2, [r7, #32]
 8004ee8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eea:	69f9      	ldr	r1, [r7, #28]
 8004eec:	6a3a      	ldr	r2, [r7, #32]
 8004eee:	e841 2300 	strex	r3, r2, [r1]
 8004ef2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1e5      	bne.n	8004ec6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0310 	and.w	r3, r3, #16
 8004f04:	2b10      	cmp	r3, #16
 8004f06:	d10a      	bne.n	8004f1e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f08:	2300      	movs	r3, #0
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f22:	4619      	mov	r1, r3
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7ff fdbb 	bl	8004aa0 <HAL_UARTEx_RxEventCallback>
 8004f2a:	e002      	b.n	8004f32 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7fc fb41 	bl	80015b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e002      	b.n	8004f3c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	e000      	b.n	8004f3c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004f3a:	2302      	movs	r3, #2
  }
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3730      	adds	r7, #48	; 0x30
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f48:	b0c0      	sub	sp, #256	; 0x100
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f60:	68d9      	ldr	r1, [r3, #12]
 8004f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	ea40 0301 	orr.w	r3, r0, r1
 8004f6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	431a      	orrs	r2, r3
 8004f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f9c:	f021 010c 	bic.w	r1, r1, #12
 8004fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004faa:	430b      	orrs	r3, r1
 8004fac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fbe:	6999      	ldr	r1, [r3, #24]
 8004fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	ea40 0301 	orr.w	r3, r0, r1
 8004fca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	4b8f      	ldr	r3, [pc, #572]	; (8005210 <UART_SetConfig+0x2cc>)
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d005      	beq.n	8004fe4 <UART_SetConfig+0xa0>
 8004fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	4b8d      	ldr	r3, [pc, #564]	; (8005214 <UART_SetConfig+0x2d0>)
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d104      	bne.n	8004fee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fe4:	f7fe f8d8 	bl	8003198 <HAL_RCC_GetPCLK2Freq>
 8004fe8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004fec:	e003      	b.n	8004ff6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fee:	f7fe f8bf 	bl	8003170 <HAL_RCC_GetPCLK1Freq>
 8004ff2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005000:	f040 810c 	bne.w	800521c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005008:	2200      	movs	r2, #0
 800500a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800500e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005012:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005016:	4622      	mov	r2, r4
 8005018:	462b      	mov	r3, r5
 800501a:	1891      	adds	r1, r2, r2
 800501c:	65b9      	str	r1, [r7, #88]	; 0x58
 800501e:	415b      	adcs	r3, r3
 8005020:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005022:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005026:	4621      	mov	r1, r4
 8005028:	eb12 0801 	adds.w	r8, r2, r1
 800502c:	4629      	mov	r1, r5
 800502e:	eb43 0901 	adc.w	r9, r3, r1
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	f04f 0300 	mov.w	r3, #0
 800503a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800503e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005042:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005046:	4690      	mov	r8, r2
 8005048:	4699      	mov	r9, r3
 800504a:	4623      	mov	r3, r4
 800504c:	eb18 0303 	adds.w	r3, r8, r3
 8005050:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005054:	462b      	mov	r3, r5
 8005056:	eb49 0303 	adc.w	r3, r9, r3
 800505a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800505e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800506a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800506e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005072:	460b      	mov	r3, r1
 8005074:	18db      	adds	r3, r3, r3
 8005076:	653b      	str	r3, [r7, #80]	; 0x50
 8005078:	4613      	mov	r3, r2
 800507a:	eb42 0303 	adc.w	r3, r2, r3
 800507e:	657b      	str	r3, [r7, #84]	; 0x54
 8005080:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005084:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005088:	f7fb f912 	bl	80002b0 <__aeabi_uldivmod>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4b61      	ldr	r3, [pc, #388]	; (8005218 <UART_SetConfig+0x2d4>)
 8005092:	fba3 2302 	umull	r2, r3, r3, r2
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	011c      	lsls	r4, r3, #4
 800509a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80050a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80050ac:	4642      	mov	r2, r8
 80050ae:	464b      	mov	r3, r9
 80050b0:	1891      	adds	r1, r2, r2
 80050b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80050b4:	415b      	adcs	r3, r3
 80050b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050bc:	4641      	mov	r1, r8
 80050be:	eb12 0a01 	adds.w	sl, r2, r1
 80050c2:	4649      	mov	r1, r9
 80050c4:	eb43 0b01 	adc.w	fp, r3, r1
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050dc:	4692      	mov	sl, r2
 80050de:	469b      	mov	fp, r3
 80050e0:	4643      	mov	r3, r8
 80050e2:	eb1a 0303 	adds.w	r3, sl, r3
 80050e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050ea:	464b      	mov	r3, r9
 80050ec:	eb4b 0303 	adc.w	r3, fp, r3
 80050f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005100:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005104:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005108:	460b      	mov	r3, r1
 800510a:	18db      	adds	r3, r3, r3
 800510c:	643b      	str	r3, [r7, #64]	; 0x40
 800510e:	4613      	mov	r3, r2
 8005110:	eb42 0303 	adc.w	r3, r2, r3
 8005114:	647b      	str	r3, [r7, #68]	; 0x44
 8005116:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800511a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800511e:	f7fb f8c7 	bl	80002b0 <__aeabi_uldivmod>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	4611      	mov	r1, r2
 8005128:	4b3b      	ldr	r3, [pc, #236]	; (8005218 <UART_SetConfig+0x2d4>)
 800512a:	fba3 2301 	umull	r2, r3, r3, r1
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	2264      	movs	r2, #100	; 0x64
 8005132:	fb02 f303 	mul.w	r3, r2, r3
 8005136:	1acb      	subs	r3, r1, r3
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800513e:	4b36      	ldr	r3, [pc, #216]	; (8005218 <UART_SetConfig+0x2d4>)
 8005140:	fba3 2302 	umull	r2, r3, r3, r2
 8005144:	095b      	lsrs	r3, r3, #5
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800514c:	441c      	add	r4, r3
 800514e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005152:	2200      	movs	r2, #0
 8005154:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005158:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800515c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005160:	4642      	mov	r2, r8
 8005162:	464b      	mov	r3, r9
 8005164:	1891      	adds	r1, r2, r2
 8005166:	63b9      	str	r1, [r7, #56]	; 0x38
 8005168:	415b      	adcs	r3, r3
 800516a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800516c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005170:	4641      	mov	r1, r8
 8005172:	1851      	adds	r1, r2, r1
 8005174:	6339      	str	r1, [r7, #48]	; 0x30
 8005176:	4649      	mov	r1, r9
 8005178:	414b      	adcs	r3, r1
 800517a:	637b      	str	r3, [r7, #52]	; 0x34
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005188:	4659      	mov	r1, fp
 800518a:	00cb      	lsls	r3, r1, #3
 800518c:	4651      	mov	r1, sl
 800518e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005192:	4651      	mov	r1, sl
 8005194:	00ca      	lsls	r2, r1, #3
 8005196:	4610      	mov	r0, r2
 8005198:	4619      	mov	r1, r3
 800519a:	4603      	mov	r3, r0
 800519c:	4642      	mov	r2, r8
 800519e:	189b      	adds	r3, r3, r2
 80051a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051a4:	464b      	mov	r3, r9
 80051a6:	460a      	mov	r2, r1
 80051a8:	eb42 0303 	adc.w	r3, r2, r3
 80051ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051c4:	460b      	mov	r3, r1
 80051c6:	18db      	adds	r3, r3, r3
 80051c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ca:	4613      	mov	r3, r2
 80051cc:	eb42 0303 	adc.w	r3, r2, r3
 80051d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051da:	f7fb f869 	bl	80002b0 <__aeabi_uldivmod>
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4b0d      	ldr	r3, [pc, #52]	; (8005218 <UART_SetConfig+0x2d4>)
 80051e4:	fba3 1302 	umull	r1, r3, r3, r2
 80051e8:	095b      	lsrs	r3, r3, #5
 80051ea:	2164      	movs	r1, #100	; 0x64
 80051ec:	fb01 f303 	mul.w	r3, r1, r3
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	3332      	adds	r3, #50	; 0x32
 80051f6:	4a08      	ldr	r2, [pc, #32]	; (8005218 <UART_SetConfig+0x2d4>)
 80051f8:	fba2 2303 	umull	r2, r3, r2, r3
 80051fc:	095b      	lsrs	r3, r3, #5
 80051fe:	f003 0207 	and.w	r2, r3, #7
 8005202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4422      	add	r2, r4
 800520a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800520c:	e106      	b.n	800541c <UART_SetConfig+0x4d8>
 800520e:	bf00      	nop
 8005210:	40011000 	.word	0x40011000
 8005214:	40011400 	.word	0x40011400
 8005218:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800521c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005220:	2200      	movs	r2, #0
 8005222:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005226:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800522a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800522e:	4642      	mov	r2, r8
 8005230:	464b      	mov	r3, r9
 8005232:	1891      	adds	r1, r2, r2
 8005234:	6239      	str	r1, [r7, #32]
 8005236:	415b      	adcs	r3, r3
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
 800523a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800523e:	4641      	mov	r1, r8
 8005240:	1854      	adds	r4, r2, r1
 8005242:	4649      	mov	r1, r9
 8005244:	eb43 0501 	adc.w	r5, r3, r1
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	00eb      	lsls	r3, r5, #3
 8005252:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005256:	00e2      	lsls	r2, r4, #3
 8005258:	4614      	mov	r4, r2
 800525a:	461d      	mov	r5, r3
 800525c:	4643      	mov	r3, r8
 800525e:	18e3      	adds	r3, r4, r3
 8005260:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005264:	464b      	mov	r3, r9
 8005266:	eb45 0303 	adc.w	r3, r5, r3
 800526a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800526e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800527a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800527e:	f04f 0200 	mov.w	r2, #0
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800528a:	4629      	mov	r1, r5
 800528c:	008b      	lsls	r3, r1, #2
 800528e:	4621      	mov	r1, r4
 8005290:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005294:	4621      	mov	r1, r4
 8005296:	008a      	lsls	r2, r1, #2
 8005298:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800529c:	f7fb f808 	bl	80002b0 <__aeabi_uldivmod>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4b60      	ldr	r3, [pc, #384]	; (8005428 <UART_SetConfig+0x4e4>)
 80052a6:	fba3 2302 	umull	r2, r3, r3, r2
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	011c      	lsls	r4, r3, #4
 80052ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052b2:	2200      	movs	r2, #0
 80052b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052c0:	4642      	mov	r2, r8
 80052c2:	464b      	mov	r3, r9
 80052c4:	1891      	adds	r1, r2, r2
 80052c6:	61b9      	str	r1, [r7, #24]
 80052c8:	415b      	adcs	r3, r3
 80052ca:	61fb      	str	r3, [r7, #28]
 80052cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052d0:	4641      	mov	r1, r8
 80052d2:	1851      	adds	r1, r2, r1
 80052d4:	6139      	str	r1, [r7, #16]
 80052d6:	4649      	mov	r1, r9
 80052d8:	414b      	adcs	r3, r1
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052e8:	4659      	mov	r1, fp
 80052ea:	00cb      	lsls	r3, r1, #3
 80052ec:	4651      	mov	r1, sl
 80052ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052f2:	4651      	mov	r1, sl
 80052f4:	00ca      	lsls	r2, r1, #3
 80052f6:	4610      	mov	r0, r2
 80052f8:	4619      	mov	r1, r3
 80052fa:	4603      	mov	r3, r0
 80052fc:	4642      	mov	r2, r8
 80052fe:	189b      	adds	r3, r3, r2
 8005300:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005304:	464b      	mov	r3, r9
 8005306:	460a      	mov	r2, r1
 8005308:	eb42 0303 	adc.w	r3, r2, r3
 800530c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	67bb      	str	r3, [r7, #120]	; 0x78
 800531a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005328:	4649      	mov	r1, r9
 800532a:	008b      	lsls	r3, r1, #2
 800532c:	4641      	mov	r1, r8
 800532e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005332:	4641      	mov	r1, r8
 8005334:	008a      	lsls	r2, r1, #2
 8005336:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800533a:	f7fa ffb9 	bl	80002b0 <__aeabi_uldivmod>
 800533e:	4602      	mov	r2, r0
 8005340:	460b      	mov	r3, r1
 8005342:	4611      	mov	r1, r2
 8005344:	4b38      	ldr	r3, [pc, #224]	; (8005428 <UART_SetConfig+0x4e4>)
 8005346:	fba3 2301 	umull	r2, r3, r3, r1
 800534a:	095b      	lsrs	r3, r3, #5
 800534c:	2264      	movs	r2, #100	; 0x64
 800534e:	fb02 f303 	mul.w	r3, r2, r3
 8005352:	1acb      	subs	r3, r1, r3
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	3332      	adds	r3, #50	; 0x32
 8005358:	4a33      	ldr	r2, [pc, #204]	; (8005428 <UART_SetConfig+0x4e4>)
 800535a:	fba2 2303 	umull	r2, r3, r2, r3
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005364:	441c      	add	r4, r3
 8005366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800536a:	2200      	movs	r2, #0
 800536c:	673b      	str	r3, [r7, #112]	; 0x70
 800536e:	677a      	str	r2, [r7, #116]	; 0x74
 8005370:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005374:	4642      	mov	r2, r8
 8005376:	464b      	mov	r3, r9
 8005378:	1891      	adds	r1, r2, r2
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	415b      	adcs	r3, r3
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005384:	4641      	mov	r1, r8
 8005386:	1851      	adds	r1, r2, r1
 8005388:	6039      	str	r1, [r7, #0]
 800538a:	4649      	mov	r1, r9
 800538c:	414b      	adcs	r3, r1
 800538e:	607b      	str	r3, [r7, #4]
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800539c:	4659      	mov	r1, fp
 800539e:	00cb      	lsls	r3, r1, #3
 80053a0:	4651      	mov	r1, sl
 80053a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053a6:	4651      	mov	r1, sl
 80053a8:	00ca      	lsls	r2, r1, #3
 80053aa:	4610      	mov	r0, r2
 80053ac:	4619      	mov	r1, r3
 80053ae:	4603      	mov	r3, r0
 80053b0:	4642      	mov	r2, r8
 80053b2:	189b      	adds	r3, r3, r2
 80053b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80053b6:	464b      	mov	r3, r9
 80053b8:	460a      	mov	r2, r1
 80053ba:	eb42 0303 	adc.w	r3, r2, r3
 80053be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	663b      	str	r3, [r7, #96]	; 0x60
 80053ca:	667a      	str	r2, [r7, #100]	; 0x64
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80053d8:	4649      	mov	r1, r9
 80053da:	008b      	lsls	r3, r1, #2
 80053dc:	4641      	mov	r1, r8
 80053de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053e2:	4641      	mov	r1, r8
 80053e4:	008a      	lsls	r2, r1, #2
 80053e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053ea:	f7fa ff61 	bl	80002b0 <__aeabi_uldivmod>
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <UART_SetConfig+0x4e4>)
 80053f4:	fba3 1302 	umull	r1, r3, r3, r2
 80053f8:	095b      	lsrs	r3, r3, #5
 80053fa:	2164      	movs	r1, #100	; 0x64
 80053fc:	fb01 f303 	mul.w	r3, r1, r3
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	3332      	adds	r3, #50	; 0x32
 8005406:	4a08      	ldr	r2, [pc, #32]	; (8005428 <UART_SetConfig+0x4e4>)
 8005408:	fba2 2303 	umull	r2, r3, r2, r3
 800540c:	095b      	lsrs	r3, r3, #5
 800540e:	f003 020f 	and.w	r2, r3, #15
 8005412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4422      	add	r2, r4
 800541a:	609a      	str	r2, [r3, #8]
}
 800541c:	bf00      	nop
 800541e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005422:	46bd      	mov	sp, r7
 8005424:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005428:	51eb851f 	.word	0x51eb851f

0800542c <HW_RESET>:


//No se puede quedar esperano en las funciones, hay que detectar a situaci�n y salir del bucle.
//pensar que solo entra cuando recibe datos, si no vuelve a entrar queda ah� eternamentes.
void HW_RESET(struct WIFI *a)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_RESET);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6818      	ldr	r0, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	889b      	ldrh	r3, [r3, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	4619      	mov	r1, r3
 8005440:	f7fd fa32 	bl	80028a8 <HAL_GPIO_WritePin>
    ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8005444:	2115      	movs	r1, #21
 8005446:	480b      	ldr	r0, [pc, #44]	; (8005474 <HW_RESET+0x48>)
 8005448:	f7fb fec6 	bl	80011d8 <ITM0_Write>
    HAL_Delay(2000);											//Tiempo de reset del módulo
 800544c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005450:	f7fc fdc8 	bl	8001fe4 <HAL_Delay>
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
 8005454:	210e      	movs	r1, #14
 8005456:	4808      	ldr	r0, [pc, #32]	; (8005478 <HW_RESET+0x4c>)
 8005458:	f7fb febe 	bl	80011d8 <ITM0_Write>
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6818      	ldr	r0, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	889b      	ldrh	r3, [r3, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	4619      	mov	r1, r3
 8005468:	f7fd fa1e 	bl	80028a8 <HAL_GPIO_WritePin>
}
 800546c:	bf00      	nop
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	0800d52c 	.word	0x0800d52c
 8005478:	0800d544 	.word	0x0800d544

0800547c <NOP>:
void NOP(struct WIFI *a)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=0;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <MUX>:
void MUX(struct WIFI *a)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2204      	movs	r2, #4
 800550c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <IPDef>:
void IPDef(struct WIFI *a)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2205      	movs	r2, #5
 8005538:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2206      	movs	r2, #6
 8005590:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2208      	movs	r2, #8
 80055bc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2209      	movs	r2, #9
 80055e8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2207      	movs	r2, #7
 8005614:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <Inicializar>:
void Inicializar(struct WIFI *a)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
a->_data2SND[64]='\0';			//Data a enviar por TCP
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2898 	strb.w	r2, [r3, #2200]	; 0x898
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2a98 	strb.w	r2, [r3, #2712]	; 0xa98
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_instruccion=0;				//Funcion que se desea realizar
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_ejecucion=0;				//Funcion en ejecucion	
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2af8 	strb.w	r2, [r3, #2808]	; 0xaf8
a->_ticks=0;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_ticks2=0;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug=0;					//utilizada par fines de debugging
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_str=0;				//utilizada par fines de debugging
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_pos=0;				//utilizada par fines de debugging
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
a->_debug_chrs=0;				//utilizada par fines de debugging
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_rx_ok=0;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
a->_debug_rx_no_ok=0;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
a->_debug_SEND_OK=0;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_CLOSED=0;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38
a->_debug_WF_DISCONNECT=0;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
a->_debug_FAIL=0;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
a->_debug_CONNECT=0;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_count=0;				//Cuento la catidad de ipds	
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count_old=0;			//Cuento la catidad de ipds
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count2=0;				//SEND OK para enviar datos
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count4=0;				//SEDN OK recibido directo
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count5=0;				//Cuento la catidad de ipds	
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count6=0;				//Cuento la catidad de ipds	
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count7=0;				//Cuento la catidad de ipds
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_debug_count8=0;				//Cuento la catidad de ipds
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_count9=0;				//Cuento la catidad de ipds
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count10=0;			//Cuento la catidad de ipds
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_subpaso=0;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
a->_overflowVector=512;			//Maximo tamaño del vector al procesar un +IPD
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057c2:	f8c3 2d54 	str.w	r2, [r3, #3412]	; 0xd54
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
	...

080057d4 <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 80057d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057d6:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80057da:	af06      	add	r7, sp, #24
 80057dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80057e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80057e4:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 80057e6:	2300      	movs	r3, #0
 80057e8:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80057ec:	2300      	movs	r3, #0
 80057ee:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80057f2:	2300      	movs	r3, #0
 80057f4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80057f8:	2300      	movs	r3, #0
 80057fa:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80057fe:	2300      	movs	r3, #0
 8005800:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 8005804:	2320      	movs	r3, #32
 8005806:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 800580a:	2322      	movs	r3, #34	; 0x22
 800580c:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 8005810:	4b7c      	ldr	r3, [pc, #496]	; (8005a04 <AT_ESP8266_ND+0x230>)
 8005812:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 8005816:	4a7c      	ldr	r2, [pc, #496]	; (8005a08 <AT_ESP8266_ND+0x234>)
 8005818:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800581c:	6812      	ldr	r2, [r2, #0]
 800581e:	4611      	mov	r1, r2
 8005820:	8019      	strh	r1, [r3, #0]
 8005822:	3302      	adds	r3, #2
 8005824:	0c12      	lsrs	r2, r2, #16
 8005826:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 8005828:	f642 4322 	movw	r3, #11298	; 0x2c22
 800582c:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 8005830:	f640 230d 	movw	r3, #2573	; 0xa0d
 8005834:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 8005838:	2300      	movs	r3, #0
 800583a:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 800583e:	2300      	movs	r3, #0
 8005840:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 8005844:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005848:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2200      	movs	r2, #0
 8005850:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 8005854:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005858:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 8005862:	4618      	mov	r0, r3
 8005864:	f7fa fcc6 	bl	80001f4 <strlen>
 8005868:	4603      	mov	r3, r0
 800586a:	461a      	mov	r2, r3
 800586c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005870:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 800587a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800587e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2200      	movs	r2, #0
 8005886:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 800588a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800588e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 8005898:	4618      	mov	r0, r3
 800589a:	f7fa fcab 	bl	80001f4 <strlen>
 800589e:	4603      	mov	r3, r0
 80058a0:	461a      	mov	r2, r3
 80058a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los +IPD proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 80058b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2206      	movs	r2, #6
 80058bc:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80058c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80058ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80058dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80058ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80058f8:	603b      	str	r3, [r7, #0]
 80058fa:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80058fe:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8005902:	6812      	ldr	r2, [r2, #0]
 8005904:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8005908:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800590c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8005910:	6809      	ldr	r1, [r1, #0]
 8005912:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8005916:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800591a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800591e:	6800      	ldr	r0, [r0, #0]
 8005920:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8005924:	2300      	movs	r3, #0
 8005926:	9305      	str	r3, [sp, #20]
 8005928:	9004      	str	r0, [sp, #16]
 800592a:	9103      	str	r1, [sp, #12]
 800592c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8005930:	9102      	str	r1, [sp, #8]
 8005932:	9201      	str	r2, [sp, #4]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	4633      	mov	r3, r6
 800593a:	4a34      	ldr	r2, [pc, #208]	; (8005a0c <AT_ESP8266_ND+0x238>)
 800593c:	4629      	mov	r1, r5
 800593e:	4620      	mov	r0, r4
 8005940:	f005 fe84 	bl	800b64c <FT_String_ND>
 8005944:	4603      	mov	r3, r0
 8005946:	2b01      	cmp	r3, #1
 8005948:	f040 8140 	bne.w	8005bcc <AT_ESP8266_ND+0x3f8>
		 {
			a->_n_fcomp=strlen("\r\n+IPD");
 800594c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005950:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2206      	movs	r2, #6
 8005958:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
			if(a->_TCP_Local_Server_EN==0)
 800595c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005960:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800596a:	2b00      	cmp	r3, #0
 800596c:	d150      	bne.n	8005a10 <AT_ESP8266_ND+0x23c>
				{
					a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATA);
 800596e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005972:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800597c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005980:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 800598a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800598e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8005998:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800599c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80059ac:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80059b0:	6812      	ldr	r2, [r2, #0]
 80059b2:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80059b6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80059ba:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80059be:	6809      	ldr	r1, [r1, #0]
 80059c0:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80059c4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80059c8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80059cc:	6800      	ldr	r0, [r0, #0]
 80059ce:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80059d2:	2304      	movs	r3, #4
 80059d4:	9305      	str	r3, [sp, #20]
 80059d6:	9004      	str	r0, [sp, #16]
 80059d8:	9103      	str	r1, [sp, #12]
 80059da:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80059de:	9102      	str	r1, [sp, #8]
 80059e0:	9201      	str	r2, [sp, #4]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	4633      	mov	r3, r6
 80059e8:	4a08      	ldr	r2, [pc, #32]	; (8005a0c <AT_ESP8266_ND+0x238>)
 80059ea:	4629      	mov	r1, r5
 80059ec:	4620      	mov	r0, r4
 80059ee:	f005 fe2d 	bl	800b64c <FT_String_ND>
 80059f2:	4602      	mov	r2, r0
 80059f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80059f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
 8005a02:	e04f      	b.n	8005aa4 <AT_ESP8266_ND+0x2d0>
 8005a04:	00222c22 	.word	0x00222c22
 8005a08:	0800d740 	.word	0x0800d740
 8005a0c:	0800d554 	.word	0x0800d554
				}
				else
				{
					a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATASRVR);
 8005a10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8005a1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8005a2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8005a3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8005a48:	603b      	str	r3, [r7, #0]
 8005a4a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005a4e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8005a52:	6812      	ldr	r2, [r2, #0]
 8005a54:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8005a58:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8005a5c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8005a60:	6809      	ldr	r1, [r1, #0]
 8005a62:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8005a66:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8005a6a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8005a6e:	6800      	ldr	r0, [r0, #0]
 8005a70:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8005a74:	2305      	movs	r3, #5
 8005a76:	9305      	str	r3, [sp, #20]
 8005a78:	9004      	str	r0, [sp, #16]
 8005a7a:	9103      	str	r1, [sp, #12]
 8005a7c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8005a80:	9102      	str	r1, [sp, #8]
 8005a82:	9201      	str	r2, [sp, #4]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	4633      	mov	r3, r6
 8005a8a:	4ad2      	ldr	r2, [pc, #840]	; (8005dd4 <AT_ESP8266_ND+0x600>)
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f005 fddc 	bl	800b64c <FT_String_ND>
 8005a94:	4602      	mov	r2, r0
 8005a96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
				}

			if(a->_estado_data==4)
 8005aa4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005aa8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d15a      	bne.n	8005b6c <AT_ESP8266_ND+0x398>
				{
					a->_estado_rcv_data=99;
 8005ab6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005aba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2263      	movs	r2, #99	; 0x63
 8005ac2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					a->_n_dataRCV=a->_n_tok;
 8005ac6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005aca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f8d3 2cec 	ldr.w	r2, [r3, #3308]	; 0xcec
 8005ad4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ad8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
					CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8005ae2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ae6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8005af0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005af4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f603 0198 	addw	r1, r3, #2200	; 0x898
 8005afe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f8d3 2cec 	ldr.w	r2, [r3, #3308]	; 0xcec
 8005b0c:	2341      	movs	r3, #65	; 0x41
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	2300      	movs	r3, #0
 8005b12:	f006 f98d 	bl	800be30 <CopiaVector>
					CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8005b16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f503 7026 	add.w	r0, r3, #664	; 0x298
 8005b24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f603 0198 	addw	r1, r3, #2200	; 0x898
 8005b32:	2341      	movs	r3, #65	; 0x41
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	2300      	movs	r3, #0
 8005b38:	2205      	movs	r2, #5
 8005b3a:	f006 f979 	bl	800be30 <CopiaVector>

					a->_debug_rx_ok++;
 8005b3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f8d3 3cd8 	ldr.w	r3, [r3, #3288]	; 0xcd8
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					a->_new_data_rcv=1;
 8005b5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
				}
			if(a->_estado_data==5)
 8005b6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8005b7a:	2b05      	cmp	r3, #5
 8005b7c:	d126      	bne.n	8005bcc <AT_ESP8266_ND+0x3f8>
				{
					a->_estado_rcv_data=55;
 8005b7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2237      	movs	r2, #55	; 0x37
 8005b8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					a->_n_dataRCV=0;
 8005b8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
					a->_debug_rx_no_ok++;
 8005b9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ba2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 8005bac:	1c5a      	adds	r2, r3, #1
 8005bae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005bb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
					a->_new_data_rcv=1;
 8005bbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005bc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
		 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8005bcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005bd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2204      	movs	r2, #4
 8005bd8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8005bdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005be0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8005bea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005bee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8005bf8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005bfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8005c06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005c0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8005c14:	603b      	str	r3, [r7, #0]
 8005c16:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005c1a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8005c1e:	6812      	ldr	r2, [r2, #0]
 8005c20:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8005c24:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8005c28:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8005c2c:	6809      	ldr	r1, [r1, #0]
 8005c2e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8005c32:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8005c36:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8005c3a:	6800      	ldr	r0, [r0, #0]
 8005c3c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8005c40:	2300      	movs	r3, #0
 8005c42:	9305      	str	r3, [sp, #20]
 8005c44:	9004      	str	r0, [sp, #16]
 8005c46:	9103      	str	r1, [sp, #12]
 8005c48:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8005c4c:	9102      	str	r1, [sp, #8]
 8005c4e:	9201      	str	r2, [sp, #4]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	4633      	mov	r3, r6
 8005c56:	4a60      	ldr	r2, [pc, #384]	; (8005dd8 <AT_ESP8266_ND+0x604>)
 8005c58:	4629      	mov	r1, r5
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f005 fcf6 	bl	800b64c <FT_String_ND>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	f040 83ab 	bne.w	80063be <AT_ESP8266_ND+0xbea>
	{
		AT_decode=at_ok;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND OK\r\n");
 8005c6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005c72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	220b      	movs	r2, #11
 8005c7a:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Transmision ok
 8005c7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005c82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8005c8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005c90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8005c9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005c9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8005ca8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005cac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8005cb6:	603b      	str	r3, [r7, #0]
 8005cb8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005cbc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8005cc0:	6812      	ldr	r2, [r2, #0]
 8005cc2:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8005cc6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8005cca:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8005cce:	6809      	ldr	r1, [r1, #0]
 8005cd0:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8005cd4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8005cd8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8005cdc:	6800      	ldr	r0, [r0, #0]
 8005cde:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	9305      	str	r3, [sp, #20]
 8005ce6:	9004      	str	r0, [sp, #16]
 8005ce8:	9103      	str	r1, [sp, #12]
 8005cea:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8005cee:	9102      	str	r1, [sp, #8]
 8005cf0:	9201      	str	r2, [sp, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	4633      	mov	r3, r6
 8005cf8:	4a38      	ldr	r2, [pc, #224]	; (8005ddc <AT_ESP8266_ND+0x608>)
 8005cfa:	4629      	mov	r1, r5
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f005 fca5 	bl	800b64c <FT_String_ND>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d113      	bne.n	8005d30 <AT_ESP8266_ND+0x55c>
			 {
			 AT_decode=at_tcp_enviado_ok;
 8005d08:	2313      	movs	r3, #19
 8005d0a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 8005d0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 8005d2c:	f001 badf 	b.w	80072ee <AT_ESP8266_ND+0x1b1a>
			 }
		 else
		 {
			//------------------CONFIRMO CIERRE DE  CONEXION------------------//
			a->_n_fcomp=strlen("AT+CWQAP");
 8005d30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2208      	movs	r2, #8
 8005d3c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8005d40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8005d4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8005d5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8005d6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8005d78:	603b      	str	r3, [r7, #0]
 8005d7a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005d7e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8005d82:	6812      	ldr	r2, [r2, #0]
 8005d84:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8005d88:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8005d8c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8005d90:	6809      	ldr	r1, [r1, #0]
 8005d92:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8005d96:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8005d9a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8005d9e:	6800      	ldr	r0, [r0, #0]
 8005da0:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8005da4:	2300      	movs	r3, #0
 8005da6:	9305      	str	r3, [sp, #20]
 8005da8:	9004      	str	r0, [sp, #16]
 8005daa:	9103      	str	r1, [sp, #12]
 8005dac:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8005db0:	9102      	str	r1, [sp, #8]
 8005db2:	9201      	str	r2, [sp, #4]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	4633      	mov	r3, r6
 8005dba:	4a09      	ldr	r2, [pc, #36]	; (8005de0 <AT_ESP8266_ND+0x60c>)
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f005 fc44 	bl	800b64c <FT_String_ND>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d10c      	bne.n	8005de4 <AT_ESP8266_ND+0x610>
				{
				AT_decode=at_deconectar_ok;
 8005dca:	230d      	movs	r3, #13
 8005dcc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8005dd0:	f001 ba8d 	b.w	80072ee <AT_ESP8266_ND+0x1b1a>
 8005dd4:	0800d554 	.word	0x0800d554
 8005dd8:	0800d55c 	.word	0x0800d55c
 8005ddc:	0800d564 	.word	0x0800d564
 8005de0:	0800d570 	.word	0x0800d570
				}
			else
			{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 8005de4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005de8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	220a      	movs	r2, #10
 8005df0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8005df4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005df8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8005e02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005e06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8005e10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005e14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8005e1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005e22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8005e2c:	603b      	str	r3, [r7, #0]
 8005e2e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005e32:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8005e36:	6812      	ldr	r2, [r2, #0]
 8005e38:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8005e3c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8005e40:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8005e44:	6809      	ldr	r1, [r1, #0]
 8005e46:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8005e4a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8005e4e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8005e52:	6800      	ldr	r0, [r0, #0]
 8005e54:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8005e58:	2300      	movs	r3, #0
 8005e5a:	9305      	str	r3, [sp, #20]
 8005e5c:	9004      	str	r0, [sp, #16]
 8005e5e:	9103      	str	r1, [sp, #12]
 8005e60:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8005e64:	9102      	str	r1, [sp, #8]
 8005e66:	9201      	str	r2, [sp, #4]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	4633      	mov	r3, r6
 8005e6e:	4aaa      	ldr	r2, [pc, #680]	; (8006118 <AT_ESP8266_ND+0x944>)
 8005e70:	4629      	mov	r1, r5
 8005e72:	4620      	mov	r0, r4
 8005e74:	f005 fbea 	bl	800b64c <FT_String_ND>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d104      	bne.n	8005e88 <AT_ESP8266_ND+0x6b4>
					{
						AT_decode=at_cambiar_modo_ok;
 8005e7e:	231c      	movs	r3, #28
 8005e80:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8005e84:	f001 ba33 	b.w	80072ee <AT_ESP8266_ND+0x1b1a>
					}
				else
				{
					//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
					a->_n_fcomp=strlen("no change\r\nOK\r\n");
 8005e88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005e8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	220f      	movs	r2, #15
 8005e94:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
						if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8005e98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005e9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8005ea6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005eaa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8005eb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005eb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8005ec2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ec6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8005ed0:	603b      	str	r3, [r7, #0]
 8005ed2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005ed6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8005eda:	6812      	ldr	r2, [r2, #0]
 8005edc:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8005ee0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8005ee4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8005ee8:	6809      	ldr	r1, [r1, #0]
 8005eea:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8005eee:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8005ef2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8005ef6:	6800      	ldr	r0, [r0, #0]
 8005ef8:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8005efc:	2300      	movs	r3, #0
 8005efe:	9305      	str	r3, [sp, #20]
 8005f00:	9004      	str	r0, [sp, #16]
 8005f02:	9103      	str	r1, [sp, #12]
 8005f04:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8005f08:	9102      	str	r1, [sp, #8]
 8005f0a:	9201      	str	r2, [sp, #4]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	4633      	mov	r3, r6
 8005f12:	4a82      	ldr	r2, [pc, #520]	; (800611c <AT_ESP8266_ND+0x948>)
 8005f14:	4629      	mov	r1, r5
 8005f16:	4620      	mov	r0, r4
 8005f18:	f005 fb98 	bl	800b64c <FT_String_ND>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d104      	bne.n	8005f2c <AT_ESP8266_ND+0x758>
						{
							AT_decode=at_tcp_srvr_ok_noch;
 8005f22:	2317      	movs	r3, #23
 8005f24:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8005f28:	f001 b9e1 	b.w	80072ee <AT_ESP8266_ND+0x1b1a>
						}
					else
					{
						//------------------OK PARA ENVIAR------------------//
						a->_n_fcomp=strlen("\r\n>");
 8005f2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2203      	movs	r2, #3
 8005f38:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
						if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8005f3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8005f4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8005f58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8005f66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8005f74:	603b      	str	r3, [r7, #0]
 8005f76:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005f7a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8005f7e:	6812      	ldr	r2, [r2, #0]
 8005f80:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8005f84:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8005f88:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8005f8c:	6809      	ldr	r1, [r1, #0]
 8005f8e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8005f92:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8005f96:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8005f9a:	6800      	ldr	r0, [r0, #0]
 8005f9c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	9305      	str	r3, [sp, #20]
 8005fa4:	9004      	str	r0, [sp, #16]
 8005fa6:	9103      	str	r1, [sp, #12]
 8005fa8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8005fac:	9102      	str	r1, [sp, #8]
 8005fae:	9201      	str	r2, [sp, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	4633      	mov	r3, r6
 8005fb6:	4a5a      	ldr	r2, [pc, #360]	; (8006120 <AT_ESP8266_ND+0x94c>)
 8005fb8:	4629      	mov	r1, r5
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f005 fb46 	bl	800b64c <FT_String_ND>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d104      	bne.n	8005fd0 <AT_ESP8266_ND+0x7fc>
							{
								AT_decode=at_tcp_ok_to_send;
 8005fc6:	2314      	movs	r3, #20
 8005fc8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8005fcc:	f001 b98f 	b.w	80072ee <AT_ESP8266_ND+0x1b1a>
							}
						else
						{
							//------------------OK SERVIDOR------------------//
							a->_n_fcomp=strlen("AT+CIPSERVER");
 8005fd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005fd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	220c      	movs	r2, #12
 8005fdc:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8005fe0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005fe4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8005fee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ff2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8005ffc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006000:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800600a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800600e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006018:	603b      	str	r3, [r7, #0]
 800601a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800601e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006022:	6812      	ldr	r2, [r2, #0]
 8006024:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006028:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800602c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006030:	6809      	ldr	r1, [r1, #0]
 8006032:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006036:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800603a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800603e:	6800      	ldr	r0, [r0, #0]
 8006040:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006044:	2300      	movs	r3, #0
 8006046:	9305      	str	r3, [sp, #20]
 8006048:	9004      	str	r0, [sp, #16]
 800604a:	9103      	str	r1, [sp, #12]
 800604c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006050:	9102      	str	r1, [sp, #8]
 8006052:	9201      	str	r2, [sp, #4]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	4633      	mov	r3, r6
 800605a:	4a32      	ldr	r2, [pc, #200]	; (8006124 <AT_ESP8266_ND+0x950>)
 800605c:	4629      	mov	r1, r5
 800605e:	4620      	mov	r0, r4
 8006060:	f005 faf4 	bl	800b64c <FT_String_ND>
 8006064:	4603      	mov	r3, r0
 8006066:	2b01      	cmp	r3, #1
 8006068:	d104      	bne.n	8006074 <AT_ESP8266_ND+0x8a0>
							{
								AT_decode=at_tcp_srvr_ok;
 800606a:	2315      	movs	r3, #21
 800606c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006070:	f001 b93d 	b.w	80072ee <AT_ESP8266_ND+0x1b1a>
							}
							else
							{
								//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
								a->_n_fcomp=strlen("AT+CIPCLOSE");
 8006074:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006078:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	220b      	movs	r2, #11
 8006080:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
								if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006084:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006088:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006092:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006096:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80060a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80060a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80060ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80060b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80060bc:	603b      	str	r3, [r7, #0]
 80060be:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80060c2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80060c6:	6812      	ldr	r2, [r2, #0]
 80060c8:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80060cc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80060d0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80060d4:	6809      	ldr	r1, [r1, #0]
 80060d6:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80060da:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80060de:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80060e2:	6800      	ldr	r0, [r0, #0]
 80060e4:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80060e8:	2300      	movs	r3, #0
 80060ea:	9305      	str	r3, [sp, #20]
 80060ec:	9004      	str	r0, [sp, #16]
 80060ee:	9103      	str	r1, [sp, #12]
 80060f0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80060f4:	9102      	str	r1, [sp, #8]
 80060f6:	9201      	str	r2, [sp, #4]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	4633      	mov	r3, r6
 80060fe:	4a0a      	ldr	r2, [pc, #40]	; (8006128 <AT_ESP8266_ND+0x954>)
 8006100:	4629      	mov	r1, r5
 8006102:	4620      	mov	r0, r4
 8006104:	f005 faa2 	bl	800b64c <FT_String_ND>
 8006108:	4603      	mov	r3, r0
 800610a:	2b01      	cmp	r3, #1
 800610c:	d10e      	bne.n	800612c <AT_ESP8266_ND+0x958>
									{
										AT_decode=at_tcp_closed_ok;
 800610e:	2309      	movs	r3, #9
 8006110:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006114:	f001 b8eb 	b.w	80072ee <AT_ESP8266_ND+0x1b1a>
 8006118:	0800d57c 	.word	0x0800d57c
 800611c:	0800d588 	.word	0x0800d588
 8006120:	0800d598 	.word	0x0800d598
 8006124:	0800d59c 	.word	0x0800d59c
 8006128:	0800d5ac 	.word	0x0800d5ac
									}
								else
								{
									//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
									a->_n_fcomp=strlen("AT+CIPMUX=1");
 800612c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006130:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	220b      	movs	r2, #11
 8006138:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
									if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800613c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006140:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800614a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800614e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006158:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800615c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006166:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800616a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006174:	603b      	str	r3, [r7, #0]
 8006176:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800617a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006184:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006188:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800618c:	6809      	ldr	r1, [r1, #0]
 800618e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006192:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006196:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800619a:	6800      	ldr	r0, [r0, #0]
 800619c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80061a0:	2300      	movs	r3, #0
 80061a2:	9305      	str	r3, [sp, #20]
 80061a4:	9004      	str	r0, [sp, #16]
 80061a6:	9103      	str	r1, [sp, #12]
 80061a8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80061ac:	9102      	str	r1, [sp, #8]
 80061ae:	9201      	str	r2, [sp, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	4633      	mov	r3, r6
 80061b6:	4aaf      	ldr	r2, [pc, #700]	; (8006474 <AT_ESP8266_ND+0xca0>)
 80061b8:	4629      	mov	r1, r5
 80061ba:	4620      	mov	r0, r4
 80061bc:	f005 fa46 	bl	800b64c <FT_String_ND>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d104      	bne.n	80061d0 <AT_ESP8266_ND+0x9fc>
										{
											AT_decode=at_multiple_conn_ok;
 80061c6:	2307      	movs	r3, #7
 80061c8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80061cc:	f001 b88f 	b.w	80072ee <AT_ESP8266_ND+0x1b1a>
										}
									else
									{
										//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
										a->_n_fcomp=strlen("AT+CIPMUX=0");
 80061d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80061d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	220b      	movs	r2, #11
 80061dc:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
										if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80061e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80061e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80061ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80061f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80061fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006200:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800620a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800620e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006218:	603b      	str	r3, [r7, #0]
 800621a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800621e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006222:	6812      	ldr	r2, [r2, #0]
 8006224:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006228:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800622c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006230:	6809      	ldr	r1, [r1, #0]
 8006232:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006236:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800623a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800623e:	6800      	ldr	r0, [r0, #0]
 8006240:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006244:	2300      	movs	r3, #0
 8006246:	9305      	str	r3, [sp, #20]
 8006248:	9004      	str	r0, [sp, #16]
 800624a:	9103      	str	r1, [sp, #12]
 800624c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006250:	9102      	str	r1, [sp, #8]
 8006252:	9201      	str	r2, [sp, #4]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	4633      	mov	r3, r6
 800625a:	4a87      	ldr	r2, [pc, #540]	; (8006478 <AT_ESP8266_ND+0xca4>)
 800625c:	4629      	mov	r1, r5
 800625e:	4620      	mov	r0, r4
 8006260:	f005 f9f4 	bl	800b64c <FT_String_ND>
 8006264:	4603      	mov	r3, r0
 8006266:	2b01      	cmp	r3, #1
 8006268:	d104      	bne.n	8006274 <AT_ESP8266_ND+0xaa0>
											{
												AT_decode=at_no_multiple_conn_ok;
 800626a:	2308      	movs	r3, #8
 800626c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006270:	f001 b83d 	b.w	80072ee <AT_ESP8266_ND+0x1b1a>
											}
										else
										{
											//------------------DEFIIR IP OK------------------//
											a->_n_fcomp=strlen("AT+CIPSTA=");
 8006274:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006278:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	220a      	movs	r2, #10
 8006280:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
											if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006284:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006288:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006292:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006296:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80062a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80062a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80062ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80062b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80062bc:	603b      	str	r3, [r7, #0]
 80062be:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80062c2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80062c6:	6812      	ldr	r2, [r2, #0]
 80062c8:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80062cc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80062d0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80062d4:	6809      	ldr	r1, [r1, #0]
 80062d6:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80062da:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80062de:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80062e2:	6800      	ldr	r0, [r0, #0]
 80062e4:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80062e8:	2300      	movs	r3, #0
 80062ea:	9305      	str	r3, [sp, #20]
 80062ec:	9004      	str	r0, [sp, #16]
 80062ee:	9103      	str	r1, [sp, #12]
 80062f0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80062f4:	9102      	str	r1, [sp, #8]
 80062f6:	9201      	str	r2, [sp, #4]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	4633      	mov	r3, r6
 80062fe:	4a5f      	ldr	r2, [pc, #380]	; (800647c <AT_ESP8266_ND+0xca8>)
 8006300:	4629      	mov	r1, r5
 8006302:	4620      	mov	r0, r4
 8006304:	f005 f9a2 	bl	800b64c <FT_String_ND>
 8006308:	4603      	mov	r3, r0
 800630a:	2b01      	cmp	r3, #1
 800630c:	d104      	bne.n	8006318 <AT_ESP8266_ND+0xb44>
												{
													AT_decode=at_def_ip_ok;
 800630e:	231b      	movs	r3, #27
 8006310:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006314:	f000 bfeb 	b.w	80072ee <AT_ESP8266_ND+0x1b1a>
												}
											else
											{
										//------------------TCP CONECTADO------------------//
										a->_n_fcomp=strlen("CONNECT");
 8006318:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800631c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2207      	movs	r2, #7
 8006324:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
										if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8006328:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800632c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006336:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800633a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006344:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006348:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006352:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006356:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006360:	603b      	str	r3, [r7, #0]
 8006362:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006366:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800636a:	6812      	ldr	r2, [r2, #0]
 800636c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006370:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006374:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006378:	6809      	ldr	r1, [r1, #0]
 800637a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800637e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006382:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006386:	6800      	ldr	r0, [r0, #0]
 8006388:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800638c:	2300      	movs	r3, #0
 800638e:	9305      	str	r3, [sp, #20]
 8006390:	9004      	str	r0, [sp, #16]
 8006392:	9103      	str	r1, [sp, #12]
 8006394:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006398:	9102      	str	r1, [sp, #8]
 800639a:	9201      	str	r2, [sp, #4]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	4633      	mov	r3, r6
 80063a2:	4a37      	ldr	r2, [pc, #220]	; (8006480 <AT_ESP8266_ND+0xcac>)
 80063a4:	4629      	mov	r1, r5
 80063a6:	4620      	mov	r0, r4
 80063a8:	f005 f950 	bl	800b64c <FT_String_ND>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	f040 879d 	bne.w	80072ee <AT_ESP8266_ND+0x1b1a>
											{
											AT_decode=at_tcp_conectado;
 80063b4:	230f      	movs	r3, #15
 80063b6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80063ba:	f000 bf98 	b.w	80072ee <AT_ESP8266_ND+0x1b1a>
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\nCLOSED\r\n");
 80063be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80063c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	220f      	movs	r2, #15
 80063ca:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\nCLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80063ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80063d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80063dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80063e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80063ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80063ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80063f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80063fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006406:	603b      	str	r3, [r7, #0]
 8006408:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800640c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006410:	6812      	ldr	r2, [r2, #0]
 8006412:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006416:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800641a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800641e:	6809      	ldr	r1, [r1, #0]
 8006420:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006424:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006428:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800642c:	6800      	ldr	r0, [r0, #0]
 800642e:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006432:	2300      	movs	r3, #0
 8006434:	9305      	str	r3, [sp, #20]
 8006436:	9004      	str	r0, [sp, #16]
 8006438:	9103      	str	r1, [sp, #12]
 800643a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800643e:	9102      	str	r1, [sp, #8]
 8006440:	9201      	str	r2, [sp, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	4633      	mov	r3, r6
 8006448:	4a0e      	ldr	r2, [pc, #56]	; (8006484 <AT_ESP8266_ND+0xcb0>)
 800644a:	4629      	mov	r1, r5
 800644c:	4620      	mov	r0, r4
 800644e:	f005 f8fd 	bl	800b64c <FT_String_ND>
 8006452:	4603      	mov	r3, r0
 8006454:	2b01      	cmp	r3, #1
 8006456:	d117      	bne.n	8006488 <AT_ESP8266_ND+0xcb4>
		{
				AT_decode=at_tcp_conn_err;
 8006458:	2306      	movs	r3, #6
 800645a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("ERROR\r\nCLOSED\r\n");
 800645e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006462:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	220f      	movs	r2, #15
 800646a:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
 800646e:	f000 bf3e 	b.w	80072ee <AT_ESP8266_ND+0x1b1a>
 8006472:	bf00      	nop
 8006474:	0800d5b8 	.word	0x0800d5b8
 8006478:	0800d5c4 	.word	0x0800d5c4
 800647c:	0800d5d0 	.word	0x0800d5d0
 8006480:	0800d5dc 	.word	0x0800d5dc
 8006484:	0800d5e4 	.word	0x0800d5e4
		}
		else
		{
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Intentando conectar con servidor TCP caido
 8006488:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800648c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006496:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800649a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80064a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80064b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80064c0:	603b      	str	r3, [r7, #0]
 80064c2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80064c6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80064ca:	6812      	ldr	r2, [r2, #0]
 80064cc:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80064d0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80064d4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80064d8:	6809      	ldr	r1, [r1, #0]
 80064da:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80064de:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80064e2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80064e6:	6800      	ldr	r0, [r0, #0]
 80064e8:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80064ec:	2300      	movs	r3, #0
 80064ee:	9305      	str	r3, [sp, #20]
 80064f0:	9004      	str	r0, [sp, #16]
 80064f2:	9103      	str	r1, [sp, #12]
 80064f4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80064f8:	9102      	str	r1, [sp, #8]
 80064fa:	9201      	str	r2, [sp, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	4633      	mov	r3, r6
 8006502:	4aaa      	ldr	r2, [pc, #680]	; (80067ac <AT_ESP8266_ND+0xfd8>)
 8006504:	4629      	mov	r1, r5
 8006506:	4620      	mov	r0, r4
 8006508:	f005 f8a0 	bl	800b64c <FT_String_ND>
 800650c:	4603      	mov	r3, r0
 800650e:	2b01      	cmp	r3, #1
 8006510:	d104      	bne.n	800651c <AT_ESP8266_ND+0xd48>
			{
					AT_decode=at_error;
 8006512:	2302      	movs	r3, #2
 8006514:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006518:	f000 bee9 	b.w	80072ee <AT_ESP8266_ND+0x1b1a>
			}
			 else
			 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 800651c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006520:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2215      	movs	r2, #21
 8006528:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 800652c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006530:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800653a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800653e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006548:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800654c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006556:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800655a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006564:	603b      	str	r3, [r7, #0]
 8006566:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800656a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800656e:	6812      	ldr	r2, [r2, #0]
 8006570:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006574:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006578:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800657c:	6809      	ldr	r1, [r1, #0]
 800657e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006582:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006586:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800658a:	6800      	ldr	r0, [r0, #0]
 800658c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006590:	2300      	movs	r3, #0
 8006592:	9305      	str	r3, [sp, #20]
 8006594:	9004      	str	r0, [sp, #16]
 8006596:	9103      	str	r1, [sp, #12]
 8006598:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800659c:	9102      	str	r1, [sp, #8]
 800659e:	9201      	str	r2, [sp, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	4633      	mov	r3, r6
 80065a6:	4a82      	ldr	r2, [pc, #520]	; (80067b0 <AT_ESP8266_ND+0xfdc>)
 80065a8:	4629      	mov	r1, r5
 80065aa:	4620      	mov	r0, r4
 80065ac:	f005 f84e 	bl	800b64c <FT_String_ND>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d104      	bne.n	80065c0 <AT_ESP8266_ND+0xdec>
				{
						AT_decode=at_tcp_alrdy_cnntd_err;
 80065b6:	230e      	movs	r3, #14
 80065b8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80065bc:	f000 be97 	b.w	80072ee <AT_ESP8266_ND+0x1b1a>
				}
				else
				{
					//------------------OK PARA ENVIAR------------------//
					a->_n_fcomp=strlen("AT+CIPSERVER");
 80065c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	220c      	movs	r2, #12
 80065cc:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
					if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80065d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80065de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80065ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80065fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006608:	603b      	str	r3, [r7, #0]
 800660a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800660e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006612:	6812      	ldr	r2, [r2, #0]
 8006614:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006618:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800661c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006620:	6809      	ldr	r1, [r1, #0]
 8006622:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006626:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800662a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800662e:	6800      	ldr	r0, [r0, #0]
 8006630:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006634:	2300      	movs	r3, #0
 8006636:	9305      	str	r3, [sp, #20]
 8006638:	9004      	str	r0, [sp, #16]
 800663a:	9103      	str	r1, [sp, #12]
 800663c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006640:	9102      	str	r1, [sp, #8]
 8006642:	9201      	str	r2, [sp, #4]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	4633      	mov	r3, r6
 800664a:	4a5a      	ldr	r2, [pc, #360]	; (80067b4 <AT_ESP8266_ND+0xfe0>)
 800664c:	4629      	mov	r1, r5
 800664e:	4620      	mov	r0, r4
 8006650:	f004 fffc 	bl	800b64c <FT_String_ND>
 8006654:	4603      	mov	r3, r0
 8006656:	2b01      	cmp	r3, #1
 8006658:	d104      	bne.n	8006664 <AT_ESP8266_ND+0xe90>
					{
						AT_decode=at_tcp_srvr_err;
 800665a:	2316      	movs	r3, #22
 800665c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006660:	f000 be45 	b.w	80072ee <AT_ESP8266_ND+0x1b1a>
					}
					else
					{
						//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
						a->_n_fcomp=strlen("AT+CIPCLOSE");
 8006664:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006668:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	220b      	movs	r2, #11
 8006670:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
						if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8006674:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006678:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006682:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006686:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006690:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006694:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800669e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80066ac:	603b      	str	r3, [r7, #0]
 80066ae:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80066b2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80066b6:	6812      	ldr	r2, [r2, #0]
 80066b8:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80066bc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80066c0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80066c4:	6809      	ldr	r1, [r1, #0]
 80066c6:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80066ca:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80066ce:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80066d2:	6800      	ldr	r0, [r0, #0]
 80066d4:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80066d8:	2300      	movs	r3, #0
 80066da:	9305      	str	r3, [sp, #20]
 80066dc:	9004      	str	r0, [sp, #16]
 80066de:	9103      	str	r1, [sp, #12]
 80066e0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80066e4:	9102      	str	r1, [sp, #8]
 80066e6:	9201      	str	r2, [sp, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	4633      	mov	r3, r6
 80066ee:	4a32      	ldr	r2, [pc, #200]	; (80067b8 <AT_ESP8266_ND+0xfe4>)
 80066f0:	4629      	mov	r1, r5
 80066f2:	4620      	mov	r0, r4
 80066f4:	f004 ffaa 	bl	800b64c <FT_String_ND>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d104      	bne.n	8006708 <AT_ESP8266_ND+0xf34>
							{
								AT_decode=at_tcp_close_err;
 80066fe:	231a      	movs	r3, #26
 8006700:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006704:	f000 bdf3 	b.w	80072ee <AT_ESP8266_ND+0x1b1a>
							}
						else
							{
							//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
							a->_n_fcomp=strlen("link is not valid");
 8006708:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800670c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2211      	movs	r2, #17
 8006714:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006718:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800671c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006726:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800672a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006734:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006738:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006742:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006746:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006750:	603b      	str	r3, [r7, #0]
 8006752:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006756:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800675a:	6812      	ldr	r2, [r2, #0]
 800675c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006760:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006764:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006768:	6809      	ldr	r1, [r1, #0]
 800676a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800676e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006772:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006776:	6800      	ldr	r0, [r0, #0]
 8006778:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800677c:	2300      	movs	r3, #0
 800677e:	9305      	str	r3, [sp, #20]
 8006780:	9004      	str	r0, [sp, #16]
 8006782:	9103      	str	r1, [sp, #12]
 8006784:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006788:	9102      	str	r1, [sp, #8]
 800678a:	9201      	str	r2, [sp, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	4633      	mov	r3, r6
 8006792:	4a0a      	ldr	r2, [pc, #40]	; (80067bc <AT_ESP8266_ND+0xfe8>)
 8006794:	4629      	mov	r1, r5
 8006796:	4620      	mov	r0, r4
 8006798:	f004 ff58 	bl	800b64c <FT_String_ND>
 800679c:	4603      	mov	r3, r0
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d10e      	bne.n	80067c0 <AT_ESP8266_ND+0xfec>
								{
									AT_decode=at_tcp_snd_err;
 80067a2:	2311      	movs	r3, #17
 80067a4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80067a8:	f000 bda1 	b.w	80072ee <AT_ESP8266_ND+0x1b1a>
 80067ac:	0800d5f4 	.word	0x0800d5f4
 80067b0:	0800d5fc 	.word	0x0800d5fc
 80067b4:	0800d59c 	.word	0x0800d59c
 80067b8:	0800d5ac 	.word	0x0800d5ac
 80067bc:	0800d614 	.word	0x0800d614
								}
							else
								{
								//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
								a->_n_fcomp=strlen("AT+CWMODE=");
 80067c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	220a      	movs	r2, #10
 80067cc:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
								if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 80067d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80067de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80067ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80067fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006808:	603b      	str	r3, [r7, #0]
 800680a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800680e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006812:	6812      	ldr	r2, [r2, #0]
 8006814:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006818:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800681c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006820:	6809      	ldr	r1, [r1, #0]
 8006822:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006826:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800682a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800682e:	6800      	ldr	r0, [r0, #0]
 8006830:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006834:	2300      	movs	r3, #0
 8006836:	9305      	str	r3, [sp, #20]
 8006838:	9004      	str	r0, [sp, #16]
 800683a:	9103      	str	r1, [sp, #12]
 800683c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006840:	9102      	str	r1, [sp, #8]
 8006842:	9201      	str	r2, [sp, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	4633      	mov	r3, r6
 800684a:	4aa8      	ldr	r2, [pc, #672]	; (8006aec <AT_ESP8266_ND+0x1318>)
 800684c:	4629      	mov	r1, r5
 800684e:	4620      	mov	r0, r4
 8006850:	f004 fefc 	bl	800b64c <FT_String_ND>
 8006854:	4603      	mov	r3, r0
 8006856:	2b01      	cmp	r3, #1
 8006858:	d104      	bne.n	8006864 <AT_ESP8266_ND+0x1090>
									{
										AT_decode=at_cambiar_modo_err;
 800685a:	231d      	movs	r3, #29
 800685c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006860:	f000 bd45 	b.w	80072ee <AT_ESP8266_ND+0x1b1a>
									}
								else
								{
									//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
									a->_n_fcomp=strlen("AT+CIPMUX=1");
 8006864:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006868:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	220b      	movs	r2, #11
 8006870:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
									if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006874:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006878:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006882:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006886:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006890:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006894:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800689e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80068ac:	603b      	str	r3, [r7, #0]
 80068ae:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80068b2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80068b6:	6812      	ldr	r2, [r2, #0]
 80068b8:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80068bc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80068c0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80068c4:	6809      	ldr	r1, [r1, #0]
 80068c6:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80068ca:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80068ce:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80068d2:	6800      	ldr	r0, [r0, #0]
 80068d4:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80068d8:	2300      	movs	r3, #0
 80068da:	9305      	str	r3, [sp, #20]
 80068dc:	9004      	str	r0, [sp, #16]
 80068de:	9103      	str	r1, [sp, #12]
 80068e0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80068e4:	9102      	str	r1, [sp, #8]
 80068e6:	9201      	str	r2, [sp, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	4633      	mov	r3, r6
 80068ee:	4a80      	ldr	r2, [pc, #512]	; (8006af0 <AT_ESP8266_ND+0x131c>)
 80068f0:	4629      	mov	r1, r5
 80068f2:	4620      	mov	r0, r4
 80068f4:	f004 feaa 	bl	800b64c <FT_String_ND>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d104      	bne.n	8006908 <AT_ESP8266_ND+0x1134>
										{
											AT_decode=at_multiple_conn_err;
 80068fe:	231e      	movs	r3, #30
 8006900:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006904:	f000 bcf3 	b.w	80072ee <AT_ESP8266_ND+0x1b1a>
										}
									else
									{
										//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
										a->_n_fcomp=strlen("AT+CIPMUX=0");
 8006908:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800690c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	220b      	movs	r2, #11
 8006914:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
										if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006918:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800691c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006926:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800692a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006934:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006938:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006942:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006946:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006950:	603b      	str	r3, [r7, #0]
 8006952:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006956:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800695a:	6812      	ldr	r2, [r2, #0]
 800695c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006960:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006964:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006968:	6809      	ldr	r1, [r1, #0]
 800696a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800696e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006972:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006976:	6800      	ldr	r0, [r0, #0]
 8006978:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800697c:	2300      	movs	r3, #0
 800697e:	9305      	str	r3, [sp, #20]
 8006980:	9004      	str	r0, [sp, #16]
 8006982:	9103      	str	r1, [sp, #12]
 8006984:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006988:	9102      	str	r1, [sp, #8]
 800698a:	9201      	str	r2, [sp, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	4633      	mov	r3, r6
 8006992:	4a58      	ldr	r2, [pc, #352]	; (8006af4 <AT_ESP8266_ND+0x1320>)
 8006994:	4629      	mov	r1, r5
 8006996:	4620      	mov	r0, r4
 8006998:	f004 fe58 	bl	800b64c <FT_String_ND>
 800699c:	4603      	mov	r3, r0
 800699e:	2b01      	cmp	r3, #1
 80069a0:	f000 84a5 	beq.w	80072ee <AT_ESP8266_ND+0x1b1a>
												//AT_decode=at_no_multiple_conn_err;
											}
										else
										{
											//------------------ERROR AL CONECTAR WIFI------------------//
											a->_n_fcomp=strlen("AT+CWJAP");
 80069a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2208      	movs	r2, #8
 80069b0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
											if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80069b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80069c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80069d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80069de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80069ec:	603b      	str	r3, [r7, #0]
 80069ee:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80069f2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80069f6:	6812      	ldr	r2, [r2, #0]
 80069f8:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80069fc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006a00:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006a04:	6809      	ldr	r1, [r1, #0]
 8006a06:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006a0a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006a0e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006a12:	6800      	ldr	r0, [r0, #0]
 8006a14:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006a18:	2300      	movs	r3, #0
 8006a1a:	9305      	str	r3, [sp, #20]
 8006a1c:	9004      	str	r0, [sp, #16]
 8006a1e:	9103      	str	r1, [sp, #12]
 8006a20:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006a24:	9102      	str	r1, [sp, #8]
 8006a26:	9201      	str	r2, [sp, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	4633      	mov	r3, r6
 8006a2e:	4a32      	ldr	r2, [pc, #200]	; (8006af8 <AT_ESP8266_ND+0x1324>)
 8006a30:	4629      	mov	r1, r5
 8006a32:	4620      	mov	r0, r4
 8006a34:	f004 fe0a 	bl	800b64c <FT_String_ND>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d104      	bne.n	8006a48 <AT_ESP8266_ND+0x1274>
												{
													AT_decode=at_conn_wifi_err;
 8006a3e:	2320      	movs	r3, #32
 8006a40:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006a44:	f000 bc53 	b.w	80072ee <AT_ESP8266_ND+0x1b1a>
												}
											else
											{
												//------------------ERROR AL CONECTAR WIFI------------------//
												a->_n_fcomp=strlen("AT+CIPSTA=");
 8006a48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	220a      	movs	r2, #10
 8006a54:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
												if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006a58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006a66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006a74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006a82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006a90:	603b      	str	r3, [r7, #0]
 8006a92:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006a96:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006a9a:	6812      	ldr	r2, [r2, #0]
 8006a9c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006aa0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006aa4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006aa8:	6809      	ldr	r1, [r1, #0]
 8006aaa:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006aae:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006ab2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006ab6:	6800      	ldr	r0, [r0, #0]
 8006ab8:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006abc:	2300      	movs	r3, #0
 8006abe:	9305      	str	r3, [sp, #20]
 8006ac0:	9004      	str	r0, [sp, #16]
 8006ac2:	9103      	str	r1, [sp, #12]
 8006ac4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ac8:	9102      	str	r1, [sp, #8]
 8006aca:	9201      	str	r2, [sp, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	4633      	mov	r3, r6
 8006ad2:	4a0a      	ldr	r2, [pc, #40]	; (8006afc <AT_ESP8266_ND+0x1328>)
 8006ad4:	4629      	mov	r1, r5
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f004 fdb8 	bl	800b64c <FT_String_ND>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d10e      	bne.n	8006b00 <AT_ESP8266_ND+0x132c>
													{
														AT_decode=at_def_ip_err;
 8006ae2:	2321      	movs	r3, #33	; 0x21
 8006ae4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006ae8:	f000 bc01 	b.w	80072ee <AT_ESP8266_ND+0x1b1a>
 8006aec:	0800d57c 	.word	0x0800d57c
 8006af0:	0800d5b8 	.word	0x0800d5b8
 8006af4:	0800d5c4 	.word	0x0800d5c4
 8006af8:	0800d628 	.word	0x0800d628
 8006afc:	0800d5d0 	.word	0x0800d5d0
													}
												else
												{
													//------------------ERROR AL CONECTAR WIFI------------------//
													a->_n_fcomp=strlen("no ip");
 8006b00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2205      	movs	r2, #5
 8006b0c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
													if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006b10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006b1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006b2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006b3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006b48:	603b      	str	r3, [r7, #0]
 8006b4a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b4e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b52:	6812      	ldr	r2, [r2, #0]
 8006b54:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006b58:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b5c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b60:	6809      	ldr	r1, [r1, #0]
 8006b62:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006b66:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006b6a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006b6e:	6800      	ldr	r0, [r0, #0]
 8006b70:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006b74:	2300      	movs	r3, #0
 8006b76:	9305      	str	r3, [sp, #20]
 8006b78:	9004      	str	r0, [sp, #16]
 8006b7a:	9103      	str	r1, [sp, #12]
 8006b7c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006b80:	9102      	str	r1, [sp, #8]
 8006b82:	9201      	str	r2, [sp, #4]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	4633      	mov	r3, r6
 8006b8a:	4abe      	ldr	r2, [pc, #760]	; (8006e84 <AT_ESP8266_ND+0x16b0>)
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	4620      	mov	r0, r4
 8006b90:	f004 fd5c 	bl	800b64c <FT_String_ND>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d103      	bne.n	8006ba2 <AT_ESP8266_ND+0x13ce>
														{
															AT_decode=at_tcp_noip_err;  //PROCESAR
 8006b9a:	2322      	movs	r3, #34	; 0x22
 8006b9c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006ba0:	e3a5      	b.n	80072ee <AT_ESP8266_ND+0x1b1a>
													{

														 //--------------------------------------------------------------------------------------------------------------//
														 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
														 //--------------------------------------------------------------------------------------------------------------//
														a->_n_fcomp=strlen("WIFI DISCONNECT");
 8006ba2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ba6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	220f      	movs	r2, #15
 8006bae:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
														if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 8006bb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006bc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006bce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006bdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006be0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006bf0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006bf4:	6812      	ldr	r2, [r2, #0]
 8006bf6:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006bfa:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006bfe:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006c02:	6809      	ldr	r1, [r1, #0]
 8006c04:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006c08:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006c0c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006c10:	6800      	ldr	r0, [r0, #0]
 8006c12:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006c16:	2300      	movs	r3, #0
 8006c18:	9305      	str	r3, [sp, #20]
 8006c1a:	9004      	str	r0, [sp, #16]
 8006c1c:	9103      	str	r1, [sp, #12]
 8006c1e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006c22:	9102      	str	r1, [sp, #8]
 8006c24:	9201      	str	r2, [sp, #4]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	4633      	mov	r3, r6
 8006c2c:	4a96      	ldr	r2, [pc, #600]	; (8006e88 <AT_ESP8266_ND+0x16b4>)
 8006c2e:	4629      	mov	r1, r5
 8006c30:	4620      	mov	r0, r4
 8006c32:	f004 fd0b 	bl	800b64c <FT_String_ND>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d112      	bne.n	8006c62 <AT_ESP8266_ND+0x148e>
															{
																 AT_decode=at_wifi_disconnect;
 8006c3c:	230a      	movs	r3, #10
 8006c3e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
																 a->_debug_WF_DISCONNECT++;
 8006c42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8006c50:	1c5a      	adds	r2, r3, #1
 8006c52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
 8006c60:	e345      	b.n	80072ee <AT_ESP8266_ND+0x1b1a>
															}
														else
														{
															//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
															a->_n_fcomp=strlen(",CLOSED\r\n");
 8006c62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2209      	movs	r2, #9
 8006c6e:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
															if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006c72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006c80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006c8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006c9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ca0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006caa:	603b      	str	r3, [r7, #0]
 8006cac:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006cb0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006cb4:	6812      	ldr	r2, [r2, #0]
 8006cb6:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006cba:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006cbe:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006cc2:	6809      	ldr	r1, [r1, #0]
 8006cc4:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006cc8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006ccc:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006cd0:	6800      	ldr	r0, [r0, #0]
 8006cd2:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	9305      	str	r3, [sp, #20]
 8006cda:	9004      	str	r0, [sp, #16]
 8006cdc:	9103      	str	r1, [sp, #12]
 8006cde:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ce2:	9102      	str	r1, [sp, #8]
 8006ce4:	9201      	str	r2, [sp, #4]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	4633      	mov	r3, r6
 8006cec:	4a67      	ldr	r2, [pc, #412]	; (8006e8c <AT_ESP8266_ND+0x16b8>)
 8006cee:	4629      	mov	r1, r5
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	f004 fcab 	bl	800b64c <FT_String_ND>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d112      	bne.n	8006d22 <AT_ESP8266_ND+0x154e>
																{
																	AT_decode=at_tcp_client_desc;
 8006cfc:	2319      	movs	r3, #25
 8006cfe:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
																	a->_debug_CLOSED++;
 8006d02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38
 8006d20:	e2e5      	b.n	80072ee <AT_ESP8266_ND+0x1b1a>
																//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
																// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
																// primero ve el SEND OKse queda en el estado 705 por error al     //
																//  enviar														  //
																//-----------------------------------------------------------------//
																a->_n_fcomp=strlen("CLOSED\r\n");
 8006d22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2208      	movs	r2, #8
 8006d2e:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006d32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006d40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006d4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006d5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006d6a:	603b      	str	r3, [r7, #0]
 8006d6c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d70:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d74:	6812      	ldr	r2, [r2, #0]
 8006d76:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006d7a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d7e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d82:	6809      	ldr	r1, [r1, #0]
 8006d84:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006d88:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006d8c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006d90:	6800      	ldr	r0, [r0, #0]
 8006d92:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006d96:	2300      	movs	r3, #0
 8006d98:	9305      	str	r3, [sp, #20]
 8006d9a:	9004      	str	r0, [sp, #16]
 8006d9c:	9103      	str	r1, [sp, #12]
 8006d9e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006da2:	9102      	str	r1, [sp, #8]
 8006da4:	9201      	str	r2, [sp, #4]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	4633      	mov	r3, r6
 8006dac:	4a38      	ldr	r2, [pc, #224]	; (8006e90 <AT_ESP8266_ND+0x16bc>)
 8006dae:	4629      	mov	r1, r5
 8006db0:	4620      	mov	r0, r4
 8006db2:	f004 fc4b 	bl	800b64c <FT_String_ND>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d103      	bne.n	8006dc4 <AT_ESP8266_ND+0x15f0>
																	{
																		AT_decode=at_tcp_desconectado;
 8006dbc:	2310      	movs	r3, #16
 8006dbe:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006dc2:	e294      	b.n	80072ee <AT_ESP8266_ND+0x1b1a>
																	}
																else
																{

																	//------------------ENVIADO = RECIBIDO ------------------//
																	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8006dc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006dd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006de0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006de4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f503 6693 	add.w	r6, r3, #1176	; 0x498
 8006dee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006df2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f603 4ce8 	addw	ip, r3, #3304	; 0xce8
 8006dfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006e10:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006e14:	6812      	ldr	r2, [r2, #0]
 8006e16:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006e1a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006e1e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006e22:	6809      	ldr	r1, [r1, #0]
 8006e24:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006e28:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006e2c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006e30:	6800      	ldr	r0, [r0, #0]
 8006e32:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006e36:	2300      	movs	r3, #0
 8006e38:	9305      	str	r3, [sp, #20]
 8006e3a:	9004      	str	r0, [sp, #16]
 8006e3c:	9103      	str	r1, [sp, #12]
 8006e3e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e42:	9102      	str	r1, [sp, #8]
 8006e44:	9201      	str	r2, [sp, #4]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	4663      	mov	r3, ip
 8006e4c:	4632      	mov	r2, r6
 8006e4e:	4629      	mov	r1, r5
 8006e50:	4620      	mov	r0, r4
 8006e52:	f004 fbfb 	bl	800b64c <FT_String_ND>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d11b      	bne.n	8006e94 <AT_ESP8266_ND+0x16c0>
																		 {
																			if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8006e5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f893 3698 	ldrb.w	r3, [r3, #1688]	; 0x698
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f000 823f 	beq.w	80072ee <AT_ESP8266_ND+0x1b1a>
																				{
																				//AT_decode=10;
																				a->_n_orig=0;
 8006e70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
 8006e80:	e235      	b.n	80072ee <AT_ESP8266_ND+0x1b1a>
 8006e82:	bf00      	nop
 8006e84:	0800d634 	.word	0x0800d634
 8006e88:	0800d63c 	.word	0x0800d63c
 8006e8c:	0800d64c 	.word	0x0800d64c
 8006e90:	0800d658 	.word	0x0800d658
																				}
																			}
																	else
																	{
																		//------------------PAQUETE ENVIADO EN FALLA--------------//
																		a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8006e94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	220d      	movs	r2, #13
 8006ea0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 8006ea4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ea8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006eb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006ec0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ec4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006ece:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ed2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006edc:	603b      	str	r3, [r7, #0]
 8006ede:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ee2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006ee6:	6812      	ldr	r2, [r2, #0]
 8006ee8:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006eec:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006ef0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ef4:	6809      	ldr	r1, [r1, #0]
 8006ef6:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006efa:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006efe:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006f02:	6800      	ldr	r0, [r0, #0]
 8006f04:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006f08:	2300      	movs	r3, #0
 8006f0a:	9305      	str	r3, [sp, #20]
 8006f0c:	9004      	str	r0, [sp, #16]
 8006f0e:	9103      	str	r1, [sp, #12]
 8006f10:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f14:	9102      	str	r1, [sp, #8]
 8006f16:	9201      	str	r2, [sp, #4]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	4633      	mov	r3, r6
 8006f1e:	4ac6      	ldr	r2, [pc, #792]	; (8007238 <AT_ESP8266_ND+0x1a64>)
 8006f20:	4629      	mov	r1, r5
 8006f22:	4620      	mov	r0, r4
 8006f24:	f004 fb92 	bl	800b64c <FT_String_ND>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d112      	bne.n	8006f54 <AT_ESP8266_ND+0x1780>
																			{
																			 AT_decode=at_tcp_enviado_error;
 8006f2e:	2312      	movs	r3, #18
 8006f30:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
																			 a->_debug_FAIL++;
 8006f34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
 8006f52:	e1cc      	b.n	80072ee <AT_ESP8266_ND+0x1b1a>



																			//------------------OBTENCI�N DE IP------------------//
																			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
																			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8006f54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	220d      	movs	r2, #13
 8006f60:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Obtiene IP
 8006f64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006f72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006f80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006f8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006f9c:	603b      	str	r3, [r7, #0]
 8006f9e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006fa2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006fa6:	6812      	ldr	r2, [r2, #0]
 8006fa8:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006fac:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006fb0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006fb4:	6809      	ldr	r1, [r1, #0]
 8006fb6:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006fba:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006fbe:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006fc2:	6800      	ldr	r0, [r0, #0]
 8006fc4:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006fc8:	2300      	movs	r3, #0
 8006fca:	9305      	str	r3, [sp, #20]
 8006fcc:	9004      	str	r0, [sp, #16]
 8006fce:	9103      	str	r1, [sp, #12]
 8006fd0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006fd4:	9102      	str	r1, [sp, #8]
 8006fd6:	9201      	str	r2, [sp, #4]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	4633      	mov	r3, r6
 8006fde:	4a97      	ldr	r2, [pc, #604]	; (800723c <AT_ESP8266_ND+0x1a68>)
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f004 fb32 	bl	800b64c <FT_String_ND>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d112      	bne.n	8007014 <AT_ESP8266_ND+0x1840>
																				{
																					a->_debug_WF_GOTIP++;
 8006fee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ff2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8006ffc:	1c5a      	adds	r2, r3, #1
 8006ffe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007002:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f8c3 2d4c 	str.w	r2, [r3, #3404]	; 0xd4c
																					AT_decode=at_wifi_gotip;
 800700c:	230c      	movs	r3, #12
 800700e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007012:	e16c      	b.n	80072ee <AT_ESP8266_ND+0x1b1a>
																				}
																			else
																			{
																					//------------------WIFI CONECTADA------------------//
																				a->_n_fcomp=strlen("WIFI CONNECTED");
 8007014:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007018:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	220e      	movs	r2, #14
 8007020:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//WIFI CONECTADA
 8007024:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007028:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007032:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007036:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007040:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007044:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800704e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007052:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800705c:	603b      	str	r3, [r7, #0]
 800705e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007062:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007066:	6812      	ldr	r2, [r2, #0]
 8007068:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800706c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007070:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007074:	6809      	ldr	r1, [r1, #0]
 8007076:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800707a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800707e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007082:	6800      	ldr	r0, [r0, #0]
 8007084:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007088:	2300      	movs	r3, #0
 800708a:	9305      	str	r3, [sp, #20]
 800708c:	9004      	str	r0, [sp, #16]
 800708e:	9103      	str	r1, [sp, #12]
 8007090:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007094:	9102      	str	r1, [sp, #8]
 8007096:	9201      	str	r2, [sp, #4]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	4633      	mov	r3, r6
 800709e:	4a68      	ldr	r2, [pc, #416]	; (8007240 <AT_ESP8266_ND+0x1a6c>)
 80070a0:	4629      	mov	r1, r5
 80070a2:	4620      	mov	r0, r4
 80070a4:	f004 fad2 	bl	800b64c <FT_String_ND>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d112      	bne.n	80070d4 <AT_ESP8266_ND+0x1900>
																					{
																						a->_debug_WF_CNNCTD++;
 80070ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 80070bc:	1c5a      	adds	r2, r3, #1
 80070be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
																							 AT_decode=at_wifi_connected;
 80070cc:	230b      	movs	r3, #11
 80070ce:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80070d2:	e10c      	b.n	80072ee <AT_ESP8266_ND+0x1b1a>
																					}
																				else
																				{

																					//------------------CLIENTE TCP CONECTADO------------------//
																					a->_n_fcomp=strlen(",CONNECT\r\n");
 80070d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	220a      	movs	r2, #10
 80070e0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																					if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 80070e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80070f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007100:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007104:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800710e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007112:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800711c:	603b      	str	r3, [r7, #0]
 800711e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007122:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007126:	6812      	ldr	r2, [r2, #0]
 8007128:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800712c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007130:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007134:	6809      	ldr	r1, [r1, #0]
 8007136:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800713a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800713e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007142:	6800      	ldr	r0, [r0, #0]
 8007144:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007148:	2300      	movs	r3, #0
 800714a:	9305      	str	r3, [sp, #20]
 800714c:	9004      	str	r0, [sp, #16]
 800714e:	9103      	str	r1, [sp, #12]
 8007150:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007154:	9102      	str	r1, [sp, #8]
 8007156:	9201      	str	r2, [sp, #4]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	4633      	mov	r3, r6
 800715e:	4a39      	ldr	r2, [pc, #228]	; (8007244 <AT_ESP8266_ND+0x1a70>)
 8007160:	4629      	mov	r1, r5
 8007162:	4620      	mov	r0, r4
 8007164:	f004 fa72 	bl	800b64c <FT_String_ND>
 8007168:	4603      	mov	r3, r0
 800716a:	2b01      	cmp	r3, #1
 800716c:	d112      	bne.n	8007194 <AT_ESP8266_ND+0x19c0>
																						  {
																							  AT_decode=at_tcp_client_conectado;
 800716e:	2318      	movs	r3, #24
 8007170:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
																							  a->_debug_CONNECT++;
 8007174:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007178:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 8007182:	1c5a      	adds	r2, r3, #1
 8007184:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007188:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 8007192:	e0ac      	b.n	80072ee <AT_ESP8266_ND+0x1b1a>
																						  }
																					else
																					{

																						//------------------FALLA------------------//
																						a->_n_fcomp=strlen("\r\nFAIL\r\n");
 8007194:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007198:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2208      	movs	r2, #8
 80071a0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 80071a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80071b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80071c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80071ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80071dc:	603b      	str	r3, [r7, #0]
 80071de:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80071e2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80071e6:	6812      	ldr	r2, [r2, #0]
 80071e8:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80071ec:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80071f0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80071f4:	6809      	ldr	r1, [r1, #0]
 80071f6:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80071fa:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80071fe:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007202:	6800      	ldr	r0, [r0, #0]
 8007204:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007208:	2300      	movs	r3, #0
 800720a:	9305      	str	r3, [sp, #20]
 800720c:	9004      	str	r0, [sp, #16]
 800720e:	9103      	str	r1, [sp, #12]
 8007210:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007214:	9102      	str	r1, [sp, #8]
 8007216:	9201      	str	r2, [sp, #4]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	4633      	mov	r3, r6
 800721e:	4a0a      	ldr	r2, [pc, #40]	; (8007248 <AT_ESP8266_ND+0x1a74>)
 8007220:	4629      	mov	r1, r5
 8007222:	4620      	mov	r0, r4
 8007224:	f004 fa12 	bl	800b64c <FT_String_ND>
 8007228:	4603      	mov	r3, r0
 800722a:	2b01      	cmp	r3, #1
 800722c:	d10e      	bne.n	800724c <AT_ESP8266_ND+0x1a78>
																							{
																								AT_decode=at_fail;
 800722e:	2303      	movs	r3, #3
 8007230:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007234:	e05b      	b.n	80072ee <AT_ESP8266_ND+0x1b1a>
 8007236:	bf00      	nop
 8007238:	0800d664 	.word	0x0800d664
 800723c:	0800d674 	.word	0x0800d674
 8007240:	0800d684 	.word	0x0800d684
 8007244:	0800d694 	.word	0x0800d694
 8007248:	0800d6a0 	.word	0x0800d6a0
																							}
																						else
																						{
																						//------------------busy processing------------------//
																							a->_n_fcomp=strlen("busy p...");
 800724c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007250:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2209      	movs	r2, #9
 8007258:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 800725c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007260:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800726a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800726e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007278:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800727c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007286:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800728a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007294:	603b      	str	r3, [r7, #0]
 8007296:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800729a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800729e:	6812      	ldr	r2, [r2, #0]
 80072a0:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80072a4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80072a8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80072ac:	6809      	ldr	r1, [r1, #0]
 80072ae:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80072b2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80072b6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80072ba:	6800      	ldr	r0, [r0, #0]
 80072bc:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80072c0:	2300      	movs	r3, #0
 80072c2:	9305      	str	r3, [sp, #20]
 80072c4:	9004      	str	r0, [sp, #16]
 80072c6:	9103      	str	r1, [sp, #12]
 80072c8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80072cc:	9102      	str	r1, [sp, #8]
 80072ce:	9201      	str	r2, [sp, #4]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	4633      	mov	r3, r6
 80072d6:	4a78      	ldr	r2, [pc, #480]	; (80074b8 <AT_ESP8266_ND+0x1ce4>)
 80072d8:	4629      	mov	r1, r5
 80072da:	4620      	mov	r0, r4
 80072dc:	f004 f9b6 	bl	800b64c <FT_String_ND>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d103      	bne.n	80072ee <AT_ESP8266_ND+0x1b1a>
																								{
																								AT_decode=at_busy_p;
 80072e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072ea:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}
}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 80072ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80072fc:	3b01      	subs	r3, #1
 80072fe:	2b08      	cmp	r3, #8
 8007300:	f201 84db 	bhi.w	8008cba <AT_ESP8266_ND+0x34e6>
 8007304:	a201      	add	r2, pc, #4	; (adr r2, 800730c <AT_ESP8266_ND+0x1b38>)
 8007306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730a:	bf00      	nop
 800730c:	08007331 	.word	0x08007331
 8007310:	080074c1 	.word	0x080074c1
 8007314:	08007743 	.word	0x08007743
 8007318:	080078c1 	.word	0x080078c1
 800731c:	08007a99 	.word	0x08007a99
 8007320:	08007d6d 	.word	0x08007d6d
 8007324:	0800802d 	.word	0x0800802d
 8007328:	0800855d 	.word	0x0800855d
 800732c:	08008733 	.word	0x08008733
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007330:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007334:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8007340:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007344:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800734e:	2b01      	cmp	r3, #1
 8007350:	d14f      	bne.n	80073f2 <AT_ESP8266_ND+0x1c1e>
 8007352:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007356:	2b01      	cmp	r3, #1
 8007358:	d04b      	beq.n	80073f2 <AT_ESP8266_ND+0x1c1e>
									   &&(AT_decode!=at_error)
 800735a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800735e:	2b02      	cmp	r3, #2
 8007360:	d047      	beq.n	80073f2 <AT_ESP8266_ND+0x1c1e>
									   &&(AT_decode!=at_restart)
 8007362:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007366:	2b04      	cmp	r3, #4
 8007368:	d043      	beq.n	80073f2 <AT_ESP8266_ND+0x1c1e>
									   &&(AT_decode!=at_tcp_enviado_ok))
 800736a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800736e:	2b13      	cmp	r3, #19
 8007370:	d03f      	beq.n	80073f2 <AT_ESP8266_ND+0x1c1e>
						{
						a->_pasos=0;
 8007372:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007376:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2200      	movs	r2, #0
 800737e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8007382:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007386:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2201      	movs	r2, #1
 800738e:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 8007392:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007396:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80073a0:	4620      	mov	r0, r4
 80073a2:	f7f8 ff27 	bl	80001f4 <strlen>
 80073a6:	4603      	mov	r3, r0
 80073a8:	4423      	add	r3, r4
 80073aa:	4a44      	ldr	r2, [pc, #272]	; (80074bc <AT_ESP8266_ND+0x1ce8>)
 80073ac:	461c      	mov	r4, r3
 80073ae:	4613      	mov	r3, r2
 80073b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80073b2:	6020      	str	r0, [r4, #0]
 80073b4:	6061      	str	r1, [r4, #4]
 80073b6:	60a2      	str	r2, [r4, #8]
 80073b8:	881b      	ldrh	r3, [r3, #0]
 80073ba:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 80073bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7f8 ff12 	bl	80001f4 <strlen>
 80073d0:	4603      	mov	r3, r0
 80073d2:	461a      	mov	r2, r3
 80073d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=100;
 80073e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2264      	movs	r2, #100	; 0x64
 80073ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 80073f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8007400:	1c5a      	adds	r2, r3, #1
 8007402:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007406:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 8007410:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007414:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800741e:	2b00      	cmp	r3, #0
 8007420:	d11b      	bne.n	800745a <AT_ESP8266_ND+0x1c86>
 8007422:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007426:	2b01      	cmp	r3, #1
 8007428:	d023      	beq.n	8007472 <AT_ESP8266_ND+0x1c9e>
 800742a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800742e:	2b1c      	cmp	r3, #28
 8007430:	d01f      	beq.n	8007472 <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_error)
 8007432:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007436:	2b02      	cmp	r3, #2
 8007438:	d01b      	beq.n	8007472 <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_restart)
 800743a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800743e:	2b04      	cmp	r3, #4
 8007440:	d017      	beq.n	8007472 <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_wifi_connected)
 8007442:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007446:	2b0b      	cmp	r3, #11
 8007448:	d013      	beq.n	8007472 <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_wifi_gotip)
 800744a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800744e:	2b0c      	cmp	r3, #12
 8007450:	d00f      	beq.n	8007472 <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_tcp_enviado_ok)))
 8007452:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007456:	2b13      	cmp	r3, #19
 8007458:	d00b      	beq.n	8007472 <AT_ESP8266_ND+0x1c9e>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 800745a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800745e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8007468:	f241 3288 	movw	r2, #5000	; 0x1388
 800746c:	4293      	cmp	r3, r2
 800746e:	f341 842e 	ble.w	8008cce <AT_ESP8266_ND+0x34fa>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8007472:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007476:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8007480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8007484:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007488:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2200      	movs	r2, #0
 8007490:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8007494:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007498:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2200      	movs	r2, #0
 80074a0:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 80074a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 80074b4:	f001 bc0b 	b.w	8008cce <AT_ESP8266_ND+0x34fa>
 80074b8:	0800d6ac 	.word	0x0800d6ac
 80074bc:	0800d6b8 	.word	0x0800d6b8
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80074c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 80074d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80074de:	2b01      	cmp	r3, #1
 80074e0:	f040 80c8 	bne.w	8007674 <AT_ESP8266_ND+0x1ea0>
 80074e4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	f000 80c3 	beq.w	8007674 <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_error)
 80074ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	f000 80be 	beq.w	8007674 <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_fail)
 80074f8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80074fc:	2b03      	cmp	r3, #3
 80074fe:	f000 80b9 	beq.w	8007674 <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_restart)
 8007502:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007506:	2b04      	cmp	r3, #4
 8007508:	f000 80b4 	beq.w	8007674 <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_wifi_disconnect)
 800750c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007510:	2b0a      	cmp	r3, #10
 8007512:	f000 80af 	beq.w	8007674 <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_wifi_connected)
 8007516:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800751a:	2b0b      	cmp	r3, #11
 800751c:	f000 80aa 	beq.w	8007674 <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_wifi_gotip))
 8007520:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007524:	2b0c      	cmp	r3, #12
 8007526:	f000 80a5 	beq.w	8007674 <AT_ESP8266_ND+0x1ea0>
						{
						a->_pasos=0;
 800752a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800752e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2200      	movs	r2, #0
 8007536:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 800753a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800753e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2201      	movs	r2, #1
 8007546:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 800754a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800754e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007558:	4620      	mov	r0, r4
 800755a:	f7f8 fe4b 	bl	80001f4 <strlen>
 800755e:	4603      	mov	r3, r0
 8007560:	4423      	add	r3, r4
 8007562:	49d5      	ldr	r1, [pc, #852]	; (80078b8 <AT_ESP8266_ND+0x20e4>)
 8007564:	461a      	mov	r2, r3
 8007566:	460b      	mov	r3, r1
 8007568:	cb03      	ldmia	r3!, {r0, r1}
 800756a:	6010      	str	r0, [r2, #0]
 800756c:	6051      	str	r1, [r2, #4]
 800756e:	881b      	ldrh	r3, [r3, #0]
 8007570:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 8007572:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007576:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007580:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8007584:	2201      	movs	r2, #1
 8007586:	4618      	mov	r0, r3
 8007588:	f004 fea5 	bl	800c2d6 <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 800758c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007590:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800759a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800759e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	1d9d      	adds	r5, r3, #6
 80075a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3306      	adds	r3, #6
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7f8 fe1e 	bl	80001f4 <strlen>
 80075b8:	4603      	mov	r3, r0
 80075ba:	461a      	mov	r2, r3
 80075bc:	4629      	mov	r1, r5
 80075be:	4620      	mov	r0, r4
 80075c0:	f004 fe89 	bl	800c2d6 <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 80075c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80075d2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7f8 fe0c 	bl	80001f4 <strlen>
 80075dc:	4602      	mov	r2, r0
 80075de:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80075e2:	4619      	mov	r1, r3
 80075e4:	4620      	mov	r0, r4
 80075e6:	f004 fe76 	bl	800c2d6 <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 80075ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80075f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8007606:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800760a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3326      	adds	r3, #38	; 0x26
 8007612:	4618      	mov	r0, r3
 8007614:	f7f8 fdee 	bl	80001f4 <strlen>
 8007618:	4603      	mov	r3, r0
 800761a:	461a      	mov	r2, r3
 800761c:	4629      	mov	r1, r5
 800761e:	4620      	mov	r0, r4
 8007620:	f004 fe59 	bl	800c2d6 <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 8007624:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007628:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007632:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8007636:	2203      	movs	r2, #3
 8007638:	4618      	mov	r0, r3
 800763a:	f004 fe4c 	bl	800c2d6 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 800763e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007642:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800764c:	4618      	mov	r0, r3
 800764e:	f7f8 fdd1 	bl	80001f4 <strlen>
 8007652:	4603      	mov	r3, r0
 8007654:	461a      	mov	r2, r3
 8007656:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800765a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=200;
 8007664:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007668:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	22c8      	movs	r2, #200	; 0xc8
 8007670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 8007674:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007678:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8007682:	1c5a      	adds	r2, r3, #1
 8007684:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007688:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 8007692:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007696:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d11b      	bne.n	80076dc <AT_ESP8266_ND+0x1f08>
 80076a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d023      	beq.n	80076f4 <AT_ESP8266_ND+0x1f20>
 80076ac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d01f      	beq.n	80076f4 <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_fail)
 80076b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	d01b      	beq.n	80076f4 <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_restart)
 80076bc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80076c0:	2b04      	cmp	r3, #4
 80076c2:	d017      	beq.n	80076f4 <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_wifi_disconnect)
 80076c4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80076c8:	2b0a      	cmp	r3, #10
 80076ca:	d013      	beq.n	80076f4 <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_wifi_connected)
 80076cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80076d0:	2b0b      	cmp	r3, #11
 80076d2:	d00f      	beq.n	80076f4 <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_wifi_gotip)))
 80076d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80076d8:	2b0c      	cmp	r3, #12
 80076da:	d00b      	beq.n	80076f4 <AT_ESP8266_ND+0x1f20>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 80076dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 80076ea:	f644 6220 	movw	r2, #20000	; 0x4e20
 80076ee:	4293      	cmp	r3, r2
 80076f0:	f341 82ef 	ble.w	8008cd2 <AT_ESP8266_ND+0x34fe>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80076f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8007702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 8007706:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800770a:	2b0a      	cmp	r3, #10
 800770c:	d00f      	beq.n	800772e <AT_ESP8266_ND+0x1f5a>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 800770e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007712:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2200      	movs	r2, #0
 800771a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							a->_ejecucion=0;
 800771e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007722:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2200      	movs	r2, #0
 800772a:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 800772e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007732:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2200      	movs	r2, #0
 800773a:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
					}

			}
			break;
 800773e:	f001 bac8 	b.w	8008cd2 <AT_ESP8266_ND+0x34fe>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007742:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007746:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 8007752:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007756:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007760:	2b01      	cmp	r3, #1
 8007762:	d14d      	bne.n	8007800 <AT_ESP8266_ND+0x202c>
 8007764:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007768:	2b04      	cmp	r3, #4
 800776a:	d049      	beq.n	8007800 <AT_ESP8266_ND+0x202c>
 800776c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007770:	2b0a      	cmp	r3, #10
 8007772:	d045      	beq.n	8007800 <AT_ESP8266_ND+0x202c>
 8007774:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007778:	2b0d      	cmp	r3, #13
 800777a:	d041      	beq.n	8007800 <AT_ESP8266_ND+0x202c>
						{
						a->_pasos=0;
 800777c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007780:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2200      	movs	r2, #0
 8007788:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 800778c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007790:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2201      	movs	r2, #1
 8007798:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",10);
 800779c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80077aa:	4620      	mov	r0, r4
 80077ac:	f7f8 fd22 	bl	80001f4 <strlen>
 80077b0:	4603      	mov	r3, r0
 80077b2:	4423      	add	r3, r4
 80077b4:	4941      	ldr	r1, [pc, #260]	; (80078bc <AT_ESP8266_ND+0x20e8>)
 80077b6:	461a      	mov	r2, r3
 80077b8:	460b      	mov	r3, r1
 80077ba:	cb03      	ldmia	r3!, {r0, r1}
 80077bc:	6010      	str	r0, [r2, #0]
 80077be:	6051      	str	r1, [r2, #4]
 80077c0:	8819      	ldrh	r1, [r3, #0]
 80077c2:	789b      	ldrb	r3, [r3, #2]
 80077c4:	8111      	strh	r1, [r2, #8]
 80077c6:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 80077c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7f8 fd0c 	bl	80001f4 <strlen>
 80077dc:	4603      	mov	r3, r0
 80077de:	461a      	mov	r2, r3
 80077e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 80077ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80077fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8007800:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007804:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800780e:	1c5a      	adds	r2, r3, #1
 8007810:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007814:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 800781e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007822:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800782c:	2b00      	cmp	r3, #0
 800782e:	d113      	bne.n	8007858 <AT_ESP8266_ND+0x2084>
 8007830:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007834:	2b0a      	cmp	r3, #10
 8007836:	d01b      	beq.n	8007870 <AT_ESP8266_ND+0x209c>
 8007838:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800783c:	2b0b      	cmp	r3, #11
 800783e:	d017      	beq.n	8007870 <AT_ESP8266_ND+0x209c>
																		  ||(AT_decode==at_wifi_gotip)
 8007840:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007844:	2b0c      	cmp	r3, #12
 8007846:	d013      	beq.n	8007870 <AT_ESP8266_ND+0x209c>
																		  ||(AT_decode==at_restart	)
 8007848:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800784c:	2b04      	cmp	r3, #4
 800784e:	d00f      	beq.n	8007870 <AT_ESP8266_ND+0x209c>
																		  ||(AT_decode==at_deconectar_ok )))
 8007850:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007854:	2b0d      	cmp	r3, #13
 8007856:	d00b      	beq.n	8007870 <AT_ESP8266_ND+0x209c>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8007858:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800785c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8007866:	f241 3288 	movw	r2, #5000	; 0x1388
 800786a:	4293      	cmp	r3, r2
 800786c:	f341 8233 	ble.w	8008cd6 <AT_ESP8266_ND+0x3502>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8007870:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007874:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800787e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8007882:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007886:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2200      	movs	r2, #0
 800788e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8007892:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007896:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2200      	movs	r2, #0
 800789e:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 80078a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 80078b2:	f001 ba10 	b.w	8008cd6 <AT_ESP8266_ND+0x3502>
 80078b6:	bf00      	nop
 80078b8:	0800d6c8 	.word	0x0800d6c8
 80078bc:	0800d6d4 	.word	0x0800d6d4
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80078c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 80078d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d16b      	bne.n	80079ba <AT_ESP8266_ND+0x21e6>
 80078e2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	d067      	beq.n	80079ba <AT_ESP8266_ND+0x21e6>
									   &&(AT_decode!=at_ok)
 80078ea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d063      	beq.n	80079ba <AT_ESP8266_ND+0x21e6>
									   &&(AT_decode!=at_error))
 80078f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d05f      	beq.n	80079ba <AT_ESP8266_ND+0x21e6>
						{
						a->_pasos=0;
 80078fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2200      	movs	r2, #0
 8007906:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 800790a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800790e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2201      	movs	r2, #1
 8007916:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 800791a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800791e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8007928:	2b01      	cmp	r3, #1
 800792a:	d115      	bne.n	8007958 <AT_ESP8266_ND+0x2184>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 800792c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007930:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800793a:	4620      	mov	r0, r4
 800793c:	f7f8 fc5a 	bl	80001f4 <strlen>
 8007940:	4603      	mov	r3, r0
 8007942:	4423      	add	r3, r4
 8007944:	4a52      	ldr	r2, [pc, #328]	; (8007a90 <AT_ESP8266_ND+0x22bc>)
 8007946:	461c      	mov	r4, r3
 8007948:	4613      	mov	r3, r2
 800794a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800794c:	6020      	str	r0, [r4, #0]
 800794e:	6061      	str	r1, [r4, #4]
 8007950:	60a2      	str	r2, [r4, #8]
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	81a3      	strh	r3, [r4, #12]
 8007956:	e014      	b.n	8007982 <AT_ESP8266_ND+0x21ae>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 8007958:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800795c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007966:	4620      	mov	r0, r4
 8007968:	f7f8 fc44 	bl	80001f4 <strlen>
 800796c:	4603      	mov	r3, r0
 800796e:	4423      	add	r3, r4
 8007970:	4a48      	ldr	r2, [pc, #288]	; (8007a94 <AT_ESP8266_ND+0x22c0>)
 8007972:	461c      	mov	r4, r3
 8007974:	4613      	mov	r3, r2
 8007976:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007978:	6020      	str	r0, [r4, #0]
 800797a:	6061      	str	r1, [r4, #4]
 800797c:	60a2      	str	r2, [r4, #8]
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 8007982:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007986:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007990:	4618      	mov	r0, r3
 8007992:	f7f8 fc2f 	bl	80001f4 <strlen>
 8007996:	4603      	mov	r3, r0
 8007998:	461a      	mov	r2, r3
 800799a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800799e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 80079a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80079b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 80079ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 80079d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d123      	bne.n	8007a32 <AT_ESP8266_ND+0x225e>
 80079ea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d02b      	beq.n	8007a4a <AT_ESP8266_ND+0x2276>
 80079f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80079f6:	2b0b      	cmp	r3, #11
 80079f8:	d027      	beq.n	8007a4a <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_wifi_gotip)
 80079fa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80079fe:	2b0c      	cmp	r3, #12
 8007a00:	d023      	beq.n	8007a4a <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_restart)
 8007a02:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	d01f      	beq.n	8007a4a <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_error)
 8007a0a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d01b      	beq.n	8007a4a <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_multiple_conn_ok)
 8007a12:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007a16:	2b07      	cmp	r3, #7
 8007a18:	d017      	beq.n	8007a4a <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_no_multiple_conn_ok)
 8007a1a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007a1e:	2b08      	cmp	r3, #8
 8007a20:	d013      	beq.n	8007a4a <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_multiple_conn_err)
 8007a22:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007a26:	2b1e      	cmp	r3, #30
 8007a28:	d00f      	beq.n	8007a4a <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_no_multiple_conn_err)))
 8007a2a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007a2e:	2b1f      	cmp	r3, #31
 8007a30:	d00b      	beq.n	8007a4a <AT_ESP8266_ND+0x2276>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8007a32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8007a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a44:	4293      	cmp	r3, r2
 8007a46:	f341 8148 	ble.w	8008cda <AT_ESP8266_ND+0x3506>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8007a4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8007a58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8007a5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8007a6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8007a7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8007a8c:	f001 b925 	b.w	8008cda <AT_ESP8266_ND+0x3506>
 8007a90:	0800d6e0 	.word	0x0800d6e0
 8007a94:	0800d6f0 	.word	0x0800d6f0
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007a98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 8007aa8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007aac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	f040 80f3 	bne.w	8007ca2 <AT_ESP8266_ND+0x24ce>
 8007abc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	f000 80ee 	beq.w	8007ca2 <AT_ESP8266_ND+0x24ce>
									   &&(AT_decode!=at_ok)
 8007ac6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	f000 80e9 	beq.w	8007ca2 <AT_ESP8266_ND+0x24ce>
									   &&(AT_decode!=at_error)
 8007ad0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	f000 80e4 	beq.w	8007ca2 <AT_ESP8266_ND+0x24ce>
									   &&(AT_decode!=at_def_ip_err)
 8007ada:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007ade:	2b21      	cmp	r3, #33	; 0x21
 8007ae0:	f000 80df 	beq.w	8007ca2 <AT_ESP8266_ND+0x24ce>
									   &&(AT_decode!=at_def_ip_ok))
 8007ae4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007ae8:	2b1b      	cmp	r3, #27
 8007aea:	f000 80da 	beq.w	8007ca2 <AT_ESP8266_ND+0x24ce>
						{
						a->_pasos=0;
 8007aee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007af2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8007afe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 8007b0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f7f8 fb69 	bl	80001f4 <strlen>
 8007b22:	4603      	mov	r3, r0
 8007b24:	4423      	add	r3, r4
 8007b26:	4990      	ldr	r1, [pc, #576]	; (8007d68 <AT_ESP8266_ND+0x2594>)
 8007b28:	461a      	mov	r2, r3
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	cb03      	ldmia	r3!, {r0, r1}
 8007b2e:	6010      	str	r0, [r2, #0]
 8007b30:	6051      	str	r1, [r2, #4]
 8007b32:	8819      	ldrh	r1, [r3, #0]
 8007b34:	789b      	ldrb	r3, [r3, #2]
 8007b36:	8111      	strh	r1, [r2, #8]
 8007b38:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 8007b3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007b48:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f004 fbc1 	bl	800c2d6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8007b54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007b62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8007b70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	334c      	adds	r3, #76	; 0x4c
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7f8 fb39 	bl	80001f4 <strlen>
 8007b82:	4603      	mov	r3, r0
 8007b84:	461a      	mov	r2, r3
 8007b86:	4629      	mov	r1, r5
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f004 fba4 	bl	800c2d6 <strncat>
						strncat(a->_uart2snd,separador,3);
 8007b8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007b9c:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8007ba0:	2203      	movs	r2, #3
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f004 fb97 	bl	800c2d6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 8007ba8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007bb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f103 0562 	add.w	r5, r3, #98	; 0x62
 8007bc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3362      	adds	r3, #98	; 0x62
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7f8 fb0f 	bl	80001f4 <strlen>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	461a      	mov	r2, r3
 8007bda:	4629      	mov	r1, r5
 8007bdc:	4620      	mov	r0, r4
 8007bde:	f004 fb7a 	bl	800c2d6 <strncat>
						strncat(a->_uart2snd,separador,3);
 8007be2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007be6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007bf0:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8007bf4:	2203      	movs	r2, #3
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f004 fb6d 	bl	800c2d6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8007bfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007c0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f103 0572 	add.w	r5, r3, #114	; 0x72
 8007c18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3372      	adds	r3, #114	; 0x72
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7f8 fae5 	bl	80001f4 <strlen>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	4629      	mov	r1, r5
 8007c30:	4620      	mov	r0, r4
 8007c32:	f004 fb50 	bl	800c2d6 <strncat>
						strncat(a->_uart2snd,&comillas,1);
 8007c36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007c44:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8007c48:	2201      	movs	r2, #1
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f004 fb43 	bl	800c2d6 <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8007c50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007c5e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8007c62:	2202      	movs	r2, #2
 8007c64:	4618      	mov	r0, r3
 8007c66:	f004 fb36 	bl	800c2d6 <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8007c6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7f8 fabb 	bl	80001f4 <strlen>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	461a      	mov	r2, r3
 8007c82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8007c90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007c9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8007ca2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ca6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8007cb0:	1c5a      	adds	r2, r3, #1
 8007cb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8007cc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d11b      	bne.n	8007d0a <AT_ESP8266_ND+0x2536>
 8007cd2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d023      	beq.n	8007d22 <AT_ESP8266_ND+0x254e>
 8007cda:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007cde:	2b0b      	cmp	r3, #11
 8007ce0:	d01f      	beq.n	8007d22 <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_wifi_gotip)
 8007ce2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007ce6:	2b0c      	cmp	r3, #12
 8007ce8:	d01b      	beq.n	8007d22 <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_restart)
 8007cea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007cee:	2b04      	cmp	r3, #4
 8007cf0:	d017      	beq.n	8007d22 <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_error)
 8007cf2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d013      	beq.n	8007d22 <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_def_ip_err)
 8007cfa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007cfe:	2b21      	cmp	r3, #33	; 0x21
 8007d00:	d00f      	beq.n	8007d22 <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_def_ip_ok)))
 8007d02:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007d06:	2b1b      	cmp	r3, #27
 8007d08:	d00b      	beq.n	8007d22 <AT_ESP8266_ND+0x254e>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8007d0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8007d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	f340 87de 	ble.w	8008cde <AT_ESP8266_ND+0x350a>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8007d22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8007d30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8007d34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8007d44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8007d54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8007d64:	f000 bfbb 	b.w	8008cde <AT_ESP8266_ND+0x350a>
 8007d68:	0800d5d0 	.word	0x0800d5d0
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007d6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8007d7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	f040 80e2 	bne.w	8007f54 <AT_ESP8266_ND+0x2780>
 8007d90:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007d94:	2b0b      	cmp	r3, #11
 8007d96:	f000 80dd 	beq.w	8007f54 <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_wifi_gotip)
 8007d9a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007d9e:	2b0c      	cmp	r3, #12
 8007da0:	f000 80d8 	beq.w	8007f54 <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8007da4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007da8:	2b0e      	cmp	r3, #14
 8007daa:	f000 80d3 	beq.w	8007f54 <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_tcp_conectado)
 8007dae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007db2:	2b0f      	cmp	r3, #15
 8007db4:	f000 80ce 	beq.w	8007f54 <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_tcp_desconectado)
 8007db8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007dbc:	2b10      	cmp	r3, #16
 8007dbe:	f000 80c9 	beq.w	8007f54 <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_error))
 8007dc2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	f000 80c4 	beq.w	8007f54 <AT_ESP8266_ND+0x2780>
						{
						a->_pasos=0;
 8007dcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8007ddc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007de0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8007dec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007df0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f7f8 f9fa 	bl	80001f4 <strlen>
 8007e00:	4603      	mov	r3, r0
 8007e02:	4423      	add	r3, r4
 8007e04:	4aa7      	ldr	r2, [pc, #668]	; (80080a4 <AT_ESP8266_ND+0x28d0>)
 8007e06:	461c      	mov	r4, r3
 8007e08:	4613      	mov	r3, r2
 8007e0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007e0c:	6020      	str	r0, [r4, #0]
 8007e0e:	6061      	str	r1, [r4, #4]
 8007e10:	60a2      	str	r2, [r4, #8]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8007e16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007e24:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8007e28:	2201      	movs	r2, #1
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f004 fa53 	bl	800c2d6 <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8007e30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f7f8 f9d8 	bl	80001f4 <strlen>
 8007e44:	4603      	mov	r3, r0
 8007e46:	4423      	add	r3, r4
 8007e48:	4a97      	ldr	r2, [pc, #604]	; (80080a8 <AT_ESP8266_ND+0x28d4>)
 8007e4a:	6810      	ldr	r0, [r2, #0]
 8007e4c:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8007e4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007e5c:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8007e60:	2203      	movs	r2, #3
 8007e62:	4618      	mov	r0, r3
 8007e64:	f004 fa37 	bl	800c2d6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8007e68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007e76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8007e84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	3336      	adds	r3, #54	; 0x36
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7f8 f9af 	bl	80001f4 <strlen>
 8007e96:	4603      	mov	r3, r0
 8007e98:	461a      	mov	r2, r3
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f004 fa1a 	bl	800c2d6 <strncat>
						strncat(a->_uart2snd,separador2,2);
 8007ea2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ea6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007eb0:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f004 fa0d 	bl	800c2d6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8007ebc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ec0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007eca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ece:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8007ed8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007edc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3346      	adds	r3, #70	; 0x46
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7f8 f985 	bl	80001f4 <strlen>
 8007eea:	4603      	mov	r3, r0
 8007eec:	461a      	mov	r2, r3
 8007eee:	4629      	mov	r1, r5
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f004 f9f0 	bl	800c2d6 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8007ef6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007efa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007f04:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7f8 f973 	bl	80001f4 <strlen>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8007f14:	4619      	mov	r1, r3
 8007f16:	4620      	mov	r0, r4
 8007f18:	f004 f9dd 	bl	800c2d6 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8007f1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7f8 f962 	bl	80001f4 <strlen>
 8007f30:	4603      	mov	r3, r0
 8007f32:	461a      	mov	r2, r3
 8007f34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=600;
 8007f42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8007f54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8007f62:	1c5a      	adds	r2, r3, #1
 8007f64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8007f72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d124      	bne.n	8007fce <AT_ESP8266_ND+0x27fa>
 8007f84:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f88:	2b0a      	cmp	r3, #10
 8007f8a:	d02c      	beq.n	8007fe6 <AT_ESP8266_ND+0x2812>
 8007f8c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f90:	2b0b      	cmp	r3, #11
 8007f92:	d028      	beq.n	8007fe6 <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_fail)
 8007f94:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d024      	beq.n	8007fe6 <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_wifi_gotip)
 8007f9c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007fa0:	2b0c      	cmp	r3, #12
 8007fa2:	d020      	beq.n	8007fe6 <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 8007fa4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007fa8:	2b0e      	cmp	r3, #14
 8007faa:	d01c      	beq.n	8007fe6 <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_tcp_conectado)
 8007fac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007fb0:	2b0f      	cmp	r3, #15
 8007fb2:	d018      	beq.n	8007fe6 <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_tcp_desconectado)
 8007fb4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007fb8:	2b10      	cmp	r3, #16
 8007fba:	d014      	beq.n	8007fe6 <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_error)
 8007fbc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d010      	beq.n	8007fe6 <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_busy_p)))
 8007fc4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007fc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fcc:	d00b      	beq.n	8007fe6 <AT_ESP8266_ND+0x2812>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8007fce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8007fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	f340 867e 	ble.w	8008ce2 <AT_ESP8266_ND+0x350e>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8007fe6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8007ff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8007ff8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ffc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2200      	movs	r2, #0
 8008004:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8008008:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800800c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2200      	movs	r2, #0
 8008014:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8008018:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800801c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2200      	movs	r2, #0
 8008024:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008028:	f000 be5b 	b.w	8008ce2 <AT_ESP8266_ND+0x350e>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 800802c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008030:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8008034:	2200      	movs	r2, #0
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	2200      	movs	r2, #0
 800803a:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail)
 800803c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008040:	2b10      	cmp	r3, #16
 8008042:	d00b      	beq.n	800805c <AT_ESP8266_ND+0x2888>
 8008044:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008048:	2b0a      	cmp	r3, #10
 800804a:	d007      	beq.n	800805c <AT_ESP8266_ND+0x2888>
 800804c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008050:	2b03      	cmp	r3, #3
 8008052:	d003      	beq.n	800805c <AT_ESP8266_ND+0x2888>
						||(AT_decode==at_error))//240420
 8008054:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008058:	2b02      	cmp	r3, #2
 800805a:	d127      	bne.n	80080ac <AT_ESP8266_ND+0x28d8>
				{
					a->_estado=AT_decode;
 800805c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008060:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800806a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 800806e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008072:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2200      	movs	r2, #0
 800807a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_ejecucion=0;
 800807e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008082:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2200      	movs	r2, #0
 800808a:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
					a->_subpaso=0;
 800808e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008092:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2200      	movs	r2, #0
 800809a:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 800809e:	f000 be22 	b.w	8008ce6 <AT_ESP8266_ND+0x3512>
 80080a2:	bf00      	nop
 80080a4:	0800d700 	.word	0x0800d700
 80080a8:	0800d710 	.word	0x0800d710
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 80080ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	f040 80d1 	bne.w	8008262 <AT_ESP8266_ND+0x2a8e>
 80080c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f040 80c7 	bne.w	8008262 <AT_ESP8266_ND+0x2a8e>
										a->_ejecucion=1;
 80080d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2201      	movs	r2, #1
 80080e0:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
										a->_estado=24;
 80080e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2218      	movs	r2, #24
 80080f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80080f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8008104:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008108:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008118:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_pasos=0;
 8008122:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008126:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2200      	movs	r2, #0
 800812e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8008132:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008136:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 2ab8 	strb.w	r2, [r3, #2744]	; 0xab8
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 8008142:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008146:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008150:	4620      	mov	r0, r4
 8008152:	f7f8 f84f 	bl	80001f4 <strlen>
 8008156:	4603      	mov	r3, r0
 8008158:	4423      	add	r3, r4
 800815a:	4ac0      	ldr	r2, [pc, #768]	; (800845c <AT_ESP8266_ND+0x2c88>)
 800815c:	461c      	mov	r4, r3
 800815e:	4613      	mov	r3, r2
 8008160:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008162:	6020      	str	r0, [r4, #0]
 8008164:	6061      	str	r1, [r4, #4]
 8008166:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8008168:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800816c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8008176:	f107 0214 	add.w	r2, r7, #20
 800817a:	4611      	mov	r1, r2
 800817c:	4618      	mov	r0, r3
 800817e:	f003 fdad 	bl	800bcdc <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8008182:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008186:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008190:	f107 0314 	add.w	r3, r7, #20
 8008194:	4618      	mov	r0, r3
 8008196:	f7f8 f82d 	bl	80001f4 <strlen>
 800819a:	4602      	mov	r2, r0
 800819c:	f107 0314 	add.w	r3, r7, #20
 80081a0:	4619      	mov	r1, r3
 80081a2:	4620      	mov	r0, r4
 80081a4:	f004 f897 	bl	800c2d6 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 80081a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f603 22b8 	addw	r2, r3, #2744	; 0xab8
 80081b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80081c4:	4619      	mov	r1, r3
 80081c6:	4610      	mov	r0, r2
 80081c8:	f004 f966 	bl	800c498 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80081cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80081da:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 80081de:	2202      	movs	r2, #2
 80081e0:	4618      	mov	r0, r3
 80081e2:	f004 f878 	bl	800c2d6 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 80081e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7f7 fffd 	bl	80001f4 <strlen>
 80081fa:	4603      	mov	r3, r0
 80081fc:	461a      	mov	r2, r3
 80081fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008202:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 800820c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008210:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f603 24b8 	addw	r4, r3, #2744	; 0xab8
 800821a:	4620      	mov	r0, r4
 800821c:	f7f7 ffea 	bl	80001f4 <strlen>
 8008220:	4603      	mov	r3, r0
 8008222:	4423      	add	r3, r4
 8008224:	4a8e      	ldr	r2, [pc, #568]	; (8008460 <AT_ESP8266_ND+0x2c8c>)
 8008226:	461c      	mov	r4, r3
 8008228:	4613      	mov	r3, r2
 800822a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800822c:	6020      	str	r0, [r4, #0]
 800822e:	6061      	str	r1, [r4, #4]
 8008230:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8008232:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008236:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 8008240:	1c5a      	adds	r2, r3, #1
 8008242:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008246:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
										a->_estado=700;
 8008250:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008254:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800825e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8008262:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008266:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008270:	1c5a      	adds	r2, r3, #1
 8008272:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008276:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 8008280:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008284:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800828e:	2b00      	cmp	r3, #0
 8008290:	f040 80a6 	bne.w	80083e0 <AT_ESP8266_ND+0x2c0c>
 8008294:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008298:	2b13      	cmp	r3, #19
 800829a:	f000 80a1 	beq.w	80083e0 <AT_ESP8266_ND+0x2c0c>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 800829e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f503 62d3 	add.w	r2, r3, #1688	; 0x698
 80082ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 80082ba:	4619      	mov	r1, r3
 80082bc:	4610      	mov	r0, r2
 80082be:	f7f7 ff8f 	bl	80001e0 <strcmp>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d01b      	beq.n	8008300 <AT_ESP8266_ND+0x2b2c>
 80082c8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d017      	beq.n	8008300 <AT_ESP8266_ND+0x2b2c>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 80082d0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082d4:	2b14      	cmp	r3, #20
 80082d6:	d013      	beq.n	8008300 <AT_ESP8266_ND+0x2b2c>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 80082d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80082e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ea:	4293      	cmp	r3, r2
 80082ec:	dd78      	ble.n	80083e0 <AT_ESP8266_ND+0x2c0c>
 80082ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d16f      	bne.n	80083e0 <AT_ESP8266_ND+0x2c0c>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 8008300:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008304:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 800830e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008312:	4293      	cmp	r3, r2
 8008314:	dd0e      	ble.n	8008334 <AT_ESP8266_ND+0x2b60>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8008316:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800831a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
 8008324:	1c5a      	adds	r2, r3, #1
 8008326:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800832a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
								a->_debug_count4++;
 8008334:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008338:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008348:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_subpaso++;
 8008352:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008356:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008360:	1c5a      	adds	r2, r3, #1
 8008362:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008366:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
								a->_enviaruart=1;
 8008370:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008374:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2201      	movs	r2, #1
 800837c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8008380:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008384:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f503 6093 	add.w	r0, r3, #1176	; 0x498
 800838e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008392:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800839c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 80083aa:	2361      	movs	r3, #97	; 0x61
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	2301      	movs	r3, #1
 80083b0:	f003 fd3e 	bl	800be30 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 80083b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 80083c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 80083d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2200      	movs	r2, #0
 80083dc:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 80083e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ee:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80083f2:	f040 8478 	bne.w	8008ce6 <AT_ESP8266_ND+0x3512>
 80083f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083fa:	2b13      	cmp	r3, #19
 80083fc:	d032      	beq.n	8008464 <AT_ESP8266_ND+0x2c90>
 80083fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008402:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 800840c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008410:	4293      	cmp	r3, r2
 8008412:	dc27      	bgt.n	8008464 <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_wifi_disconnect)
 8008414:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008418:	2b0a      	cmp	r3, #10
 800841a:	d023      	beq.n	8008464 <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_fail)
 800841c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008420:	2b03      	cmp	r3, #3
 8008422:	d01f      	beq.n	8008464 <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_wifi_connected)
 8008424:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008428:	2b0b      	cmp	r3, #11
 800842a:	d01b      	beq.n	8008464 <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_wifi_gotip)
 800842c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008430:	2b0c      	cmp	r3, #12
 8008432:	d017      	beq.n	8008464 <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_tcp_desconectado)
 8008434:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008438:	2b10      	cmp	r3, #16
 800843a:	d013      	beq.n	8008464 <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_tcp_snd_err)
 800843c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008440:	2b11      	cmp	r3, #17
 8008442:	d00f      	beq.n	8008464 <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_tcp_enviado_error)
 8008444:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008448:	2b12      	cmp	r3, #18
 800844a:	d00b      	beq.n	8008464 <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_busy_p)))
 800844c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008454:	f040 8447 	bne.w	8008ce6 <AT_ESP8266_ND+0x3512>
 8008458:	e004      	b.n	8008464 <AT_ESP8266_ND+0x2c90>
 800845a:	bf00      	nop
 800845c:	0800d714 	.word	0x0800d714
 8008460:	0800d720 	.word	0x0800d720
									a->_debug_count5++;
 8008464:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008468:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8008472:	1c5a      	adds	r2, r3, #1
 8008474:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008478:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
									if(a->_ticks > 5000)
 8008482:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008486:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8008490:	f241 3288 	movw	r2, #5000	; 0x1388
 8008494:	4293      	cmp	r3, r2
 8008496:	dd25      	ble.n	80084e4 <AT_ESP8266_ND+0x2d10>
										a->_debug_count8++;
 8008498:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800849c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 80084a6:	1c5a      	adds	r2, r3, #1
 80084a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
										a->_subpaso++;
 80084b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 80084c4:	1c5a      	adds	r2, r3, #1
 80084c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_ticks=0;
 80084d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2200      	movs	r2, #0
 80084e0:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 80084e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	dd10      	ble.n	8008518 <AT_ESP8266_ND+0x2d44>
 80084f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084fa:	2b10      	cmp	r3, #16
 80084fc:	d00c      	beq.n	8008518 <AT_ESP8266_ND+0x2d44>
 80084fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008502:	2b0a      	cmp	r3, #10
 8008504:	d008      	beq.n	8008518 <AT_ESP8266_ND+0x2d44>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 8008506:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800850a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	220f      	movs	r2, #15
 8008512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8008516:	e008      	b.n	800852a <AT_ESP8266_ND+0x2d56>
										a->_estado=AT_decode;	//Devuelvo el estado
 8008518:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800851c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 800852a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800852e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2200      	movs	r2, #0
 8008536:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_ejecucion=0;
 800853a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800853e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2200      	movs	r2, #0
 8008546:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
									a->_subpaso=0;
 800854a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800854e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2200      	movs	r2, #0
 8008556:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
			break;
 800855a:	e3c4      	b.n	8008ce6 <AT_ESP8266_ND+0x3512>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800855c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008560:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if( a->_enviaruart==1)
 800856c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008570:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800857a:	2b01      	cmp	r3, #1
 800857c:	d16f      	bne.n	800865e <AT_ESP8266_ND+0x2e8a>
						{
						a->_pasos=0;
 800857e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008582:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2200      	movs	r2, #0
 800858a:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 800858e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008592:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2201      	movs	r2, #1
 800859a:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 800859e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80085ac:	4620      	mov	r0, r4
 80085ae:	f7f7 fe21 	bl	80001f4 <strlen>
 80085b2:	4603      	mov	r3, r0
 80085b4:	4423      	add	r3, r4
 80085b6:	4a7a      	ldr	r2, [pc, #488]	; (80087a0 <AT_ESP8266_ND+0x2fcc>)
 80085b8:	461c      	mov	r4, r3
 80085ba:	4615      	mov	r5, r2
 80085bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80085be:	6020      	str	r0, [r4, #0]
 80085c0:	6061      	str	r1, [r4, #4]
 80085c2:	60a2      	str	r2, [r4, #8]
 80085c4:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 80085c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80085d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 80085e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	335c      	adds	r3, #92	; 0x5c
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7f7 fe00 	bl	80001f4 <strlen>
 80085f4:	4603      	mov	r3, r0
 80085f6:	461a      	mov	r2, r3
 80085f8:	4629      	mov	r1, r5
 80085fa:	4620      	mov	r0, r4
 80085fc:	f003 fe6b 	bl	800c2d6 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008600:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008604:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800860e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008612:	4618      	mov	r0, r3
 8008614:	f7f7 fdee 	bl	80001f4 <strlen>
 8008618:	4602      	mov	r2, r0
 800861a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800861e:	4619      	mov	r1, r3
 8008620:	4620      	mov	r0, r4
 8008622:	f003 fe58 	bl	800c2d6 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008626:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800862a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008634:	4618      	mov	r0, r3
 8008636:	f7f7 fddd 	bl	80001f4 <strlen>
 800863a:	4603      	mov	r3, r0
 800863c:	461a      	mov	r2, r3
 800863e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008642:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=800;
 800864c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008650:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f44f 7248 	mov.w	r2, #800	; 0x320
 800865a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 800865e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008662:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800866c:	1c5a      	adds	r2, r3, #1
 800866e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008672:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 800867c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008680:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800868a:	2b00      	cmp	r3, #0
 800868c:	d123      	bne.n	80086d6 <AT_ESP8266_ND+0x2f02>
 800868e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008692:	2b0a      	cmp	r3, #10
 8008694:	d02b      	beq.n	80086ee <AT_ESP8266_ND+0x2f1a>
 8008696:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800869a:	2b0b      	cmp	r3, #11
 800869c:	d027      	beq.n	80086ee <AT_ESP8266_ND+0x2f1a>
 800869e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086a2:	2b0c      	cmp	r3, #12
 80086a4:	d023      	beq.n	80086ee <AT_ESP8266_ND+0x2f1a>
 80086a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086aa:	2b0e      	cmp	r3, #14
 80086ac:	d01f      	beq.n	80086ee <AT_ESP8266_ND+0x2f1a>
 80086ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086b2:	2b0f      	cmp	r3, #15
 80086b4:	d01b      	beq.n	80086ee <AT_ESP8266_ND+0x2f1a>
 80086b6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086ba:	2b10      	cmp	r3, #16
 80086bc:	d017      	beq.n	80086ee <AT_ESP8266_ND+0x2f1a>
 80086be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086c2:	2b15      	cmp	r3, #21
 80086c4:	d013      	beq.n	80086ee <AT_ESP8266_ND+0x2f1a>
 80086c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086ca:	2b16      	cmp	r3, #22
 80086cc:	d00f      	beq.n	80086ee <AT_ESP8266_ND+0x2f1a>
 80086ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086d2:	2b17      	cmp	r3, #23
 80086d4:	d00b      	beq.n	80086ee <AT_ESP8266_ND+0x2f1a>
 80086d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80086e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80086e8:	4293      	cmp	r3, r2
 80086ea:	f340 82fe 	ble.w	8008cea <AT_ESP8266_ND+0x3516>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80086ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80086fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008700:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008704:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2200      	movs	r2, #0
 800870c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8008710:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008714:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2200      	movs	r2, #0
 800871c:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8008720:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008724:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2200      	movs	r2, #0
 800872c:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
			}
			break;
 8008730:	e2db      	b.n	8008cea <AT_ESP8266_ND+0x3516>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 8008732:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008736:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800873a:	2200      	movs	r2, #0
 800873c:	601a      	str	r2, [r3, #0]
 800873e:	2200      	movs	r2, #0
 8008740:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail))
 8008742:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008746:	2b10      	cmp	r3, #16
 8008748:	d007      	beq.n	800875a <AT_ESP8266_ND+0x2f86>
 800874a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800874e:	2b0a      	cmp	r3, #10
 8008750:	d003      	beq.n	800875a <AT_ESP8266_ND+0x2f86>
 8008752:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008756:	2b03      	cmp	r3, #3
 8008758:	d124      	bne.n	80087a4 <AT_ESP8266_ND+0x2fd0>
				{
					a->_estado=AT_decode;
 800875a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800875e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 800876c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008770:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2200      	movs	r2, #0
 8008778:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_ejecucion=0;
 800877c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008780:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2200      	movs	r2, #0
 8008788:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
					a->_subpaso=0;
 800878c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008790:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2200      	movs	r2, #0
 8008798:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 800879c:	e2a7      	b.n	8008cee <AT_ESP8266_ND+0x351a>
 800879e:	bf00      	nop
 80087a0:	0800d72c 	.word	0x0800d72c
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 80087a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	f040 8102 	bne.w	80089bc <AT_ESP8266_ND+0x31e8>
 80087b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f040 80f8 	bne.w	80089bc <AT_ESP8266_ND+0x31e8>
										a->_ejecucion=1;
 80087cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
										a->_estado=24;
 80087dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2218      	movs	r2, #24
 80087e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80087ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 80087fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008800:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008810:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_pasos=0;
 800881a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800881e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2200      	movs	r2, #0
 8008826:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 800882a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800882e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 2ab8 	strb.w	r2, [r3, #2744]	; 0xab8
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 800883a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800883e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008848:	4620      	mov	r0, r4
 800884a:	f7f7 fcd3 	bl	80001f4 <strlen>
 800884e:	4603      	mov	r3, r0
 8008850:	4423      	add	r3, r4
 8008852:	4a83      	ldr	r2, [pc, #524]	; (8008a60 <AT_ESP8266_ND+0x328c>)
 8008854:	461c      	mov	r4, r3
 8008856:	4613      	mov	r3, r2
 8008858:	cb07      	ldmia	r3!, {r0, r1, r2}
 800885a:	6020      	str	r0, [r4, #0]
 800885c:	6061      	str	r1, [r4, #4]
 800885e:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 8008860:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008864:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800886e:	f107 020c 	add.w	r2, r7, #12
 8008872:	4611      	mov	r1, r2
 8008874:	4618      	mov	r0, r3
 8008876:	f003 fa31 	bl	800bcdc <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 800887a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800887e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008888:	f107 030c 	add.w	r3, r7, #12
 800888c:	4618      	mov	r0, r3
 800888e:	f7f7 fcb1 	bl	80001f4 <strlen>
 8008892:	4602      	mov	r2, r0
 8008894:	f107 030c 	add.w	r3, r7, #12
 8008898:	4619      	mov	r1, r3
 800889a:	4620      	mov	r0, r4
 800889c:	f003 fd1b 	bl	800c2d6 <strncat>
										strncat(a->_uart2snd,",",1);
 80088a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80088ae:	4620      	mov	r0, r4
 80088b0:	f7f7 fca0 	bl	80001f4 <strlen>
 80088b4:	4603      	mov	r3, r0
 80088b6:	4423      	add	r3, r4
 80088b8:	496a      	ldr	r1, [pc, #424]	; (8008a64 <AT_ESP8266_ND+0x3290>)
 80088ba:	461a      	mov	r2, r3
 80088bc:	460b      	mov	r3, r1
 80088be:	881b      	ldrh	r3, [r3, #0]
 80088c0:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 80088c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 80088d0:	f107 020c 	add.w	r2, r7, #12
 80088d4:	4611      	mov	r1, r2
 80088d6:	4618      	mov	r0, r3
 80088d8:	f003 fa00 	bl	800bcdc <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 80088dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80088ea:	f107 030c 	add.w	r3, r7, #12
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7f7 fc80 	bl	80001f4 <strlen>
 80088f4:	4602      	mov	r2, r0
 80088f6:	f107 030c 	add.w	r3, r7, #12
 80088fa:	4619      	mov	r1, r3
 80088fc:	4620      	mov	r0, r4
 80088fe:	f003 fcea 	bl	800c2d6 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8008902:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008906:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f603 22b8 	addw	r2, r3, #2744	; 0xab8
 8008910:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008914:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800891e:	4619      	mov	r1, r3
 8008920:	4610      	mov	r0, r2
 8008922:	f003 fdb9 	bl	800c498 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008926:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800892a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008934:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008938:	2202      	movs	r2, #2
 800893a:	4618      	mov	r0, r3
 800893c:	f003 fccb 	bl	800c2d6 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8008940:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008944:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800894e:	4618      	mov	r0, r3
 8008950:	f7f7 fc50 	bl	80001f4 <strlen>
 8008954:	4603      	mov	r3, r0
 8008956:	461a      	mov	r2, r3
 8008958:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800895c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8008966:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800896a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f603 24b8 	addw	r4, r3, #2744	; 0xab8
 8008974:	4620      	mov	r0, r4
 8008976:	f7f7 fc3d 	bl	80001f4 <strlen>
 800897a:	4603      	mov	r3, r0
 800897c:	4423      	add	r3, r4
 800897e:	4a3a      	ldr	r2, [pc, #232]	; (8008a68 <AT_ESP8266_ND+0x3294>)
 8008980:	461c      	mov	r4, r3
 8008982:	4613      	mov	r3, r2
 8008984:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008986:	6020      	str	r0, [r4, #0]
 8008988:	6061      	str	r1, [r4, #4]
 800898a:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 800898c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008990:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800899a:	1c5a      	adds	r2, r3, #1
 800899c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
										a->_estado=900;
 80089aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f44f 7261 	mov.w	r2, #900	; 0x384
 80089b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 80089bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 80089da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f040 80b8 	bne.w	8008b5e <AT_ESP8266_ND+0x338a>
 80089ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089f2:	2b13      	cmp	r3, #19
 80089f4:	f000 80b3 	beq.w	8008b5e <AT_ESP8266_ND+0x338a>
 80089f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f503 62d3 	add.w	r2, r3, #1688	; 0x698
 8008a06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 8008a14:	4619      	mov	r1, r3
 8008a16:	4610      	mov	r0, r2
 8008a18:	f7f7 fbe2 	bl	80001e0 <strcmp>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d024      	beq.n	8008a6c <AT_ESP8266_ND+0x3298>
 8008a22:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d020      	beq.n	8008a6c <AT_ESP8266_ND+0x3298>
 8008a2a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a2e:	2b14      	cmp	r3, #20
 8008a30:	d01c      	beq.n	8008a6c <AT_ESP8266_ND+0x3298>
 8008a32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8008a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a44:	4293      	cmp	r3, r2
 8008a46:	f340 808a 	ble.w	8008b5e <AT_ESP8266_ND+0x338a>
 8008a4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	f040 8080 	bne.w	8008b5e <AT_ESP8266_ND+0x338a>
 8008a5e:	e005      	b.n	8008a6c <AT_ESP8266_ND+0x3298>
 8008a60:	0800d714 	.word	0x0800d714
 8008a64:	0800d73c 	.word	0x0800d73c
 8008a68:	0800d720 	.word	0x0800d720
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 8008a6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8008a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	dd17      	ble.n	8008ab2 <AT_ESP8266_ND+0x32de>
 8008a82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d10e      	bne.n	8008ab2 <AT_ESP8266_ND+0x32de>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8008a94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
 8008aa2:	1c5a      	adds	r2, r3, #1
 8008aa4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aa8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
								a->_debug_count4++;
 8008ab2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ab6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8008ac0:	1c5a      	adds	r2, r3, #1
 8008ac2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ac6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_subpaso++;
 8008ad0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ad4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008ade:	1c5a      	adds	r2, r3, #1
 8008ae0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ae4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
								a->_enviaruart=1;
 8008aee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008af2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8008afe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f503 6093 	add.w	r0, r3, #1176	; 0x498
 8008b0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8008b1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 8008b28:	2361      	movs	r3, #97	; 0x61
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	f003 f97f 	bl	800be30 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8008b32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 8008b40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8008b4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 8008b5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b6c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8008b70:	f040 80bd 	bne.w	8008cee <AT_ESP8266_ND+0x351a>
 8008b74:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b78:	2b13      	cmp	r3, #19
 8008b7a:	d02b      	beq.n	8008bd4 <AT_ESP8266_ND+0x3400>
 8008b7c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b80:	2b0b      	cmp	r3, #11
 8008b82:	d027      	beq.n	8008bd4 <AT_ESP8266_ND+0x3400>
 8008b84:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b88:	2b0c      	cmp	r3, #12
 8008b8a:	d023      	beq.n	8008bd4 <AT_ESP8266_ND+0x3400>
 8008b8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8008b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	dc18      	bgt.n	8008bd4 <AT_ESP8266_ND+0x3400>
 8008ba2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ba6:	2b0a      	cmp	r3, #10
 8008ba8:	d014      	beq.n	8008bd4 <AT_ESP8266_ND+0x3400>
 8008baa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bae:	2b10      	cmp	r3, #16
 8008bb0:	d010      	beq.n	8008bd4 <AT_ESP8266_ND+0x3400>
 8008bb2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bb6:	2b11      	cmp	r3, #17
 8008bb8:	d00c      	beq.n	8008bd4 <AT_ESP8266_ND+0x3400>
 8008bba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bbe:	2b12      	cmp	r3, #18
 8008bc0:	d008      	beq.n	8008bd4 <AT_ESP8266_ND+0x3400>
 8008bc2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bc6:	2b16      	cmp	r3, #22
 8008bc8:	d004      	beq.n	8008bd4 <AT_ESP8266_ND+0x3400>
 8008bca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bce:	2b19      	cmp	r3, #25
 8008bd0:	f040 808d 	bne.w	8008cee <AT_ESP8266_ND+0x351a>
									a->_debug_count5++;
 8008bd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8008be2:	1c5a      	adds	r2, r3, #1
 8008be4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008be8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
									if(a->_ticks > 5000)
 8008bf2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bf6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8008c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c04:	4293      	cmp	r3, r2
 8008c06:	dd25      	ble.n	8008c54 <AT_ESP8266_ND+0x3480>
										a->_debug_count8++;
 8008c08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8008c16:	1c5a      	adds	r2, r3, #1
 8008c18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
										a->_subpaso++;
 8008c26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008c34:	1c5a      	adds	r2, r3, #1
 8008c36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_ticks=0;
 8008c44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8008c54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	dd07      	ble.n	8008c76 <AT_ESP8266_ND+0x34a2>
 8008c66:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c6a:	2b10      	cmp	r3, #16
 8008c6c:	d003      	beq.n	8008c76 <AT_ESP8266_ND+0x34a2>
 8008c6e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c72:	2b0a      	cmp	r3, #10
 8008c74:	d108      	bne.n	8008c88 <AT_ESP8266_ND+0x34b4>
										a->_estado=AT_decode;	//Devuelvo el estado
 8008c76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008c84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8008c88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_ejecucion=0;
 8008c98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
									a->_subpaso=0;
 8008ca8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
			break;
 8008cb8:	e019      	b.n	8008cee <AT_ESP8266_ND+0x351a>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8008cba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8008ccc:	e010      	b.n	8008cf0 <AT_ESP8266_ND+0x351c>
			break;
 8008cce:	bf00      	nop
 8008cd0:	e00e      	b.n	8008cf0 <AT_ESP8266_ND+0x351c>
			break;
 8008cd2:	bf00      	nop
 8008cd4:	e00c      	b.n	8008cf0 <AT_ESP8266_ND+0x351c>
			break;
 8008cd6:	bf00      	nop
 8008cd8:	e00a      	b.n	8008cf0 <AT_ESP8266_ND+0x351c>
			break;
 8008cda:	bf00      	nop
 8008cdc:	e008      	b.n	8008cf0 <AT_ESP8266_ND+0x351c>
			break;
 8008cde:	bf00      	nop
 8008ce0:	e006      	b.n	8008cf0 <AT_ESP8266_ND+0x351c>
			break;
 8008ce2:	bf00      	nop
 8008ce4:	e004      	b.n	8008cf0 <AT_ESP8266_ND+0x351c>
			break;
 8008ce6:	bf00      	nop
 8008ce8:	e002      	b.n	8008cf0 <AT_ESP8266_ND+0x351c>
			break;
 8008cea:	bf00      	nop
 8008cec:	e000      	b.n	8008cf0 <AT_ESP8266_ND+0x351c>
			break;
 8008cee:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8008cf0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cf4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
		a->_n_orig=0;
 8008d00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

		return (a->_estado);
 8008d10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d28 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d3a:	f240 328d 	movw	r2, #909	; 0x38d
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	f001 8449 	beq.w	800a5d6 <WiFi_Conn_ND+0x18ae>
 8008d44:	f240 328d 	movw	r2, #909	; 0x38d
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	f301 84de 	bgt.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008d4e:	f240 3289 	movw	r2, #905	; 0x389
 8008d52:	4293      	cmp	r3, r2
 8008d54:	f001 83b6 	beq.w	800a4c4 <WiFi_Conn_ND+0x179c>
 8008d58:	f240 3289 	movw	r2, #905	; 0x389
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	f301 84d4 	bgt.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008d62:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8008d66:	f001 82a5 	beq.w	800a2b4 <WiFi_Conn_ND+0x158c>
 8008d6a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8008d6e:	f301 84cc 	bgt.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008d72:	f240 3229 	movw	r2, #809	; 0x329
 8008d76:	4293      	cmp	r3, r2
 8008d78:	f301 84c7 	bgt.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008d7c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008d80:	f280 80a5 	bge.w	8008ece <WiFi_Conn_ND+0x1a6>
 8008d84:	f240 22c5 	movw	r2, #709	; 0x2c5
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	f000 87d9 	beq.w	8009d40 <WiFi_Conn_ND+0x1018>
 8008d8e:	f240 22c5 	movw	r2, #709	; 0x2c5
 8008d92:	4293      	cmp	r3, r2
 8008d94:	f301 84b9 	bgt.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008d98:	f240 22c1 	movw	r2, #705	; 0x2c1
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	f000 8750 	beq.w	8009c42 <WiFi_Conn_ND+0xf1a>
 8008da2:	f240 22c1 	movw	r2, #705	; 0x2c1
 8008da6:	4293      	cmp	r3, r2
 8008da8:	f301 84af 	bgt.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008dac:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8008db0:	f000 866b 	beq.w	8009a8a <WiFi_Conn_ND+0xd62>
 8008db4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8008db8:	f301 84a7 	bgt.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008dbc:	f240 2261 	movw	r2, #609	; 0x261
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	f000 85ec 	beq.w	800999e <WiFi_Conn_ND+0xc76>
 8008dc6:	f240 2261 	movw	r2, #609	; 0x261
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	f301 849d 	bgt.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008dd0:	f240 225d 	movw	r2, #605	; 0x25d
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	f000 8582 	beq.w	80098de <WiFi_Conn_ND+0xbb6>
 8008dda:	f240 225d 	movw	r2, #605	; 0x25d
 8008dde:	4293      	cmp	r3, r2
 8008de0:	f301 8493 	bgt.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008de4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8008de8:	f000 8500 	beq.w	80097ec <WiFi_Conn_ND+0xac4>
 8008dec:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8008df0:	f301 848b 	bgt.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008df4:	f240 12fd 	movw	r2, #509	; 0x1fd
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	f000 8496 	beq.w	800972a <WiFi_Conn_ND+0xa02>
 8008dfe:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8008e02:	f281 8482 	bge.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008e06:	f240 12f9 	movw	r2, #505	; 0x1f9
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	f000 844c 	beq.w	80096a8 <WiFi_Conn_ND+0x980>
 8008e10:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8008e14:	f281 8479 	bge.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008e18:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008e1c:	f000 83d7 	beq.w	80095ce <WiFi_Conn_ND+0x8a6>
 8008e20:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008e24:	f301 8471 	bgt.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008e28:	f240 1299 	movw	r2, #409	; 0x199
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	f000 8378 	beq.w	8009522 <WiFi_Conn_ND+0x7fa>
 8008e32:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8008e36:	f281 8468 	bge.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008e3a:	f240 1295 	movw	r2, #405	; 0x195
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	f000 8333 	beq.w	80094aa <WiFi_Conn_ND+0x782>
 8008e44:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8008e48:	f281 845f 	bge.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008e4c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8008e50:	f000 82aa 	beq.w	80093a8 <WiFi_Conn_ND+0x680>
 8008e54:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8008e58:	f301 8457 	bgt.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008e5c:	f240 1235 	movw	r2, #309	; 0x135
 8008e60:	4293      	cmp	r3, r2
 8008e62:	f000 827b 	beq.w	800935c <WiFi_Conn_ND+0x634>
 8008e66:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8008e6a:	f281 844e 	bge.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008e6e:	f240 1231 	movw	r2, #305	; 0x131
 8008e72:	4293      	cmp	r3, r2
 8008e74:	f000 826d 	beq.w	8009352 <WiFi_Conn_ND+0x62a>
 8008e78:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8008e7c:	f281 8445 	bge.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008e80:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008e84:	f000 8211 	beq.w	80092aa <WiFi_Conn_ND+0x582>
 8008e88:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008e8c:	f301 843d 	bgt.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008e90:	2bd1      	cmp	r3, #209	; 0xd1
 8008e92:	f000 81a5 	beq.w	80091e0 <WiFi_Conn_ND+0x4b8>
 8008e96:	2bd1      	cmp	r3, #209	; 0xd1
 8008e98:	f301 8437 	bgt.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008e9c:	2bcd      	cmp	r3, #205	; 0xcd
 8008e9e:	f000 8175 	beq.w	800918c <WiFi_Conn_ND+0x464>
 8008ea2:	2bcd      	cmp	r3, #205	; 0xcd
 8008ea4:	f301 8431 	bgt.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008ea8:	2bc8      	cmp	r3, #200	; 0xc8
 8008eaa:	f000 80f1 	beq.w	8009090 <WiFi_Conn_ND+0x368>
 8008eae:	2bc8      	cmp	r3, #200	; 0xc8
 8008eb0:	f301 842b 	bgt.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008eb4:	2b6d      	cmp	r3, #109	; 0x6d
 8008eb6:	f000 80b3 	beq.w	8009020 <WiFi_Conn_ND+0x2f8>
 8008eba:	2b6d      	cmp	r3, #109	; 0x6d
 8008ebc:	f301 8425 	bgt.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008ec0:	2b64      	cmp	r3, #100	; 0x64
 8008ec2:	d021      	beq.n	8008f08 <WiFi_Conn_ND+0x1e0>
 8008ec4:	2b69      	cmp	r3, #105	; 0x69
 8008ec6:	f000 8096 	beq.w	8008ff6 <WiFi_Conn_ND+0x2ce>
 8008eca:	f001 bc1e 	b.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008ece:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8008ed2:	2b09      	cmp	r3, #9
 8008ed4:	f201 8419 	bhi.w	800a70a <WiFi_Conn_ND+0x19e2>
 8008ed8:	a201      	add	r2, pc, #4	; (adr r2, 8008ee0 <WiFi_Conn_ND+0x1b8>)
 8008eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ede:	bf00      	nop
 8008ee0:	08009e57 	.word	0x08009e57
 8008ee4:	0800a70b 	.word	0x0800a70b
 8008ee8:	0800a70b 	.word	0x0800a70b
 8008eec:	0800a70b 	.word	0x0800a70b
 8008ef0:	0800a70b 	.word	0x0800a70b
 8008ef4:	08009f25 	.word	0x08009f25
 8008ef8:	08009fcf 	.word	0x08009fcf
 8008efc:	0800a079 	.word	0x0800a079
 8008f00:	0800a123 	.word	0x0800a123
 8008f04:	0800a1cd 	.word	0x0800a1cd
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f0e:	2b64      	cmp	r3, #100	; 0x64
 8008f10:	d046      	beq.n	8008fa0 <WiFi_Conn_ND+0x278>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d041      	beq.n	8008fa0 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f22:	2b1c      	cmp	r3, #28
 8008f24:	d03c      	beq.n	8008fa0 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d037      	beq.n	8008fa0 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f36:	2b04      	cmp	r3, #4
 8008f38:	d032      	beq.n	8008fa0 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f40:	2b13      	cmp	r3, #19
 8008f42:	d02d      	beq.n	8008fa0 <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f7fc faaf 	bl	80054a8 <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d14e      	bne.n	8008ff2 <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f7fc fc3d 	bl	80057d4 <AT_ESP8266_ND>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2200      	movs	r2, #0
 8008f66:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d109      	bne.n	8008f88 <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8008f80:	4619      	mov	r1, r3
 8008f82:	4610      	mov	r0, r2
 8008f84:	f7f8 f928 	bl	80011d8 <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	2364      	movs	r3, #100	; 0x64
 8008f98:	68b8      	ldr	r0, [r7, #8]
 8008f9a:	f7fb f9e1 	bl	8004360 <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 8008f9e:	e028      	b.n	8008ff2 <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d004      	beq.n	8008fb4 <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 8008fb0:	2b1c      	cmp	r3, #28
 8008fb2:	d103      	bne.n	8008fbc <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	226d      	movs	r2, #109	; 0x6d
 8008fb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d00f      	beq.n	8008fe6 <WiFi_Conn_ND+0x2be>
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fcc:	2b04      	cmp	r3, #4
 8008fce:	d00a      	beq.n	8008fe6 <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fd6:	2b0b      	cmp	r3, #11
 8008fd8:	d005      	beq.n	8008fe6 <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fe0:	2b0c      	cmp	r3, #12
 8008fe2:	f041 8363 	bne.w	800a6ac <WiFi_Conn_ND+0x1984>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2269      	movs	r2, #105	; 0x69
 8008fea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 8008fee:	f001 bb5d 	b.w	800a6ac <WiFi_Conn_ND+0x1984>
 8008ff2:	f001 bb5b 	b.w	800a6ac <WiFi_Conn_ND+0x1984>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f7fc fa56 	bl	80054a8 <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2264      	movs	r2, #100	; 0x64
 8009000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2200      	movs	r2, #0
 8009008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2200      	movs	r2, #0
 8009010:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 800901c:	f001 bb75 	b.w	800a70a <WiFi_Conn_ND+0x19e2>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00c      	beq.n	8009044 <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f7fc fa68 	bl	8005500 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009042:	e00e      	b.n	8009062 <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f7fc fa45 	bl	80054d4 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	22c8      	movs	r2, #200	; 0xc8
 800904e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009068:	2b04      	cmp	r3, #4
 800906a:	f041 8321 	bne.w	800a6b0 <WiFi_Conn_ND+0x1988>
					{
						Cambiar_CWMODE(b);
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f7fc fa1a 	bl	80054a8 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2264      	movs	r2, #100	; 0x64
 8009078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800908c:	f001 bb10 	b.w	800a6b0 <WiFi_Conn_ND+0x1988>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009096:	2bc8      	cmp	r3, #200	; 0xc8
 8009098:	d04f      	beq.n	800913a <WiFi_Conn_ND+0x412>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d04a      	beq.n	800913a <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d045      	beq.n	800913a <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090b4:	2b03      	cmp	r3, #3
 80090b6:	d040      	beq.n	800913a <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090be:	2b04      	cmp	r3, #4
 80090c0:	d03b      	beq.n	800913a <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c8:	2b0a      	cmp	r3, #10
 80090ca:	d036      	beq.n	800913a <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090d2:	2b0b      	cmp	r3, #11
 80090d4:	d031      	beq.n	800913a <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090dc:	2b0c      	cmp	r3, #12
 80090de:	d02c      	beq.n	800913a <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f7fc f9f7 	bl	80054d4 <ConectarWIFI>
						if(b->_enviaruart==1)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d124      	bne.n	800913a <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f7fc fb6f 	bl	80057d4 <AT_ESP8266_ND>
 80090f6:	4602      	mov	r2, r0
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2200      	movs	r2, #0
 8009102:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800910c:	2b01      	cmp	r3, #1
 800910e:	d109      	bne.n	8009124 <WiFi_Conn_ND+0x3fc>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800911c:	4619      	mov	r1, r3
 800911e:	4610      	mov	r0, r2
 8009120:	f7f8 f85a 	bl	80011d8 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009130:	b29a      	uxth	r2, r3
 8009132:	2364      	movs	r3, #100	; 0x64
 8009134:	68b8      	ldr	r0, [r7, #8]
 8009136:	f7fb f913 	bl	8004360 <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009140:	2b01      	cmp	r3, #1
 8009142:	d004      	beq.n	800914e <WiFi_Conn_ND+0x426>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800914a:	2b0c      	cmp	r3, #12
 800914c:	d103      	bne.n	8009156 <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	22d1      	movs	r2, #209	; 0xd1
 8009152:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)||(b->_estado==at_wifi_disconnect)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800915c:	2b02      	cmp	r3, #2
 800915e:	d00f      	beq.n	8009180 <WiFi_Conn_ND+0x458>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009166:	2b03      	cmp	r3, #3
 8009168:	d00a      	beq.n	8009180 <WiFi_Conn_ND+0x458>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009170:	2b20      	cmp	r3, #32
 8009172:	d005      	beq.n	8009180 <WiFi_Conn_ND+0x458>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800917a:	2b0a      	cmp	r3, #10
 800917c:	f041 829a 	bne.w	800a6b4 <WiFi_Conn_ND+0x198c>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	22cd      	movs	r2, #205	; 0xcd
 8009184:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009188:	f001 ba94 	b.w	800a6b4 <WiFi_Conn_ND+0x198c>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 800918c:	f241 3088 	movw	r0, #5000	; 0x1388
 8009190:	f7f8 ff28 	bl	8001fe4 <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f7fc f99d 	bl	80054d4 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	22c8      	movs	r2, #200	; 0xc8
 800919e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091b8:	2b04      	cmp	r3, #4
 80091ba:	f041 827d 	bne.w	800a6b8 <WiFi_Conn_ND+0x1990>
					{
						Cambiar_CWMODE(b);
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f7fc f972 	bl	80054a8 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2264      	movs	r2, #100	; 0x64
 80091c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 80091dc:	f001 ba6c 	b.w	800a6b8 <WiFi_Conn_ND+0x1990>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d108      	bne.n	8009204 <WiFi_Conn_ND+0x4dc>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f240 3229 	movw	r2, #809	; 0x329
 80091f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800920a:	2b0a      	cmp	r3, #10
 800920c:	d009      	beq.n	8009222 <WiFi_Conn_ND+0x4fa>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009214:	2b0d      	cmp	r3, #13
 8009216:	d004      	beq.n	8009222 <WiFi_Conn_ND+0x4fa>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800921e:	2b03      	cmp	r3, #3
 8009220:	d10a      	bne.n	8009238 <WiFi_Conn_ND+0x510>
				{
					ConectarWIFI(b);
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f7fc f956 	bl	80054d4 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	22c8      	movs	r2, #200	; 0xc8
 800922c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800923e:	2b04      	cmp	r3, #4
 8009240:	d10e      	bne.n	8009260 <WiFi_Conn_ND+0x538>
					{
						Cambiar_CWMODE(b);
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f7fc f930 	bl	80054a8 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2264      	movs	r2, #100	; 0x64
 800924c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009266:	2b00      	cmp	r3, #0
 8009268:	d011      	beq.n	800928e <WiFi_Conn_ND+0x566>
				{//
					CrearServidorTCP(b);
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f7fc f9a0 	bl	80055b0 <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009276:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2200      	movs	r2, #0
 8009286:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 800928a:	f001 ba3e 	b.w	800a70a <WiFi_Conn_ND+0x19e2>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f7fc f936 	bl	8005500 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800929a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 80092a6:	f001 ba30 	b.w	800a70a <WiFi_Conn_ND+0x19e2>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092b0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80092b4:	d03b      	beq.n	800932e <WiFi_Conn_ND+0x606>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092bc:	2b04      	cmp	r3, #4
 80092be:	d036      	beq.n	800932e <WiFi_Conn_ND+0x606>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092c6:	2b0a      	cmp	r3, #10
 80092c8:	d031      	beq.n	800932e <WiFi_Conn_ND+0x606>
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092d0:	2b0d      	cmp	r3, #13
 80092d2:	d02c      	beq.n	800932e <WiFi_Conn_ND+0x606>
				{
						DesconectarWIFI(b);
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f7fc f93f 	bl	8005558 <DesconectarWIFI>
						if(b->_enviaruart==1)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d124      	bne.n	800932e <WiFi_Conn_ND+0x606>
							{
								b->_estado=AT_ESP8266_ND(b);
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f7fc fa75 	bl	80057d4 <AT_ESP8266_ND>
 80092ea:	4602      	mov	r2, r0
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009300:	2b01      	cmp	r3, #1
 8009302:	d109      	bne.n	8009318 <WiFi_Conn_ND+0x5f0>
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009310:	4619      	mov	r1, r3
 8009312:	4610      	mov	r0, r2
 8009314:	f7f7 ff60 	bl	80011d8 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009324:	b29a      	uxth	r2, r3
 8009326:	2364      	movs	r3, #100	; 0x64
 8009328:	68b8      	ldr	r0, [r7, #8]
 800932a:	f7fb f819 	bl	8004360 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009334:	2b0a      	cmp	r3, #10
 8009336:	d005      	beq.n	8009344 <WiFi_Conn_ND+0x61c>
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800933e:	2b0d      	cmp	r3, #13
 8009340:	f041 81bc 	bne.w	800a6bc <WiFi_Conn_ND+0x1994>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f240 1235 	movw	r2, #309	; 0x135
 800934a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800934e:	f001 b9b5 	b.w	800a6bc <WiFi_Conn_ND+0x1994>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f7fc f892 	bl	800547c <NOP>
			}
			break;
 8009358:	f001 b9d7 	b.w	800a70a <WiFi_Conn_ND+0x19e2>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

				ConectarWIFI(b);
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f7fc f8b5 	bl	80054d4 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	22c8      	movs	r2, #200	; 0xc8
 800936e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009380:	2b04      	cmp	r3, #4
 8009382:	f041 819d 	bne.w	800a6c0 <WiFi_Conn_ND+0x1998>
					{
						Cambiar_CWMODE(b);
 8009386:	68f8      	ldr	r0, [r7, #12]
 8009388:	f7fc f88e 	bl	80054a8 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2264      	movs	r2, #100	; 0x64
 8009390:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2200      	movs	r2, #0
 8009398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 80093a4:	f001 b98c 	b.w	800a6c0 <WiFi_Conn_ND+0x1998>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093ae:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80093b2:	d04f      	beq.n	8009454 <WiFi_Conn_ND+0x72c>
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093ba:	2b04      	cmp	r3, #4
 80093bc:	d04a      	beq.n	8009454 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_ok)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d045      	beq.n	8009454 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_error)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d040      	beq.n	8009454 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_multiple_conn_ok)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093d8:	2b07      	cmp	r3, #7
 80093da:	d03b      	beq.n	8009454 <WiFi_Conn_ND+0x72c>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093e2:	2b08      	cmp	r3, #8
 80093e4:	d036      	beq.n	8009454 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_multiple_conn_err)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093ec:	2b1e      	cmp	r3, #30
 80093ee:	d031      	beq.n	8009454 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093f6:	2b1f      	cmp	r3, #31
 80093f8:	d02c      	beq.n	8009454 <WiFi_Conn_ND+0x72c>
				{
						MUX(b);
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f7fc f880 	bl	8005500 <MUX>
						if(b->_enviaruart==1)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009406:	2b01      	cmp	r3, #1
 8009408:	d124      	bne.n	8009454 <WiFi_Conn_ND+0x72c>
							{
								b->_estado=AT_ESP8266_ND(b);
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	f7fc f9e2 	bl	80057d4 <AT_ESP8266_ND>
 8009410:	4602      	mov	r2, r0
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2200      	movs	r2, #0
 800941c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009426:	2b01      	cmp	r3, #1
 8009428:	d109      	bne.n	800943e <WiFi_Conn_ND+0x716>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009436:	4619      	mov	r1, r3
 8009438:	4610      	mov	r0, r2
 800943a:	f7f7 fecd 	bl	80011d8 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800944a:	b29a      	uxth	r2, r3
 800944c:	2364      	movs	r3, #100	; 0x64
 800944e:	68b8      	ldr	r0, [r7, #8]
 8009450:	f7fa ff86 	bl	8004360 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800945a:	2b01      	cmp	r3, #1
 800945c:	d009      	beq.n	8009472 <WiFi_Conn_ND+0x74a>
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009464:	2b07      	cmp	r3, #7
 8009466:	d004      	beq.n	8009472 <WiFi_Conn_ND+0x74a>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800946e:	2b08      	cmp	r3, #8
 8009470:	d104      	bne.n	800947c <WiFi_Conn_ND+0x754>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f240 1299 	movw	r2, #409	; 0x199
 8009478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err))
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009482:	2b02      	cmp	r3, #2
 8009484:	d00a      	beq.n	800949c <WiFi_Conn_ND+0x774>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800948c:	2b1e      	cmp	r3, #30
 800948e:	d005      	beq.n	800949c <WiFi_Conn_ND+0x774>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009496:	2b1f      	cmp	r3, #31
 8009498:	f041 8114 	bne.w	800a6c4 <WiFi_Conn_ND+0x199c>
					{
					b->_estado_conexion=MUX_CONN_ERROR;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f240 1295 	movw	r2, #405	; 0x195
 80094a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				//----Condiciones de cambio de estado
			}
			break;
 80094a6:	f001 b90d 	b.w	800a6c4 <WiFi_Conn_ND+0x199c>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f7fb ffe6 	bl	800547c <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094b6:	2b04      	cmp	r3, #4
 80094b8:	d112      	bne.n	80094e0 <WiFi_Conn_ND+0x7b8>
				{
					Cambiar_CWMODE(b);
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f7fb fff4 	bl	80054a8 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2264      	movs	r2, #100	; 0x64
 80094c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094e6:	2b0a      	cmp	r3, #10
 80094e8:	d00a      	beq.n	8009500 <WiFi_Conn_ND+0x7d8>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094f0:	2b0d      	cmp	r3, #13
 80094f2:	d005      	beq.n	8009500 <WiFi_Conn_ND+0x7d8>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	f041 80e4 	bne.w	800a6c8 <WiFi_Conn_ND+0x19a0>
				{
					ConectarWIFI(b);
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f7fb ffe7 	bl	80054d4 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	22c8      	movs	r2, #200	; 0xc8
 800950a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 800951e:	f001 b8d3 	b.w	800a6c8 <WiFi_Conn_ND+0x19a0>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f7fb ffaa 	bl	800547c <NOP>
				b->_n_orig=0; //Borro el vector RX
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2200      	movs	r2, #0
 800952c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009536:	2b04      	cmp	r3, #4
 8009538:	d10e      	bne.n	8009558 <WiFi_Conn_ND+0x830>
					{
						Cambiar_CWMODE(b);
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f7fb ffb4 	bl	80054a8 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2264      	movs	r2, #100	; 0x64
 8009544:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2200      	movs	r2, #0
 800954c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800955e:	2b0a      	cmp	r3, #10
 8009560:	d009      	beq.n	8009576 <WiFi_Conn_ND+0x84e>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009568:	2b0d      	cmp	r3, #13
 800956a:	d004      	beq.n	8009576 <WiFi_Conn_ND+0x84e>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009572:	2b03      	cmp	r3, #3
 8009574:	d10a      	bne.n	800958c <WiFi_Conn_ND+0x864>
					{
						ConectarWIFI(b);
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f7fb ffac 	bl	80054d4 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	22c8      	movs	r2, #200	; 0xc8
 8009580:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}
					if(b->_NO_IP==0)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f8d3 3d58 	ldr.w	r3, [r3, #3416]	; 0xd58
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10d      	bne.n	80095b2 <WiFi_Conn_ND+0x88a>
					{
						IPDef(b);
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f7fb ffc8 	bl	800552c <IPDef>
						b->_estado_conexion=DEF_IP_EN_CURSO;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80095a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_estado=0;
					}


			}
			break;
 80095ae:	f001 b8ac 	b.w	800a70a <WiFi_Conn_ND+0x19e2>
						IPDef(b);
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f7fb ffba 	bl	800552c <IPDef>
						b->_estado_conexion=DEF_IP_OK;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f240 12fd 	movw	r2, #509	; 0x1fd
 80095be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 80095ca:	f001 b89e 	b.w	800a70a <WiFi_Conn_ND+0x19e2>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80095d8:	d045      	beq.n	8009666 <WiFi_Conn_ND+0x93e>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095e0:	2b04      	cmp	r3, #4
 80095e2:	d040      	beq.n	8009666 <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_ok)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d03b      	beq.n	8009666 <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_error)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d036      	beq.n	8009666 <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_def_ip_ok)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095fe:	2b1b      	cmp	r3, #27
 8009600:	d031      	beq.n	8009666 <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009608:	2b21      	cmp	r3, #33	; 0x21
 800960a:	d02c      	beq.n	8009666 <WiFi_Conn_ND+0x93e>
				{
						IPDef(b);
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f7fb ff8d 	bl	800552c <IPDef>
						if(b->_enviaruart==1)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009618:	2b01      	cmp	r3, #1
 800961a:	d124      	bne.n	8009666 <WiFi_Conn_ND+0x93e>
							{
								b->_estado=AT_ESP8266_ND(b);
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f7fc f8d9 	bl	80057d4 <AT_ESP8266_ND>
 8009622:	4602      	mov	r2, r0
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009638:	2b01      	cmp	r3, #1
 800963a:	d109      	bne.n	8009650 <WiFi_Conn_ND+0x928>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009648:	4619      	mov	r1, r3
 800964a:	4610      	mov	r0, r2
 800964c:	f7f7 fdc4 	bl	80011d8 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800965c:	b29a      	uxth	r2, r3
 800965e:	2364      	movs	r3, #100	; 0x64
 8009660:	68b8      	ldr	r0, [r7, #8]
 8009662:	f7fa fe7d 	bl	8004360 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800966c:	2b01      	cmp	r3, #1
 800966e:	d004      	beq.n	800967a <WiFi_Conn_ND+0x952>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009676:	2b1b      	cmp	r3, #27
 8009678:	d104      	bne.n	8009684 <WiFi_Conn_ND+0x95c>
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009680:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800968a:	2b02      	cmp	r3, #2
 800968c:	d005      	beq.n	800969a <WiFi_Conn_ND+0x972>
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009694:	2b21      	cmp	r3, #33	; 0x21
 8009696:	f041 8019 	bne.w	800a6cc <WiFi_Conn_ND+0x19a4>
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f240 12f9 	movw	r2, #505	; 0x1f9
 80096a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 80096a4:	f001 b812 	b.w	800a6cc <WiFi_Conn_ND+0x19a4>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f7fb fee7 	bl	800547c <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096b4:	2b04      	cmp	r3, #4
 80096b6:	d004      	beq.n	80096c2 <WiFi_Conn_ND+0x99a>
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096be:	2b02      	cmp	r3, #2
 80096c0:	d112      	bne.n	80096e8 <WiFi_Conn_ND+0x9c0>
				{
					Cambiar_CWMODE(b);
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	f7fb fef0 	bl	80054a8 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2264      	movs	r2, #100	; 0x64
 80096cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ee:	2b0a      	cmp	r3, #10
 80096f0:	d00a      	beq.n	8009708 <WiFi_Conn_ND+0x9e0>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096f8:	2b0d      	cmp	r3, #13
 80096fa:	d005      	beq.n	8009708 <WiFi_Conn_ND+0x9e0>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009702:	2b03      	cmp	r3, #3
 8009704:	f040 87e4 	bne.w	800a6d0 <WiFi_Conn_ND+0x19a8>
				{
					ConectarWIFI(b);
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f7fb fee3 	bl	80054d4 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	22c8      	movs	r2, #200	; 0xc8
 8009712:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2200      	movs	r2, #0
 8009722:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 8009726:	f000 bfd3 	b.w	800a6d0 <WiFi_Conn_ND+0x19a8>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f7fb fea6 	bl	800547c <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009736:	2b04      	cmp	r3, #4
 8009738:	d112      	bne.n	8009760 <WiFi_Conn_ND+0xa38>
					{
						Cambiar_CWMODE(b);
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f7fb feb4 	bl	80054a8 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2264      	movs	r2, #100	; 0x64
 8009744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009766:	2b0a      	cmp	r3, #10
 8009768:	d009      	beq.n	800977e <WiFi_Conn_ND+0xa56>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009770:	2b0d      	cmp	r3, #13
 8009772:	d004      	beq.n	800977e <WiFi_Conn_ND+0xa56>
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800977a:	2b03      	cmp	r3, #3
 800977c:	d10e      	bne.n	800979c <WiFi_Conn_ND+0xa74>
					{
						ConectarWIFI(b);
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f7fb fea8 	bl	80054d4 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	22c8      	movs	r2, #200	; 0xc8
 8009788:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d111      	bne.n	80097ca <WiFi_Conn_ND+0xaa2>
					{
						ConectarTCP(b);
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f7fb feec 	bl	8005584 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f44f 7216 	mov.w	r2, #600	; 0x258
 80097b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
						b->_estado=0;//
						b->_n_orig=0;// //Borro el vector RX

					}
			}
			break;
 80097c6:	f000 bfa0 	b.w	800a70a <WiFi_Conn_ND+0x19e2>
						ConectarWIFI(b);//
 80097ca:	68f8      	ldr	r0, [r7, #12]
 80097cc:	f7fb fe82 	bl	80054d4 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	22c8      	movs	r2, #200	; 0xc8
 80097d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			break;
 80097e8:	f000 bf8f 	b.w	800a70a <WiFi_Conn_ND+0x19e2>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097f2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80097f6:	d04a      	beq.n	800988e <WiFi_Conn_ND+0xb66>
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097fe:	2b02      	cmp	r3, #2
 8009800:	d045      	beq.n	800988e <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_ok)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009808:	2b01      	cmp	r3, #1
 800980a:	d040      	beq.n	800988e <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_wifi_disconnect)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009812:	2b0a      	cmp	r3, #10
 8009814:	d03b      	beq.n	800988e <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800981c:	2b0e      	cmp	r3, #14
 800981e:	d036      	beq.n	800988e <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_conectado)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009826:	2b0f      	cmp	r3, #15
 8009828:	d031      	beq.n	800988e <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009830:	2b10      	cmp	r3, #16
 8009832:	d02c      	beq.n	800988e <WiFi_Conn_ND+0xb66>
				{
					ConectarTCP(b);
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f7fb fea5 	bl	8005584 <ConectarTCP>
						if(b->_enviaruart==1)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009840:	2b01      	cmp	r3, #1
 8009842:	d124      	bne.n	800988e <WiFi_Conn_ND+0xb66>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f7fb ffc5 	bl	80057d4 <AT_ESP8266_ND>
 800984a:	4602      	mov	r2, r0
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2200      	movs	r2, #0
 8009856:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009860:	2b01      	cmp	r3, #1
 8009862:	d109      	bne.n	8009878 <WiFi_Conn_ND+0xb50>
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009870:	4619      	mov	r1, r3
 8009872:	4610      	mov	r0, r2
 8009874:	f7f7 fcb0 	bl	80011d8 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009884:	b29a      	uxth	r2, r3
 8009886:	2364      	movs	r3, #100	; 0x64
 8009888:	68b8      	ldr	r0, [r7, #8]
 800988a:	f7fa fd69 	bl	8004360 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009894:	2b01      	cmp	r3, #1
 8009896:	d009      	beq.n	80098ac <WiFi_Conn_ND+0xb84>
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800989e:	2b0e      	cmp	r3, #14
 80098a0:	d004      	beq.n	80098ac <WiFi_Conn_ND+0xb84>
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098a8:	2b0f      	cmp	r3, #15
 80098aa:	d106      	bne.n	80098ba <WiFi_Conn_ND+0xb92>
					{
					b->_estado_conexion=TCP_CONN_OK;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f240 2261 	movw	r2, #609	; 0x261
 80098b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 80098b6:	f000 bf0d 	b.w	800a6d4 <WiFi_Conn_ND+0x19ac>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d005      	beq.n	80098d0 <WiFi_Conn_ND+0xba8>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ca:	2b10      	cmp	r3, #16
 80098cc:	f040 8702 	bne.w	800a6d4 <WiFi_Conn_ND+0x19ac>
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f240 225d 	movw	r2, #605	; 0x25d
 80098d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 80098da:	f000 befb 	b.w	800a6d4 <WiFi_Conn_ND+0x19ac>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f7fb fdcc 	bl	800547c <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ea:	2b04      	cmp	r3, #4
 80098ec:	d112      	bne.n	8009914 <WiFi_Conn_ND+0xbec>
				{
					Cambiar_CWMODE(b);
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f7fb fdda 	bl	80054a8 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2264      	movs	r2, #100	; 0x64
 80098f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2200      	movs	r2, #0
 8009900:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2200      	movs	r2, #0
 8009908:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2200      	movs	r2, #0
 8009910:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_tcp_noip_err)||(b->_estado==at_error)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800991a:	2b0a      	cmp	r3, #10
 800991c:	d013      	beq.n	8009946 <WiFi_Conn_ND+0xc1e>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009924:	2b0d      	cmp	r3, #13
 8009926:	d00e      	beq.n	8009946 <WiFi_Conn_ND+0xc1e>
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800992e:	2b22      	cmp	r3, #34	; 0x22
 8009930:	d009      	beq.n	8009946 <WiFi_Conn_ND+0xc1e>
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009938:	2b02      	cmp	r3, #2
 800993a:	d004      	beq.n	8009946 <WiFi_Conn_ND+0xc1e>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009942:	2b03      	cmp	r3, #3
 8009944:	d10e      	bne.n	8009964 <WiFi_Conn_ND+0xc3c>
				{
					ConectarWIFI(b);
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f7fb fdc4 	bl	80054d4 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	22c8      	movs	r2, #200	; 0xc8
 8009950:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}

				if((b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800996a:	2b10      	cmp	r3, #16
 800996c:	d005      	beq.n	800997a <WiFi_Conn_ND+0xc52>
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009974:	2b0e      	cmp	r3, #14
 8009976:	f040 86af 	bne.w	800a6d8 <WiFi_Conn_ND+0x19b0>
				{
					ConectarTCP(b);
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f7fb fe02 	bl	8005584 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009986:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2200      	movs	r2, #0
 8009996:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 800999a:	f000 be9d 	b.w	800a6d8 <WiFi_Conn_ND+0x19b0>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f7fb fd6c 	bl	800547c <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099aa:	2b04      	cmp	r3, #4
 80099ac:	d112      	bne.n	80099d4 <WiFi_Conn_ND+0xcac>
					{
						Cambiar_CWMODE(b);
 80099ae:	68f8      	ldr	r0, [r7, #12]
 80099b0:	f7fb fd7a 	bl	80054a8 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2264      	movs	r2, #100	; 0x64
 80099b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2200      	movs	r2, #0
 80099c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099da:	2b0a      	cmp	r3, #10
 80099dc:	d009      	beq.n	80099f2 <WiFi_Conn_ND+0xcca>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099e4:	2b0d      	cmp	r3, #13
 80099e6:	d004      	beq.n	80099f2 <WiFi_Conn_ND+0xcca>
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	d10e      	bne.n	8009a10 <WiFi_Conn_ND+0xce8>
					{
						ConectarWIFI(b);
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f7fb fd6e 	bl	80054d4 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	22c8      	movs	r2, #200	; 0xc8
 80099fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d004      	beq.n	8009a24 <WiFi_Conn_ND+0xcfc>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a20:	2b10      	cmp	r3, #16
 8009a22:	d10f      	bne.n	8009a44 <WiFi_Conn_ND+0xd1c>
					{
						ConectarTCP(b);
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	f7fb fdad 	bl	8005584 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009a30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a4a:	2b0e      	cmp	r3, #14
 8009a4c:	d005      	beq.n	8009a5a <WiFi_Conn_ND+0xd32>
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a54:	2b0f      	cmp	r3, #15
 8009a56:	f040 8641 	bne.w	800a6dc <WiFi_Conn_ND+0x19b4>
					{
						if(b->_automatizacion >= WF_SEND )
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	f240 863b 	bls.w	800a6dc <WiFi_Conn_ND+0x19b4>
						{
							EnviarDatos(b);
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f7fb fdce 	bl	8005608 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8009a72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
						}
					}
			}
			break;
 8009a86:	f000 be29 	b.w	800a6dc <WiFi_Conn_ND+0x19b4>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a90:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009a94:	d054      	beq.n	8009b40 <WiFi_Conn_ND+0xe18>
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d04f      	beq.n	8009b40 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_wifi_disconnect)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aa6:	2b0a      	cmp	r3, #10
 8009aa8:	d04a      	beq.n	8009b40 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_desconectado)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ab0:	2b10      	cmp	r3, #16
 8009ab2:	d045      	beq.n	8009b40 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_snd_err)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aba:	2b11      	cmp	r3, #17
 8009abc:	d040      	beq.n	8009b40 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_ok_to_send)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ac4:	2b14      	cmp	r3, #20
 8009ac6:	d03b      	beq.n	8009b40 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ace:	2b12      	cmp	r3, #18
 8009ad0:	d036      	beq.n	8009b40 <WiFi_Conn_ND+0xe18>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d907      	bls.n	8009aec <WiFi_Conn_ND+0xdc4>
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d002      	beq.n	8009aec <WiFi_Conn_ND+0xdc4>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f7fb fd8e 	bl	8005608 <EnviarDatos>
					}
						if(b->_enviaruart==1)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d124      	bne.n	8009b40 <WiFi_Conn_ND+0xe18>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	f7fb fe6c 	bl	80057d4 <AT_ESP8266_ND>
 8009afc:	4602      	mov	r2, r0
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d109      	bne.n	8009b2a <WiFi_Conn_ND+0xe02>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009b22:	4619      	mov	r1, r3
 8009b24:	4610      	mov	r0, r2
 8009b26:	f7f7 fb57 	bl	80011d8 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	2364      	movs	r3, #100	; 0x64
 8009b3a:	68b8      	ldr	r0, [r7, #8]
 8009b3c:	f7fa fc10 	bl	8004360 <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b46:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009b4a:	d145      	bne.n	8009bd8 <WiFi_Conn_ND+0xeb0>
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d140      	bne.n	8009bd8 <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_error)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	d03b      	beq.n	8009bd8 <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_tcp_noip_err)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b66:	2b22      	cmp	r3, #34	; 0x22
 8009b68:	d036      	beq.n	8009bd8 <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_wifi_disconnect)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b70:	2b0a      	cmp	r3, #10
 8009b72:	d031      	beq.n	8009bd8 <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_tcp_desconectado)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b7a:	2b10      	cmp	r3, #16
 8009b7c:	d02c      	beq.n	8009bd8 <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_fail)		//240419
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b84:	2b03      	cmp	r3, #3
 8009b86:	d027      	beq.n	8009bd8 <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_tcp_snd_err)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b8e:	2b11      	cmp	r3, #17
 8009b90:	d022      	beq.n	8009bd8 <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_tcp_enviado_error))
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b98:	2b12      	cmp	r3, #18
 8009b9a:	d01d      	beq.n	8009bd8 <WiFi_Conn_ND+0xeb0>
							{
								b->_enviaruart=0;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d109      	bne.n	8009bc2 <WiFi_Conn_ND+0xe9a>
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009bba:	4619      	mov	r1, r3
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	f7f7 fb0b 	bl	80011d8 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	2364      	movs	r3, #100	; 0x64
 8009bd2:	68b8      	ldr	r0, [r7, #8]
 8009bd4:	f7fa fbc4 	bl	8004360 <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bde:	2b13      	cmp	r3, #19
 8009be0:	d104      	bne.n	8009bec <WiFi_Conn_ND+0xec4>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009be8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	d01e      	beq.n	8009c34 <WiFi_Conn_ND+0xf0c>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bfc:	2b0a      	cmp	r3, #10
 8009bfe:	d019      	beq.n	8009c34 <WiFi_Conn_ND+0xf0c>
										 ||(b->_estado==at_fail)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c06:	2b03      	cmp	r3, #3
 8009c08:	d014      	beq.n	8009c34 <WiFi_Conn_ND+0xf0c>
										 ||(b->_estado==at_tcp_noip_err)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c10:	2b22      	cmp	r3, #34	; 0x22
 8009c12:	d00f      	beq.n	8009c34 <WiFi_Conn_ND+0xf0c>
										 ||(b->_estado==at_tcp_desconectado)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c1a:	2b10      	cmp	r3, #16
 8009c1c:	d00a      	beq.n	8009c34 <WiFi_Conn_ND+0xf0c>
										 ||(b->_estado==at_tcp_snd_err)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c24:	2b11      	cmp	r3, #17
 8009c26:	d005      	beq.n	8009c34 <WiFi_Conn_ND+0xf0c>
										 ||(b->_estado==at_tcp_enviado_error))
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c2e:	2b12      	cmp	r3, #18
 8009c30:	f040 8556 	bne.w	800a6e0 <WiFi_Conn_ND+0x19b8>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009c3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 8009c3e:	f000 bd4f 	b.w	800a6e0 <WiFi_Conn_ND+0x19b8>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f7fb fc1a 	bl	800547c <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c4e:	2b04      	cmp	r3, #4
 8009c50:	d112      	bne.n	8009c78 <WiFi_Conn_ND+0xf50>
				{
					Cambiar_CWMODE(b);
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	f7fb fc28 	bl	80054a8 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2264      	movs	r2, #100	; 0x64
 8009c5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c7e:	2b0a      	cmp	r3, #10
 8009c80:	d013      	beq.n	8009caa <WiFi_Conn_ND+0xf82>
						||(b->_estado==at_deconectar_ok )
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c88:	2b0d      	cmp	r3, #13
 8009c8a:	d00e      	beq.n	8009caa <WiFi_Conn_ND+0xf82>
						||(b->_estado==at_fail)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c92:	2b03      	cmp	r3, #3
 8009c94:	d009      	beq.n	8009caa <WiFi_Conn_ND+0xf82>
						||(b->_estado!=at_error)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d104      	bne.n	8009caa <WiFi_Conn_ND+0xf82>
						||(b->_estado!=at_tcp_noip_err)) //Si me desconecto, me vuelvo a conectar 240419
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ca6:	2b22      	cmp	r3, #34	; 0x22
 8009ca8:	d00e      	beq.n	8009cc8 <WiFi_Conn_ND+0xfa0>
				{
					ConectarWIFI(b);
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f7fb fc12 	bl	80054d4 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	22c8      	movs	r2, #200	; 0xc8
 8009cb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cce:	2b0c      	cmp	r3, #12
 8009cd0:	d10f      	bne.n	8009cf2 <WiFi_Conn_ND+0xfca>
				{
					ConectarTCP(b);
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f7fb fc56 	bl	8005584 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009cde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	d00f      	beq.n	8009d1c <WiFi_Conn_ND+0xff4>
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d02:	2b10      	cmp	r3, #16
 8009d04:	d00a      	beq.n	8009d1c <WiFi_Conn_ND+0xff4>
										 ||(b->_estado==at_tcp_snd_err)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d0c:	2b11      	cmp	r3, #17
 8009d0e:	d005      	beq.n	8009d1c <WiFi_Conn_ND+0xff4>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d16:	2b12      	cmp	r3, #18
 8009d18:	f040 84e4 	bne.w	800a6e4 <WiFi_Conn_ND+0x19bc>
				{
					ConectarTCP(b);
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f7fb fc31 	bl	8005584 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009d28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 8009d3c:	f000 bcd2 	b.w	800a6e4 <WiFi_Conn_ND+0x19bc>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f7fb fb9b 	bl	800547c <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d4c:	2b04      	cmp	r3, #4
 8009d4e:	d112      	bne.n	8009d76 <WiFi_Conn_ND+0x104e>
					{
						Cambiar_CWMODE(b);
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f7fb fba9 	bl	80054a8 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2264      	movs	r2, #100	; 0x64
 8009d5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d7c:	2b0a      	cmp	r3, #10
 8009d7e:	d009      	beq.n	8009d94 <WiFi_Conn_ND+0x106c>
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d86:	2b0d      	cmp	r3, #13
 8009d88:	d004      	beq.n	8009d94 <WiFi_Conn_ND+0x106c>
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d90:	2b03      	cmp	r3, #3
 8009d92:	d10e      	bne.n	8009db2 <WiFi_Conn_ND+0x108a>
					{
						ConectarWIFI(b);
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f7fb fb9d 	bl	80054d4 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	22c8      	movs	r2, #200	; 0xc8
 8009d9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d00e      	beq.n	8009dda <WiFi_Conn_ND+0x10b2>
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dc2:	2b0b      	cmp	r3, #11
 8009dc4:	d009      	beq.n	8009dda <WiFi_Conn_ND+0x10b2>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dcc:	2b0c      	cmp	r3, #12
 8009dce:	d004      	beq.n	8009dda <WiFi_Conn_ND+0x10b2>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dd6:	2b10      	cmp	r3, #16
 8009dd8:	d10f      	bne.n	8009dfa <WiFi_Conn_ND+0x10d2>
					{
						ConectarTCP(b);
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f7fb fbd2 	bl	8005584 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009de6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 8009dfa:	20c8      	movs	r0, #200	; 0xc8
 8009dfc:	f7f8 f8f2 	bl	8001fe4 <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d916      	bls.n	8009e38 <WiFi_Conn_ND+0x1110>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d011      	beq.n	8009e38 <WiFi_Conn_ND+0x1110>
					{
							EnviarDatos(b);
 8009e14:	68f8      	ldr	r0, [r7, #12]
 8009e16:	f7fb fbf7 	bl	8005608 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8009e20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 8009e34:	f000 bc69 	b.w	800a70a <WiFi_Conn_ND+0x19e2>
							b->_estado_conexion=TCP_CONN_OK;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f240 2261 	movw	r2, #609	; 0x261
 8009e3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			break;
 8009e52:	f000 bc5a 	b.w	800a70a <WiFi_Conn_ND+0x19e2>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e5c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009e60:	d045      	beq.n	8009eee <WiFi_Conn_ND+0x11c6>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d040      	beq.n	8009eee <WiFi_Conn_ND+0x11c6>
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e72:	2b0a      	cmp	r3, #10
 8009e74:	d03b      	beq.n	8009eee <WiFi_Conn_ND+0x11c6>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e7c:	2b15      	cmp	r3, #21
 8009e7e:	d036      	beq.n	8009eee <WiFi_Conn_ND+0x11c6>
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e86:	2b16      	cmp	r3, #22
 8009e88:	d031      	beq.n	8009eee <WiFi_Conn_ND+0x11c6>
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e90:	2b17      	cmp	r3, #23
 8009e92:	d02c      	beq.n	8009eee <WiFi_Conn_ND+0x11c6>
							{
								CrearServidorTCP(b);
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f7fb fb8b 	bl	80055b0 <CrearServidorTCP>
									if(b->_enviaruart==1)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d124      	bne.n	8009eee <WiFi_Conn_ND+0x11c6>
										{
											b->_estado=AT_ESP8266_ND(b);
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f7fb fc95 	bl	80057d4 <AT_ESP8266_ND>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d109      	bne.n	8009ed8 <WiFi_Conn_ND+0x11b0>
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	4610      	mov	r0, r2
 8009ed4:	f7f7 f980 	bl	80011d8 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	2364      	movs	r3, #100	; 0x64
 8009ee8:	68b8      	ldr	r0, [r7, #8]
 8009eea:	f7fa fa39 	bl	8004360 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ef4:	2b15      	cmp	r3, #21
 8009ef6:	d004      	beq.n	8009f02 <WiFi_Conn_ND+0x11da>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009efe:	2b17      	cmp	r3, #23
 8009f00:	d104      	bne.n	8009f0c <WiFi_Conn_ND+0x11e4>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f240 3229 	movw	r2, #809	; 0x329
 8009f08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f12:	2b16      	cmp	r3, #22
 8009f14:	f040 83e8 	bne.w	800a6e8 <WiFi_Conn_ND+0x19c0>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f240 3225 	movw	r2, #805	; 0x325
 8009f1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 8009f22:	e3e1      	b.n	800a6e8 <WiFi_Conn_ND+0x19c0>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f7fb faa9 	bl	800547c <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f30:	2b04      	cmp	r3, #4
 8009f32:	d112      	bne.n	8009f5a <WiFi_Conn_ND+0x1232>
							{
								Cambiar_CWMODE(b);
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f7fb fab7 	bl	80054a8 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2264      	movs	r2, #100	; 0x64
 8009f3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f60:	2b0a      	cmp	r3, #10
 8009f62:	d009      	beq.n	8009f78 <WiFi_Conn_ND+0x1250>
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f6a:	2b0d      	cmp	r3, #13
 8009f6c:	d004      	beq.n	8009f78 <WiFi_Conn_ND+0x1250>
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f74:	2b03      	cmp	r3, #3
 8009f76:	d10e      	bne.n	8009f96 <WiFi_Conn_ND+0x126e>
							{
								ConectarWIFI(b);
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f7fb faab 	bl	80054d4 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	22c8      	movs	r2, #200	; 0xc8
 8009f82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d005      	beq.n	8009fac <WiFi_Conn_ND+0x1284>
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fa6:	2b10      	cmp	r3, #16
 8009fa8:	f040 83a0 	bne.w	800a6ec <WiFi_Conn_ND+0x19c4>
							{
								ConectarTCP(b);
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f7fb fae9 	bl	8005584 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009fb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 8009fcc:	e38e      	b.n	800a6ec <WiFi_Conn_ND+0x19c4>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f7fb fa54 	bl	800547c <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fda:	2b04      	cmp	r3, #4
 8009fdc:	d112      	bne.n	800a004 <WiFi_Conn_ND+0x12dc>
							{
								Cambiar_CWMODE(b);
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f7fb fa62 	bl	80054a8 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2264      	movs	r2, #100	; 0x64
 8009fe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a00a:	2b0a      	cmp	r3, #10
 800a00c:	d009      	beq.n	800a022 <WiFi_Conn_ND+0x12fa>
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a014:	2b0d      	cmp	r3, #13
 800a016:	d004      	beq.n	800a022 <WiFi_Conn_ND+0x12fa>
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a01e:	2b03      	cmp	r3, #3
 800a020:	d10e      	bne.n	800a040 <WiFi_Conn_ND+0x1318>
							{
								ConectarWIFI(b);
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f7fb fa56 	bl	80054d4 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	22c8      	movs	r2, #200	; 0xc8
 800a02c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2200      	movs	r2, #0
 800a034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a046:	2b02      	cmp	r3, #2
 800a048:	d005      	beq.n	800a056 <WiFi_Conn_ND+0x132e>
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a050:	2b10      	cmp	r3, #16
 800a052:	f040 834d 	bne.w	800a6f0 <WiFi_Conn_ND+0x19c8>
							{
								ConectarTCP(b);
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f7fb fa94 	bl	8005584 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2200      	movs	r2, #0
 800a06a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2200      	movs	r2, #0
 800a072:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}
						}
						break;
 800a076:	e33b      	b.n	800a6f0 <WiFi_Conn_ND+0x19c8>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f7fb f9ff 	bl	800547c <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a084:	2b04      	cmp	r3, #4
 800a086:	d112      	bne.n	800a0ae <WiFi_Conn_ND+0x1386>
							{
								Cambiar_CWMODE(b);
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f7fb fa0d 	bl	80054a8 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2264      	movs	r2, #100	; 0x64
 800a092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0b4:	2b0a      	cmp	r3, #10
 800a0b6:	d009      	beq.n	800a0cc <WiFi_Conn_ND+0x13a4>
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0be:	2b0d      	cmp	r3, #13
 800a0c0:	d004      	beq.n	800a0cc <WiFi_Conn_ND+0x13a4>
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0c8:	2b03      	cmp	r3, #3
 800a0ca:	d10e      	bne.n	800a0ea <WiFi_Conn_ND+0x13c2>
							{
								ConectarWIFI(b);
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f7fb fa01 	bl	80054d4 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	22c8      	movs	r2, #200	; 0xc8
 800a0d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d005      	beq.n	800a100 <WiFi_Conn_ND+0x13d8>
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0fa:	2b10      	cmp	r3, #16
 800a0fc:	f040 82fa 	bne.w	800a6f4 <WiFi_Conn_ND+0x19cc>
							{
								ConectarTCP(b);
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f7fb fa3f 	bl	8005584 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a10c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}
						}
						break;
 800a120:	e2e8      	b.n	800a6f4 <WiFi_Conn_ND+0x19cc>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f7fb f9aa 	bl	800547c <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a12e:	2b04      	cmp	r3, #4
 800a130:	d112      	bne.n	800a158 <WiFi_Conn_ND+0x1430>
							{
								Cambiar_CWMODE(b);
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f7fb f9b8 	bl	80054a8 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2264      	movs	r2, #100	; 0x64
 800a13c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2200      	movs	r2, #0
 800a154:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a15e:	2b0a      	cmp	r3, #10
 800a160:	d009      	beq.n	800a176 <WiFi_Conn_ND+0x144e>
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a168:	2b0d      	cmp	r3, #13
 800a16a:	d004      	beq.n	800a176 <WiFi_Conn_ND+0x144e>
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a172:	2b03      	cmp	r3, #3
 800a174:	d10e      	bne.n	800a194 <WiFi_Conn_ND+0x146c>
							{
								ConectarWIFI(b);
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f7fb f9ac 	bl	80054d4 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	22c8      	movs	r2, #200	; 0xc8
 800a180:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2200      	movs	r2, #0
 800a188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2200      	movs	r2, #0
 800a190:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	d005      	beq.n	800a1aa <WiFi_Conn_ND+0x1482>
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a4:	2b10      	cmp	r3, #16
 800a1a6:	f040 82a7 	bne.w	800a6f8 <WiFi_Conn_ND+0x19d0>
							{
								ConectarTCP(b);
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f7fb f9ea 	bl	8005584 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a1b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}
						}
						break;
 800a1ca:	e295      	b.n	800a6f8 <WiFi_Conn_ND+0x19d0>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f7fb f955 	bl	800547c <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1e0:	2b04      	cmp	r3, #4
 800a1e2:	d112      	bne.n	800a20a <WiFi_Conn_ND+0x14e2>
								{
									Cambiar_CWMODE(b);
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f7fb f95f 	bl	80054a8 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2264      	movs	r2, #100	; 0x64
 800a1ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2200      	movs	r2, #0
 800a206:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a210:	2b0a      	cmp	r3, #10
 800a212:	d009      	beq.n	800a228 <WiFi_Conn_ND+0x1500>
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a21a:	2b0d      	cmp	r3, #13
 800a21c:	d004      	beq.n	800a228 <WiFi_Conn_ND+0x1500>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a224:	2b03      	cmp	r3, #3
 800a226:	d10e      	bne.n	800a246 <WiFi_Conn_ND+0x151e>
								{
									ConectarWIFI(b);
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f7fb f953 	bl	80054d4 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	22c8      	movs	r2, #200	; 0xc8
 800a232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2200      	movs	r2, #0
 800a23a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2200      	movs	r2, #0
 800a242:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d004      	beq.n	800a25a <WiFi_Conn_ND+0x1532>
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a256:	2b10      	cmp	r3, #16
 800a258:	d10f      	bne.n	800a27a <WiFi_Conn_ND+0x1552>
								{
									ConectarTCP(b);
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f7fb f992 	bl	8005584 <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2200      	movs	r2, #0
 800a276:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800a280:	2b01      	cmp	r3, #1
 800a282:	f040 823b 	bne.w	800a6fc <WiFi_Conn_ND+0x19d4>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f000 8235 	beq.w	800a6fc <WiFi_Conn_ND+0x19d4>
								{
									EnviarDatosSRVR(b);
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f7fb f9a2 	bl	80055dc <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800a29e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800a2b2:	e223      	b.n	800a6fc <WiFi_Conn_ND+0x19d4>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ba:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800a2be:	d063      	beq.n	800a388 <WiFi_Conn_ND+0x1660>
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d05e      	beq.n	800a388 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_wifi_disconnect)&&
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800a2d0:	2b0a      	cmp	r3, #10
 800a2d2:	d059      	beq.n	800a388 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_wifi_connected)&&
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800a2da:	2b0b      	cmp	r3, #11
 800a2dc:	d054      	beq.n	800a388 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_wifi_gotip)&&
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800a2e4:	2b0c      	cmp	r3, #12
 800a2e6:	d04f      	beq.n	800a388 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_tcp_desconectado)&&
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800a2ee:	2b10      	cmp	r3, #16
 800a2f0:	d04a      	beq.n	800a388 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_tcp_snd_err)&&
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800a2f8:	2b11      	cmp	r3, #17
 800a2fa:	d045      	beq.n	800a388 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_tcp_enviado_error)&&
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800a302:	2b12      	cmp	r3, #18
 800a304:	d040      	beq.n	800a388 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800a30c:	2b13      	cmp	r3, #19
 800a30e:	d03b      	beq.n	800a388 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800a316:	2b16      	cmp	r3, #22
 800a318:	d036      	beq.n	800a388 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a320:	2b19      	cmp	r3, #25
 800a322:	d031      	beq.n	800a388 <WiFi_Conn_ND+0x1660>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d02c      	beq.n	800a388 <WiFi_Conn_ND+0x1660>
								{
								EnviarDatosSRVR(b);
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f7fb f954 	bl	80055dc <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d124      	bne.n	800a388 <WiFi_Conn_ND+0x1660>
										{
											b->_estado=AT_ESP8266_ND(b);
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f7fb fa48 	bl	80057d4 <AT_ESP8266_ND>
 800a344:	4602      	mov	r2, r0
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d109      	bne.n	800a372 <WiFi_Conn_ND+0x164a>
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a36a:	4619      	mov	r1, r3
 800a36c:	4610      	mov	r0, r2
 800a36e:	f7f6 ff33 	bl	80011d8 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a37e:	b29a      	uxth	r2, r3
 800a380:	2364      	movs	r3, #100	; 0x64
 800a382:	68b8      	ldr	r0, [r7, #8]
 800a384:	f7f9 ffec 	bl	8004360 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a38e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800a392:	d154      	bne.n	800a43e <WiFi_Conn_ND+0x1716>
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d14f      	bne.n	800a43e <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_error)&&
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d04a      	beq.n	800a43e <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_wifi_disconnect)&&
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800a3ae:	2b0a      	cmp	r3, #10
 800a3b0:	d045      	beq.n	800a43e <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_wifi_connected)&&
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800a3b8:	2b0b      	cmp	r3, #11
 800a3ba:	d040      	beq.n	800a43e <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_wifi_gotip)&&
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800a3c2:	2b0c      	cmp	r3, #12
 800a3c4:	d03b      	beq.n	800a43e <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_tcp_desconectado)&&
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800a3cc:	2b10      	cmp	r3, #16
 800a3ce:	d036      	beq.n	800a43e <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_tcp_snd_err)&&
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800a3d6:	2b11      	cmp	r3, #17
 800a3d8:	d031      	beq.n	800a43e <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_tcp_enviado_error)&&
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800a3e0:	2b12      	cmp	r3, #18
 800a3e2:	d02c      	beq.n	800a43e <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800a3ea:	2b13      	cmp	r3, #19
 800a3ec:	d027      	beq.n	800a43e <WiFi_Conn_ND+0x1716>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800a3f4:	2b16      	cmp	r3, #22
 800a3f6:	d022      	beq.n	800a43e <WiFi_Conn_ND+0x1716>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3fe:	2b19      	cmp	r3, #25
 800a400:	d01d      	beq.n	800a43e <WiFi_Conn_ND+0x1716>
										{
											b->_enviaruart=0;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2200      	movs	r2, #0
 800a406:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a410:	2b01      	cmp	r3, #1
 800a412:	d109      	bne.n	800a428 <WiFi_Conn_ND+0x1700>
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a420:	4619      	mov	r1, r3
 800a422:	4610      	mov	r0, r2
 800a424:	f7f6 fed8 	bl	80011d8 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a434:	b29a      	uxth	r2, r3
 800a436:	2364      	movs	r3, #100	; 0x64
 800a438:	68b8      	ldr	r0, [r7, #8]
 800a43a:	f7f9 ff91 	bl	8004360 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a444:	2b13      	cmp	r3, #19
 800a446:	d104      	bne.n	800a452 <WiFi_Conn_ND+0x172a>
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f240 328d 	movw	r2, #909	; 0x38d
 800a44e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d02d      	beq.n	800a4b8 <WiFi_Conn_ND+0x1790>
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a462:	2b04      	cmp	r3, #4
 800a464:	d028      	beq.n	800a4b8 <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800a46c:	2b0a      	cmp	r3, #10
 800a46e:	d023      	beq.n	800a4b8 <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a476:	2b0b      	cmp	r3, #11
 800a478:	d01e      	beq.n	800a4b8 <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800a480:	2b0c      	cmp	r3, #12
 800a482:	d019      	beq.n	800a4b8 <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a48a:	2b10      	cmp	r3, #16
 800a48c:	d014      	beq.n	800a4b8 <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800a494:	2b11      	cmp	r3, #17
 800a496:	d00f      	beq.n	800a4b8 <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a49e:	2b12      	cmp	r3, #18
 800a4a0:	d00a      	beq.n	800a4b8 <WiFi_Conn_ND+0x1790>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800a4a8:	2b16      	cmp	r3, #22
 800a4aa:	d005      	beq.n	800a4b8 <WiFi_Conn_ND+0x1790>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4b2:	2b19      	cmp	r3, #25
 800a4b4:	f040 8124 	bne.w	800a700 <WiFi_Conn_ND+0x19d8>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f240 3289 	movw	r2, #905	; 0x389
 800a4be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800a4c2:	e11d      	b.n	800a700 <WiFi_Conn_ND+0x19d8>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f7fa ffd9 	bl	800547c <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4d0:	2b04      	cmp	r3, #4
 800a4d2:	d009      	beq.n	800a4e8 <WiFi_Conn_ND+0x17c0>
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4da:	2b0b      	cmp	r3, #11
 800a4dc:	d004      	beq.n	800a4e8 <WiFi_Conn_ND+0x17c0>
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e4:	2b0c      	cmp	r3, #12
 800a4e6:	d112      	bne.n	800a50e <WiFi_Conn_ND+0x17e6>
							{
								Cambiar_CWMODE(b);
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	f7fa ffdd 	bl	80054a8 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2264      	movs	r2, #100	; 0x64
 800a4f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2200      	movs	r2, #0
 800a502:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2200      	movs	r2, #0
 800a50a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a514:	2b0a      	cmp	r3, #10
 800a516:	d009      	beq.n	800a52c <WiFi_Conn_ND+0x1804>
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a51e:	2b0d      	cmp	r3, #13
 800a520:	d004      	beq.n	800a52c <WiFi_Conn_ND+0x1804>
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a528:	2b03      	cmp	r3, #3
 800a52a:	d10e      	bne.n	800a54a <WiFi_Conn_ND+0x1822>
							{
								ConectarWIFI(b);
 800a52c:	68f8      	ldr	r0, [r7, #12]
 800a52e:	f7fa ffd1 	bl	80054d4 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	22c8      	movs	r2, #200	; 0xc8
 800a536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a550:	2b16      	cmp	r3, #22
 800a552:	d10c      	bne.n	800a56e <WiFi_Conn_ND+0x1846>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f240 3225 	movw	r2, #805	; 0x325
 800a55a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2200      	movs	r2, #0
 800a562:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2200      	movs	r2, #0
 800a56a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a574:	2b18      	cmp	r3, #24
 800a576:	d10c      	bne.n	800a592 <WiFi_Conn_ND+0x186a>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f240 3229 	movw	r2, #809	; 0x329
 800a57e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2200      	movs	r2, #0
 800a586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a598:	2b19      	cmp	r3, #25
 800a59a:	d008      	beq.n	800a5ae <WiFi_Conn_ND+0x1886>
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5a2:	2b11      	cmp	r3, #17
 800a5a4:	d003      	beq.n	800a5ae <WiFi_Conn_ND+0x1886>
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2212      	movs	r2, #18
 800a5aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	f040 80a5 	bne.w	800a704 <WiFi_Conn_ND+0x19dc>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f44f 7261 	mov.w	r2, #900	; 0x384
 800a5c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

							}


						}
						break;
 800a5d4:	e096      	b.n	800a704 <WiFi_Conn_ND+0x19dc>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f7fa ff50 	bl	800547c <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e2:	2b04      	cmp	r3, #4
 800a5e4:	d009      	beq.n	800a5fa <WiFi_Conn_ND+0x18d2>
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ec:	2b0b      	cmp	r3, #11
 800a5ee:	d004      	beq.n	800a5fa <WiFi_Conn_ND+0x18d2>
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f6:	2b0c      	cmp	r3, #12
 800a5f8:	d112      	bne.n	800a620 <WiFi_Conn_ND+0x18f8>
								{
									Cambiar_CWMODE(b);
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f7fa ff54 	bl	80054a8 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2264      	movs	r2, #100	; 0x64
 800a604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a626:	2b0a      	cmp	r3, #10
 800a628:	d009      	beq.n	800a63e <WiFi_Conn_ND+0x1916>
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a630:	2b0d      	cmp	r3, #13
 800a632:	d004      	beq.n	800a63e <WiFi_Conn_ND+0x1916>
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a63a:	2b03      	cmp	r3, #3
 800a63c:	d10e      	bne.n	800a65c <WiFi_Conn_ND+0x1934>
								{
									ConectarWIFI(b);
 800a63e:	68f8      	ldr	r0, [r7, #12]
 800a640:	f7fa ff48 	bl	80054d4 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	22c8      	movs	r2, #200	; 0xc8
 800a648:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2200      	movs	r2, #0
 800a650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 800a662:	2b01      	cmp	r3, #1
 800a664:	d004      	beq.n	800a670 <WiFi_Conn_ND+0x1948>
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d14b      	bne.n	800a708 <WiFi_Conn_ND+0x19e0>
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d046      	beq.n	800a708 <WiFi_Conn_ND+0x19e0>
								{
									EnviarDatosSRVR(b);
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f7fa ffae 	bl	80055dc <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f44f 7261 	mov.w	r2, #900	; 0x384
 800a686:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
									b->_new_data_rcv=0;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
									b->_send_data=0;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
								}

						}
						break;
 800a6aa:	e02d      	b.n	800a708 <WiFi_Conn_ND+0x19e0>
			break;
 800a6ac:	bf00      	nop
 800a6ae:	e02c      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
			break;
 800a6b0:	bf00      	nop
 800a6b2:	e02a      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
			break;
 800a6b4:	bf00      	nop
 800a6b6:	e028      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
			break;
 800a6b8:	bf00      	nop
 800a6ba:	e026      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
			break;
 800a6bc:	bf00      	nop
 800a6be:	e024      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
			break;
 800a6c0:	bf00      	nop
 800a6c2:	e022      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
			break;
 800a6c4:	bf00      	nop
 800a6c6:	e020      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
			break;
 800a6c8:	bf00      	nop
 800a6ca:	e01e      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
			break;
 800a6cc:	bf00      	nop
 800a6ce:	e01c      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
			break;
 800a6d0:	bf00      	nop
 800a6d2:	e01a      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
			break;
 800a6d4:	bf00      	nop
 800a6d6:	e018      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
			break;
 800a6d8:	bf00      	nop
 800a6da:	e016      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
			break;
 800a6dc:	bf00      	nop
 800a6de:	e014      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
			break;
 800a6e0:	bf00      	nop
 800a6e2:	e012      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
			break;
 800a6e4:	bf00      	nop
 800a6e6:	e010      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
						break;
 800a6e8:	bf00      	nop
 800a6ea:	e00e      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
						break;
 800a6ec:	bf00      	nop
 800a6ee:	e00c      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
						break;
 800a6f0:	bf00      	nop
 800a6f2:	e00a      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
						break;
 800a6f4:	bf00      	nop
 800a6f6:	e008      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
						break;
 800a6f8:	bf00      	nop
 800a6fa:	e006      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
						break;
 800a6fc:	bf00      	nop
 800a6fe:	e004      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
						break;
 800a700:	bf00      	nop
 800a702:	e002      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
						break;
 800a704:	bf00      	nop
 800a706:	e000      	b.n	800a70a <WiFi_Conn_ND+0x19e2>
						break;
 800a708:	bf00      	nop

		}
		return(b->_estado_conexion);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <httpPOST2>:
			return 0;
		}
}

httpPOST2(char * endpoint, char* server_ip, char * port,  uint16_t * vect_data, uint8_t * decimal,int cdad, uint16_t devId, char  * post, char * body, int max_char)
{
 800a718:	b5b0      	push	{r4, r5, r7, lr}
 800a71a:	b08c      	sub	sp, #48	; 0x30
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	607a      	str	r2, [r7, #4]
 800a724:	603b      	str	r3, [r7, #0]
	post[0]='\0';
 800a726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a728:	2200      	movs	r2, #0
 800a72a:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800a72c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a72e:	2200      	movs	r2, #0
 800a730:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800a732:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a734:	f7f5 fd5e 	bl	80001f4 <strlen>
 800a738:	4603      	mov	r3, r0
 800a73a:	461a      	mov	r2, r3
 800a73c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a73e:	4413      	add	r3, r2
 800a740:	4a9d      	ldr	r2, [pc, #628]	; (800a9b8 <httpPOST2+0x2a0>)
 800a742:	6810      	ldr	r0, [r2, #0]
 800a744:	6018      	str	r0, [r3, #0]
 800a746:	8892      	ldrh	r2, [r2, #4]
 800a748:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f7f5 fd52 	bl	80001f4 <strlen>
 800a750:	4603      	mov	r3, r0
 800a752:	461a      	mov	r2, r3
 800a754:	68f9      	ldr	r1, [r7, #12]
 800a756:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a758:	f001 fdbd 	bl	800c2d6 <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800a75c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a75e:	f7f5 fd49 	bl	80001f4 <strlen>
 800a762:	4603      	mov	r3, r0
 800a764:	461a      	mov	r2, r3
 800a766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a768:	4413      	add	r3, r2
 800a76a:	4994      	ldr	r1, [pc, #592]	; (800a9bc <httpPOST2+0x2a4>)
 800a76c:	461a      	mov	r2, r3
 800a76e:	460b      	mov	r3, r1
 800a770:	cb03      	ldmia	r3!, {r0, r1}
 800a772:	6010      	str	r0, [r2, #0]
 800a774:	6051      	str	r1, [r2, #4]
 800a776:	8819      	ldrh	r1, [r3, #0]
 800a778:	789b      	ldrb	r3, [r3, #2]
 800a77a:	8111      	strh	r1, [r2, #8]
 800a77c:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800a77e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a780:	f7f5 fd38 	bl	80001f4 <strlen>
 800a784:	4603      	mov	r3, r0
 800a786:	461a      	mov	r2, r3
 800a788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a78a:	4413      	add	r3, r2
 800a78c:	4a8c      	ldr	r2, [pc, #560]	; (800a9c0 <httpPOST2+0x2a8>)
 800a78e:	8811      	ldrh	r1, [r2, #0]
 800a790:	7892      	ldrb	r2, [r2, #2]
 800a792:	8019      	strh	r1, [r3, #0]
 800a794:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800a796:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a798:	f7f5 fd2c 	bl	80001f4 <strlen>
 800a79c:	4603      	mov	r3, r0
 800a79e:	461a      	mov	r2, r3
 800a7a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7a2:	4413      	add	r3, r2
 800a7a4:	4a87      	ldr	r2, [pc, #540]	; (800a9c4 <httpPOST2+0x2ac>)
 800a7a6:	6810      	ldr	r0, [r2, #0]
 800a7a8:	6018      	str	r0, [r3, #0]
 800a7aa:	8891      	ldrh	r1, [r2, #4]
 800a7ac:	7992      	ldrb	r2, [r2, #6]
 800a7ae:	8099      	strh	r1, [r3, #4]
 800a7b0:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800a7b2:	68b8      	ldr	r0, [r7, #8]
 800a7b4:	f7f5 fd1e 	bl	80001f4 <strlen>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	68b9      	ldr	r1, [r7, #8]
 800a7be:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a7c0:	f001 fd89 	bl	800c2d6 <strncat>
	strncat(post,":",1);
 800a7c4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a7c6:	f7f5 fd15 	bl	80001f4 <strlen>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7d0:	4413      	add	r3, r2
 800a7d2:	497d      	ldr	r1, [pc, #500]	; (800a9c8 <httpPOST2+0x2b0>)
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	881b      	ldrh	r3, [r3, #0]
 800a7da:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f7f5 fd09 	bl	80001f4 <strlen>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	6879      	ldr	r1, [r7, #4]
 800a7e8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a7ea:	f001 fd74 	bl	800c2d6 <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800a7ee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a7f0:	f7f5 fd00 	bl	80001f4 <strlen>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7fa:	4413      	add	r3, r2
 800a7fc:	4a70      	ldr	r2, [pc, #448]	; (800a9c0 <httpPOST2+0x2a8>)
 800a7fe:	8811      	ldrh	r1, [r2, #0]
 800a800:	7892      	ldrb	r2, [r2, #2]
 800a802:	8019      	strh	r1, [r3, #0]
 800a804:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800a806:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a808:	f7f5 fcf4 	bl	80001f4 <strlen>
 800a80c:	4603      	mov	r3, r0
 800a80e:	461a      	mov	r2, r3
 800a810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a812:	4413      	add	r3, r2
 800a814:	4a6d      	ldr	r2, [pc, #436]	; (800a9cc <httpPOST2+0x2b4>)
 800a816:	461d      	mov	r5, r3
 800a818:	4614      	mov	r4, r2
 800a81a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a81c:	6028      	str	r0, [r5, #0]
 800a81e:	6069      	str	r1, [r5, #4]
 800a820:	60aa      	str	r2, [r5, #8]
 800a822:	60eb      	str	r3, [r5, #12]
 800a824:	cc07      	ldmia	r4!, {r0, r1, r2}
 800a826:	6128      	str	r0, [r5, #16]
 800a828:	6169      	str	r1, [r5, #20]
 800a82a:	61aa      	str	r2, [r5, #24]
 800a82c:	8823      	ldrh	r3, [r4, #0]
 800a82e:	78a2      	ldrb	r2, [r4, #2]
 800a830:	83ab      	strh	r3, [r5, #28]
 800a832:	4613      	mov	r3, r2
 800a834:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800a836:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a838:	f7f5 fcdc 	bl	80001f4 <strlen>
 800a83c:	4603      	mov	r3, r0
 800a83e:	461a      	mov	r2, r3
 800a840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a842:	4413      	add	r3, r2
 800a844:	4a5e      	ldr	r2, [pc, #376]	; (800a9c0 <httpPOST2+0x2a8>)
 800a846:	8811      	ldrh	r1, [r2, #0]
 800a848:	7892      	ldrb	r2, [r2, #2]
 800a84a:	8019      	strh	r1, [r3, #0]
 800a84c:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800a84e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a850:	f7f5 fcd0 	bl	80001f4 <strlen>
 800a854:	4603      	mov	r3, r0
 800a856:	461a      	mov	r2, r3
 800a858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a85a:	4413      	add	r3, r2
 800a85c:	4a5c      	ldr	r2, [pc, #368]	; (800a9d0 <httpPOST2+0x2b8>)
 800a85e:	461c      	mov	r4, r3
 800a860:	4615      	mov	r5, r2
 800a862:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a864:	6020      	str	r0, [r4, #0]
 800a866:	6061      	str	r1, [r4, #4]
 800a868:	60a2      	str	r2, [r4, #8]
 800a86a:	60e3      	str	r3, [r4, #12]

	char _devId[8];
	_devId[0]='\0';
 800a86c:	2300      	movs	r3, #0
 800a86e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	INTOA(devId, _devId);
 800a872:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a876:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a87a:	4611      	mov	r1, r2
 800a87c:	4618      	mov	r0, r3
 800a87e:	f001 fa2d 	bl	800bcdc <INTOA>
	char d[8];
	d[0]='\0';
 800a882:	2300      	movs	r3, #0
 800a884:	773b      	strb	r3, [r7, #28]
	for (int i=0; i < cdad;i++)
 800a886:	2300      	movs	r3, #0
 800a888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a88a:	e037      	b.n	800a8fc <httpPOST2+0x1e4>
	{
		FTOA(vect_data[i],d,decimal[i]);
 800a88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88e:	005b      	lsls	r3, r3, #1
 800a890:	683a      	ldr	r2, [r7, #0]
 800a892:	4413      	add	r3, r2
 800a894:	881b      	ldrh	r3, [r3, #0]
 800a896:	4618      	mov	r0, r3
 800a898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a89c:	4413      	add	r3, r2
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	f107 031c 	add.w	r3, r7, #28
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	f001 fa4c 	bl	800bd44 <FTOA>
		strncat(body,data[i],strlen(data[i]));
 800a8ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4413      	add	r3, r2
 800a8b4:	005b      	lsls	r3, r3, #1
 800a8b6:	4a47      	ldr	r2, [pc, #284]	; (800a9d4 <httpPOST2+0x2bc>)
 800a8b8:	189c      	adds	r4, r3, r2
 800a8ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8bc:	4613      	mov	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	005b      	lsls	r3, r3, #1
 800a8c4:	4a43      	ldr	r2, [pc, #268]	; (800a9d4 <httpPOST2+0x2bc>)
 800a8c6:	4413      	add	r3, r2
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7f5 fc93 	bl	80001f4 <strlen>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	4621      	mov	r1, r4
 800a8d4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a8d6:	f001 fcfe 	bl	800c2d6 <strncat>
		strncat(body,d,strlen(d));
 800a8da:	f107 031c 	add.w	r3, r7, #28
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7f5 fc88 	bl	80001f4 <strlen>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	f107 031c 	add.w	r3, r7, #28
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a8ee:	f001 fcf2 	bl	800c2d6 <strncat>
		d[0]='\0';
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	773b      	strb	r3, [r7, #28]
	for (int i=0; i < cdad;i++)
 800a8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a900:	429a      	cmp	r2, r3
 800a902:	dbc3      	blt.n	800a88c <httpPOST2+0x174>
	}
	// Conversión de datos recibido por ModBUS

	strncat(body,deviceId,strlen(deviceId));
 800a904:	4834      	ldr	r0, [pc, #208]	; (800a9d8 <httpPOST2+0x2c0>)
 800a906:	f7f5 fc75 	bl	80001f4 <strlen>
 800a90a:	4603      	mov	r3, r0
 800a90c:	461a      	mov	r2, r3
 800a90e:	4932      	ldr	r1, [pc, #200]	; (800a9d8 <httpPOST2+0x2c0>)
 800a910:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a912:	f001 fce0 	bl	800c2d6 <strncat>
	strncat(body,_devId,strlen(_devId));
 800a916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7f5 fc6a 	bl	80001f4 <strlen>
 800a920:	4602      	mov	r2, r0
 800a922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a926:	4619      	mov	r1, r3
 800a928:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a92a:	f001 fcd4 	bl	800c2d6 <strncat>

	strncat(body,"}",strlen("}"));
 800a92e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a930:	f7f5 fc60 	bl	80001f4 <strlen>
 800a934:	4603      	mov	r3, r0
 800a936:	461a      	mov	r2, r3
 800a938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a93a:	4413      	add	r3, r2
 800a93c:	4927      	ldr	r1, [pc, #156]	; (800a9dc <httpPOST2+0x2c4>)
 800a93e:	461a      	mov	r2, r3
 800a940:	460b      	mov	r3, r1
 800a942:	881b      	ldrh	r3, [r3, #0]
 800a944:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800a946:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a948:	f7f5 fc54 	bl	80001f4 <strlen>
 800a94c:	4602      	mov	r2, r0
 800a94e:	f107 0314 	add.w	r3, r7, #20
 800a952:	4619      	mov	r1, r3
 800a954:	4610      	mov	r0, r2
 800a956:	f001 f9c1 	bl	800bcdc <INTOA>
	strncat(post,length,strlen(length));
 800a95a:	f107 0314 	add.w	r3, r7, #20
 800a95e:	4618      	mov	r0, r3
 800a960:	f7f5 fc48 	bl	80001f4 <strlen>
 800a964:	4602      	mov	r2, r0
 800a966:	f107 0314 	add.w	r3, r7, #20
 800a96a:	4619      	mov	r1, r3
 800a96c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a96e:	f001 fcb2 	bl	800c2d6 <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800a972:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a974:	f7f5 fc3e 	bl	80001f4 <strlen>
 800a978:	4603      	mov	r3, r0
 800a97a:	461a      	mov	r2, r3
 800a97c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a97e:	4413      	add	r3, r2
 800a980:	4a17      	ldr	r2, [pc, #92]	; (800a9e0 <httpPOST2+0x2c8>)
 800a982:	6810      	ldr	r0, [r2, #0]
 800a984:	6018      	str	r0, [r3, #0]
 800a986:	7912      	ldrb	r2, [r2, #4]
 800a988:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800a98a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a98c:	f7f5 fc32 	bl	80001f4 <strlen>
 800a990:	4602      	mov	r2, r0
 800a992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a994:	429a      	cmp	r2, r3
 800a996:	d20a      	bcs.n	800a9ae <httpPOST2+0x296>
	{
		strncat(post,body,strlen(body));
 800a998:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a99a:	f7f5 fc2b 	bl	80001f4 <strlen>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a9a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a9a6:	f001 fc96 	bl	800c2d6 <strncat>
		return 1 ;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e000      	b.n	800a9b0 <httpPOST2+0x298>
	}
		else
		{
			return 0;
 800a9ae:	2300      	movs	r3, #0
		}
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3730      	adds	r7, #48	; 0x30
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bdb0      	pop	{r4, r5, r7, pc}
 800a9b8:	0800d754 	.word	0x0800d754
 800a9bc:	0800d75c 	.word	0x0800d75c
 800a9c0:	0800d768 	.word	0x0800d768
 800a9c4:	0800d76c 	.word	0x0800d76c
 800a9c8:	0800d774 	.word	0x0800d774
 800a9cc:	0800d778 	.word	0x0800d778
 800a9d0:	0800d798 	.word	0x0800d798
 800a9d4:	20000090 	.word	0x20000090
 800a9d8:	20000130 	.word	0x20000130
 800a9dc:	0800d7a8 	.word	0x0800d7a8
 800a9e0:	0800d7ac 	.word	0x0800d7ac

0800a9e4 <LoRa_Send>:
#include "RYLR896.h"
#include "string.h"
#include "STR_Chelo.h"

int LoRa_Send(struct LoRa *a, UART_HandleTypeDef * SERIAL)
{
 800a9e4:	b5b0      	push	{r4, r5, r7, lr}
 800a9e6:	b086      	sub	sp, #24
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]

	char items[4];

	if(a->txitems > 241)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800a9f4:	2bf1      	cmp	r3, #241	; 0xf1
 800a9f6:	dd01      	ble.n	800a9fc <LoRa_Send+0x18>
	{
		return ERROR_BUFFER_SIZE;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	e099      	b.n	800ab30 <LoRa_Send+0x14c>
	}
	else
	{

		items[0]='\0';
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	723b      	strb	r3, [r7, #8]
		itoa(a->txitems, items,10);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800aa06:	f107 0108 	add.w	r1, r7, #8
 800aa0a:	220a      	movs	r2, #10
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f001 fa76 	bl	800befe <itoa>
		a->txbuff2SND[0]='\0'; 													//Borro el vector
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		strncat(a->txbuff2SND,"AT+SEND=",strlen("AT+SEND="));					//AT+SEND=
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800aa20:	4620      	mov	r0, r4
 800aa22:	f7f5 fbe7 	bl	80001f4 <strlen>
 800aa26:	4603      	mov	r3, r0
 800aa28:	4423      	add	r3, r4
 800aa2a:	4943      	ldr	r1, [pc, #268]	; (800ab38 <LoRa_Send+0x154>)
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	460b      	mov	r3, r1
 800aa30:	cb03      	ldmia	r3!, {r0, r1}
 800aa32:	6010      	str	r0, [r2, #0]
 800aa34:	6051      	str	r1, [r2, #4]
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	7213      	strb	r3, [r2, #8]
		strncat(a->txbuff2SND,a->dest_address,strlen(a->dest_address));			//AT+SEND=1
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f103 0516 	add.w	r5, r3, #22
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	3316      	adds	r3, #22
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7f5 fbd2 	bl	80001f4 <strlen>
 800aa50:	4603      	mov	r3, r0
 800aa52:	461a      	mov	r2, r3
 800aa54:	4629      	mov	r1, r5
 800aa56:	4620      	mov	r0, r4
 800aa58:	f001 fc3d 	bl	800c2d6 <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800aa62:	4620      	mov	r0, r4
 800aa64:	f7f5 fbc6 	bl	80001f4 <strlen>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	4423      	add	r3, r4
 800aa6c:	4933      	ldr	r1, [pc, #204]	; (800ab3c <LoRa_Send+0x158>)
 800aa6e:	461a      	mov	r2, r3
 800aa70:	460b      	mov	r3, r1
 800aa72:	881b      	ldrh	r3, [r3, #0]
 800aa74:	8013      	strh	r3, [r2, #0]
		strncat(a->txbuff2SND,items,strlen(items));								//AT+SEND=1,4
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800aa7c:	f107 0308 	add.w	r3, r7, #8
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7f5 fbb7 	bl	80001f4 <strlen>
 800aa86:	4602      	mov	r2, r0
 800aa88:	f107 0308 	add.w	r3, r7, #8
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f001 fc21 	bl	800c2d6 <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,4,
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	f7f5 fbaa 	bl	80001f4 <strlen>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	4423      	add	r3, r4
 800aaa4:	4925      	ldr	r1, [pc, #148]	; (800ab3c <LoRa_Send+0x158>)
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	881b      	ldrh	r3, [r3, #0]
 800aaac:	8013      	strh	r3, [r2, #0]

		int la=strlen(a->txbuff2SND);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7f5 fb9d 	bl	80001f4 <strlen>
 800aaba:	4603      	mov	r3, r0
 800aabc:	617b      	str	r3, [r7, #20]
		int lb=la+a->txitems;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800aac4:	697a      	ldr	r2, [r7, #20]
 800aac6:	4413      	add	r3, r2
 800aac8:	60fb      	str	r3, [r7, #12]
		int lc=0;
 800aaca:	2300      	movs	r3, #0
 800aacc:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800aace:	e012      	b.n	800aaf6 <LoRa_Send+0x112>
		{
			a->txbuff2SND[la]=a->txbuff[lc];
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	4413      	add	r3, r2
 800aad6:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 800aada:	7819      	ldrb	r1, [r3, #0]
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	4413      	add	r3, r2
 800aae2:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800aae6:	460a      	mov	r2, r1
 800aae8:	701a      	strb	r2, [r3, #0]
			la++;
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	3301      	adds	r3, #1
 800aaee:	617b      	str	r3, [r7, #20]
			lc++;
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800aaf6:	697a      	ldr	r2, [r7, #20]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	dbe8      	blt.n	800aad0 <LoRa_Send+0xec>
		}
		a->txbuff2SND[la++]='\r';
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	1c5a      	adds	r2, r3, #1
 800ab02:	617a      	str	r2, [r7, #20]
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	4413      	add	r3, r2
 800ab08:	220d      	movs	r2, #13
 800ab0a:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		a->txbuff2SND[la++]='\n';
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	1c5a      	adds	r2, r3, #1
 800ab12:	617a      	str	r2, [r7, #20]
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	4413      	add	r3, r2
 800ab18:	220a      	movs	r2, #10
 800ab1a:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		HAL_UART_Transmit_IT(SERIAL, a->txbuff2SND, la);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800ab24:	697a      	ldr	r2, [r7, #20]
 800ab26:	b292      	uxth	r2, r2
 800ab28:	4619      	mov	r1, r3
 800ab2a:	6838      	ldr	r0, [r7, #0]
 800ab2c:	f7f9 fcaa 	bl	8004484 <HAL_UART_Transmit_IT>
	}

}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3718      	adds	r7, #24
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bdb0      	pop	{r4, r5, r7, pc}
 800ab38:	0800d7b4 	.word	0x0800d7b4
 800ab3c:	0800d7c0 	.word	0x0800d7c0

0800ab40 <LoRa_reset_sndTIMER>:
		a->tmr_dly_en=1;
		a->tmr_dlyCNT=0;
 }

void LoRa_reset_sndTIMER(struct LoRa *a,int msec)
 {
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
	 	a->tmr_dly_ON=0;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
		a->tmr_dly=msec;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	683a      	ldr	r2, [r7, #0]
 800ab56:	f8c3 27f0 	str.w	r2, [r3, #2032]	; 0x7f0
		a->tmr_dly_en=0;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		a->tmr_dlyCNT=0;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f8c3 27f4 	str.w	r2, [r3, #2036]	; 0x7f4
 }
 800ab6a:	bf00      	nop
 800ab6c:	370c      	adds	r7, #12
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr
	...

0800ab78 <LoRa_decode>:
		break;
	}
}

void LoRa_decode(struct LoRa *b)
 {
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b086      	sub	sp, #24
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
	switch (Lora_idSTR(b))
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 fa25 	bl	800afd0 <Lora_idSTR>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b10      	cmp	r3, #16
 800ab8a:	f200 820c 	bhi.w	800afa6 <LoRa_decode+0x42e>
 800ab8e:	a201      	add	r2, pc, #4	; (adr r2, 800ab94 <LoRa_decode+0x1c>)
 800ab90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab94:	0800abd9 	.word	0x0800abd9
 800ab98:	0800acb1 	.word	0x0800acb1
 800ab9c:	0800aee5 	.word	0x0800aee5
 800aba0:	0800aeef 	.word	0x0800aeef
 800aba4:	0800aef9 	.word	0x0800aef9
 800aba8:	0800af03 	.word	0x0800af03
 800abac:	0800af0d 	.word	0x0800af0d
 800abb0:	0800af17 	.word	0x0800af17
 800abb4:	0800af21 	.word	0x0800af21
 800abb8:	0800af2b 	.word	0x0800af2b
 800abbc:	0800af35 	.word	0x0800af35
 800abc0:	0800af75 	.word	0x0800af75
 800abc4:	0800af7f 	.word	0x0800af7f
 800abc8:	0800af93 	.word	0x0800af93
 800abcc:	0800af89 	.word	0x0800af89
 800abd0:	0800aedb 	.word	0x0800aedb
 800abd4:	0800af9d 	.word	0x0800af9d
	{
		case _OK:
		{
			switch(b->estado)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 800abde:	3b01      	subs	r3, #1
 800abe0:	2b13      	cmp	r3, #19
 800abe2:	d860      	bhi.n	800aca6 <LoRa_decode+0x12e>
 800abe4:	a201      	add	r2, pc, #4	; (adr r2, 800abec <LoRa_decode+0x74>)
 800abe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abea:	bf00      	nop
 800abec:	0800ac3d 	.word	0x0800ac3d
 800abf0:	0800aca7 	.word	0x0800aca7
 800abf4:	0800aca7 	.word	0x0800aca7
 800abf8:	0800aca7 	.word	0x0800aca7
 800abfc:	0800aca7 	.word	0x0800aca7
 800ac00:	0800aca7 	.word	0x0800aca7
 800ac04:	0800ac47 	.word	0x0800ac47
 800ac08:	0800ac51 	.word	0x0800ac51
 800ac0c:	0800aca7 	.word	0x0800aca7
 800ac10:	0800ac5b 	.word	0x0800ac5b
 800ac14:	0800aca7 	.word	0x0800aca7
 800ac18:	0800ac65 	.word	0x0800ac65
 800ac1c:	0800aca7 	.word	0x0800aca7
 800ac20:	0800ac6f 	.word	0x0800ac6f
 800ac24:	0800aca7 	.word	0x0800aca7
 800ac28:	0800ac79 	.word	0x0800ac79
 800ac2c:	0800aca7 	.word	0x0800aca7
 800ac30:	0800ac83 	.word	0x0800ac83
 800ac34:	0800aca7 	.word	0x0800aca7
 800ac38:	0800ac8d 	.word	0x0800ac8d
			{
				case _AT_SENT:
					b->estado=_IDLE;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800ac44:	e02f      	b.n	800aca6 <LoRa_decode+0x12e>
				case _MODE_SENT:
					b->estado=_MODE_OK;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2206      	movs	r2, #6
 800ac4a:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800ac4e:	e02a      	b.n	800aca6 <LoRa_decode+0x12e>
				case _PARAMETER_SENT:
					b->estado=_PARAMETER_OK;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2209      	movs	r2, #9
 800ac54:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800ac58:	e025      	b.n	800aca6 <LoRa_decode+0x12e>
				case _BAND_SENT:
					b->estado=_BAND_OK;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	220b      	movs	r2, #11
 800ac5e:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800ac62:	e020      	b.n	800aca6 <LoRa_decode+0x12e>
				case _ADDR_SENT:
					b->estado=_ADDR_OK;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	220d      	movs	r2, #13
 800ac68:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800ac6c:	e01b      	b.n	800aca6 <LoRa_decode+0x12e>
				case _NETWORK_SENT:
					b->estado=_NETWORK_OK;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	220f      	movs	r2, #15
 800ac72:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800ac76:	e016      	b.n	800aca6 <LoRa_decode+0x12e>
				case _CPIN_SENT:
					b->estado=_CPIN_OK;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2211      	movs	r2, #17
 800ac7c:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800ac80:	e011      	b.n	800aca6 <LoRa_decode+0x12e>
				case _CRFOP_SENT:
					b->estado=_CRFOP_OK;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2213      	movs	r2, #19
 800ac86:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800ac8a:	e00c      	b.n	800aca6 <LoRa_decode+0x12e>
				case _SENT:
					{
						b->estado=_SENT_OK;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2215      	movs	r2, #21
 800ac90:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
						b->rxbuff[0]='\0';
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
						ITM0_Write("\r\nLora _SENT_OK\r\n",strlen("\r\nLora _SENT_OK\r\n"));
 800ac9c:	2111      	movs	r1, #17
 800ac9e:	48a8      	ldr	r0, [pc, #672]	; (800af40 <LoRa_decode+0x3c8>)
 800aca0:	f7f6 fa9a 	bl	80011d8 <ITM0_Write>
					}
					break;
 800aca4:	bf00      	nop

			}

			ITM0_Write("\r\nLora _OK\r\n",strlen("\r\nLora _OK\r\n"));
 800aca6:	210c      	movs	r1, #12
 800aca8:	48a6      	ldr	r0, [pc, #664]	; (800af44 <LoRa_decode+0x3cc>)
 800acaa:	f7f6 fa95 	bl	80011d8 <ITM0_Write>
						//Clean rxbuff_hld
		}
			break;
 800acae:	e17f      	b.n	800afb0 <LoRa_decode+0x438>
		case _RCV:
		{
			ITM0_Write("\r\nLora _RCV\r\n",strlen("\r\nLora _RCV\r\n"));
 800acb0:	210d      	movs	r1, #13
 800acb2:	48a5      	ldr	r0, [pc, #660]	; (800af48 <LoRa_decode+0x3d0>)
 800acb4:	f7f6 fa90 	bl	80011d8 <ITM0_Write>
				b->estado=_DATO_RECIBIDO;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	221a      	movs	r2, #26
 800acbc:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
				b->_data_available=1;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
					int i=0;
 800acc8:	2300      	movs	r3, #0
 800acca:	617b      	str	r3, [r7, #20]
					int j=0;
 800accc:	2300      	movs	r3, #0
 800acce:	613b      	str	r3, [r7, #16]
					int lngt=0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	60fb      	str	r3, [r7, #12]
					while (b->rxbuff[i] != '=')
 800acd4:	e002      	b.n	800acdc <LoRa_decode+0x164>
					{ i++;}
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	3301      	adds	r3, #1
 800acda:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i] != '=')
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	4413      	add	r3, r2
 800ace2:	3356      	adds	r3, #86	; 0x56
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	2b3d      	cmp	r3, #61	; 0x3d
 800ace8:	d1f5      	bne.n	800acd6 <LoRa_decode+0x15e>
					i++;
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	3301      	adds	r3, #1
 800acee:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800acf0:	e017      	b.n	800ad22 <LoRa_decode+0x1aa>
					{
						b->rxaddress[j]=b->rxbuff[i];			//Save the address
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	4413      	add	r3, r2
 800acf8:	3356      	adds	r3, #86	; 0x56
 800acfa:	7819      	ldrb	r1, [r3, #0]
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	4413      	add	r3, r2
 800ad02:	3306      	adds	r3, #6
 800ad04:	460a      	mov	r2, r1
 800ad06:	701a      	strb	r2, [r3, #0]
						i++;
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	617b      	str	r3, [r7, #20]
						j++;
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	3301      	adds	r3, #1
 800ad12:	613b      	str	r3, [r7, #16]
						if (j > 6)
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	2b06      	cmp	r3, #6
 800ad18:	dd03      	ble.n	800ad22 <LoRa_decode+0x1aa>
						{
							Lora_rx_del(b);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 fbca 	bl	800b4b4 <Lora_rx_del>
							break;
 800ad20:	e006      	b.n	800ad30 <LoRa_decode+0x1b8>
					while (b->rxbuff[i]!= ',')
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	4413      	add	r3, r2
 800ad28:	3356      	adds	r3, #86	; 0x56
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	2b2c      	cmp	r3, #44	; 0x2c
 800ad2e:	d1e0      	bne.n	800acf2 <LoRa_decode+0x17a>
						}
					}
					b->rxaddress[j]='\0';
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	4413      	add	r3, r2
 800ad36:	3306      	adds	r3, #6
 800ad38:	2200      	movs	r2, #0
 800ad3a:	701a      	strb	r2, [r3, #0]
					j=0;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	613b      	str	r3, [r7, #16]
					i++;
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	3301      	adds	r3, #1
 800ad44:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800ad46:	e017      	b.n	800ad78 <LoRa_decode+0x200>
					{
						b->rx_items[j]=b->rxbuff[i];			//Save the qty of data
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	3356      	adds	r3, #86	; 0x56
 800ad50:	7819      	ldrb	r1, [r3, #0]
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	4413      	add	r3, r2
 800ad58:	330c      	adds	r3, #12
 800ad5a:	460a      	mov	r2, r1
 800ad5c:	701a      	strb	r2, [r3, #0]
						i++;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	3301      	adds	r3, #1
 800ad62:	617b      	str	r3, [r7, #20]
						j++;
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	3301      	adds	r3, #1
 800ad68:	613b      	str	r3, [r7, #16]
						if (j > 4)
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	2b04      	cmp	r3, #4
 800ad6e:	dd03      	ble.n	800ad78 <LoRa_decode+0x200>
						{
							Lora_rx_del(b);
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 fb9f 	bl	800b4b4 <Lora_rx_del>
							break;
 800ad76:	e006      	b.n	800ad86 <LoRa_decode+0x20e>
					while (b->rxbuff[i]!= ',')
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	3356      	adds	r3, #86	; 0x56
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	2b2c      	cmp	r3, #44	; 0x2c
 800ad84:	d1e0      	bne.n	800ad48 <LoRa_decode+0x1d0>
						}
					}
					b->rx_items[j]='\0';
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	330c      	adds	r3, #12
 800ad8e:	2200      	movs	r2, #0
 800ad90:	701a      	strb	r2, [r3, #0]
					j=0;
 800ad92:	2300      	movs	r3, #0
 800ad94:	613b      	str	r3, [r7, #16]
					i++;
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	3301      	adds	r3, #1
 800ad9a:	617b      	str	r3, [r7, #20]
					lngt=atoi(b->rx_items,10);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	330c      	adds	r3, #12
 800ada0:	210a      	movs	r1, #10
 800ada2:	4618      	mov	r0, r3
 800ada4:	f001 f88f 	bl	800bec6 <atoi>
 800ada8:	60f8      	str	r0, [r7, #12]
					//lngt=lngt+i;
					//while(lngt>i)   //Ahota busco leer lo datos recibid y luego verificar si ok
					while (b->rxbuff[i]!= ',')
 800adaa:	e019      	b.n	800ade0 <LoRa_decode+0x268>
					{
						b->dataRCV[j]=b->rxbuff[i];			//Save the data
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	4413      	add	r3, r2
 800adb2:	3356      	adds	r3, #86	; 0x56
 800adb4:	7819      	ldrb	r1, [r3, #0]
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	4413      	add	r3, r2
 800adbc:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800adc0:	460a      	mov	r2, r1
 800adc2:	701a      	strb	r2, [r3, #0]
						j++;
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	3301      	adds	r3, #1
 800adc8:	613b      	str	r3, [r7, #16]
						i++;
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	3301      	adds	r3, #1
 800adce:	617b      	str	r3, [r7, #20]
						if (j > lngt)
 800add0:	693a      	ldr	r2, [r7, #16]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	429a      	cmp	r2, r3
 800add6:	dd03      	ble.n	800ade0 <LoRa_decode+0x268>
						{
							Lora_rx_del(b);
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 fb6b 	bl	800b4b4 <Lora_rx_del>
							break;
 800adde:	e006      	b.n	800adee <LoRa_decode+0x276>
					while (b->rxbuff[i]!= ',')
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	4413      	add	r3, r2
 800ade6:	3356      	adds	r3, #86	; 0x56
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	2b2c      	cmp	r3, #44	; 0x2c
 800adec:	d1de      	bne.n	800adac <LoRa_decode+0x234>
						}
					}
					b->_n_dataRCV=j;							//Save amount of data received
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
					j=0;
 800adf6:	2300      	movs	r3, #0
 800adf8:	613b      	str	r3, [r7, #16]
					i++;
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	3301      	adds	r3, #1
 800adfe:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800ae00:	e017      	b.n	800ae32 <LoRa_decode+0x2ba>
					{
						b->rx_convert[j]=b->rxbuff[i];			//save RSSI
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	4413      	add	r3, r2
 800ae08:	3356      	adds	r3, #86	; 0x56
 800ae0a:	7819      	ldrb	r1, [r3, #0]
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	4413      	add	r3, r2
 800ae12:	3310      	adds	r3, #16
 800ae14:	460a      	mov	r2, r1
 800ae16:	701a      	strb	r2, [r3, #0]
						i++;
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	617b      	str	r3, [r7, #20]
						j++;
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	3301      	adds	r3, #1
 800ae22:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	2b05      	cmp	r3, #5
 800ae28:	dd03      	ble.n	800ae32 <LoRa_decode+0x2ba>
						{
							Lora_rx_del(b);
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 fb42 	bl	800b4b4 <Lora_rx_del>
							break;
 800ae30:	e006      	b.n	800ae40 <LoRa_decode+0x2c8>
					while (b->rxbuff[i]!= ',')
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	4413      	add	r3, r2
 800ae38:	3356      	adds	r3, #86	; 0x56
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	2b2c      	cmp	r3, #44	; 0x2c
 800ae3e:	d1e0      	bne.n	800ae02 <LoRa_decode+0x28a>
						}
					}
					b->rxRSSI=atoi(b->rx_convert,10);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	3310      	adds	r3, #16
 800ae44:	210a      	movs	r1, #10
 800ae46:	4618      	mov	r0, r3
 800ae48:	f001 f83d 	bl	800bec6 <atoi>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
					b->rx_convert[j]='\0';
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	4413      	add	r3, r2
 800ae5a:	3310      	adds	r3, #16
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	701a      	strb	r2, [r3, #0]
					j=0;
 800ae60:	2300      	movs	r3, #0
 800ae62:	613b      	str	r3, [r7, #16]
					i++;
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	3301      	adds	r3, #1
 800ae68:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= '\r')
 800ae6a:	e017      	b.n	800ae9c <LoRa_decode+0x324>
					{
						b->rx_convert[j]=b->rxbuff[i];			// Save SNR
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	4413      	add	r3, r2
 800ae72:	3356      	adds	r3, #86	; 0x56
 800ae74:	7819      	ldrb	r1, [r3, #0]
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	4413      	add	r3, r2
 800ae7c:	3310      	adds	r3, #16
 800ae7e:	460a      	mov	r2, r1
 800ae80:	701a      	strb	r2, [r3, #0]
						i++;
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	3301      	adds	r3, #1
 800ae86:	617b      	str	r3, [r7, #20]
						j++;
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	2b05      	cmp	r3, #5
 800ae92:	dd03      	ble.n	800ae9c <LoRa_decode+0x324>
						{
							Lora_rx_del(b);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 fb0d 	bl	800b4b4 <Lora_rx_del>
							break;
 800ae9a:	e006      	b.n	800aeaa <LoRa_decode+0x332>
					while (b->rxbuff[i]!= '\r')
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	4413      	add	r3, r2
 800aea2:	3356      	adds	r3, #86	; 0x56
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	2b0d      	cmp	r3, #13
 800aea8:	d1e0      	bne.n	800ae6c <LoRa_decode+0x2f4>
						}
					}

					b->rx_convert[j]='\0';
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	4413      	add	r3, r2
 800aeb0:	3310      	adds	r3, #16
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	701a      	strb	r2, [r3, #0]
					b->rxSNR=atoi(b->rx_convert,10);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	3310      	adds	r3, #16
 800aeba:	210a      	movs	r1, #10
 800aebc:	4618      	mov	r0, r3
 800aebe:	f001 f802 	bl	800bec6 <atoi>
 800aec2:	4602      	mov	r2, r0
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
					b->rx_convert[0]='\0';
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2200      	movs	r2, #0
 800aece:	741a      	strb	r2, [r3, #16]


			    //Timer de enviar data cuando antes se recibe
				//LoRa_set_sndTIMER(b, 3000);
				b->rxbuff[0]='\0';
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		}
			break;
 800aed8:	e06a      	b.n	800afb0 <LoRa_decode+0x438>
		case _ERR:
			ITM0_Write("\r\nLora _ERR\r\n",strlen("\r\nLora _ERR\r\n"));
 800aeda:	210d      	movs	r1, #13
 800aedc:	481b      	ldr	r0, [pc, #108]	; (800af4c <LoRa_decode+0x3d4>)
 800aede:	f7f6 f97b 	bl	80011d8 <ITM0_Write>
			break;
 800aee2:	e065      	b.n	800afb0 <LoRa_decode+0x438>
		case _RESET:
			ITM0_Write("\r\nLora _RESET\r\n",strlen("\r\nLora _RESET\r\n"));
 800aee4:	210f      	movs	r1, #15
 800aee6:	481a      	ldr	r0, [pc, #104]	; (800af50 <LoRa_decode+0x3d8>)
 800aee8:	f7f6 f976 	bl	80011d8 <ITM0_Write>
			break;
 800aeec:	e060      	b.n	800afb0 <LoRa_decode+0x438>
		case _READY:
			ITM0_Write("\r\nLora _READY\r\n",strlen("\r\nLora _READY\r\n"));
 800aeee:	210f      	movs	r1, #15
 800aef0:	4818      	ldr	r0, [pc, #96]	; (800af54 <LoRa_decode+0x3dc>)
 800aef2:	f7f6 f971 	bl	80011d8 <ITM0_Write>
			break;
 800aef6:	e05b      	b.n	800afb0 <LoRa_decode+0x438>
		case _MODE:
			ITM0_Write("\r\nLora _MODE\r\n",strlen("\r\nLora _MODE\r\n"));
 800aef8:	210e      	movs	r1, #14
 800aefa:	4817      	ldr	r0, [pc, #92]	; (800af58 <LoRa_decode+0x3e0>)
 800aefc:	f7f6 f96c 	bl	80011d8 <ITM0_Write>
			break;
 800af00:	e056      	b.n	800afb0 <LoRa_decode+0x438>
		case _IPR:
			ITM0_Write("\r\nLora _IPR\r\n",strlen("\r\nLora _IPR\r\n"));
 800af02:	210d      	movs	r1, #13
 800af04:	4815      	ldr	r0, [pc, #84]	; (800af5c <LoRa_decode+0x3e4>)
 800af06:	f7f6 f967 	bl	80011d8 <ITM0_Write>
			break;
 800af0a:	e051      	b.n	800afb0 <LoRa_decode+0x438>
		case _PARAMETER:
			ITM0_Write("\r\nLora _PARAMETER\r\n",strlen("\r\nLora _PARAMETER\r\n"));
 800af0c:	2113      	movs	r1, #19
 800af0e:	4814      	ldr	r0, [pc, #80]	; (800af60 <LoRa_decode+0x3e8>)
 800af10:	f7f6 f962 	bl	80011d8 <ITM0_Write>
			break;
 800af14:	e04c      	b.n	800afb0 <LoRa_decode+0x438>
		case _BAND:
			ITM0_Write("\r\nLora _BAND\r\n",strlen("\r\nLora _BAND\r\n"));
 800af16:	210e      	movs	r1, #14
 800af18:	4812      	ldr	r0, [pc, #72]	; (800af64 <LoRa_decode+0x3ec>)
 800af1a:	f7f6 f95d 	bl	80011d8 <ITM0_Write>
			break;
 800af1e:	e047      	b.n	800afb0 <LoRa_decode+0x438>
		case _ADDRESS:
			ITM0_Write("\r\nLora _ADDRESS\r\n",strlen("\r\nLora _ADDRESS\r\n"));
 800af20:	2111      	movs	r1, #17
 800af22:	4811      	ldr	r0, [pc, #68]	; (800af68 <LoRa_decode+0x3f0>)
 800af24:	f7f6 f958 	bl	80011d8 <ITM0_Write>
			break;
 800af28:	e042      	b.n	800afb0 <LoRa_decode+0x438>
		case _NETWORK:
			ITM0_Write("\r\nLora _NETWORK\r\n",strlen("\r\nLora _NETWORK\r\n"));
 800af2a:	2111      	movs	r1, #17
 800af2c:	480f      	ldr	r0, [pc, #60]	; (800af6c <LoRa_decode+0x3f4>)
 800af2e:	f7f6 f953 	bl	80011d8 <ITM0_Write>
			break;
 800af32:	e03d      	b.n	800afb0 <LoRa_decode+0x438>
		case _CPIN:
			ITM0_Write("\r\nLora _CPIN\r\n",strlen("\r\nLora _CPIN\r\n"));
 800af34:	210e      	movs	r1, #14
 800af36:	480e      	ldr	r0, [pc, #56]	; (800af70 <LoRa_decode+0x3f8>)
 800af38:	f7f6 f94e 	bl	80011d8 <ITM0_Write>
			break;
 800af3c:	e038      	b.n	800afb0 <LoRa_decode+0x438>
 800af3e:	bf00      	nop
 800af40:	0800d7f0 	.word	0x0800d7f0
 800af44:	0800d804 	.word	0x0800d804
 800af48:	0800d814 	.word	0x0800d814
 800af4c:	0800d824 	.word	0x0800d824
 800af50:	0800d834 	.word	0x0800d834
 800af54:	0800d844 	.word	0x0800d844
 800af58:	0800d854 	.word	0x0800d854
 800af5c:	0800d864 	.word	0x0800d864
 800af60:	0800d874 	.word	0x0800d874
 800af64:	0800d888 	.word	0x0800d888
 800af68:	0800d898 	.word	0x0800d898
 800af6c:	0800d8ac 	.word	0x0800d8ac
 800af70:	0800d8c0 	.word	0x0800d8c0
		case _CRFOP:
			ITM0_Write("\r\nLora _CRFOP\r\n",strlen("\r\nLora _CRFOP\r\n"));
 800af74:	210f      	movs	r1, #15
 800af76:	4810      	ldr	r0, [pc, #64]	; (800afb8 <LoRa_decode+0x440>)
 800af78:	f7f6 f92e 	bl	80011d8 <ITM0_Write>
			break;
 800af7c:	e018      	b.n	800afb0 <LoRa_decode+0x438>
		case _SEND:
			ITM0_Write("\r\nLora _SEND\r\n",strlen("\r\nLora _SEND\r\n"));
 800af7e:	210e      	movs	r1, #14
 800af80:	480e      	ldr	r0, [pc, #56]	; (800afbc <LoRa_decode+0x444>)
 800af82:	f7f6 f929 	bl	80011d8 <ITM0_Write>
			break;
 800af86:	e013      	b.n	800afb0 <LoRa_decode+0x438>
		case _UID:
			ITM0_Write("\r\nLora _UID\r\n",strlen("\r\nLora _UID\r\n"));
 800af88:	210d      	movs	r1, #13
 800af8a:	480d      	ldr	r0, [pc, #52]	; (800afc0 <LoRa_decode+0x448>)
 800af8c:	f7f6 f924 	bl	80011d8 <ITM0_Write>
			break;
 800af90:	e00e      	b.n	800afb0 <LoRa_decode+0x438>
		case _VER:
			ITM0_Write("\r\nLora _VER\r\n",strlen("\r\nLora _VER\r\n"));
 800af92:	210d      	movs	r1, #13
 800af94:	480b      	ldr	r0, [pc, #44]	; (800afc4 <LoRa_decode+0x44c>)
 800af96:	f7f6 f91f 	bl	80011d8 <ITM0_Write>
			break;
 800af9a:	e009      	b.n	800afb0 <LoRa_decode+0x438>
		case _ERR_RCV_OF:
			ITM0_Write("\r\nLora _ERR_RCV_OF\r\n",strlen("\r\nLora _ERR_RCV_OF\r\n"));
 800af9c:	2114      	movs	r1, #20
 800af9e:	480a      	ldr	r0, [pc, #40]	; (800afc8 <LoRa_decode+0x450>)
 800afa0:	f7f6 f91a 	bl	80011d8 <ITM0_Write>
			break;
 800afa4:	e004      	b.n	800afb0 <LoRa_decode+0x438>
		default:
			ITM0_Write("\r\nLora default\r\n",strlen("\r\nLora default\r\n"));
 800afa6:	2110      	movs	r1, #16
 800afa8:	4808      	ldr	r0, [pc, #32]	; (800afcc <LoRa_decode+0x454>)
 800afaa:	f7f6 f915 	bl	80011d8 <ITM0_Write>
			break;
 800afae:	bf00      	nop
	}
 }
 800afb0:	bf00      	nop
 800afb2:	3718      	adds	r7, #24
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	0800d8d0 	.word	0x0800d8d0
 800afbc:	0800d8e0 	.word	0x0800d8e0
 800afc0:	0800d8f0 	.word	0x0800d8f0
 800afc4:	0800d900 	.word	0x0800d900
 800afc8:	0800d910 	.word	0x0800d910
 800afcc:	0800d928 	.word	0x0800d928

0800afd0 <Lora_idSTR>:
int Lora_idSTR(struct LoRa *a)
{		int f,g,h,i;
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b090      	sub	sp, #64	; 0x40
 800afd4:	af06      	add	r7, sp, #24
 800afd6:	6078      	str	r0, [r7, #4]
		if(a->rxitems > 270) return _ERR_RCV_OF;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 800afde:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800afe2:	dd01      	ble.n	800afe8 <Lora_idSTR+0x18>
 800afe4:	2310      	movs	r3, #16
 800afe6:	e257      	b.n	800b498 <Lora_idSTR+0x4c8>
		char data[10];
		int ndata=0;
 800afe8:	2300      	movs	r3, #0
 800afea:	60fb      	str	r3, [r7, #12]
		i=strlen("+OK=");
 800afec:	2304      	movs	r3, #4
 800afee:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+OK=",&i,data,&ndata,&g,&h,512, 0)==1) return _OK ;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800affc:	f107 021c 	add.w	r2, r7, #28
 800b000:	2300      	movs	r3, #0
 800b002:	9305      	str	r3, [sp, #20]
 800b004:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b008:	9304      	str	r3, [sp, #16]
 800b00a:	f107 0320 	add.w	r3, r7, #32
 800b00e:	9303      	str	r3, [sp, #12]
 800b010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b014:	9302      	str	r3, [sp, #8]
 800b016:	f107 030c 	add.w	r3, r7, #12
 800b01a:	9301      	str	r3, [sp, #4]
 800b01c:	f107 0310 	add.w	r3, r7, #16
 800b020:	9300      	str	r3, [sp, #0]
 800b022:	4613      	mov	r3, r2
 800b024:	4ab7      	ldr	r2, [pc, #732]	; (800b304 <Lora_idSTR+0x334>)
 800b026:	f000 fb11 	bl	800b64c <FT_String_ND>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d101      	bne.n	800b034 <Lora_idSTR+0x64>
 800b030:	2300      	movs	r3, #0
 800b032:	e231      	b.n	800b498 <Lora_idSTR+0x4c8>
		i=strlen("+RCV=");
 800b034:	2305      	movs	r3, #5
 800b036:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RCV=",&i,data,&ndata,&g,&h,512, 0)==1) return _RCV ;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b044:	f107 021c 	add.w	r2, r7, #28
 800b048:	2300      	movs	r3, #0
 800b04a:	9305      	str	r3, [sp, #20]
 800b04c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b050:	9304      	str	r3, [sp, #16]
 800b052:	f107 0320 	add.w	r3, r7, #32
 800b056:	9303      	str	r3, [sp, #12]
 800b058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b05c:	9302      	str	r3, [sp, #8]
 800b05e:	f107 030c 	add.w	r3, r7, #12
 800b062:	9301      	str	r3, [sp, #4]
 800b064:	f107 0310 	add.w	r3, r7, #16
 800b068:	9300      	str	r3, [sp, #0]
 800b06a:	4613      	mov	r3, r2
 800b06c:	4aa6      	ldr	r2, [pc, #664]	; (800b308 <Lora_idSTR+0x338>)
 800b06e:	f000 faed 	bl	800b64c <FT_String_ND>
 800b072:	4603      	mov	r3, r0
 800b074:	2b01      	cmp	r3, #1
 800b076:	d101      	bne.n	800b07c <Lora_idSTR+0xac>
 800b078:	2301      	movs	r3, #1
 800b07a:	e20d      	b.n	800b498 <Lora_idSTR+0x4c8>
		i=strlen("+ERR=");
 800b07c:	2305      	movs	r3, #5
 800b07e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ERR=",&i,data,&ndata,&g,&h,512, 0)==1) return _ERR ;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b08c:	f107 021c 	add.w	r2, r7, #28
 800b090:	2300      	movs	r3, #0
 800b092:	9305      	str	r3, [sp, #20]
 800b094:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b098:	9304      	str	r3, [sp, #16]
 800b09a:	f107 0320 	add.w	r3, r7, #32
 800b09e:	9303      	str	r3, [sp, #12]
 800b0a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0a4:	9302      	str	r3, [sp, #8]
 800b0a6:	f107 030c 	add.w	r3, r7, #12
 800b0aa:	9301      	str	r3, [sp, #4]
 800b0ac:	f107 0310 	add.w	r3, r7, #16
 800b0b0:	9300      	str	r3, [sp, #0]
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	4a95      	ldr	r2, [pc, #596]	; (800b30c <Lora_idSTR+0x33c>)
 800b0b6:	f000 fac9 	bl	800b64c <FT_String_ND>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d101      	bne.n	800b0c4 <Lora_idSTR+0xf4>
 800b0c0:	230f      	movs	r3, #15
 800b0c2:	e1e9      	b.n	800b498 <Lora_idSTR+0x4c8>
		i=strlen("+RESET");
 800b0c4:	2306      	movs	r3, #6
 800b0c6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RESET",&i,data,&ndata,&g,&h,512, 0)==1)return _RESET;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b0d4:	f107 021c 	add.w	r2, r7, #28
 800b0d8:	2300      	movs	r3, #0
 800b0da:	9305      	str	r3, [sp, #20]
 800b0dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0e0:	9304      	str	r3, [sp, #16]
 800b0e2:	f107 0320 	add.w	r3, r7, #32
 800b0e6:	9303      	str	r3, [sp, #12]
 800b0e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0ec:	9302      	str	r3, [sp, #8]
 800b0ee:	f107 030c 	add.w	r3, r7, #12
 800b0f2:	9301      	str	r3, [sp, #4]
 800b0f4:	f107 0310 	add.w	r3, r7, #16
 800b0f8:	9300      	str	r3, [sp, #0]
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	4a84      	ldr	r2, [pc, #528]	; (800b310 <Lora_idSTR+0x340>)
 800b0fe:	f000 faa5 	bl	800b64c <FT_String_ND>
 800b102:	4603      	mov	r3, r0
 800b104:	2b01      	cmp	r3, #1
 800b106:	d101      	bne.n	800b10c <Lora_idSTR+0x13c>
 800b108:	2302      	movs	r3, #2
 800b10a:	e1c5      	b.n	800b498 <Lora_idSTR+0x4c8>
		i=strlen("+READY");
 800b10c:	2306      	movs	r3, #6
 800b10e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+READY",&i,data,&ndata,&g,&h,512, 0)==1) return _READY ;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b11c:	f107 021c 	add.w	r2, r7, #28
 800b120:	2300      	movs	r3, #0
 800b122:	9305      	str	r3, [sp, #20]
 800b124:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b128:	9304      	str	r3, [sp, #16]
 800b12a:	f107 0320 	add.w	r3, r7, #32
 800b12e:	9303      	str	r3, [sp, #12]
 800b130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b134:	9302      	str	r3, [sp, #8]
 800b136:	f107 030c 	add.w	r3, r7, #12
 800b13a:	9301      	str	r3, [sp, #4]
 800b13c:	f107 0310 	add.w	r3, r7, #16
 800b140:	9300      	str	r3, [sp, #0]
 800b142:	4613      	mov	r3, r2
 800b144:	4a73      	ldr	r2, [pc, #460]	; (800b314 <Lora_idSTR+0x344>)
 800b146:	f000 fa81 	bl	800b64c <FT_String_ND>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d101      	bne.n	800b154 <Lora_idSTR+0x184>
 800b150:	2303      	movs	r3, #3
 800b152:	e1a1      	b.n	800b498 <Lora_idSTR+0x4c8>
		i=strlen("+MODE=");
 800b154:	2306      	movs	r3, #6
 800b156:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+MODE=",&i,data,&ndata,&g,&h,512, 0)==1) return _MODE ;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b164:	f107 021c 	add.w	r2, r7, #28
 800b168:	2300      	movs	r3, #0
 800b16a:	9305      	str	r3, [sp, #20]
 800b16c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b170:	9304      	str	r3, [sp, #16]
 800b172:	f107 0320 	add.w	r3, r7, #32
 800b176:	9303      	str	r3, [sp, #12]
 800b178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b17c:	9302      	str	r3, [sp, #8]
 800b17e:	f107 030c 	add.w	r3, r7, #12
 800b182:	9301      	str	r3, [sp, #4]
 800b184:	f107 0310 	add.w	r3, r7, #16
 800b188:	9300      	str	r3, [sp, #0]
 800b18a:	4613      	mov	r3, r2
 800b18c:	4a62      	ldr	r2, [pc, #392]	; (800b318 <Lora_idSTR+0x348>)
 800b18e:	f000 fa5d 	bl	800b64c <FT_String_ND>
 800b192:	4603      	mov	r3, r0
 800b194:	2b01      	cmp	r3, #1
 800b196:	d101      	bne.n	800b19c <Lora_idSTR+0x1cc>
 800b198:	2304      	movs	r3, #4
 800b19a:	e17d      	b.n	800b498 <Lora_idSTR+0x4c8>
		i=strlen("+IPR=");
 800b19c:	2305      	movs	r3, #5
 800b19e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+IPR=",&i,data,&ndata,&g,&h,512, 0)==1) return _IPR ;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b1ac:	f107 021c 	add.w	r2, r7, #28
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	9305      	str	r3, [sp, #20]
 800b1b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1b8:	9304      	str	r3, [sp, #16]
 800b1ba:	f107 0320 	add.w	r3, r7, #32
 800b1be:	9303      	str	r3, [sp, #12]
 800b1c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1c4:	9302      	str	r3, [sp, #8]
 800b1c6:	f107 030c 	add.w	r3, r7, #12
 800b1ca:	9301      	str	r3, [sp, #4]
 800b1cc:	f107 0310 	add.w	r3, r7, #16
 800b1d0:	9300      	str	r3, [sp, #0]
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	4a51      	ldr	r2, [pc, #324]	; (800b31c <Lora_idSTR+0x34c>)
 800b1d6:	f000 fa39 	bl	800b64c <FT_String_ND>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d101      	bne.n	800b1e4 <Lora_idSTR+0x214>
 800b1e0:	2305      	movs	r3, #5
 800b1e2:	e159      	b.n	800b498 <Lora_idSTR+0x4c8>
		i=strlen("+PARAMETER=");
 800b1e4:	230b      	movs	r3, #11
 800b1e6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+PARAMETER=",&i,data,&ndata,&g,&h,512, 0)==1) return _PARAMETER ;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b1f4:	f107 021c 	add.w	r2, r7, #28
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	9305      	str	r3, [sp, #20]
 800b1fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b200:	9304      	str	r3, [sp, #16]
 800b202:	f107 0320 	add.w	r3, r7, #32
 800b206:	9303      	str	r3, [sp, #12]
 800b208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b20c:	9302      	str	r3, [sp, #8]
 800b20e:	f107 030c 	add.w	r3, r7, #12
 800b212:	9301      	str	r3, [sp, #4]
 800b214:	f107 0310 	add.w	r3, r7, #16
 800b218:	9300      	str	r3, [sp, #0]
 800b21a:	4613      	mov	r3, r2
 800b21c:	4a40      	ldr	r2, [pc, #256]	; (800b320 <Lora_idSTR+0x350>)
 800b21e:	f000 fa15 	bl	800b64c <FT_String_ND>
 800b222:	4603      	mov	r3, r0
 800b224:	2b01      	cmp	r3, #1
 800b226:	d101      	bne.n	800b22c <Lora_idSTR+0x25c>
 800b228:	2306      	movs	r3, #6
 800b22a:	e135      	b.n	800b498 <Lora_idSTR+0x4c8>
		i=strlen("+BAND=");
 800b22c:	2306      	movs	r3, #6
 800b22e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+BAND=",&i,data,&ndata,&g,&h,512, 0)==1) return _BAND ;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b23c:	f107 021c 	add.w	r2, r7, #28
 800b240:	2300      	movs	r3, #0
 800b242:	9305      	str	r3, [sp, #20]
 800b244:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b248:	9304      	str	r3, [sp, #16]
 800b24a:	f107 0320 	add.w	r3, r7, #32
 800b24e:	9303      	str	r3, [sp, #12]
 800b250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b254:	9302      	str	r3, [sp, #8]
 800b256:	f107 030c 	add.w	r3, r7, #12
 800b25a:	9301      	str	r3, [sp, #4]
 800b25c:	f107 0310 	add.w	r3, r7, #16
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	4613      	mov	r3, r2
 800b264:	4a2f      	ldr	r2, [pc, #188]	; (800b324 <Lora_idSTR+0x354>)
 800b266:	f000 f9f1 	bl	800b64c <FT_String_ND>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d101      	bne.n	800b274 <Lora_idSTR+0x2a4>
 800b270:	2307      	movs	r3, #7
 800b272:	e111      	b.n	800b498 <Lora_idSTR+0x4c8>
		i=strlen("+ADDRESS=");
 800b274:	2309      	movs	r3, #9
 800b276:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ADDRESS=",&i,data,&ndata,&g,&h,512, 0)==1) return _ADDRESS ;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b284:	f107 021c 	add.w	r2, r7, #28
 800b288:	2300      	movs	r3, #0
 800b28a:	9305      	str	r3, [sp, #20]
 800b28c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b290:	9304      	str	r3, [sp, #16]
 800b292:	f107 0320 	add.w	r3, r7, #32
 800b296:	9303      	str	r3, [sp, #12]
 800b298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b29c:	9302      	str	r3, [sp, #8]
 800b29e:	f107 030c 	add.w	r3, r7, #12
 800b2a2:	9301      	str	r3, [sp, #4]
 800b2a4:	f107 0310 	add.w	r3, r7, #16
 800b2a8:	9300      	str	r3, [sp, #0]
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	4a1e      	ldr	r2, [pc, #120]	; (800b328 <Lora_idSTR+0x358>)
 800b2ae:	f000 f9cd 	bl	800b64c <FT_String_ND>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d101      	bne.n	800b2bc <Lora_idSTR+0x2ec>
 800b2b8:	2308      	movs	r3, #8
 800b2ba:	e0ed      	b.n	800b498 <Lora_idSTR+0x4c8>
		i=strlen("+NETWORK=");
 800b2bc:	2309      	movs	r3, #9
 800b2be:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+NETWORK=",&i,data,&ndata,&g,&h,512, 0)==1) return _NETWORK ;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b2cc:	f107 021c 	add.w	r2, r7, #28
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	9305      	str	r3, [sp, #20]
 800b2d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2d8:	9304      	str	r3, [sp, #16]
 800b2da:	f107 0320 	add.w	r3, r7, #32
 800b2de:	9303      	str	r3, [sp, #12]
 800b2e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2e4:	9302      	str	r3, [sp, #8]
 800b2e6:	f107 030c 	add.w	r3, r7, #12
 800b2ea:	9301      	str	r3, [sp, #4]
 800b2ec:	f107 0310 	add.w	r3, r7, #16
 800b2f0:	9300      	str	r3, [sp, #0]
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	4a0d      	ldr	r2, [pc, #52]	; (800b32c <Lora_idSTR+0x35c>)
 800b2f6:	f000 f9a9 	bl	800b64c <FT_String_ND>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d117      	bne.n	800b330 <Lora_idSTR+0x360>
 800b300:	2309      	movs	r3, #9
 800b302:	e0c9      	b.n	800b498 <Lora_idSTR+0x4c8>
 800b304:	0800d93c 	.word	0x0800d93c
 800b308:	0800d944 	.word	0x0800d944
 800b30c:	0800d94c 	.word	0x0800d94c
 800b310:	0800d954 	.word	0x0800d954
 800b314:	0800d95c 	.word	0x0800d95c
 800b318:	0800d964 	.word	0x0800d964
 800b31c:	0800d96c 	.word	0x0800d96c
 800b320:	0800d974 	.word	0x0800d974
 800b324:	0800d980 	.word	0x0800d980
 800b328:	0800d988 	.word	0x0800d988
 800b32c:	0800d994 	.word	0x0800d994
		i=strlen("+CPIN=");
 800b330:	2306      	movs	r3, #6
 800b332:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CPIN=",&i,data,&ndata,&g,&h,512, 0)==1) return _CPIN ;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b340:	f107 021c 	add.w	r2, r7, #28
 800b344:	2300      	movs	r3, #0
 800b346:	9305      	str	r3, [sp, #20]
 800b348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b34c:	9304      	str	r3, [sp, #16]
 800b34e:	f107 0320 	add.w	r3, r7, #32
 800b352:	9303      	str	r3, [sp, #12]
 800b354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b358:	9302      	str	r3, [sp, #8]
 800b35a:	f107 030c 	add.w	r3, r7, #12
 800b35e:	9301      	str	r3, [sp, #4]
 800b360:	f107 0310 	add.w	r3, r7, #16
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	4613      	mov	r3, r2
 800b368:	4a4d      	ldr	r2, [pc, #308]	; (800b4a0 <Lora_idSTR+0x4d0>)
 800b36a:	f000 f96f 	bl	800b64c <FT_String_ND>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b01      	cmp	r3, #1
 800b372:	d101      	bne.n	800b378 <Lora_idSTR+0x3a8>
 800b374:	230a      	movs	r3, #10
 800b376:	e08f      	b.n	800b498 <Lora_idSTR+0x4c8>
		i=strlen("+CRFOP=");
 800b378:	2307      	movs	r3, #7
 800b37a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CRFOP=",&i,data,&ndata,&g,&h,512, 0)==1) return _CRFOP ;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b388:	f107 021c 	add.w	r2, r7, #28
 800b38c:	2300      	movs	r3, #0
 800b38e:	9305      	str	r3, [sp, #20]
 800b390:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b394:	9304      	str	r3, [sp, #16]
 800b396:	f107 0320 	add.w	r3, r7, #32
 800b39a:	9303      	str	r3, [sp, #12]
 800b39c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3a0:	9302      	str	r3, [sp, #8]
 800b3a2:	f107 030c 	add.w	r3, r7, #12
 800b3a6:	9301      	str	r3, [sp, #4]
 800b3a8:	f107 0310 	add.w	r3, r7, #16
 800b3ac:	9300      	str	r3, [sp, #0]
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	4a3c      	ldr	r2, [pc, #240]	; (800b4a4 <Lora_idSTR+0x4d4>)
 800b3b2:	f000 f94b 	bl	800b64c <FT_String_ND>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d101      	bne.n	800b3c0 <Lora_idSTR+0x3f0>
 800b3bc:	230b      	movs	r3, #11
 800b3be:	e06b      	b.n	800b498 <Lora_idSTR+0x4c8>
		i=strlen("+SEND=");
 800b3c0:	2306      	movs	r3, #6
 800b3c2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+SEND=",&i,data,&ndata,&g,&h,512, 0)==1) return _SEND ;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b3d0:	f107 021c 	add.w	r2, r7, #28
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	9305      	str	r3, [sp, #20]
 800b3d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3dc:	9304      	str	r3, [sp, #16]
 800b3de:	f107 0320 	add.w	r3, r7, #32
 800b3e2:	9303      	str	r3, [sp, #12]
 800b3e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3e8:	9302      	str	r3, [sp, #8]
 800b3ea:	f107 030c 	add.w	r3, r7, #12
 800b3ee:	9301      	str	r3, [sp, #4]
 800b3f0:	f107 0310 	add.w	r3, r7, #16
 800b3f4:	9300      	str	r3, [sp, #0]
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	4a2b      	ldr	r2, [pc, #172]	; (800b4a8 <Lora_idSTR+0x4d8>)
 800b3fa:	f000 f927 	bl	800b64c <FT_String_ND>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b01      	cmp	r3, #1
 800b402:	d101      	bne.n	800b408 <Lora_idSTR+0x438>
 800b404:	230c      	movs	r3, #12
 800b406:	e047      	b.n	800b498 <Lora_idSTR+0x4c8>
		i=strlen("+UID=");
 800b408:	2305      	movs	r3, #5
 800b40a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+UID=",&i,data,&ndata,&g,&h,512, 0)==1) return _UID ;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b418:	f107 021c 	add.w	r2, r7, #28
 800b41c:	2300      	movs	r3, #0
 800b41e:	9305      	str	r3, [sp, #20]
 800b420:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b424:	9304      	str	r3, [sp, #16]
 800b426:	f107 0320 	add.w	r3, r7, #32
 800b42a:	9303      	str	r3, [sp, #12]
 800b42c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b430:	9302      	str	r3, [sp, #8]
 800b432:	f107 030c 	add.w	r3, r7, #12
 800b436:	9301      	str	r3, [sp, #4]
 800b438:	f107 0310 	add.w	r3, r7, #16
 800b43c:	9300      	str	r3, [sp, #0]
 800b43e:	4613      	mov	r3, r2
 800b440:	4a1a      	ldr	r2, [pc, #104]	; (800b4ac <Lora_idSTR+0x4dc>)
 800b442:	f000 f903 	bl	800b64c <FT_String_ND>
 800b446:	4603      	mov	r3, r0
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d101      	bne.n	800b450 <Lora_idSTR+0x480>
 800b44c:	230e      	movs	r3, #14
 800b44e:	e023      	b.n	800b498 <Lora_idSTR+0x4c8>
		i=strlen("+VER=");
 800b450:	2305      	movs	r3, #5
 800b452:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+VER=",&i,data,&ndata,&g,&h,512, 0)==1) return _VER ;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b460:	f107 021c 	add.w	r2, r7, #28
 800b464:	2300      	movs	r3, #0
 800b466:	9305      	str	r3, [sp, #20]
 800b468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b46c:	9304      	str	r3, [sp, #16]
 800b46e:	f107 0320 	add.w	r3, r7, #32
 800b472:	9303      	str	r3, [sp, #12]
 800b474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b478:	9302      	str	r3, [sp, #8]
 800b47a:	f107 030c 	add.w	r3, r7, #12
 800b47e:	9301      	str	r3, [sp, #4]
 800b480:	f107 0310 	add.w	r3, r7, #16
 800b484:	9300      	str	r3, [sp, #0]
 800b486:	4613      	mov	r3, r2
 800b488:	4a09      	ldr	r2, [pc, #36]	; (800b4b0 <Lora_idSTR+0x4e0>)
 800b48a:	f000 f8df 	bl	800b64c <FT_String_ND>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b01      	cmp	r3, #1
 800b492:	d101      	bne.n	800b498 <Lora_idSTR+0x4c8>
 800b494:	230d      	movs	r3, #13
 800b496:	e7ff      	b.n	800b498 <Lora_idSTR+0x4c8>
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3728      	adds	r7, #40	; 0x28
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	0800d9a0 	.word	0x0800d9a0
 800b4a4:	0800d9a8 	.word	0x0800d9a8
 800b4a8:	0800d9b0 	.word	0x0800d9b0
 800b4ac:	0800d9b8 	.word	0x0800d9b8
 800b4b0:	0800d9c0 	.word	0x0800d9c0

0800b4b4 <Lora_rx_del>:
void Lora_rx_del(struct LoRa *a)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
	a->rxbuff[0]='\0';
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	a->rx_items[0]='\0';
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	731a      	strb	r2, [r3, #12]
	//a->dataRCV[0]='\0';
	a->rxRSSI=0;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
	a->rxSNR=0;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
}
 800b4da:	bf00      	nop
 800b4dc:	370c      	adds	r7, #12
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr
	...

0800b4e8 <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	711a      	strb	r2, [r3, #4]
	m->_timeout=500;						//Timeout para la recepción de respuesta.
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b502:	80da      	strh	r2, [r3, #6]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	729a      	strb	r2, [r3, #10]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2220      	movs	r2, #32
 800b50e:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
	m->_Coils=0xF0F0AF5A;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	4a1c      	ldr	r2, [pc, #112]	; (800b588 <ModBUS_Config+0xa0>)
 800b516:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2201      	movs	r2, #1
 800b51e:	72da      	strb	r2, [r3, #11]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2220      	movs	r2, #32
 800b524:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
	m->_Inputs=0xA5FA0F0F;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	4a18      	ldr	r2, [pc, #96]	; (800b58c <ModBUS_Config+0xa4>)
 800b52c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2201      	movs	r2, #1
 800b534:	731a      	strb	r2, [r3, #12]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2210      	movs	r2, #16
 800b53a:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2201      	movs	r2, #1
 800b542:	735a      	strb	r2, [r3, #13]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2210      	movs	r2, #16
 800b548:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2201      	movs	r2, #1
 800b550:	739a      	strb	r2, [r3, #14]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2220      	movs	r2, #32
 800b556:	f883 2638 	strb.w	r2, [r3, #1592]	; 0x638

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2201      	movs	r2, #1
 800b55e:	73da      	strb	r2, [r3, #15]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2201      	movs	r2, #1
 800b564:	741a      	strb	r2, [r3, #16]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2220      	movs	r2, #32
 800b56a:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2201      	movs	r2, #1
 800b572:	745a      	strb	r2, [r3, #17]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2220      	movs	r2, #32
 800b578:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
}
 800b57c:	bf00      	nop
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr
 800b588:	f0f0af5a 	.word	0xf0f0af5a
 800b58c:	a5fa0f0f 	.word	0xa5fa0f0f

0800b590 <ModBUS_F03_Assign>:
		return(0);
	}
}

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t address, uint16_t data)
{
 800b590:	b480      	push	{r7}
 800b592:	b085      	sub	sp, #20
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	460b      	mov	r3, r1
 800b59a:	70fb      	strb	r3, [r7, #3]
 800b59c:	4613      	mov	r3, r2
 800b59e:	803b      	strh	r3, [r7, #0]

	uint8_t c=0;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800b5aa:	78fa      	ldrb	r2, [r7, #3]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d901      	bls.n	800b5b4 <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	e016      	b.n	800b5e2 <ModBUS_F03_Assign+0x52>
	}
	else
	{
		address=address*2;
 800b5b4:	78fb      	ldrb	r3, [r7, #3]
 800b5b6:	005b      	lsls	r3, r3, #1
 800b5b8:	70fb      	strb	r3, [r7, #3]
		m2->_Holding_Registers[(address)+1]=data;
 800b5ba:	78fb      	ldrb	r3, [r7, #3]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	883a      	ldrh	r2, [r7, #0]
 800b5c0:	b2d1      	uxtb	r1, r2
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	460a      	mov	r2, r1
 800b5c8:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
		c=data>>8;
 800b5cc:	883b      	ldrh	r3, [r7, #0]
 800b5ce:	0a1b      	lsrs	r3, r3, #8
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(address)]=c;
 800b5d4:	78fb      	ldrb	r3, [r7, #3]
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	4413      	add	r3, r2
 800b5da:	7bfa      	ldrb	r2, [r7, #15]
 800b5dc:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

		return(0);
 800b5e0:	2300      	movs	r3, #0
	}
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3714      	adds	r7, #20
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr

0800b5ee <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t address)
{
 800b5ee:	b480      	push	{r7}
 800b5f0:	b085      	sub	sp, #20
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800b5fe:	2300      	movs	r3, #0
 800b600:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800b608:	78fa      	ldrb	r2, [r7, #3]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d901      	bls.n	800b612 <ModBUS_F03_Read+0x24>
	{
		return(1);
 800b60e:	2301      	movs	r3, #1
 800b610:	e016      	b.n	800b640 <ModBUS_F03_Read+0x52>
	}
	else
	{
		address=address*2;
 800b612:	78fb      	ldrb	r3, [r7, #3]
 800b614:	005b      	lsls	r3, r3, #1
 800b616:	70fb      	strb	r3, [r7, #3]
		n=m2->_Holding_Registers[(address)];
 800b618:	78fb      	ldrb	r3, [r7, #3]
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	4413      	add	r3, r2
 800b61e:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800b622:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800b624:	89fb      	ldrh	r3, [r7, #14]
 800b626:	021b      	lsls	r3, r3, #8
 800b628:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(address)+1];
 800b62a:	78fb      	ldrb	r3, [r7, #3]
 800b62c:	3301      	adds	r3, #1
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	4413      	add	r3, r2
 800b632:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800b636:	b29a      	uxth	r2, r3
 800b638:	89fb      	ldrh	r3, [r7, #14]
 800b63a:	4313      	orrs	r3, r2
 800b63c:	81fb      	strh	r3, [r7, #14]
		return(n);
 800b63e:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800b640:	4618      	mov	r0, r3
 800b642:	3714      	adds	r7, #20
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int of, int tf)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b090      	sub	sp, #64	; 0x40
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	607a      	str	r2, [r7, #4]
 800b658:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800b65a:	2300      	movs	r3, #0
 800b65c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b65e:	2300      	movs	r3, #0
 800b660:	63bb      	str	r3, [r7, #56]	; 0x38
 800b662:	2300      	movs	r3, #0
 800b664:	637b      	str	r3, [r7, #52]	; 0x34
 800b666:	2300      	movs	r3, #0
 800b668:	633b      	str	r3, [r7, #48]	; 0x30
 800b66a:	2300      	movs	r3, #0
 800b66c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b66e:	2300      	movs	r3, #0
 800b670:	61fb      	str	r3, [r7, #28]
 800b672:	2300      	movs	r3, #0
 800b674:	61bb      	str	r3, [r7, #24]
 800b676:	2300      	movs	r3, #0
 800b678:	62bb      	str	r3, [r7, #40]	; 0x28
 800b67a:	2300      	movs	r3, #0
 800b67c:	627b      	str	r3, [r7, #36]	; 0x24
 800b67e:	2300      	movs	r3, #0
 800b680:	617b      	str	r3, [r7, #20]
 800b682:	2300      	movs	r3, #0
 800b684:	623b      	str	r3, [r7, #32]
 800b686:	2300      	movs	r3, #0
 800b688:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	61fb      	str	r3, [r7, #28]
	lngb=*bn;
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	61bb      	str	r3, [r7, #24]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800b696:	69fa      	ldr	r2, [r7, #28]
 800b698:	69bb      	ldr	r3, [r7, #24]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	f2c0 8315 	blt.w	800bcca <FT_String_ND+0x67e>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800b6a4:	e00c      	b.n	800b6c0 <FT_String_ND+0x74>
							{
								n++;
 800b6a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800b6ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	441a      	add	r2, r3
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	dd02      	ble.n	800b6c0 <FT_String_ND+0x74>
								{
									estado=0;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	623b      	str	r3, [r7, #32]
									break;
 800b6be:	e009      	b.n	800b6d4 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800b6c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6c2:	68fa      	ldr	r2, [r7, #12]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	781a      	ldrb	r2, [r3, #0]
 800b6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ca:	6879      	ldr	r1, [r7, #4]
 800b6cc:	440b      	add	r3, r1
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d1e8      	bne.n	800b6a6 <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800b6d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800b6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6dc:	3301      	adds	r3, #1
 800b6de:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800b6e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d108      	bne.n	800b6fa <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800b6e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	1ad3      	subs	r3, r2, r3
 800b6ee:	1c5a      	adds	r2, r3, #1
 800b6f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6f2:	601a      	str	r2, [r3, #0]
									estado=1;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	623b      	str	r3, [r7, #32]
									break;
 800b6f8:	e010      	b.n	800b71c <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800b6fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6fc:	69bb      	ldr	r3, [r7, #24]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	dd02      	ble.n	800b708 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800b702:	2300      	movs	r3, #0
 800b704:	623b      	str	r3, [r7, #32]
									 break;
 800b706:	e009      	b.n	800b71c <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800b708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	4413      	add	r3, r2
 800b70e:	781a      	ldrb	r2, [r3, #0]
 800b710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b712:	6879      	ldr	r1, [r7, #4]
 800b714:	440b      	add	r3, r1
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	429a      	cmp	r2, r3
 800b71a:	d0db      	beq.n	800b6d4 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800b71c:	69bb      	ldr	r3, [r7, #24]
 800b71e:	1e5a      	subs	r2, r3, #1
 800b720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b722:	4413      	add	r3, r2
 800b724:	69fa      	ldr	r2, [r7, #28]
 800b726:	429a      	cmp	r2, r3
 800b728:	dd02      	ble.n	800b730 <FT_String_ND+0xe4>
 800b72a:	6a3b      	ldr	r3, [r7, #32]
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d1b7      	bne.n	800b6a0 <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800b730:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b732:	2b00      	cmp	r3, #0
 800b734:	d101      	bne.n	800b73a <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800b736:	6a3b      	ldr	r3, [r7, #32]
 800b738:	e2c8      	b.n	800bccc <FT_String_ND+0x680>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800b73a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d12c      	bne.n	800b79a <FT_String_ND+0x14e>
 800b740:	6a3b      	ldr	r3, [r7, #32]
 800b742:	2b01      	cmp	r3, #1
 800b744:	d129      	bne.n	800b79a <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800b746:	e014      	b.n	800b772 <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800b748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	441a      	add	r2, r3
 800b750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b752:	4413      	add	r3, r2
 800b754:	3b01      	subs	r3, #1
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	441a      	add	r2, r3
 800b75a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b75c:	6819      	ldr	r1, [r3, #0]
 800b75e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b760:	440b      	add	r3, r1
 800b762:	3b01      	subs	r3, #1
 800b764:	68f9      	ldr	r1, [r7, #12]
 800b766:	440b      	add	r3, r1
 800b768:	7812      	ldrb	r2, [r2, #0]
 800b76a:	701a      	strb	r2, [r3, #0]
										n3++;
 800b76c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b76e:	3301      	adds	r3, #1
 800b770:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800b772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b778:	441a      	add	r2, r3
 800b77a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b77c:	4413      	add	r3, r2
 800b77e:	69fa      	ldr	r2, [r7, #28]
 800b780:	429a      	cmp	r2, r3
 800b782:	dae1      	bge.n	800b748 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800b784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b78a:	4413      	add	r3, r2
 800b78c:	1e5a      	subs	r2, r3, #1
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	601a      	str	r2, [r3, #0]
							estado=3;
 800b792:	2303      	movs	r3, #3
 800b794:	623b      	str	r3, [r7, #32]
							return(estado);
 800b796:	6a3b      	ldr	r3, [r7, #32]
 800b798:	e298      	b.n	800bccc <FT_String_ND+0x680>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800b79a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b79c:	2b02      	cmp	r3, #2
 800b79e:	f040 80be 	bne.w	800b91e <FT_String_ND+0x2d2>
 800b7a2:	6a3b      	ldr	r3, [r7, #32]
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	f040 80ba 	bne.w	800b91e <FT_String_ND+0x2d2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800b7aa:	e012      	b.n	800b7d2 <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800b7ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b7ae:	69bb      	ldr	r3, [r7, #24]
 800b7b0:	1ad2      	subs	r2, r2, r3
 800b7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b4:	4413      	add	r3, r2
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	441a      	add	r2, r3
 800b7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b7c0:	440b      	add	r3, r1
 800b7c2:	7812      	ldrb	r2, [r2, #0]
 800b7c4:	701a      	strb	r2, [r3, #0]
								n4++;
 800b7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800b7cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7d0:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800b7d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	1ad2      	subs	r2, r2, r3
 800b7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7da:	4413      	add	r3, r2
 800b7dc:	69fa      	ldr	r2, [r7, #28]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	dae4      	bge.n	800b7ac <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800b7e2:	499d      	ldr	r1, [pc, #628]	; (800ba58 <FT_String_ND+0x40c>)
 800b7e4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b7e6:	f000 fd89 	bl	800c2fc <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800b7ea:	499c      	ldr	r1, [pc, #624]	; (800ba5c <FT_String_ND+0x410>)
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	f000 fd85 	bl	800c2fc <strtok>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f000 fb66 	bl	800bec6 <atoi>
 800b7fa:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800b7fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b7fe:	3b01      	subs	r3, #1
 800b800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b802:	429a      	cmp	r2, r3
 800b804:	db02      	blt.n	800b80c <FT_String_ND+0x1c0>
							{
								lngd=of-1;
 800b806:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b808:	3b01      	subs	r3, #1
 800b80a:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800b80c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b80e:	3306      	adds	r3, #6
 800b810:	222c      	movs	r2, #44	; 0x2c
 800b812:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800b814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b816:	2b09      	cmp	r3, #9
 800b818:	dc0d      	bgt.n	800b836 <FT_String_ND+0x1ea>
											{
												c[8]=':';
 800b81a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b81c:	3308      	adds	r3, #8
 800b81e:	223a      	movs	r2, #58	; 0x3a
 800b820:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800b822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b824:	3309      	adds	r3, #9
 800b826:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b828:	4413      	add	r3, r2
 800b82a:	2200      	movs	r2, #0
 800b82c:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800b82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b830:	3309      	adds	r3, #9
 800b832:	627b      	str	r3, [r7, #36]	; 0x24
 800b834:	e021      	b.n	800b87a <FT_String_ND+0x22e>
											}
											else{
														if (lngd< 100)
 800b836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b838:	2b63      	cmp	r3, #99	; 0x63
 800b83a:	dc0d      	bgt.n	800b858 <FT_String_ND+0x20c>
														{
															c[9]=':';
 800b83c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b83e:	3309      	adds	r3, #9
 800b840:	223a      	movs	r2, #58	; 0x3a
 800b842:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800b844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b846:	330a      	adds	r3, #10
 800b848:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b84a:	4413      	add	r3, r2
 800b84c:	2200      	movs	r2, #0
 800b84e:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800b850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b852:	330a      	adds	r3, #10
 800b854:	627b      	str	r3, [r7, #36]	; 0x24
 800b856:	e010      	b.n	800b87a <FT_String_ND+0x22e>
														}
														else
														{
														if (lngd < 1000)
 800b858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b85e:	da0c      	bge.n	800b87a <FT_String_ND+0x22e>
														{
															c[10]=':';
 800b860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b862:	330a      	adds	r3, #10
 800b864:	223a      	movs	r2, #58	; 0x3a
 800b866:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800b868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86a:	330b      	adds	r3, #11
 800b86c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b86e:	4413      	add	r3, r2
 800b870:	2200      	movs	r2, #0
 800b872:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800b874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b876:	330b      	adds	r3, #11
 800b878:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800b87a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b87c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b87e:	601a      	str	r2, [r3, #0]
							n4=0;
 800b880:	2300      	movs	r3, #0
 800b882:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800b884:	e016      	b.n	800b8b4 <FT_String_ND+0x268>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800b886:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b888:	69bb      	ldr	r3, [r7, #24]
 800b88a:	1ad2      	subs	r2, r2, r3
 800b88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88e:	441a      	add	r2, r3
 800b890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b892:	4413      	add	r3, r2
 800b894:	461a      	mov	r2, r3
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	441a      	add	r2, r3
 800b89a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	1ac9      	subs	r1, r1, r3
 800b8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a2:	440b      	add	r3, r1
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	440b      	add	r3, r1
 800b8aa:	7812      	ldrb	r2, [r2, #0]
 800b8ac:	701a      	strb	r2, [r3, #0]
								n4++;
 800b8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800b8b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	1ad2      	subs	r2, r2, r3
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8bc:	441a      	add	r2, r3
 800b8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c0:	4413      	add	r3, r2
 800b8c2:	69fa      	ldr	r2, [r7, #28]
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	dade      	bge.n	800b886 <FT_String_ND+0x23a>
							}
							*an=n+n4-lngb-1;
 800b8c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8cc:	441a      	add	r2, r3
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	1e5a      	subs	r2, r3, #1
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800b8d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	1ad2      	subs	r2, r2, r3
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	441a      	add	r2, r3
 800b8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e4:	4413      	add	r3, r2
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	4413      	add	r3, r2
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800b8f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b8f2:	69bb      	ldr	r3, [r7, #24]
 800b8f4:	1ad2      	subs	r2, r2, r3
 800b8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f8:	4413      	add	r3, r2
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	4413      	add	r3, r2
 800b900:	2200      	movs	r2, #0
 800b902:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800b904:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	1ad2      	subs	r2, r2, r3
 800b90a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90e:	440b      	add	r3, r1
 800b910:	429a      	cmp	r2, r3
 800b912:	d102      	bne.n	800b91a <FT_String_ND+0x2ce>
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2200      	movs	r2, #0
 800b918:	701a      	strb	r2, [r3, #0]
							estado=3;
 800b91a:	2303      	movs	r3, #3
 800b91c:	623b      	str	r3, [r7, #32]

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800b91e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b920:	2b03      	cmp	r3, #3
 800b922:	d146      	bne.n	800b9b2 <FT_String_ND+0x366>
 800b924:	6a3b      	ldr	r3, [r7, #32]
 800b926:	2b01      	cmp	r3, #1
 800b928:	d143      	bne.n	800b9b2 <FT_String_ND+0x366>
						{
						n3=0;
 800b92a:	2300      	movs	r3, #0
 800b92c:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800b92e:	e00e      	b.n	800b94e <FT_String_ND+0x302>
									{
										c[n3]=a[*ubicacion+n3-1];
 800b930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b936:	4413      	add	r3, r2
 800b938:	3b01      	subs	r3, #1
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	441a      	add	r2, r3
 800b93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b940:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b942:	440b      	add	r3, r1
 800b944:	7812      	ldrb	r2, [r2, #0]
 800b946:	701a      	strb	r2, [r3, #0]
										n3++;
 800b948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b94a:	3301      	adds	r3, #1
 800b94c:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800b94e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	429a      	cmp	r2, r3
 800b954:	dbec      	blt.n	800b930 <FT_String_ND+0x2e4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800b956:	2300      	movs	r3, #0
 800b958:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800b95a:	e014      	b.n	800b986 <FT_String_ND+0x33a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800b95c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	69bb      	ldr	r3, [r7, #24]
 800b962:	441a      	add	r2, r3
 800b964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b966:	4413      	add	r3, r2
 800b968:	3b01      	subs	r3, #1
 800b96a:	68fa      	ldr	r2, [r7, #12]
 800b96c:	441a      	add	r2, r3
 800b96e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b970:	6819      	ldr	r1, [r3, #0]
 800b972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b974:	440b      	add	r3, r1
 800b976:	3b01      	subs	r3, #1
 800b978:	68f9      	ldr	r1, [r7, #12]
 800b97a:	440b      	add	r3, r1
 800b97c:	7812      	ldrb	r2, [r2, #0]
 800b97e:	701a      	strb	r2, [r3, #0]
										n5++;
 800b980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b982:	3301      	adds	r3, #1
 800b984:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800b986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	441a      	add	r2, r3
 800b98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b990:	441a      	add	r2, r3
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	429a      	cmp	r2, r3
 800b998:	dde0      	ble.n	800b95c <FT_String_ND+0x310>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800b99a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a0:	4413      	add	r3, r2
 800b9a2:	1e5a      	subs	r2, r3, #1
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800b9a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9ac:	601a      	str	r2, [r3, #0]
							estado=3;
 800b9ae:	2303      	movs	r3, #3
 800b9b0:	623b      	str	r3, [r7, #32]
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800b9b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9b4:	2b04      	cmp	r3, #4
 800b9b6:	f040 80bd 	bne.w	800bb34 <FT_String_ND+0x4e8>
 800b9ba:	6a3b      	ldr	r3, [r7, #32]
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	f040 80b9 	bne.w	800bb34 <FT_String_ND+0x4e8>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800b9c2:	e012      	b.n	800b9ea <FT_String_ND+0x39e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800b9c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	1ad2      	subs	r2, r2, r3
 800b9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9cc:	4413      	add	r3, r2
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	441a      	add	r2, r3
 800b9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b9d8:	440b      	add	r3, r1
 800b9da:	7812      	ldrb	r2, [r2, #0]
 800b9dc:	701a      	strb	r2, [r3, #0]
								n4++;
 800b9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XX:
 800b9e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9e8:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800b9ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b9ec:	69bb      	ldr	r3, [r7, #24]
 800b9ee:	1ad2      	subs	r2, r2, r3
 800b9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f2:	4413      	add	r3, r2
 800b9f4:	69fa      	ldr	r2, [r7, #28]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	dae4      	bge.n	800b9c4 <FT_String_ND+0x378>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800b9fa:	4917      	ldr	r1, [pc, #92]	; (800ba58 <FT_String_ND+0x40c>)
 800b9fc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b9fe:	f000 fc7d 	bl	800c2fc <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800ba02:	4916      	ldr	r1, [pc, #88]	; (800ba5c <FT_String_ND+0x410>)
 800ba04:	2000      	movs	r0, #0
 800ba06:	f000 fc79 	bl	800c2fc <strtok>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f000 fa5a 	bl	800bec6 <atoi>
 800ba12:	62b8      	str	r0, [r7, #40]	; 0x28

							if(lngd>=of-1)//if(lngd>=of-1)
 800ba14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba16:	3b01      	subs	r3, #1
 800ba18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	db02      	blt.n	800ba24 <FT_String_ND+0x3d8>
							{
								lngd=of-1;
 800ba1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba20:	3b01      	subs	r3, #1
 800ba22:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800ba24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba26:	3306      	adds	r3, #6
 800ba28:	222c      	movs	r2, #44	; 0x2c
 800ba2a:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ba2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2e:	2b09      	cmp	r3, #9
 800ba30:	dc07      	bgt.n	800ba42 <FT_String_ND+0x3f6>
											{
												c[8]=':';
 800ba32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba34:	3308      	adds	r3, #8
 800ba36:	223a      	movs	r2, #58	; 0x3a
 800ba38:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800ba3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3c:	3309      	adds	r3, #9
 800ba3e:	627b      	str	r3, [r7, #36]	; 0x24
 800ba40:	e019      	b.n	800ba76 <FT_String_ND+0x42a>
											}
											else{
														if (lngd< 100)
 800ba42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba44:	2b63      	cmp	r3, #99	; 0x63
 800ba46:	dc0b      	bgt.n	800ba60 <FT_String_ND+0x414>
														{
															c[9]=':';
 800ba48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba4a:	3309      	adds	r3, #9
 800ba4c:	223a      	movs	r2, #58	; 0x3a
 800ba4e:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800ba50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba52:	330a      	adds	r3, #10
 800ba54:	627b      	str	r3, [r7, #36]	; 0x24
 800ba56:	e00e      	b.n	800ba76 <FT_String_ND+0x42a>
 800ba58:	0800d9c8 	.word	0x0800d9c8
 800ba5c:	0800d9cc 	.word	0x0800d9cc
														}
														else
														{
														if (lngd < 1000)
 800ba60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba66:	da06      	bge.n	800ba76 <FT_String_ND+0x42a>
														{
															c[10]=':';
 800ba68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba6a:	330a      	adds	r3, #10
 800ba6c:	223a      	movs	r2, #58	; 0x3a
 800ba6e:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800ba70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba72:	330b      	adds	r3, #11
 800ba74:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800ba76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba7a:	601a      	str	r2, [r3, #0]
							n4=0;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ba80:	e016      	b.n	800bab0 <FT_String_ND+0x464>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ba82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba84:	69bb      	ldr	r3, [r7, #24]
 800ba86:	1ad2      	subs	r2, r2, r3
 800ba88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8a:	441a      	add	r2, r3
 800ba8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8e:	4413      	add	r3, r2
 800ba90:	461a      	mov	r2, r3
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	441a      	add	r2, r3
 800ba96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	1ac9      	subs	r1, r1, r3
 800ba9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9e:	440b      	add	r3, r1
 800baa0:	4619      	mov	r1, r3
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	440b      	add	r3, r1
 800baa6:	7812      	ldrb	r2, [r2, #0]
 800baa8:	701a      	strb	r2, [r3, #0]
								n4++;
 800baaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baac:	3301      	adds	r3, #1
 800baae:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800bab0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	1ad2      	subs	r2, r2, r3
 800bab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab8:	441a      	add	r2, r3
 800baba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babc:	4413      	add	r3, r2
 800babe:	69fa      	ldr	r2, [r7, #28]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	dade      	bge.n	800ba82 <FT_String_ND+0x436>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800bac4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac8:	441a      	add	r2, r3
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	1ad3      	subs	r3, r2, r3
 800bace:	1e5a      	subs	r2, r3, #1
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	601a      	str	r2, [r3, #0]
							n5=0;
 800bad4:	2300      	movs	r3, #0
 800bad6:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800bad8:	e00f      	b.n	800bafa <FT_String_ND+0x4ae>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800bada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800badc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bade:	1ad2      	subs	r2, r2, r3
 800bae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae2:	4413      	add	r3, r2
 800bae4:	461a      	mov	r2, r3
 800bae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bae8:	441a      	add	r2, r3
 800baea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800baee:	440b      	add	r3, r1
 800baf0:	7812      	ldrb	r2, [r2, #0]
 800baf2:	701a      	strb	r2, [r3, #0]
								n5++;
 800baf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf6:	3301      	adds	r3, #1
 800baf8:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800bafa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafe:	1ad2      	subs	r2, r2, r3
 800bb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb02:	441a      	add	r2, r3
 800bb04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	dbe6      	blt.n	800bada <FT_String_ND+0x48e>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800bb0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb10:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800bb12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb18:	441a      	add	r2, r3
 800bb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1c:	1ad2      	subs	r2, r2, r3
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4413      	add	r3, r2
 800bb24:	69fa      	ldr	r2, [r7, #28]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d102      	bne.n	800bb30 <FT_String_ND+0x4e4>
							{
								estado=4;
 800bb2a:	2304      	movs	r3, #4
 800bb2c:	623b      	str	r3, [r7, #32]
 800bb2e:	e001      	b.n	800bb34 <FT_String_ND+0x4e8>

							}
							else
							{
								estado=5;
 800bb30:	2305      	movs	r3, #5
 800bb32:	623b      	str	r3, [r7, #32]
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800bb34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb36:	2b05      	cmp	r3, #5
 800bb38:	f040 80c5 	bne.w	800bcc6 <FT_String_ND+0x67a>
 800bb3c:	6a3b      	ldr	r3, [r7, #32]
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	f040 80c1 	bne.w	800bcc6 <FT_String_ND+0x67a>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800bb44:	e012      	b.n	800bb6c <FT_String_ND+0x520>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800bb46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	1ad2      	subs	r2, r2, r3
 800bb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4e:	4413      	add	r3, r2
 800bb50:	461a      	mov	r2, r3
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	441a      	add	r2, r3
 800bb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb58:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bb5a:	440b      	add	r3, r1
 800bb5c:	7812      	ldrb	r2, [r2, #0]
 800bb5e:	701a      	strb	r2, [r3, #0]
								n4++;
 800bb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb62:	3301      	adds	r3, #1
 800bb64:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800bb66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb6a:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800bb6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb6e:	69bb      	ldr	r3, [r7, #24]
 800bb70:	1ad2      	subs	r2, r2, r3
 800bb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb74:	4413      	add	r3, r2
 800bb76:	69fa      	ldr	r2, [r7, #28]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	dae4      	bge.n	800bb46 <FT_String_ND+0x4fa>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800bb7c:	4955      	ldr	r1, [pc, #340]	; (800bcd4 <FT_String_ND+0x688>)
 800bb7e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800bb80:	f000 fbbc 	bl	800c2fc <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800bb84:	4954      	ldr	r1, [pc, #336]	; (800bcd8 <FT_String_ND+0x68c>)
 800bb86:	2000      	movs	r0, #0
 800bb88:	f000 fbb8 	bl	800c2fc <strtok>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f000 f999 	bl	800bec6 <atoi>
 800bb94:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800bb96:	4950      	ldr	r1, [pc, #320]	; (800bcd8 <FT_String_ND+0x68c>)
 800bb98:	2000      	movs	r0, #0
 800bb9a:	f000 fbaf 	bl	800c2fc <strtok>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	4618      	mov	r0, r3
 800bba2:	f000 f990 	bl	800bec6 <atoi>
 800bba6:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800bba8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbaa:	3b01      	subs	r3, #1
 800bbac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	db02      	blt.n	800bbb8 <FT_String_ND+0x56c>
							{
								lngd=of-1;
 800bbb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbb4:	3b01      	subs	r3, #1
 800bbb6:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800bbb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbba:	3306      	adds	r3, #6
 800bbbc:	222c      	movs	r2, #44	; 0x2c
 800bbbe:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800bbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc2:	2b09      	cmp	r3, #9
 800bbc4:	dc07      	bgt.n	800bbd6 <FT_String_ND+0x58a>
											{
												c[10]=':';
 800bbc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbc8:	330a      	adds	r3, #10
 800bbca:	223a      	movs	r2, #58	; 0x3a
 800bbcc:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800bbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd0:	330b      	adds	r3, #11
 800bbd2:	627b      	str	r3, [r7, #36]	; 0x24
 800bbd4:	e015      	b.n	800bc02 <FT_String_ND+0x5b6>
											}
											else{
														if (lngd< 100)
 800bbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd8:	2b63      	cmp	r3, #99	; 0x63
 800bbda:	dc07      	bgt.n	800bbec <FT_String_ND+0x5a0>
														{
															c[11]=':';
 800bbdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbde:	330b      	adds	r3, #11
 800bbe0:	223a      	movs	r2, #58	; 0x3a
 800bbe2:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800bbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe6:	330c      	adds	r3, #12
 800bbe8:	627b      	str	r3, [r7, #36]	; 0x24
 800bbea:	e00a      	b.n	800bc02 <FT_String_ND+0x5b6>
														}
														else
														{
														if (lngd < 1000)
 800bbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bbf2:	da06      	bge.n	800bc02 <FT_String_ND+0x5b6>
														{
															c[12]=':';
 800bbf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbf6:	330c      	adds	r3, #12
 800bbf8:	223a      	movs	r2, #58	; 0x3a
 800bbfa:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800bbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfe:	330d      	adds	r3, #13
 800bc00:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800bc02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc06:	601a      	str	r2, [r3, #0]
							n4=0;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800bc0c:	e016      	b.n	800bc3c <FT_String_ND+0x5f0>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800bc0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc10:	69bb      	ldr	r3, [r7, #24]
 800bc12:	1ad2      	subs	r2, r2, r3
 800bc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc16:	441a      	add	r2, r3
 800bc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1a:	4413      	add	r3, r2
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	441a      	add	r2, r3
 800bc22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bc24:	69bb      	ldr	r3, [r7, #24]
 800bc26:	1ac9      	subs	r1, r1, r3
 800bc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2a:	440b      	add	r3, r1
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	440b      	add	r3, r1
 800bc32:	7812      	ldrb	r2, [r2, #0]
 800bc34:	701a      	strb	r2, [r3, #0]
								n4++;
 800bc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc38:	3301      	adds	r3, #1
 800bc3a:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800bc3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	1ad2      	subs	r2, r2, r3
 800bc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc44:	441a      	add	r2, r3
 800bc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc48:	4413      	add	r3, r2
 800bc4a:	69fa      	ldr	r2, [r7, #28]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	dade      	bge.n	800bc0e <FT_String_ND+0x5c2>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800bc50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc54:	441a      	add	r2, r3
 800bc56:	69bb      	ldr	r3, [r7, #24]
 800bc58:	1ad3      	subs	r3, r2, r3
 800bc5a:	1e5a      	subs	r2, r3, #1
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	601a      	str	r2, [r3, #0]
							n5=0;
 800bc60:	2300      	movs	r3, #0
 800bc62:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800bc64:	e00f      	b.n	800bc86 <FT_String_ND+0x63a>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800bc66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6a:	1ad2      	subs	r2, r2, r3
 800bc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc6e:	4413      	add	r3, r2
 800bc70:	461a      	mov	r2, r3
 800bc72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc74:	441a      	add	r2, r3
 800bc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc78:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bc7a:	440b      	add	r3, r1
 800bc7c:	7812      	ldrb	r2, [r2, #0]
 800bc7e:	701a      	strb	r2, [r3, #0]
								n5++;
 800bc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc82:	3301      	adds	r3, #1
 800bc84:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800bc86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8a:	1ad2      	subs	r2, r2, r3
 800bc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc8e:	441a      	add	r2, r3
 800bc90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	dbe6      	blt.n	800bc66 <FT_String_ND+0x61a>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800bc98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc9c:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800bc9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca4:	441a      	add	r2, r3
 800bca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca8:	1ad2      	subs	r2, r2, r3
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4413      	add	r3, r2
 800bcb0:	69fa      	ldr	r2, [r7, #28]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d105      	bne.n	800bcc2 <FT_String_ND+0x676>
							{
								estado=4;
 800bcb6:	2304      	movs	r3, #4
 800bcb8:	623b      	str	r3, [r7, #32]
								*idcom=cliente;
 800bcba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcbc:	693a      	ldr	r2, [r7, #16]
 800bcbe:	601a      	str	r2, [r3, #0]
 800bcc0:	e001      	b.n	800bcc6 <FT_String_ND+0x67a>
							}
							else
							{
								estado=5;
 800bcc2:	2305      	movs	r3, #5
 800bcc4:	623b      	str	r3, [r7, #32]
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800bcc6:	6a3b      	ldr	r3, [r7, #32]
 800bcc8:	e000      	b.n	800bccc <FT_String_ND+0x680>
					}
			}
			else
			{
				return(2);
 800bcca:	2302      	movs	r3, #2
			}
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3740      	adds	r7, #64	; 0x40
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	0800d9c8 	.word	0x0800d9c8
 800bcd8:	0800d9cc 	.word	0x0800d9cc

0800bcdc <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b088      	sub	sp, #32
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800bce6:	2330      	movs	r3, #48	; 0x30
 800bce8:	60bb      	str	r3, [r7, #8]
 800bcea:	f107 030c 	add.w	r3, r7, #12
 800bcee:	2200      	movs	r2, #0
 800bcf0:	601a      	str	r2, [r3, #0]
 800bcf2:	605a      	str	r2, [r3, #4]
 800bcf4:	609a      	str	r2, [r3, #8]
 800bcf6:	60da      	str	r2, [r3, #12]
int i=0;	
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800bcfc:	f107 0308 	add.w	r3, r7, #8
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	490f      	ldr	r1, [pc, #60]	; (800bd40 <INTOA+0x64>)
 800bd04:	4618      	mov	r0, r3
 800bd06:	f000 fa7b 	bl	800c200 <siprintf>
		while(i<=strlen(origbuff))
 800bd0a:	e00b      	b.n	800bd24 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	1c5a      	adds	r2, r3, #1
 800bd10:	603a      	str	r2, [r7, #0]
 800bd12:	f107 0108 	add.w	r1, r7, #8
 800bd16:	69fa      	ldr	r2, [r7, #28]
 800bd18:	440a      	add	r2, r1
 800bd1a:	7812      	ldrb	r2, [r2, #0]
 800bd1c:	701a      	strb	r2, [r3, #0]
		i++;
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	3301      	adds	r3, #1
 800bd22:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800bd24:	f107 0308 	add.w	r3, r7, #8
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7f4 fa63 	bl	80001f4 <strlen>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	69fb      	ldr	r3, [r7, #28]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d2ea      	bcs.n	800bd0c <INTOA+0x30>
		}
		return(i);
 800bd36:	69fb      	ldr	r3, [r7, #28]
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3720      	adds	r7, #32
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	0800d9d0 	.word	0x0800d9d0

0800bd44 <FTOA>:

int FTOA( int a,  unsigned char *v1, int comma)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b08c      	sub	sp, #48	; 0x30
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	607a      	str	r2, [r7, #4]
//char origbuff[20]="0";
char origbuff[20];
origbuff[0]='\0';
 800bd50:	2300      	movs	r3, #0
 800bd52:	753b      	strb	r3, [r7, #20]

int i=0;
 800bd54:	2300      	movs	r3, #0
 800bd56:	62fb      	str	r3, [r7, #44]	; 0x2c
int b=0;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	62bb      	str	r3, [r7, #40]	; 0x28

		sprintf(origbuff,"%i",a); 	//Paso el entreo a cadena de caracteres
 800bd5c:	f107 0314 	add.w	r3, r7, #20
 800bd60:	68fa      	ldr	r2, [r7, #12]
 800bd62:	4932      	ldr	r1, [pc, #200]	; (800be2c <FTOA+0xe8>)
 800bd64:	4618      	mov	r0, r3
 800bd66:	f000 fa4b 	bl	800c200 <siprintf>
		b=strlen(origbuff);
 800bd6a:	f107 0314 	add.w	r3, r7, #20
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7f4 fa40 	bl	80001f4 <strlen>
 800bd74:	4603      	mov	r3, r0
 800bd76:	62bb      	str	r3, [r7, #40]	; 0x28
		if(comma<b)					//Si la posición de la coma es menor a la posición de los caracteres ejemplo int= 2 comma=0 resultado = 0,02
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	da25      	bge.n	800bdcc <FTOA+0x88>
		{
			while(i<=((b)+1))
 800bd80:	e01d      	b.n	800bdbe <FTOA+0x7a>
			{
				if((i==(b-comma))&&(comma<(b))&&(comma!=0))
 800bd82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	1ad3      	subs	r3, r2, r3
 800bd88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d10b      	bne.n	800bda6 <FTOA+0x62>
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd92:	429a      	cmp	r2, r3
 800bd94:	da07      	bge.n	800bda6 <FTOA+0x62>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d004      	beq.n	800bda6 <FTOA+0x62>
				{
					*v1++='.';
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	1c5a      	adds	r2, r3, #1
 800bda0:	60ba      	str	r2, [r7, #8]
 800bda2:	222e      	movs	r2, #46	; 0x2e
 800bda4:	701a      	strb	r2, [r3, #0]
				}
				*v1++=(unsigned char)origbuff[i];
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	1c5a      	adds	r2, r3, #1
 800bdaa:	60ba      	str	r2, [r7, #8]
 800bdac:	f107 0114 	add.w	r1, r7, #20
 800bdb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdb2:	440a      	add	r2, r1
 800bdb4:	7812      	ldrb	r2, [r2, #0]
 800bdb6:	701a      	strb	r2, [r3, #0]
				i++;
 800bdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdba:	3301      	adds	r3, #1
 800bdbc:	62fb      	str	r3, [r7, #44]	; 0x2c
			while(i<=((b)+1))
 800bdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	dddc      	ble.n	800bd82 <FTOA+0x3e>
			}
			//*v1++='\0';
			return(i);
 800bdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdca:	e02a      	b.n	800be22 <FTOA+0xde>
		  }
		else
		{
			if(b==1)
 800bdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d10f      	bne.n	800bdf2 <FTOA+0xae>
			{
				v1[0]='0';
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	2230      	movs	r2, #48	; 0x30
 800bdd6:	701a      	strb	r2, [r3, #0]
				v1[1]='.';
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	3301      	adds	r3, #1
 800bddc:	222e      	movs	r2, #46	; 0x2e
 800bdde:	701a      	strb	r2, [r3, #0]
				v1[2]=origbuff[0];
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	3302      	adds	r3, #2
 800bde4:	7d3a      	ldrb	r2, [r7, #20]
 800bde6:	701a      	strb	r2, [r3, #0]
				v1[3]='\0';
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	3303      	adds	r3, #3
 800bdec:	2200      	movs	r2, #0
 800bdee:	701a      	strb	r2, [r3, #0]
 800bdf0:	e016      	b.n	800be20 <FTOA+0xdc>
			}
			else
			{
				if(b==0)
 800bdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d113      	bne.n	800be20 <FTOA+0xdc>
				{
					*v1++='0';
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	1c5a      	adds	r2, r3, #1
 800bdfc:	60ba      	str	r2, [r7, #8]
 800bdfe:	2230      	movs	r2, #48	; 0x30
 800be00:	701a      	strb	r2, [r3, #0]
					*v1++='.';
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	1c5a      	adds	r2, r3, #1
 800be06:	60ba      	str	r2, [r7, #8]
 800be08:	222e      	movs	r2, #46	; 0x2e
 800be0a:	701a      	strb	r2, [r3, #0]
					*v1++='0';
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	1c5a      	adds	r2, r3, #1
 800be10:	60ba      	str	r2, [r7, #8]
 800be12:	2230      	movs	r2, #48	; 0x30
 800be14:	701a      	strb	r2, [r3, #0]
					*v1++='\0';
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	1c5a      	adds	r2, r3, #1
 800be1a:	60ba      	str	r2, [r7, #8]
 800be1c:	2200      	movs	r2, #0
 800be1e:	701a      	strb	r2, [r3, #0]
				}
			}

		}

		return(0);
 800be20:	2300      	movs	r3, #0
}
 800be22:	4618      	mov	r0, r3
 800be24:	3730      	adds	r7, #48	; 0x30
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	bf00      	nop
 800be2c:	0800d9d0 	.word	0x0800d9d0

0800be30 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b088      	sub	sp, #32
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	607a      	str	r2, [r7, #4]
 800be3c:	603b      	str	r3, [r7, #0]
int x =0;
 800be3e:	2300      	movs	r3, #0
 800be40:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800be42:	2300      	movs	r3, #0
 800be44:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800be46:	f107 0310 	add.w	r3, r7, #16
 800be4a:	617b      	str	r3, [r7, #20]
if (c==0) x=strlen(b);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d105      	bne.n	800be5e <CopiaVector+0x2e>
 800be52:	68b8      	ldr	r0, [r7, #8]
 800be54:	f7f4 f9ce 	bl	80001f4 <strlen>
 800be58:	4603      	mov	r3, r0
 800be5a:	61bb      	str	r3, [r7, #24]
 800be5c:	e02e      	b.n	800bebc <CopiaVector+0x8c>
else
	{
		x=c;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	61bb      	str	r3, [r7, #24]
		if (x>1024)// OJO SOLO HTTP if (x>128) (x>512)
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be68:	dd01      	ble.n	800be6e <CopiaVector+0x3e>
			{
				return(1);
 800be6a:	2301      	movs	r3, #1
 800be6c:	e027      	b.n	800bebe <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800be6e:	2300      	movs	r3, #0
 800be70:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800be72:	e00a      	b.n	800be8a <CopiaVector+0x5a>
				{
					*a++=*b++;
 800be74:	68ba      	ldr	r2, [r7, #8]
 800be76:	1c53      	adds	r3, r2, #1
 800be78:	60bb      	str	r3, [r7, #8]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	1c59      	adds	r1, r3, #1
 800be7e:	60f9      	str	r1, [r7, #12]
 800be80:	7812      	ldrb	r2, [r2, #0]
 800be82:	701a      	strb	r2, [r3, #0]
					p++;
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	3301      	adds	r3, #1
 800be88:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800be8a:	69fa      	ldr	r2, [r7, #28]
 800be8c:	69bb      	ldr	r3, [r7, #24]
 800be8e:	429a      	cmp	r2, r3
 800be90:	dbf0      	blt.n	800be74 <CopiaVector+0x44>
				}
				if (d==1)
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	2b01      	cmp	r3, #1
 800be96:	d111      	bne.n	800bebc <CopiaVector+0x8c>
				{
				  p=c;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800be9c:	e008      	b.n	800beb0 <CopiaVector+0x80>
				  {
					  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	1c5a      	adds	r2, r3, #1
 800bea2:	60fa      	str	r2, [r7, #12]
 800bea4:	697a      	ldr	r2, [r7, #20]
 800bea6:	7812      	ldrb	r2, [r2, #0]
 800bea8:	701a      	strb	r2, [r3, #0]
					  p++;
 800beaa:	69fb      	ldr	r3, [r7, #28]
 800beac:	3301      	adds	r3, #1
 800beae:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	daf2      	bge.n	800be9e <CopiaVector+0x6e>
				  }
				return (0);
 800beb8:	2300      	movs	r3, #0
 800beba:	e000      	b.n	800bebe <CopiaVector+0x8e>
				}
			}
	}
return (1);
 800bebc:	2301      	movs	r3, #1
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3720      	adds	r7, #32
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <atoi>:
 800bec6:	220a      	movs	r2, #10
 800bec8:	2100      	movs	r1, #0
 800beca:	f000 b89d 	b.w	800c008 <strtol>

0800bece <__itoa>:
 800bece:	1e93      	subs	r3, r2, #2
 800bed0:	2b22      	cmp	r3, #34	; 0x22
 800bed2:	b510      	push	{r4, lr}
 800bed4:	460c      	mov	r4, r1
 800bed6:	d904      	bls.n	800bee2 <__itoa+0x14>
 800bed8:	2300      	movs	r3, #0
 800beda:	700b      	strb	r3, [r1, #0]
 800bedc:	461c      	mov	r4, r3
 800bede:	4620      	mov	r0, r4
 800bee0:	bd10      	pop	{r4, pc}
 800bee2:	2a0a      	cmp	r2, #10
 800bee4:	d109      	bne.n	800befa <__itoa+0x2c>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	da07      	bge.n	800befa <__itoa+0x2c>
 800beea:	232d      	movs	r3, #45	; 0x2d
 800beec:	700b      	strb	r3, [r1, #0]
 800beee:	4240      	negs	r0, r0
 800bef0:	2101      	movs	r1, #1
 800bef2:	4421      	add	r1, r4
 800bef4:	f000 f892 	bl	800c01c <__utoa>
 800bef8:	e7f1      	b.n	800bede <__itoa+0x10>
 800befa:	2100      	movs	r1, #0
 800befc:	e7f9      	b.n	800bef2 <__itoa+0x24>

0800befe <itoa>:
 800befe:	f7ff bfe6 	b.w	800bece <__itoa>
	...

0800bf04 <_strtol_l.constprop.0>:
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf0a:	d001      	beq.n	800bf10 <_strtol_l.constprop.0+0xc>
 800bf0c:	2b24      	cmp	r3, #36	; 0x24
 800bf0e:	d906      	bls.n	800bf1e <_strtol_l.constprop.0+0x1a>
 800bf10:	f000 fa96 	bl	800c440 <__errno>
 800bf14:	2316      	movs	r3, #22
 800bf16:	6003      	str	r3, [r0, #0]
 800bf18:	2000      	movs	r0, #0
 800bf1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf1e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c004 <_strtol_l.constprop.0+0x100>
 800bf22:	460d      	mov	r5, r1
 800bf24:	462e      	mov	r6, r5
 800bf26:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf2a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800bf2e:	f017 0708 	ands.w	r7, r7, #8
 800bf32:	d1f7      	bne.n	800bf24 <_strtol_l.constprop.0+0x20>
 800bf34:	2c2d      	cmp	r4, #45	; 0x2d
 800bf36:	d132      	bne.n	800bf9e <_strtol_l.constprop.0+0x9a>
 800bf38:	782c      	ldrb	r4, [r5, #0]
 800bf3a:	2701      	movs	r7, #1
 800bf3c:	1cb5      	adds	r5, r6, #2
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d05b      	beq.n	800bffa <_strtol_l.constprop.0+0xf6>
 800bf42:	2b10      	cmp	r3, #16
 800bf44:	d109      	bne.n	800bf5a <_strtol_l.constprop.0+0x56>
 800bf46:	2c30      	cmp	r4, #48	; 0x30
 800bf48:	d107      	bne.n	800bf5a <_strtol_l.constprop.0+0x56>
 800bf4a:	782c      	ldrb	r4, [r5, #0]
 800bf4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bf50:	2c58      	cmp	r4, #88	; 0x58
 800bf52:	d14d      	bne.n	800bff0 <_strtol_l.constprop.0+0xec>
 800bf54:	786c      	ldrb	r4, [r5, #1]
 800bf56:	2310      	movs	r3, #16
 800bf58:	3502      	adds	r5, #2
 800bf5a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bf5e:	f108 38ff 	add.w	r8, r8, #4294967295
 800bf62:	f04f 0e00 	mov.w	lr, #0
 800bf66:	fbb8 f9f3 	udiv	r9, r8, r3
 800bf6a:	4676      	mov	r6, lr
 800bf6c:	fb03 8a19 	mls	sl, r3, r9, r8
 800bf70:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bf74:	f1bc 0f09 	cmp.w	ip, #9
 800bf78:	d816      	bhi.n	800bfa8 <_strtol_l.constprop.0+0xa4>
 800bf7a:	4664      	mov	r4, ip
 800bf7c:	42a3      	cmp	r3, r4
 800bf7e:	dd24      	ble.n	800bfca <_strtol_l.constprop.0+0xc6>
 800bf80:	f1be 3fff 	cmp.w	lr, #4294967295
 800bf84:	d008      	beq.n	800bf98 <_strtol_l.constprop.0+0x94>
 800bf86:	45b1      	cmp	r9, r6
 800bf88:	d31c      	bcc.n	800bfc4 <_strtol_l.constprop.0+0xc0>
 800bf8a:	d101      	bne.n	800bf90 <_strtol_l.constprop.0+0x8c>
 800bf8c:	45a2      	cmp	sl, r4
 800bf8e:	db19      	blt.n	800bfc4 <_strtol_l.constprop.0+0xc0>
 800bf90:	fb06 4603 	mla	r6, r6, r3, r4
 800bf94:	f04f 0e01 	mov.w	lr, #1
 800bf98:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf9c:	e7e8      	b.n	800bf70 <_strtol_l.constprop.0+0x6c>
 800bf9e:	2c2b      	cmp	r4, #43	; 0x2b
 800bfa0:	bf04      	itt	eq
 800bfa2:	782c      	ldrbeq	r4, [r5, #0]
 800bfa4:	1cb5      	addeq	r5, r6, #2
 800bfa6:	e7ca      	b.n	800bf3e <_strtol_l.constprop.0+0x3a>
 800bfa8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bfac:	f1bc 0f19 	cmp.w	ip, #25
 800bfb0:	d801      	bhi.n	800bfb6 <_strtol_l.constprop.0+0xb2>
 800bfb2:	3c37      	subs	r4, #55	; 0x37
 800bfb4:	e7e2      	b.n	800bf7c <_strtol_l.constprop.0+0x78>
 800bfb6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bfba:	f1bc 0f19 	cmp.w	ip, #25
 800bfbe:	d804      	bhi.n	800bfca <_strtol_l.constprop.0+0xc6>
 800bfc0:	3c57      	subs	r4, #87	; 0x57
 800bfc2:	e7db      	b.n	800bf7c <_strtol_l.constprop.0+0x78>
 800bfc4:	f04f 3eff 	mov.w	lr, #4294967295
 800bfc8:	e7e6      	b.n	800bf98 <_strtol_l.constprop.0+0x94>
 800bfca:	f1be 3fff 	cmp.w	lr, #4294967295
 800bfce:	d105      	bne.n	800bfdc <_strtol_l.constprop.0+0xd8>
 800bfd0:	2322      	movs	r3, #34	; 0x22
 800bfd2:	6003      	str	r3, [r0, #0]
 800bfd4:	4646      	mov	r6, r8
 800bfd6:	b942      	cbnz	r2, 800bfea <_strtol_l.constprop.0+0xe6>
 800bfd8:	4630      	mov	r0, r6
 800bfda:	e79e      	b.n	800bf1a <_strtol_l.constprop.0+0x16>
 800bfdc:	b107      	cbz	r7, 800bfe0 <_strtol_l.constprop.0+0xdc>
 800bfde:	4276      	negs	r6, r6
 800bfe0:	2a00      	cmp	r2, #0
 800bfe2:	d0f9      	beq.n	800bfd8 <_strtol_l.constprop.0+0xd4>
 800bfe4:	f1be 0f00 	cmp.w	lr, #0
 800bfe8:	d000      	beq.n	800bfec <_strtol_l.constprop.0+0xe8>
 800bfea:	1e69      	subs	r1, r5, #1
 800bfec:	6011      	str	r1, [r2, #0]
 800bfee:	e7f3      	b.n	800bfd8 <_strtol_l.constprop.0+0xd4>
 800bff0:	2430      	movs	r4, #48	; 0x30
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d1b1      	bne.n	800bf5a <_strtol_l.constprop.0+0x56>
 800bff6:	2308      	movs	r3, #8
 800bff8:	e7af      	b.n	800bf5a <_strtol_l.constprop.0+0x56>
 800bffa:	2c30      	cmp	r4, #48	; 0x30
 800bffc:	d0a5      	beq.n	800bf4a <_strtol_l.constprop.0+0x46>
 800bffe:	230a      	movs	r3, #10
 800c000:	e7ab      	b.n	800bf5a <_strtol_l.constprop.0+0x56>
 800c002:	bf00      	nop
 800c004:	0800da12 	.word	0x0800da12

0800c008 <strtol>:
 800c008:	4613      	mov	r3, r2
 800c00a:	460a      	mov	r2, r1
 800c00c:	4601      	mov	r1, r0
 800c00e:	4802      	ldr	r0, [pc, #8]	; (800c018 <strtol+0x10>)
 800c010:	6800      	ldr	r0, [r0, #0]
 800c012:	f7ff bf77 	b.w	800bf04 <_strtol_l.constprop.0>
 800c016:	bf00      	nop
 800c018:	20000194 	.word	0x20000194

0800c01c <__utoa>:
 800c01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c01e:	4c1f      	ldr	r4, [pc, #124]	; (800c09c <__utoa+0x80>)
 800c020:	b08b      	sub	sp, #44	; 0x2c
 800c022:	4605      	mov	r5, r0
 800c024:	460b      	mov	r3, r1
 800c026:	466e      	mov	r6, sp
 800c028:	f104 0c20 	add.w	ip, r4, #32
 800c02c:	6820      	ldr	r0, [r4, #0]
 800c02e:	6861      	ldr	r1, [r4, #4]
 800c030:	4637      	mov	r7, r6
 800c032:	c703      	stmia	r7!, {r0, r1}
 800c034:	3408      	adds	r4, #8
 800c036:	4564      	cmp	r4, ip
 800c038:	463e      	mov	r6, r7
 800c03a:	d1f7      	bne.n	800c02c <__utoa+0x10>
 800c03c:	7921      	ldrb	r1, [r4, #4]
 800c03e:	7139      	strb	r1, [r7, #4]
 800c040:	1e91      	subs	r1, r2, #2
 800c042:	6820      	ldr	r0, [r4, #0]
 800c044:	6038      	str	r0, [r7, #0]
 800c046:	2922      	cmp	r1, #34	; 0x22
 800c048:	f04f 0100 	mov.w	r1, #0
 800c04c:	d904      	bls.n	800c058 <__utoa+0x3c>
 800c04e:	7019      	strb	r1, [r3, #0]
 800c050:	460b      	mov	r3, r1
 800c052:	4618      	mov	r0, r3
 800c054:	b00b      	add	sp, #44	; 0x2c
 800c056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c058:	1e58      	subs	r0, r3, #1
 800c05a:	4684      	mov	ip, r0
 800c05c:	fbb5 f7f2 	udiv	r7, r5, r2
 800c060:	fb02 5617 	mls	r6, r2, r7, r5
 800c064:	3628      	adds	r6, #40	; 0x28
 800c066:	446e      	add	r6, sp
 800c068:	460c      	mov	r4, r1
 800c06a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c06e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c072:	462e      	mov	r6, r5
 800c074:	42b2      	cmp	r2, r6
 800c076:	f101 0101 	add.w	r1, r1, #1
 800c07a:	463d      	mov	r5, r7
 800c07c:	d9ee      	bls.n	800c05c <__utoa+0x40>
 800c07e:	2200      	movs	r2, #0
 800c080:	545a      	strb	r2, [r3, r1]
 800c082:	1919      	adds	r1, r3, r4
 800c084:	1aa5      	subs	r5, r4, r2
 800c086:	42aa      	cmp	r2, r5
 800c088:	dae3      	bge.n	800c052 <__utoa+0x36>
 800c08a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c08e:	780e      	ldrb	r6, [r1, #0]
 800c090:	7006      	strb	r6, [r0, #0]
 800c092:	3201      	adds	r2, #1
 800c094:	f801 5901 	strb.w	r5, [r1], #-1
 800c098:	e7f4      	b.n	800c084 <__utoa+0x68>
 800c09a:	bf00      	nop
 800c09c:	0800d9ec 	.word	0x0800d9ec

0800c0a0 <std>:
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	b510      	push	{r4, lr}
 800c0a4:	4604      	mov	r4, r0
 800c0a6:	e9c0 3300 	strd	r3, r3, [r0]
 800c0aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c0ae:	6083      	str	r3, [r0, #8]
 800c0b0:	8181      	strh	r1, [r0, #12]
 800c0b2:	6643      	str	r3, [r0, #100]	; 0x64
 800c0b4:	81c2      	strh	r2, [r0, #14]
 800c0b6:	6183      	str	r3, [r0, #24]
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	2208      	movs	r2, #8
 800c0bc:	305c      	adds	r0, #92	; 0x5c
 800c0be:	f000 f902 	bl	800c2c6 <memset>
 800c0c2:	4b05      	ldr	r3, [pc, #20]	; (800c0d8 <std+0x38>)
 800c0c4:	6263      	str	r3, [r4, #36]	; 0x24
 800c0c6:	4b05      	ldr	r3, [pc, #20]	; (800c0dc <std+0x3c>)
 800c0c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c0ca:	4b05      	ldr	r3, [pc, #20]	; (800c0e0 <std+0x40>)
 800c0cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c0ce:	4b05      	ldr	r3, [pc, #20]	; (800c0e4 <std+0x44>)
 800c0d0:	6224      	str	r4, [r4, #32]
 800c0d2:	6323      	str	r3, [r4, #48]	; 0x30
 800c0d4:	bd10      	pop	{r4, pc}
 800c0d6:	bf00      	nop
 800c0d8:	0800c241 	.word	0x0800c241
 800c0dc:	0800c263 	.word	0x0800c263
 800c0e0:	0800c29b 	.word	0x0800c29b
 800c0e4:	0800c2bf 	.word	0x0800c2bf

0800c0e8 <stdio_exit_handler>:
 800c0e8:	4a02      	ldr	r2, [pc, #8]	; (800c0f4 <stdio_exit_handler+0xc>)
 800c0ea:	4903      	ldr	r1, [pc, #12]	; (800c0f8 <stdio_exit_handler+0x10>)
 800c0ec:	4803      	ldr	r0, [pc, #12]	; (800c0fc <stdio_exit_handler+0x14>)
 800c0ee:	f000 b869 	b.w	800c1c4 <_fwalk_sglue>
 800c0f2:	bf00      	nop
 800c0f4:	2000013c 	.word	0x2000013c
 800c0f8:	0800cdc1 	.word	0x0800cdc1
 800c0fc:	20000148 	.word	0x20000148

0800c100 <cleanup_stdio>:
 800c100:	6841      	ldr	r1, [r0, #4]
 800c102:	4b0c      	ldr	r3, [pc, #48]	; (800c134 <cleanup_stdio+0x34>)
 800c104:	4299      	cmp	r1, r3
 800c106:	b510      	push	{r4, lr}
 800c108:	4604      	mov	r4, r0
 800c10a:	d001      	beq.n	800c110 <cleanup_stdio+0x10>
 800c10c:	f000 fe58 	bl	800cdc0 <_fflush_r>
 800c110:	68a1      	ldr	r1, [r4, #8]
 800c112:	4b09      	ldr	r3, [pc, #36]	; (800c138 <cleanup_stdio+0x38>)
 800c114:	4299      	cmp	r1, r3
 800c116:	d002      	beq.n	800c11e <cleanup_stdio+0x1e>
 800c118:	4620      	mov	r0, r4
 800c11a:	f000 fe51 	bl	800cdc0 <_fflush_r>
 800c11e:	68e1      	ldr	r1, [r4, #12]
 800c120:	4b06      	ldr	r3, [pc, #24]	; (800c13c <cleanup_stdio+0x3c>)
 800c122:	4299      	cmp	r1, r3
 800c124:	d004      	beq.n	800c130 <cleanup_stdio+0x30>
 800c126:	4620      	mov	r0, r4
 800c128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c12c:	f000 be48 	b.w	800cdc0 <_fflush_r>
 800c130:	bd10      	pop	{r4, pc}
 800c132:	bf00      	nop
 800c134:	20002d58 	.word	0x20002d58
 800c138:	20002dc0 	.word	0x20002dc0
 800c13c:	20002e28 	.word	0x20002e28

0800c140 <global_stdio_init.part.0>:
 800c140:	b510      	push	{r4, lr}
 800c142:	4b0b      	ldr	r3, [pc, #44]	; (800c170 <global_stdio_init.part.0+0x30>)
 800c144:	4c0b      	ldr	r4, [pc, #44]	; (800c174 <global_stdio_init.part.0+0x34>)
 800c146:	4a0c      	ldr	r2, [pc, #48]	; (800c178 <global_stdio_init.part.0+0x38>)
 800c148:	601a      	str	r2, [r3, #0]
 800c14a:	4620      	mov	r0, r4
 800c14c:	2200      	movs	r2, #0
 800c14e:	2104      	movs	r1, #4
 800c150:	f7ff ffa6 	bl	800c0a0 <std>
 800c154:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c158:	2201      	movs	r2, #1
 800c15a:	2109      	movs	r1, #9
 800c15c:	f7ff ffa0 	bl	800c0a0 <std>
 800c160:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c164:	2202      	movs	r2, #2
 800c166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c16a:	2112      	movs	r1, #18
 800c16c:	f7ff bf98 	b.w	800c0a0 <std>
 800c170:	20002e90 	.word	0x20002e90
 800c174:	20002d58 	.word	0x20002d58
 800c178:	0800c0e9 	.word	0x0800c0e9

0800c17c <__sfp_lock_acquire>:
 800c17c:	4801      	ldr	r0, [pc, #4]	; (800c184 <__sfp_lock_acquire+0x8>)
 800c17e:	f000 b989 	b.w	800c494 <__retarget_lock_acquire_recursive>
 800c182:	bf00      	nop
 800c184:	20002e99 	.word	0x20002e99

0800c188 <__sfp_lock_release>:
 800c188:	4801      	ldr	r0, [pc, #4]	; (800c190 <__sfp_lock_release+0x8>)
 800c18a:	f000 b984 	b.w	800c496 <__retarget_lock_release_recursive>
 800c18e:	bf00      	nop
 800c190:	20002e99 	.word	0x20002e99

0800c194 <__sinit>:
 800c194:	b510      	push	{r4, lr}
 800c196:	4604      	mov	r4, r0
 800c198:	f7ff fff0 	bl	800c17c <__sfp_lock_acquire>
 800c19c:	6a23      	ldr	r3, [r4, #32]
 800c19e:	b11b      	cbz	r3, 800c1a8 <__sinit+0x14>
 800c1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1a4:	f7ff bff0 	b.w	800c188 <__sfp_lock_release>
 800c1a8:	4b04      	ldr	r3, [pc, #16]	; (800c1bc <__sinit+0x28>)
 800c1aa:	6223      	str	r3, [r4, #32]
 800c1ac:	4b04      	ldr	r3, [pc, #16]	; (800c1c0 <__sinit+0x2c>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d1f5      	bne.n	800c1a0 <__sinit+0xc>
 800c1b4:	f7ff ffc4 	bl	800c140 <global_stdio_init.part.0>
 800c1b8:	e7f2      	b.n	800c1a0 <__sinit+0xc>
 800c1ba:	bf00      	nop
 800c1bc:	0800c101 	.word	0x0800c101
 800c1c0:	20002e90 	.word	0x20002e90

0800c1c4 <_fwalk_sglue>:
 800c1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1c8:	4607      	mov	r7, r0
 800c1ca:	4688      	mov	r8, r1
 800c1cc:	4614      	mov	r4, r2
 800c1ce:	2600      	movs	r6, #0
 800c1d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1d4:	f1b9 0901 	subs.w	r9, r9, #1
 800c1d8:	d505      	bpl.n	800c1e6 <_fwalk_sglue+0x22>
 800c1da:	6824      	ldr	r4, [r4, #0]
 800c1dc:	2c00      	cmp	r4, #0
 800c1de:	d1f7      	bne.n	800c1d0 <_fwalk_sglue+0xc>
 800c1e0:	4630      	mov	r0, r6
 800c1e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1e6:	89ab      	ldrh	r3, [r5, #12]
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d907      	bls.n	800c1fc <_fwalk_sglue+0x38>
 800c1ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	d003      	beq.n	800c1fc <_fwalk_sglue+0x38>
 800c1f4:	4629      	mov	r1, r5
 800c1f6:	4638      	mov	r0, r7
 800c1f8:	47c0      	blx	r8
 800c1fa:	4306      	orrs	r6, r0
 800c1fc:	3568      	adds	r5, #104	; 0x68
 800c1fe:	e7e9      	b.n	800c1d4 <_fwalk_sglue+0x10>

0800c200 <siprintf>:
 800c200:	b40e      	push	{r1, r2, r3}
 800c202:	b500      	push	{lr}
 800c204:	b09c      	sub	sp, #112	; 0x70
 800c206:	ab1d      	add	r3, sp, #116	; 0x74
 800c208:	9002      	str	r0, [sp, #8]
 800c20a:	9006      	str	r0, [sp, #24]
 800c20c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c210:	4809      	ldr	r0, [pc, #36]	; (800c238 <siprintf+0x38>)
 800c212:	9107      	str	r1, [sp, #28]
 800c214:	9104      	str	r1, [sp, #16]
 800c216:	4909      	ldr	r1, [pc, #36]	; (800c23c <siprintf+0x3c>)
 800c218:	f853 2b04 	ldr.w	r2, [r3], #4
 800c21c:	9105      	str	r1, [sp, #20]
 800c21e:	6800      	ldr	r0, [r0, #0]
 800c220:	9301      	str	r3, [sp, #4]
 800c222:	a902      	add	r1, sp, #8
 800c224:	f000 fab8 	bl	800c798 <_svfiprintf_r>
 800c228:	9b02      	ldr	r3, [sp, #8]
 800c22a:	2200      	movs	r2, #0
 800c22c:	701a      	strb	r2, [r3, #0]
 800c22e:	b01c      	add	sp, #112	; 0x70
 800c230:	f85d eb04 	ldr.w	lr, [sp], #4
 800c234:	b003      	add	sp, #12
 800c236:	4770      	bx	lr
 800c238:	20000194 	.word	0x20000194
 800c23c:	ffff0208 	.word	0xffff0208

0800c240 <__sread>:
 800c240:	b510      	push	{r4, lr}
 800c242:	460c      	mov	r4, r1
 800c244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c248:	f000 f8d6 	bl	800c3f8 <_read_r>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	bfab      	itete	ge
 800c250:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c252:	89a3      	ldrhlt	r3, [r4, #12]
 800c254:	181b      	addge	r3, r3, r0
 800c256:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c25a:	bfac      	ite	ge
 800c25c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c25e:	81a3      	strhlt	r3, [r4, #12]
 800c260:	bd10      	pop	{r4, pc}

0800c262 <__swrite>:
 800c262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c266:	461f      	mov	r7, r3
 800c268:	898b      	ldrh	r3, [r1, #12]
 800c26a:	05db      	lsls	r3, r3, #23
 800c26c:	4605      	mov	r5, r0
 800c26e:	460c      	mov	r4, r1
 800c270:	4616      	mov	r6, r2
 800c272:	d505      	bpl.n	800c280 <__swrite+0x1e>
 800c274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c278:	2302      	movs	r3, #2
 800c27a:	2200      	movs	r2, #0
 800c27c:	f000 f8aa 	bl	800c3d4 <_lseek_r>
 800c280:	89a3      	ldrh	r3, [r4, #12]
 800c282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c286:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c28a:	81a3      	strh	r3, [r4, #12]
 800c28c:	4632      	mov	r2, r6
 800c28e:	463b      	mov	r3, r7
 800c290:	4628      	mov	r0, r5
 800c292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c296:	f000 b8c1 	b.w	800c41c <_write_r>

0800c29a <__sseek>:
 800c29a:	b510      	push	{r4, lr}
 800c29c:	460c      	mov	r4, r1
 800c29e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2a2:	f000 f897 	bl	800c3d4 <_lseek_r>
 800c2a6:	1c43      	adds	r3, r0, #1
 800c2a8:	89a3      	ldrh	r3, [r4, #12]
 800c2aa:	bf15      	itete	ne
 800c2ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800c2ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c2b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c2b6:	81a3      	strheq	r3, [r4, #12]
 800c2b8:	bf18      	it	ne
 800c2ba:	81a3      	strhne	r3, [r4, #12]
 800c2bc:	bd10      	pop	{r4, pc}

0800c2be <__sclose>:
 800c2be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2c2:	f000 b877 	b.w	800c3b4 <_close_r>

0800c2c6 <memset>:
 800c2c6:	4402      	add	r2, r0
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d100      	bne.n	800c2d0 <memset+0xa>
 800c2ce:	4770      	bx	lr
 800c2d0:	f803 1b01 	strb.w	r1, [r3], #1
 800c2d4:	e7f9      	b.n	800c2ca <memset+0x4>

0800c2d6 <strncat>:
 800c2d6:	b530      	push	{r4, r5, lr}
 800c2d8:	4604      	mov	r4, r0
 800c2da:	7825      	ldrb	r5, [r4, #0]
 800c2dc:	4623      	mov	r3, r4
 800c2de:	3401      	adds	r4, #1
 800c2e0:	2d00      	cmp	r5, #0
 800c2e2:	d1fa      	bne.n	800c2da <strncat+0x4>
 800c2e4:	3a01      	subs	r2, #1
 800c2e6:	d304      	bcc.n	800c2f2 <strncat+0x1c>
 800c2e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2ec:	f803 4b01 	strb.w	r4, [r3], #1
 800c2f0:	b904      	cbnz	r4, 800c2f4 <strncat+0x1e>
 800c2f2:	bd30      	pop	{r4, r5, pc}
 800c2f4:	2a00      	cmp	r2, #0
 800c2f6:	d1f5      	bne.n	800c2e4 <strncat+0xe>
 800c2f8:	701a      	strb	r2, [r3, #0]
 800c2fa:	e7f3      	b.n	800c2e4 <strncat+0xe>

0800c2fc <strtok>:
 800c2fc:	4b16      	ldr	r3, [pc, #88]	; (800c358 <strtok+0x5c>)
 800c2fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c300:	681e      	ldr	r6, [r3, #0]
 800c302:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800c304:	4605      	mov	r5, r0
 800c306:	b9fc      	cbnz	r4, 800c348 <strtok+0x4c>
 800c308:	2050      	movs	r0, #80	; 0x50
 800c30a:	9101      	str	r1, [sp, #4]
 800c30c:	f000 f936 	bl	800c57c <malloc>
 800c310:	9901      	ldr	r1, [sp, #4]
 800c312:	6470      	str	r0, [r6, #68]	; 0x44
 800c314:	4602      	mov	r2, r0
 800c316:	b920      	cbnz	r0, 800c322 <strtok+0x26>
 800c318:	4b10      	ldr	r3, [pc, #64]	; (800c35c <strtok+0x60>)
 800c31a:	4811      	ldr	r0, [pc, #68]	; (800c360 <strtok+0x64>)
 800c31c:	215b      	movs	r1, #91	; 0x5b
 800c31e:	f000 f8c3 	bl	800c4a8 <__assert_func>
 800c322:	e9c0 4400 	strd	r4, r4, [r0]
 800c326:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c32a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c32e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c332:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c336:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c33a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c33e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c342:	6184      	str	r4, [r0, #24]
 800c344:	7704      	strb	r4, [r0, #28]
 800c346:	6244      	str	r4, [r0, #36]	; 0x24
 800c348:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800c34a:	2301      	movs	r3, #1
 800c34c:	4628      	mov	r0, r5
 800c34e:	b002      	add	sp, #8
 800c350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c354:	f000 b806 	b.w	800c364 <__strtok_r>
 800c358:	20000194 	.word	0x20000194
 800c35c:	0800db12 	.word	0x0800db12
 800c360:	0800db29 	.word	0x0800db29

0800c364 <__strtok_r>:
 800c364:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c366:	b908      	cbnz	r0, 800c36c <__strtok_r+0x8>
 800c368:	6810      	ldr	r0, [r2, #0]
 800c36a:	b188      	cbz	r0, 800c390 <__strtok_r+0x2c>
 800c36c:	4604      	mov	r4, r0
 800c36e:	4620      	mov	r0, r4
 800c370:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c374:	460f      	mov	r7, r1
 800c376:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c37a:	b91e      	cbnz	r6, 800c384 <__strtok_r+0x20>
 800c37c:	b965      	cbnz	r5, 800c398 <__strtok_r+0x34>
 800c37e:	6015      	str	r5, [r2, #0]
 800c380:	4628      	mov	r0, r5
 800c382:	e005      	b.n	800c390 <__strtok_r+0x2c>
 800c384:	42b5      	cmp	r5, r6
 800c386:	d1f6      	bne.n	800c376 <__strtok_r+0x12>
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d1f0      	bne.n	800c36e <__strtok_r+0xa>
 800c38c:	6014      	str	r4, [r2, #0]
 800c38e:	7003      	strb	r3, [r0, #0]
 800c390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c392:	461c      	mov	r4, r3
 800c394:	e00c      	b.n	800c3b0 <__strtok_r+0x4c>
 800c396:	b915      	cbnz	r5, 800c39e <__strtok_r+0x3a>
 800c398:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c39c:	460e      	mov	r6, r1
 800c39e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c3a2:	42ab      	cmp	r3, r5
 800c3a4:	d1f7      	bne.n	800c396 <__strtok_r+0x32>
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d0f3      	beq.n	800c392 <__strtok_r+0x2e>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c3b0:	6014      	str	r4, [r2, #0]
 800c3b2:	e7ed      	b.n	800c390 <__strtok_r+0x2c>

0800c3b4 <_close_r>:
 800c3b4:	b538      	push	{r3, r4, r5, lr}
 800c3b6:	4d06      	ldr	r5, [pc, #24]	; (800c3d0 <_close_r+0x1c>)
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	4604      	mov	r4, r0
 800c3bc:	4608      	mov	r0, r1
 800c3be:	602b      	str	r3, [r5, #0]
 800c3c0:	f7f5 fcf7 	bl	8001db2 <_close>
 800c3c4:	1c43      	adds	r3, r0, #1
 800c3c6:	d102      	bne.n	800c3ce <_close_r+0x1a>
 800c3c8:	682b      	ldr	r3, [r5, #0]
 800c3ca:	b103      	cbz	r3, 800c3ce <_close_r+0x1a>
 800c3cc:	6023      	str	r3, [r4, #0]
 800c3ce:	bd38      	pop	{r3, r4, r5, pc}
 800c3d0:	20002e94 	.word	0x20002e94

0800c3d4 <_lseek_r>:
 800c3d4:	b538      	push	{r3, r4, r5, lr}
 800c3d6:	4d07      	ldr	r5, [pc, #28]	; (800c3f4 <_lseek_r+0x20>)
 800c3d8:	4604      	mov	r4, r0
 800c3da:	4608      	mov	r0, r1
 800c3dc:	4611      	mov	r1, r2
 800c3de:	2200      	movs	r2, #0
 800c3e0:	602a      	str	r2, [r5, #0]
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	f7f5 fd0c 	bl	8001e00 <_lseek>
 800c3e8:	1c43      	adds	r3, r0, #1
 800c3ea:	d102      	bne.n	800c3f2 <_lseek_r+0x1e>
 800c3ec:	682b      	ldr	r3, [r5, #0]
 800c3ee:	b103      	cbz	r3, 800c3f2 <_lseek_r+0x1e>
 800c3f0:	6023      	str	r3, [r4, #0]
 800c3f2:	bd38      	pop	{r3, r4, r5, pc}
 800c3f4:	20002e94 	.word	0x20002e94

0800c3f8 <_read_r>:
 800c3f8:	b538      	push	{r3, r4, r5, lr}
 800c3fa:	4d07      	ldr	r5, [pc, #28]	; (800c418 <_read_r+0x20>)
 800c3fc:	4604      	mov	r4, r0
 800c3fe:	4608      	mov	r0, r1
 800c400:	4611      	mov	r1, r2
 800c402:	2200      	movs	r2, #0
 800c404:	602a      	str	r2, [r5, #0]
 800c406:	461a      	mov	r2, r3
 800c408:	f7f5 fc9a 	bl	8001d40 <_read>
 800c40c:	1c43      	adds	r3, r0, #1
 800c40e:	d102      	bne.n	800c416 <_read_r+0x1e>
 800c410:	682b      	ldr	r3, [r5, #0]
 800c412:	b103      	cbz	r3, 800c416 <_read_r+0x1e>
 800c414:	6023      	str	r3, [r4, #0]
 800c416:	bd38      	pop	{r3, r4, r5, pc}
 800c418:	20002e94 	.word	0x20002e94

0800c41c <_write_r>:
 800c41c:	b538      	push	{r3, r4, r5, lr}
 800c41e:	4d07      	ldr	r5, [pc, #28]	; (800c43c <_write_r+0x20>)
 800c420:	4604      	mov	r4, r0
 800c422:	4608      	mov	r0, r1
 800c424:	4611      	mov	r1, r2
 800c426:	2200      	movs	r2, #0
 800c428:	602a      	str	r2, [r5, #0]
 800c42a:	461a      	mov	r2, r3
 800c42c:	f7f5 fca5 	bl	8001d7a <_write>
 800c430:	1c43      	adds	r3, r0, #1
 800c432:	d102      	bne.n	800c43a <_write_r+0x1e>
 800c434:	682b      	ldr	r3, [r5, #0]
 800c436:	b103      	cbz	r3, 800c43a <_write_r+0x1e>
 800c438:	6023      	str	r3, [r4, #0]
 800c43a:	bd38      	pop	{r3, r4, r5, pc}
 800c43c:	20002e94 	.word	0x20002e94

0800c440 <__errno>:
 800c440:	4b01      	ldr	r3, [pc, #4]	; (800c448 <__errno+0x8>)
 800c442:	6818      	ldr	r0, [r3, #0]
 800c444:	4770      	bx	lr
 800c446:	bf00      	nop
 800c448:	20000194 	.word	0x20000194

0800c44c <__libc_init_array>:
 800c44c:	b570      	push	{r4, r5, r6, lr}
 800c44e:	4d0d      	ldr	r5, [pc, #52]	; (800c484 <__libc_init_array+0x38>)
 800c450:	4c0d      	ldr	r4, [pc, #52]	; (800c488 <__libc_init_array+0x3c>)
 800c452:	1b64      	subs	r4, r4, r5
 800c454:	10a4      	asrs	r4, r4, #2
 800c456:	2600      	movs	r6, #0
 800c458:	42a6      	cmp	r6, r4
 800c45a:	d109      	bne.n	800c470 <__libc_init_array+0x24>
 800c45c:	4d0b      	ldr	r5, [pc, #44]	; (800c48c <__libc_init_array+0x40>)
 800c45e:	4c0c      	ldr	r4, [pc, #48]	; (800c490 <__libc_init_array+0x44>)
 800c460:	f001 f800 	bl	800d464 <_init>
 800c464:	1b64      	subs	r4, r4, r5
 800c466:	10a4      	asrs	r4, r4, #2
 800c468:	2600      	movs	r6, #0
 800c46a:	42a6      	cmp	r6, r4
 800c46c:	d105      	bne.n	800c47a <__libc_init_array+0x2e>
 800c46e:	bd70      	pop	{r4, r5, r6, pc}
 800c470:	f855 3b04 	ldr.w	r3, [r5], #4
 800c474:	4798      	blx	r3
 800c476:	3601      	adds	r6, #1
 800c478:	e7ee      	b.n	800c458 <__libc_init_array+0xc>
 800c47a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c47e:	4798      	blx	r3
 800c480:	3601      	adds	r6, #1
 800c482:	e7f2      	b.n	800c46a <__libc_init_array+0x1e>
 800c484:	0800dbfc 	.word	0x0800dbfc
 800c488:	0800dbfc 	.word	0x0800dbfc
 800c48c:	0800dbfc 	.word	0x0800dbfc
 800c490:	0800dc00 	.word	0x0800dc00

0800c494 <__retarget_lock_acquire_recursive>:
 800c494:	4770      	bx	lr

0800c496 <__retarget_lock_release_recursive>:
 800c496:	4770      	bx	lr

0800c498 <strcpy>:
 800c498:	4603      	mov	r3, r0
 800c49a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c49e:	f803 2b01 	strb.w	r2, [r3], #1
 800c4a2:	2a00      	cmp	r2, #0
 800c4a4:	d1f9      	bne.n	800c49a <strcpy+0x2>
 800c4a6:	4770      	bx	lr

0800c4a8 <__assert_func>:
 800c4a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c4aa:	4614      	mov	r4, r2
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	4b09      	ldr	r3, [pc, #36]	; (800c4d4 <__assert_func+0x2c>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4605      	mov	r5, r0
 800c4b4:	68d8      	ldr	r0, [r3, #12]
 800c4b6:	b14c      	cbz	r4, 800c4cc <__assert_func+0x24>
 800c4b8:	4b07      	ldr	r3, [pc, #28]	; (800c4d8 <__assert_func+0x30>)
 800c4ba:	9100      	str	r1, [sp, #0]
 800c4bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c4c0:	4906      	ldr	r1, [pc, #24]	; (800c4dc <__assert_func+0x34>)
 800c4c2:	462b      	mov	r3, r5
 800c4c4:	f000 fca4 	bl	800ce10 <fiprintf>
 800c4c8:	f000 fcec 	bl	800cea4 <abort>
 800c4cc:	4b04      	ldr	r3, [pc, #16]	; (800c4e0 <__assert_func+0x38>)
 800c4ce:	461c      	mov	r4, r3
 800c4d0:	e7f3      	b.n	800c4ba <__assert_func+0x12>
 800c4d2:	bf00      	nop
 800c4d4:	20000194 	.word	0x20000194
 800c4d8:	0800db83 	.word	0x0800db83
 800c4dc:	0800db90 	.word	0x0800db90
 800c4e0:	0800dbbe 	.word	0x0800dbbe

0800c4e4 <_free_r>:
 800c4e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4e6:	2900      	cmp	r1, #0
 800c4e8:	d044      	beq.n	800c574 <_free_r+0x90>
 800c4ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4ee:	9001      	str	r0, [sp, #4]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	f1a1 0404 	sub.w	r4, r1, #4
 800c4f6:	bfb8      	it	lt
 800c4f8:	18e4      	addlt	r4, r4, r3
 800c4fa:	f000 f8e7 	bl	800c6cc <__malloc_lock>
 800c4fe:	4a1e      	ldr	r2, [pc, #120]	; (800c578 <_free_r+0x94>)
 800c500:	9801      	ldr	r0, [sp, #4]
 800c502:	6813      	ldr	r3, [r2, #0]
 800c504:	b933      	cbnz	r3, 800c514 <_free_r+0x30>
 800c506:	6063      	str	r3, [r4, #4]
 800c508:	6014      	str	r4, [r2, #0]
 800c50a:	b003      	add	sp, #12
 800c50c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c510:	f000 b8e2 	b.w	800c6d8 <__malloc_unlock>
 800c514:	42a3      	cmp	r3, r4
 800c516:	d908      	bls.n	800c52a <_free_r+0x46>
 800c518:	6825      	ldr	r5, [r4, #0]
 800c51a:	1961      	adds	r1, r4, r5
 800c51c:	428b      	cmp	r3, r1
 800c51e:	bf01      	itttt	eq
 800c520:	6819      	ldreq	r1, [r3, #0]
 800c522:	685b      	ldreq	r3, [r3, #4]
 800c524:	1949      	addeq	r1, r1, r5
 800c526:	6021      	streq	r1, [r4, #0]
 800c528:	e7ed      	b.n	800c506 <_free_r+0x22>
 800c52a:	461a      	mov	r2, r3
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	b10b      	cbz	r3, 800c534 <_free_r+0x50>
 800c530:	42a3      	cmp	r3, r4
 800c532:	d9fa      	bls.n	800c52a <_free_r+0x46>
 800c534:	6811      	ldr	r1, [r2, #0]
 800c536:	1855      	adds	r5, r2, r1
 800c538:	42a5      	cmp	r5, r4
 800c53a:	d10b      	bne.n	800c554 <_free_r+0x70>
 800c53c:	6824      	ldr	r4, [r4, #0]
 800c53e:	4421      	add	r1, r4
 800c540:	1854      	adds	r4, r2, r1
 800c542:	42a3      	cmp	r3, r4
 800c544:	6011      	str	r1, [r2, #0]
 800c546:	d1e0      	bne.n	800c50a <_free_r+0x26>
 800c548:	681c      	ldr	r4, [r3, #0]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	6053      	str	r3, [r2, #4]
 800c54e:	440c      	add	r4, r1
 800c550:	6014      	str	r4, [r2, #0]
 800c552:	e7da      	b.n	800c50a <_free_r+0x26>
 800c554:	d902      	bls.n	800c55c <_free_r+0x78>
 800c556:	230c      	movs	r3, #12
 800c558:	6003      	str	r3, [r0, #0]
 800c55a:	e7d6      	b.n	800c50a <_free_r+0x26>
 800c55c:	6825      	ldr	r5, [r4, #0]
 800c55e:	1961      	adds	r1, r4, r5
 800c560:	428b      	cmp	r3, r1
 800c562:	bf04      	itt	eq
 800c564:	6819      	ldreq	r1, [r3, #0]
 800c566:	685b      	ldreq	r3, [r3, #4]
 800c568:	6063      	str	r3, [r4, #4]
 800c56a:	bf04      	itt	eq
 800c56c:	1949      	addeq	r1, r1, r5
 800c56e:	6021      	streq	r1, [r4, #0]
 800c570:	6054      	str	r4, [r2, #4]
 800c572:	e7ca      	b.n	800c50a <_free_r+0x26>
 800c574:	b003      	add	sp, #12
 800c576:	bd30      	pop	{r4, r5, pc}
 800c578:	20002e9c 	.word	0x20002e9c

0800c57c <malloc>:
 800c57c:	4b02      	ldr	r3, [pc, #8]	; (800c588 <malloc+0xc>)
 800c57e:	4601      	mov	r1, r0
 800c580:	6818      	ldr	r0, [r3, #0]
 800c582:	f000 b823 	b.w	800c5cc <_malloc_r>
 800c586:	bf00      	nop
 800c588:	20000194 	.word	0x20000194

0800c58c <sbrk_aligned>:
 800c58c:	b570      	push	{r4, r5, r6, lr}
 800c58e:	4e0e      	ldr	r6, [pc, #56]	; (800c5c8 <sbrk_aligned+0x3c>)
 800c590:	460c      	mov	r4, r1
 800c592:	6831      	ldr	r1, [r6, #0]
 800c594:	4605      	mov	r5, r0
 800c596:	b911      	cbnz	r1, 800c59e <sbrk_aligned+0x12>
 800c598:	f000 fc66 	bl	800ce68 <_sbrk_r>
 800c59c:	6030      	str	r0, [r6, #0]
 800c59e:	4621      	mov	r1, r4
 800c5a0:	4628      	mov	r0, r5
 800c5a2:	f000 fc61 	bl	800ce68 <_sbrk_r>
 800c5a6:	1c43      	adds	r3, r0, #1
 800c5a8:	d00a      	beq.n	800c5c0 <sbrk_aligned+0x34>
 800c5aa:	1cc4      	adds	r4, r0, #3
 800c5ac:	f024 0403 	bic.w	r4, r4, #3
 800c5b0:	42a0      	cmp	r0, r4
 800c5b2:	d007      	beq.n	800c5c4 <sbrk_aligned+0x38>
 800c5b4:	1a21      	subs	r1, r4, r0
 800c5b6:	4628      	mov	r0, r5
 800c5b8:	f000 fc56 	bl	800ce68 <_sbrk_r>
 800c5bc:	3001      	adds	r0, #1
 800c5be:	d101      	bne.n	800c5c4 <sbrk_aligned+0x38>
 800c5c0:	f04f 34ff 	mov.w	r4, #4294967295
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	bd70      	pop	{r4, r5, r6, pc}
 800c5c8:	20002ea0 	.word	0x20002ea0

0800c5cc <_malloc_r>:
 800c5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5d0:	1ccd      	adds	r5, r1, #3
 800c5d2:	f025 0503 	bic.w	r5, r5, #3
 800c5d6:	3508      	adds	r5, #8
 800c5d8:	2d0c      	cmp	r5, #12
 800c5da:	bf38      	it	cc
 800c5dc:	250c      	movcc	r5, #12
 800c5de:	2d00      	cmp	r5, #0
 800c5e0:	4607      	mov	r7, r0
 800c5e2:	db01      	blt.n	800c5e8 <_malloc_r+0x1c>
 800c5e4:	42a9      	cmp	r1, r5
 800c5e6:	d905      	bls.n	800c5f4 <_malloc_r+0x28>
 800c5e8:	230c      	movs	r3, #12
 800c5ea:	603b      	str	r3, [r7, #0]
 800c5ec:	2600      	movs	r6, #0
 800c5ee:	4630      	mov	r0, r6
 800c5f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c6c8 <_malloc_r+0xfc>
 800c5f8:	f000 f868 	bl	800c6cc <__malloc_lock>
 800c5fc:	f8d8 3000 	ldr.w	r3, [r8]
 800c600:	461c      	mov	r4, r3
 800c602:	bb5c      	cbnz	r4, 800c65c <_malloc_r+0x90>
 800c604:	4629      	mov	r1, r5
 800c606:	4638      	mov	r0, r7
 800c608:	f7ff ffc0 	bl	800c58c <sbrk_aligned>
 800c60c:	1c43      	adds	r3, r0, #1
 800c60e:	4604      	mov	r4, r0
 800c610:	d155      	bne.n	800c6be <_malloc_r+0xf2>
 800c612:	f8d8 4000 	ldr.w	r4, [r8]
 800c616:	4626      	mov	r6, r4
 800c618:	2e00      	cmp	r6, #0
 800c61a:	d145      	bne.n	800c6a8 <_malloc_r+0xdc>
 800c61c:	2c00      	cmp	r4, #0
 800c61e:	d048      	beq.n	800c6b2 <_malloc_r+0xe6>
 800c620:	6823      	ldr	r3, [r4, #0]
 800c622:	4631      	mov	r1, r6
 800c624:	4638      	mov	r0, r7
 800c626:	eb04 0903 	add.w	r9, r4, r3
 800c62a:	f000 fc1d 	bl	800ce68 <_sbrk_r>
 800c62e:	4581      	cmp	r9, r0
 800c630:	d13f      	bne.n	800c6b2 <_malloc_r+0xe6>
 800c632:	6821      	ldr	r1, [r4, #0]
 800c634:	1a6d      	subs	r5, r5, r1
 800c636:	4629      	mov	r1, r5
 800c638:	4638      	mov	r0, r7
 800c63a:	f7ff ffa7 	bl	800c58c <sbrk_aligned>
 800c63e:	3001      	adds	r0, #1
 800c640:	d037      	beq.n	800c6b2 <_malloc_r+0xe6>
 800c642:	6823      	ldr	r3, [r4, #0]
 800c644:	442b      	add	r3, r5
 800c646:	6023      	str	r3, [r4, #0]
 800c648:	f8d8 3000 	ldr.w	r3, [r8]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d038      	beq.n	800c6c2 <_malloc_r+0xf6>
 800c650:	685a      	ldr	r2, [r3, #4]
 800c652:	42a2      	cmp	r2, r4
 800c654:	d12b      	bne.n	800c6ae <_malloc_r+0xe2>
 800c656:	2200      	movs	r2, #0
 800c658:	605a      	str	r2, [r3, #4]
 800c65a:	e00f      	b.n	800c67c <_malloc_r+0xb0>
 800c65c:	6822      	ldr	r2, [r4, #0]
 800c65e:	1b52      	subs	r2, r2, r5
 800c660:	d41f      	bmi.n	800c6a2 <_malloc_r+0xd6>
 800c662:	2a0b      	cmp	r2, #11
 800c664:	d917      	bls.n	800c696 <_malloc_r+0xca>
 800c666:	1961      	adds	r1, r4, r5
 800c668:	42a3      	cmp	r3, r4
 800c66a:	6025      	str	r5, [r4, #0]
 800c66c:	bf18      	it	ne
 800c66e:	6059      	strne	r1, [r3, #4]
 800c670:	6863      	ldr	r3, [r4, #4]
 800c672:	bf08      	it	eq
 800c674:	f8c8 1000 	streq.w	r1, [r8]
 800c678:	5162      	str	r2, [r4, r5]
 800c67a:	604b      	str	r3, [r1, #4]
 800c67c:	4638      	mov	r0, r7
 800c67e:	f104 060b 	add.w	r6, r4, #11
 800c682:	f000 f829 	bl	800c6d8 <__malloc_unlock>
 800c686:	f026 0607 	bic.w	r6, r6, #7
 800c68a:	1d23      	adds	r3, r4, #4
 800c68c:	1af2      	subs	r2, r6, r3
 800c68e:	d0ae      	beq.n	800c5ee <_malloc_r+0x22>
 800c690:	1b9b      	subs	r3, r3, r6
 800c692:	50a3      	str	r3, [r4, r2]
 800c694:	e7ab      	b.n	800c5ee <_malloc_r+0x22>
 800c696:	42a3      	cmp	r3, r4
 800c698:	6862      	ldr	r2, [r4, #4]
 800c69a:	d1dd      	bne.n	800c658 <_malloc_r+0x8c>
 800c69c:	f8c8 2000 	str.w	r2, [r8]
 800c6a0:	e7ec      	b.n	800c67c <_malloc_r+0xb0>
 800c6a2:	4623      	mov	r3, r4
 800c6a4:	6864      	ldr	r4, [r4, #4]
 800c6a6:	e7ac      	b.n	800c602 <_malloc_r+0x36>
 800c6a8:	4634      	mov	r4, r6
 800c6aa:	6876      	ldr	r6, [r6, #4]
 800c6ac:	e7b4      	b.n	800c618 <_malloc_r+0x4c>
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	e7cc      	b.n	800c64c <_malloc_r+0x80>
 800c6b2:	230c      	movs	r3, #12
 800c6b4:	603b      	str	r3, [r7, #0]
 800c6b6:	4638      	mov	r0, r7
 800c6b8:	f000 f80e 	bl	800c6d8 <__malloc_unlock>
 800c6bc:	e797      	b.n	800c5ee <_malloc_r+0x22>
 800c6be:	6025      	str	r5, [r4, #0]
 800c6c0:	e7dc      	b.n	800c67c <_malloc_r+0xb0>
 800c6c2:	605b      	str	r3, [r3, #4]
 800c6c4:	deff      	udf	#255	; 0xff
 800c6c6:	bf00      	nop
 800c6c8:	20002e9c 	.word	0x20002e9c

0800c6cc <__malloc_lock>:
 800c6cc:	4801      	ldr	r0, [pc, #4]	; (800c6d4 <__malloc_lock+0x8>)
 800c6ce:	f7ff bee1 	b.w	800c494 <__retarget_lock_acquire_recursive>
 800c6d2:	bf00      	nop
 800c6d4:	20002e98 	.word	0x20002e98

0800c6d8 <__malloc_unlock>:
 800c6d8:	4801      	ldr	r0, [pc, #4]	; (800c6e0 <__malloc_unlock+0x8>)
 800c6da:	f7ff bedc 	b.w	800c496 <__retarget_lock_release_recursive>
 800c6de:	bf00      	nop
 800c6e0:	20002e98 	.word	0x20002e98

0800c6e4 <__ssputs_r>:
 800c6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6e8:	688e      	ldr	r6, [r1, #8]
 800c6ea:	461f      	mov	r7, r3
 800c6ec:	42be      	cmp	r6, r7
 800c6ee:	680b      	ldr	r3, [r1, #0]
 800c6f0:	4682      	mov	sl, r0
 800c6f2:	460c      	mov	r4, r1
 800c6f4:	4690      	mov	r8, r2
 800c6f6:	d82c      	bhi.n	800c752 <__ssputs_r+0x6e>
 800c6f8:	898a      	ldrh	r2, [r1, #12]
 800c6fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c6fe:	d026      	beq.n	800c74e <__ssputs_r+0x6a>
 800c700:	6965      	ldr	r5, [r4, #20]
 800c702:	6909      	ldr	r1, [r1, #16]
 800c704:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c708:	eba3 0901 	sub.w	r9, r3, r1
 800c70c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c710:	1c7b      	adds	r3, r7, #1
 800c712:	444b      	add	r3, r9
 800c714:	106d      	asrs	r5, r5, #1
 800c716:	429d      	cmp	r5, r3
 800c718:	bf38      	it	cc
 800c71a:	461d      	movcc	r5, r3
 800c71c:	0553      	lsls	r3, r2, #21
 800c71e:	d527      	bpl.n	800c770 <__ssputs_r+0x8c>
 800c720:	4629      	mov	r1, r5
 800c722:	f7ff ff53 	bl	800c5cc <_malloc_r>
 800c726:	4606      	mov	r6, r0
 800c728:	b360      	cbz	r0, 800c784 <__ssputs_r+0xa0>
 800c72a:	6921      	ldr	r1, [r4, #16]
 800c72c:	464a      	mov	r2, r9
 800c72e:	f000 fbab 	bl	800ce88 <memcpy>
 800c732:	89a3      	ldrh	r3, [r4, #12]
 800c734:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c73c:	81a3      	strh	r3, [r4, #12]
 800c73e:	6126      	str	r6, [r4, #16]
 800c740:	6165      	str	r5, [r4, #20]
 800c742:	444e      	add	r6, r9
 800c744:	eba5 0509 	sub.w	r5, r5, r9
 800c748:	6026      	str	r6, [r4, #0]
 800c74a:	60a5      	str	r5, [r4, #8]
 800c74c:	463e      	mov	r6, r7
 800c74e:	42be      	cmp	r6, r7
 800c750:	d900      	bls.n	800c754 <__ssputs_r+0x70>
 800c752:	463e      	mov	r6, r7
 800c754:	6820      	ldr	r0, [r4, #0]
 800c756:	4632      	mov	r2, r6
 800c758:	4641      	mov	r1, r8
 800c75a:	f000 fb6b 	bl	800ce34 <memmove>
 800c75e:	68a3      	ldr	r3, [r4, #8]
 800c760:	1b9b      	subs	r3, r3, r6
 800c762:	60a3      	str	r3, [r4, #8]
 800c764:	6823      	ldr	r3, [r4, #0]
 800c766:	4433      	add	r3, r6
 800c768:	6023      	str	r3, [r4, #0]
 800c76a:	2000      	movs	r0, #0
 800c76c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c770:	462a      	mov	r2, r5
 800c772:	f000 fb9e 	bl	800ceb2 <_realloc_r>
 800c776:	4606      	mov	r6, r0
 800c778:	2800      	cmp	r0, #0
 800c77a:	d1e0      	bne.n	800c73e <__ssputs_r+0x5a>
 800c77c:	6921      	ldr	r1, [r4, #16]
 800c77e:	4650      	mov	r0, sl
 800c780:	f7ff feb0 	bl	800c4e4 <_free_r>
 800c784:	230c      	movs	r3, #12
 800c786:	f8ca 3000 	str.w	r3, [sl]
 800c78a:	89a3      	ldrh	r3, [r4, #12]
 800c78c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c790:	81a3      	strh	r3, [r4, #12]
 800c792:	f04f 30ff 	mov.w	r0, #4294967295
 800c796:	e7e9      	b.n	800c76c <__ssputs_r+0x88>

0800c798 <_svfiprintf_r>:
 800c798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c79c:	4698      	mov	r8, r3
 800c79e:	898b      	ldrh	r3, [r1, #12]
 800c7a0:	061b      	lsls	r3, r3, #24
 800c7a2:	b09d      	sub	sp, #116	; 0x74
 800c7a4:	4607      	mov	r7, r0
 800c7a6:	460d      	mov	r5, r1
 800c7a8:	4614      	mov	r4, r2
 800c7aa:	d50e      	bpl.n	800c7ca <_svfiprintf_r+0x32>
 800c7ac:	690b      	ldr	r3, [r1, #16]
 800c7ae:	b963      	cbnz	r3, 800c7ca <_svfiprintf_r+0x32>
 800c7b0:	2140      	movs	r1, #64	; 0x40
 800c7b2:	f7ff ff0b 	bl	800c5cc <_malloc_r>
 800c7b6:	6028      	str	r0, [r5, #0]
 800c7b8:	6128      	str	r0, [r5, #16]
 800c7ba:	b920      	cbnz	r0, 800c7c6 <_svfiprintf_r+0x2e>
 800c7bc:	230c      	movs	r3, #12
 800c7be:	603b      	str	r3, [r7, #0]
 800c7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c4:	e0d0      	b.n	800c968 <_svfiprintf_r+0x1d0>
 800c7c6:	2340      	movs	r3, #64	; 0x40
 800c7c8:	616b      	str	r3, [r5, #20]
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c7ce:	2320      	movs	r3, #32
 800c7d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7d8:	2330      	movs	r3, #48	; 0x30
 800c7da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c980 <_svfiprintf_r+0x1e8>
 800c7de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7e2:	f04f 0901 	mov.w	r9, #1
 800c7e6:	4623      	mov	r3, r4
 800c7e8:	469a      	mov	sl, r3
 800c7ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7ee:	b10a      	cbz	r2, 800c7f4 <_svfiprintf_r+0x5c>
 800c7f0:	2a25      	cmp	r2, #37	; 0x25
 800c7f2:	d1f9      	bne.n	800c7e8 <_svfiprintf_r+0x50>
 800c7f4:	ebba 0b04 	subs.w	fp, sl, r4
 800c7f8:	d00b      	beq.n	800c812 <_svfiprintf_r+0x7a>
 800c7fa:	465b      	mov	r3, fp
 800c7fc:	4622      	mov	r2, r4
 800c7fe:	4629      	mov	r1, r5
 800c800:	4638      	mov	r0, r7
 800c802:	f7ff ff6f 	bl	800c6e4 <__ssputs_r>
 800c806:	3001      	adds	r0, #1
 800c808:	f000 80a9 	beq.w	800c95e <_svfiprintf_r+0x1c6>
 800c80c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c80e:	445a      	add	r2, fp
 800c810:	9209      	str	r2, [sp, #36]	; 0x24
 800c812:	f89a 3000 	ldrb.w	r3, [sl]
 800c816:	2b00      	cmp	r3, #0
 800c818:	f000 80a1 	beq.w	800c95e <_svfiprintf_r+0x1c6>
 800c81c:	2300      	movs	r3, #0
 800c81e:	f04f 32ff 	mov.w	r2, #4294967295
 800c822:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c826:	f10a 0a01 	add.w	sl, sl, #1
 800c82a:	9304      	str	r3, [sp, #16]
 800c82c:	9307      	str	r3, [sp, #28]
 800c82e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c832:	931a      	str	r3, [sp, #104]	; 0x68
 800c834:	4654      	mov	r4, sl
 800c836:	2205      	movs	r2, #5
 800c838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c83c:	4850      	ldr	r0, [pc, #320]	; (800c980 <_svfiprintf_r+0x1e8>)
 800c83e:	f7f3 fce7 	bl	8000210 <memchr>
 800c842:	9a04      	ldr	r2, [sp, #16]
 800c844:	b9d8      	cbnz	r0, 800c87e <_svfiprintf_r+0xe6>
 800c846:	06d0      	lsls	r0, r2, #27
 800c848:	bf44      	itt	mi
 800c84a:	2320      	movmi	r3, #32
 800c84c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c850:	0711      	lsls	r1, r2, #28
 800c852:	bf44      	itt	mi
 800c854:	232b      	movmi	r3, #43	; 0x2b
 800c856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c85a:	f89a 3000 	ldrb.w	r3, [sl]
 800c85e:	2b2a      	cmp	r3, #42	; 0x2a
 800c860:	d015      	beq.n	800c88e <_svfiprintf_r+0xf6>
 800c862:	9a07      	ldr	r2, [sp, #28]
 800c864:	4654      	mov	r4, sl
 800c866:	2000      	movs	r0, #0
 800c868:	f04f 0c0a 	mov.w	ip, #10
 800c86c:	4621      	mov	r1, r4
 800c86e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c872:	3b30      	subs	r3, #48	; 0x30
 800c874:	2b09      	cmp	r3, #9
 800c876:	d94d      	bls.n	800c914 <_svfiprintf_r+0x17c>
 800c878:	b1b0      	cbz	r0, 800c8a8 <_svfiprintf_r+0x110>
 800c87a:	9207      	str	r2, [sp, #28]
 800c87c:	e014      	b.n	800c8a8 <_svfiprintf_r+0x110>
 800c87e:	eba0 0308 	sub.w	r3, r0, r8
 800c882:	fa09 f303 	lsl.w	r3, r9, r3
 800c886:	4313      	orrs	r3, r2
 800c888:	9304      	str	r3, [sp, #16]
 800c88a:	46a2      	mov	sl, r4
 800c88c:	e7d2      	b.n	800c834 <_svfiprintf_r+0x9c>
 800c88e:	9b03      	ldr	r3, [sp, #12]
 800c890:	1d19      	adds	r1, r3, #4
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	9103      	str	r1, [sp, #12]
 800c896:	2b00      	cmp	r3, #0
 800c898:	bfbb      	ittet	lt
 800c89a:	425b      	neglt	r3, r3
 800c89c:	f042 0202 	orrlt.w	r2, r2, #2
 800c8a0:	9307      	strge	r3, [sp, #28]
 800c8a2:	9307      	strlt	r3, [sp, #28]
 800c8a4:	bfb8      	it	lt
 800c8a6:	9204      	strlt	r2, [sp, #16]
 800c8a8:	7823      	ldrb	r3, [r4, #0]
 800c8aa:	2b2e      	cmp	r3, #46	; 0x2e
 800c8ac:	d10c      	bne.n	800c8c8 <_svfiprintf_r+0x130>
 800c8ae:	7863      	ldrb	r3, [r4, #1]
 800c8b0:	2b2a      	cmp	r3, #42	; 0x2a
 800c8b2:	d134      	bne.n	800c91e <_svfiprintf_r+0x186>
 800c8b4:	9b03      	ldr	r3, [sp, #12]
 800c8b6:	1d1a      	adds	r2, r3, #4
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	9203      	str	r2, [sp, #12]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	bfb8      	it	lt
 800c8c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8c4:	3402      	adds	r4, #2
 800c8c6:	9305      	str	r3, [sp, #20]
 800c8c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c990 <_svfiprintf_r+0x1f8>
 800c8cc:	7821      	ldrb	r1, [r4, #0]
 800c8ce:	2203      	movs	r2, #3
 800c8d0:	4650      	mov	r0, sl
 800c8d2:	f7f3 fc9d 	bl	8000210 <memchr>
 800c8d6:	b138      	cbz	r0, 800c8e8 <_svfiprintf_r+0x150>
 800c8d8:	9b04      	ldr	r3, [sp, #16]
 800c8da:	eba0 000a 	sub.w	r0, r0, sl
 800c8de:	2240      	movs	r2, #64	; 0x40
 800c8e0:	4082      	lsls	r2, r0
 800c8e2:	4313      	orrs	r3, r2
 800c8e4:	3401      	adds	r4, #1
 800c8e6:	9304      	str	r3, [sp, #16]
 800c8e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8ec:	4825      	ldr	r0, [pc, #148]	; (800c984 <_svfiprintf_r+0x1ec>)
 800c8ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8f2:	2206      	movs	r2, #6
 800c8f4:	f7f3 fc8c 	bl	8000210 <memchr>
 800c8f8:	2800      	cmp	r0, #0
 800c8fa:	d038      	beq.n	800c96e <_svfiprintf_r+0x1d6>
 800c8fc:	4b22      	ldr	r3, [pc, #136]	; (800c988 <_svfiprintf_r+0x1f0>)
 800c8fe:	bb1b      	cbnz	r3, 800c948 <_svfiprintf_r+0x1b0>
 800c900:	9b03      	ldr	r3, [sp, #12]
 800c902:	3307      	adds	r3, #7
 800c904:	f023 0307 	bic.w	r3, r3, #7
 800c908:	3308      	adds	r3, #8
 800c90a:	9303      	str	r3, [sp, #12]
 800c90c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c90e:	4433      	add	r3, r6
 800c910:	9309      	str	r3, [sp, #36]	; 0x24
 800c912:	e768      	b.n	800c7e6 <_svfiprintf_r+0x4e>
 800c914:	fb0c 3202 	mla	r2, ip, r2, r3
 800c918:	460c      	mov	r4, r1
 800c91a:	2001      	movs	r0, #1
 800c91c:	e7a6      	b.n	800c86c <_svfiprintf_r+0xd4>
 800c91e:	2300      	movs	r3, #0
 800c920:	3401      	adds	r4, #1
 800c922:	9305      	str	r3, [sp, #20]
 800c924:	4619      	mov	r1, r3
 800c926:	f04f 0c0a 	mov.w	ip, #10
 800c92a:	4620      	mov	r0, r4
 800c92c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c930:	3a30      	subs	r2, #48	; 0x30
 800c932:	2a09      	cmp	r2, #9
 800c934:	d903      	bls.n	800c93e <_svfiprintf_r+0x1a6>
 800c936:	2b00      	cmp	r3, #0
 800c938:	d0c6      	beq.n	800c8c8 <_svfiprintf_r+0x130>
 800c93a:	9105      	str	r1, [sp, #20]
 800c93c:	e7c4      	b.n	800c8c8 <_svfiprintf_r+0x130>
 800c93e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c942:	4604      	mov	r4, r0
 800c944:	2301      	movs	r3, #1
 800c946:	e7f0      	b.n	800c92a <_svfiprintf_r+0x192>
 800c948:	ab03      	add	r3, sp, #12
 800c94a:	9300      	str	r3, [sp, #0]
 800c94c:	462a      	mov	r2, r5
 800c94e:	4b0f      	ldr	r3, [pc, #60]	; (800c98c <_svfiprintf_r+0x1f4>)
 800c950:	a904      	add	r1, sp, #16
 800c952:	4638      	mov	r0, r7
 800c954:	f3af 8000 	nop.w
 800c958:	1c42      	adds	r2, r0, #1
 800c95a:	4606      	mov	r6, r0
 800c95c:	d1d6      	bne.n	800c90c <_svfiprintf_r+0x174>
 800c95e:	89ab      	ldrh	r3, [r5, #12]
 800c960:	065b      	lsls	r3, r3, #25
 800c962:	f53f af2d 	bmi.w	800c7c0 <_svfiprintf_r+0x28>
 800c966:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c968:	b01d      	add	sp, #116	; 0x74
 800c96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c96e:	ab03      	add	r3, sp, #12
 800c970:	9300      	str	r3, [sp, #0]
 800c972:	462a      	mov	r2, r5
 800c974:	4b05      	ldr	r3, [pc, #20]	; (800c98c <_svfiprintf_r+0x1f4>)
 800c976:	a904      	add	r1, sp, #16
 800c978:	4638      	mov	r0, r7
 800c97a:	f000 f879 	bl	800ca70 <_printf_i>
 800c97e:	e7eb      	b.n	800c958 <_svfiprintf_r+0x1c0>
 800c980:	0800dbbf 	.word	0x0800dbbf
 800c984:	0800dbc9 	.word	0x0800dbc9
 800c988:	00000000 	.word	0x00000000
 800c98c:	0800c6e5 	.word	0x0800c6e5
 800c990:	0800dbc5 	.word	0x0800dbc5

0800c994 <_printf_common>:
 800c994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c998:	4616      	mov	r6, r2
 800c99a:	4699      	mov	r9, r3
 800c99c:	688a      	ldr	r2, [r1, #8]
 800c99e:	690b      	ldr	r3, [r1, #16]
 800c9a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	bfb8      	it	lt
 800c9a8:	4613      	movlt	r3, r2
 800c9aa:	6033      	str	r3, [r6, #0]
 800c9ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9b0:	4607      	mov	r7, r0
 800c9b2:	460c      	mov	r4, r1
 800c9b4:	b10a      	cbz	r2, 800c9ba <_printf_common+0x26>
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	6033      	str	r3, [r6, #0]
 800c9ba:	6823      	ldr	r3, [r4, #0]
 800c9bc:	0699      	lsls	r1, r3, #26
 800c9be:	bf42      	ittt	mi
 800c9c0:	6833      	ldrmi	r3, [r6, #0]
 800c9c2:	3302      	addmi	r3, #2
 800c9c4:	6033      	strmi	r3, [r6, #0]
 800c9c6:	6825      	ldr	r5, [r4, #0]
 800c9c8:	f015 0506 	ands.w	r5, r5, #6
 800c9cc:	d106      	bne.n	800c9dc <_printf_common+0x48>
 800c9ce:	f104 0a19 	add.w	sl, r4, #25
 800c9d2:	68e3      	ldr	r3, [r4, #12]
 800c9d4:	6832      	ldr	r2, [r6, #0]
 800c9d6:	1a9b      	subs	r3, r3, r2
 800c9d8:	42ab      	cmp	r3, r5
 800c9da:	dc26      	bgt.n	800ca2a <_printf_common+0x96>
 800c9dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c9e0:	1e13      	subs	r3, r2, #0
 800c9e2:	6822      	ldr	r2, [r4, #0]
 800c9e4:	bf18      	it	ne
 800c9e6:	2301      	movne	r3, #1
 800c9e8:	0692      	lsls	r2, r2, #26
 800c9ea:	d42b      	bmi.n	800ca44 <_printf_common+0xb0>
 800c9ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9f0:	4649      	mov	r1, r9
 800c9f2:	4638      	mov	r0, r7
 800c9f4:	47c0      	blx	r8
 800c9f6:	3001      	adds	r0, #1
 800c9f8:	d01e      	beq.n	800ca38 <_printf_common+0xa4>
 800c9fa:	6823      	ldr	r3, [r4, #0]
 800c9fc:	6922      	ldr	r2, [r4, #16]
 800c9fe:	f003 0306 	and.w	r3, r3, #6
 800ca02:	2b04      	cmp	r3, #4
 800ca04:	bf02      	ittt	eq
 800ca06:	68e5      	ldreq	r5, [r4, #12]
 800ca08:	6833      	ldreq	r3, [r6, #0]
 800ca0a:	1aed      	subeq	r5, r5, r3
 800ca0c:	68a3      	ldr	r3, [r4, #8]
 800ca0e:	bf0c      	ite	eq
 800ca10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca14:	2500      	movne	r5, #0
 800ca16:	4293      	cmp	r3, r2
 800ca18:	bfc4      	itt	gt
 800ca1a:	1a9b      	subgt	r3, r3, r2
 800ca1c:	18ed      	addgt	r5, r5, r3
 800ca1e:	2600      	movs	r6, #0
 800ca20:	341a      	adds	r4, #26
 800ca22:	42b5      	cmp	r5, r6
 800ca24:	d11a      	bne.n	800ca5c <_printf_common+0xc8>
 800ca26:	2000      	movs	r0, #0
 800ca28:	e008      	b.n	800ca3c <_printf_common+0xa8>
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	4652      	mov	r2, sl
 800ca2e:	4649      	mov	r1, r9
 800ca30:	4638      	mov	r0, r7
 800ca32:	47c0      	blx	r8
 800ca34:	3001      	adds	r0, #1
 800ca36:	d103      	bne.n	800ca40 <_printf_common+0xac>
 800ca38:	f04f 30ff 	mov.w	r0, #4294967295
 800ca3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca40:	3501      	adds	r5, #1
 800ca42:	e7c6      	b.n	800c9d2 <_printf_common+0x3e>
 800ca44:	18e1      	adds	r1, r4, r3
 800ca46:	1c5a      	adds	r2, r3, #1
 800ca48:	2030      	movs	r0, #48	; 0x30
 800ca4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca4e:	4422      	add	r2, r4
 800ca50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca58:	3302      	adds	r3, #2
 800ca5a:	e7c7      	b.n	800c9ec <_printf_common+0x58>
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	4622      	mov	r2, r4
 800ca60:	4649      	mov	r1, r9
 800ca62:	4638      	mov	r0, r7
 800ca64:	47c0      	blx	r8
 800ca66:	3001      	adds	r0, #1
 800ca68:	d0e6      	beq.n	800ca38 <_printf_common+0xa4>
 800ca6a:	3601      	adds	r6, #1
 800ca6c:	e7d9      	b.n	800ca22 <_printf_common+0x8e>
	...

0800ca70 <_printf_i>:
 800ca70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca74:	7e0f      	ldrb	r7, [r1, #24]
 800ca76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca78:	2f78      	cmp	r7, #120	; 0x78
 800ca7a:	4691      	mov	r9, r2
 800ca7c:	4680      	mov	r8, r0
 800ca7e:	460c      	mov	r4, r1
 800ca80:	469a      	mov	sl, r3
 800ca82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca86:	d807      	bhi.n	800ca98 <_printf_i+0x28>
 800ca88:	2f62      	cmp	r7, #98	; 0x62
 800ca8a:	d80a      	bhi.n	800caa2 <_printf_i+0x32>
 800ca8c:	2f00      	cmp	r7, #0
 800ca8e:	f000 80d4 	beq.w	800cc3a <_printf_i+0x1ca>
 800ca92:	2f58      	cmp	r7, #88	; 0x58
 800ca94:	f000 80c0 	beq.w	800cc18 <_printf_i+0x1a8>
 800ca98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800caa0:	e03a      	b.n	800cb18 <_printf_i+0xa8>
 800caa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800caa6:	2b15      	cmp	r3, #21
 800caa8:	d8f6      	bhi.n	800ca98 <_printf_i+0x28>
 800caaa:	a101      	add	r1, pc, #4	; (adr r1, 800cab0 <_printf_i+0x40>)
 800caac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cab0:	0800cb09 	.word	0x0800cb09
 800cab4:	0800cb1d 	.word	0x0800cb1d
 800cab8:	0800ca99 	.word	0x0800ca99
 800cabc:	0800ca99 	.word	0x0800ca99
 800cac0:	0800ca99 	.word	0x0800ca99
 800cac4:	0800ca99 	.word	0x0800ca99
 800cac8:	0800cb1d 	.word	0x0800cb1d
 800cacc:	0800ca99 	.word	0x0800ca99
 800cad0:	0800ca99 	.word	0x0800ca99
 800cad4:	0800ca99 	.word	0x0800ca99
 800cad8:	0800ca99 	.word	0x0800ca99
 800cadc:	0800cc21 	.word	0x0800cc21
 800cae0:	0800cb49 	.word	0x0800cb49
 800cae4:	0800cbdb 	.word	0x0800cbdb
 800cae8:	0800ca99 	.word	0x0800ca99
 800caec:	0800ca99 	.word	0x0800ca99
 800caf0:	0800cc43 	.word	0x0800cc43
 800caf4:	0800ca99 	.word	0x0800ca99
 800caf8:	0800cb49 	.word	0x0800cb49
 800cafc:	0800ca99 	.word	0x0800ca99
 800cb00:	0800ca99 	.word	0x0800ca99
 800cb04:	0800cbe3 	.word	0x0800cbe3
 800cb08:	682b      	ldr	r3, [r5, #0]
 800cb0a:	1d1a      	adds	r2, r3, #4
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	602a      	str	r2, [r5, #0]
 800cb10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb18:	2301      	movs	r3, #1
 800cb1a:	e09f      	b.n	800cc5c <_printf_i+0x1ec>
 800cb1c:	6820      	ldr	r0, [r4, #0]
 800cb1e:	682b      	ldr	r3, [r5, #0]
 800cb20:	0607      	lsls	r7, r0, #24
 800cb22:	f103 0104 	add.w	r1, r3, #4
 800cb26:	6029      	str	r1, [r5, #0]
 800cb28:	d501      	bpl.n	800cb2e <_printf_i+0xbe>
 800cb2a:	681e      	ldr	r6, [r3, #0]
 800cb2c:	e003      	b.n	800cb36 <_printf_i+0xc6>
 800cb2e:	0646      	lsls	r6, r0, #25
 800cb30:	d5fb      	bpl.n	800cb2a <_printf_i+0xba>
 800cb32:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cb36:	2e00      	cmp	r6, #0
 800cb38:	da03      	bge.n	800cb42 <_printf_i+0xd2>
 800cb3a:	232d      	movs	r3, #45	; 0x2d
 800cb3c:	4276      	negs	r6, r6
 800cb3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb42:	485a      	ldr	r0, [pc, #360]	; (800ccac <_printf_i+0x23c>)
 800cb44:	230a      	movs	r3, #10
 800cb46:	e012      	b.n	800cb6e <_printf_i+0xfe>
 800cb48:	682b      	ldr	r3, [r5, #0]
 800cb4a:	6820      	ldr	r0, [r4, #0]
 800cb4c:	1d19      	adds	r1, r3, #4
 800cb4e:	6029      	str	r1, [r5, #0]
 800cb50:	0605      	lsls	r5, r0, #24
 800cb52:	d501      	bpl.n	800cb58 <_printf_i+0xe8>
 800cb54:	681e      	ldr	r6, [r3, #0]
 800cb56:	e002      	b.n	800cb5e <_printf_i+0xee>
 800cb58:	0641      	lsls	r1, r0, #25
 800cb5a:	d5fb      	bpl.n	800cb54 <_printf_i+0xe4>
 800cb5c:	881e      	ldrh	r6, [r3, #0]
 800cb5e:	4853      	ldr	r0, [pc, #332]	; (800ccac <_printf_i+0x23c>)
 800cb60:	2f6f      	cmp	r7, #111	; 0x6f
 800cb62:	bf0c      	ite	eq
 800cb64:	2308      	moveq	r3, #8
 800cb66:	230a      	movne	r3, #10
 800cb68:	2100      	movs	r1, #0
 800cb6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb6e:	6865      	ldr	r5, [r4, #4]
 800cb70:	60a5      	str	r5, [r4, #8]
 800cb72:	2d00      	cmp	r5, #0
 800cb74:	bfa2      	ittt	ge
 800cb76:	6821      	ldrge	r1, [r4, #0]
 800cb78:	f021 0104 	bicge.w	r1, r1, #4
 800cb7c:	6021      	strge	r1, [r4, #0]
 800cb7e:	b90e      	cbnz	r6, 800cb84 <_printf_i+0x114>
 800cb80:	2d00      	cmp	r5, #0
 800cb82:	d04b      	beq.n	800cc1c <_printf_i+0x1ac>
 800cb84:	4615      	mov	r5, r2
 800cb86:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb8a:	fb03 6711 	mls	r7, r3, r1, r6
 800cb8e:	5dc7      	ldrb	r7, [r0, r7]
 800cb90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb94:	4637      	mov	r7, r6
 800cb96:	42bb      	cmp	r3, r7
 800cb98:	460e      	mov	r6, r1
 800cb9a:	d9f4      	bls.n	800cb86 <_printf_i+0x116>
 800cb9c:	2b08      	cmp	r3, #8
 800cb9e:	d10b      	bne.n	800cbb8 <_printf_i+0x148>
 800cba0:	6823      	ldr	r3, [r4, #0]
 800cba2:	07de      	lsls	r6, r3, #31
 800cba4:	d508      	bpl.n	800cbb8 <_printf_i+0x148>
 800cba6:	6923      	ldr	r3, [r4, #16]
 800cba8:	6861      	ldr	r1, [r4, #4]
 800cbaa:	4299      	cmp	r1, r3
 800cbac:	bfde      	ittt	le
 800cbae:	2330      	movle	r3, #48	; 0x30
 800cbb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cbb8:	1b52      	subs	r2, r2, r5
 800cbba:	6122      	str	r2, [r4, #16]
 800cbbc:	f8cd a000 	str.w	sl, [sp]
 800cbc0:	464b      	mov	r3, r9
 800cbc2:	aa03      	add	r2, sp, #12
 800cbc4:	4621      	mov	r1, r4
 800cbc6:	4640      	mov	r0, r8
 800cbc8:	f7ff fee4 	bl	800c994 <_printf_common>
 800cbcc:	3001      	adds	r0, #1
 800cbce:	d14a      	bne.n	800cc66 <_printf_i+0x1f6>
 800cbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd4:	b004      	add	sp, #16
 800cbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbda:	6823      	ldr	r3, [r4, #0]
 800cbdc:	f043 0320 	orr.w	r3, r3, #32
 800cbe0:	6023      	str	r3, [r4, #0]
 800cbe2:	4833      	ldr	r0, [pc, #204]	; (800ccb0 <_printf_i+0x240>)
 800cbe4:	2778      	movs	r7, #120	; 0x78
 800cbe6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cbea:	6823      	ldr	r3, [r4, #0]
 800cbec:	6829      	ldr	r1, [r5, #0]
 800cbee:	061f      	lsls	r7, r3, #24
 800cbf0:	f851 6b04 	ldr.w	r6, [r1], #4
 800cbf4:	d402      	bmi.n	800cbfc <_printf_i+0x18c>
 800cbf6:	065f      	lsls	r7, r3, #25
 800cbf8:	bf48      	it	mi
 800cbfa:	b2b6      	uxthmi	r6, r6
 800cbfc:	07df      	lsls	r7, r3, #31
 800cbfe:	bf48      	it	mi
 800cc00:	f043 0320 	orrmi.w	r3, r3, #32
 800cc04:	6029      	str	r1, [r5, #0]
 800cc06:	bf48      	it	mi
 800cc08:	6023      	strmi	r3, [r4, #0]
 800cc0a:	b91e      	cbnz	r6, 800cc14 <_printf_i+0x1a4>
 800cc0c:	6823      	ldr	r3, [r4, #0]
 800cc0e:	f023 0320 	bic.w	r3, r3, #32
 800cc12:	6023      	str	r3, [r4, #0]
 800cc14:	2310      	movs	r3, #16
 800cc16:	e7a7      	b.n	800cb68 <_printf_i+0xf8>
 800cc18:	4824      	ldr	r0, [pc, #144]	; (800ccac <_printf_i+0x23c>)
 800cc1a:	e7e4      	b.n	800cbe6 <_printf_i+0x176>
 800cc1c:	4615      	mov	r5, r2
 800cc1e:	e7bd      	b.n	800cb9c <_printf_i+0x12c>
 800cc20:	682b      	ldr	r3, [r5, #0]
 800cc22:	6826      	ldr	r6, [r4, #0]
 800cc24:	6961      	ldr	r1, [r4, #20]
 800cc26:	1d18      	adds	r0, r3, #4
 800cc28:	6028      	str	r0, [r5, #0]
 800cc2a:	0635      	lsls	r5, r6, #24
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	d501      	bpl.n	800cc34 <_printf_i+0x1c4>
 800cc30:	6019      	str	r1, [r3, #0]
 800cc32:	e002      	b.n	800cc3a <_printf_i+0x1ca>
 800cc34:	0670      	lsls	r0, r6, #25
 800cc36:	d5fb      	bpl.n	800cc30 <_printf_i+0x1c0>
 800cc38:	8019      	strh	r1, [r3, #0]
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	6123      	str	r3, [r4, #16]
 800cc3e:	4615      	mov	r5, r2
 800cc40:	e7bc      	b.n	800cbbc <_printf_i+0x14c>
 800cc42:	682b      	ldr	r3, [r5, #0]
 800cc44:	1d1a      	adds	r2, r3, #4
 800cc46:	602a      	str	r2, [r5, #0]
 800cc48:	681d      	ldr	r5, [r3, #0]
 800cc4a:	6862      	ldr	r2, [r4, #4]
 800cc4c:	2100      	movs	r1, #0
 800cc4e:	4628      	mov	r0, r5
 800cc50:	f7f3 fade 	bl	8000210 <memchr>
 800cc54:	b108      	cbz	r0, 800cc5a <_printf_i+0x1ea>
 800cc56:	1b40      	subs	r0, r0, r5
 800cc58:	6060      	str	r0, [r4, #4]
 800cc5a:	6863      	ldr	r3, [r4, #4]
 800cc5c:	6123      	str	r3, [r4, #16]
 800cc5e:	2300      	movs	r3, #0
 800cc60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc64:	e7aa      	b.n	800cbbc <_printf_i+0x14c>
 800cc66:	6923      	ldr	r3, [r4, #16]
 800cc68:	462a      	mov	r2, r5
 800cc6a:	4649      	mov	r1, r9
 800cc6c:	4640      	mov	r0, r8
 800cc6e:	47d0      	blx	sl
 800cc70:	3001      	adds	r0, #1
 800cc72:	d0ad      	beq.n	800cbd0 <_printf_i+0x160>
 800cc74:	6823      	ldr	r3, [r4, #0]
 800cc76:	079b      	lsls	r3, r3, #30
 800cc78:	d413      	bmi.n	800cca2 <_printf_i+0x232>
 800cc7a:	68e0      	ldr	r0, [r4, #12]
 800cc7c:	9b03      	ldr	r3, [sp, #12]
 800cc7e:	4298      	cmp	r0, r3
 800cc80:	bfb8      	it	lt
 800cc82:	4618      	movlt	r0, r3
 800cc84:	e7a6      	b.n	800cbd4 <_printf_i+0x164>
 800cc86:	2301      	movs	r3, #1
 800cc88:	4632      	mov	r2, r6
 800cc8a:	4649      	mov	r1, r9
 800cc8c:	4640      	mov	r0, r8
 800cc8e:	47d0      	blx	sl
 800cc90:	3001      	adds	r0, #1
 800cc92:	d09d      	beq.n	800cbd0 <_printf_i+0x160>
 800cc94:	3501      	adds	r5, #1
 800cc96:	68e3      	ldr	r3, [r4, #12]
 800cc98:	9903      	ldr	r1, [sp, #12]
 800cc9a:	1a5b      	subs	r3, r3, r1
 800cc9c:	42ab      	cmp	r3, r5
 800cc9e:	dcf2      	bgt.n	800cc86 <_printf_i+0x216>
 800cca0:	e7eb      	b.n	800cc7a <_printf_i+0x20a>
 800cca2:	2500      	movs	r5, #0
 800cca4:	f104 0619 	add.w	r6, r4, #25
 800cca8:	e7f5      	b.n	800cc96 <_printf_i+0x226>
 800ccaa:	bf00      	nop
 800ccac:	0800dbd0 	.word	0x0800dbd0
 800ccb0:	0800dbe1 	.word	0x0800dbe1

0800ccb4 <__sflush_r>:
 800ccb4:	898a      	ldrh	r2, [r1, #12]
 800ccb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccba:	4605      	mov	r5, r0
 800ccbc:	0710      	lsls	r0, r2, #28
 800ccbe:	460c      	mov	r4, r1
 800ccc0:	d458      	bmi.n	800cd74 <__sflush_r+0xc0>
 800ccc2:	684b      	ldr	r3, [r1, #4]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	dc05      	bgt.n	800ccd4 <__sflush_r+0x20>
 800ccc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	dc02      	bgt.n	800ccd4 <__sflush_r+0x20>
 800ccce:	2000      	movs	r0, #0
 800ccd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccd6:	2e00      	cmp	r6, #0
 800ccd8:	d0f9      	beq.n	800ccce <__sflush_r+0x1a>
 800ccda:	2300      	movs	r3, #0
 800ccdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cce0:	682f      	ldr	r7, [r5, #0]
 800cce2:	6a21      	ldr	r1, [r4, #32]
 800cce4:	602b      	str	r3, [r5, #0]
 800cce6:	d032      	beq.n	800cd4e <__sflush_r+0x9a>
 800cce8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ccea:	89a3      	ldrh	r3, [r4, #12]
 800ccec:	075a      	lsls	r2, r3, #29
 800ccee:	d505      	bpl.n	800ccfc <__sflush_r+0x48>
 800ccf0:	6863      	ldr	r3, [r4, #4]
 800ccf2:	1ac0      	subs	r0, r0, r3
 800ccf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ccf6:	b10b      	cbz	r3, 800ccfc <__sflush_r+0x48>
 800ccf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ccfa:	1ac0      	subs	r0, r0, r3
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	4602      	mov	r2, r0
 800cd00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd02:	6a21      	ldr	r1, [r4, #32]
 800cd04:	4628      	mov	r0, r5
 800cd06:	47b0      	blx	r6
 800cd08:	1c43      	adds	r3, r0, #1
 800cd0a:	89a3      	ldrh	r3, [r4, #12]
 800cd0c:	d106      	bne.n	800cd1c <__sflush_r+0x68>
 800cd0e:	6829      	ldr	r1, [r5, #0]
 800cd10:	291d      	cmp	r1, #29
 800cd12:	d82b      	bhi.n	800cd6c <__sflush_r+0xb8>
 800cd14:	4a29      	ldr	r2, [pc, #164]	; (800cdbc <__sflush_r+0x108>)
 800cd16:	410a      	asrs	r2, r1
 800cd18:	07d6      	lsls	r6, r2, #31
 800cd1a:	d427      	bmi.n	800cd6c <__sflush_r+0xb8>
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	6062      	str	r2, [r4, #4]
 800cd20:	04d9      	lsls	r1, r3, #19
 800cd22:	6922      	ldr	r2, [r4, #16]
 800cd24:	6022      	str	r2, [r4, #0]
 800cd26:	d504      	bpl.n	800cd32 <__sflush_r+0x7e>
 800cd28:	1c42      	adds	r2, r0, #1
 800cd2a:	d101      	bne.n	800cd30 <__sflush_r+0x7c>
 800cd2c:	682b      	ldr	r3, [r5, #0]
 800cd2e:	b903      	cbnz	r3, 800cd32 <__sflush_r+0x7e>
 800cd30:	6560      	str	r0, [r4, #84]	; 0x54
 800cd32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd34:	602f      	str	r7, [r5, #0]
 800cd36:	2900      	cmp	r1, #0
 800cd38:	d0c9      	beq.n	800ccce <__sflush_r+0x1a>
 800cd3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd3e:	4299      	cmp	r1, r3
 800cd40:	d002      	beq.n	800cd48 <__sflush_r+0x94>
 800cd42:	4628      	mov	r0, r5
 800cd44:	f7ff fbce 	bl	800c4e4 <_free_r>
 800cd48:	2000      	movs	r0, #0
 800cd4a:	6360      	str	r0, [r4, #52]	; 0x34
 800cd4c:	e7c0      	b.n	800ccd0 <__sflush_r+0x1c>
 800cd4e:	2301      	movs	r3, #1
 800cd50:	4628      	mov	r0, r5
 800cd52:	47b0      	blx	r6
 800cd54:	1c41      	adds	r1, r0, #1
 800cd56:	d1c8      	bne.n	800ccea <__sflush_r+0x36>
 800cd58:	682b      	ldr	r3, [r5, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d0c5      	beq.n	800ccea <__sflush_r+0x36>
 800cd5e:	2b1d      	cmp	r3, #29
 800cd60:	d001      	beq.n	800cd66 <__sflush_r+0xb2>
 800cd62:	2b16      	cmp	r3, #22
 800cd64:	d101      	bne.n	800cd6a <__sflush_r+0xb6>
 800cd66:	602f      	str	r7, [r5, #0]
 800cd68:	e7b1      	b.n	800ccce <__sflush_r+0x1a>
 800cd6a:	89a3      	ldrh	r3, [r4, #12]
 800cd6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd70:	81a3      	strh	r3, [r4, #12]
 800cd72:	e7ad      	b.n	800ccd0 <__sflush_r+0x1c>
 800cd74:	690f      	ldr	r7, [r1, #16]
 800cd76:	2f00      	cmp	r7, #0
 800cd78:	d0a9      	beq.n	800ccce <__sflush_r+0x1a>
 800cd7a:	0793      	lsls	r3, r2, #30
 800cd7c:	680e      	ldr	r6, [r1, #0]
 800cd7e:	bf08      	it	eq
 800cd80:	694b      	ldreq	r3, [r1, #20]
 800cd82:	600f      	str	r7, [r1, #0]
 800cd84:	bf18      	it	ne
 800cd86:	2300      	movne	r3, #0
 800cd88:	eba6 0807 	sub.w	r8, r6, r7
 800cd8c:	608b      	str	r3, [r1, #8]
 800cd8e:	f1b8 0f00 	cmp.w	r8, #0
 800cd92:	dd9c      	ble.n	800ccce <__sflush_r+0x1a>
 800cd94:	6a21      	ldr	r1, [r4, #32]
 800cd96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd98:	4643      	mov	r3, r8
 800cd9a:	463a      	mov	r2, r7
 800cd9c:	4628      	mov	r0, r5
 800cd9e:	47b0      	blx	r6
 800cda0:	2800      	cmp	r0, #0
 800cda2:	dc06      	bgt.n	800cdb2 <__sflush_r+0xfe>
 800cda4:	89a3      	ldrh	r3, [r4, #12]
 800cda6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdaa:	81a3      	strh	r3, [r4, #12]
 800cdac:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb0:	e78e      	b.n	800ccd0 <__sflush_r+0x1c>
 800cdb2:	4407      	add	r7, r0
 800cdb4:	eba8 0800 	sub.w	r8, r8, r0
 800cdb8:	e7e9      	b.n	800cd8e <__sflush_r+0xda>
 800cdba:	bf00      	nop
 800cdbc:	dfbffffe 	.word	0xdfbffffe

0800cdc0 <_fflush_r>:
 800cdc0:	b538      	push	{r3, r4, r5, lr}
 800cdc2:	690b      	ldr	r3, [r1, #16]
 800cdc4:	4605      	mov	r5, r0
 800cdc6:	460c      	mov	r4, r1
 800cdc8:	b913      	cbnz	r3, 800cdd0 <_fflush_r+0x10>
 800cdca:	2500      	movs	r5, #0
 800cdcc:	4628      	mov	r0, r5
 800cdce:	bd38      	pop	{r3, r4, r5, pc}
 800cdd0:	b118      	cbz	r0, 800cdda <_fflush_r+0x1a>
 800cdd2:	6a03      	ldr	r3, [r0, #32]
 800cdd4:	b90b      	cbnz	r3, 800cdda <_fflush_r+0x1a>
 800cdd6:	f7ff f9dd 	bl	800c194 <__sinit>
 800cdda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d0f3      	beq.n	800cdca <_fflush_r+0xa>
 800cde2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cde4:	07d0      	lsls	r0, r2, #31
 800cde6:	d404      	bmi.n	800cdf2 <_fflush_r+0x32>
 800cde8:	0599      	lsls	r1, r3, #22
 800cdea:	d402      	bmi.n	800cdf2 <_fflush_r+0x32>
 800cdec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdee:	f7ff fb51 	bl	800c494 <__retarget_lock_acquire_recursive>
 800cdf2:	4628      	mov	r0, r5
 800cdf4:	4621      	mov	r1, r4
 800cdf6:	f7ff ff5d 	bl	800ccb4 <__sflush_r>
 800cdfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cdfc:	07da      	lsls	r2, r3, #31
 800cdfe:	4605      	mov	r5, r0
 800ce00:	d4e4      	bmi.n	800cdcc <_fflush_r+0xc>
 800ce02:	89a3      	ldrh	r3, [r4, #12]
 800ce04:	059b      	lsls	r3, r3, #22
 800ce06:	d4e1      	bmi.n	800cdcc <_fflush_r+0xc>
 800ce08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce0a:	f7ff fb44 	bl	800c496 <__retarget_lock_release_recursive>
 800ce0e:	e7dd      	b.n	800cdcc <_fflush_r+0xc>

0800ce10 <fiprintf>:
 800ce10:	b40e      	push	{r1, r2, r3}
 800ce12:	b503      	push	{r0, r1, lr}
 800ce14:	4601      	mov	r1, r0
 800ce16:	ab03      	add	r3, sp, #12
 800ce18:	4805      	ldr	r0, [pc, #20]	; (800ce30 <fiprintf+0x20>)
 800ce1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce1e:	6800      	ldr	r0, [r0, #0]
 800ce20:	9301      	str	r3, [sp, #4]
 800ce22:	f000 f89f 	bl	800cf64 <_vfiprintf_r>
 800ce26:	b002      	add	sp, #8
 800ce28:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce2c:	b003      	add	sp, #12
 800ce2e:	4770      	bx	lr
 800ce30:	20000194 	.word	0x20000194

0800ce34 <memmove>:
 800ce34:	4288      	cmp	r0, r1
 800ce36:	b510      	push	{r4, lr}
 800ce38:	eb01 0402 	add.w	r4, r1, r2
 800ce3c:	d902      	bls.n	800ce44 <memmove+0x10>
 800ce3e:	4284      	cmp	r4, r0
 800ce40:	4623      	mov	r3, r4
 800ce42:	d807      	bhi.n	800ce54 <memmove+0x20>
 800ce44:	1e43      	subs	r3, r0, #1
 800ce46:	42a1      	cmp	r1, r4
 800ce48:	d008      	beq.n	800ce5c <memmove+0x28>
 800ce4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce52:	e7f8      	b.n	800ce46 <memmove+0x12>
 800ce54:	4402      	add	r2, r0
 800ce56:	4601      	mov	r1, r0
 800ce58:	428a      	cmp	r2, r1
 800ce5a:	d100      	bne.n	800ce5e <memmove+0x2a>
 800ce5c:	bd10      	pop	{r4, pc}
 800ce5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce66:	e7f7      	b.n	800ce58 <memmove+0x24>

0800ce68 <_sbrk_r>:
 800ce68:	b538      	push	{r3, r4, r5, lr}
 800ce6a:	4d06      	ldr	r5, [pc, #24]	; (800ce84 <_sbrk_r+0x1c>)
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	4604      	mov	r4, r0
 800ce70:	4608      	mov	r0, r1
 800ce72:	602b      	str	r3, [r5, #0]
 800ce74:	f7f4 ffd2 	bl	8001e1c <_sbrk>
 800ce78:	1c43      	adds	r3, r0, #1
 800ce7a:	d102      	bne.n	800ce82 <_sbrk_r+0x1a>
 800ce7c:	682b      	ldr	r3, [r5, #0]
 800ce7e:	b103      	cbz	r3, 800ce82 <_sbrk_r+0x1a>
 800ce80:	6023      	str	r3, [r4, #0]
 800ce82:	bd38      	pop	{r3, r4, r5, pc}
 800ce84:	20002e94 	.word	0x20002e94

0800ce88 <memcpy>:
 800ce88:	440a      	add	r2, r1
 800ce8a:	4291      	cmp	r1, r2
 800ce8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce90:	d100      	bne.n	800ce94 <memcpy+0xc>
 800ce92:	4770      	bx	lr
 800ce94:	b510      	push	{r4, lr}
 800ce96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce9e:	4291      	cmp	r1, r2
 800cea0:	d1f9      	bne.n	800ce96 <memcpy+0xe>
 800cea2:	bd10      	pop	{r4, pc}

0800cea4 <abort>:
 800cea4:	b508      	push	{r3, lr}
 800cea6:	2006      	movs	r0, #6
 800cea8:	f000 fa34 	bl	800d314 <raise>
 800ceac:	2001      	movs	r0, #1
 800ceae:	f7f4 ff3d 	bl	8001d2c <_exit>

0800ceb2 <_realloc_r>:
 800ceb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb6:	4680      	mov	r8, r0
 800ceb8:	4614      	mov	r4, r2
 800ceba:	460e      	mov	r6, r1
 800cebc:	b921      	cbnz	r1, 800cec8 <_realloc_r+0x16>
 800cebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cec2:	4611      	mov	r1, r2
 800cec4:	f7ff bb82 	b.w	800c5cc <_malloc_r>
 800cec8:	b92a      	cbnz	r2, 800ced6 <_realloc_r+0x24>
 800ceca:	f7ff fb0b 	bl	800c4e4 <_free_r>
 800cece:	4625      	mov	r5, r4
 800ced0:	4628      	mov	r0, r5
 800ced2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ced6:	f000 fa39 	bl	800d34c <_malloc_usable_size_r>
 800ceda:	4284      	cmp	r4, r0
 800cedc:	4607      	mov	r7, r0
 800cede:	d802      	bhi.n	800cee6 <_realloc_r+0x34>
 800cee0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cee4:	d812      	bhi.n	800cf0c <_realloc_r+0x5a>
 800cee6:	4621      	mov	r1, r4
 800cee8:	4640      	mov	r0, r8
 800ceea:	f7ff fb6f 	bl	800c5cc <_malloc_r>
 800ceee:	4605      	mov	r5, r0
 800cef0:	2800      	cmp	r0, #0
 800cef2:	d0ed      	beq.n	800ced0 <_realloc_r+0x1e>
 800cef4:	42bc      	cmp	r4, r7
 800cef6:	4622      	mov	r2, r4
 800cef8:	4631      	mov	r1, r6
 800cefa:	bf28      	it	cs
 800cefc:	463a      	movcs	r2, r7
 800cefe:	f7ff ffc3 	bl	800ce88 <memcpy>
 800cf02:	4631      	mov	r1, r6
 800cf04:	4640      	mov	r0, r8
 800cf06:	f7ff faed 	bl	800c4e4 <_free_r>
 800cf0a:	e7e1      	b.n	800ced0 <_realloc_r+0x1e>
 800cf0c:	4635      	mov	r5, r6
 800cf0e:	e7df      	b.n	800ced0 <_realloc_r+0x1e>

0800cf10 <__sfputc_r>:
 800cf10:	6893      	ldr	r3, [r2, #8]
 800cf12:	3b01      	subs	r3, #1
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	b410      	push	{r4}
 800cf18:	6093      	str	r3, [r2, #8]
 800cf1a:	da08      	bge.n	800cf2e <__sfputc_r+0x1e>
 800cf1c:	6994      	ldr	r4, [r2, #24]
 800cf1e:	42a3      	cmp	r3, r4
 800cf20:	db01      	blt.n	800cf26 <__sfputc_r+0x16>
 800cf22:	290a      	cmp	r1, #10
 800cf24:	d103      	bne.n	800cf2e <__sfputc_r+0x1e>
 800cf26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf2a:	f000 b935 	b.w	800d198 <__swbuf_r>
 800cf2e:	6813      	ldr	r3, [r2, #0]
 800cf30:	1c58      	adds	r0, r3, #1
 800cf32:	6010      	str	r0, [r2, #0]
 800cf34:	7019      	strb	r1, [r3, #0]
 800cf36:	4608      	mov	r0, r1
 800cf38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf3c:	4770      	bx	lr

0800cf3e <__sfputs_r>:
 800cf3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf40:	4606      	mov	r6, r0
 800cf42:	460f      	mov	r7, r1
 800cf44:	4614      	mov	r4, r2
 800cf46:	18d5      	adds	r5, r2, r3
 800cf48:	42ac      	cmp	r4, r5
 800cf4a:	d101      	bne.n	800cf50 <__sfputs_r+0x12>
 800cf4c:	2000      	movs	r0, #0
 800cf4e:	e007      	b.n	800cf60 <__sfputs_r+0x22>
 800cf50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf54:	463a      	mov	r2, r7
 800cf56:	4630      	mov	r0, r6
 800cf58:	f7ff ffda 	bl	800cf10 <__sfputc_r>
 800cf5c:	1c43      	adds	r3, r0, #1
 800cf5e:	d1f3      	bne.n	800cf48 <__sfputs_r+0xa>
 800cf60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf64 <_vfiprintf_r>:
 800cf64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf68:	460d      	mov	r5, r1
 800cf6a:	b09d      	sub	sp, #116	; 0x74
 800cf6c:	4614      	mov	r4, r2
 800cf6e:	4698      	mov	r8, r3
 800cf70:	4606      	mov	r6, r0
 800cf72:	b118      	cbz	r0, 800cf7c <_vfiprintf_r+0x18>
 800cf74:	6a03      	ldr	r3, [r0, #32]
 800cf76:	b90b      	cbnz	r3, 800cf7c <_vfiprintf_r+0x18>
 800cf78:	f7ff f90c 	bl	800c194 <__sinit>
 800cf7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf7e:	07d9      	lsls	r1, r3, #31
 800cf80:	d405      	bmi.n	800cf8e <_vfiprintf_r+0x2a>
 800cf82:	89ab      	ldrh	r3, [r5, #12]
 800cf84:	059a      	lsls	r2, r3, #22
 800cf86:	d402      	bmi.n	800cf8e <_vfiprintf_r+0x2a>
 800cf88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf8a:	f7ff fa83 	bl	800c494 <__retarget_lock_acquire_recursive>
 800cf8e:	89ab      	ldrh	r3, [r5, #12]
 800cf90:	071b      	lsls	r3, r3, #28
 800cf92:	d501      	bpl.n	800cf98 <_vfiprintf_r+0x34>
 800cf94:	692b      	ldr	r3, [r5, #16]
 800cf96:	b99b      	cbnz	r3, 800cfc0 <_vfiprintf_r+0x5c>
 800cf98:	4629      	mov	r1, r5
 800cf9a:	4630      	mov	r0, r6
 800cf9c:	f000 f93a 	bl	800d214 <__swsetup_r>
 800cfa0:	b170      	cbz	r0, 800cfc0 <_vfiprintf_r+0x5c>
 800cfa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfa4:	07dc      	lsls	r4, r3, #31
 800cfa6:	d504      	bpl.n	800cfb2 <_vfiprintf_r+0x4e>
 800cfa8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfac:	b01d      	add	sp, #116	; 0x74
 800cfae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb2:	89ab      	ldrh	r3, [r5, #12]
 800cfb4:	0598      	lsls	r0, r3, #22
 800cfb6:	d4f7      	bmi.n	800cfa8 <_vfiprintf_r+0x44>
 800cfb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfba:	f7ff fa6c 	bl	800c496 <__retarget_lock_release_recursive>
 800cfbe:	e7f3      	b.n	800cfa8 <_vfiprintf_r+0x44>
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	9309      	str	r3, [sp, #36]	; 0x24
 800cfc4:	2320      	movs	r3, #32
 800cfc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfca:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfce:	2330      	movs	r3, #48	; 0x30
 800cfd0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d184 <_vfiprintf_r+0x220>
 800cfd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfd8:	f04f 0901 	mov.w	r9, #1
 800cfdc:	4623      	mov	r3, r4
 800cfde:	469a      	mov	sl, r3
 800cfe0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfe4:	b10a      	cbz	r2, 800cfea <_vfiprintf_r+0x86>
 800cfe6:	2a25      	cmp	r2, #37	; 0x25
 800cfe8:	d1f9      	bne.n	800cfde <_vfiprintf_r+0x7a>
 800cfea:	ebba 0b04 	subs.w	fp, sl, r4
 800cfee:	d00b      	beq.n	800d008 <_vfiprintf_r+0xa4>
 800cff0:	465b      	mov	r3, fp
 800cff2:	4622      	mov	r2, r4
 800cff4:	4629      	mov	r1, r5
 800cff6:	4630      	mov	r0, r6
 800cff8:	f7ff ffa1 	bl	800cf3e <__sfputs_r>
 800cffc:	3001      	adds	r0, #1
 800cffe:	f000 80a9 	beq.w	800d154 <_vfiprintf_r+0x1f0>
 800d002:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d004:	445a      	add	r2, fp
 800d006:	9209      	str	r2, [sp, #36]	; 0x24
 800d008:	f89a 3000 	ldrb.w	r3, [sl]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	f000 80a1 	beq.w	800d154 <_vfiprintf_r+0x1f0>
 800d012:	2300      	movs	r3, #0
 800d014:	f04f 32ff 	mov.w	r2, #4294967295
 800d018:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d01c:	f10a 0a01 	add.w	sl, sl, #1
 800d020:	9304      	str	r3, [sp, #16]
 800d022:	9307      	str	r3, [sp, #28]
 800d024:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d028:	931a      	str	r3, [sp, #104]	; 0x68
 800d02a:	4654      	mov	r4, sl
 800d02c:	2205      	movs	r2, #5
 800d02e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d032:	4854      	ldr	r0, [pc, #336]	; (800d184 <_vfiprintf_r+0x220>)
 800d034:	f7f3 f8ec 	bl	8000210 <memchr>
 800d038:	9a04      	ldr	r2, [sp, #16]
 800d03a:	b9d8      	cbnz	r0, 800d074 <_vfiprintf_r+0x110>
 800d03c:	06d1      	lsls	r1, r2, #27
 800d03e:	bf44      	itt	mi
 800d040:	2320      	movmi	r3, #32
 800d042:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d046:	0713      	lsls	r3, r2, #28
 800d048:	bf44      	itt	mi
 800d04a:	232b      	movmi	r3, #43	; 0x2b
 800d04c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d050:	f89a 3000 	ldrb.w	r3, [sl]
 800d054:	2b2a      	cmp	r3, #42	; 0x2a
 800d056:	d015      	beq.n	800d084 <_vfiprintf_r+0x120>
 800d058:	9a07      	ldr	r2, [sp, #28]
 800d05a:	4654      	mov	r4, sl
 800d05c:	2000      	movs	r0, #0
 800d05e:	f04f 0c0a 	mov.w	ip, #10
 800d062:	4621      	mov	r1, r4
 800d064:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d068:	3b30      	subs	r3, #48	; 0x30
 800d06a:	2b09      	cmp	r3, #9
 800d06c:	d94d      	bls.n	800d10a <_vfiprintf_r+0x1a6>
 800d06e:	b1b0      	cbz	r0, 800d09e <_vfiprintf_r+0x13a>
 800d070:	9207      	str	r2, [sp, #28]
 800d072:	e014      	b.n	800d09e <_vfiprintf_r+0x13a>
 800d074:	eba0 0308 	sub.w	r3, r0, r8
 800d078:	fa09 f303 	lsl.w	r3, r9, r3
 800d07c:	4313      	orrs	r3, r2
 800d07e:	9304      	str	r3, [sp, #16]
 800d080:	46a2      	mov	sl, r4
 800d082:	e7d2      	b.n	800d02a <_vfiprintf_r+0xc6>
 800d084:	9b03      	ldr	r3, [sp, #12]
 800d086:	1d19      	adds	r1, r3, #4
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	9103      	str	r1, [sp, #12]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	bfbb      	ittet	lt
 800d090:	425b      	neglt	r3, r3
 800d092:	f042 0202 	orrlt.w	r2, r2, #2
 800d096:	9307      	strge	r3, [sp, #28]
 800d098:	9307      	strlt	r3, [sp, #28]
 800d09a:	bfb8      	it	lt
 800d09c:	9204      	strlt	r2, [sp, #16]
 800d09e:	7823      	ldrb	r3, [r4, #0]
 800d0a0:	2b2e      	cmp	r3, #46	; 0x2e
 800d0a2:	d10c      	bne.n	800d0be <_vfiprintf_r+0x15a>
 800d0a4:	7863      	ldrb	r3, [r4, #1]
 800d0a6:	2b2a      	cmp	r3, #42	; 0x2a
 800d0a8:	d134      	bne.n	800d114 <_vfiprintf_r+0x1b0>
 800d0aa:	9b03      	ldr	r3, [sp, #12]
 800d0ac:	1d1a      	adds	r2, r3, #4
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	9203      	str	r2, [sp, #12]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	bfb8      	it	lt
 800d0b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0ba:	3402      	adds	r4, #2
 800d0bc:	9305      	str	r3, [sp, #20]
 800d0be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d194 <_vfiprintf_r+0x230>
 800d0c2:	7821      	ldrb	r1, [r4, #0]
 800d0c4:	2203      	movs	r2, #3
 800d0c6:	4650      	mov	r0, sl
 800d0c8:	f7f3 f8a2 	bl	8000210 <memchr>
 800d0cc:	b138      	cbz	r0, 800d0de <_vfiprintf_r+0x17a>
 800d0ce:	9b04      	ldr	r3, [sp, #16]
 800d0d0:	eba0 000a 	sub.w	r0, r0, sl
 800d0d4:	2240      	movs	r2, #64	; 0x40
 800d0d6:	4082      	lsls	r2, r0
 800d0d8:	4313      	orrs	r3, r2
 800d0da:	3401      	adds	r4, #1
 800d0dc:	9304      	str	r3, [sp, #16]
 800d0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0e2:	4829      	ldr	r0, [pc, #164]	; (800d188 <_vfiprintf_r+0x224>)
 800d0e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0e8:	2206      	movs	r2, #6
 800d0ea:	f7f3 f891 	bl	8000210 <memchr>
 800d0ee:	2800      	cmp	r0, #0
 800d0f0:	d03f      	beq.n	800d172 <_vfiprintf_r+0x20e>
 800d0f2:	4b26      	ldr	r3, [pc, #152]	; (800d18c <_vfiprintf_r+0x228>)
 800d0f4:	bb1b      	cbnz	r3, 800d13e <_vfiprintf_r+0x1da>
 800d0f6:	9b03      	ldr	r3, [sp, #12]
 800d0f8:	3307      	adds	r3, #7
 800d0fa:	f023 0307 	bic.w	r3, r3, #7
 800d0fe:	3308      	adds	r3, #8
 800d100:	9303      	str	r3, [sp, #12]
 800d102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d104:	443b      	add	r3, r7
 800d106:	9309      	str	r3, [sp, #36]	; 0x24
 800d108:	e768      	b.n	800cfdc <_vfiprintf_r+0x78>
 800d10a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d10e:	460c      	mov	r4, r1
 800d110:	2001      	movs	r0, #1
 800d112:	e7a6      	b.n	800d062 <_vfiprintf_r+0xfe>
 800d114:	2300      	movs	r3, #0
 800d116:	3401      	adds	r4, #1
 800d118:	9305      	str	r3, [sp, #20]
 800d11a:	4619      	mov	r1, r3
 800d11c:	f04f 0c0a 	mov.w	ip, #10
 800d120:	4620      	mov	r0, r4
 800d122:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d126:	3a30      	subs	r2, #48	; 0x30
 800d128:	2a09      	cmp	r2, #9
 800d12a:	d903      	bls.n	800d134 <_vfiprintf_r+0x1d0>
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d0c6      	beq.n	800d0be <_vfiprintf_r+0x15a>
 800d130:	9105      	str	r1, [sp, #20]
 800d132:	e7c4      	b.n	800d0be <_vfiprintf_r+0x15a>
 800d134:	fb0c 2101 	mla	r1, ip, r1, r2
 800d138:	4604      	mov	r4, r0
 800d13a:	2301      	movs	r3, #1
 800d13c:	e7f0      	b.n	800d120 <_vfiprintf_r+0x1bc>
 800d13e:	ab03      	add	r3, sp, #12
 800d140:	9300      	str	r3, [sp, #0]
 800d142:	462a      	mov	r2, r5
 800d144:	4b12      	ldr	r3, [pc, #72]	; (800d190 <_vfiprintf_r+0x22c>)
 800d146:	a904      	add	r1, sp, #16
 800d148:	4630      	mov	r0, r6
 800d14a:	f3af 8000 	nop.w
 800d14e:	4607      	mov	r7, r0
 800d150:	1c78      	adds	r0, r7, #1
 800d152:	d1d6      	bne.n	800d102 <_vfiprintf_r+0x19e>
 800d154:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d156:	07d9      	lsls	r1, r3, #31
 800d158:	d405      	bmi.n	800d166 <_vfiprintf_r+0x202>
 800d15a:	89ab      	ldrh	r3, [r5, #12]
 800d15c:	059a      	lsls	r2, r3, #22
 800d15e:	d402      	bmi.n	800d166 <_vfiprintf_r+0x202>
 800d160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d162:	f7ff f998 	bl	800c496 <__retarget_lock_release_recursive>
 800d166:	89ab      	ldrh	r3, [r5, #12]
 800d168:	065b      	lsls	r3, r3, #25
 800d16a:	f53f af1d 	bmi.w	800cfa8 <_vfiprintf_r+0x44>
 800d16e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d170:	e71c      	b.n	800cfac <_vfiprintf_r+0x48>
 800d172:	ab03      	add	r3, sp, #12
 800d174:	9300      	str	r3, [sp, #0]
 800d176:	462a      	mov	r2, r5
 800d178:	4b05      	ldr	r3, [pc, #20]	; (800d190 <_vfiprintf_r+0x22c>)
 800d17a:	a904      	add	r1, sp, #16
 800d17c:	4630      	mov	r0, r6
 800d17e:	f7ff fc77 	bl	800ca70 <_printf_i>
 800d182:	e7e4      	b.n	800d14e <_vfiprintf_r+0x1ea>
 800d184:	0800dbbf 	.word	0x0800dbbf
 800d188:	0800dbc9 	.word	0x0800dbc9
 800d18c:	00000000 	.word	0x00000000
 800d190:	0800cf3f 	.word	0x0800cf3f
 800d194:	0800dbc5 	.word	0x0800dbc5

0800d198 <__swbuf_r>:
 800d198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d19a:	460e      	mov	r6, r1
 800d19c:	4614      	mov	r4, r2
 800d19e:	4605      	mov	r5, r0
 800d1a0:	b118      	cbz	r0, 800d1aa <__swbuf_r+0x12>
 800d1a2:	6a03      	ldr	r3, [r0, #32]
 800d1a4:	b90b      	cbnz	r3, 800d1aa <__swbuf_r+0x12>
 800d1a6:	f7fe fff5 	bl	800c194 <__sinit>
 800d1aa:	69a3      	ldr	r3, [r4, #24]
 800d1ac:	60a3      	str	r3, [r4, #8]
 800d1ae:	89a3      	ldrh	r3, [r4, #12]
 800d1b0:	071a      	lsls	r2, r3, #28
 800d1b2:	d525      	bpl.n	800d200 <__swbuf_r+0x68>
 800d1b4:	6923      	ldr	r3, [r4, #16]
 800d1b6:	b31b      	cbz	r3, 800d200 <__swbuf_r+0x68>
 800d1b8:	6823      	ldr	r3, [r4, #0]
 800d1ba:	6922      	ldr	r2, [r4, #16]
 800d1bc:	1a98      	subs	r0, r3, r2
 800d1be:	6963      	ldr	r3, [r4, #20]
 800d1c0:	b2f6      	uxtb	r6, r6
 800d1c2:	4283      	cmp	r3, r0
 800d1c4:	4637      	mov	r7, r6
 800d1c6:	dc04      	bgt.n	800d1d2 <__swbuf_r+0x3a>
 800d1c8:	4621      	mov	r1, r4
 800d1ca:	4628      	mov	r0, r5
 800d1cc:	f7ff fdf8 	bl	800cdc0 <_fflush_r>
 800d1d0:	b9e0      	cbnz	r0, 800d20c <__swbuf_r+0x74>
 800d1d2:	68a3      	ldr	r3, [r4, #8]
 800d1d4:	3b01      	subs	r3, #1
 800d1d6:	60a3      	str	r3, [r4, #8]
 800d1d8:	6823      	ldr	r3, [r4, #0]
 800d1da:	1c5a      	adds	r2, r3, #1
 800d1dc:	6022      	str	r2, [r4, #0]
 800d1de:	701e      	strb	r6, [r3, #0]
 800d1e0:	6962      	ldr	r2, [r4, #20]
 800d1e2:	1c43      	adds	r3, r0, #1
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d004      	beq.n	800d1f2 <__swbuf_r+0x5a>
 800d1e8:	89a3      	ldrh	r3, [r4, #12]
 800d1ea:	07db      	lsls	r3, r3, #31
 800d1ec:	d506      	bpl.n	800d1fc <__swbuf_r+0x64>
 800d1ee:	2e0a      	cmp	r6, #10
 800d1f0:	d104      	bne.n	800d1fc <__swbuf_r+0x64>
 800d1f2:	4621      	mov	r1, r4
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	f7ff fde3 	bl	800cdc0 <_fflush_r>
 800d1fa:	b938      	cbnz	r0, 800d20c <__swbuf_r+0x74>
 800d1fc:	4638      	mov	r0, r7
 800d1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d200:	4621      	mov	r1, r4
 800d202:	4628      	mov	r0, r5
 800d204:	f000 f806 	bl	800d214 <__swsetup_r>
 800d208:	2800      	cmp	r0, #0
 800d20a:	d0d5      	beq.n	800d1b8 <__swbuf_r+0x20>
 800d20c:	f04f 37ff 	mov.w	r7, #4294967295
 800d210:	e7f4      	b.n	800d1fc <__swbuf_r+0x64>
	...

0800d214 <__swsetup_r>:
 800d214:	b538      	push	{r3, r4, r5, lr}
 800d216:	4b2a      	ldr	r3, [pc, #168]	; (800d2c0 <__swsetup_r+0xac>)
 800d218:	4605      	mov	r5, r0
 800d21a:	6818      	ldr	r0, [r3, #0]
 800d21c:	460c      	mov	r4, r1
 800d21e:	b118      	cbz	r0, 800d228 <__swsetup_r+0x14>
 800d220:	6a03      	ldr	r3, [r0, #32]
 800d222:	b90b      	cbnz	r3, 800d228 <__swsetup_r+0x14>
 800d224:	f7fe ffb6 	bl	800c194 <__sinit>
 800d228:	89a3      	ldrh	r3, [r4, #12]
 800d22a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d22e:	0718      	lsls	r0, r3, #28
 800d230:	d422      	bmi.n	800d278 <__swsetup_r+0x64>
 800d232:	06d9      	lsls	r1, r3, #27
 800d234:	d407      	bmi.n	800d246 <__swsetup_r+0x32>
 800d236:	2309      	movs	r3, #9
 800d238:	602b      	str	r3, [r5, #0]
 800d23a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d23e:	81a3      	strh	r3, [r4, #12]
 800d240:	f04f 30ff 	mov.w	r0, #4294967295
 800d244:	e034      	b.n	800d2b0 <__swsetup_r+0x9c>
 800d246:	0758      	lsls	r0, r3, #29
 800d248:	d512      	bpl.n	800d270 <__swsetup_r+0x5c>
 800d24a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d24c:	b141      	cbz	r1, 800d260 <__swsetup_r+0x4c>
 800d24e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d252:	4299      	cmp	r1, r3
 800d254:	d002      	beq.n	800d25c <__swsetup_r+0x48>
 800d256:	4628      	mov	r0, r5
 800d258:	f7ff f944 	bl	800c4e4 <_free_r>
 800d25c:	2300      	movs	r3, #0
 800d25e:	6363      	str	r3, [r4, #52]	; 0x34
 800d260:	89a3      	ldrh	r3, [r4, #12]
 800d262:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d266:	81a3      	strh	r3, [r4, #12]
 800d268:	2300      	movs	r3, #0
 800d26a:	6063      	str	r3, [r4, #4]
 800d26c:	6923      	ldr	r3, [r4, #16]
 800d26e:	6023      	str	r3, [r4, #0]
 800d270:	89a3      	ldrh	r3, [r4, #12]
 800d272:	f043 0308 	orr.w	r3, r3, #8
 800d276:	81a3      	strh	r3, [r4, #12]
 800d278:	6923      	ldr	r3, [r4, #16]
 800d27a:	b94b      	cbnz	r3, 800d290 <__swsetup_r+0x7c>
 800d27c:	89a3      	ldrh	r3, [r4, #12]
 800d27e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d286:	d003      	beq.n	800d290 <__swsetup_r+0x7c>
 800d288:	4621      	mov	r1, r4
 800d28a:	4628      	mov	r0, r5
 800d28c:	f000 f88c 	bl	800d3a8 <__smakebuf_r>
 800d290:	89a0      	ldrh	r0, [r4, #12]
 800d292:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d296:	f010 0301 	ands.w	r3, r0, #1
 800d29a:	d00a      	beq.n	800d2b2 <__swsetup_r+0x9e>
 800d29c:	2300      	movs	r3, #0
 800d29e:	60a3      	str	r3, [r4, #8]
 800d2a0:	6963      	ldr	r3, [r4, #20]
 800d2a2:	425b      	negs	r3, r3
 800d2a4:	61a3      	str	r3, [r4, #24]
 800d2a6:	6923      	ldr	r3, [r4, #16]
 800d2a8:	b943      	cbnz	r3, 800d2bc <__swsetup_r+0xa8>
 800d2aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d2ae:	d1c4      	bne.n	800d23a <__swsetup_r+0x26>
 800d2b0:	bd38      	pop	{r3, r4, r5, pc}
 800d2b2:	0781      	lsls	r1, r0, #30
 800d2b4:	bf58      	it	pl
 800d2b6:	6963      	ldrpl	r3, [r4, #20]
 800d2b8:	60a3      	str	r3, [r4, #8]
 800d2ba:	e7f4      	b.n	800d2a6 <__swsetup_r+0x92>
 800d2bc:	2000      	movs	r0, #0
 800d2be:	e7f7      	b.n	800d2b0 <__swsetup_r+0x9c>
 800d2c0:	20000194 	.word	0x20000194

0800d2c4 <_raise_r>:
 800d2c4:	291f      	cmp	r1, #31
 800d2c6:	b538      	push	{r3, r4, r5, lr}
 800d2c8:	4604      	mov	r4, r0
 800d2ca:	460d      	mov	r5, r1
 800d2cc:	d904      	bls.n	800d2d8 <_raise_r+0x14>
 800d2ce:	2316      	movs	r3, #22
 800d2d0:	6003      	str	r3, [r0, #0]
 800d2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d2d6:	bd38      	pop	{r3, r4, r5, pc}
 800d2d8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d2da:	b112      	cbz	r2, 800d2e2 <_raise_r+0x1e>
 800d2dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d2e0:	b94b      	cbnz	r3, 800d2f6 <_raise_r+0x32>
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	f000 f830 	bl	800d348 <_getpid_r>
 800d2e8:	462a      	mov	r2, r5
 800d2ea:	4601      	mov	r1, r0
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2f2:	f000 b817 	b.w	800d324 <_kill_r>
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d00a      	beq.n	800d310 <_raise_r+0x4c>
 800d2fa:	1c59      	adds	r1, r3, #1
 800d2fc:	d103      	bne.n	800d306 <_raise_r+0x42>
 800d2fe:	2316      	movs	r3, #22
 800d300:	6003      	str	r3, [r0, #0]
 800d302:	2001      	movs	r0, #1
 800d304:	e7e7      	b.n	800d2d6 <_raise_r+0x12>
 800d306:	2400      	movs	r4, #0
 800d308:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d30c:	4628      	mov	r0, r5
 800d30e:	4798      	blx	r3
 800d310:	2000      	movs	r0, #0
 800d312:	e7e0      	b.n	800d2d6 <_raise_r+0x12>

0800d314 <raise>:
 800d314:	4b02      	ldr	r3, [pc, #8]	; (800d320 <raise+0xc>)
 800d316:	4601      	mov	r1, r0
 800d318:	6818      	ldr	r0, [r3, #0]
 800d31a:	f7ff bfd3 	b.w	800d2c4 <_raise_r>
 800d31e:	bf00      	nop
 800d320:	20000194 	.word	0x20000194

0800d324 <_kill_r>:
 800d324:	b538      	push	{r3, r4, r5, lr}
 800d326:	4d07      	ldr	r5, [pc, #28]	; (800d344 <_kill_r+0x20>)
 800d328:	2300      	movs	r3, #0
 800d32a:	4604      	mov	r4, r0
 800d32c:	4608      	mov	r0, r1
 800d32e:	4611      	mov	r1, r2
 800d330:	602b      	str	r3, [r5, #0]
 800d332:	f7f4 fceb 	bl	8001d0c <_kill>
 800d336:	1c43      	adds	r3, r0, #1
 800d338:	d102      	bne.n	800d340 <_kill_r+0x1c>
 800d33a:	682b      	ldr	r3, [r5, #0]
 800d33c:	b103      	cbz	r3, 800d340 <_kill_r+0x1c>
 800d33e:	6023      	str	r3, [r4, #0]
 800d340:	bd38      	pop	{r3, r4, r5, pc}
 800d342:	bf00      	nop
 800d344:	20002e94 	.word	0x20002e94

0800d348 <_getpid_r>:
 800d348:	f7f4 bcd8 	b.w	8001cfc <_getpid>

0800d34c <_malloc_usable_size_r>:
 800d34c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d350:	1f18      	subs	r0, r3, #4
 800d352:	2b00      	cmp	r3, #0
 800d354:	bfbc      	itt	lt
 800d356:	580b      	ldrlt	r3, [r1, r0]
 800d358:	18c0      	addlt	r0, r0, r3
 800d35a:	4770      	bx	lr

0800d35c <__swhatbuf_r>:
 800d35c:	b570      	push	{r4, r5, r6, lr}
 800d35e:	460c      	mov	r4, r1
 800d360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d364:	2900      	cmp	r1, #0
 800d366:	b096      	sub	sp, #88	; 0x58
 800d368:	4615      	mov	r5, r2
 800d36a:	461e      	mov	r6, r3
 800d36c:	da0d      	bge.n	800d38a <__swhatbuf_r+0x2e>
 800d36e:	89a3      	ldrh	r3, [r4, #12]
 800d370:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d374:	f04f 0100 	mov.w	r1, #0
 800d378:	bf0c      	ite	eq
 800d37a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d37e:	2340      	movne	r3, #64	; 0x40
 800d380:	2000      	movs	r0, #0
 800d382:	6031      	str	r1, [r6, #0]
 800d384:	602b      	str	r3, [r5, #0]
 800d386:	b016      	add	sp, #88	; 0x58
 800d388:	bd70      	pop	{r4, r5, r6, pc}
 800d38a:	466a      	mov	r2, sp
 800d38c:	f000 f848 	bl	800d420 <_fstat_r>
 800d390:	2800      	cmp	r0, #0
 800d392:	dbec      	blt.n	800d36e <__swhatbuf_r+0x12>
 800d394:	9901      	ldr	r1, [sp, #4]
 800d396:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d39a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d39e:	4259      	negs	r1, r3
 800d3a0:	4159      	adcs	r1, r3
 800d3a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3a6:	e7eb      	b.n	800d380 <__swhatbuf_r+0x24>

0800d3a8 <__smakebuf_r>:
 800d3a8:	898b      	ldrh	r3, [r1, #12]
 800d3aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d3ac:	079d      	lsls	r5, r3, #30
 800d3ae:	4606      	mov	r6, r0
 800d3b0:	460c      	mov	r4, r1
 800d3b2:	d507      	bpl.n	800d3c4 <__smakebuf_r+0x1c>
 800d3b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d3b8:	6023      	str	r3, [r4, #0]
 800d3ba:	6123      	str	r3, [r4, #16]
 800d3bc:	2301      	movs	r3, #1
 800d3be:	6163      	str	r3, [r4, #20]
 800d3c0:	b002      	add	sp, #8
 800d3c2:	bd70      	pop	{r4, r5, r6, pc}
 800d3c4:	ab01      	add	r3, sp, #4
 800d3c6:	466a      	mov	r2, sp
 800d3c8:	f7ff ffc8 	bl	800d35c <__swhatbuf_r>
 800d3cc:	9900      	ldr	r1, [sp, #0]
 800d3ce:	4605      	mov	r5, r0
 800d3d0:	4630      	mov	r0, r6
 800d3d2:	f7ff f8fb 	bl	800c5cc <_malloc_r>
 800d3d6:	b948      	cbnz	r0, 800d3ec <__smakebuf_r+0x44>
 800d3d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3dc:	059a      	lsls	r2, r3, #22
 800d3de:	d4ef      	bmi.n	800d3c0 <__smakebuf_r+0x18>
 800d3e0:	f023 0303 	bic.w	r3, r3, #3
 800d3e4:	f043 0302 	orr.w	r3, r3, #2
 800d3e8:	81a3      	strh	r3, [r4, #12]
 800d3ea:	e7e3      	b.n	800d3b4 <__smakebuf_r+0xc>
 800d3ec:	89a3      	ldrh	r3, [r4, #12]
 800d3ee:	6020      	str	r0, [r4, #0]
 800d3f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3f4:	81a3      	strh	r3, [r4, #12]
 800d3f6:	9b00      	ldr	r3, [sp, #0]
 800d3f8:	6163      	str	r3, [r4, #20]
 800d3fa:	9b01      	ldr	r3, [sp, #4]
 800d3fc:	6120      	str	r0, [r4, #16]
 800d3fe:	b15b      	cbz	r3, 800d418 <__smakebuf_r+0x70>
 800d400:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d404:	4630      	mov	r0, r6
 800d406:	f000 f81d 	bl	800d444 <_isatty_r>
 800d40a:	b128      	cbz	r0, 800d418 <__smakebuf_r+0x70>
 800d40c:	89a3      	ldrh	r3, [r4, #12]
 800d40e:	f023 0303 	bic.w	r3, r3, #3
 800d412:	f043 0301 	orr.w	r3, r3, #1
 800d416:	81a3      	strh	r3, [r4, #12]
 800d418:	89a3      	ldrh	r3, [r4, #12]
 800d41a:	431d      	orrs	r5, r3
 800d41c:	81a5      	strh	r5, [r4, #12]
 800d41e:	e7cf      	b.n	800d3c0 <__smakebuf_r+0x18>

0800d420 <_fstat_r>:
 800d420:	b538      	push	{r3, r4, r5, lr}
 800d422:	4d07      	ldr	r5, [pc, #28]	; (800d440 <_fstat_r+0x20>)
 800d424:	2300      	movs	r3, #0
 800d426:	4604      	mov	r4, r0
 800d428:	4608      	mov	r0, r1
 800d42a:	4611      	mov	r1, r2
 800d42c:	602b      	str	r3, [r5, #0]
 800d42e:	f7f4 fccc 	bl	8001dca <_fstat>
 800d432:	1c43      	adds	r3, r0, #1
 800d434:	d102      	bne.n	800d43c <_fstat_r+0x1c>
 800d436:	682b      	ldr	r3, [r5, #0]
 800d438:	b103      	cbz	r3, 800d43c <_fstat_r+0x1c>
 800d43a:	6023      	str	r3, [r4, #0]
 800d43c:	bd38      	pop	{r3, r4, r5, pc}
 800d43e:	bf00      	nop
 800d440:	20002e94 	.word	0x20002e94

0800d444 <_isatty_r>:
 800d444:	b538      	push	{r3, r4, r5, lr}
 800d446:	4d06      	ldr	r5, [pc, #24]	; (800d460 <_isatty_r+0x1c>)
 800d448:	2300      	movs	r3, #0
 800d44a:	4604      	mov	r4, r0
 800d44c:	4608      	mov	r0, r1
 800d44e:	602b      	str	r3, [r5, #0]
 800d450:	f7f4 fccb 	bl	8001dea <_isatty>
 800d454:	1c43      	adds	r3, r0, #1
 800d456:	d102      	bne.n	800d45e <_isatty_r+0x1a>
 800d458:	682b      	ldr	r3, [r5, #0]
 800d45a:	b103      	cbz	r3, 800d45e <_isatty_r+0x1a>
 800d45c:	6023      	str	r3, [r4, #0]
 800d45e:	bd38      	pop	{r3, r4, r5, pc}
 800d460:	20002e94 	.word	0x20002e94

0800d464 <_init>:
 800d464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d466:	bf00      	nop
 800d468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d46a:	bc08      	pop	{r3}
 800d46c:	469e      	mov	lr, r3
 800d46e:	4770      	bx	lr

0800d470 <_fini>:
 800d470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d472:	bf00      	nop
 800d474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d476:	bc08      	pop	{r3}
 800d478:	469e      	mov	lr, r3
 800d47a:	4770      	bx	lr
