
F411-IoT-LoRa-Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001031c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b0c  080104bc  080104bc  000204bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010fc8  08010fc8  00030198  2**0
                  CONTENTS
  4 .ARM          00000008  08010fc8  08010fc8  00020fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010fd0  08010fd0  00030198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010fd0  08010fd0  00020fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010fd4  08010fd4  00020fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  08010fd8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e2c  20000198  08011170  00030198  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003fc4  08011170  00033fc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000155c4  00000000  00000000  0003020b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fbc  00000000  00000000  000457cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001168  00000000  00000000  00048790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e19  00000000  00000000  000498f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018820  00000000  00000000  0004a711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017ed0  00000000  00000000  00062f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093a3f  00000000  00000000  0007ae01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005598  00000000  00000000  0010e840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00113dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000198 	.word	0x20000198
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080104a4 	.word	0x080104a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000019c 	.word	0x2000019c
 80001dc:	080104a4 	.word	0x080104a4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000698:	b098      	sub	sp, #96	; 0x60
 800069a:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5100 Environment-------------------------//

	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069c:	4bcf      	ldr	r3, [pc, #828]	; (80009dc <main+0x348>)
 800069e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a2:	22c0      	movs	r2, #192	; 0xc0
 80006a4:	771a      	strb	r2, [r3, #28]
		ETH.GAR[1]=168;
 80006a6:	4bcd      	ldr	r3, [pc, #820]	; (80009dc <main+0x348>)
 80006a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ac:	22a8      	movs	r2, #168	; 0xa8
 80006ae:	775a      	strb	r2, [r3, #29]
		ETH.GAR[2]=0;
 80006b0:	4bca      	ldr	r3, [pc, #808]	; (80009dc <main+0x348>)
 80006b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b6:	2200      	movs	r2, #0
 80006b8:	779a      	strb	r2, [r3, #30]
		ETH.GAR[3]=1;
 80006ba:	4bc8      	ldr	r3, [pc, #800]	; (80009dc <main+0x348>)
 80006bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c0:	2201      	movs	r2, #1
 80006c2:	77da      	strb	r2, [r3, #31]
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006c4:	4bc5      	ldr	r3, [pc, #788]	; (80009dc <main+0x348>)
 80006c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ca:	22ff      	movs	r2, #255	; 0xff
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]
		ETH.SUBR[1]=255;
 80006d0:	4bc2      	ldr	r3, [pc, #776]	; (80009dc <main+0x348>)
 80006d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d6:	22ff      	movs	r2, #255	; 0xff
 80006d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		ETH.SUBR[2]=255;
 80006dc:	4bbf      	ldr	r3, [pc, #764]	; (80009dc <main+0x348>)
 80006de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e2:	22ff      	movs	r2, #255	; 0xff
 80006e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ETH.SUBR[3]=0;
 80006e8:	4bbc      	ldr	r3, [pc, #752]	; (80009dc <main+0x348>)
 80006ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006f4:	4bb9      	ldr	r3, [pc, #740]	; (80009dc <main+0x348>)
 80006f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.SHAR[1]=0x08;
 8000700:	4bb6      	ldr	r3, [pc, #728]	; (80009dc <main+0x348>)
 8000702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000706:	2208      	movs	r2, #8
 8000708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.SHAR[2]=0xDC;
 800070c:	4bb3      	ldr	r3, [pc, #716]	; (80009dc <main+0x348>)
 800070e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000712:	22dc      	movs	r2, #220	; 0xdc
 8000714:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.SHAR[3]=0x00;
 8000718:	4bb0      	ldr	r3, [pc, #704]	; (80009dc <main+0x348>)
 800071a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		ETH.SHAR[4]=0x00;
 8000724:	4bad      	ldr	r3, [pc, #692]	; (80009dc <main+0x348>)
 8000726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SHAR[5]=0x01;
 8000730:	4baa      	ldr	r3, [pc, #680]	; (80009dc <main+0x348>)
 8000732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000736:	2201      	movs	r2, #1
 8000738:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 800073c:	4ba7      	ldr	r3, [pc, #668]	; (80009dc <main+0x348>)
 800073e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000742:	22c0      	movs	r2, #192	; 0xc0
 8000744:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SIPR[1]=168;
 8000748:	4ba4      	ldr	r3, [pc, #656]	; (80009dc <main+0x348>)
 800074a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074e:	22a8      	movs	r2, #168	; 0xa8
 8000750:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		ETH.SIPR[2]=0;
 8000754:	4ba1      	ldr	r3, [pc, #644]	; (80009dc <main+0x348>)
 8000756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800075a:	2200      	movs	r2, #0
 800075c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SIPR[3]=6,//ETH.SIPR[3]=34,
 8000760:	4b9e      	ldr	r3, [pc, #632]	; (80009dc <main+0x348>)
 8000762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000766:	2206      	movs	r2, #6
 8000768:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	//  Socket RX memory
		ETH.RMSR=0x55;
 800076c:	4b9b      	ldr	r3, [pc, #620]	; (80009dc <main+0x348>)
 800076e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000772:	2255      	movs	r2, #85	; 0x55
 8000774:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	//  Socket TX memory


		ETH.TMSR=0x55;
 8000778:	4b98      	ldr	r3, [pc, #608]	; (80009dc <main+0x348>)
 800077a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077e:	2255      	movs	r2, #85	; 0x55
 8000780:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	//  S0 Port Number
		ETH.S0_PORT[0]=0x01;
 8000784:	4b95      	ldr	r3, [pc, #596]	; (80009dc <main+0x348>)
 8000786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800078a:	2201      	movs	r2, #1
 800078c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		ETH.S0_PORT[1]=0xF6;
 8000790:	4b92      	ldr	r3, [pc, #584]	; (80009dc <main+0x348>)
 8000792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000796:	22f6      	movs	r2, #246	; 0xf6
 8000798:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//	S0 Client IP ADDRESS
		ETH.S0_DIPR[0]=192;
 800079c:	4b8f      	ldr	r3, [pc, #572]	; (80009dc <main+0x348>)
 800079e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a2:	22c0      	movs	r2, #192	; 0xc0
 80007a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		ETH.S0_DIPR[1]=168;
 80007a8:	4b8c      	ldr	r3, [pc, #560]	; (80009dc <main+0x348>)
 80007aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ae:	22a8      	movs	r2, #168	; 0xa8
 80007b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		ETH.S0_DIPR[2]=0;
 80007b4:	4b89      	ldr	r3, [pc, #548]	; (80009dc <main+0x348>)
 80007b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		ETH.S0_DIPR[3]=3;
 80007c0:	4b86      	ldr	r3, [pc, #536]	; (80009dc <main+0x348>)
 80007c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c6:	2203      	movs	r2, #3
 80007c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	//	S0 Client IP ADDRESS
		ETH.S0_DPORT[0]=0x01;
 80007cc:	4b83      	ldr	r3, [pc, #524]	; (80009dc <main+0x348>)
 80007ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d2:	2201      	movs	r2, #1
 80007d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		ETH.S0_DPORT[1]=0xF6;
 80007d8:	4b80      	ldr	r3, [pc, #512]	; (80009dc <main+0x348>)
 80007da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007de:	22f6      	movs	r2, #246	; 0xf6
 80007e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		ETH.gS0_RX_BASE = 0x6000;
 80007e4:	4b7d      	ldr	r3, [pc, #500]	; (80009dc <main+0x348>)
 80007e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ea:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80007ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		ETH.gS0_RX_MASK = 0x07FF;
 80007f2:	4b7a      	ldr	r3, [pc, #488]	; (80009dc <main+0x348>)
 80007f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		ETH.gS1_RX_BASE = 0x6800;
 8000800:	4b76      	ldr	r3, [pc, #472]	; (80009dc <main+0x348>)
 8000802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000806:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 800080a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		ETH.gS1_RX_MASK = 0x07FF;
 800080e:	4b73      	ldr	r3, [pc, #460]	; (80009dc <main+0x348>)
 8000810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000814:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000818:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		ETH.gS2_RX_BASE = 0x7000;
 800081c:	4b6f      	ldr	r3, [pc, #444]	; (80009dc <main+0x348>)
 800081e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000822:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000826:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		ETH.gS2_RX_MASK = 0x07FF;
 800082a:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <main+0x348>)
 800082c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000830:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000834:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS3_RX_BASE = 0x7800;
 8000838:	4b68      	ldr	r3, [pc, #416]	; (80009dc <main+0x348>)
 800083a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800083e:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000842:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS3_RX_MASK = 0x07FF;
 8000846:	4b65      	ldr	r3, [pc, #404]	; (80009dc <main+0x348>)
 8000848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800084c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000850:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS0_TX_BASE = 0x4000;
 8000854:	4b61      	ldr	r3, [pc, #388]	; (80009dc <main+0x348>)
 8000856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800085a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS0_TX_MASK = 0x07FF;
 8000862:	4b5e      	ldr	r3, [pc, #376]	; (80009dc <main+0x348>)
 8000864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000868:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800086c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS1_TX_BASE = 0x4800;
 8000870:	4b5a      	ldr	r3, [pc, #360]	; (80009dc <main+0x348>)
 8000872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000876:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800087a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS1_TX_MASK = 0x07FF;
 800087e:	4b57      	ldr	r3, [pc, #348]	; (80009dc <main+0x348>)
 8000880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000884:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000888:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS2_TX_BASE = 0x5000;
 800088c:	4b53      	ldr	r3, [pc, #332]	; (80009dc <main+0x348>)
 800088e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000892:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000896:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS2_TX_MASK = 0x07FF;
 800089a:	4b50      	ldr	r3, [pc, #320]	; (80009dc <main+0x348>)
 800089c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS3_TX_BASE = 0x5800;
 80008a8:	4b4c      	ldr	r3, [pc, #304]	; (80009dc <main+0x348>)
 80008aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ae:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS3_TX_MASK = 0x07FF;
 80008b6:	4b49      	ldr	r3, [pc, #292]	; (80009dc <main+0x348>)
 80008b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008bc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		ETH.S0_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c4:	4b45      	ldr	r3, [pc, #276]	; (80009dc <main+0x348>)
 80008c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	  //----------------------- LoRa ------------------------//

	  //----------------------- LoRa ------------------------//

	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008d0:	4843      	ldr	r0, [pc, #268]	; (80009e0 <main+0x34c>)
 80008d2:	f006 f97b 	bl	8006bcc <Inicializar>
 	  	wf.RESET_PORT=GPIOA;
 80008d6:	4b42      	ldr	r3, [pc, #264]	; (80009e0 <main+0x34c>)
 80008d8:	4a42      	ldr	r2, [pc, #264]	; (80009e4 <main+0x350>)
 80008da:	601a      	str	r2, [r3, #0]
 	  	wf.RESET_PORT=GPIO_PIN_8;
 80008dc:	4b40      	ldr	r3, [pc, #256]	; (80009e0 <main+0x34c>)
 80008de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008e2:	601a      	str	r2, [r3, #0]
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008e4:	4940      	ldr	r1, [pc, #256]	; (80009e8 <main+0x354>)
 80008e6:	4841      	ldr	r0, [pc, #260]	; (80009ec <main+0x358>)
 80008e8:	f00e fdf6 	bl	800f4d8 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 80008ec:	4940      	ldr	r1, [pc, #256]	; (80009f0 <main+0x35c>)
 80008ee:	4841      	ldr	r0, [pc, #260]	; (80009f4 <main+0x360>)
 80008f0:	f00e fdf2 	bl	800f4d8 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 80008f4:	4940      	ldr	r1, [pc, #256]	; (80009f8 <main+0x364>)
 80008f6:	4841      	ldr	r0, [pc, #260]	; (80009fc <main+0x368>)
 80008f8:	f00e fdee 	bl	800f4d8 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 80008fc:	4940      	ldr	r1, [pc, #256]	; (8000a00 <main+0x36c>)
 80008fe:	4841      	ldr	r0, [pc, #260]	; (8000a04 <main+0x370>)
 8000900:	f00e fdea 	bl	800f4d8 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 8000904:	4940      	ldr	r1, [pc, #256]	; (8000a08 <main+0x374>)
 8000906:	4841      	ldr	r0, [pc, #260]	; (8000a0c <main+0x378>)
 8000908:	f00e fde6 	bl	800f4d8 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 800090c:	4940      	ldr	r1, [pc, #256]	; (8000a10 <main+0x37c>)
 800090e:	4841      	ldr	r0, [pc, #260]	; (8000a14 <main+0x380>)
 8000910:	f00e fde2 	bl	800f4d8 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 8000914:	4940      	ldr	r1, [pc, #256]	; (8000a18 <main+0x384>)
 8000916:	4841      	ldr	r0, [pc, #260]	; (8000a1c <main+0x388>)
 8000918:	f00e fdde 	bl	800f4d8 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 800091c:	4940      	ldr	r1, [pc, #256]	; (8000a20 <main+0x38c>)
 800091e:	4841      	ldr	r0, [pc, #260]	; (8000a24 <main+0x390>)
 8000920:	f00e fdda 	bl	800f4d8 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 8000924:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <main+0x34c>)
 8000926:	2200      	movs	r2, #0
 8000928:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800092c:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <main+0x34c>)
 800092e:	2200      	movs	r2, #0
 8000930:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
		wf._data2SND[1]=0x00;
 8000934:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <main+0x34c>)
 8000936:	2200      	movs	r2, #0
 8000938:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
		wf._data2SND[2]=0x00;
 800093c:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <main+0x34c>)
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
		wf._data2SND[3]=0x00;
 8000944:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <main+0x34c>)
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		wf._data2SND[4]=0x00;
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <main+0x34c>)
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[5]=0x06;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <main+0x34c>)
 8000956:	2206      	movs	r2, #6
 8000958:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[6]=0x01;
 800095c:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <main+0x34c>)
 800095e:	2201      	movs	r2, #1
 8000960:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[7]=0x03;
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <main+0x34c>)
 8000966:	2203      	movs	r2, #3
 8000968:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <main+0x34c>)
 800096e:	2200      	movs	r2, #0
 8000970:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[9]=0x00;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <main+0x34c>)
 8000976:	2200      	movs	r2, #0
 8000978:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[10]=0x00;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <main+0x34c>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[11]=0x0A;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <main+0x34c>)
 8000986:	220a      	movs	r2, #10
 8000988:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[12]=0x00;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <main+0x34c>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[13]=0x33;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <main+0x34c>)
 8000996:	2233      	movs	r2, #51	; 0x33
 8000998:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[14]=0x34;
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <main+0x34c>)
 800099e:	2234      	movs	r2, #52	; 0x34
 80009a0:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[15]=0x35;
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <main+0x34c>)
 80009a6:	2235      	movs	r2, #53	; 0x35
 80009a8:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._n_D2SND=12;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <main+0x34c>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <main+0x34c>)
 80009b6:	2264      	movs	r2, #100	; 0x64
 80009b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <main+0x34c>)
 80009be:	2202      	movs	r2, #2
 80009c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._DBG_EN=1;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <main+0x34c>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
		//wf._send_data=1;
		// ----------- INICIO - Seteo de módulo Ethernet W5100 ----------- //
	    // Conectado a SPI2
		// PIN NSS - PortB 12
		spi_no_debug=1;
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <main+0x394>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80009d2:	4b02      	ldr	r3, [pc, #8]	; (80009dc <main+0x348>)
 80009d4:	4a03      	ldr	r2, [pc, #12]	; (80009e4 <main+0x350>)
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	e028      	b.n	8000a2c <main+0x398>
 80009da:	bf00      	nop
 80009dc:	20002764 	.word	0x20002764
 80009e0:	20000b78 	.word	0x20000b78
 80009e4:	40020000 	.word	0x40020000
 80009e8:	20000024 	.word	0x20000024
 80009ec:	20000b7e 	.word	0x20000b7e
 80009f0:	2000002c 	.word	0x2000002c
 80009f4:	20000b9e 	.word	0x20000b9e
 80009f8:	20000038 	.word	0x20000038
 80009fc:	20000bae 	.word	0x20000bae
 8000a00:	20000048 	.word	0x20000048
 8000a04:	20000bbe 	.word	0x20000bbe
 8000a08:	20000050 	.word	0x20000050
 8000a0c:	20000bc4 	.word	0x20000bc4
 8000a10:	20000060 	.word	0x20000060
 8000a14:	20000bda 	.word	0x20000bda
 8000a18:	20000070 	.word	0x20000070
 8000a1c:	20000bea 	.word	0x20000bea
 8000a20:	20000080 	.word	0x20000080
 8000a24:	20000bd4 	.word	0x20000bd4
 8000a28:	20003814 	.word	0x20003814
		ETH.NSS_PIN=GPIO_PIN_4;
 8000a2c:	4b4c      	ldr	r3, [pc, #304]	; (8000b60 <main+0x4cc>)
 8000a2e:	2210      	movs	r2, #16
 8000a30:	811a      	strh	r2, [r3, #8]
		ETH.SPI= &hspi1;
 8000a32:	4b4b      	ldr	r3, [pc, #300]	; (8000b60 <main+0x4cc>)
 8000a34:	4a4b      	ldr	r2, [pc, #300]	; (8000b64 <main+0x4d0>)
 8000a36:	601a      	str	r2, [r3, #0]

	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a38:	484b      	ldr	r0, [pc, #300]	; (8000b68 <main+0x4d4>)
 8000a3a:	f00b ff01 	bl	800c840 <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a3e:	4b4a      	ldr	r3, [pc, #296]	; (8000b68 <main+0x4d4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	705a      	strb	r2, [r3, #1]
		ModBUS_Config(&mb_wf);	//WIFI como servidor TCP, recibe comadno ModBUS
 8000a44:	4849      	ldr	r0, [pc, #292]	; (8000b6c <main+0x4d8>)
 8000a46:	f00b fefb 	bl	800c840 <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a4a:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <main+0x4d8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	705a      	strb	r2, [r3, #1]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a50:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a54:	2103      	movs	r1, #3
 8000a56:	4845      	ldr	r0, [pc, #276]	; (8000b6c <main+0x4d8>)
 8000a58:	f00b ff95 	bl	800c986 <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5c:	f002 fa4e 	bl	8002efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a60:	f000 fcd0 	bl	8001404 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000a64:	4b42      	ldr	r3, [pc, #264]	; (8000b70 <main+0x4dc>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a42      	ldr	r2, [pc, #264]	; (8000b74 <main+0x4e0>)
 8000a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6e:	099b      	lsrs	r3, r3, #6
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fdc5 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a76:	f000 fed7 	bl	8001828 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a7a:	f000 fd2b 	bl	80014d4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a7e:	f000 fe55 	bl	800172c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a82:	f000 fe7d 	bl	8001780 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000a86:	f000 fea5 	bl	80017d4 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000a8a:	f000 fd59 	bl	8001540 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a8e:	f000 fdd1 	bl	8001634 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2102      	movs	r1, #2
 8000a96:	4838      	ldr	r0, [pc, #224]	; (8000b78 <main+0x4e4>)
 8000a98:	f002 ff04 	bl	80038a4 <HAL_GPIO_WritePin>
  ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000a9c:	210e      	movs	r1, #14
 8000a9e:	4837      	ldr	r0, [pc, #220]	; (8000b7c <main+0x4e8>)
 8000aa0:	f000 ff54 	bl	800194c <ITM0_Write>
     ESP8266_HW_Reset();	//WRNNG Hardcoded	  //Reseteo el modulo desde el pin de RESET
 8000aa4:	f001 fe44 	bl	8002730 <ESP8266_HW_Reset>
     if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000aa8:	4b35      	ldr	r3, [pc, #212]	; (8000b80 <main+0x4ec>)
 8000aaa:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <main+0x426>
 8000ab2:	2113      	movs	r1, #19
 8000ab4:	4833      	ldr	r0, [pc, #204]	; (8000b84 <main+0x4f0>)
 8000ab6:	f000 ff49 	bl	800194c <ITM0_Write>
     //HAL_TIM_Base_Start(&htim6); //Timer como base de tiempo
     HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000aba:	2201      	movs	r2, #1
 8000abc:	4932      	ldr	r1, [pc, #200]	; (8000b88 <main+0x4f4>)
 8000abe:	4833      	ldr	r0, [pc, #204]	; (8000b8c <main+0x4f8>)
 8000ac0:	f005 f819 	bl	8005af6 <HAL_UART_Receive_IT>
     HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	4932      	ldr	r1, [pc, #200]	; (8000b90 <main+0x4fc>)
 8000ac8:	4832      	ldr	r0, [pc, #200]	; (8000b94 <main+0x500>)
 8000aca:	f005 f814 	bl	8005af6 <HAL_UART_Receive_IT>
     if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5100 \r\n",strlen("\r\n SET-UP W5100 \r\n"));
 8000ace:	4b32      	ldr	r3, [pc, #200]	; (8000b98 <main+0x504>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d003      	beq.n	8000ade <main+0x44a>
 8000ad6:	2112      	movs	r1, #18
 8000ad8:	4830      	ldr	r0, [pc, #192]	; (8000b9c <main+0x508>)
 8000ada:	f000 ff37 	bl	800194c <ITM0_Write>

   	 ETH.operacion=SPI_WRITE;
 8000ade:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <main+0x4cc>)
 8000ae0:	22f0      	movs	r2, #240	; 0xf0
 8000ae2:	729a      	strb	r2, [r3, #10]
   	 ETH.TX[1]= 0;
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <main+0x4cc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	755a      	strb	r2, [r3, #21]
   	 ETH.TX[2]= 1;
 8000aea:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <main+0x4cc>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	759a      	strb	r2, [r3, #22]
   	 ETH.TX[3]= 192;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <main+0x4cc>)
 8000af2:	22c0      	movs	r2, #192	; 0xc0
 8000af4:	75da      	strb	r2, [r3, #23]
   	 //ETH-DISABLE   eth_init(&ETH);

   	 //ETH-DISABLE eth_socket_init(&ETH,0);

   	 //ETH-DISABLE SPI_READ_EN=1;
   ETH.operacion=SPI_READ;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <main+0x4cc>)
 8000af8:	220f      	movs	r2, #15
 8000afa:	729a      	strb	r2, [r3, #10]
   ETH.TX[1]= 0;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <main+0x4cc>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	755a      	strb	r2, [r3, #21]
   ETH.TX[2]= 1;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <main+0x4cc>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	759a      	strb	r2, [r3, #22]
   ETH.TX[3]= 0;
 8000b08:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <main+0x4cc>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	75da      	strb	r2, [r3, #23]

     if(ESP8266_HW_Init(&huart1)==1)
 8000b0e:	481f      	ldr	r0, [pc, #124]	; (8000b8c <main+0x4f8>)
 8000b10:	f001 fe36 	bl	8002780 <ESP8266_HW_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d10c      	bne.n	8000b34 <main+0x4a0>
     {
   	  ESP_HW_Init=1;
 8000b1a:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <main+0x50c>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	701a      	strb	r2, [r3, #0]
   	  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <main+0x4ec>)
 8000b22:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d04a      	beq.n	8000bc0 <main+0x52c>
 8000b2a:	2113      	movs	r1, #19
 8000b2c:	481d      	ldr	r0, [pc, #116]	; (8000ba4 <main+0x510>)
 8000b2e:	f000 ff0d 	bl	800194c <ITM0_Write>
 8000b32:	e045      	b.n	8000bc0 <main+0x52c>
     }
     else
     {
   	  ESP8266_HW_Reset(); //WRNNG Hardcoded
 8000b34:	f001 fdfc 	bl	8002730 <ESP8266_HW_Reset>
   	  if(ESP8266_HW_Init(&huart1)==1)
 8000b38:	4814      	ldr	r0, [pc, #80]	; (8000b8c <main+0x4f8>)
 8000b3a:	f001 fe21 	bl	8002780 <ESP8266_HW_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d131      	bne.n	8000ba8 <main+0x514>
   	  {
   		  ESP_HW_Init=1;
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <main+0x50c>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <main+0x4ec>)
 8000b4c:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d035      	beq.n	8000bc0 <main+0x52c>
 8000b54:	2113      	movs	r1, #19
 8000b56:	4813      	ldr	r0, [pc, #76]	; (8000ba4 <main+0x510>)
 8000b58:	f000 fef8 	bl	800194c <ITM0_Write>
 8000b5c:	e030      	b.n	8000bc0 <main+0x52c>
 8000b5e:	bf00      	nop
 8000b60:	20002764 	.word	0x20002764
 8000b64:	200001b4 	.word	0x200001b4
 8000b68:	200018c4 	.word	0x200018c4
 8000b6c:	20001e10 	.word	0x20001e10
 8000b70:	20000084 	.word	0x20000084
 8000b74:	10624dd3 	.word	0x10624dd3
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	080104bc 	.word	0x080104bc
 8000b80:	20000b78 	.word	0x20000b78
 8000b84:	080104cc 	.word	0x080104cc
 8000b88:	20003e2c 	.word	0x20003e2c
 8000b8c:	2000029c 	.word	0x2000029c
 8000b90:	20003e30 	.word	0x20003e30
 8000b94:	200002e0 	.word	0x200002e0
 8000b98:	2000275c 	.word	0x2000275c
 8000b9c:	080104e0 	.word	0x080104e0
 8000ba0:	20003817 	.word	0x20003817
 8000ba4:	080104f4 	.word	0x080104f4
   	  }
   	  else
   	  {
   		  ESP_HW_Init=0;
 8000ba8:	4bac      	ldr	r3, [pc, #688]	; (8000e5c <main+0x7c8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000bae:	4bac      	ldr	r3, [pc, #688]	; (8000e60 <main+0x7cc>)
 8000bb0:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <main+0x52c>
 8000bb8:	2115      	movs	r1, #21
 8000bba:	48aa      	ldr	r0, [pc, #680]	; (8000e64 <main+0x7d0>)
 8000bbc:	f000 fec6 	bl	800194c <ITM0_Write>
   	  }
     }

     HAL_Delay(1000);
 8000bc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc4:	f002 fa0c 	bl	8002fe0 <HAL_Delay>





	  	  if (ESP_HW_Init==1)
 8000bc8:	4ba4      	ldr	r3, [pc, #656]	; (8000e5c <main+0x7c8>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	f040 809f 	bne.w	8000d10 <main+0x67c>
	  	  {
	  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(lr._data_available))
 8000bd2:	4ba5      	ldr	r3, [pc, #660]	; (8000e68 <main+0x7d4>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	f040 809a 	bne.w	8000d10 <main+0x67c>
 8000bdc:	4ba0      	ldr	r3, [pc, #640]	; (8000e60 <main+0x7cc>)
 8000bde:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8094 	bne.w	8000d10 <main+0x67c>
 8000be8:	4b9d      	ldr	r3, [pc, #628]	; (8000e60 <main+0x7cc>)
 8000bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bee:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000bf2:	f340 808d 	ble.w	8000d10 <main+0x67c>
 8000bf6:	4b9d      	ldr	r3, [pc, #628]	; (8000e6c <main+0x7d8>)
 8000bf8:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	f000 8087 	beq.w	8000d10 <main+0x67c>
	  			{	lr._data_available=0;
 8000c02:	4b9a      	ldr	r3, [pc, #616]	; (8000e6c <main+0x7d8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
	  				wf_snd_flag_ticks=0;
 8000c0a:	4b99      	ldr	r3, [pc, #612]	; (8000e70 <main+0x7dc>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
	  				WF_SND_FLAG=0;
 8000c10:	4b95      	ldr	r3, [pc, #596]	; (8000e68 <main+0x7d4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
	  				/*ModBUS_F03_Request(&mb_wf, 0 , 10);
	  				ModBUS(&mb_wf);							// Create ModBUS info to be sent
	  				CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
	  				wf._n_D2SND=mb_wf._n_MBUS_2SND;*/

	  				if( httpPOST(	ENDPOINT, SERVER_IP,PORT,
 8000c16:	2100      	movs	r1, #0
 8000c18:	4896      	ldr	r0, [pc, #600]	; (8000e74 <main+0x7e0>)
 8000c1a:	f00b fee2 	bl	800c9e2 <ModBUS_F03_Read>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4698      	mov	r8, r3
 8000c22:	2101      	movs	r1, #1
 8000c24:	4893      	ldr	r0, [pc, #588]	; (8000e74 <main+0x7e0>)
 8000c26:	f00b fedc 	bl	800c9e2 <ModBUS_F03_Read>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	461c      	mov	r4, r3
 8000c2e:	2102      	movs	r1, #2
 8000c30:	4890      	ldr	r0, [pc, #576]	; (8000e74 <main+0x7e0>)
 8000c32:	f00b fed6 	bl	800c9e2 <ModBUS_F03_Read>
 8000c36:	4603      	mov	r3, r0
 8000c38:	461d      	mov	r5, r3
 8000c3a:	2103      	movs	r1, #3
 8000c3c:	488d      	ldr	r0, [pc, #564]	; (8000e74 <main+0x7e0>)
 8000c3e:	f00b fed0 	bl	800c9e2 <ModBUS_F03_Read>
 8000c42:	4603      	mov	r3, r0
 8000c44:	461e      	mov	r6, r3
 8000c46:	2104      	movs	r1, #4
 8000c48:	488a      	ldr	r0, [pc, #552]	; (8000e74 <main+0x7e0>)
 8000c4a:	f00b feca 	bl	800c9e2 <ModBUS_F03_Read>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	2105      	movs	r1, #5
 8000c54:	4887      	ldr	r0, [pc, #540]	; (8000e74 <main+0x7e0>)
 8000c56:	f00b fec4 	bl	800c9e2 <ModBUS_F03_Read>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	2106      	movs	r1, #6
 8000c60:	4884      	ldr	r0, [pc, #528]	; (8000e74 <main+0x7e0>)
 8000c62:	f00b febe 	bl	800c9e2 <ModBUS_F03_Read>
 8000c66:	4603      	mov	r3, r0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	2107      	movs	r1, #7
 8000c6c:	4881      	ldr	r0, [pc, #516]	; (8000e74 <main+0x7e0>)
 8000c6e:	f00b feb8 	bl	800c9e2 <ModBUS_F03_Read>
 8000c72:	4603      	mov	r3, r0
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	2108      	movs	r1, #8
 8000c78:	487e      	ldr	r0, [pc, #504]	; (8000e74 <main+0x7e0>)
 8000c7a:	f00b feb2 	bl	800c9e2 <ModBUS_F03_Read>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	2109      	movs	r1, #9
 8000c84:	487b      	ldr	r0, [pc, #492]	; (8000e74 <main+0x7e0>)
 8000c86:	f00b feac 	bl	800c9e2 <ModBUS_F03_Read>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c92:	930c      	str	r3, [sp, #48]	; 0x30
 8000c94:	4b78      	ldr	r3, [pc, #480]	; (8000e78 <main+0x7e4>)
 8000c96:	930b      	str	r3, [sp, #44]	; 0x2c
 8000c98:	4b78      	ldr	r3, [pc, #480]	; (8000e7c <main+0x7e8>)
 8000c9a:	930a      	str	r3, [sp, #40]	; 0x28
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8000ca0:	9208      	str	r2, [sp, #32]
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	9207      	str	r2, [sp, #28]
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	9206      	str	r2, [sp, #24]
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	9205      	str	r2, [sp, #20]
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	9204      	str	r2, [sp, #16]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	9303      	str	r3, [sp, #12]
 8000cb6:	9602      	str	r6, [sp, #8]
 8000cb8:	9501      	str	r5, [sp, #4]
 8000cba:	9400      	str	r4, [sp, #0]
 8000cbc:	4643      	mov	r3, r8
 8000cbe:	4a70      	ldr	r2, [pc, #448]	; (8000e80 <main+0x7ec>)
 8000cc0:	4970      	ldr	r1, [pc, #448]	; (8000e84 <main+0x7f0>)
 8000cc2:	4871      	ldr	r0, [pc, #452]	; (8000e88 <main+0x7f4>)
 8000cc4:	f00a fdba 	bl	800b83c <httpPOST>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d020      	beq.n	8000d10 <main+0x67c>
	  								ModBUS_F03_Read(&mb_eth,8),
									ModBUS_F03_Read(&mb_eth,9),TEST_1,//ModBUS_F03_Read(&mb_eth,9),TEPELCO,
	  								post, body, 512))

	  				{
	  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000cce:	486b      	ldr	r0, [pc, #428]	; (8000e7c <main+0x7e8>)
 8000cd0:	f7ff fa90 	bl	80001f4 <strlen>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	2341      	movs	r3, #65	; 0x41
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4967      	ldr	r1, [pc, #412]	; (8000e7c <main+0x7e8>)
 8000ce0:	486a      	ldr	r0, [pc, #424]	; (8000e8c <main+0x7f8>)
 8000ce2:	f00e f8c5 	bl	800ee70 <CopiaVector>
	  							wf._n_D2SND=strlen(post);
 8000ce6:	4865      	ldr	r0, [pc, #404]	; (8000e7c <main+0x7e8>)
 8000ce8:	f7ff fa84 	bl	80001f4 <strlen>
 8000cec:	4603      	mov	r3, r0
 8000cee:	461a      	mov	r2, r3
 8000cf0:	4b5b      	ldr	r3, [pc, #364]	; (8000e60 <main+0x7cc>)
 8000cf2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
	  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000cf6:	4b5a      	ldr	r3, [pc, #360]	; (8000e60 <main+0x7cc>)
 8000cf8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d807      	bhi.n	8000d10 <main+0x67c>
	  							{
	  								EnviarDatos(&wf);
 8000d00:	4857      	ldr	r0, [pc, #348]	; (8000e60 <main+0x7cc>)
 8000d02:	f005 ff4d 	bl	8006ba0 <EnviarDatos>
	  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000d06:	4b56      	ldr	r3, [pc, #344]	; (8000e60 <main+0x7cc>)
 8000d08:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000d0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  				}
	  			}
	  	  }
	  /**************[ FIN PIDO ENVIAR DATOS ]**************/

	  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000d10:	4b5f      	ldr	r3, [pc, #380]	; (8000e90 <main+0x7fc>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d003      	beq.n	8000d20 <main+0x68c>
 8000d18:	4b5e      	ldr	r3, [pc, #376]	; (8000e94 <main+0x800>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d175      	bne.n	8000e0c <main+0x778>
	  		{
	  			if(FLAG_UART1==1)
 8000d20:	4b5b      	ldr	r3, [pc, #364]	; (8000e90 <main+0x7fc>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d11c      	bne.n	8000d62 <main+0x6ce>
	  				{
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000d28:	4b5b      	ldr	r3, [pc, #364]	; (8000e98 <main+0x804>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b5b      	ldr	r3, [pc, #364]	; (8000e9c <main+0x808>)
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	2301      	movs	r3, #1
 8000d32:	495b      	ldr	r1, [pc, #364]	; (8000ea0 <main+0x80c>)
 8000d34:	485b      	ldr	r0, [pc, #364]	; (8000ea4 <main+0x810>)
 8000d36:	f00e f89b 	bl	800ee70 <CopiaVector>
	  					FLAG_UART1=0;
 8000d3a:	4b55      	ldr	r3, [pc, #340]	; (8000e90 <main+0x7fc>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]

	  						if (error_rxdata==3)
 8000d40:	4b59      	ldr	r3, [pc, #356]	; (8000ea8 <main+0x814>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d102      	bne.n	8000d4e <main+0x6ba>
	  						{
	  							error_rxdata=0;
 8000d48:	4b57      	ldr	r3, [pc, #348]	; (8000ea8 <main+0x814>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
	  						}
	  						if (error_rxdata==1)
 8000d4e:	4b56      	ldr	r3, [pc, #344]	; (8000ea8 <main+0x814>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d105      	bne.n	8000d62 <main+0x6ce>
	  						{
	  							error_rxdata=5;
 8000d56:	4b54      	ldr	r3, [pc, #336]	; (8000ea8 <main+0x814>)
 8000d58:	2205      	movs	r2, #5
 8000d5a:	701a      	strb	r2, [r3, #0]
	  							error_rxdata=0;
 8000d5c:	4b52      	ldr	r3, [pc, #328]	; (8000ea8 <main+0x814>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
	  						}
	  				}
	  			if(FLAG_TIMEOUT==1)
 8000d62:	4b4c      	ldr	r3, [pc, #304]	; (8000e94 <main+0x800>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d102      	bne.n	8000d70 <main+0x6dc>
	  					{
	  						FLAG_TIMEOUT=0;
 8000d6a:	4b4a      	ldr	r3, [pc, #296]	; (8000e94 <main+0x800>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
	  					}

	  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000d70:	4b3a      	ldr	r3, [pc, #232]	; (8000e5c <main+0x7c8>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d149      	bne.n	8000e0c <main+0x778>
	  				{
	  					/*************** Copio y proceso info recibida ***************/
	  					wf._n_orig=UART_RX_items;
 8000d78:	4b47      	ldr	r3, [pc, #284]	; (8000e98 <main+0x804>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a38      	ldr	r2, [pc, #224]	; (8000e60 <main+0x7cc>)
 8000d7e:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000d82:	4b45      	ldr	r3, [pc, #276]	; (8000e98 <main+0x804>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	4b45      	ldr	r3, [pc, #276]	; (8000e9c <main+0x808>)
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	4944      	ldr	r1, [pc, #272]	; (8000ea0 <main+0x80c>)
 8000d8e:	4845      	ldr	r0, [pc, #276]	; (8000ea4 <main+0x810>)
 8000d90:	f00e f86e 	bl	800ee70 <CopiaVector>
	  					resultado=AT_ESP8266_ND(&wf);
 8000d94:	4832      	ldr	r0, [pc, #200]	; (8000e60 <main+0x7cc>)
 8000d96:	f005 ffe3 	bl	8006d60 <AT_ESP8266_ND>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b43      	ldr	r3, [pc, #268]	; (8000eac <main+0x818>)
 8000da0:	701a      	strb	r2, [r3, #0]

	  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

	  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000da2:	4b2f      	ldr	r3, [pc, #188]	; (8000e60 <main+0x7cc>)
 8000da4:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d12f      	bne.n	8000e0c <main+0x778>
 8000dac:	4b2c      	ldr	r3, [pc, #176]	; (8000e60 <main+0x7cc>)
 8000dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000db2:	2b63      	cmp	r3, #99	; 0x63
 8000db4:	d12a      	bne.n	8000e0c <main+0x778>
	  					{

	  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000db6:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <main+0x7cc>)
 8000db8:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8000dbc:	2341      	movs	r3, #65	; 0x41
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	493b      	ldr	r1, [pc, #236]	; (8000eb0 <main+0x81c>)
 8000dc4:	483b      	ldr	r0, [pc, #236]	; (8000eb4 <main+0x820>)
 8000dc6:	f00e f853 	bl	800ee70 <CopiaVector>
	  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000dca:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <main+0x7cc>)
 8000dcc:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8000dd0:	4a39      	ldr	r2, [pc, #228]	; (8000eb8 <main+0x824>)
 8000dd2:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190

	  						ModBUS(&mb_wf);
 8000dd6:	4838      	ldr	r0, [pc, #224]	; (8000eb8 <main+0x824>)
 8000dd8:	f00b fe88 	bl	800caec <ModBUS>

	  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000ddc:	4b36      	ldr	r3, [pc, #216]	; (8000eb8 <main+0x824>)
 8000dde:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 8000de2:	2341      	movs	r3, #65	; 0x41
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	2300      	movs	r3, #0
 8000de8:	4934      	ldr	r1, [pc, #208]	; (8000ebc <main+0x828>)
 8000dea:	4828      	ldr	r0, [pc, #160]	; (8000e8c <main+0x7f8>)
 8000dec:	f00e f840 	bl	800ee70 <CopiaVector>
	  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000df0:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <main+0x824>)
 8000df2:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8000df6:	4a1a      	ldr	r2, [pc, #104]	; (8000e60 <main+0x7cc>)
 8000df8:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
	  						wf._new_data_rcv=0;//
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <main+0x7cc>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	  						wf._send_data=1;
 8000e04:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <main+0x7cc>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
	  						}
	  					}

	  		}
// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT
	  		if((FLAG_UART2 == 1)||(lr.tmr_dly_ON==1))  //Evento de dato recibido LoRA debo verificar que es
 8000e0c:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <main+0x82c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d005      	beq.n	8000e20 <main+0x78c>
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <main+0x7d8>)
 8000e16:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	f040 82a0 	bne.w	8001360 <main+0xccc>
	  		{
	  			if(FLAG_UART2==1)
 8000e20:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <main+0x82c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	f040 824e 	bne.w	80012c6 <main+0xc32>
	  				{
	  				FLAG_UART2=0;
 8000e2a:	4b25      	ldr	r3, [pc, #148]	; (8000ec0 <main+0x82c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]
	  				LoRa_decode(&lr);
 8000e30:	480e      	ldr	r0, [pc, #56]	; (8000e6c <main+0x7d8>)
 8000e32:	f00b f87d 	bl	800bf30 <LoRa_decode>
	  				if(lr._data_available)
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <main+0x7d8>)
 8000e38:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f000 8242 	beq.w	80012c6 <main+0xc32>
	  				{
	  					CopiaVector(lr.dataRCV_hld,lr.dataRCV,lr._n_dataRCV,1,"D");
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <main+0x7d8>)
 8000e44:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	; 0x4d8
 8000e48:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <main+0x830>)
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	491e      	ldr	r1, [pc, #120]	; (8000ec8 <main+0x834>)
 8000e50:	481e      	ldr	r0, [pc, #120]	; (8000ecc <main+0x838>)
 8000e52:	f00e f80d 	bl	800ee70 <CopiaVector>

	  					int i=0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
 8000e5a:	e039      	b.n	8000ed0 <main+0x83c>
 8000e5c:	20003817 	.word	0x20003817
 8000e60:	20000b78 	.word	0x20000b78
 8000e64:	08010508 	.word	0x08010508
 8000e68:	2000275d 	.word	0x2000275d
 8000e6c:	20000370 	.word	0x20000370
 8000e70:	20002760 	.word	0x20002760
 8000e74:	200018c4 	.word	0x200018c4
 8000e78:	2000255c 	.word	0x2000255c
 8000e7c:	2000235c 	.word	0x2000235c
 8000e80:	2000001c 	.word	0x2000001c
 8000e84:	2000000c 	.word	0x2000000c
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	20000e0c 	.word	0x20000e0c
 8000e90:	2000381c 	.word	0x2000381c
 8000e94:	2000381b 	.word	0x2000381b
 8000e98:	20003e38 	.word	0x20003e38
 8000e9c:	20003e28 	.word	0x20003e28
 8000ea0:	20003c28 	.word	0x20003c28
 8000ea4:	2000120c 	.word	0x2000120c
 8000ea8:	2000381f 	.word	0x2000381f
 8000eac:	2000381e 	.word	0x2000381e
 8000eb0:	20000c0c 	.word	0x20000c0c
 8000eb4:	20001e1d 	.word	0x20001e1d
 8000eb8:	20001e10 	.word	0x20001e10
 8000ebc:	20001fa4 	.word	0x20001fa4
 8000ec0:	2000381d 	.word	0x2000381d
 8000ec4:	08010520 	.word	0x08010520
 8000ec8:	20000546 	.word	0x20000546
 8000ecc:	200006c6 	.word	0x200006c6
	  					char num[6];
	  					while(lr.dataRCV_hld[i] != ';')
 8000ed0:	e00e      	b.n	8000ef0 <main+0x85c>
	  					{
	  						num[i]=lr.dataRCV_hld[i];
 8000ed2:	4ab1      	ldr	r2, [pc, #708]	; (8001198 <main+0xb04>)
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed6:	4413      	add	r3, r2
 8000ed8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000edc:	7819      	ldrb	r1, [r3, #0]
 8000ede:	f107 0218 	add.w	r2, r7, #24
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee4:	4413      	add	r3, r2
 8000ee6:	460a      	mov	r2, r1
 8000ee8:	701a      	strb	r2, [r3, #0]
	  						i++;
 8000eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eec:	3301      	adds	r3, #1
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
	  					while(lr.dataRCV_hld[i] != ';')
 8000ef0:	4aa9      	ldr	r2, [pc, #676]	; (8001198 <main+0xb04>)
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	4413      	add	r3, r2
 8000ef6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b3b      	cmp	r3, #59	; 0x3b
 8000efe:	d1e8      	bne.n	8000ed2 <main+0x83e>
	  					}
	  					num[i]='\0';
 8000f00:	f107 0218 	add.w	r2, r7, #24
 8000f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f06:	4413      	add	r3, r2
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
	  					ModBUS_F03_Assign(&mb_eth,0,atoi(num,10));
 8000f0c:	f107 0318 	add.w	r3, r7, #24
 8000f10:	210a      	movs	r1, #10
 8000f12:	4618      	mov	r0, r3
 8000f14:	f00d fff7 	bl	800ef06 <atoi>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	2100      	movs	r1, #0
 8000f20:	489e      	ldr	r0, [pc, #632]	; (800119c <main+0xb08>)
 8000f22:	f00b fd30 	bl	800c986 <ModBUS_F03_Assign>

	  					i++;
 8000f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f28:	3301      	adds	r3, #1
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
	  					int j=0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
	  					while(lr.dataRCV_hld[i] != ';')
 8000f30:	e011      	b.n	8000f56 <main+0x8c2>
	  					{
	  						num[j]=lr.dataRCV_hld[i];
 8000f32:	4a99      	ldr	r2, [pc, #612]	; (8001198 <main+0xb04>)
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	4413      	add	r3, r2
 8000f38:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000f3c:	7819      	ldrb	r1, [r3, #0]
 8000f3e:	f107 0218 	add.w	r2, r7, #24
 8000f42:	6a3b      	ldr	r3, [r7, #32]
 8000f44:	4413      	add	r3, r2
 8000f46:	460a      	mov	r2, r1
 8000f48:	701a      	strb	r2, [r3, #0]
	  						j++;
 8000f4a:	6a3b      	ldr	r3, [r7, #32]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	623b      	str	r3, [r7, #32]
	  						i++;
 8000f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f52:	3301      	adds	r3, #1
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
	  					while(lr.dataRCV_hld[i] != ';')
 8000f56:	4a90      	ldr	r2, [pc, #576]	; (8001198 <main+0xb04>)
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	4413      	add	r3, r2
 8000f5c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b3b      	cmp	r3, #59	; 0x3b
 8000f64:	d1e5      	bne.n	8000f32 <main+0x89e>
	  					}
	  					num[j]='\0';
 8000f66:	f107 0218 	add.w	r2, r7, #24
 8000f6a:	6a3b      	ldr	r3, [r7, #32]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
	  					ModBUS_F03_Assign(&mb_eth,1,atoi(num,10));
 8000f72:	f107 0318 	add.w	r3, r7, #24
 8000f76:	210a      	movs	r1, #10
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f00d ffc4 	bl	800ef06 <atoi>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	461a      	mov	r2, r3
 8000f84:	2101      	movs	r1, #1
 8000f86:	4885      	ldr	r0, [pc, #532]	; (800119c <main+0xb08>)
 8000f88:	f00b fcfd 	bl	800c986 <ModBUS_F03_Assign>

	  					i++;
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8e:	3301      	adds	r3, #1
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
	  					j=0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
	  					while(lr.dataRCV_hld[i] != ';')
 8000f96:	e011      	b.n	8000fbc <main+0x928>
	  					{
	  						num[j]=lr.dataRCV_hld[i];
 8000f98:	4a7f      	ldr	r2, [pc, #508]	; (8001198 <main+0xb04>)
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	4413      	add	r3, r2
 8000f9e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000fa2:	7819      	ldrb	r1, [r3, #0]
 8000fa4:	f107 0218 	add.w	r2, r7, #24
 8000fa8:	6a3b      	ldr	r3, [r7, #32]
 8000faa:	4413      	add	r3, r2
 8000fac:	460a      	mov	r2, r1
 8000fae:	701a      	strb	r2, [r3, #0]
	  						j++;
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	623b      	str	r3, [r7, #32]
	  						i++;
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	3301      	adds	r3, #1
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
	  					while(lr.dataRCV_hld[i] != ';')
 8000fbc:	4a76      	ldr	r2, [pc, #472]	; (8001198 <main+0xb04>)
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	4413      	add	r3, r2
 8000fc2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b3b      	cmp	r3, #59	; 0x3b
 8000fca:	d1e5      	bne.n	8000f98 <main+0x904>
	  					}
	  					num[j]='\0';
 8000fcc:	f107 0218 	add.w	r2, r7, #24
 8000fd0:	6a3b      	ldr	r3, [r7, #32]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
	  					ModBUS_F03_Assign(&mb_eth,2,atoi(num,10));
 8000fd8:	f107 0318 	add.w	r3, r7, #24
 8000fdc:	210a      	movs	r1, #10
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00d ff91 	bl	800ef06 <atoi>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	2102      	movs	r1, #2
 8000fec:	486b      	ldr	r0, [pc, #428]	; (800119c <main+0xb08>)
 8000fee:	f00b fcca 	bl	800c986 <ModBUS_F03_Assign>

	  					i++;
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
	  					j=0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
	  					while(lr.dataRCV_hld[i] != ';')
 8000ffc:	e011      	b.n	8001022 <main+0x98e>
	  					{
	  						num[j]=lr.dataRCV_hld[i];
 8000ffe:	4a66      	ldr	r2, [pc, #408]	; (8001198 <main+0xb04>)
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	4413      	add	r3, r2
 8001004:	f203 3356 	addw	r3, r3, #854	; 0x356
 8001008:	7819      	ldrb	r1, [r3, #0]
 800100a:	f107 0218 	add.w	r2, r7, #24
 800100e:	6a3b      	ldr	r3, [r7, #32]
 8001010:	4413      	add	r3, r2
 8001012:	460a      	mov	r2, r1
 8001014:	701a      	strb	r2, [r3, #0]
	  						j++;
 8001016:	6a3b      	ldr	r3, [r7, #32]
 8001018:	3301      	adds	r3, #1
 800101a:	623b      	str	r3, [r7, #32]
	  						i++;
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	3301      	adds	r3, #1
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
	  					while(lr.dataRCV_hld[i] != ';')
 8001022:	4a5d      	ldr	r2, [pc, #372]	; (8001198 <main+0xb04>)
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	4413      	add	r3, r2
 8001028:	f203 3356 	addw	r3, r3, #854	; 0x356
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b3b      	cmp	r3, #59	; 0x3b
 8001030:	d1e5      	bne.n	8000ffe <main+0x96a>
	  					}
	  					num[j]='\0';
 8001032:	f107 0218 	add.w	r2, r7, #24
 8001036:	6a3b      	ldr	r3, [r7, #32]
 8001038:	4413      	add	r3, r2
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
	  					ModBUS_F03_Assign(&mb_eth,3,atoi(num,10));
 800103e:	f107 0318 	add.w	r3, r7, #24
 8001042:	210a      	movs	r1, #10
 8001044:	4618      	mov	r0, r3
 8001046:	f00d ff5e 	bl	800ef06 <atoi>
 800104a:	4603      	mov	r3, r0
 800104c:	b29b      	uxth	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	2103      	movs	r1, #3
 8001052:	4852      	ldr	r0, [pc, #328]	; (800119c <main+0xb08>)
 8001054:	f00b fc97 	bl	800c986 <ModBUS_F03_Assign>

	  					i++;
 8001058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105a:	3301      	adds	r3, #1
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
	  					j=0;
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
	  					while(lr.dataRCV_hld[i] != ';')
 8001062:	e011      	b.n	8001088 <main+0x9f4>
	  					{
	  						num[j]=lr.dataRCV_hld[i];
 8001064:	4a4c      	ldr	r2, [pc, #304]	; (8001198 <main+0xb04>)
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	4413      	add	r3, r2
 800106a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800106e:	7819      	ldrb	r1, [r3, #0]
 8001070:	f107 0218 	add.w	r2, r7, #24
 8001074:	6a3b      	ldr	r3, [r7, #32]
 8001076:	4413      	add	r3, r2
 8001078:	460a      	mov	r2, r1
 800107a:	701a      	strb	r2, [r3, #0]
	  						j++;
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	3301      	adds	r3, #1
 8001080:	623b      	str	r3, [r7, #32]
	  						i++;
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	3301      	adds	r3, #1
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
	  					while(lr.dataRCV_hld[i] != ';')
 8001088:	4a43      	ldr	r2, [pc, #268]	; (8001198 <main+0xb04>)
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	4413      	add	r3, r2
 800108e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b3b      	cmp	r3, #59	; 0x3b
 8001096:	d1e5      	bne.n	8001064 <main+0x9d0>
	  					}
	  					num[j]='\0';
 8001098:	f107 0218 	add.w	r2, r7, #24
 800109c:	6a3b      	ldr	r3, [r7, #32]
 800109e:	4413      	add	r3, r2
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
	  					ModBUS_F03_Assign(&mb_eth,4,atoi(num,10));
 80010a4:	f107 0318 	add.w	r3, r7, #24
 80010a8:	210a      	movs	r1, #10
 80010aa:	4618      	mov	r0, r3
 80010ac:	f00d ff2b 	bl	800ef06 <atoi>
 80010b0:	4603      	mov	r3, r0
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	461a      	mov	r2, r3
 80010b6:	2104      	movs	r1, #4
 80010b8:	4838      	ldr	r0, [pc, #224]	; (800119c <main+0xb08>)
 80010ba:	f00b fc64 	bl	800c986 <ModBUS_F03_Assign>

	  					i++;
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	3301      	adds	r3, #1
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
	  					j=0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
	  					while(lr.dataRCV_hld[i] != ';')
 80010c8:	e011      	b.n	80010ee <main+0xa5a>
	  					{
	  						num[j]=lr.dataRCV_hld[i];
 80010ca:	4a33      	ldr	r2, [pc, #204]	; (8001198 <main+0xb04>)
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	4413      	add	r3, r2
 80010d0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80010d4:	7819      	ldrb	r1, [r3, #0]
 80010d6:	f107 0218 	add.w	r2, r7, #24
 80010da:	6a3b      	ldr	r3, [r7, #32]
 80010dc:	4413      	add	r3, r2
 80010de:	460a      	mov	r2, r1
 80010e0:	701a      	strb	r2, [r3, #0]
	  						j++;
 80010e2:	6a3b      	ldr	r3, [r7, #32]
 80010e4:	3301      	adds	r3, #1
 80010e6:	623b      	str	r3, [r7, #32]
	  						i++;
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	3301      	adds	r3, #1
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
	  					while(lr.dataRCV_hld[i] != ';')
 80010ee:	4a2a      	ldr	r2, [pc, #168]	; (8001198 <main+0xb04>)
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	4413      	add	r3, r2
 80010f4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b3b      	cmp	r3, #59	; 0x3b
 80010fc:	d1e5      	bne.n	80010ca <main+0xa36>
	  					}
	  					num[j]='\0';
 80010fe:	f107 0218 	add.w	r2, r7, #24
 8001102:	6a3b      	ldr	r3, [r7, #32]
 8001104:	4413      	add	r3, r2
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
	  					ModBUS_F03_Assign(&mb_eth,5,atoi(num,10));
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	210a      	movs	r1, #10
 8001110:	4618      	mov	r0, r3
 8001112:	f00d fef8 	bl	800ef06 <atoi>
 8001116:	4603      	mov	r3, r0
 8001118:	b29b      	uxth	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	2105      	movs	r1, #5
 800111e:	481f      	ldr	r0, [pc, #124]	; (800119c <main+0xb08>)
 8001120:	f00b fc31 	bl	800c986 <ModBUS_F03_Assign>

	  					i++;
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	3301      	adds	r3, #1
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
	  					j=0;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
	  					while(lr.dataRCV_hld[i] != ';')
 800112e:	e011      	b.n	8001154 <main+0xac0>
	  					{
	  						num[j]=lr.dataRCV_hld[i];
 8001130:	4a19      	ldr	r2, [pc, #100]	; (8001198 <main+0xb04>)
 8001132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001134:	4413      	add	r3, r2
 8001136:	f203 3356 	addw	r3, r3, #854	; 0x356
 800113a:	7819      	ldrb	r1, [r3, #0]
 800113c:	f107 0218 	add.w	r2, r7, #24
 8001140:	6a3b      	ldr	r3, [r7, #32]
 8001142:	4413      	add	r3, r2
 8001144:	460a      	mov	r2, r1
 8001146:	701a      	strb	r2, [r3, #0]
	  						j++;
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	3301      	adds	r3, #1
 800114c:	623b      	str	r3, [r7, #32]
	  						i++;
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	3301      	adds	r3, #1
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
	  					while(lr.dataRCV_hld[i] != ';')
 8001154:	4a10      	ldr	r2, [pc, #64]	; (8001198 <main+0xb04>)
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	4413      	add	r3, r2
 800115a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b3b      	cmp	r3, #59	; 0x3b
 8001162:	d1e5      	bne.n	8001130 <main+0xa9c>
	  					}
	  					num[j]='\0';
 8001164:	f107 0218 	add.w	r2, r7, #24
 8001168:	6a3b      	ldr	r3, [r7, #32]
 800116a:	4413      	add	r3, r2
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
	  					ModBUS_F03_Assign(&mb_eth,6,atoi(num,10));
 8001170:	f107 0318 	add.w	r3, r7, #24
 8001174:	210a      	movs	r1, #10
 8001176:	4618      	mov	r0, r3
 8001178:	f00d fec5 	bl	800ef06 <atoi>
 800117c:	4603      	mov	r3, r0
 800117e:	b29b      	uxth	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	2106      	movs	r1, #6
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <main+0xb08>)
 8001186:	f00b fbfe 	bl	800c986 <ModBUS_F03_Assign>

	  					i++;
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	3301      	adds	r3, #1
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
	  					j=0;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
	  					while(lr.dataRCV_hld[i] != ';')
 8001194:	e016      	b.n	80011c4 <main+0xb30>
 8001196:	bf00      	nop
 8001198:	20000370 	.word	0x20000370
 800119c:	200018c4 	.word	0x200018c4
	  					{
	  						num[j]=lr.dataRCV_hld[i];
 80011a0:	4a88      	ldr	r2, [pc, #544]	; (80013c4 <main+0xd30>)
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	4413      	add	r3, r2
 80011a6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80011aa:	7819      	ldrb	r1, [r3, #0]
 80011ac:	f107 0218 	add.w	r2, r7, #24
 80011b0:	6a3b      	ldr	r3, [r7, #32]
 80011b2:	4413      	add	r3, r2
 80011b4:	460a      	mov	r2, r1
 80011b6:	701a      	strb	r2, [r3, #0]
	  						j++;
 80011b8:	6a3b      	ldr	r3, [r7, #32]
 80011ba:	3301      	adds	r3, #1
 80011bc:	623b      	str	r3, [r7, #32]
	  						i++;
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	3301      	adds	r3, #1
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
	  					while(lr.dataRCV_hld[i] != ';')
 80011c4:	4a7f      	ldr	r2, [pc, #508]	; (80013c4 <main+0xd30>)
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	4413      	add	r3, r2
 80011ca:	f203 3356 	addw	r3, r3, #854	; 0x356
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b3b      	cmp	r3, #59	; 0x3b
 80011d2:	d1e5      	bne.n	80011a0 <main+0xb0c>
	  					}
	  					num[j]='\0';
 80011d4:	f107 0218 	add.w	r2, r7, #24
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	4413      	add	r3, r2
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
	  					ModBUS_F03_Assign(&mb_eth,7,atoi(num,10));
 80011e0:	f107 0318 	add.w	r3, r7, #24
 80011e4:	210a      	movs	r1, #10
 80011e6:	4618      	mov	r0, r3
 80011e8:	f00d fe8d 	bl	800ef06 <atoi>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	461a      	mov	r2, r3
 80011f2:	2107      	movs	r1, #7
 80011f4:	4874      	ldr	r0, [pc, #464]	; (80013c8 <main+0xd34>)
 80011f6:	f00b fbc6 	bl	800c986 <ModBUS_F03_Assign>

	  					i++;
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	3301      	adds	r3, #1
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
	  					j=0;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
	  					while(lr.dataRCV_hld[i] != ';')
 8001204:	e011      	b.n	800122a <main+0xb96>
	  					{
	  						num[j]=lr.dataRCV_hld[i];
 8001206:	4a6f      	ldr	r2, [pc, #444]	; (80013c4 <main+0xd30>)
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	4413      	add	r3, r2
 800120c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8001210:	7819      	ldrb	r1, [r3, #0]
 8001212:	f107 0218 	add.w	r2, r7, #24
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	4413      	add	r3, r2
 800121a:	460a      	mov	r2, r1
 800121c:	701a      	strb	r2, [r3, #0]
	  						j++;
 800121e:	6a3b      	ldr	r3, [r7, #32]
 8001220:	3301      	adds	r3, #1
 8001222:	623b      	str	r3, [r7, #32]
	  						i++;
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	3301      	adds	r3, #1
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
	  					while(lr.dataRCV_hld[i] != ';')
 800122a:	4a66      	ldr	r2, [pc, #408]	; (80013c4 <main+0xd30>)
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	4413      	add	r3, r2
 8001230:	f203 3356 	addw	r3, r3, #854	; 0x356
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b3b      	cmp	r3, #59	; 0x3b
 8001238:	d1e5      	bne.n	8001206 <main+0xb72>
	  					}
	  					num[j]='\0';
 800123a:	f107 0218 	add.w	r2, r7, #24
 800123e:	6a3b      	ldr	r3, [r7, #32]
 8001240:	4413      	add	r3, r2
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
	  					ModBUS_F03_Assign(&mb_eth,8,atoi(num,10));
 8001246:	f107 0318 	add.w	r3, r7, #24
 800124a:	210a      	movs	r1, #10
 800124c:	4618      	mov	r0, r3
 800124e:	f00d fe5a 	bl	800ef06 <atoi>
 8001252:	4603      	mov	r3, r0
 8001254:	b29b      	uxth	r3, r3
 8001256:	461a      	mov	r2, r3
 8001258:	2108      	movs	r1, #8
 800125a:	485b      	ldr	r0, [pc, #364]	; (80013c8 <main+0xd34>)
 800125c:	f00b fb93 	bl	800c986 <ModBUS_F03_Assign>

	  					i++;
 8001260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001262:	3301      	adds	r3, #1
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
	  					j=0;
 8001266:	2300      	movs	r3, #0
 8001268:	623b      	str	r3, [r7, #32]
	  					while(lr.dataRCV_hld[i] != ';')
 800126a:	e011      	b.n	8001290 <main+0xbfc>
	  					{
	  						num[j]=lr.dataRCV_hld[i];
 800126c:	4a55      	ldr	r2, [pc, #340]	; (80013c4 <main+0xd30>)
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	4413      	add	r3, r2
 8001272:	f203 3356 	addw	r3, r3, #854	; 0x356
 8001276:	7819      	ldrb	r1, [r3, #0]
 8001278:	f107 0218 	add.w	r2, r7, #24
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	4413      	add	r3, r2
 8001280:	460a      	mov	r2, r1
 8001282:	701a      	strb	r2, [r3, #0]
	  						j++;
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	3301      	adds	r3, #1
 8001288:	623b      	str	r3, [r7, #32]
	  						i++;
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	3301      	adds	r3, #1
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
	  					while(lr.dataRCV_hld[i] != ';')
 8001290:	4a4c      	ldr	r2, [pc, #304]	; (80013c4 <main+0xd30>)
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	4413      	add	r3, r2
 8001296:	f203 3356 	addw	r3, r3, #854	; 0x356
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b3b      	cmp	r3, #59	; 0x3b
 800129e:	d1e5      	bne.n	800126c <main+0xbd8>
	  					}
	  					num[j]='\0';
 80012a0:	f107 0218 	add.w	r2, r7, #24
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	4413      	add	r3, r2
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
	  					ModBUS_F03_Assign(&mb_eth,9,atoi(num,10));
 80012ac:	f107 0318 	add.w	r3, r7, #24
 80012b0:	210a      	movs	r1, #10
 80012b2:	4618      	mov	r0, r3
 80012b4:	f00d fe27 	bl	800ef06 <atoi>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	2109      	movs	r1, #9
 80012c0:	4841      	ldr	r0, [pc, #260]	; (80013c8 <main+0xd34>)
 80012c2:	f00b fb60 	bl	800c986 <ModBUS_F03_Assign>


	  				}
	  				}

	  			if(lr.tmr_dly_ON==1)
 80012c6:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <main+0xd30>)
 80012c8:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d147      	bne.n	8001360 <main+0xccc>
	  				{
	  					lr.tmr_dly_ON=0;
 80012d0:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <main+0xd30>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
	  					LoRa_reset_sndTIMER(&lr,3000);
 80012d8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80012dc:	4839      	ldr	r0, [pc, #228]	; (80013c4 <main+0xd30>)
 80012de:	f00a fe0b 	bl	800bef8 <LoRa_reset_sndTIMER>
						lr.dest_address[0]='\0';
 80012e2:	4b38      	ldr	r3, [pc, #224]	; (80013c4 <main+0xd30>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	759a      	strb	r2, [r3, #22]
						lr.txbuff[0]='\0';
 80012e8:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <main+0xd30>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
			  			strncat(lr.dest_address,"1",1);
 80012f0:	4836      	ldr	r0, [pc, #216]	; (80013cc <main+0xd38>)
 80012f2:	f7fe ff7f 	bl	80001f4 <strlen>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b34      	ldr	r3, [pc, #208]	; (80013cc <main+0xd38>)
 80012fc:	4413      	add	r3, r2
 80012fe:	4934      	ldr	r1, [pc, #208]	; (80013d0 <main+0xd3c>)
 8001300:	461a      	mov	r2, r3
 8001302:	460b      	mov	r3, r1
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	8013      	strh	r3, [r2, #0]
			  			strncat(lr.txbuff,"prueba de envio de mensaje de texto",strlen("prueba de envio de mensaje de texto"));
 8001308:	4832      	ldr	r0, [pc, #200]	; (80013d4 <main+0xd40>)
 800130a:	f7fe ff73 	bl	80001f4 <strlen>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <main+0xd40>)
 8001314:	4413      	add	r3, r2
 8001316:	4a30      	ldr	r2, [pc, #192]	; (80013d8 <main+0xd44>)
 8001318:	4614      	mov	r4, r2
 800131a:	469c      	mov	ip, r3
 800131c:	f104 0e20 	add.w	lr, r4, #32
 8001320:	4665      	mov	r5, ip
 8001322:	4626      	mov	r6, r4
 8001324:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001326:	6028      	str	r0, [r5, #0]
 8001328:	6069      	str	r1, [r5, #4]
 800132a:	60aa      	str	r2, [r5, #8]
 800132c:	60eb      	str	r3, [r5, #12]
 800132e:	3410      	adds	r4, #16
 8001330:	f10c 0c10 	add.w	ip, ip, #16
 8001334:	4574      	cmp	r4, lr
 8001336:	d1f3      	bne.n	8001320 <main+0xc8c>
 8001338:	4663      	mov	r3, ip
 800133a:	4622      	mov	r2, r4
 800133c:	6810      	ldr	r0, [r2, #0]
 800133e:	6018      	str	r0, [r3, #0]
			  			lr.txitems=strlen("prueba de envio de mensaje de texto");
 8001340:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <main+0xd30>)
 8001342:	2223      	movs	r2, #35	; 0x23
 8001344:	f8c3 27e0 	str.w	r2, [r3, #2016]	; 0x7e0
		  				lr.estado=_SENT;										//
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <main+0xd30>)
 800134a:	2214      	movs	r2, #20
 800134c:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
			  			error=LoRa_Send(&lr,&huart2);
 8001350:	4922      	ldr	r1, [pc, #136]	; (80013dc <main+0xd48>)
 8001352:	481c      	ldr	r0, [pc, #112]	; (80013c4 <main+0xd30>)
 8001354:	f00a fd22 	bl	800bd9c <LoRa_Send>
 8001358:	4603      	mov	r3, r0
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <main+0xd4c>)
 800135e:	701a      	strb	r2, [r3, #0]
	  				}
	  		}

	  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8001360:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <main+0xd50>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d108      	bne.n	800137a <main+0xce6>
	  			{
	  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8001368:	2201      	movs	r2, #1
 800136a:	491f      	ldr	r1, [pc, #124]	; (80013e8 <main+0xd54>)
 800136c:	481f      	ldr	r0, [pc, #124]	; (80013ec <main+0xd58>)
 800136e:	f008 fdf7 	bl	8009f60 <WiFi_Conn_ND>
 8001372:	4603      	mov	r3, r0
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <main+0xd5c>)
 8001378:	701a      	strb	r2, [r3, #0]
	  			}
	  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 800137a:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <main+0xd60>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	f47f ac22 	bne.w	8000bc8 <main+0x534>
	  			{
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 7180 	mov.w	r1, #256	; 0x100
 800138a:	481b      	ldr	r0, [pc, #108]	; (80013f8 <main+0xd64>)
 800138c:	f002 fa8a 	bl	80038a4 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8001390:	2115      	movs	r1, #21
 8001392:	481a      	ldr	r0, [pc, #104]	; (80013fc <main+0xd68>)
 8001394:	f000 fada 	bl	800194c <ITM0_Write>
	  				HAL_Delay(2000);//210419
 8001398:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800139c:	f001 fe20 	bl	8002fe0 <HAL_Delay>
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a6:	4814      	ldr	r0, [pc, #80]	; (80013f8 <main+0xd64>)
 80013a8:	f002 fa7c 	bl	80038a4 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP WAIT 5s AFT RST\r\n",strlen("\r\n ESP WAIT 5s AFT RST\r\n"));
 80013ac:	2118      	movs	r1, #24
 80013ae:	4814      	ldr	r0, [pc, #80]	; (8001400 <main+0xd6c>)
 80013b0:	f000 facc 	bl	800194c <ITM0_Write>
	  				HAL_Delay(5000);//210419
 80013b4:	f241 3088 	movw	r0, #5000	; 0x1388
 80013b8:	f001 fe12 	bl	8002fe0 <HAL_Delay>
	  				esp_restart=0;
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <main+0xd60>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
	  	  if (ESP_HW_Init==1)
 80013c2:	e401      	b.n	8000bc8 <main+0x534>
 80013c4:	20000370 	.word	0x20000370
 80013c8:	200018c4 	.word	0x200018c4
 80013cc:	20000386 	.word	0x20000386
 80013d0:	08010524 	.word	0x08010524
 80013d4:	2000084c 	.word	0x2000084c
 80013d8:	08010528 	.word	0x08010528
 80013dc:	200002e0 	.word	0x200002e0
 80013e0:	20000b74 	.word	0x20000b74
 80013e4:	20003817 	.word	0x20003817
 80013e8:	2000029c 	.word	0x2000029c
 80013ec:	20000b78 	.word	0x20000b78
 80013f0:	20003821 	.word	0x20003821
 80013f4:	20003820 	.word	0x20003820
 80013f8:	40020000 	.word	0x40020000
 80013fc:	0801054c 	.word	0x0801054c
 8001400:	08010564 	.word	0x08010564

08001404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b094      	sub	sp, #80	; 0x50
 8001408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140a:	f107 0320 	add.w	r3, r7, #32
 800140e:	2230      	movs	r2, #48	; 0x30
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f00d ff77 	bl	800f306 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	4b27      	ldr	r3, [pc, #156]	; (80014cc <SystemClock_Config+0xc8>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	4a26      	ldr	r2, [pc, #152]	; (80014cc <SystemClock_Config+0xc8>)
 8001432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001436:	6413      	str	r3, [r2, #64]	; 0x40
 8001438:	4b24      	ldr	r3, [pc, #144]	; (80014cc <SystemClock_Config+0xc8>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001444:	2300      	movs	r3, #0
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <SystemClock_Config+0xcc>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a20      	ldr	r2, [pc, #128]	; (80014d0 <SystemClock_Config+0xcc>)
 800144e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <SystemClock_Config+0xcc>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001460:	2301      	movs	r3, #1
 8001462:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001464:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800146a:	2302      	movs	r3, #2
 800146c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800146e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001472:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001474:	230c      	movs	r3, #12
 8001476:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001478:	2360      	movs	r3, #96	; 0x60
 800147a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800147c:	2302      	movs	r3, #2
 800147e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001480:	2304      	movs	r3, #4
 8001482:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001484:	f107 0320 	add.w	r3, r7, #32
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fa3f 	bl	800390c <HAL_RCC_OscConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001494:	f001 fa1e 	bl	80028d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001498:	230f      	movs	r3, #15
 800149a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800149c:	2302      	movs	r3, #2
 800149e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	2103      	movs	r1, #3
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 fca1 	bl	8003dfc <HAL_RCC_ClockConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014c0:	f001 fa08 	bl	80028d4 <Error_Handler>
  }
}
 80014c4:	bf00      	nop
 80014c6:	3750      	adds	r7, #80	; 0x50
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40007000 	.word	0x40007000

080014d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <MX_SPI1_Init+0x64>)
 80014da:	4a18      	ldr	r2, [pc, #96]	; (800153c <MX_SPI1_Init+0x68>)
 80014dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014de:	4b16      	ldr	r3, [pc, #88]	; (8001538 <MX_SPI1_Init+0x64>)
 80014e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <MX_SPI1_Init+0x64>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <MX_SPI1_Init+0x64>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_SPI1_Init+0x64>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <MX_SPI1_Init+0x64>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_SPI1_Init+0x64>)
 8001500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001504:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MX_SPI1_Init+0x64>)
 8001508:	2210      	movs	r2, #16
 800150a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <MX_SPI1_Init+0x64>)
 800150e:	2200      	movs	r2, #0
 8001510:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_SPI1_Init+0x64>)
 8001514:	2200      	movs	r2, #0
 8001516:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <MX_SPI1_Init+0x64>)
 800151a:	2200      	movs	r2, #0
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <MX_SPI1_Init+0x64>)
 8001520:	220a      	movs	r2, #10
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001524:	4804      	ldr	r0, [pc, #16]	; (8001538 <MX_SPI1_Init+0x64>)
 8001526:	f002 fe49 	bl	80041bc <HAL_SPI_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001530:	f001 f9d0 	bl	80028d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200001b4 	.word	0x200001b4
 800153c:	40013000 	.word	0x40013000

08001540 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08e      	sub	sp, #56	; 0x38
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001554:	f107 0320 	add.w	r3, r7, #32
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
 800156c:	615a      	str	r2, [r3, #20]
 800156e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001570:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <MX_TIM2_Init+0xf0>)
 8001572:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001576:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8001578:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <MX_TIM2_Init+0xf0>)
 800157a:	2264      	movs	r2, #100	; 0x64
 800157c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157e:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <MX_TIM2_Init+0xf0>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001584:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <MX_TIM2_Init+0xf0>)
 8001586:	2264      	movs	r2, #100	; 0x64
 8001588:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158a:	4b29      	ldr	r3, [pc, #164]	; (8001630 <MX_TIM2_Init+0xf0>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001590:	4b27      	ldr	r3, [pc, #156]	; (8001630 <MX_TIM2_Init+0xf0>)
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001596:	4826      	ldr	r0, [pc, #152]	; (8001630 <MX_TIM2_Init+0xf0>)
 8001598:	f003 f906 	bl	80047a8 <HAL_TIM_Base_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80015a2:	f001 f997 	bl	80028d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015b0:	4619      	mov	r1, r3
 80015b2:	481f      	ldr	r0, [pc, #124]	; (8001630 <MX_TIM2_Init+0xf0>)
 80015b4:	f003 fd0e 	bl	8004fd4 <HAL_TIM_ConfigClockSource>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80015be:	f001 f989 	bl	80028d4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80015c2:	481b      	ldr	r0, [pc, #108]	; (8001630 <MX_TIM2_Init+0xf0>)
 80015c4:	f003 f93f 	bl	8004846 <HAL_TIM_OC_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80015ce:	f001 f981 	bl	80028d4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80015d2:	2108      	movs	r1, #8
 80015d4:	4816      	ldr	r0, [pc, #88]	; (8001630 <MX_TIM2_Init+0xf0>)
 80015d6:	f003 fb3f 	bl	8004c58 <HAL_TIM_OnePulse_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80015e0:	f001 f978 	bl	80028d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ec:	f107 0320 	add.w	r3, r7, #32
 80015f0:	4619      	mov	r1, r3
 80015f2:	480f      	ldr	r0, [pc, #60]	; (8001630 <MX_TIM2_Init+0xf0>)
 80015f4:	f004 f8aa 	bl	800574c <HAL_TIMEx_MasterConfigSynchronization>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 80015fe:	f001 f969 	bl	80028d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8001602:	2320      	movs	r3, #32
 8001604:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2200      	movs	r2, #0
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_TIM2_Init+0xf0>)
 800161a:	f003 fc7f 	bl	8004f1c <HAL_TIM_OC_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001624:	f001 f956 	bl	80028d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	3738      	adds	r7, #56	; 0x38
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2000020c 	.word	0x2000020c

08001634 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08e      	sub	sp, #56	; 0x38
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001648:	f107 0320 	add.w	r3, r7, #32
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
 8001660:	615a      	str	r2, [r3, #20]
 8001662:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001664:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <MX_TIM3_Init+0xf0>)
 8001666:	4a30      	ldr	r2, [pc, #192]	; (8001728 <MX_TIM3_Init+0xf4>)
 8001668:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 800166a:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <MX_TIM3_Init+0xf0>)
 800166c:	2264      	movs	r2, #100	; 0x64
 800166e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001670:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <MX_TIM3_Init+0xf0>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 8001676:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <MX_TIM3_Init+0xf0>)
 8001678:	2296      	movs	r2, #150	; 0x96
 800167a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167c:	4b29      	ldr	r3, [pc, #164]	; (8001724 <MX_TIM3_Init+0xf0>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001682:	4b28      	ldr	r3, [pc, #160]	; (8001724 <MX_TIM3_Init+0xf0>)
 8001684:	2280      	movs	r2, #128	; 0x80
 8001686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001688:	4826      	ldr	r0, [pc, #152]	; (8001724 <MX_TIM3_Init+0xf0>)
 800168a:	f003 f88d 	bl	80047a8 <HAL_TIM_Base_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001694:	f001 f91e 	bl	80028d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800169e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a2:	4619      	mov	r1, r3
 80016a4:	481f      	ldr	r0, [pc, #124]	; (8001724 <MX_TIM3_Init+0xf0>)
 80016a6:	f003 fc95 	bl	8004fd4 <HAL_TIM_ConfigClockSource>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80016b0:	f001 f910 	bl	80028d4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80016b4:	481b      	ldr	r0, [pc, #108]	; (8001724 <MX_TIM3_Init+0xf0>)
 80016b6:	f003 f8c6 	bl	8004846 <HAL_TIM_OC_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80016c0:	f001 f908 	bl	80028d4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80016c4:	2108      	movs	r1, #8
 80016c6:	4817      	ldr	r0, [pc, #92]	; (8001724 <MX_TIM3_Init+0xf0>)
 80016c8:	f003 fac6 	bl	8004c58 <HAL_TIM_OnePulse_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 80016d2:	f001 f8ff 	bl	80028d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016de:	f107 0320 	add.w	r3, r7, #32
 80016e2:	4619      	mov	r1, r3
 80016e4:	480f      	ldr	r0, [pc, #60]	; (8001724 <MX_TIM3_Init+0xf0>)
 80016e6:	f004 f831 	bl	800574c <HAL_TIMEx_MasterConfigSynchronization>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 80016f0:	f001 f8f0 	bl	80028d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 80016f4:	2320      	movs	r3, #32
 80016f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	2200      	movs	r2, #0
 8001708:	4619      	mov	r1, r3
 800170a:	4806      	ldr	r0, [pc, #24]	; (8001724 <MX_TIM3_Init+0xf0>)
 800170c:	f003 fc06 	bl	8004f1c <HAL_TIM_OC_ConfigChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001716:	f001 f8dd 	bl	80028d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	3738      	adds	r7, #56	; 0x38
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000254 	.word	0x20000254
 8001728:	40000400 	.word	0x40000400

0800172c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_USART1_UART_Init+0x4c>)
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <MX_USART1_UART_Init+0x50>)
 8001734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <MX_USART1_UART_Init+0x4c>)
 8001738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800173c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_USART1_UART_Init+0x4c>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_USART1_UART_Init+0x4c>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <MX_USART1_UART_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_USART1_UART_Init+0x4c>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <MX_USART1_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_USART1_UART_Init+0x4c>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_USART1_UART_Init+0x4c>)
 8001764:	f004 f874 	bl	8005850 <HAL_UART_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800176e:	f001 f8b1 	bl	80028d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000029c 	.word	0x2000029c
 800177c:	40011000 	.word	0x40011000

08001780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <MX_USART2_UART_Init+0x50>)
 8001788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 800178c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017a6:	220c      	movs	r2, #12
 80017a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017b8:	f004 f84a 	bl	8005850 <HAL_UART_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017c2:	f001 f887 	bl	80028d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200002e0 	.word	0x200002e0
 80017d0:	40004400 	.word	0x40004400

080017d4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_USART6_UART_Init+0x4c>)
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <MX_USART6_UART_Init+0x50>)
 80017dc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <MX_USART6_UART_Init+0x4c>)
 80017e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_USART6_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_USART6_UART_Init+0x4c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <MX_USART6_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_USART6_UART_Init+0x4c>)
 80017fa:	220c      	movs	r2, #12
 80017fc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <MX_USART6_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_USART6_UART_Init+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_USART6_UART_Init+0x4c>)
 800180c:	f004 f820 	bl	8005850 <HAL_UART_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001816:	f001 f85d 	bl	80028d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000324 	.word	0x20000324
 8001824:	40011400 	.word	0x40011400

08001828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <MX_GPIO_Init+0x118>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a3e      	ldr	r2, [pc, #248]	; (8001940 <MX_GPIO_Init+0x118>)
 8001848:	f043 0304 	orr.w	r3, r3, #4
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b3c      	ldr	r3, [pc, #240]	; (8001940 <MX_GPIO_Init+0x118>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	4b38      	ldr	r3, [pc, #224]	; (8001940 <MX_GPIO_Init+0x118>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a37      	ldr	r2, [pc, #220]	; (8001940 <MX_GPIO_Init+0x118>)
 8001864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b35      	ldr	r3, [pc, #212]	; (8001940 <MX_GPIO_Init+0x118>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	4b31      	ldr	r3, [pc, #196]	; (8001940 <MX_GPIO_Init+0x118>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a30      	ldr	r2, [pc, #192]	; (8001940 <MX_GPIO_Init+0x118>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <MX_GPIO_Init+0x118>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <MX_GPIO_Init+0x118>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a29      	ldr	r2, [pc, #164]	; (8001940 <MX_GPIO_Init+0x118>)
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b27      	ldr	r3, [pc, #156]	; (8001940 <MX_GPIO_Init+0x118>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b4:	4823      	ldr	r0, [pc, #140]	; (8001944 <MX_GPIO_Init+0x11c>)
 80018b6:	f001 fff5 	bl	80038a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|WIFI_EN_Pin, GPIO_PIN_SET);
 80018ba:	2201      	movs	r2, #1
 80018bc:	f44f 7188 	mov.w	r1, #272	; 0x110
 80018c0:	4821      	ldr	r0, [pc, #132]	; (8001948 <MX_GPIO_Init+0x120>)
 80018c2:	f001 ffef 	bl	80038a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 80018c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018cc:	2301      	movs	r3, #1
 80018ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4619      	mov	r1, r3
 80018de:	4819      	ldr	r0, [pc, #100]	; (8001944 <MX_GPIO_Init+0x11c>)
 80018e0:	f001 fd78 	bl	80033d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_BTN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin;
 80018e4:	2301      	movs	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_BTN_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	4814      	ldr	r0, [pc, #80]	; (8001948 <MX_GPIO_Init+0x120>)
 80018f8:	f001 fd6c 	bl	80033d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80018fc:	2310      	movs	r3, #16
 80018fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001900:	2301      	movs	r3, #1
 8001902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001908:	2303      	movs	r3, #3
 800190a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	480d      	ldr	r0, [pc, #52]	; (8001948 <MX_GPIO_Init+0x120>)
 8001914:	f001 fd5e 	bl	80033d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_EN_Pin */
  GPIO_InitStruct.Pin = WIFI_EN_Pin;
 8001918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800191c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191e:	2301      	movs	r3, #1
 8001920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2300      	movs	r3, #0
 8001928:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_EN_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	4805      	ldr	r0, [pc, #20]	; (8001948 <MX_GPIO_Init+0x120>)
 8001932:	f001 fd4f 	bl	80033d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001936:	bf00      	nop
 8001938:	3728      	adds	r7, #40	; 0x28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800
 8001944:	40020800 	.word	0x40020800
 8001948:	40020000 	.word	0x40020000

0800194c <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	e009      	b.n	8001970 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe fe6d 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	3301      	adds	r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	dbf1      	blt.n	800195c <ITM0_Write+0x10>
  }
  return len;
 8001978:	683b      	ldr	r3, [r7, #0]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 800198a:	4b68      	ldr	r3, [pc, #416]	; (8001b2c <SysTick_Handler+0x1a8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	3301      	adds	r3, #1
 8001990:	4a66      	ldr	r2, [pc, #408]	; (8001b2c <SysTick_Handler+0x1a8>)
 8001992:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 8001994:	4b66      	ldr	r3, [pc, #408]	; (8001b30 <SysTick_Handler+0x1ac>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	3301      	adds	r3, #1
 800199a:	4a65      	ldr	r2, [pc, #404]	; (8001b30 <SysTick_Handler+0x1ac>)
 800199c:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 800199e:	4b65      	ldr	r3, [pc, #404]	; (8001b34 <SysTick_Handler+0x1b0>)
 80019a0:	791b      	ldrb	r3, [r3, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d004      	beq.n	80019b0 <SysTick_Handler+0x2c>
 80019a6:	4b64      	ldr	r3, [pc, #400]	; (8001b38 <SysTick_Handler+0x1b4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	3301      	adds	r3, #1
 80019ac:	4a62      	ldr	r2, [pc, #392]	; (8001b38 <SysTick_Handler+0x1b4>)
 80019ae:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 80019b0:	4b60      	ldr	r3, [pc, #384]	; (8001b34 <SysTick_Handler+0x1b0>)
 80019b2:	791b      	ldrb	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00c      	beq.n	80019d2 <SysTick_Handler+0x4e>
 80019b8:	4b5e      	ldr	r3, [pc, #376]	; (8001b34 <SysTick_Handler+0x1b0>)
 80019ba:	885b      	ldrh	r3, [r3, #2]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b5e      	ldr	r3, [pc, #376]	; (8001b38 <SysTick_Handler+0x1b4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	da05      	bge.n	80019d2 <SysTick_Handler+0x4e>
		{
			mb_eth._w_answer=0;
 80019c6:	4b5b      	ldr	r3, [pc, #364]	; (8001b34 <SysTick_Handler+0x1b0>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	711a      	strb	r2, [r3, #4]
			MB_TOUT_ticks=0;
 80019cc:	4b5a      	ldr	r3, [pc, #360]	; (8001b38 <SysTick_Handler+0x1b4>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
		}

// ENVIO DATOS LoRa ---------------------------------------------------------------//

	if(lr.tmr_dly_en==1)
 80019d2:	4b5a      	ldr	r3, [pc, #360]	; (8001b3c <SysTick_Handler+0x1b8>)
 80019d4:	f893 37ed 	ldrb.w	r3, [r3, #2029]	; 0x7ed
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d116      	bne.n	8001a0a <SysTick_Handler+0x86>
	{
		lr.tmr_dlyCNT++;
 80019dc:	4b57      	ldr	r3, [pc, #348]	; (8001b3c <SysTick_Handler+0x1b8>)
 80019de:	f8d3 37f4 	ldr.w	r3, [r3, #2036]	; 0x7f4
 80019e2:	3301      	adds	r3, #1
 80019e4:	4a55      	ldr	r2, [pc, #340]	; (8001b3c <SysTick_Handler+0x1b8>)
 80019e6:	f8c2 37f4 	str.w	r3, [r2, #2036]	; 0x7f4
		if(lr.tmr_dlyCNT > lr.tmr_dly)
 80019ea:	4b54      	ldr	r3, [pc, #336]	; (8001b3c <SysTick_Handler+0x1b8>)
 80019ec:	f8d3 27f4 	ldr.w	r2, [r3, #2036]	; 0x7f4
 80019f0:	4b52      	ldr	r3, [pc, #328]	; (8001b3c <SysTick_Handler+0x1b8>)
 80019f2:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
 80019f6:	429a      	cmp	r2, r3
 80019f8:	dd07      	ble.n	8001a0a <SysTick_Handler+0x86>
		{
			lr.tmr_dly_ON=1;
 80019fa:	4b50      	ldr	r3, [pc, #320]	; (8001b3c <SysTick_Handler+0x1b8>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
			lr.tmr_dly_en=0;
 8001a02:	4b4e      	ldr	r3, [pc, #312]	; (8001b3c <SysTick_Handler+0x1b8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		}
	}
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 8001a0a:	4b4d      	ldr	r3, [pc, #308]	; (8001b40 <SysTick_Handler+0x1bc>)
 8001a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a10:	f240 2261 	movw	r2, #609	; 0x261
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d005      	beq.n	8001a24 <SysTick_Handler+0xa0>
 8001a18:	4b49      	ldr	r3, [pc, #292]	; (8001b40 <SysTick_Handler+0x1bc>)
 8001a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a1e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001a22:	d109      	bne.n	8001a38 <SysTick_Handler+0xb4>
 8001a24:	4b46      	ldr	r3, [pc, #280]	; (8001b40 <SysTick_Handler+0x1bc>)
 8001a26:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d104      	bne.n	8001a38 <SysTick_Handler+0xb4>
 8001a2e:	4b45      	ldr	r3, [pc, #276]	; (8001b44 <SysTick_Handler+0x1c0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	3301      	adds	r3, #1
 8001a34:	4a43      	ldr	r2, [pc, #268]	; (8001b44 <SysTick_Handler+0x1c0>)
 8001a36:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 2000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;
 8001a38:	4b42      	ldr	r3, [pc, #264]	; (8001b44 <SysTick_Handler+0x1c0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001a40:	db0c      	blt.n	8001a5c <SysTick_Handler+0xd8>
 8001a42:	4b3f      	ldr	r3, [pc, #252]	; (8001b40 <SysTick_Handler+0x1bc>)
 8001a44:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d007      	beq.n	8001a5c <SysTick_Handler+0xd8>
 8001a4c:	4b3c      	ldr	r3, [pc, #240]	; (8001b40 <SysTick_Handler+0x1bc>)
 8001a4e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d102      	bne.n	8001a5c <SysTick_Handler+0xd8>
 8001a56:	4b3c      	ldr	r3, [pc, #240]	; (8001b48 <SysTick_Handler+0x1c4>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S0_status == 0)
 8001a5c:	4b3b      	ldr	r3, [pc, #236]	; (8001b4c <SysTick_Handler+0x1c8>)
 8001a5e:	7b9b      	ldrb	r3, [r3, #14]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10e      	bne.n	8001a82 <SysTick_Handler+0xfe>
	{
		ETH.ETH_WDG++;
 8001a64:	4b39      	ldr	r3, [pc, #228]	; (8001b4c <SysTick_Handler+0x1c8>)
 8001a66:	899b      	ldrh	r3, [r3, #12]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	4b37      	ldr	r3, [pc, #220]	; (8001b4c <SysTick_Handler+0x1c8>)
 8001a6e:	819a      	strh	r2, [r3, #12]
		if (ETH.ETH_WDG>=64000)
 8001a70:	4b36      	ldr	r3, [pc, #216]	; (8001b4c <SysTick_Handler+0x1c8>)
 8001a72:	899b      	ldrh	r3, [r3, #12]
 8001a74:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001a78:	d303      	bcc.n	8001a82 <SysTick_Handler+0xfe>
		{
			ETH.ETH_WDG=64000;
 8001a7a:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <SysTick_Handler+0x1c8>)
 8001a7c:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001a80:	819a      	strh	r2, [r3, #12]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 8001a82:	4b2a      	ldr	r3, [pc, #168]	; (8001b2c <SysTick_Handler+0x1a8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b64      	cmp	r3, #100	; 0x64
 8001a88:	f040 8420 	bne.w	80022cc <SysTick_Handler+0x948>
  {
	  dbgn++;
 8001a8c:	4b30      	ldr	r3, [pc, #192]	; (8001b50 <SysTick_Handler+0x1cc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	3301      	adds	r3, #1
 8001a92:	4a2f      	ldr	r2, [pc, #188]	; (8001b50 <SysTick_Handler+0x1cc>)
 8001a94:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 8001a96:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <SysTick_Handler+0x1a8>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 8001a9c:	4b2d      	ldr	r3, [pc, #180]	; (8001b54 <SysTick_Handler+0x1d0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	4a2c      	ldr	r2, [pc, #176]	; (8001b54 <SysTick_Handler+0x1d0>)
 8001aa4:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 8001aa6:	4b2c      	ldr	r3, [pc, #176]	; (8001b58 <SysTick_Handler+0x1d4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001aae:	d102      	bne.n	8001ab6 <SysTick_Handler+0x132>
 8001ab0:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <SysTick_Handler+0x1d4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 8001ab6:	4b29      	ldr	r3, [pc, #164]	; (8001b5c <SysTick_Handler+0x1d8>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d104      	bne.n	8001ac8 <SysTick_Handler+0x144>
 8001abe:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <SysTick_Handler+0x1d4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	4a24      	ldr	r2, [pc, #144]	; (8001b58 <SysTick_Handler+0x1d4>)
 8001ac6:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 8001ac8:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <SysTick_Handler+0x1d4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b64      	cmp	r3, #100	; 0x64
 8001ace:	d102      	bne.n	8001ad6 <SysTick_Handler+0x152>
 8001ad0:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <SysTick_Handler+0x1d8>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 8001ad6:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <SysTick_Handler+0x1d8>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d104      	bne.n	8001ae8 <SysTick_Handler+0x164>
 8001ade:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <SysTick_Handler+0x1d4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <SysTick_Handler+0x1d4>)
 8001ae6:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <SysTick_Handler+0x1d4>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d102      	bne.n	8001af6 <SysTick_Handler+0x172>
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <SysTick_Handler+0x1d8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]


	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001af6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001afa:	4819      	ldr	r0, [pc, #100]	; (8001b60 <SysTick_Handler+0x1dc>)
 8001afc:	f001 feeb 	bl	80038d6 <HAL_GPIO_TogglePin>
	  if(spi_no_debug)
 8001b00:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <SysTick_Handler+0x1e0>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 83d1 	beq.w	80022ac <SysTick_Handler+0x928>
	  	  {
	  if(SPI_READ_EN)
 8001b0a:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <SysTick_Handler+0x1e4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 83d0 	beq.w	80022b4 <SysTick_Handler+0x930>
	  {
	     ETH.S0_status=eth_rd_SOCKET_STAT(&ETH,0);
 8001b14:	2100      	movs	r1, #0
 8001b16:	480d      	ldr	r0, [pc, #52]	; (8001b4c <SysTick_Handler+0x1c8>)
 8001b18:	f00c fc56 	bl	800e3c8 <eth_rd_SOCKET_STAT>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <SysTick_Handler+0x1c8>)
 8001b22:	739a      	strb	r2, [r3, #14]

		  switch(ETH.S0_status)	//Check Socket status
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <SysTick_Handler+0x1c8>)
 8001b26:	7b9b      	ldrb	r3, [r3, #14]
 8001b28:	e020      	b.n	8001b6c <SysTick_Handler+0x1e8>
 8001b2a:	bf00      	nop
 8001b2c:	20000368 	.word	0x20000368
 8001b30:	20003e40 	.word	0x20003e40
 8001b34:	200018c4 	.word	0x200018c4
 8001b38:	20003e48 	.word	0x20003e48
 8001b3c:	20000370 	.word	0x20000370
 8001b40:	20000b78 	.word	0x20000b78
 8001b44:	20002760 	.word	0x20002760
 8001b48:	2000275d 	.word	0x2000275d
 8001b4c:	20002764 	.word	0x20002764
 8001b50:	20003e6c 	.word	0x20003e6c
 8001b54:	2000036c 	.word	0x2000036c
 8001b58:	20003e44 	.word	0x20003e44
 8001b5c:	20003822 	.word	0x20003822
 8001b60:	40020800 	.word	0x40020800
 8001b64:	20003814 	.word	0x20003814
 8001b68:	20003824 	.word	0x20003824
 8001b6c:	2b5f      	cmp	r3, #95	; 0x5f
 8001b6e:	f200 83a6 	bhi.w	80022be <SysTick_Handler+0x93a>
 8001b72:	a201      	add	r2, pc, #4	; (adr r2, 8001b78 <SysTick_Handler+0x1f4>)
 8001b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b78:	08001cf9 	.word	0x08001cf9
 8001b7c:	080022bf 	.word	0x080022bf
 8001b80:	080022bf 	.word	0x080022bf
 8001b84:	080022bf 	.word	0x080022bf
 8001b88:	080022bf 	.word	0x080022bf
 8001b8c:	080022bf 	.word	0x080022bf
 8001b90:	080022bf 	.word	0x080022bf
 8001b94:	080022bf 	.word	0x080022bf
 8001b98:	080022bf 	.word	0x080022bf
 8001b9c:	080022bf 	.word	0x080022bf
 8001ba0:	080022bf 	.word	0x080022bf
 8001ba4:	080022bf 	.word	0x080022bf
 8001ba8:	080022bf 	.word	0x080022bf
 8001bac:	080022bf 	.word	0x080022bf
 8001bb0:	080022bf 	.word	0x080022bf
 8001bb4:	080022bf 	.word	0x080022bf
 8001bb8:	080022bf 	.word	0x080022bf
 8001bbc:	080022bf 	.word	0x080022bf
 8001bc0:	080022bf 	.word	0x080022bf
 8001bc4:	08001d31 	.word	0x08001d31
 8001bc8:	08001d83 	.word	0x08001d83
 8001bcc:	08001d9b 	.word	0x08001d9b
 8001bd0:	08001db3 	.word	0x08001db3
 8001bd4:	08001dcb 	.word	0x08001dcb
 8001bd8:	08002127 	.word	0x08002127
 8001bdc:	080022bf 	.word	0x080022bf
 8001be0:	0800213f 	.word	0x0800213f
 8001be4:	08002157 	.word	0x08002157
 8001be8:	08002195 	.word	0x08002195
 8001bec:	080021d3 	.word	0x080021d3
 8001bf0:	080022bf 	.word	0x080022bf
 8001bf4:	080022bf 	.word	0x080022bf
 8001bf8:	080022bf 	.word	0x080022bf
 8001bfc:	080022bf 	.word	0x080022bf
 8001c00:	080021eb 	.word	0x080021eb
 8001c04:	080022bf 	.word	0x080022bf
 8001c08:	080022bf 	.word	0x080022bf
 8001c0c:	080022bf 	.word	0x080022bf
 8001c10:	080022bf 	.word	0x080022bf
 8001c14:	080022bf 	.word	0x080022bf
 8001c18:	080022bf 	.word	0x080022bf
 8001c1c:	080022bf 	.word	0x080022bf
 8001c20:	080022bf 	.word	0x080022bf
 8001c24:	080022bf 	.word	0x080022bf
 8001c28:	080022bf 	.word	0x080022bf
 8001c2c:	080022bf 	.word	0x080022bf
 8001c30:	080022bf 	.word	0x080022bf
 8001c34:	080022bf 	.word	0x080022bf
 8001c38:	080022bf 	.word	0x080022bf
 8001c3c:	080022bf 	.word	0x080022bf
 8001c40:	08002265 	.word	0x08002265
 8001c44:	080022bf 	.word	0x080022bf
 8001c48:	080022bf 	.word	0x080022bf
 8001c4c:	080022bf 	.word	0x080022bf
 8001c50:	080022bf 	.word	0x080022bf
 8001c54:	080022bf 	.word	0x080022bf
 8001c58:	080022bf 	.word	0x080022bf
 8001c5c:	080022bf 	.word	0x080022bf
 8001c60:	080022bf 	.word	0x080022bf
 8001c64:	080022bf 	.word	0x080022bf
 8001c68:	080022bf 	.word	0x080022bf
 8001c6c:	080022bf 	.word	0x080022bf
 8001c70:	080022bf 	.word	0x080022bf
 8001c74:	080022bf 	.word	0x080022bf
 8001c78:	080022bf 	.word	0x080022bf
 8001c7c:	080022bf 	.word	0x080022bf
 8001c80:	0800227d 	.word	0x0800227d
 8001c84:	080022bf 	.word	0x080022bf
 8001c88:	080022bf 	.word	0x080022bf
 8001c8c:	080022bf 	.word	0x080022bf
 8001c90:	080022bf 	.word	0x080022bf
 8001c94:	080022bf 	.word	0x080022bf
 8001c98:	080022bf 	.word	0x080022bf
 8001c9c:	080022bf 	.word	0x080022bf
 8001ca0:	080022bf 	.word	0x080022bf
 8001ca4:	080022bf 	.word	0x080022bf
 8001ca8:	080022bf 	.word	0x080022bf
 8001cac:	080022bf 	.word	0x080022bf
 8001cb0:	080022bf 	.word	0x080022bf
 8001cb4:	080022bf 	.word	0x080022bf
 8001cb8:	080022bf 	.word	0x080022bf
 8001cbc:	080022bf 	.word	0x080022bf
 8001cc0:	080022bf 	.word	0x080022bf
 8001cc4:	080022bf 	.word	0x080022bf
 8001cc8:	080022bf 	.word	0x080022bf
 8001ccc:	080022bf 	.word	0x080022bf
 8001cd0:	080022bf 	.word	0x080022bf
 8001cd4:	080022bf 	.word	0x080022bf
 8001cd8:	080022bf 	.word	0x080022bf
 8001cdc:	080022bf 	.word	0x080022bf
 8001ce0:	080022bf 	.word	0x080022bf
 8001ce4:	080022bf 	.word	0x080022bf
 8001ce8:	080022bf 	.word	0x080022bf
 8001cec:	080022bf 	.word	0x080022bf
 8001cf0:	080022bf 	.word	0x080022bf
 8001cf4:	08002295 	.word	0x08002295
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 8001cf8:	4b82      	ldr	r3, [pc, #520]	; (8001f04 <SysTick_Handler+0x580>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <SysTick_Handler+0x384>
 8001d00:	2113      	movs	r1, #19
 8001d02:	4881      	ldr	r0, [pc, #516]	; (8001f08 <SysTick_Handler+0x584>)
 8001d04:	f7ff fe22 	bl	800194c <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH, 0 ,OPEN );
 8001d08:	2201      	movs	r2, #1
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	487f      	ldr	r0, [pc, #508]	; (8001f0c <SysTick_Handler+0x588>)
 8001d0e:	f00c fa29 	bl	800e164 <eth_wr_SOCKET_CMD>
					 // Si no tengo intento de ARP por 5 segundos vuelvo a inicializar
					 if(ETH.ETH_WDG>=5000)
 8001d12:	4b7e      	ldr	r3, [pc, #504]	; (8001f0c <SysTick_Handler+0x588>)
 8001d14:	899b      	ldrh	r3, [r3, #12]
 8001d16:	f241 3287 	movw	r2, #4999	; 0x1387
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	f240 82cc 	bls.w	80022b8 <SysTick_Handler+0x934>
					 {
						 eth_init(&ETH);
 8001d20:	487a      	ldr	r0, [pc, #488]	; (8001f0c <SysTick_Handler+0x588>)
 8001d22:	f00c fa5b 	bl	800e1dc <eth_init>

						 eth_socket_init(&ETH,0);
 8001d26:	2100      	movs	r1, #0
 8001d28:	4878      	ldr	r0, [pc, #480]	; (8001f0c <SysTick_Handler+0x588>)
 8001d2a:	f00c fad1 	bl	800e2d0 <eth_socket_init>
					 }

				 }
			 break;
 8001d2e:	e2c3      	b.n	80022b8 <SysTick_Handler+0x934>
			 case  SOCK_INIT :
				 {
					 if(ETH.S0_ENserver == 1)
 8001d30:	4b76      	ldr	r3, [pc, #472]	; (8001f0c <SysTick_Handler+0x588>)
 8001d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d110      	bne.n	8001d60 <SysTick_Handler+0x3dc>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 8001d3e:	4b71      	ldr	r3, [pc, #452]	; (8001f04 <SysTick_Handler+0x580>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <SysTick_Handler+0x3ca>
 8001d46:	2111      	movs	r1, #17
 8001d48:	4871      	ldr	r0, [pc, #452]	; (8001f10 <SysTick_Handler+0x58c>)
 8001d4a:	f7ff fdff 	bl	800194c <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, 0, LISTEN );
 8001d4e:	2202      	movs	r2, #2
 8001d50:	2100      	movs	r1, #0
 8001d52:	486e      	ldr	r0, [pc, #440]	; (8001f0c <SysTick_Handler+0x588>)
 8001d54:	f00c fa06 	bl	800e164 <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 8001d58:	4b6c      	ldr	r3, [pc, #432]	; (8001f0c <SysTick_Handler+0x588>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	819a      	strh	r2, [r3, #12]
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 8001d5e:	e2ae      	b.n	80022be <SysTick_Handler+0x93a>
						 	eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
 8001d60:	2204      	movs	r2, #4
 8001d62:	2100      	movs	r1, #0
 8001d64:	4869      	ldr	r0, [pc, #420]	; (8001f0c <SysTick_Handler+0x588>)
 8001d66:	f00c f9fd 	bl	800e164 <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
 8001d6a:	4b66      	ldr	r3, [pc, #408]	; (8001f04 <SysTick_Handler+0x580>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <SysTick_Handler+0x3f6>
 8001d72:	2115      	movs	r1, #21
 8001d74:	4867      	ldr	r0, [pc, #412]	; (8001f14 <SysTick_Handler+0x590>)
 8001d76:	f7ff fde9 	bl	800194c <ITM0_Write>
						 	ETH.ETH_WDG=0;
 8001d7a:	4b64      	ldr	r3, [pc, #400]	; (8001f0c <SysTick_Handler+0x588>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	819a      	strh	r2, [r3, #12]
			 break;
 8001d80:	e29d      	b.n	80022be <SysTick_Handler+0x93a>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 8001d82:	4b60      	ldr	r3, [pc, #384]	; (8001f04 <SysTick_Handler+0x580>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <SysTick_Handler+0x40e>
 8001d8a:	2113      	movs	r1, #19
 8001d8c:	4862      	ldr	r0, [pc, #392]	; (8001f18 <SysTick_Handler+0x594>)
 8001d8e:	f7ff fddd 	bl	800194c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001d92:	4b5e      	ldr	r3, [pc, #376]	; (8001f0c <SysTick_Handler+0x588>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001d98:	e291      	b.n	80022be <SysTick_Handler+0x93a>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 8001d9a:	4b5a      	ldr	r3, [pc, #360]	; (8001f04 <SysTick_Handler+0x580>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <SysTick_Handler+0x426>
 8001da2:	2114      	movs	r1, #20
 8001da4:	485d      	ldr	r0, [pc, #372]	; (8001f1c <SysTick_Handler+0x598>)
 8001da6:	f7ff fdd1 	bl	800194c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001daa:	4b58      	ldr	r3, [pc, #352]	; (8001f0c <SysTick_Handler+0x588>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001db0:	e285      	b.n	80022be <SysTick_Handler+0x93a>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 8001db2:	4b54      	ldr	r3, [pc, #336]	; (8001f04 <SysTick_Handler+0x580>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <SysTick_Handler+0x43e>
 8001dba:	2114      	movs	r1, #20
 8001dbc:	4858      	ldr	r0, [pc, #352]	; (8001f20 <SysTick_Handler+0x59c>)
 8001dbe:	f7ff fdc5 	bl	800194c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001dc2:	4b52      	ldr	r3, [pc, #328]	; (8001f0c <SysTick_Handler+0x588>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001dc8:	e279      	b.n	80022be <SysTick_Handler+0x93a>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 8001dca:	4b4e      	ldr	r3, [pc, #312]	; (8001f04 <SysTick_Handler+0x580>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <SysTick_Handler+0x456>
 8001dd2:	2118      	movs	r1, #24
 8001dd4:	4853      	ldr	r0, [pc, #332]	; (8001f24 <SysTick_Handler+0x5a0>)
 8001dd6:	f7ff fdb9 	bl	800194c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001dda:	4b4c      	ldr	r3, [pc, #304]	; (8001f0c <SysTick_Handler+0x588>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	819a      	strh	r2, [r3, #12]

					if (ETH.S0_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 8001de0:	4b4a      	ldr	r3, [pc, #296]	; (8001f0c <SysTick_Handler+0x588>)
 8001de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	f040 80b0 	bne.w	8001f50 <SysTick_Handler+0x5cc>
					{

							S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001df0:	2302      	movs	r3, #2
 8001df2:	9301      	str	r3, [sp, #4]
 8001df4:	4b4c      	ldr	r3, [pc, #304]	; (8001f28 <SysTick_Handler+0x5a4>)
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	230f      	movs	r3, #15
 8001dfa:	2226      	movs	r2, #38	; 0x26
 8001dfc:	2104      	movs	r1, #4
 8001dfe:	4843      	ldr	r0, [pc, #268]	; (8001f0c <SysTick_Handler+0x588>)
 8001e00:	f00c f885 	bl	800df0e <SPI_ETH_REG>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	4b48      	ldr	r3, [pc, #288]	; (8001f2c <SysTick_Handler+0x5a8>)
 8001e0a:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001e0c:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <SysTick_Handler+0x5a8>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 8253 	beq.w	80022bc <SysTick_Handler+0x938>
							{
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001e16:	4b45      	ldr	r3, [pc, #276]	; (8001f2c <SysTick_Handler+0x5a8>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	4a45      	ldr	r2, [pc, #276]	; (8001f30 <SysTick_Handler+0x5ac>)
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	483b      	ldr	r0, [pc, #236]	; (8001f0c <SysTick_Handler+0x588>)
 8001e20:	f00c fb0c 	bl	800e43c <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001e24:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <SysTick_Handler+0x5ac>)
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001e2e:	4837      	ldr	r0, [pc, #220]	; (8001f0c <SysTick_Handler+0x588>)
 8001e30:	f00c f8e5 	bl	800dffe <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001e34:	2240      	movs	r2, #64	; 0x40
 8001e36:	2100      	movs	r1, #0
 8001e38:	4834      	ldr	r0, [pc, #208]	; (8001f0c <SysTick_Handler+0x588>)
 8001e3a:	f00c f993 	bl	800e164 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001e3e:	bf00      	nop
 8001e40:	2100      	movs	r1, #0
 8001e42:	4832      	ldr	r0, [pc, #200]	; (8001f0c <SysTick_Handler+0x588>)
 8001e44:	f00c fadd 	bl	800e402 <eth_rd_SOCKET_CMD>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f8      	bne.n	8001e40 <SysTick_Handler+0x4bc>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001e4e:	4b37      	ldr	r3, [pc, #220]	; (8001f2c <SysTick_Handler+0x5a8>)
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	2300      	movs	r3, #0
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	4936      	ldr	r1, [pc, #216]	; (8001f34 <SysTick_Handler+0x5b0>)
 8001e5c:	4836      	ldr	r0, [pc, #216]	; (8001f38 <SysTick_Handler+0x5b4>)
 8001e5e:	f00d f807 	bl	800ee70 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001e62:	4b32      	ldr	r3, [pc, #200]	; (8001f2c <SysTick_Handler+0x5a8>)
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	4b34      	ldr	r3, [pc, #208]	; (8001f3c <SysTick_Handler+0x5b8>)
 8001e6a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}					//Flag data received
 8001e6e:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <SysTick_Handler+0x5a8>)
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <SysTick_Handler+0x4f8>
 8001e76:	4b25      	ldr	r3, [pc, #148]	; (8001f0c <SysTick_Handler+0x588>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	749a      	strb	r2, [r3, #18]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001e7c:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <SysTick_Handler+0x5b8>)
 8001e7e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001e82:	4619      	mov	r1, r3
 8001e84:	482c      	ldr	r0, [pc, #176]	; (8001f38 <SysTick_Handler+0x5b4>)
 8001e86:	f00a fd2f 	bl	800c8e8 <ModBUS_Check>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00d      	beq.n	8001eac <SysTick_Handler+0x528>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001e90:	482a      	ldr	r0, [pc, #168]	; (8001f3c <SysTick_Handler+0x5b8>)
 8001e92:	f00a fe2b 	bl	800caec <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 8001e96:	4b29      	ldr	r3, [pc, #164]	; (8001f3c <SysTick_Handler+0x5b8>)
 8001e98:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	4927      	ldr	r1, [pc, #156]	; (8001f40 <SysTick_Handler+0x5bc>)
 8001ea4:	4823      	ldr	r0, [pc, #140]	; (8001f34 <SysTick_Handler+0x5b0>)
 8001ea6:	f00c ffe3 	bl	800ee70 <CopiaVector>
 8001eaa:	e007      	b.n	8001ebc <SysTick_Handler+0x538>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001eac:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <SysTick_Handler+0x580>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <SysTick_Handler+0x538>
 8001eb4:	2111      	movs	r1, #17
 8001eb6:	4823      	ldr	r0, [pc, #140]	; (8001f44 <SysTick_Handler+0x5c0>)
 8001eb8:	f7ff fd48 	bl	800194c <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001ebc:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <SysTick_Handler+0x5b8>)
 8001ebe:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <SysTick_Handler+0x5c4>)
 8001ec6:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001ec8:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <SysTick_Handler+0x5c4>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	4a1f      	ldr	r2, [pc, #124]	; (8001f4c <SysTick_Handler+0x5c8>)
 8001ece:	2100      	movs	r1, #0
 8001ed0:	480e      	ldr	r0, [pc, #56]	; (8001f0c <SysTick_Handler+0x588>)
 8001ed2:	f00c fb83 	bl	800e5dc <eth_wr_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <SysTick_Handler+0x5c8>)
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	f240 4124 	movw	r1, #1060	; 0x424
 8001ee0:	480a      	ldr	r0, [pc, #40]	; (8001f0c <SysTick_Handler+0x588>)
 8001ee2:	f00c f88c 	bl	800dffe <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4808      	ldr	r0, [pc, #32]	; (8001f0c <SysTick_Handler+0x588>)
 8001eec:	f00c f93a 	bl	800e164 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001ef0:	bf00      	nop
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4805      	ldr	r0, [pc, #20]	; (8001f0c <SysTick_Handler+0x588>)
 8001ef6:	f00c fa84 	bl	800e402 <eth_rd_SOCKET_CMD>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f8      	bne.n	8001ef2 <SysTick_Handler+0x56e>

							}
						}
					}
				 }
			 break;
 8001f00:	e1dc      	b.n	80022bc <SysTick_Handler+0x938>
 8001f02:	bf00      	nop
 8001f04:	2000275c 	.word	0x2000275c
 8001f08:	08010580 	.word	0x08010580
 8001f0c:	20002764 	.word	0x20002764
 8001f10:	08010594 	.word	0x08010594
 8001f14:	080105a8 	.word	0x080105a8
 8001f18:	080105c0 	.word	0x080105c0
 8001f1c:	080105d4 	.word	0x080105d4
 8001f20:	080105ec 	.word	0x080105ec
 8001f24:	08010604 	.word	0x08010604
 8001f28:	200037d4 	.word	0x200037d4
 8001f2c:	200037cc 	.word	0x200037cc
 8001f30:	200037d0 	.word	0x200037d0
 8001f34:	20002780 	.word	0x20002780
 8001f38:	200018d1 	.word	0x200018d1
 8001f3c:	200018c4 	.word	0x200018c4
 8001f40:	20001a58 	.word	0x20001a58
 8001f44:	08010620 	.word	0x08010620
 8001f48:	200037d2 	.word	0x200037d2
 8001f4c:	200037ce 	.word	0x200037ce
						if (mb_eth._w_answer==0)
 8001f50:	4bac      	ldr	r3, [pc, #688]	; (8002204 <SysTick_Handler+0x880>)
 8001f52:	791b      	ldrb	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d167      	bne.n	8002028 <SysTick_Handler+0x6a4>
							ETH.data[0]=0x00;
 8001f58:	4bab      	ldr	r3, [pc, #684]	; (8002208 <SysTick_Handler+0x884>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	771a      	strb	r2, [r3, #28]
							ETH.data[1]=0x00;
 8001f5e:	4baa      	ldr	r3, [pc, #680]	; (8002208 <SysTick_Handler+0x884>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	775a      	strb	r2, [r3, #29]
							ETH.data[2]=0x00;
 8001f64:	4ba8      	ldr	r3, [pc, #672]	; (8002208 <SysTick_Handler+0x884>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	779a      	strb	r2, [r3, #30]
							ETH.data[3]=0x00;
 8001f6a:	4ba7      	ldr	r3, [pc, #668]	; (8002208 <SysTick_Handler+0x884>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	77da      	strb	r2, [r3, #31]
							ETH.data[4]=0x00;
 8001f70:	4ba5      	ldr	r3, [pc, #660]	; (8002208 <SysTick_Handler+0x884>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2020 	strb.w	r2, [r3, #32]
							ETH.data[5]=0x06;
 8001f78:	4ba3      	ldr	r3, [pc, #652]	; (8002208 <SysTick_Handler+0x884>)
 8001f7a:	2206      	movs	r2, #6
 8001f7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
							ETH.data[6]=0x01;
 8001f80:	4ba1      	ldr	r3, [pc, #644]	; (8002208 <SysTick_Handler+0x884>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
							ETH.data[7]=0x03;
 8001f88:	4b9f      	ldr	r3, [pc, #636]	; (8002208 <SysTick_Handler+0x884>)
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							ETH.data[8]=0x00;
 8001f90:	4b9d      	ldr	r3, [pc, #628]	; (8002208 <SysTick_Handler+0x884>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[9]=0x00;
 8001f98:	4b9b      	ldr	r3, [pc, #620]	; (8002208 <SysTick_Handler+0x884>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[10]=0x00;
 8001fa0:	4b99      	ldr	r3, [pc, #612]	; (8002208 <SysTick_Handler+0x884>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[11]=0x0A;
 8001fa8:	4b97      	ldr	r3, [pc, #604]	; (8002208 <SysTick_Handler+0x884>)
 8001faa:	220a      	movs	r2, #10
 8001fac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							send_size=12;
 8001fb0:	4b96      	ldr	r3, [pc, #600]	; (800220c <SysTick_Handler+0x888>)
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4892      	ldr	r0, [pc, #584]	; (8002204 <SysTick_Handler+0x880>)
 8001fbc:	f00a fd3f 	bl	800ca3e <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	4991      	ldr	r1, [pc, #580]	; (8002210 <SysTick_Handler+0x88c>)
 8001fca:	4892      	ldr	r0, [pc, #584]	; (8002214 <SysTick_Handler+0x890>)
 8001fcc:	f00c ff50 	bl	800ee70 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001fd0:	4b8e      	ldr	r3, [pc, #568]	; (800220c <SysTick_Handler+0x888>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	4a90      	ldr	r2, [pc, #576]	; (8002218 <SysTick_Handler+0x894>)
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	488b      	ldr	r0, [pc, #556]	; (8002208 <SysTick_Handler+0x884>)
 8001fda:	f00c faff 	bl	800e5dc <eth_wr_SOCKET_DATA>
							SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001fde:	4b8e      	ldr	r3, [pc, #568]	; (8002218 <SysTick_Handler+0x894>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	f240 4124 	movw	r1, #1060	; 0x424
 8001fe8:	4887      	ldr	r0, [pc, #540]	; (8002208 <SysTick_Handler+0x884>)
 8001fea:	f00c f808 	bl	800dffe <SPI_ETH_WR_REG_16>
							eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001fee:	2220      	movs	r2, #32
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4885      	ldr	r0, [pc, #532]	; (8002208 <SysTick_Handler+0x884>)
 8001ff4:	f00c f8b6 	bl	800e164 <eth_wr_SOCKET_CMD>
							while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001ff8:	bf00      	nop
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4882      	ldr	r0, [pc, #520]	; (8002208 <SysTick_Handler+0x884>)
 8001ffe:	f00c fa00 	bl	800e402 <eth_rd_SOCKET_CMD>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f8      	bne.n	8001ffa <SysTick_Handler+0x676>
							mb_eth._w_answer=1;	// Waiting answer flag
 8002008:	4b7e      	ldr	r3, [pc, #504]	; (8002204 <SysTick_Handler+0x880>)
 800200a:	2201      	movs	r2, #1
 800200c:	711a      	strb	r2, [r3, #4]
							MB_TOUT_ticks=0;	// restart counting
 800200e:	4b83      	ldr	r3, [pc, #524]	; (800221c <SysTick_Handler+0x898>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8002014:	4b82      	ldr	r3, [pc, #520]	; (8002220 <SysTick_Handler+0x89c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 814f 	beq.w	80022bc <SysTick_Handler+0x938>
 800201e:	2117      	movs	r1, #23
 8002020:	4880      	ldr	r0, [pc, #512]	; (8002224 <SysTick_Handler+0x8a0>)
 8002022:	f7ff fc93 	bl	800194c <ITM0_Write>
			 break;
 8002026:	e149      	b.n	80022bc <SysTick_Handler+0x938>
						S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8002028:	2302      	movs	r3, #2
 800202a:	9301      	str	r3, [sp, #4]
 800202c:	4b7e      	ldr	r3, [pc, #504]	; (8002228 <SysTick_Handler+0x8a4>)
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	230f      	movs	r3, #15
 8002032:	2226      	movs	r2, #38	; 0x26
 8002034:	2104      	movs	r1, #4
 8002036:	4874      	ldr	r0, [pc, #464]	; (8002208 <SysTick_Handler+0x884>)
 8002038:	f00b ff69 	bl	800df0e <SPI_ETH_REG>
 800203c:	4603      	mov	r3, r0
 800203e:	461a      	mov	r2, r3
 8002040:	4b7a      	ldr	r3, [pc, #488]	; (800222c <SysTick_Handler+0x8a8>)
 8002042:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8002044:	4b79      	ldr	r3, [pc, #484]	; (800222c <SysTick_Handler+0x8a8>)
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 8137 	beq.w	80022bc <SysTick_Handler+0x938>
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 800204e:	4b77      	ldr	r3, [pc, #476]	; (800222c <SysTick_Handler+0x8a8>)
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	4a77      	ldr	r2, [pc, #476]	; (8002230 <SysTick_Handler+0x8ac>)
 8002054:	2100      	movs	r1, #0
 8002056:	486c      	ldr	r0, [pc, #432]	; (8002208 <SysTick_Handler+0x884>)
 8002058:	f00c f9f0 	bl	800e43c <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 800205c:	4b74      	ldr	r3, [pc, #464]	; (8002230 <SysTick_Handler+0x8ac>)
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8002066:	4868      	ldr	r0, [pc, #416]	; (8002208 <SysTick_Handler+0x884>)
 8002068:	f00b ffc9 	bl	800dffe <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 800206c:	2240      	movs	r2, #64	; 0x40
 800206e:	2100      	movs	r1, #0
 8002070:	4865      	ldr	r0, [pc, #404]	; (8002208 <SysTick_Handler+0x884>)
 8002072:	f00c f877 	bl	800e164 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8002076:	bf00      	nop
 8002078:	2100      	movs	r1, #0
 800207a:	4863      	ldr	r0, [pc, #396]	; (8002208 <SysTick_Handler+0x884>)
 800207c:	f00c f9c1 	bl	800e402 <eth_rd_SOCKET_CMD>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f8      	bne.n	8002078 <SysTick_Handler+0x6f4>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8002086:	4b69      	ldr	r3, [pc, #420]	; (800222c <SysTick_Handler+0x8a8>)
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	2300      	movs	r3, #0
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	2300      	movs	r3, #0
 8002092:	4960      	ldr	r1, [pc, #384]	; (8002214 <SysTick_Handler+0x890>)
 8002094:	4867      	ldr	r0, [pc, #412]	; (8002234 <SysTick_Handler+0x8b0>)
 8002096:	f00c feeb 	bl	800ee70 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 800209a:	4b64      	ldr	r3, [pc, #400]	; (800222c <SysTick_Handler+0x8a8>)
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	4b58      	ldr	r3, [pc, #352]	; (8002204 <SysTick_Handler+0x880>)
 80020a2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}
 80020a6:	4b61      	ldr	r3, [pc, #388]	; (800222c <SysTick_Handler+0x8a8>)
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <SysTick_Handler+0x730>
 80020ae:	4b56      	ldr	r3, [pc, #344]	; (8002208 <SysTick_Handler+0x884>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	749a      	strb	r2, [r3, #18]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 80020b4:	4b53      	ldr	r3, [pc, #332]	; (8002204 <SysTick_Handler+0x880>)
 80020b6:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80020ba:	4619      	mov	r1, r3
 80020bc:	485d      	ldr	r0, [pc, #372]	; (8002234 <SysTick_Handler+0x8b0>)
 80020be:	f00a fc13 	bl	800c8e8 <ModBUS_Check>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d024      	beq.n	8002112 <SysTick_Handler+0x78e>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 80020c8:	4b4e      	ldr	r3, [pc, #312]	; (8002204 <SysTick_Handler+0x880>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	711a      	strb	r2, [r3, #4]
										MB_TOUT_ticks=0;
 80020ce:	4b53      	ldr	r3, [pc, #332]	; (800221c <SysTick_Handler+0x898>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 80020d4:	484b      	ldr	r0, [pc, #300]	; (8002204 <SysTick_Handler+0x880>)
 80020d6:	f00a fd09 	bl	800caec <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 80020da:	4b4a      	ldr	r3, [pc, #296]	; (8002204 <SysTick_Handler+0x880>)
 80020dc:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 80020e0:	2300      	movs	r3, #0
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	2300      	movs	r3, #0
 80020e6:	4953      	ldr	r1, [pc, #332]	; (8002234 <SysTick_Handler+0x8b0>)
 80020e8:	4853      	ldr	r0, [pc, #332]	; (8002238 <SysTick_Handler+0x8b4>)
 80020ea:	f00c fec1 	bl	800ee70 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 80020ee:	2300      	movs	r3, #0
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	2300      	movs	r3, #0
 80020f4:	2240      	movs	r2, #64	; 0x40
 80020f6:	4951      	ldr	r1, [pc, #324]	; (800223c <SysTick_Handler+0x8b8>)
 80020f8:	4851      	ldr	r0, [pc, #324]	; (8002240 <SysTick_Handler+0x8bc>)
 80020fa:	f00c feb9 	bl	800ee70 <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));
 80020fe:	4b48      	ldr	r3, [pc, #288]	; (8002220 <SysTick_Handler+0x89c>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 80da 	beq.w	80022bc <SysTick_Handler+0x938>
 8002108:	2117      	movs	r1, #23
 800210a:	484e      	ldr	r0, [pc, #312]	; (8002244 <SysTick_Handler+0x8c0>)
 800210c:	f7ff fc1e 	bl	800194c <ITM0_Write>
			 break;
 8002110:	e0d4      	b.n	80022bc <SysTick_Handler+0x938>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8002112:	4b43      	ldr	r3, [pc, #268]	; (8002220 <SysTick_Handler+0x89c>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 80d0 	beq.w	80022bc <SysTick_Handler+0x938>
 800211c:	2111      	movs	r1, #17
 800211e:	484a      	ldr	r0, [pc, #296]	; (8002248 <SysTick_Handler+0x8c4>)
 8002120:	f7ff fc14 	bl	800194c <ITM0_Write>
			 break;
 8002124:	e0ca      	b.n	80022bc <SysTick_Handler+0x938>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8002126:	4b3e      	ldr	r3, [pc, #248]	; (8002220 <SysTick_Handler+0x89c>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <SysTick_Handler+0x7b2>
 800212e:	2115      	movs	r1, #21
 8002130:	4846      	ldr	r0, [pc, #280]	; (800224c <SysTick_Handler+0x8c8>)
 8002132:	f7ff fc0b 	bl	800194c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8002136:	4b34      	ldr	r3, [pc, #208]	; (8002208 <SysTick_Handler+0x884>)
 8002138:	2200      	movs	r2, #0
 800213a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 800213c:	e0bf      	b.n	80022be <SysTick_Handler+0x93a>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 800213e:	4b38      	ldr	r3, [pc, #224]	; (8002220 <SysTick_Handler+0x89c>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <SysTick_Handler+0x7ca>
 8002146:	2114      	movs	r1, #20
 8002148:	4841      	ldr	r0, [pc, #260]	; (8002250 <SysTick_Handler+0x8cc>)
 800214a:	f7ff fbff 	bl	800194c <ITM0_Write>
					 ETH.ETH_WDG=0;
 800214e:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <SysTick_Handler+0x884>)
 8002150:	2200      	movs	r2, #0
 8002152:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8002154:	e0b3      	b.n	80022be <SysTick_Handler+0x93a>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8002156:	4b32      	ldr	r3, [pc, #200]	; (8002220 <SysTick_Handler+0x89c>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <SysTick_Handler+0x7e2>
 800215e:	2116      	movs	r1, #22
 8002160:	483c      	ldr	r0, [pc, #240]	; (8002254 <SysTick_Handler+0x8d0>)
 8002162:	f7ff fbf3 	bl	800194c <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0, DISCON );
 8002166:	2208      	movs	r2, #8
 8002168:	2100      	movs	r1, #0
 800216a:	4827      	ldr	r0, [pc, #156]	; (8002208 <SysTick_Handler+0x884>)
 800216c:	f00b fffa 	bl	800e164 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8002170:	bf00      	nop
 8002172:	2301      	movs	r3, #1
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	4b2c      	ldr	r3, [pc, #176]	; (8002228 <SysTick_Handler+0x8a4>)
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	230f      	movs	r3, #15
 800217c:	2201      	movs	r2, #1
 800217e:	2104      	movs	r1, #4
 8002180:	4821      	ldr	r0, [pc, #132]	; (8002208 <SysTick_Handler+0x884>)
 8002182:	f00b fec4 	bl	800df0e <SPI_ETH_REG>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f2      	bne.n	8002172 <SysTick_Handler+0x7ee>
					{}
					ETH.ETH_WDG=0;
 800218c:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <SysTick_Handler+0x884>)
 800218e:	2200      	movs	r2, #0
 8002190:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8002192:	e094      	b.n	80022be <SysTick_Handler+0x93a>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8002194:	4b22      	ldr	r3, [pc, #136]	; (8002220 <SysTick_Handler+0x89c>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <SysTick_Handler+0x820>
 800219c:	2117      	movs	r1, #23
 800219e:	482e      	ldr	r0, [pc, #184]	; (8002258 <SysTick_Handler+0x8d4>)
 80021a0:	f7ff fbd4 	bl	800194c <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0,DISCON );
 80021a4:	2208      	movs	r2, #8
 80021a6:	2100      	movs	r1, #0
 80021a8:	4817      	ldr	r0, [pc, #92]	; (8002208 <SysTick_Handler+0x884>)
 80021aa:	f00b ffdb 	bl	800e164 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 80021ae:	bf00      	nop
 80021b0:	2301      	movs	r3, #1
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <SysTick_Handler+0x8a4>)
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	230f      	movs	r3, #15
 80021ba:	2201      	movs	r2, #1
 80021bc:	2104      	movs	r1, #4
 80021be:	4812      	ldr	r0, [pc, #72]	; (8002208 <SysTick_Handler+0x884>)
 80021c0:	f00b fea5 	bl	800df0e <SPI_ETH_REG>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f2      	bne.n	80021b0 <SysTick_Handler+0x82c>
					{}
					ETH.ETH_WDG=0;
 80021ca:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <SysTick_Handler+0x884>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80021d0:	e075      	b.n	80022be <SysTick_Handler+0x93a>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 80021d2:	4b13      	ldr	r3, [pc, #76]	; (8002220 <SysTick_Handler+0x89c>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <SysTick_Handler+0x85e>
 80021da:	2115      	movs	r1, #21
 80021dc:	481f      	ldr	r0, [pc, #124]	; (800225c <SysTick_Handler+0x8d8>)
 80021de:	f7ff fbb5 	bl	800194c <ITM0_Write>
					 ETH.ETH_WDG=0;
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <SysTick_Handler+0x884>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80021e8:	e069      	b.n	80022be <SysTick_Handler+0x93a>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <SysTick_Handler+0x89c>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <SysTick_Handler+0x876>
 80021f2:	2110      	movs	r1, #16
 80021f4:	481a      	ldr	r0, [pc, #104]	; (8002260 <SysTick_Handler+0x8dc>)
 80021f6:	f7ff fba9 	bl	800194c <ITM0_Write>
					 ETH.ETH_WDG=0;
 80021fa:	4b03      	ldr	r3, [pc, #12]	; (8002208 <SysTick_Handler+0x884>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8002200:	e05d      	b.n	80022be <SysTick_Handler+0x93a>
 8002202:	bf00      	nop
 8002204:	200018c4 	.word	0x200018c4
 8002208:	20002764 	.word	0x20002764
 800220c:	200037d2 	.word	0x200037d2
 8002210:	20001a58 	.word	0x20001a58
 8002214:	20002780 	.word	0x20002780
 8002218:	200037ce 	.word	0x200037ce
 800221c:	20003e48 	.word	0x20003e48
 8002220:	2000275c 	.word	0x2000275c
 8002224:	08010630 	.word	0x08010630
 8002228:	200037d4 	.word	0x200037d4
 800222c:	200037cc 	.word	0x200037cc
 8002230:	200037d0 	.word	0x200037d0
 8002234:	200018d1 	.word	0x200018d1
 8002238:	20002f80 	.word	0x20002f80
 800223c:	20001be4 	.word	0x20001be4
 8002240:	20002130 	.word	0x20002130
 8002244:	08010644 	.word	0x08010644
 8002248:	08010620 	.word	0x08010620
 800224c:	08010658 	.word	0x08010658
 8002250:	08010670 	.word	0x08010670
 8002254:	08010688 	.word	0x08010688
 8002258:	080106a0 	.word	0x080106a0
 800225c:	080106b8 	.word	0x080106b8
 8002260:	080106d0 	.word	0x080106d0
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));
 8002264:	4b62      	ldr	r3, [pc, #392]	; (80023f0 <SysTick_Handler+0xa6c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <SysTick_Handler+0x8f0>
 800226c:	2112      	movs	r1, #18
 800226e:	4861      	ldr	r0, [pc, #388]	; (80023f4 <SysTick_Handler+0xa70>)
 8002270:	f7ff fb6c 	bl	800194c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8002274:	4b60      	ldr	r3, [pc, #384]	; (80023f8 <SysTick_Handler+0xa74>)
 8002276:	2200      	movs	r2, #0
 8002278:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 800227a:	e020      	b.n	80022be <SysTick_Handler+0x93a>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));
 800227c:	4b5c      	ldr	r3, [pc, #368]	; (80023f0 <SysTick_Handler+0xa6c>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <SysTick_Handler+0x908>
 8002284:	2113      	movs	r1, #19
 8002286:	485d      	ldr	r0, [pc, #372]	; (80023fc <SysTick_Handler+0xa78>)
 8002288:	f7ff fb60 	bl	800194c <ITM0_Write>
					 ETH.ETH_WDG=0;
 800228c:	4b5a      	ldr	r3, [pc, #360]	; (80023f8 <SysTick_Handler+0xa74>)
 800228e:	2200      	movs	r2, #0
 8002290:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8002292:	e014      	b.n	80022be <SysTick_Handler+0x93a>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));
 8002294:	4b56      	ldr	r3, [pc, #344]	; (80023f0 <SysTick_Handler+0xa6c>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <SysTick_Handler+0x920>
 800229c:	2111      	movs	r1, #17
 800229e:	4858      	ldr	r0, [pc, #352]	; (8002400 <SysTick_Handler+0xa7c>)
 80022a0:	f7ff fb54 	bl	800194c <ITM0_Write>
					 ETH.ETH_WDG=0;
 80022a4:	4b54      	ldr	r3, [pc, #336]	; (80023f8 <SysTick_Handler+0xa74>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 80022aa:	e008      	b.n	80022be <SysTick_Handler+0x93a>
	  }
	  }else
	  	  {
		  //ETH.operacion=SPI_READ;
		  //ETH.TX[3]=0x00;
		  SPI_ETH(&ETH);
 80022ac:	4852      	ldr	r0, [pc, #328]	; (80023f8 <SysTick_Handler+0xa74>)
 80022ae:	f00b fe07 	bl	800dec0 <SPI_ETH>
 80022b2:	e004      	b.n	80022be <SysTick_Handler+0x93a>
			 default:
 80022b4:	bf00      	nop
 80022b6:	e002      	b.n	80022be <SysTick_Handler+0x93a>
			 break;
 80022b8:	bf00      	nop
 80022ba:	e000      	b.n	80022be <SysTick_Handler+0x93a>
			 break;
 80022bc:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 80022be:	4b51      	ldr	r3, [pc, #324]	; (8002404 <SysTick_Handler+0xa80>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d102      	bne.n	80022cc <SysTick_Handler+0x948>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 80022c6:	4b4f      	ldr	r3, [pc, #316]	; (8002404 <SysTick_Handler+0xa80>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 80022cc:	4b4e      	ldr	r3, [pc, #312]	; (8002408 <SysTick_Handler+0xa84>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d104      	bne.n	80022de <SysTick_Handler+0x95a>
 80022d4:	4b4d      	ldr	r3, [pc, #308]	; (800240c <SysTick_Handler+0xa88>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	4a4c      	ldr	r2, [pc, #304]	; (800240c <SysTick_Handler+0xa88>)
 80022dc:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 80022de:	4b4b      	ldr	r3, [pc, #300]	; (800240c <SysTick_Handler+0xa88>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	dd0f      	ble.n	8002306 <SysTick_Handler+0x982>
	{
		USART1_ticks=0;
 80022e6:	4b49      	ldr	r3, [pc, #292]	; (800240c <SysTick_Handler+0xa88>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 80022ec:	4b48      	ldr	r3, [pc, #288]	; (8002410 <SysTick_Handler+0xa8c>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 80022f2:	4b45      	ldr	r3, [pc, #276]	; (8002408 <SysTick_Handler+0xa84>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 80022f8:	4b46      	ldr	r3, [pc, #280]	; (8002414 <SysTick_Handler+0xa90>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a46      	ldr	r2, [pc, #280]	; (8002418 <SysTick_Handler+0xa94>)
 80022fe:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 8002300:	4b44      	ldr	r3, [pc, #272]	; (8002414 <SysTick_Handler+0xa90>)
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002306:	f000 fe4b 	bl	8002fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 800230a:	4b44      	ldr	r3, [pc, #272]	; (800241c <SysTick_Handler+0xa98>)
 800230c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002310:	2b04      	cmp	r3, #4
 8002312:	d105      	bne.n	8002320 <SysTick_Handler+0x99c>
	{
		ticks++;
 8002314:	4b42      	ldr	r3, [pc, #264]	; (8002420 <SysTick_Handler+0xa9c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	3301      	adds	r3, #1
 800231a:	4a41      	ldr	r2, [pc, #260]	; (8002420 <SysTick_Handler+0xa9c>)
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e002      	b.n	8002326 <SysTick_Handler+0x9a2>
	}
	else
	{
		ticks=0;
 8002320:	4b3f      	ldr	r3, [pc, #252]	; (8002420 <SysTick_Handler+0xa9c>)
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
	}

if(wf._ejecucion==1)
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <SysTick_Handler+0xa98>)
 8002328:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 800232c:	2b01      	cmp	r3, #1
 800232e:	d158      	bne.n	80023e2 <SysTick_Handler+0xa5e>
	{
		if (FLAG_TIMEOUT!=1)
 8002330:	4b3c      	ldr	r3, [pc, #240]	; (8002424 <SysTick_Handler+0xaa0>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d017      	beq.n	8002368 <SysTick_Handler+0x9e4>
		{
			if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 8002338:	4b38      	ldr	r3, [pc, #224]	; (800241c <SysTick_Handler+0xa98>)
 800233a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800233e:	2b02      	cmp	r3, #2
 8002340:	d006      	beq.n	8002350 <SysTick_Handler+0x9cc>
 8002342:	4b36      	ldr	r3, [pc, #216]	; (800241c <SysTick_Handler+0xa98>)
 8002344:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8002348:	3301      	adds	r3, #1
 800234a:	4a34      	ldr	r2, [pc, #208]	; (800241c <SysTick_Handler+0xa98>)
 800234c:	f8c2 3cb4 	str.w	r3, [r2, #3252]	; 0xcb4
			if(wf._instruccion==2) wf._ticks2++;
 8002350:	4b32      	ldr	r3, [pc, #200]	; (800241c <SysTick_Handler+0xa98>)
 8002352:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8002356:	2b02      	cmp	r3, #2
 8002358:	d106      	bne.n	8002368 <SysTick_Handler+0x9e4>
 800235a:	4b30      	ldr	r3, [pc, #192]	; (800241c <SysTick_Handler+0xa98>)
 800235c:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8002360:	3301      	adds	r3, #1
 8002362:	4a2e      	ldr	r2, [pc, #184]	; (800241c <SysTick_Handler+0xa98>)
 8002364:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
		}


		if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 8002368:	4b2c      	ldr	r3, [pc, #176]	; (800241c <SysTick_Handler+0xa98>)
 800236a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800236e:	2b02      	cmp	r3, #2
 8002370:	d018      	beq.n	80023a4 <SysTick_Handler+0xa20>
 8002372:	4b2a      	ldr	r3, [pc, #168]	; (800241c <SysTick_Handler+0xa98>)
 8002374:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8002378:	f241 527c 	movw	r2, #5500	; 0x157c
 800237c:	4293      	cmp	r3, r2
 800237e:	dd11      	ble.n	80023a4 <SysTick_Handler+0xa20>
		{
			FLAG_TIMEOUT=1;
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <SysTick_Handler+0xaa0>)
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8002386:	4b28      	ldr	r3, [pc, #160]	; (8002428 <SysTick_Handler+0xaa4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f242 020c 	movw	r2, #8204	; 0x200c
 8002390:	4293      	cmp	r3, r2
 8002392:	d107      	bne.n	80023a4 <SysTick_Handler+0xa20>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8002394:	2201      	movs	r2, #1
 8002396:	4925      	ldr	r1, [pc, #148]	; (800242c <SysTick_Handler+0xaa8>)
 8002398:	4823      	ldr	r0, [pc, #140]	; (8002428 <SysTick_Handler+0xaa4>)
 800239a:	f003 fbac 	bl	8005af6 <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 800239e:	4b24      	ldr	r3, [pc, #144]	; (8002430 <SysTick_Handler+0xaac>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
			}
			//wf._ticks=0;
		}
		if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 80023a4:	4b1d      	ldr	r3, [pc, #116]	; (800241c <SysTick_Handler+0xa98>)
 80023a6:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d11d      	bne.n	80023ea <SysTick_Handler+0xa66>
 80023ae:	4b1b      	ldr	r3, [pc, #108]	; (800241c <SysTick_Handler+0xa98>)
 80023b0:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80023b4:	f245 0214 	movw	r2, #20500	; 0x5014
 80023b8:	4293      	cmp	r3, r2
 80023ba:	dd16      	ble.n	80023ea <SysTick_Handler+0xa66>
		{
			FLAG_TIMEOUT=1;
 80023bc:	4b19      	ldr	r3, [pc, #100]	; (8002424 <SysTick_Handler+0xaa0>)
 80023be:	2201      	movs	r2, #1
 80023c0:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 80023c2:	4b19      	ldr	r3, [pc, #100]	; (8002428 <SysTick_Handler+0xaa4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f242 020c 	movw	r2, #8204	; 0x200c
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d10c      	bne.n	80023ea <SysTick_Handler+0xa66>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 80023d0:	2201      	movs	r2, #1
 80023d2:	4916      	ldr	r1, [pc, #88]	; (800242c <SysTick_Handler+0xaa8>)
 80023d4:	4814      	ldr	r0, [pc, #80]	; (8002428 <SysTick_Handler+0xaa4>)
 80023d6:	f003 fb8e 	bl	8005af6 <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <SysTick_Handler+0xaac>)
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
	else
	{
		wf._ticks=0;
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 80023e0:	e003      	b.n	80023ea <SysTick_Handler+0xa66>
		wf._ticks=0;
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <SysTick_Handler+0xa98>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	2000275c 	.word	0x2000275c
 80023f4:	080106e4 	.word	0x080106e4
 80023f8:	20002764 	.word	0x20002764
 80023fc:	080106f8 	.word	0x080106f8
 8002400:	0801070c 	.word	0x0801070c
 8002404:	2000036c 	.word	0x2000036c
 8002408:	2000381a 	.word	0x2000381a
 800240c:	20003e58 	.word	0x20003e58
 8002410:	20003e5c 	.word	0x20003e5c
 8002414:	20003e54 	.word	0x20003e54
 8002418:	20003e60 	.word	0x20003e60
 800241c:	20000b78 	.word	0x20000b78
 8002420:	20003e4c 	.word	0x20003e4c
 8002424:	2000381b 	.word	0x2000381b
 8002428:	2000029c 	.word	0x2000029c
 800242c:	20003e2c 	.word	0x20003e2c
 8002430:	20003818 	.word	0x20003818

08002434 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a22      	ldr	r2, [pc, #136]	; (80024cc <HAL_UART_ErrorCallback+0x98>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d11c      	bne.n	8002480 <HAL_UART_ErrorCallback+0x4c>
	{
		 volatile int aore=0;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 800244e:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <HAL_UART_ErrorCallback+0x9c>)
 8002450:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8002454:	3301      	adds	r3, #1
 8002456:	4a1e      	ldr	r2, [pc, #120]	; (80024d0 <HAL_UART_ErrorCallback+0x9c>)
 8002458:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	613b      	str	r3, [r7, #16]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f003 fa3c 	bl	80058ea <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 8002472:	f7ff f95b 	bl	800172c <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8002476:	2201      	movs	r2, #1
 8002478:	4916      	ldr	r1, [pc, #88]	; (80024d4 <HAL_UART_ErrorCallback+0xa0>)
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f003 fb3b 	bl	8005af6 <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <HAL_UART_ErrorCallback+0xa4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d11c      	bne.n	80024c4 <HAL_UART_ErrorCallback+0x90>
	{
		 volatile int aore=0;
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <HAL_UART_ErrorCallback+0x9c>)
 8002494:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8002498:	3301      	adds	r3, #1
 800249a:	4a0d      	ldr	r2, [pc, #52]	; (80024d0 <HAL_UART_ErrorCallback+0x9c>)
 800249c:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	60bb      	str	r3, [r7, #8]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f003 fa1a 	bl	80058ea <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 80024b6:	f7ff f963 	bl	8001780 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 80024ba:	2201      	movs	r2, #1
 80024bc:	4905      	ldr	r1, [pc, #20]	; (80024d4 <HAL_UART_ErrorCallback+0xa0>)
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f003 fb19 	bl	8005af6 <HAL_UART_Receive_IT>
	}
}
 80024c4:	bf00      	nop
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40011000 	.word	0x40011000
 80024d0:	20000b78 	.word	0x20000b78
 80024d4:	20003e2c 	.word	0x20003e2c
 80024d8:	40004400 	.word	0x40004400

080024dc <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a2c      	ldr	r2, [pc, #176]	; (800259c <HAL_UART_RxCpltCallback+0xc0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d123      	bne.n	8002536 <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 80024ee:	4b2c      	ldr	r3, [pc, #176]	; (80025a0 <HAL_UART_RxCpltCallback+0xc4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a2c      	ldr	r2, [pc, #176]	; (80025a4 <HAL_UART_RxCpltCallback+0xc8>)
 80024f4:	7811      	ldrb	r1, [r2, #0]
 80024f6:	4a2c      	ldr	r2, [pc, #176]	; (80025a8 <HAL_UART_RxCpltCallback+0xcc>)
 80024f8:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 80024fa:	4b29      	ldr	r3, [pc, #164]	; (80025a0 <HAL_UART_RxCpltCallback+0xc4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	3301      	adds	r3, #1
 8002500:	4a27      	ldr	r2, [pc, #156]	; (80025a0 <HAL_UART_RxCpltCallback+0xc4>)
 8002502:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 8002504:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <HAL_UART_RxCpltCallback+0xc4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800250c:	db03      	blt.n	8002516 <HAL_UART_RxCpltCallback+0x3a>
 800250e:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <HAL_UART_RxCpltCallback+0xc4>)
 8002510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002514:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8002516:	2100      	movs	r1, #0
 8002518:	4824      	ldr	r0, [pc, #144]	; (80025ac <HAL_UART_RxCpltCallback+0xd0>)
 800251a:	f002 f9ed 	bl	80048f8 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 800251e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002522:	2201      	movs	r2, #1
 8002524:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 8002526:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <HAL_UART_RxCpltCallback+0xd4>)
 8002528:	2201      	movs	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 800252c:	2201      	movs	r2, #1
 800252e:	491d      	ldr	r1, [pc, #116]	; (80025a4 <HAL_UART_RxCpltCallback+0xc8>)
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f003 fae0 	bl	8005af6 <HAL_UART_Receive_IT>
		 }
// LoRa USART2 TIMER3
	if(INTSERIE->Instance==USART2)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a1e      	ldr	r2, [pc, #120]	; (80025b4 <HAL_UART_RxCpltCallback+0xd8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d128      	bne.n	8002592 <HAL_UART_RxCpltCallback+0xb6>
		 {
			UART2_RX_vect[UART2_RX_pos]=UART2_RX_byte[0];
 8002540:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <HAL_UART_RxCpltCallback+0xdc>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <HAL_UART_RxCpltCallback+0xe0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	b2d1      	uxtb	r1, r2
 800254a:	4a1d      	ldr	r2, [pc, #116]	; (80025c0 <HAL_UART_RxCpltCallback+0xe4>)
 800254c:	54d1      	strb	r1, [r2, r3]
			UART2_RX_pos++;
 800254e:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <HAL_UART_RxCpltCallback+0xe0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	3301      	adds	r3, #1
 8002554:	4a19      	ldr	r2, [pc, #100]	; (80025bc <HAL_UART_RxCpltCallback+0xe0>)
 8002556:	6013      	str	r3, [r2, #0]
			if(UART2_RX_pos>=512) UART2_RX_pos=512;
 8002558:	4b18      	ldr	r3, [pc, #96]	; (80025bc <HAL_UART_RxCpltCallback+0xe0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002560:	db03      	blt.n	800256a <HAL_UART_RxCpltCallback+0x8e>
 8002562:	4b16      	ldr	r3, [pc, #88]	; (80025bc <HAL_UART_RxCpltCallback+0xe0>)
 8002564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002568:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 800256a:	2201      	movs	r2, #1
 800256c:	2102      	movs	r1, #2
 800256e:	4815      	ldr	r0, [pc, #84]	; (80025c4 <HAL_UART_RxCpltCallback+0xe8>)
 8002570:	f001 f998 	bl	80038a4 <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8002574:	2100      	movs	r1, #0
 8002576:	4814      	ldr	r0, [pc, #80]	; (80025c8 <HAL_UART_RxCpltCallback+0xec>)
 8002578:	f002 f9be 	bl	80048f8 <HAL_TIM_OC_Start_IT>
			TIM3->CNT=1;
 800257c:	4b13      	ldr	r3, [pc, #76]	; (80025cc <HAL_UART_RxCpltCallback+0xf0>)
 800257e:	2201      	movs	r2, #1
 8002580:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART2_TMR=1;	//Habilito Timeout de software
 8002582:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <HAL_UART_RxCpltCallback+0xf4>)
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART2_RX_byte,1);
 8002588:	2201      	movs	r2, #1
 800258a:	490b      	ldr	r1, [pc, #44]	; (80025b8 <HAL_UART_RxCpltCallback+0xdc>)
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f003 fab2 	bl	8005af6 <HAL_UART_Receive_IT>
		 }
 }
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40011000 	.word	0x40011000
 80025a0:	20003e64 	.word	0x20003e64
 80025a4:	20003e2c 	.word	0x20003e2c
 80025a8:	20003828 	.word	0x20003828
 80025ac:	2000020c 	.word	0x2000020c
 80025b0:	20003818 	.word	0x20003818
 80025b4:	40004400 	.word	0x40004400
 80025b8:	20003e30 	.word	0x20003e30
 80025bc:	20003e68 	.word	0x20003e68
 80025c0:	20003a28 	.word	0x20003a28
 80025c4:	40020000 	.word	0x40020000
 80025c8:	20000254 	.word	0x20000254
 80025cc:	40000400 	.word	0x40000400
 80025d0:	20003819 	.word	0x20003819

080025d4 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af02      	add	r7, sp, #8
 80025da:	6078      	str	r0, [r7, #4]
// WiFi	USART 1 TIMER2
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e4:	d12d      	bne.n	8002642 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 80025e6:	2100      	movs	r1, #0
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f002 fa83 	bl	8004af4 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 80025ee:	4b39      	ldr	r3, [pc, #228]	; (80026d4 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 80025f4:	4b38      	ldr	r3, [pc, #224]	; (80026d8 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 80025fa:	4b38      	ldr	r3, [pc, #224]	; (80026dc <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a38      	ldr	r2, [pc, #224]	; (80026e0 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002600:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 8002602:	4b36      	ldr	r3, [pc, #216]	; (80026dc <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8002608:	4b36      	ldr	r3, [pc, #216]	; (80026e4 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 8002610:	4b33      	ldr	r3, [pc, #204]	; (80026e0 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4b34      	ldr	r3, [pc, #208]	; (80026e8 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	2301      	movs	r3, #1
 800261a:	4932      	ldr	r1, [pc, #200]	; (80026e4 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 800261c:	4833      	ldr	r0, [pc, #204]	; (80026ec <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 800261e:	f00c fc27 	bl	800ee70 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8002622:	2201      	movs	r2, #1
 8002624:	4932      	ldr	r1, [pc, #200]	; (80026f0 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8002626:	4833      	ldr	r0, [pc, #204]	; (80026f4 <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 8002628:	f003 fa65 	bl	8005af6 <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 800262c:	4b32      	ldr	r3, [pc, #200]	; (80026f8 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 800262e:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8002632:	2b01      	cmp	r3, #1
 8002634:	d105      	bne.n	8002642 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 8002636:	4b2a      	ldr	r3, [pc, #168]	; (80026e0 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4619      	mov	r1, r3
 800263c:	482b      	ldr	r0, [pc, #172]	; (80026ec <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 800263e:	f7ff f985 	bl	800194c <ITM0_Write>
				 }
		}
		// LoRa USART2 TIMER3
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM3)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a2d      	ldr	r2, [pc, #180]	; (80026fc <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d13f      	bne.n	80026cc <HAL_TIM_OC_DelayElapsedCallback+0xf8>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 800264c:	2100      	movs	r1, #0
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f002 fa50 	bl	8004af4 <HAL_TIM_OC_Stop_IT>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8002654:	2200      	movs	r2, #0
 8002656:	2102      	movs	r1, #2
 8002658:	4829      	ldr	r0, [pc, #164]	; (8002700 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 800265a:	f001 f923 	bl	80038a4 <HAL_GPIO_WritePin>
				 FLAG_UART2=1;
 800265e:	4b29      	ldr	r3, [pc, #164]	; (8002704 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
				 EN_UART2_TMR=0;
 8002664:	4b28      	ldr	r3, [pc, #160]	; (8002708 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
				 UART2_RX_items=UART2_RX_pos;
 800266a:	4b28      	ldr	r3, [pc, #160]	; (800270c <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a28      	ldr	r2, [pc, #160]	; (8002710 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8002670:	6013      	str	r3, [r2, #0]
				 UART2_RX_pos=0;
 8002672:	4b26      	ldr	r3, [pc, #152]	; (800270c <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
				 //UART2_RX_vect[UART2_RX_items]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
				 UART2_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8002678:	4b26      	ldr	r3, [pc, #152]	; (8002714 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(lr.rxbuff,UART2_RX_vect,UART2_RX_items,1,CMP_VECT);
 8002680:	4b23      	ldr	r3, [pc, #140]	; (8002710 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	2301      	movs	r3, #1
 800268a:	4922      	ldr	r1, [pc, #136]	; (8002714 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 800268c:	4822      	ldr	r0, [pc, #136]	; (8002718 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 800268e:	f00c fbef 	bl	800ee70 <CopiaVector>
				 lr.rxitems=UART2_RX_items;
 8002692:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a21      	ldr	r2, [pc, #132]	; (800271c <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8002698:	f8c2 37dc 	str.w	r3, [r2, #2012]	; 0x7dc
				 HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 800269c:	2201      	movs	r2, #1
 800269e:	4920      	ldr	r1, [pc, #128]	; (8002720 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 80026a0:	4820      	ldr	r0, [pc, #128]	; (8002724 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 80026a2:	f003 fa28 	bl	8005af6 <HAL_UART_Receive_IT>
				// ITM0_Write("\r\nRecepcion LoRa \r\n",strlen("Recepcion LoRa \r\n"));
				 if (wf._DBG_EN==1)
 80026a6:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 80026a8:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d10d      	bne.n	80026cc <HAL_TIM_OC_DelayElapsedCallback+0xf8>
				 {
					 ITM0_Write("\r\nData LoRa recibida = ",strlen("\r\nData LoRa recibida = "));
 80026b0:	2117      	movs	r1, #23
 80026b2:	481d      	ldr	r0, [pc, #116]	; (8002728 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 80026b4:	f7ff f94a 	bl	800194c <ITM0_Write>
					 ITM0_Write((uint8_t *)UART2_RX_vect,UART2_RX_items);
 80026b8:	4b15      	ldr	r3, [pc, #84]	; (8002710 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4619      	mov	r1, r3
 80026be:	4815      	ldr	r0, [pc, #84]	; (8002714 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 80026c0:	f7ff f944 	bl	800194c <ITM0_Write>
					 ITM0_Write("\r\n",strlen("\r\n"));
 80026c4:	2102      	movs	r1, #2
 80026c6:	4819      	ldr	r0, [pc, #100]	; (800272c <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 80026c8:	f7ff f940 	bl	800194c <ITM0_Write>
				 }
		}
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	2000381c 	.word	0x2000381c
 80026d8:	20003818 	.word	0x20003818
 80026dc:	20003e64 	.word	0x20003e64
 80026e0:	20003e38 	.word	0x20003e38
 80026e4:	20003828 	.word	0x20003828
 80026e8:	20003e28 	.word	0x20003e28
 80026ec:	20003c28 	.word	0x20003c28
 80026f0:	20003e2c 	.word	0x20003e2c
 80026f4:	2000029c 	.word	0x2000029c
 80026f8:	20000b78 	.word	0x20000b78
 80026fc:	40000400 	.word	0x40000400
 8002700:	40020000 	.word	0x40020000
 8002704:	2000381d 	.word	0x2000381d
 8002708:	20003819 	.word	0x20003819
 800270c:	20003e68 	.word	0x20003e68
 8002710:	20003e3c 	.word	0x20003e3c
 8002714:	20003a28 	.word	0x20003a28
 8002718:	200003c6 	.word	0x200003c6
 800271c:	20000370 	.word	0x20000370
 8002720:	20003e30 	.word	0x20003e30
 8002724:	200002e0 	.word	0x200002e0
 8002728:	08010720 	.word	0x08010720
 800272c:	08010738 	.word	0x08010738

08002730 <ESP8266_HW_Reset>:

void ESP8266_HW_Reset(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
	  ESP_REinit=0;
 8002734:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <ESP8266_HW_Reset+0x40>)
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800273a:	2200      	movs	r2, #0
 800273c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002740:	480c      	ldr	r0, [pc, #48]	; (8002774 <ESP8266_HW_Reset+0x44>)
 8002742:	f001 f8af 	bl	80038a4 <HAL_GPIO_WritePin>
	  ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8002746:	2115      	movs	r1, #21
 8002748:	480b      	ldr	r0, [pc, #44]	; (8002778 <ESP8266_HW_Reset+0x48>)
 800274a:	f7ff f8ff 	bl	800194c <ITM0_Write>
	  HAL_Delay(2000);											//Tiempo de reset del módulo
 800274e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002752:	f000 fc45 	bl	8002fe0 <HAL_Delay>
	  ITM0_Write("\r\n ESP ResetT\r\n",strlen("\r\n ESP ResetT\r\n"));
 8002756:	210f      	movs	r1, #15
 8002758:	4808      	ldr	r0, [pc, #32]	; (800277c <ESP8266_HW_Reset+0x4c>)
 800275a:	f7ff f8f7 	bl	800194c <ITM0_Write>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//Habilito módulo
 800275e:	2201      	movs	r2, #1
 8002760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002764:	4803      	ldr	r0, [pc, #12]	; (8002774 <ESP8266_HW_Reset+0x44>)
 8002766:	f001 f89d 	bl	80038a4 <HAL_GPIO_WritePin>
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20003815 	.word	0x20003815
 8002774:	40020000 	.word	0x40020000
 8002778:	0801054c 	.word	0x0801054c
 800277c:	0801073c 	.word	0x0801073c

08002780 <ESP8266_HW_Init>:
uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af06      	add	r7, sp, #24
 8002786:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 8002788:	2364      	movs	r3, #100	; 0x64
 800278a:	220c      	movs	r2, #12
 800278c:	4943      	ldr	r1, [pc, #268]	; (800289c <ESP8266_HW_Init+0x11c>)
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f003 f8da 	bl	8005948 <HAL_UART_Transmit>
		  HAL_Delay(500);
 8002794:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002798:	f000 fc22 	bl	8002fe0 <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 800279c:	4b40      	ldr	r3, [pc, #256]	; (80028a0 <ESP8266_HW_Init+0x120>)
 800279e:	2205      	movs	r2, #5
 80027a0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		  wf._n_orig=UART_RX_items;
 80027a4:	4b3f      	ldr	r3, [pc, #252]	; (80028a4 <ESP8266_HW_Init+0x124>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a3d      	ldr	r2, [pc, #244]	; (80028a0 <ESP8266_HW_Init+0x120>)
 80027aa:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 80027ae:	e00e      	b.n	80027ce <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 80027b0:	4b3c      	ldr	r3, [pc, #240]	; (80028a4 <ESP8266_HW_Init+0x124>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a3a      	ldr	r2, [pc, #232]	; (80028a0 <ESP8266_HW_Init+0x120>)
 80027b6:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  	  if (ESP_ticks>=5000)
 80027ba:	4b3b      	ldr	r3, [pc, #236]	; (80028a8 <ESP8266_HW_Init+0x128>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f241 3287 	movw	r2, #4999	; 0x1387
 80027c2:	4293      	cmp	r3, r2
 80027c4:	dd03      	ble.n	80027ce <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 80027c6:	4b39      	ldr	r3, [pc, #228]	; (80028ac <ESP8266_HW_Init+0x12c>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
			  		 break;
 80027cc:	e012      	b.n	80027f4 <ESP8266_HW_Init+0x74>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 80027ce:	2300      	movs	r3, #0
 80027d0:	9304      	str	r3, [sp, #16]
 80027d2:	4b37      	ldr	r3, [pc, #220]	; (80028b0 <ESP8266_HW_Init+0x130>)
 80027d4:	9303      	str	r3, [sp, #12]
 80027d6:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <ESP8266_HW_Init+0x134>)
 80027d8:	9302      	str	r3, [sp, #8]
 80027da:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <ESP8266_HW_Init+0x138>)
 80027dc:	9301      	str	r3, [sp, #4]
 80027de:	4b37      	ldr	r3, [pc, #220]	; (80028bc <ESP8266_HW_Init+0x13c>)
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	4b37      	ldr	r3, [pc, #220]	; (80028c0 <ESP8266_HW_Init+0x140>)
 80027e4:	4a37      	ldr	r2, [pc, #220]	; (80028c4 <ESP8266_HW_Init+0x144>)
 80027e6:	4938      	ldr	r1, [pc, #224]	; (80028c8 <ESP8266_HW_Init+0x148>)
 80027e8:	4838      	ldr	r0, [pc, #224]	; (80028cc <ESP8266_HW_Init+0x14c>)
 80027ea:	f00b ffdb 	bl	800e7a4 <FT_String_ND>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d1dd      	bne.n	80027b0 <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 80027f4:	4b2d      	ldr	r3, [pc, #180]	; (80028ac <ESP8266_HW_Init+0x12c>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d129      	bne.n	8002850 <ESP8266_HW_Init+0xd0>
		  {
			  wf._n_fcomp=strlen("ready");
 80027fc:	4b28      	ldr	r3, [pc, #160]	; (80028a0 <ESP8266_HW_Init+0x120>)
 80027fe:	2205      	movs	r2, #5
 8002800:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			  wf._n_orig=UART_RX_items;
 8002804:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <ESP8266_HW_Init+0x124>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a25      	ldr	r2, [pc, #148]	; (80028a0 <ESP8266_HW_Init+0x120>)
 800280a:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 800280e:	e00a      	b.n	8002826 <ESP8266_HW_Init+0xa6>
			  {
				  wf._n_orig=UART_RX_items;
 8002810:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <ESP8266_HW_Init+0x124>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a22      	ldr	r2, [pc, #136]	; (80028a0 <ESP8266_HW_Init+0x120>)
 8002816:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
				  if (ESP_ticks>=5000)
 800281a:	4b23      	ldr	r3, [pc, #140]	; (80028a8 <ESP8266_HW_Init+0x128>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002822:	4293      	cmp	r3, r2
 8002824:	dc13      	bgt.n	800284e <ESP8266_HW_Init+0xce>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 8002826:	2300      	movs	r3, #0
 8002828:	9304      	str	r3, [sp, #16]
 800282a:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <ESP8266_HW_Init+0x130>)
 800282c:	9303      	str	r3, [sp, #12]
 800282e:	4b21      	ldr	r3, [pc, #132]	; (80028b4 <ESP8266_HW_Init+0x134>)
 8002830:	9302      	str	r3, [sp, #8]
 8002832:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <ESP8266_HW_Init+0x138>)
 8002834:	9301      	str	r3, [sp, #4]
 8002836:	4b21      	ldr	r3, [pc, #132]	; (80028bc <ESP8266_HW_Init+0x13c>)
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <ESP8266_HW_Init+0x140>)
 800283c:	4a21      	ldr	r2, [pc, #132]	; (80028c4 <ESP8266_HW_Init+0x144>)
 800283e:	4922      	ldr	r1, [pc, #136]	; (80028c8 <ESP8266_HW_Init+0x148>)
 8002840:	4822      	ldr	r0, [pc, #136]	; (80028cc <ESP8266_HW_Init+0x14c>)
 8002842:	f00b ffaf 	bl	800e7a4 <FT_String_ND>
 8002846:	4603      	mov	r3, r0
 8002848:	2b01      	cmp	r3, #1
 800284a:	d1e1      	bne.n	8002810 <ESP8266_HW_Init+0x90>
 800284c:	e000      	b.n	8002850 <ESP8266_HW_Init+0xd0>
					 {
					 break;
 800284e:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 8002850:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <ESP8266_HW_Init+0x128>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f241 3287 	movw	r2, #4999	; 0x1387
 8002858:	4293      	cmp	r3, r2
 800285a:	dc06      	bgt.n	800286a <ESP8266_HW_Init+0xea>
		  {
			  ESP_REinit=10;
 800285c:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <ESP8266_HW_Init+0x150>)
 800285e:	220a      	movs	r2, #10
 8002860:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 8002862:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <ESP8266_HW_Init+0x128>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	e008      	b.n	800287c <ESP8266_HW_Init+0xfc>
		  }
		  else
		  {
			  ESP_REinit++;
 800286a:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <ESP8266_HW_Init+0x150>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	3301      	adds	r3, #1
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <ESP8266_HW_Init+0x150>)
 8002874:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 8002876:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <ESP8266_HW_Init+0x128>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 800287c:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <ESP8266_HW_Init+0x150>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b05      	cmp	r3, #5
 8002882:	d981      	bls.n	8002788 <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 8002884:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <ESP8266_HW_Init+0x150>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b0a      	cmp	r3, #10
 800288a:	d101      	bne.n	8002890 <ESP8266_HW_Init+0x110>
	  {
		  return(1);
 800288c:	2301      	movs	r3, #1
 800288e:	e000      	b.n	8002892 <ESP8266_HW_Init+0x112>
	  }
	  else
	  {
		  return(0);
 8002890:	2300      	movs	r3, #0
	  }
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	0801074c 	.word	0x0801074c
 80028a0:	20000b78 	.word	0x20000b78
 80028a4:	20003e38 	.word	0x20003e38
 80028a8:	20003e40 	.word	0x20003e40
 80028ac:	20003816 	.word	0x20003816
 80028b0:	2000160c 	.word	0x2000160c
 80028b4:	20003e50 	.word	0x20003e50
 80028b8:	20001858 	.word	0x20001858
 80028bc:	2000140c 	.word	0x2000140c
 80028c0:	20001864 	.word	0x20001864
 80028c4:	0801075c 	.word	0x0801075c
 80028c8:	20001850 	.word	0x20001850
 80028cc:	20003c28 	.word	0x20003c28
 80028d0:	20003815 	.word	0x20003815

080028d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028d8:	b672      	cpsid	i
}
 80028da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028dc:	e7fe      	b.n	80028dc <Error_Handler+0x8>
	...

080028e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	607b      	str	r3, [r7, #4]
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_MspInit+0x4c>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	4a0f      	ldr	r2, [pc, #60]	; (800292c <HAL_MspInit+0x4c>)
 80028f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f4:	6453      	str	r3, [r2, #68]	; 0x44
 80028f6:	4b0d      	ldr	r3, [pc, #52]	; (800292c <HAL_MspInit+0x4c>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	603b      	str	r3, [r7, #0]
 8002906:	4b09      	ldr	r3, [pc, #36]	; (800292c <HAL_MspInit+0x4c>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	4a08      	ldr	r2, [pc, #32]	; (800292c <HAL_MspInit+0x4c>)
 800290c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002910:	6413      	str	r3, [r2, #64]	; 0x40
 8002912:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_MspInit+0x4c>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800

08002930 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08a      	sub	sp, #40	; 0x28
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002938:	f107 0314 	add.w	r3, r7, #20
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	60da      	str	r2, [r3, #12]
 8002946:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a19      	ldr	r2, [pc, #100]	; (80029b4 <HAL_SPI_MspInit+0x84>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d12b      	bne.n	80029aa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <HAL_SPI_MspInit+0x88>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	4a17      	ldr	r2, [pc, #92]	; (80029b8 <HAL_SPI_MspInit+0x88>)
 800295c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002960:	6453      	str	r3, [r2, #68]	; 0x44
 8002962:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <HAL_SPI_MspInit+0x88>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <HAL_SPI_MspInit+0x88>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	4a10      	ldr	r2, [pc, #64]	; (80029b8 <HAL_SPI_MspInit+0x88>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	6313      	str	r3, [r2, #48]	; 0x30
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <HAL_SPI_MspInit+0x88>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800298a:	23e0      	movs	r3, #224	; 0xe0
 800298c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298e:	2302      	movs	r3, #2
 8002990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002996:	2303      	movs	r3, #3
 8002998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800299a:	2305      	movs	r3, #5
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299e:	f107 0314 	add.w	r3, r7, #20
 80029a2:	4619      	mov	r1, r3
 80029a4:	4805      	ldr	r0, [pc, #20]	; (80029bc <HAL_SPI_MspInit+0x8c>)
 80029a6:	f000 fd15 	bl	80033d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80029aa:	bf00      	nop
 80029ac:	3728      	adds	r7, #40	; 0x28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40013000 	.word	0x40013000
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40020000 	.word	0x40020000

080029c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d0:	d116      	bne.n	8002a00 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <HAL_TIM_Base_MspInit+0x80>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	4a19      	ldr	r2, [pc, #100]	; (8002a40 <HAL_TIM_Base_MspInit+0x80>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	6413      	str	r3, [r2, #64]	; 0x40
 80029e2:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <HAL_TIM_Base_MspInit+0x80>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029ee:	2200      	movs	r2, #0
 80029f0:	2100      	movs	r1, #0
 80029f2:	201c      	movs	r0, #28
 80029f4:	f000 fc17 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029f8:	201c      	movs	r0, #28
 80029fa:	f000 fc30 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80029fe:	e01a      	b.n	8002a36 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0f      	ldr	r2, [pc, #60]	; (8002a44 <HAL_TIM_Base_MspInit+0x84>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d115      	bne.n	8002a36 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <HAL_TIM_Base_MspInit+0x80>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	4a0b      	ldr	r2, [pc, #44]	; (8002a40 <HAL_TIM_Base_MspInit+0x80>)
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_TIM_Base_MspInit+0x80>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2100      	movs	r1, #0
 8002a2a:	201d      	movs	r0, #29
 8002a2c:	f000 fbfb 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a30:	201d      	movs	r0, #29
 8002a32:	f000 fc14 	bl	800325e <HAL_NVIC_EnableIRQ>
}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40000400 	.word	0x40000400

08002a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08e      	sub	sp, #56	; 0x38
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a54      	ldr	r2, [pc, #336]	; (8002bb8 <HAL_UART_MspInit+0x170>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d135      	bne.n	8002ad6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	623b      	str	r3, [r7, #32]
 8002a6e:	4b53      	ldr	r3, [pc, #332]	; (8002bbc <HAL_UART_MspInit+0x174>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	4a52      	ldr	r2, [pc, #328]	; (8002bbc <HAL_UART_MspInit+0x174>)
 8002a74:	f043 0310 	orr.w	r3, r3, #16
 8002a78:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7a:	4b50      	ldr	r3, [pc, #320]	; (8002bbc <HAL_UART_MspInit+0x174>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	623b      	str	r3, [r7, #32]
 8002a84:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	4b4c      	ldr	r3, [pc, #304]	; (8002bbc <HAL_UART_MspInit+0x174>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a4b      	ldr	r2, [pc, #300]	; (8002bbc <HAL_UART_MspInit+0x174>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6313      	str	r3, [r2, #48]	; 0x30
 8002a96:	4b49      	ldr	r3, [pc, #292]	; (8002bbc <HAL_UART_MspInit+0x174>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	61fb      	str	r3, [r7, #28]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_WF_Pin|USART1_RX_WF_Pin;
 8002aa2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ab4:	2307      	movs	r3, #7
 8002ab6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002abc:	4619      	mov	r1, r3
 8002abe:	4840      	ldr	r0, [pc, #256]	; (8002bc0 <HAL_UART_MspInit+0x178>)
 8002ac0:	f000 fc88 	bl	80033d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	2025      	movs	r0, #37	; 0x25
 8002aca:	f000 fbac 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ace:	2025      	movs	r0, #37	; 0x25
 8002ad0:	f000 fbc5 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002ad4:	e06b      	b.n	8002bae <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a3a      	ldr	r2, [pc, #232]	; (8002bc4 <HAL_UART_MspInit+0x17c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d134      	bne.n	8002b4a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	4b35      	ldr	r3, [pc, #212]	; (8002bbc <HAL_UART_MspInit+0x174>)
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	4a34      	ldr	r2, [pc, #208]	; (8002bbc <HAL_UART_MspInit+0x174>)
 8002aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aee:	6413      	str	r3, [r2, #64]	; 0x40
 8002af0:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <HAL_UART_MspInit+0x174>)
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	4b2e      	ldr	r3, [pc, #184]	; (8002bbc <HAL_UART_MspInit+0x174>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	4a2d      	ldr	r2, [pc, #180]	; (8002bbc <HAL_UART_MspInit+0x174>)
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0c:	4b2b      	ldr	r3, [pc, #172]	; (8002bbc <HAL_UART_MspInit+0x174>)
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART2_TX_LR_Pin|USART2_RX_LR_Pin;
 8002b18:	230c      	movs	r3, #12
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b24:	2303      	movs	r3, #3
 8002b26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b28:	2307      	movs	r3, #7
 8002b2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b30:	4619      	mov	r1, r3
 8002b32:	4823      	ldr	r0, [pc, #140]	; (8002bc0 <HAL_UART_MspInit+0x178>)
 8002b34:	f000 fc4e 	bl	80033d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	2026      	movs	r0, #38	; 0x26
 8002b3e:	f000 fb72 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b42:	2026      	movs	r0, #38	; 0x26
 8002b44:	f000 fb8b 	bl	800325e <HAL_NVIC_EnableIRQ>
}
 8002b48:	e031      	b.n	8002bae <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1e      	ldr	r2, [pc, #120]	; (8002bc8 <HAL_UART_MspInit+0x180>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d12c      	bne.n	8002bae <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b54:	2300      	movs	r3, #0
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <HAL_UART_MspInit+0x174>)
 8002b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5c:	4a17      	ldr	r2, [pc, #92]	; (8002bbc <HAL_UART_MspInit+0x174>)
 8002b5e:	f043 0320 	orr.w	r3, r3, #32
 8002b62:	6453      	str	r3, [r2, #68]	; 0x44
 8002b64:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <HAL_UART_MspInit+0x174>)
 8002b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b68:	f003 0320 	and.w	r3, r3, #32
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <HAL_UART_MspInit+0x174>)
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	4a10      	ldr	r2, [pc, #64]	; (8002bbc <HAL_UART_MspInit+0x174>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b80:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <HAL_UART_MspInit+0x174>)
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002b8c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b92:	2302      	movs	r3, #2
 8002b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4805      	ldr	r0, [pc, #20]	; (8002bc0 <HAL_UART_MspInit+0x178>)
 8002baa:	f000 fc13 	bl	80033d4 <HAL_GPIO_Init>
}
 8002bae:	bf00      	nop
 8002bb0:	3738      	adds	r7, #56	; 0x38
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40011000 	.word	0x40011000
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40020000 	.word	0x40020000
 8002bc4:	40004400 	.word	0x40004400
 8002bc8:	40011400 	.word	0x40011400

08002bcc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a1c      	ldr	r2, [pc, #112]	; (8002c4c <HAL_UART_MspDeInit+0x80>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d10e      	bne.n	8002bfc <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002bde:	4b1c      	ldr	r3, [pc, #112]	; (8002c50 <HAL_UART_MspDeInit+0x84>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	4a1b      	ldr	r2, [pc, #108]	; (8002c50 <HAL_UART_MspDeInit+0x84>)
 8002be4:	f023 0310 	bic.w	r3, r3, #16
 8002be8:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART1_TX_WF_Pin|USART1_RX_WF_Pin);
 8002bea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002bee:	4819      	ldr	r0, [pc, #100]	; (8002c54 <HAL_UART_MspDeInit+0x88>)
 8002bf0:	f000 fd74 	bl	80036dc <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002bf4:	2025      	movs	r0, #37	; 0x25
 8002bf6:	f000 fb40 	bl	800327a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8002bfa:	e022      	b.n	8002c42 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART2)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a15      	ldr	r2, [pc, #84]	; (8002c58 <HAL_UART_MspDeInit+0x8c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d10d      	bne.n	8002c22 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002c06:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <HAL_UART_MspDeInit+0x84>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	4a11      	ldr	r2, [pc, #68]	; (8002c50 <HAL_UART_MspDeInit+0x84>)
 8002c0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002c10:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART2_TX_LR_Pin|USART2_RX_LR_Pin);
 8002c12:	210c      	movs	r1, #12
 8002c14:	480f      	ldr	r0, [pc, #60]	; (8002c54 <HAL_UART_MspDeInit+0x88>)
 8002c16:	f000 fd61 	bl	80036dc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002c1a:	2026      	movs	r0, #38	; 0x26
 8002c1c:	f000 fb2d 	bl	800327a <HAL_NVIC_DisableIRQ>
}
 8002c20:	e00f      	b.n	8002c42 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART6)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a0d      	ldr	r2, [pc, #52]	; (8002c5c <HAL_UART_MspDeInit+0x90>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d10a      	bne.n	8002c42 <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART6_CLK_DISABLE();
 8002c2c:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <HAL_UART_MspDeInit+0x84>)
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c30:	4a07      	ldr	r2, [pc, #28]	; (8002c50 <HAL_UART_MspDeInit+0x84>)
 8002c32:	f023 0320 	bic.w	r3, r3, #32
 8002c36:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8002c38:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002c3c:	4805      	ldr	r0, [pc, #20]	; (8002c54 <HAL_UART_MspDeInit+0x88>)
 8002c3e:	f000 fd4d 	bl	80036dc <HAL_GPIO_DeInit>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40011000 	.word	0x40011000
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40020000 	.word	0x40020000
 8002c58:	40004400 	.word	0x40004400
 8002c5c:	40011400 	.word	0x40011400

08002c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c64:	e7fe      	b.n	8002c64 <NMI_Handler+0x4>

08002c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c6a:	e7fe      	b.n	8002c6a <HardFault_Handler+0x4>

08002c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c70:	e7fe      	b.n	8002c70 <MemManage_Handler+0x4>

08002c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c76:	e7fe      	b.n	8002c76 <BusFault_Handler+0x4>

08002c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c7c:	e7fe      	b.n	8002c7c <UsageFault_Handler+0x4>

08002c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002cac:	4802      	ldr	r0, [pc, #8]	; (8002cb8 <TIM2_IRQHandler+0x10>)
 8002cae:	f002 f82d 	bl	8004d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	2000020c 	.word	0x2000020c

08002cbc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002cc0:	4802      	ldr	r0, [pc, #8]	; (8002ccc <TIM3_IRQHandler+0x10>)
 8002cc2:	f002 f823 	bl	8004d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000254 	.word	0x20000254

08002cd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002cd4:	4802      	ldr	r0, [pc, #8]	; (8002ce0 <USART1_IRQHandler+0x10>)
 8002cd6:	f002 ff3f 	bl	8005b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	2000029c 	.word	0x2000029c

08002ce4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ce8:	4802      	ldr	r0, [pc, #8]	; (8002cf4 <USART2_IRQHandler+0x10>)
 8002cea:	f002 ff35 	bl	8005b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	200002e0 	.word	0x200002e0

08002cf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
	return 1;
 8002cfc:	2301      	movs	r3, #1
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <_kill>:

int _kill(int pid, int sig)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d12:	f00c fbb5 	bl	800f480 <__errno>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2216      	movs	r2, #22
 8002d1a:	601a      	str	r2, [r3, #0]
	return -1;
 8002d1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <_exit>:

void _exit (int status)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d30:	f04f 31ff 	mov.w	r1, #4294967295
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff ffe7 	bl	8002d08 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d3a:	e7fe      	b.n	8002d3a <_exit+0x12>

08002d3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	e00a      	b.n	8002d64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d4e:	f3af 8000 	nop.w
 8002d52:	4601      	mov	r1, r0
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	60ba      	str	r2, [r7, #8]
 8002d5a:	b2ca      	uxtb	r2, r1
 8002d5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	3301      	adds	r3, #1
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	dbf0      	blt.n	8002d4e <_read+0x12>
	}

return len;
 8002d6c:	687b      	ldr	r3, [r7, #4]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b086      	sub	sp, #24
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	e009      	b.n	8002d9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	60ba      	str	r2, [r7, #8]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	dbf1      	blt.n	8002d88 <_write+0x12>
	}
	return len;
 8002da4:	687b      	ldr	r3, [r7, #4]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <_close>:

int _close(int file)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
	return -1;
 8002db6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dd6:	605a      	str	r2, [r3, #4]
	return 0;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <_isatty>:

int _isatty(int file)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
	return 1;
 8002dee:	2301      	movs	r3, #1
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
	return 0;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e20:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <_sbrk+0x5c>)
 8002e22:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <_sbrk+0x60>)
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <_sbrk+0x64>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d102      	bne.n	8002e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e34:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <_sbrk+0x64>)
 8002e36:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <_sbrk+0x68>)
 8002e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <_sbrk+0x64>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d207      	bcs.n	8002e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e48:	f00c fb1a 	bl	800f480 <__errno>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	220c      	movs	r2, #12
 8002e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e52:	f04f 33ff 	mov.w	r3, #4294967295
 8002e56:	e009      	b.n	8002e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e58:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <_sbrk+0x64>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <_sbrk+0x64>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	4a05      	ldr	r2, [pc, #20]	; (8002e7c <_sbrk+0x64>)
 8002e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20020000 	.word	0x20020000
 8002e78:	00000400 	.word	0x00000400
 8002e7c:	20003e70 	.word	0x20003e70
 8002e80:	20003fc8 	.word	0x20003fc8

08002e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <SystemInit+0x20>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8e:	4a05      	ldr	r2, [pc, #20]	; (8002ea4 <SystemInit+0x20>)
 8002e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ee0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002eac:	480d      	ldr	r0, [pc, #52]	; (8002ee4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002eae:	490e      	ldr	r1, [pc, #56]	; (8002ee8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002eb0:	4a0e      	ldr	r2, [pc, #56]	; (8002eec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eb4:	e002      	b.n	8002ebc <LoopCopyDataInit>

08002eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eba:	3304      	adds	r3, #4

08002ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec0:	d3f9      	bcc.n	8002eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ec2:	4a0b      	ldr	r2, [pc, #44]	; (8002ef0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ec4:	4c0b      	ldr	r4, [pc, #44]	; (8002ef4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ec8:	e001      	b.n	8002ece <LoopFillZerobss>

08002eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ecc:	3204      	adds	r2, #4

08002ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed0:	d3fb      	bcc.n	8002eca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ed2:	f7ff ffd7 	bl	8002e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ed6:	f00c fad9 	bl	800f48c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eda:	f7fd fbdb 	bl	8000694 <main>
  bx  lr    
 8002ede:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ee0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ee8:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8002eec:	08010fd8 	.word	0x08010fd8
  ldr r2, =_sbss
 8002ef0:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8002ef4:	20003fc4 	.word	0x20003fc4

08002ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ef8:	e7fe      	b.n	8002ef8 <ADC_IRQHandler>
	...

08002efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f00:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <HAL_Init+0x40>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a0d      	ldr	r2, [pc, #52]	; (8002f3c <HAL_Init+0x40>)
 8002f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_Init+0x40>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <HAL_Init+0x40>)
 8002f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f18:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <HAL_Init+0x40>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a07      	ldr	r2, [pc, #28]	; (8002f3c <HAL_Init+0x40>)
 8002f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f24:	2003      	movs	r0, #3
 8002f26:	f000 f973 	bl	8003210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f2a:	200f      	movs	r0, #15
 8002f2c:	f000 f808 	bl	8002f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f30:	f7ff fcd6 	bl	80028e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023c00 	.word	0x40023c00

08002f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f48:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <HAL_InitTick+0x54>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <HAL_InitTick+0x58>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	4619      	mov	r1, r3
 8002f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f999 	bl	8003296 <HAL_SYSTICK_Config>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e00e      	b.n	8002f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b0f      	cmp	r3, #15
 8002f72:	d80a      	bhi.n	8002f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f74:	2200      	movs	r2, #0
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	f04f 30ff 	mov.w	r0, #4294967295
 8002f7c:	f000 f953 	bl	8003226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f80:	4a06      	ldr	r2, [pc, #24]	; (8002f9c <HAL_InitTick+0x5c>)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	e000      	b.n	8002f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20000084 	.word	0x20000084
 8002f98:	2000008c 	.word	0x2000008c
 8002f9c:	20000088 	.word	0x20000088

08002fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_IncTick+0x20>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_IncTick+0x24>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4413      	add	r3, r2
 8002fb0:	4a04      	ldr	r2, [pc, #16]	; (8002fc4 <HAL_IncTick+0x24>)
 8002fb2:	6013      	str	r3, [r2, #0]
}
 8002fb4:	bf00      	nop
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	2000008c 	.word	0x2000008c
 8002fc4:	20003e74 	.word	0x20003e74

08002fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return uwTick;
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <HAL_GetTick+0x14>)
 8002fce:	681b      	ldr	r3, [r3, #0]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	20003e74 	.word	0x20003e74

08002fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe8:	f7ff ffee 	bl	8002fc8 <HAL_GetTick>
 8002fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff8:	d005      	beq.n	8003006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <HAL_Delay+0x44>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4413      	add	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003006:	bf00      	nop
 8003008:	f7ff ffde 	bl	8002fc8 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	429a      	cmp	r2, r3
 8003016:	d8f7      	bhi.n	8003008 <HAL_Delay+0x28>
  {
  }
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	2000008c 	.word	0x2000008c

08003028 <__NVIC_SetPriorityGrouping>:
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <__NVIC_SetPriorityGrouping+0x44>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003044:	4013      	ands	r3, r2
 8003046:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305a:	4a04      	ldr	r2, [pc, #16]	; (800306c <__NVIC_SetPriorityGrouping+0x44>)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	60d3      	str	r3, [r2, #12]
}
 8003060:	bf00      	nop
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <__NVIC_GetPriorityGrouping>:
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003074:	4b04      	ldr	r3, [pc, #16]	; (8003088 <__NVIC_GetPriorityGrouping+0x18>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	0a1b      	lsrs	r3, r3, #8
 800307a:	f003 0307 	and.w	r3, r3, #7
}
 800307e:	4618      	mov	r0, r3
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	e000ed00 	.word	0xe000ed00

0800308c <__NVIC_EnableIRQ>:
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309a:	2b00      	cmp	r3, #0
 800309c:	db0b      	blt.n	80030b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	f003 021f 	and.w	r2, r3, #31
 80030a4:	4907      	ldr	r1, [pc, #28]	; (80030c4 <__NVIC_EnableIRQ+0x38>)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	2001      	movs	r0, #1
 80030ae:	fa00 f202 	lsl.w	r2, r0, r2
 80030b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	e000e100 	.word	0xe000e100

080030c8 <__NVIC_DisableIRQ>:
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	db12      	blt.n	8003100 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	f003 021f 	and.w	r2, r3, #31
 80030e0:	490a      	ldr	r1, [pc, #40]	; (800310c <__NVIC_DisableIRQ+0x44>)
 80030e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	2001      	movs	r0, #1
 80030ea:	fa00 f202 	lsl.w	r2, r0, r2
 80030ee:	3320      	adds	r3, #32
 80030f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80030f4:	f3bf 8f4f 	dsb	sy
}
 80030f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80030fa:	f3bf 8f6f 	isb	sy
}
 80030fe:	bf00      	nop
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000e100 	.word	0xe000e100

08003110 <__NVIC_SetPriority>:
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	6039      	str	r1, [r7, #0]
 800311a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003120:	2b00      	cmp	r3, #0
 8003122:	db0a      	blt.n	800313a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	b2da      	uxtb	r2, r3
 8003128:	490c      	ldr	r1, [pc, #48]	; (800315c <__NVIC_SetPriority+0x4c>)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	0112      	lsls	r2, r2, #4
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	440b      	add	r3, r1
 8003134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003138:	e00a      	b.n	8003150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4908      	ldr	r1, [pc, #32]	; (8003160 <__NVIC_SetPriority+0x50>)
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	3b04      	subs	r3, #4
 8003148:	0112      	lsls	r2, r2, #4
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	440b      	add	r3, r1
 800314e:	761a      	strb	r2, [r3, #24]
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000e100 	.word	0xe000e100
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <NVIC_EncodePriority>:
{
 8003164:	b480      	push	{r7}
 8003166:	b089      	sub	sp, #36	; 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f1c3 0307 	rsb	r3, r3, #7
 800317e:	2b04      	cmp	r3, #4
 8003180:	bf28      	it	cs
 8003182:	2304      	movcs	r3, #4
 8003184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3304      	adds	r3, #4
 800318a:	2b06      	cmp	r3, #6
 800318c:	d902      	bls.n	8003194 <NVIC_EncodePriority+0x30>
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3b03      	subs	r3, #3
 8003192:	e000      	b.n	8003196 <NVIC_EncodePriority+0x32>
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003198:	f04f 32ff 	mov.w	r2, #4294967295
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43da      	mvns	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	401a      	ands	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031ac:	f04f 31ff 	mov.w	r1, #4294967295
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fa01 f303 	lsl.w	r3, r1, r3
 80031b6:	43d9      	mvns	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	4313      	orrs	r3, r2
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3724      	adds	r7, #36	; 0x24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <SysTick_Config>:
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031dc:	d301      	bcc.n	80031e2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80031de:	2301      	movs	r3, #1
 80031e0:	e00f      	b.n	8003202 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031e2:	4a0a      	ldr	r2, [pc, #40]	; (800320c <SysTick_Config+0x40>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ea:	210f      	movs	r1, #15
 80031ec:	f04f 30ff 	mov.w	r0, #4294967295
 80031f0:	f7ff ff8e 	bl	8003110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <SysTick_Config+0x40>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031fa:	4b04      	ldr	r3, [pc, #16]	; (800320c <SysTick_Config+0x40>)
 80031fc:	2207      	movs	r2, #7
 80031fe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	e000e010 	.word	0xe000e010

08003210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff ff05 	bl	8003028 <__NVIC_SetPriorityGrouping>
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003226:	b580      	push	{r7, lr}
 8003228:	b086      	sub	sp, #24
 800322a:	af00      	add	r7, sp, #0
 800322c:	4603      	mov	r3, r0
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003238:	f7ff ff1a 	bl	8003070 <__NVIC_GetPriorityGrouping>
 800323c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	6978      	ldr	r0, [r7, #20]
 8003244:	f7ff ff8e 	bl	8003164 <NVIC_EncodePriority>
 8003248:	4602      	mov	r2, r0
 800324a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff5d 	bl	8003110 <__NVIC_SetPriority>
}
 8003256:	bf00      	nop
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	4603      	mov	r3, r0
 8003266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ff0d 	bl	800308c <__NVIC_EnableIRQ>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	4603      	mov	r3, r0
 8003282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ff1d 	bl	80030c8 <__NVIC_DisableIRQ>
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff ff94 	bl	80031cc <SysTick_Config>
 80032a4:	4603      	mov	r3, r0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b084      	sub	sp, #16
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032bc:	f7ff fe84 	bl	8002fc8 <HAL_GetTick>
 80032c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d008      	beq.n	80032e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2280      	movs	r2, #128	; 0x80
 80032d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e052      	b.n	8003386 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0216 	bic.w	r2, r2, #22
 80032ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	2b00      	cmp	r3, #0
 8003306:	d103      	bne.n	8003310 <HAL_DMA_Abort+0x62>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800330c:	2b00      	cmp	r3, #0
 800330e:	d007      	beq.n	8003320 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0208 	bic.w	r2, r2, #8
 800331e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0201 	bic.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003330:	e013      	b.n	800335a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003332:	f7ff fe49 	bl	8002fc8 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b05      	cmp	r3, #5
 800333e:	d90c      	bls.n	800335a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2203      	movs	r2, #3
 800334a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e015      	b.n	8003386 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1e4      	bne.n	8003332 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336c:	223f      	movs	r2, #63	; 0x3f
 800336e:	409a      	lsls	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d004      	beq.n	80033ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2280      	movs	r2, #128	; 0x80
 80033a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e00c      	b.n	80033c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2205      	movs	r2, #5
 80033b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0201 	bic.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
	...

080033d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b089      	sub	sp, #36	; 0x24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
 80033ee:	e159      	b.n	80036a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033f0:	2201      	movs	r2, #1
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4013      	ands	r3, r2
 8003402:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	429a      	cmp	r2, r3
 800340a:	f040 8148 	bne.w	800369e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b01      	cmp	r3, #1
 8003418:	d005      	beq.n	8003426 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003422:	2b02      	cmp	r3, #2
 8003424:	d130      	bne.n	8003488 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	2203      	movs	r2, #3
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43db      	mvns	r3, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4013      	ands	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800345c:	2201      	movs	r2, #1
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f003 0201 	and.w	r2, r3, #1
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 0303 	and.w	r3, r3, #3
 8003490:	2b03      	cmp	r3, #3
 8003492:	d017      	beq.n	80034c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	2203      	movs	r2, #3
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d123      	bne.n	8003518 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	08da      	lsrs	r2, r3, #3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3208      	adds	r2, #8
 80034d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	220f      	movs	r2, #15
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	08da      	lsrs	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3208      	adds	r2, #8
 8003512:	69b9      	ldr	r1, [r7, #24]
 8003514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	2203      	movs	r2, #3
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4013      	ands	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 0203 	and.w	r2, r3, #3
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4313      	orrs	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80a2 	beq.w	800369e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	4b57      	ldr	r3, [pc, #348]	; (80036bc <HAL_GPIO_Init+0x2e8>)
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	4a56      	ldr	r2, [pc, #344]	; (80036bc <HAL_GPIO_Init+0x2e8>)
 8003564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003568:	6453      	str	r3, [r2, #68]	; 0x44
 800356a:	4b54      	ldr	r3, [pc, #336]	; (80036bc <HAL_GPIO_Init+0x2e8>)
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003576:	4a52      	ldr	r2, [pc, #328]	; (80036c0 <HAL_GPIO_Init+0x2ec>)
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	089b      	lsrs	r3, r3, #2
 800357c:	3302      	adds	r3, #2
 800357e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	220f      	movs	r2, #15
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43db      	mvns	r3, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4013      	ands	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a49      	ldr	r2, [pc, #292]	; (80036c4 <HAL_GPIO_Init+0x2f0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d019      	beq.n	80035d6 <HAL_GPIO_Init+0x202>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a48      	ldr	r2, [pc, #288]	; (80036c8 <HAL_GPIO_Init+0x2f4>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d013      	beq.n	80035d2 <HAL_GPIO_Init+0x1fe>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a47      	ldr	r2, [pc, #284]	; (80036cc <HAL_GPIO_Init+0x2f8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d00d      	beq.n	80035ce <HAL_GPIO_Init+0x1fa>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a46      	ldr	r2, [pc, #280]	; (80036d0 <HAL_GPIO_Init+0x2fc>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d007      	beq.n	80035ca <HAL_GPIO_Init+0x1f6>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a45      	ldr	r2, [pc, #276]	; (80036d4 <HAL_GPIO_Init+0x300>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d101      	bne.n	80035c6 <HAL_GPIO_Init+0x1f2>
 80035c2:	2304      	movs	r3, #4
 80035c4:	e008      	b.n	80035d8 <HAL_GPIO_Init+0x204>
 80035c6:	2307      	movs	r3, #7
 80035c8:	e006      	b.n	80035d8 <HAL_GPIO_Init+0x204>
 80035ca:	2303      	movs	r3, #3
 80035cc:	e004      	b.n	80035d8 <HAL_GPIO_Init+0x204>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e002      	b.n	80035d8 <HAL_GPIO_Init+0x204>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <HAL_GPIO_Init+0x204>
 80035d6:	2300      	movs	r3, #0
 80035d8:	69fa      	ldr	r2, [r7, #28]
 80035da:	f002 0203 	and.w	r2, r2, #3
 80035de:	0092      	lsls	r2, r2, #2
 80035e0:	4093      	lsls	r3, r2
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035e8:	4935      	ldr	r1, [pc, #212]	; (80036c0 <HAL_GPIO_Init+0x2ec>)
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	089b      	lsrs	r3, r3, #2
 80035ee:	3302      	adds	r3, #2
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035f6:	4b38      	ldr	r3, [pc, #224]	; (80036d8 <HAL_GPIO_Init+0x304>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	43db      	mvns	r3, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800361a:	4a2f      	ldr	r2, [pc, #188]	; (80036d8 <HAL_GPIO_Init+0x304>)
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003620:	4b2d      	ldr	r3, [pc, #180]	; (80036d8 <HAL_GPIO_Init+0x304>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003644:	4a24      	ldr	r2, [pc, #144]	; (80036d8 <HAL_GPIO_Init+0x304>)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800364a:	4b23      	ldr	r3, [pc, #140]	; (80036d8 <HAL_GPIO_Init+0x304>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	43db      	mvns	r3, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4013      	ands	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800366e:	4a1a      	ldr	r2, [pc, #104]	; (80036d8 <HAL_GPIO_Init+0x304>)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003674:	4b18      	ldr	r3, [pc, #96]	; (80036d8 <HAL_GPIO_Init+0x304>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003698:	4a0f      	ldr	r2, [pc, #60]	; (80036d8 <HAL_GPIO_Init+0x304>)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	3301      	adds	r3, #1
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	2b0f      	cmp	r3, #15
 80036a8:	f67f aea2 	bls.w	80033f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	3724      	adds	r7, #36	; 0x24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40013800 	.word	0x40013800
 80036c4:	40020000 	.word	0x40020000
 80036c8:	40020400 	.word	0x40020400
 80036cc:	40020800 	.word	0x40020800
 80036d0:	40020c00 	.word	0x40020c00
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40013c00 	.word	0x40013c00

080036dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	e0bb      	b.n	8003870 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036f8:	2201      	movs	r2, #1
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4013      	ands	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	429a      	cmp	r2, r3
 8003710:	f040 80ab 	bne.w	800386a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003714:	4a5c      	ldr	r2, [pc, #368]	; (8003888 <HAL_GPIO_DeInit+0x1ac>)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	089b      	lsrs	r3, r3, #2
 800371a:	3302      	adds	r3, #2
 800371c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003720:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	220f      	movs	r2, #15
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	4013      	ands	r3, r2
 8003734:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a54      	ldr	r2, [pc, #336]	; (800388c <HAL_GPIO_DeInit+0x1b0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d019      	beq.n	8003772 <HAL_GPIO_DeInit+0x96>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a53      	ldr	r2, [pc, #332]	; (8003890 <HAL_GPIO_DeInit+0x1b4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d013      	beq.n	800376e <HAL_GPIO_DeInit+0x92>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a52      	ldr	r2, [pc, #328]	; (8003894 <HAL_GPIO_DeInit+0x1b8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00d      	beq.n	800376a <HAL_GPIO_DeInit+0x8e>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a51      	ldr	r2, [pc, #324]	; (8003898 <HAL_GPIO_DeInit+0x1bc>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d007      	beq.n	8003766 <HAL_GPIO_DeInit+0x8a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a50      	ldr	r2, [pc, #320]	; (800389c <HAL_GPIO_DeInit+0x1c0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <HAL_GPIO_DeInit+0x86>
 800375e:	2304      	movs	r3, #4
 8003760:	e008      	b.n	8003774 <HAL_GPIO_DeInit+0x98>
 8003762:	2307      	movs	r3, #7
 8003764:	e006      	b.n	8003774 <HAL_GPIO_DeInit+0x98>
 8003766:	2303      	movs	r3, #3
 8003768:	e004      	b.n	8003774 <HAL_GPIO_DeInit+0x98>
 800376a:	2302      	movs	r3, #2
 800376c:	e002      	b.n	8003774 <HAL_GPIO_DeInit+0x98>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <HAL_GPIO_DeInit+0x98>
 8003772:	2300      	movs	r3, #0
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	f002 0203 	and.w	r2, r2, #3
 800377a:	0092      	lsls	r2, r2, #2
 800377c:	4093      	lsls	r3, r2
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	429a      	cmp	r2, r3
 8003782:	d132      	bne.n	80037ea <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003784:	4b46      	ldr	r3, [pc, #280]	; (80038a0 <HAL_GPIO_DeInit+0x1c4>)
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	43db      	mvns	r3, r3
 800378c:	4944      	ldr	r1, [pc, #272]	; (80038a0 <HAL_GPIO_DeInit+0x1c4>)
 800378e:	4013      	ands	r3, r2
 8003790:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003792:	4b43      	ldr	r3, [pc, #268]	; (80038a0 <HAL_GPIO_DeInit+0x1c4>)
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	43db      	mvns	r3, r3
 800379a:	4941      	ldr	r1, [pc, #260]	; (80038a0 <HAL_GPIO_DeInit+0x1c4>)
 800379c:	4013      	ands	r3, r2
 800379e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80037a0:	4b3f      	ldr	r3, [pc, #252]	; (80038a0 <HAL_GPIO_DeInit+0x1c4>)
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	43db      	mvns	r3, r3
 80037a8:	493d      	ldr	r1, [pc, #244]	; (80038a0 <HAL_GPIO_DeInit+0x1c4>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80037ae:	4b3c      	ldr	r3, [pc, #240]	; (80038a0 <HAL_GPIO_DeInit+0x1c4>)
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	43db      	mvns	r3, r3
 80037b6:	493a      	ldr	r1, [pc, #232]	; (80038a0 <HAL_GPIO_DeInit+0x1c4>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	220f      	movs	r2, #15
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80037cc:	4a2e      	ldr	r2, [pc, #184]	; (8003888 <HAL_GPIO_DeInit+0x1ac>)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	089b      	lsrs	r3, r3, #2
 80037d2:	3302      	adds	r3, #2
 80037d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	43da      	mvns	r2, r3
 80037dc:	482a      	ldr	r0, [pc, #168]	; (8003888 <HAL_GPIO_DeInit+0x1ac>)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	089b      	lsrs	r3, r3, #2
 80037e2:	400a      	ands	r2, r1
 80037e4:	3302      	adds	r3, #2
 80037e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	2103      	movs	r1, #3
 80037f4:	fa01 f303 	lsl.w	r3, r1, r3
 80037f8:	43db      	mvns	r3, r3
 80037fa:	401a      	ands	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	08da      	lsrs	r2, r3, #3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3208      	adds	r2, #8
 8003808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	220f      	movs	r2, #15
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	08d2      	lsrs	r2, r2, #3
 8003820:	4019      	ands	r1, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3208      	adds	r2, #8
 8003826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	2103      	movs	r1, #3
 8003834:	fa01 f303 	lsl.w	r3, r1, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	401a      	ands	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	2101      	movs	r1, #1
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	fa01 f303 	lsl.w	r3, r1, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	401a      	ands	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	2103      	movs	r1, #3
 800385e:	fa01 f303 	lsl.w	r3, r1, r3
 8003862:	43db      	mvns	r3, r3
 8003864:	401a      	ands	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	3301      	adds	r3, #1
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b0f      	cmp	r3, #15
 8003874:	f67f af40 	bls.w	80036f8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	40013800 	.word	0x40013800
 800388c:	40020000 	.word	0x40020000
 8003890:	40020400 	.word	0x40020400
 8003894:	40020800 	.word	0x40020800
 8003898:	40020c00 	.word	0x40020c00
 800389c:	40021000 	.word	0x40021000
 80038a0:	40013c00 	.word	0x40013c00

080038a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	807b      	strh	r3, [r7, #2]
 80038b0:	4613      	mov	r3, r2
 80038b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038b4:	787b      	ldrb	r3, [r7, #1]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ba:	887a      	ldrh	r2, [r7, #2]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038c0:	e003      	b.n	80038ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038c2:	887b      	ldrh	r3, [r7, #2]
 80038c4:	041a      	lsls	r2, r3, #16
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	619a      	str	r2, [r3, #24]
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b085      	sub	sp, #20
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	460b      	mov	r3, r1
 80038e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038e8:	887a      	ldrh	r2, [r7, #2]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4013      	ands	r3, r2
 80038ee:	041a      	lsls	r2, r3, #16
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	43d9      	mvns	r1, r3
 80038f4:	887b      	ldrh	r3, [r7, #2]
 80038f6:	400b      	ands	r3, r1
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	619a      	str	r2, [r3, #24]
}
 80038fe:	bf00      	nop
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
	...

0800390c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e267      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d075      	beq.n	8003a16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800392a:	4b88      	ldr	r3, [pc, #544]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b04      	cmp	r3, #4
 8003934:	d00c      	beq.n	8003950 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003936:	4b85      	ldr	r3, [pc, #532]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800393e:	2b08      	cmp	r3, #8
 8003940:	d112      	bne.n	8003968 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003942:	4b82      	ldr	r3, [pc, #520]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800394e:	d10b      	bne.n	8003968 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003950:	4b7e      	ldr	r3, [pc, #504]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d05b      	beq.n	8003a14 <HAL_RCC_OscConfig+0x108>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d157      	bne.n	8003a14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e242      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003970:	d106      	bne.n	8003980 <HAL_RCC_OscConfig+0x74>
 8003972:	4b76      	ldr	r3, [pc, #472]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a75      	ldr	r2, [pc, #468]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	e01d      	b.n	80039bc <HAL_RCC_OscConfig+0xb0>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003988:	d10c      	bne.n	80039a4 <HAL_RCC_OscConfig+0x98>
 800398a:	4b70      	ldr	r3, [pc, #448]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a6f      	ldr	r2, [pc, #444]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	4b6d      	ldr	r3, [pc, #436]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a6c      	ldr	r2, [pc, #432]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 800399c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e00b      	b.n	80039bc <HAL_RCC_OscConfig+0xb0>
 80039a4:	4b69      	ldr	r3, [pc, #420]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a68      	ldr	r2, [pc, #416]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 80039aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	4b66      	ldr	r3, [pc, #408]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a65      	ldr	r2, [pc, #404]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 80039b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d013      	beq.n	80039ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c4:	f7ff fb00 	bl	8002fc8 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039cc:	f7ff fafc 	bl	8002fc8 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b64      	cmp	r3, #100	; 0x64
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e207      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039de:	4b5b      	ldr	r3, [pc, #364]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0xc0>
 80039ea:	e014      	b.n	8003a16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ec:	f7ff faec 	bl	8002fc8 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039f4:	f7ff fae8 	bl	8002fc8 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	; 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e1f3      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a06:	4b51      	ldr	r3, [pc, #324]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0xe8>
 8003a12:	e000      	b.n	8003a16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d063      	beq.n	8003aea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a22:	4b4a      	ldr	r3, [pc, #296]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00b      	beq.n	8003a46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2e:	4b47      	ldr	r3, [pc, #284]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d11c      	bne.n	8003a74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a3a:	4b44      	ldr	r3, [pc, #272]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d116      	bne.n	8003a74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a46:	4b41      	ldr	r3, [pc, #260]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <HAL_RCC_OscConfig+0x152>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d001      	beq.n	8003a5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e1c7      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5e:	4b3b      	ldr	r3, [pc, #236]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4937      	ldr	r1, [pc, #220]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a72:	e03a      	b.n	8003aea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d020      	beq.n	8003abe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a7c:	4b34      	ldr	r3, [pc, #208]	; (8003b50 <HAL_RCC_OscConfig+0x244>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a82:	f7ff faa1 	bl	8002fc8 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a8a:	f7ff fa9d 	bl	8002fc8 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e1a8      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9c:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa8:	4b28      	ldr	r3, [pc, #160]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4925      	ldr	r1, [pc, #148]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	600b      	str	r3, [r1, #0]
 8003abc:	e015      	b.n	8003aea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003abe:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <HAL_RCC_OscConfig+0x244>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7ff fa80 	bl	8002fc8 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003acc:	f7ff fa7c 	bl	8002fc8 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e187      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ade:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d036      	beq.n	8003b64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d016      	beq.n	8003b2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003afe:	4b15      	ldr	r3, [pc, #84]	; (8003b54 <HAL_RCC_OscConfig+0x248>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b04:	f7ff fa60 	bl	8002fc8 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b0c:	f7ff fa5c 	bl	8002fc8 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e167      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0x200>
 8003b2a:	e01b      	b.n	8003b64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b2c:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <HAL_RCC_OscConfig+0x248>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b32:	f7ff fa49 	bl	8002fc8 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b38:	e00e      	b.n	8003b58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b3a:	f7ff fa45 	bl	8002fc8 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d907      	bls.n	8003b58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e150      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	42470000 	.word	0x42470000
 8003b54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b58:	4b88      	ldr	r3, [pc, #544]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1ea      	bne.n	8003b3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8097 	beq.w	8003ca0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b72:	2300      	movs	r3, #0
 8003b74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b76:	4b81      	ldr	r3, [pc, #516]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10f      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	4b7d      	ldr	r3, [pc, #500]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	4a7c      	ldr	r2, [pc, #496]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b90:	6413      	str	r3, [r2, #64]	; 0x40
 8003b92:	4b7a      	ldr	r3, [pc, #488]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	60bb      	str	r3, [r7, #8]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba2:	4b77      	ldr	r3, [pc, #476]	; (8003d80 <HAL_RCC_OscConfig+0x474>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d118      	bne.n	8003be0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bae:	4b74      	ldr	r3, [pc, #464]	; (8003d80 <HAL_RCC_OscConfig+0x474>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a73      	ldr	r2, [pc, #460]	; (8003d80 <HAL_RCC_OscConfig+0x474>)
 8003bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bba:	f7ff fa05 	bl	8002fc8 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc2:	f7ff fa01 	bl	8002fc8 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e10c      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd4:	4b6a      	ldr	r3, [pc, #424]	; (8003d80 <HAL_RCC_OscConfig+0x474>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0f0      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d106      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x2ea>
 8003be8:	4b64      	ldr	r3, [pc, #400]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bec:	4a63      	ldr	r2, [pc, #396]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf4:	e01c      	b.n	8003c30 <HAL_RCC_OscConfig+0x324>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b05      	cmp	r3, #5
 8003bfc:	d10c      	bne.n	8003c18 <HAL_RCC_OscConfig+0x30c>
 8003bfe:	4b5f      	ldr	r3, [pc, #380]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c02:	4a5e      	ldr	r2, [pc, #376]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c04:	f043 0304 	orr.w	r3, r3, #4
 8003c08:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0a:	4b5c      	ldr	r3, [pc, #368]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	4a5b      	ldr	r2, [pc, #364]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	6713      	str	r3, [r2, #112]	; 0x70
 8003c16:	e00b      	b.n	8003c30 <HAL_RCC_OscConfig+0x324>
 8003c18:	4b58      	ldr	r3, [pc, #352]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	4a57      	ldr	r2, [pc, #348]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	6713      	str	r3, [r2, #112]	; 0x70
 8003c24:	4b55      	ldr	r3, [pc, #340]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c28:	4a54      	ldr	r2, [pc, #336]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c2a:	f023 0304 	bic.w	r3, r3, #4
 8003c2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d015      	beq.n	8003c64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c38:	f7ff f9c6 	bl	8002fc8 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3e:	e00a      	b.n	8003c56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c40:	f7ff f9c2 	bl	8002fc8 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e0cb      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c56:	4b49      	ldr	r3, [pc, #292]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0ee      	beq.n	8003c40 <HAL_RCC_OscConfig+0x334>
 8003c62:	e014      	b.n	8003c8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c64:	f7ff f9b0 	bl	8002fc8 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c6c:	f7ff f9ac 	bl	8002fc8 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e0b5      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c82:	4b3e      	ldr	r3, [pc, #248]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1ee      	bne.n	8003c6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c8e:	7dfb      	ldrb	r3, [r7, #23]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d105      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c94:	4b39      	ldr	r3, [pc, #228]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	4a38      	ldr	r2, [pc, #224]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80a1 	beq.w	8003dec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003caa:	4b34      	ldr	r3, [pc, #208]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 030c 	and.w	r3, r3, #12
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d05c      	beq.n	8003d70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d141      	bne.n	8003d42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cbe:	4b31      	ldr	r3, [pc, #196]	; (8003d84 <HAL_RCC_OscConfig+0x478>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc4:	f7ff f980 	bl	8002fc8 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7ff f97c 	bl	8002fc8 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e087      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cde:	4b27      	ldr	r3, [pc, #156]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69da      	ldr	r2, [r3, #28]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	019b      	lsls	r3, r3, #6
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	085b      	lsrs	r3, r3, #1
 8003d02:	3b01      	subs	r3, #1
 8003d04:	041b      	lsls	r3, r3, #16
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	061b      	lsls	r3, r3, #24
 8003d0e:	491b      	ldr	r1, [pc, #108]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d14:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <HAL_RCC_OscConfig+0x478>)
 8003d16:	2201      	movs	r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1a:	f7ff f955 	bl	8002fc8 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d22:	f7ff f951 	bl	8002fc8 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e05c      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d34:	4b11      	ldr	r3, [pc, #68]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f0      	beq.n	8003d22 <HAL_RCC_OscConfig+0x416>
 8003d40:	e054      	b.n	8003dec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d42:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <HAL_RCC_OscConfig+0x478>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d48:	f7ff f93e 	bl	8002fc8 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d50:	f7ff f93a 	bl	8002fc8 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e045      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d62:	4b06      	ldr	r3, [pc, #24]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x444>
 8003d6e:	e03d      	b.n	8003dec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d107      	bne.n	8003d88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e038      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	40007000 	.word	0x40007000
 8003d84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d88:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <HAL_RCC_OscConfig+0x4ec>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d028      	beq.n	8003de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d121      	bne.n	8003de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d11a      	bne.n	8003de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003db8:	4013      	ands	r3, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d111      	bne.n	8003de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	085b      	lsrs	r3, r3, #1
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d107      	bne.n	8003de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d001      	beq.n	8003dec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800

08003dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0cc      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e10:	4b68      	ldr	r3, [pc, #416]	; (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d90c      	bls.n	8003e38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1e:	4b65      	ldr	r3, [pc, #404]	; (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b63      	ldr	r3, [pc, #396]	; (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0b8      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d020      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e50:	4b59      	ldr	r3, [pc, #356]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4a58      	ldr	r2, [pc, #352]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e68:	4b53      	ldr	r3, [pc, #332]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	4a52      	ldr	r2, [pc, #328]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e74:	4b50      	ldr	r3, [pc, #320]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	494d      	ldr	r1, [pc, #308]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d044      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d107      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9a:	4b47      	ldr	r3, [pc, #284]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d119      	bne.n	8003eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e07f      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d003      	beq.n	8003eba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eb6:	2b03      	cmp	r3, #3
 8003eb8:	d107      	bne.n	8003eca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eba:	4b3f      	ldr	r3, [pc, #252]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d109      	bne.n	8003eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e06f      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eca:	4b3b      	ldr	r3, [pc, #236]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e067      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eda:	4b37      	ldr	r3, [pc, #220]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f023 0203 	bic.w	r2, r3, #3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	4934      	ldr	r1, [pc, #208]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eec:	f7ff f86c 	bl	8002fc8 <HAL_GetTick>
 8003ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef2:	e00a      	b.n	8003f0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef4:	f7ff f868 	bl	8002fc8 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e04f      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0a:	4b2b      	ldr	r3, [pc, #172]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 020c 	and.w	r2, r3, #12
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d1eb      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f1c:	4b25      	ldr	r3, [pc, #148]	; (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d20c      	bcs.n	8003f44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2a:	4b22      	ldr	r3, [pc, #136]	; (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f32:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d001      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e032      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f50:	4b19      	ldr	r3, [pc, #100]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4916      	ldr	r1, [pc, #88]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d009      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f6e:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	490e      	ldr	r1, [pc, #56]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f82:	f000 f821 	bl	8003fc8 <HAL_RCC_GetSysClockFreq>
 8003f86:	4602      	mov	r2, r0
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	091b      	lsrs	r3, r3, #4
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	490a      	ldr	r1, [pc, #40]	; (8003fbc <HAL_RCC_ClockConfig+0x1c0>)
 8003f94:	5ccb      	ldrb	r3, [r1, r3]
 8003f96:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9a:	4a09      	ldr	r2, [pc, #36]	; (8003fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f9e:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fe ffcc 	bl	8002f40 <HAL_InitTick>

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40023c00 	.word	0x40023c00
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	08010da8 	.word	0x08010da8
 8003fc0:	20000084 	.word	0x20000084
 8003fc4:	20000088 	.word	0x20000088

08003fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fcc:	b090      	sub	sp, #64	; 0x40
 8003fce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fd8:	2300      	movs	r3, #0
 8003fda:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fe0:	4b59      	ldr	r3, [pc, #356]	; (8004148 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 030c 	and.w	r3, r3, #12
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d00d      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0x40>
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	f200 80a1 	bhi.w	8004134 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <HAL_RCC_GetSysClockFreq+0x34>
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d003      	beq.n	8004002 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ffa:	e09b      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ffc:	4b53      	ldr	r3, [pc, #332]	; (800414c <HAL_RCC_GetSysClockFreq+0x184>)
 8003ffe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004000:	e09b      	b.n	800413a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004002:	4b53      	ldr	r3, [pc, #332]	; (8004150 <HAL_RCC_GetSysClockFreq+0x188>)
 8004004:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004006:	e098      	b.n	800413a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004008:	4b4f      	ldr	r3, [pc, #316]	; (8004148 <HAL_RCC_GetSysClockFreq+0x180>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004010:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004012:	4b4d      	ldr	r3, [pc, #308]	; (8004148 <HAL_RCC_GetSysClockFreq+0x180>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d028      	beq.n	8004070 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800401e:	4b4a      	ldr	r3, [pc, #296]	; (8004148 <HAL_RCC_GetSysClockFreq+0x180>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	099b      	lsrs	r3, r3, #6
 8004024:	2200      	movs	r2, #0
 8004026:	623b      	str	r3, [r7, #32]
 8004028:	627a      	str	r2, [r7, #36]	; 0x24
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004030:	2100      	movs	r1, #0
 8004032:	4b47      	ldr	r3, [pc, #284]	; (8004150 <HAL_RCC_GetSysClockFreq+0x188>)
 8004034:	fb03 f201 	mul.w	r2, r3, r1
 8004038:	2300      	movs	r3, #0
 800403a:	fb00 f303 	mul.w	r3, r0, r3
 800403e:	4413      	add	r3, r2
 8004040:	4a43      	ldr	r2, [pc, #268]	; (8004150 <HAL_RCC_GetSysClockFreq+0x188>)
 8004042:	fba0 1202 	umull	r1, r2, r0, r2
 8004046:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004048:	460a      	mov	r2, r1
 800404a:	62ba      	str	r2, [r7, #40]	; 0x28
 800404c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800404e:	4413      	add	r3, r2
 8004050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004054:	2200      	movs	r2, #0
 8004056:	61bb      	str	r3, [r7, #24]
 8004058:	61fa      	str	r2, [r7, #28]
 800405a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800405e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004062:	f7fc f925 	bl	80002b0 <__aeabi_uldivmod>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4613      	mov	r3, r2
 800406c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800406e:	e053      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004070:	4b35      	ldr	r3, [pc, #212]	; (8004148 <HAL_RCC_GetSysClockFreq+0x180>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	099b      	lsrs	r3, r3, #6
 8004076:	2200      	movs	r2, #0
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	617a      	str	r2, [r7, #20]
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004082:	f04f 0b00 	mov.w	fp, #0
 8004086:	4652      	mov	r2, sl
 8004088:	465b      	mov	r3, fp
 800408a:	f04f 0000 	mov.w	r0, #0
 800408e:	f04f 0100 	mov.w	r1, #0
 8004092:	0159      	lsls	r1, r3, #5
 8004094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004098:	0150      	lsls	r0, r2, #5
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	ebb2 080a 	subs.w	r8, r2, sl
 80040a2:	eb63 090b 	sbc.w	r9, r3, fp
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80040b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80040b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80040ba:	ebb2 0408 	subs.w	r4, r2, r8
 80040be:	eb63 0509 	sbc.w	r5, r3, r9
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	f04f 0300 	mov.w	r3, #0
 80040ca:	00eb      	lsls	r3, r5, #3
 80040cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040d0:	00e2      	lsls	r2, r4, #3
 80040d2:	4614      	mov	r4, r2
 80040d4:	461d      	mov	r5, r3
 80040d6:	eb14 030a 	adds.w	r3, r4, sl
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	eb45 030b 	adc.w	r3, r5, fp
 80040e0:	607b      	str	r3, [r7, #4]
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ee:	4629      	mov	r1, r5
 80040f0:	028b      	lsls	r3, r1, #10
 80040f2:	4621      	mov	r1, r4
 80040f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040f8:	4621      	mov	r1, r4
 80040fa:	028a      	lsls	r2, r1, #10
 80040fc:	4610      	mov	r0, r2
 80040fe:	4619      	mov	r1, r3
 8004100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004102:	2200      	movs	r2, #0
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	60fa      	str	r2, [r7, #12]
 8004108:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800410c:	f7fc f8d0 	bl	80002b0 <__aeabi_uldivmod>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4613      	mov	r3, r2
 8004116:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004118:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <HAL_RCC_GetSysClockFreq+0x180>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	0c1b      	lsrs	r3, r3, #16
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	3301      	adds	r3, #1
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004128:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004130:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004132:	e002      	b.n	800413a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <HAL_RCC_GetSysClockFreq+0x184>)
 8004136:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800413c:	4618      	mov	r0, r3
 800413e:	3740      	adds	r7, #64	; 0x40
 8004140:	46bd      	mov	sp, r7
 8004142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004146:	bf00      	nop
 8004148:	40023800 	.word	0x40023800
 800414c:	00f42400 	.word	0x00f42400
 8004150:	017d7840 	.word	0x017d7840

08004154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004158:	4b03      	ldr	r3, [pc, #12]	; (8004168 <HAL_RCC_GetHCLKFreq+0x14>)
 800415a:	681b      	ldr	r3, [r3, #0]
}
 800415c:	4618      	mov	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	20000084 	.word	0x20000084

0800416c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004170:	f7ff fff0 	bl	8004154 <HAL_RCC_GetHCLKFreq>
 8004174:	4602      	mov	r2, r0
 8004176:	4b05      	ldr	r3, [pc, #20]	; (800418c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	0a9b      	lsrs	r3, r3, #10
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	4903      	ldr	r1, [pc, #12]	; (8004190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004182:	5ccb      	ldrb	r3, [r1, r3]
 8004184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004188:	4618      	mov	r0, r3
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40023800 	.word	0x40023800
 8004190:	08010db8 	.word	0x08010db8

08004194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004198:	f7ff ffdc 	bl	8004154 <HAL_RCC_GetHCLKFreq>
 800419c:	4602      	mov	r2, r0
 800419e:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	0b5b      	lsrs	r3, r3, #13
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	4903      	ldr	r1, [pc, #12]	; (80041b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041aa:	5ccb      	ldrb	r3, [r1, r3]
 80041ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40023800 	.word	0x40023800
 80041b8:	08010db8 	.word	0x08010db8

080041bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e07b      	b.n	80042c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d108      	bne.n	80041e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041de:	d009      	beq.n	80041f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	61da      	str	r2, [r3, #28]
 80041e6:	e005      	b.n	80041f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fe fb8e 	bl	8002930 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800422a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004264:	431a      	orrs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004278:	ea42 0103 	orr.w	r1, r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	0c1b      	lsrs	r3, r3, #16
 8004292:	f003 0104 	and.w	r1, r3, #4
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	f003 0210 	and.w	r2, r3, #16
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69da      	ldr	r2, [r3, #28]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b08c      	sub	sp, #48	; 0x30
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	607a      	str	r2, [r7, #4]
 80042da:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042dc:	2301      	movs	r3, #1
 80042de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <HAL_SPI_TransmitReceive+0x26>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e18a      	b.n	800460a <HAL_SPI_TransmitReceive+0x33c>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042fc:	f7fe fe64 	bl	8002fc8 <HAL_GetTick>
 8004300:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004312:	887b      	ldrh	r3, [r7, #2]
 8004314:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004316:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800431a:	2b01      	cmp	r3, #1
 800431c:	d00f      	beq.n	800433e <HAL_SPI_TransmitReceive+0x70>
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004324:	d107      	bne.n	8004336 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d103      	bne.n	8004336 <HAL_SPI_TransmitReceive+0x68>
 800432e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004332:	2b04      	cmp	r3, #4
 8004334:	d003      	beq.n	800433e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004336:	2302      	movs	r3, #2
 8004338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800433c:	e15b      	b.n	80045f6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_SPI_TransmitReceive+0x82>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <HAL_SPI_TransmitReceive+0x82>
 800434a:	887b      	ldrh	r3, [r7, #2]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d103      	bne.n	8004358 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004356:	e14e      	b.n	80045f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b04      	cmp	r3, #4
 8004362:	d003      	beq.n	800436c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2205      	movs	r2, #5
 8004368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	887a      	ldrh	r2, [r7, #2]
 800437c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	887a      	ldrh	r2, [r7, #2]
 8004382:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	887a      	ldrh	r2, [r7, #2]
 800438e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	887a      	ldrh	r2, [r7, #2]
 8004394:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ac:	2b40      	cmp	r3, #64	; 0x40
 80043ae:	d007      	beq.n	80043c0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043c8:	d178      	bne.n	80044bc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <HAL_SPI_TransmitReceive+0x10a>
 80043d2:	8b7b      	ldrh	r3, [r7, #26]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d166      	bne.n	80044a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	881a      	ldrh	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e8:	1c9a      	adds	r2, r3, #2
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043fc:	e053      	b.n	80044a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b02      	cmp	r3, #2
 800440a:	d11b      	bne.n	8004444 <HAL_SPI_TransmitReceive+0x176>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d016      	beq.n	8004444 <HAL_SPI_TransmitReceive+0x176>
 8004416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004418:	2b01      	cmp	r3, #1
 800441a:	d113      	bne.n	8004444 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004420:	881a      	ldrh	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442c:	1c9a      	adds	r2, r3, #2
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b01      	cmp	r3, #1
 8004450:	d119      	bne.n	8004486 <HAL_SPI_TransmitReceive+0x1b8>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d014      	beq.n	8004486 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004466:	b292      	uxth	r2, r2
 8004468:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	1c9a      	adds	r2, r3, #2
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004482:	2301      	movs	r3, #1
 8004484:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004486:	f7fe fd9f 	bl	8002fc8 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004492:	429a      	cmp	r2, r3
 8004494:	d807      	bhi.n	80044a6 <HAL_SPI_TransmitReceive+0x1d8>
 8004496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449c:	d003      	beq.n	80044a6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80044a4:	e0a7      	b.n	80045f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1a6      	bne.n	80043fe <HAL_SPI_TransmitReceive+0x130>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1a1      	bne.n	80043fe <HAL_SPI_TransmitReceive+0x130>
 80044ba:	e07c      	b.n	80045b6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <HAL_SPI_TransmitReceive+0x1fc>
 80044c4:	8b7b      	ldrh	r3, [r7, #26]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d16b      	bne.n	80045a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	330c      	adds	r3, #12
 80044d4:	7812      	ldrb	r2, [r2, #0]
 80044d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044f0:	e057      	b.n	80045a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d11c      	bne.n	800453a <HAL_SPI_TransmitReceive+0x26c>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d017      	beq.n	800453a <HAL_SPI_TransmitReceive+0x26c>
 800450a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450c:	2b01      	cmp	r3, #1
 800450e:	d114      	bne.n	800453a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	7812      	ldrb	r2, [r2, #0]
 800451c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800452c:	b29b      	uxth	r3, r3
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b01      	cmp	r3, #1
 8004546:	d119      	bne.n	800457c <HAL_SPI_TransmitReceive+0x2ae>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d014      	beq.n	800457c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004578:	2301      	movs	r3, #1
 800457a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800457c:	f7fe fd24 	bl	8002fc8 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004588:	429a      	cmp	r2, r3
 800458a:	d803      	bhi.n	8004594 <HAL_SPI_TransmitReceive+0x2c6>
 800458c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004592:	d102      	bne.n	800459a <HAL_SPI_TransmitReceive+0x2cc>
 8004594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004596:	2b00      	cmp	r3, #0
 8004598:	d103      	bne.n	80045a2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80045a0:	e029      	b.n	80045f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1a2      	bne.n	80044f2 <HAL_SPI_TransmitReceive+0x224>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d19d      	bne.n	80044f2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 f8b2 	bl	8004724 <SPI_EndRxTxTransaction>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d006      	beq.n	80045d4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80045d2:	e010      	b.n	80045f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10b      	bne.n	80045f4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045dc:	2300      	movs	r3, #0
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	e000      	b.n	80045f6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80045f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004606:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800460a:	4618      	mov	r0, r3
 800460c:	3730      	adds	r7, #48	; 0x30
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	603b      	str	r3, [r7, #0]
 8004620:	4613      	mov	r3, r2
 8004622:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004624:	f7fe fcd0 	bl	8002fc8 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462c:	1a9b      	subs	r3, r3, r2
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	4413      	add	r3, r2
 8004632:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004634:	f7fe fcc8 	bl	8002fc8 <HAL_GetTick>
 8004638:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800463a:	4b39      	ldr	r3, [pc, #228]	; (8004720 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	015b      	lsls	r3, r3, #5
 8004640:	0d1b      	lsrs	r3, r3, #20
 8004642:	69fa      	ldr	r2, [r7, #28]
 8004644:	fb02 f303 	mul.w	r3, r2, r3
 8004648:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800464a:	e054      	b.n	80046f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004652:	d050      	beq.n	80046f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004654:	f7fe fcb8 	bl	8002fc8 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	69fa      	ldr	r2, [r7, #28]
 8004660:	429a      	cmp	r2, r3
 8004662:	d902      	bls.n	800466a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d13d      	bne.n	80046e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004678:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004682:	d111      	bne.n	80046a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800468c:	d004      	beq.n	8004698 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004696:	d107      	bne.n	80046a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046b0:	d10f      	bne.n	80046d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e017      	b.n	8004716 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	3b01      	subs	r3, #1
 80046f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4013      	ands	r3, r2
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	429a      	cmp	r2, r3
 8004704:	bf0c      	ite	eq
 8004706:	2301      	moveq	r3, #1
 8004708:	2300      	movne	r3, #0
 800470a:	b2db      	uxtb	r3, r3
 800470c:	461a      	mov	r2, r3
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	429a      	cmp	r2, r3
 8004712:	d19b      	bne.n	800464c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	20000084 	.word	0x20000084

08004724 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af02      	add	r7, sp, #8
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004730:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <SPI_EndRxTxTransaction+0x7c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1b      	ldr	r2, [pc, #108]	; (80047a4 <SPI_EndRxTxTransaction+0x80>)
 8004736:	fba2 2303 	umull	r2, r3, r2, r3
 800473a:	0d5b      	lsrs	r3, r3, #21
 800473c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004740:	fb02 f303 	mul.w	r3, r2, r3
 8004744:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800474e:	d112      	bne.n	8004776 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2200      	movs	r2, #0
 8004758:	2180      	movs	r1, #128	; 0x80
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f7ff ff5a 	bl	8004614 <SPI_WaitFlagStateUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d016      	beq.n	8004794 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476a:	f043 0220 	orr.w	r2, r3, #32
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e00f      	b.n	8004796 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	3b01      	subs	r3, #1
 8004780:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478c:	2b80      	cmp	r3, #128	; 0x80
 800478e:	d0f2      	beq.n	8004776 <SPI_EndRxTxTransaction+0x52>
 8004790:	e000      	b.n	8004794 <SPI_EndRxTxTransaction+0x70>
        break;
 8004792:	bf00      	nop
  }

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	20000084 	.word	0x20000084
 80047a4:	165e9f81 	.word	0x165e9f81

080047a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e041      	b.n	800483e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fe f8f6 	bl	80029c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f000 fce4 	bl	80051b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e041      	b.n	80048dc <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d106      	bne.n	8004872 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f839 	bl	80048e4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2202      	movs	r2, #2
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3304      	adds	r3, #4
 8004882:	4619      	mov	r1, r3
 8004884:	4610      	mov	r0, r2
 8004886:	f000 fc95 	bl	80051b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d109      	bne.n	8004920 <HAL_TIM_OC_Start_IT+0x28>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b01      	cmp	r3, #1
 8004916:	bf14      	ite	ne
 8004918:	2301      	movne	r3, #1
 800491a:	2300      	moveq	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	e022      	b.n	8004966 <HAL_TIM_OC_Start_IT+0x6e>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2b04      	cmp	r3, #4
 8004924:	d109      	bne.n	800493a <HAL_TIM_OC_Start_IT+0x42>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b01      	cmp	r3, #1
 8004930:	bf14      	ite	ne
 8004932:	2301      	movne	r3, #1
 8004934:	2300      	moveq	r3, #0
 8004936:	b2db      	uxtb	r3, r3
 8004938:	e015      	b.n	8004966 <HAL_TIM_OC_Start_IT+0x6e>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b08      	cmp	r3, #8
 800493e:	d109      	bne.n	8004954 <HAL_TIM_OC_Start_IT+0x5c>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b01      	cmp	r3, #1
 800494a:	bf14      	ite	ne
 800494c:	2301      	movne	r3, #1
 800494e:	2300      	moveq	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	e008      	b.n	8004966 <HAL_TIM_OC_Start_IT+0x6e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b01      	cmp	r3, #1
 800495e:	bf14      	ite	ne
 8004960:	2301      	movne	r3, #1
 8004962:	2300      	moveq	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e0b3      	b.n	8004ad6 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d104      	bne.n	800497e <HAL_TIM_OC_Start_IT+0x86>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800497c:	e013      	b.n	80049a6 <HAL_TIM_OC_Start_IT+0xae>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b04      	cmp	r3, #4
 8004982:	d104      	bne.n	800498e <HAL_TIM_OC_Start_IT+0x96>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800498c:	e00b      	b.n	80049a6 <HAL_TIM_OC_Start_IT+0xae>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b08      	cmp	r3, #8
 8004992:	d104      	bne.n	800499e <HAL_TIM_OC_Start_IT+0xa6>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800499c:	e003      	b.n	80049a6 <HAL_TIM_OC_Start_IT+0xae>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2202      	movs	r2, #2
 80049a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b0c      	cmp	r3, #12
 80049aa:	d841      	bhi.n	8004a30 <HAL_TIM_OC_Start_IT+0x138>
 80049ac:	a201      	add	r2, pc, #4	; (adr r2, 80049b4 <HAL_TIM_OC_Start_IT+0xbc>)
 80049ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b2:	bf00      	nop
 80049b4:	080049e9 	.word	0x080049e9
 80049b8:	08004a31 	.word	0x08004a31
 80049bc:	08004a31 	.word	0x08004a31
 80049c0:	08004a31 	.word	0x08004a31
 80049c4:	080049fb 	.word	0x080049fb
 80049c8:	08004a31 	.word	0x08004a31
 80049cc:	08004a31 	.word	0x08004a31
 80049d0:	08004a31 	.word	0x08004a31
 80049d4:	08004a0d 	.word	0x08004a0d
 80049d8:	08004a31 	.word	0x08004a31
 80049dc:	08004a31 	.word	0x08004a31
 80049e0:	08004a31 	.word	0x08004a31
 80049e4:	08004a1f 	.word	0x08004a1f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0202 	orr.w	r2, r2, #2
 80049f6:	60da      	str	r2, [r3, #12]
      break;
 80049f8:	e01d      	b.n	8004a36 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f042 0204 	orr.w	r2, r2, #4
 8004a08:	60da      	str	r2, [r3, #12]
      break;
 8004a0a:	e014      	b.n	8004a36 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0208 	orr.w	r2, r2, #8
 8004a1a:	60da      	str	r2, [r3, #12]
      break;
 8004a1c:	e00b      	b.n	8004a36 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 0210 	orr.w	r2, r2, #16
 8004a2c:	60da      	str	r2, [r3, #12]
      break;
 8004a2e:	e002      	b.n	8004a36 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	73fb      	strb	r3, [r7, #15]
      break;
 8004a34:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d14b      	bne.n	8004ad4 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2201      	movs	r2, #1
 8004a42:	6839      	ldr	r1, [r7, #0]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fe5b 	bl	8005700 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a24      	ldr	r2, [pc, #144]	; (8004ae0 <HAL_TIM_OC_Start_IT+0x1e8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d107      	bne.n	8004a64 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a62:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a1d      	ldr	r2, [pc, #116]	; (8004ae0 <HAL_TIM_OC_Start_IT+0x1e8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d018      	beq.n	8004aa0 <HAL_TIM_OC_Start_IT+0x1a8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a76:	d013      	beq.n	8004aa0 <HAL_TIM_OC_Start_IT+0x1a8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a19      	ldr	r2, [pc, #100]	; (8004ae4 <HAL_TIM_OC_Start_IT+0x1ec>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00e      	beq.n	8004aa0 <HAL_TIM_OC_Start_IT+0x1a8>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a18      	ldr	r2, [pc, #96]	; (8004ae8 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d009      	beq.n	8004aa0 <HAL_TIM_OC_Start_IT+0x1a8>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a16      	ldr	r2, [pc, #88]	; (8004aec <HAL_TIM_OC_Start_IT+0x1f4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d004      	beq.n	8004aa0 <HAL_TIM_OC_Start_IT+0x1a8>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a15      	ldr	r2, [pc, #84]	; (8004af0 <HAL_TIM_OC_Start_IT+0x1f8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d111      	bne.n	8004ac4 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2b06      	cmp	r3, #6
 8004ab0:	d010      	beq.n	8004ad4 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0201 	orr.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac2:	e007      	b.n	8004ad4 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	40010000 	.word	0x40010000
 8004ae4:	40000400 	.word	0x40000400
 8004ae8:	40000800 	.word	0x40000800
 8004aec:	40000c00 	.word	0x40000c00
 8004af0:	40014000 	.word	0x40014000

08004af4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b0c      	cmp	r3, #12
 8004b06:	d841      	bhi.n	8004b8c <HAL_TIM_OC_Stop_IT+0x98>
 8004b08:	a201      	add	r2, pc, #4	; (adr r2, 8004b10 <HAL_TIM_OC_Stop_IT+0x1c>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004b45 	.word	0x08004b45
 8004b14:	08004b8d 	.word	0x08004b8d
 8004b18:	08004b8d 	.word	0x08004b8d
 8004b1c:	08004b8d 	.word	0x08004b8d
 8004b20:	08004b57 	.word	0x08004b57
 8004b24:	08004b8d 	.word	0x08004b8d
 8004b28:	08004b8d 	.word	0x08004b8d
 8004b2c:	08004b8d 	.word	0x08004b8d
 8004b30:	08004b69 	.word	0x08004b69
 8004b34:	08004b8d 	.word	0x08004b8d
 8004b38:	08004b8d 	.word	0x08004b8d
 8004b3c:	08004b8d 	.word	0x08004b8d
 8004b40:	08004b7b 	.word	0x08004b7b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0202 	bic.w	r2, r2, #2
 8004b52:	60da      	str	r2, [r3, #12]
      break;
 8004b54:	e01d      	b.n	8004b92 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0204 	bic.w	r2, r2, #4
 8004b64:	60da      	str	r2, [r3, #12]
      break;
 8004b66:	e014      	b.n	8004b92 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0208 	bic.w	r2, r2, #8
 8004b76:	60da      	str	r2, [r3, #12]
      break;
 8004b78:	e00b      	b.n	8004b92 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0210 	bic.w	r2, r2, #16
 8004b88:	60da      	str	r2, [r3, #12]
      break;
 8004b8a:	e002      	b.n	8004b92 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b90:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d157      	bne.n	8004c48 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	6839      	ldr	r1, [r7, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fdad 	bl	8005700 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a2a      	ldr	r2, [pc, #168]	; (8004c54 <HAL_TIM_OC_Stop_IT+0x160>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d117      	bne.n	8004be0 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6a1a      	ldr	r2, [r3, #32]
 8004bb6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bba:	4013      	ands	r3, r2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10f      	bne.n	8004be0 <HAL_TIM_OC_Stop_IT+0xec>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6a1a      	ldr	r2, [r3, #32]
 8004bc6:	f240 4344 	movw	r3, #1092	; 0x444
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d107      	bne.n	8004be0 <HAL_TIM_OC_Stop_IT+0xec>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bde:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6a1a      	ldr	r2, [r3, #32]
 8004be6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bea:	4013      	ands	r3, r2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10f      	bne.n	8004c10 <HAL_TIM_OC_Stop_IT+0x11c>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6a1a      	ldr	r2, [r3, #32]
 8004bf6:	f240 4344 	movw	r3, #1092	; 0x444
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d107      	bne.n	8004c10 <HAL_TIM_OC_Stop_IT+0x11c>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0201 	bic.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d104      	bne.n	8004c20 <HAL_TIM_OC_Stop_IT+0x12c>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c1e:	e013      	b.n	8004c48 <HAL_TIM_OC_Stop_IT+0x154>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d104      	bne.n	8004c30 <HAL_TIM_OC_Stop_IT+0x13c>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c2e:	e00b      	b.n	8004c48 <HAL_TIM_OC_Stop_IT+0x154>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b08      	cmp	r3, #8
 8004c34:	d104      	bne.n	8004c40 <HAL_TIM_OC_Stop_IT+0x14c>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c3e:	e003      	b.n	8004c48 <HAL_TIM_OC_Stop_IT+0x154>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40010000 	.word	0x40010000

08004c58 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e041      	b.n	8004cf0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d106      	bne.n	8004c86 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f839 	bl	8004cf8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2202      	movs	r2, #2
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3304      	adds	r3, #4
 8004c96:	4619      	mov	r1, r3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	f000 fa8b 	bl	80051b4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0208 	bic.w	r2, r2, #8
 8004cac:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6819      	ldr	r1, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d122      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d11b      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0202 	mvn.w	r2, #2
 8004d38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fa11 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
 8004d54:	e005      	b.n	8004d62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fd fc3c 	bl	80025d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 fa14 	bl	800518a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f003 0304 	and.w	r3, r3, #4
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d122      	bne.n	8004dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d11b      	bne.n	8004dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f06f 0204 	mvn.w	r2, #4
 8004d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2202      	movs	r2, #2
 8004d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f9e7 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
 8004da8:	e005      	b.n	8004db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fd fc12 	bl	80025d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f9ea 	bl	800518a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d122      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f003 0308 	and.w	r3, r3, #8
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d11b      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0208 	mvn.w	r2, #8
 8004de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2204      	movs	r2, #4
 8004de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f9bd 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
 8004dfc:	e005      	b.n	8004e0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fd fbe8 	bl	80025d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f9c0 	bl	800518a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	2b10      	cmp	r3, #16
 8004e1c:	d122      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	2b10      	cmp	r3, #16
 8004e2a:	d11b      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f06f 0210 	mvn.w	r2, #16
 8004e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2208      	movs	r2, #8
 8004e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f993 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
 8004e50:	e005      	b.n	8004e5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7fd fbbe 	bl	80025d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f996 	bl	800518a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d10e      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d107      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f06f 0201 	mvn.w	r2, #1
 8004e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f969 	bl	8005162 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9a:	2b80      	cmp	r3, #128	; 0x80
 8004e9c:	d10e      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea8:	2b80      	cmp	r3, #128	; 0x80
 8004eaa:	d107      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fcc0 	bl	800583c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec6:	2b40      	cmp	r3, #64	; 0x40
 8004ec8:	d10e      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed4:	2b40      	cmp	r3, #64	; 0x40
 8004ed6:	d107      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f95b 	bl	800519e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b20      	cmp	r3, #32
 8004ef4:	d10e      	bne.n	8004f14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d107      	bne.n	8004f14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f06f 0220 	mvn.w	r2, #32
 8004f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fc8a 	bl	8005828 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f14:	bf00      	nop
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <HAL_TIM_OC_ConfigChannel+0x1e>
 8004f36:	2302      	movs	r3, #2
 8004f38:	e048      	b.n	8004fcc <HAL_TIM_OC_ConfigChannel+0xb0>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b0c      	cmp	r3, #12
 8004f46:	d839      	bhi.n	8004fbc <HAL_TIM_OC_ConfigChannel+0xa0>
 8004f48:	a201      	add	r2, pc, #4	; (adr r2, 8004f50 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4e:	bf00      	nop
 8004f50:	08004f85 	.word	0x08004f85
 8004f54:	08004fbd 	.word	0x08004fbd
 8004f58:	08004fbd 	.word	0x08004fbd
 8004f5c:	08004fbd 	.word	0x08004fbd
 8004f60:	08004f93 	.word	0x08004f93
 8004f64:	08004fbd 	.word	0x08004fbd
 8004f68:	08004fbd 	.word	0x08004fbd
 8004f6c:	08004fbd 	.word	0x08004fbd
 8004f70:	08004fa1 	.word	0x08004fa1
 8004f74:	08004fbd 	.word	0x08004fbd
 8004f78:	08004fbd 	.word	0x08004fbd
 8004f7c:	08004fbd 	.word	0x08004fbd
 8004f80:	08004faf 	.word	0x08004faf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 f992 	bl	80052b4 <TIM_OC1_SetConfig>
      break;
 8004f90:	e017      	b.n	8004fc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 f9f1 	bl	8005380 <TIM_OC2_SetConfig>
      break;
 8004f9e:	e010      	b.n	8004fc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fa56 	bl	8005458 <TIM_OC3_SetConfig>
      break;
 8004fac:	e009      	b.n	8004fc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 fab9 	bl	800552c <TIM_OC4_SetConfig>
      break;
 8004fba:	e002      	b.n	8004fc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8004fc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3718      	adds	r7, #24
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_TIM_ConfigClockSource+0x1c>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e0b4      	b.n	800515a <HAL_TIM_ConfigClockSource+0x186>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800500e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005016:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005028:	d03e      	beq.n	80050a8 <HAL_TIM_ConfigClockSource+0xd4>
 800502a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800502e:	f200 8087 	bhi.w	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005036:	f000 8086 	beq.w	8005146 <HAL_TIM_ConfigClockSource+0x172>
 800503a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503e:	d87f      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005040:	2b70      	cmp	r3, #112	; 0x70
 8005042:	d01a      	beq.n	800507a <HAL_TIM_ConfigClockSource+0xa6>
 8005044:	2b70      	cmp	r3, #112	; 0x70
 8005046:	d87b      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005048:	2b60      	cmp	r3, #96	; 0x60
 800504a:	d050      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x11a>
 800504c:	2b60      	cmp	r3, #96	; 0x60
 800504e:	d877      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005050:	2b50      	cmp	r3, #80	; 0x50
 8005052:	d03c      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0xfa>
 8005054:	2b50      	cmp	r3, #80	; 0x50
 8005056:	d873      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005058:	2b40      	cmp	r3, #64	; 0x40
 800505a:	d058      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x13a>
 800505c:	2b40      	cmp	r3, #64	; 0x40
 800505e:	d86f      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005060:	2b30      	cmp	r3, #48	; 0x30
 8005062:	d064      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x15a>
 8005064:	2b30      	cmp	r3, #48	; 0x30
 8005066:	d86b      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005068:	2b20      	cmp	r3, #32
 800506a:	d060      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x15a>
 800506c:	2b20      	cmp	r3, #32
 800506e:	d867      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d05c      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x15a>
 8005074:	2b10      	cmp	r3, #16
 8005076:	d05a      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x15a>
 8005078:	e062      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6818      	ldr	r0, [r3, #0]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	6899      	ldr	r1, [r3, #8]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f000 fb19 	bl	80056c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800509c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	609a      	str	r2, [r3, #8]
      break;
 80050a6:	e04f      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6818      	ldr	r0, [r3, #0]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	6899      	ldr	r1, [r3, #8]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f000 fb02 	bl	80056c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050ca:	609a      	str	r2, [r3, #8]
      break;
 80050cc:	e03c      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6818      	ldr	r0, [r3, #0]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6859      	ldr	r1, [r3, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	461a      	mov	r2, r3
 80050dc:	f000 fa76 	bl	80055cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2150      	movs	r1, #80	; 0x50
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 facf 	bl	800568a <TIM_ITRx_SetConfig>
      break;
 80050ec:	e02c      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6818      	ldr	r0, [r3, #0]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	6859      	ldr	r1, [r3, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	461a      	mov	r2, r3
 80050fc:	f000 fa95 	bl	800562a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2160      	movs	r1, #96	; 0x60
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fabf 	bl	800568a <TIM_ITRx_SetConfig>
      break;
 800510c:	e01c      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	6859      	ldr	r1, [r3, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	461a      	mov	r2, r3
 800511c:	f000 fa56 	bl	80055cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2140      	movs	r1, #64	; 0x40
 8005126:	4618      	mov	r0, r3
 8005128:	f000 faaf 	bl	800568a <TIM_ITRx_SetConfig>
      break;
 800512c:	e00c      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4619      	mov	r1, r3
 8005138:	4610      	mov	r0, r2
 800513a:	f000 faa6 	bl	800568a <TIM_ITRx_SetConfig>
      break;
 800513e:	e003      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
      break;
 8005144:	e000      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005146:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005158:	7bfb      	ldrb	r3, [r7, #15]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a34      	ldr	r2, [pc, #208]	; (8005298 <TIM_Base_SetConfig+0xe4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00f      	beq.n	80051ec <TIM_Base_SetConfig+0x38>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d2:	d00b      	beq.n	80051ec <TIM_Base_SetConfig+0x38>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a31      	ldr	r2, [pc, #196]	; (800529c <TIM_Base_SetConfig+0xe8>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d007      	beq.n	80051ec <TIM_Base_SetConfig+0x38>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a30      	ldr	r2, [pc, #192]	; (80052a0 <TIM_Base_SetConfig+0xec>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_Base_SetConfig+0x38>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a2f      	ldr	r2, [pc, #188]	; (80052a4 <TIM_Base_SetConfig+0xf0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d108      	bne.n	80051fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a25      	ldr	r2, [pc, #148]	; (8005298 <TIM_Base_SetConfig+0xe4>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d01b      	beq.n	800523e <TIM_Base_SetConfig+0x8a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520c:	d017      	beq.n	800523e <TIM_Base_SetConfig+0x8a>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a22      	ldr	r2, [pc, #136]	; (800529c <TIM_Base_SetConfig+0xe8>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d013      	beq.n	800523e <TIM_Base_SetConfig+0x8a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a21      	ldr	r2, [pc, #132]	; (80052a0 <TIM_Base_SetConfig+0xec>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d00f      	beq.n	800523e <TIM_Base_SetConfig+0x8a>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a20      	ldr	r2, [pc, #128]	; (80052a4 <TIM_Base_SetConfig+0xf0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00b      	beq.n	800523e <TIM_Base_SetConfig+0x8a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a1f      	ldr	r2, [pc, #124]	; (80052a8 <TIM_Base_SetConfig+0xf4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d007      	beq.n	800523e <TIM_Base_SetConfig+0x8a>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a1e      	ldr	r2, [pc, #120]	; (80052ac <TIM_Base_SetConfig+0xf8>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d003      	beq.n	800523e <TIM_Base_SetConfig+0x8a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a1d      	ldr	r2, [pc, #116]	; (80052b0 <TIM_Base_SetConfig+0xfc>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d108      	bne.n	8005250 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a08      	ldr	r2, [pc, #32]	; (8005298 <TIM_Base_SetConfig+0xe4>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d103      	bne.n	8005284 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	691a      	ldr	r2, [r3, #16]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	615a      	str	r2, [r3, #20]
}
 800528a:	bf00      	nop
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40010000 	.word	0x40010000
 800529c:	40000400 	.word	0x40000400
 80052a0:	40000800 	.word	0x40000800
 80052a4:	40000c00 	.word	0x40000c00
 80052a8:	40014000 	.word	0x40014000
 80052ac:	40014400 	.word	0x40014400
 80052b0:	40014800 	.word	0x40014800

080052b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	f023 0201 	bic.w	r2, r3, #1
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0303 	bic.w	r3, r3, #3
 80052ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f023 0302 	bic.w	r3, r3, #2
 80052fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a1c      	ldr	r2, [pc, #112]	; (800537c <TIM_OC1_SetConfig+0xc8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d10c      	bne.n	800532a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f023 0308 	bic.w	r3, r3, #8
 8005316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	4313      	orrs	r3, r2
 8005320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f023 0304 	bic.w	r3, r3, #4
 8005328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a13      	ldr	r2, [pc, #76]	; (800537c <TIM_OC1_SetConfig+0xc8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d111      	bne.n	8005356 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	621a      	str	r2, [r3, #32]
}
 8005370:	bf00      	nop
 8005372:	371c      	adds	r7, #28
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	40010000 	.word	0x40010000

08005380 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	f023 0210 	bic.w	r2, r3, #16
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	021b      	lsls	r3, r3, #8
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f023 0320 	bic.w	r3, r3, #32
 80053ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a1e      	ldr	r2, [pc, #120]	; (8005454 <TIM_OC2_SetConfig+0xd4>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d10d      	bne.n	80053fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a15      	ldr	r2, [pc, #84]	; (8005454 <TIM_OC2_SetConfig+0xd4>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d113      	bne.n	800542c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800540a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005412:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4313      	orrs	r3, r2
 800541e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40010000 	.word	0x40010000

08005458 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0303 	bic.w	r3, r3, #3
 800548e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	021b      	lsls	r3, r3, #8
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a1d      	ldr	r2, [pc, #116]	; (8005528 <TIM_OC3_SetConfig+0xd0>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d10d      	bne.n	80054d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	021b      	lsls	r3, r3, #8
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a14      	ldr	r2, [pc, #80]	; (8005528 <TIM_OC3_SetConfig+0xd0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d113      	bne.n	8005502 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	621a      	str	r2, [r3, #32]
}
 800551c:	bf00      	nop
 800551e:	371c      	adds	r7, #28
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	40010000 	.word	0x40010000

0800552c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800555a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	021b      	lsls	r3, r3, #8
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	4313      	orrs	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005576:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	031b      	lsls	r3, r3, #12
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a10      	ldr	r2, [pc, #64]	; (80055c8 <TIM_OC4_SetConfig+0x9c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d109      	bne.n	80055a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005592:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	019b      	lsls	r3, r3, #6
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	4313      	orrs	r3, r2
 800559e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	621a      	str	r2, [r3, #32]
}
 80055ba:	bf00      	nop
 80055bc:	371c      	adds	r7, #28
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	40010000 	.word	0x40010000

080055cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b087      	sub	sp, #28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f023 0201 	bic.w	r2, r3, #1
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f023 030a 	bic.w	r3, r3, #10
 8005608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	621a      	str	r2, [r3, #32]
}
 800561e:	bf00      	nop
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800562a:	b480      	push	{r7}
 800562c:	b087      	sub	sp, #28
 800562e:	af00      	add	r7, sp, #0
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f023 0210 	bic.w	r2, r3, #16
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005654:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	031b      	lsls	r3, r3, #12
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005666:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	621a      	str	r2, [r3, #32]
}
 800567e:	bf00      	nop
 8005680:	371c      	adds	r7, #28
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800568a:	b480      	push	{r7}
 800568c:	b085      	sub	sp, #20
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f043 0307 	orr.w	r3, r3, #7
 80056ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	609a      	str	r2, [r3, #8]
}
 80056b4:	bf00      	nop
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b087      	sub	sp, #28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	021a      	lsls	r2, r3, #8
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	431a      	orrs	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	609a      	str	r2, [r3, #8]
}
 80056f4:	bf00      	nop
 80056f6:	371c      	adds	r7, #28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f003 031f 	and.w	r3, r3, #31
 8005712:	2201      	movs	r2, #1
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a1a      	ldr	r2, [r3, #32]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	43db      	mvns	r3, r3
 8005722:	401a      	ands	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a1a      	ldr	r2, [r3, #32]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f003 031f 	and.w	r3, r3, #31
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	fa01 f303 	lsl.w	r3, r1, r3
 8005738:	431a      	orrs	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	621a      	str	r2, [r3, #32]
}
 800573e:	bf00      	nop
 8005740:	371c      	adds	r7, #28
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
	...

0800574c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800575c:	2b01      	cmp	r3, #1
 800575e:	d101      	bne.n	8005764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005760:	2302      	movs	r3, #2
 8005762:	e050      	b.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a1c      	ldr	r2, [pc, #112]	; (8005814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d018      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b0:	d013      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a18      	ldr	r2, [pc, #96]	; (8005818 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00e      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a16      	ldr	r2, [pc, #88]	; (800581c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d009      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a15      	ldr	r2, [pc, #84]	; (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d004      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a13      	ldr	r2, [pc, #76]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d10c      	bne.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40010000 	.word	0x40010000
 8005818:	40000400 	.word	0x40000400
 800581c:	40000800 	.word	0x40000800
 8005820:	40000c00 	.word	0x40000c00
 8005824:	40014000 	.word	0x40014000

08005828 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e03f      	b.n	80058e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fd f8e6 	bl	8002a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2224      	movs	r2, #36	; 0x24
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005892:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fe49 	bl	800652c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	691a      	ldr	r2, [r3, #16]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695a      	ldr	r2, [r3, #20]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b082      	sub	sp, #8
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e021      	b.n	8005940 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2224      	movs	r2, #36	; 0x24
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005912:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7fd f959 	bl	8002bcc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b08a      	sub	sp, #40	; 0x28
 800594c:	af02      	add	r7, sp, #8
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	4613      	mov	r3, r2
 8005956:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b20      	cmp	r3, #32
 8005966:	d17c      	bne.n	8005a62 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <HAL_UART_Transmit+0x2c>
 800596e:	88fb      	ldrh	r3, [r7, #6]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e075      	b.n	8005a64 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_UART_Transmit+0x3e>
 8005982:	2302      	movs	r3, #2
 8005984:	e06e      	b.n	8005a64 <HAL_UART_Transmit+0x11c>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2221      	movs	r2, #33	; 0x21
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800599c:	f7fd fb14 	bl	8002fc8 <HAL_GetTick>
 80059a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	88fa      	ldrh	r2, [r7, #6]
 80059a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	88fa      	ldrh	r2, [r7, #6]
 80059ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b6:	d108      	bne.n	80059ca <HAL_UART_Transmit+0x82>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d104      	bne.n	80059ca <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80059c0:	2300      	movs	r3, #0
 80059c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	61bb      	str	r3, [r7, #24]
 80059c8:	e003      	b.n	80059d2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059ce:	2300      	movs	r3, #0
 80059d0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80059da:	e02a      	b.n	8005a32 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	2200      	movs	r2, #0
 80059e4:	2180      	movs	r1, #128	; 0x80
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 fb5a 	bl	80060a0 <UART_WaitOnFlagUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e036      	b.n	8005a64 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10b      	bne.n	8005a14 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	461a      	mov	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a0a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	3302      	adds	r3, #2
 8005a10:	61bb      	str	r3, [r7, #24]
 8005a12:	e007      	b.n	8005a24 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	781a      	ldrb	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	3301      	adds	r3, #1
 8005a22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1cf      	bne.n	80059dc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2200      	movs	r2, #0
 8005a44:	2140      	movs	r1, #64	; 0x40
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f000 fb2a 	bl	80060a0 <UART_WaitOnFlagUntilTimeout>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e006      	b.n	8005a64 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	e000      	b.n	8005a64 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a62:	2302      	movs	r3, #2
  }
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3720      	adds	r7, #32
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	4613      	mov	r3, r2
 8005a78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b20      	cmp	r3, #32
 8005a84:	d130      	bne.n	8005ae8 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <HAL_UART_Transmit_IT+0x26>
 8005a8c:	88fb      	ldrh	r3, [r7, #6]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e029      	b.n	8005aea <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_UART_Transmit_IT+0x38>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	e022      	b.n	8005aea <HAL_UART_Transmit_IT+0x7e>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	88fa      	ldrh	r2, [r7, #6]
 8005ab6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	88fa      	ldrh	r2, [r7, #6]
 8005abc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2221      	movs	r2, #33	; 0x21
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ae2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	e000      	b.n	8005aea <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005ae8:	2302      	movs	r3, #2
  }
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	4613      	mov	r3, r2
 8005b02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d11d      	bne.n	8005b4c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <HAL_UART_Receive_IT+0x26>
 8005b16:	88fb      	ldrh	r3, [r7, #6]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e016      	b.n	8005b4e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d101      	bne.n	8005b2e <HAL_UART_Receive_IT+0x38>
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	e00f      	b.n	8005b4e <HAL_UART_Receive_IT+0x58>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b3c:	88fb      	ldrh	r3, [r7, #6]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 fb1a 	bl	800617c <UART_Start_Receive_IT>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	e000      	b.n	8005b4e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005b4c:	2302      	movs	r3, #2
  }
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
	...

08005b58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b0ba      	sub	sp, #232	; 0xe8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10f      	bne.n	8005bbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d009      	beq.n	8005bbe <HAL_UART_IRQHandler+0x66>
 8005baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fbfd 	bl	80063b6 <UART_Receive_IT>
      return;
 8005bbc:	e256      	b.n	800606c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005bbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 80de 	beq.w	8005d84 <HAL_UART_IRQHandler+0x22c>
 8005bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d106      	bne.n	8005be2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 80d1 	beq.w	8005d84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00b      	beq.n	8005c06 <HAL_UART_IRQHandler+0xae>
 8005bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d005      	beq.n	8005c06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	f043 0201 	orr.w	r2, r3, #1
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0a:	f003 0304 	and.w	r3, r3, #4
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00b      	beq.n	8005c2a <HAL_UART_IRQHandler+0xd2>
 8005c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d005      	beq.n	8005c2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	f043 0202 	orr.w	r2, r3, #2
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00b      	beq.n	8005c4e <HAL_UART_IRQHandler+0xf6>
 8005c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d005      	beq.n	8005c4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	f043 0204 	orr.w	r2, r3, #4
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c52:	f003 0308 	and.w	r3, r3, #8
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d011      	beq.n	8005c7e <HAL_UART_IRQHandler+0x126>
 8005c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d105      	bne.n	8005c72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d005      	beq.n	8005c7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	f043 0208 	orr.w	r2, r3, #8
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 81ed 	beq.w	8006062 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c8c:	f003 0320 	and.w	r3, r3, #32
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d008      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x14e>
 8005c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c98:	f003 0320 	and.w	r3, r3, #32
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fb88 	bl	80063b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb0:	2b40      	cmp	r3, #64	; 0x40
 8005cb2:	bf0c      	ite	eq
 8005cb4:	2301      	moveq	r3, #1
 8005cb6:	2300      	movne	r3, #0
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	f003 0308 	and.w	r3, r3, #8
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d103      	bne.n	8005cd2 <HAL_UART_IRQHandler+0x17a>
 8005cca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d04f      	beq.n	8005d72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fa90 	bl	80061f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce2:	2b40      	cmp	r3, #64	; 0x40
 8005ce4:	d141      	bne.n	8005d6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3314      	adds	r3, #20
 8005cec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cf4:	e853 3f00 	ldrex	r3, [r3]
 8005cf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3314      	adds	r3, #20
 8005d0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d22:	e841 2300 	strex	r3, r2, [r1]
 8005d26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1d9      	bne.n	8005ce6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d013      	beq.n	8005d62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	4a7d      	ldr	r2, [pc, #500]	; (8005f34 <HAL_UART_IRQHandler+0x3dc>)
 8005d40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fd fb21 	bl	800338e <HAL_DMA_Abort_IT>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d016      	beq.n	8005d80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d60:	e00e      	b.n	8005d80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7fc fb66 	bl	8002434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d68:	e00a      	b.n	8005d80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7fc fb62 	bl	8002434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d70:	e006      	b.n	8005d80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7fc fb5e 	bl	8002434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005d7e:	e170      	b.n	8006062 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d80:	bf00      	nop
    return;
 8005d82:	e16e      	b.n	8006062 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	f040 814a 	bne.w	8006022 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d92:	f003 0310 	and.w	r3, r3, #16
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 8143 	beq.w	8006022 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da0:	f003 0310 	and.w	r3, r3, #16
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 813c 	beq.w	8006022 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005daa:	2300      	movs	r3, #0
 8005dac:	60bb      	str	r3, [r7, #8]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	60bb      	str	r3, [r7, #8]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	60bb      	str	r3, [r7, #8]
 8005dbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dca:	2b40      	cmp	r3, #64	; 0x40
 8005dcc:	f040 80b4 	bne.w	8005f38 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ddc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 8140 	beq.w	8006066 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dee:	429a      	cmp	r2, r3
 8005df0:	f080 8139 	bcs.w	8006066 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dfa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e06:	f000 8088 	beq.w	8005f1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	330c      	adds	r3, #12
 8005e10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e18:	e853 3f00 	ldrex	r3, [r3]
 8005e1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	330c      	adds	r3, #12
 8005e32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e46:	e841 2300 	strex	r3, r2, [r1]
 8005e4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1d9      	bne.n	8005e0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	3314      	adds	r3, #20
 8005e5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e60:	e853 3f00 	ldrex	r3, [r3]
 8005e64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e68:	f023 0301 	bic.w	r3, r3, #1
 8005e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3314      	adds	r3, #20
 8005e76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e86:	e841 2300 	strex	r3, r2, [r1]
 8005e8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1e1      	bne.n	8005e56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3314      	adds	r3, #20
 8005e98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3314      	adds	r3, #20
 8005eb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005eb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005eb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ebc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e3      	bne.n	8005e92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	330c      	adds	r3, #12
 8005ede:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ee2:	e853 3f00 	ldrex	r3, [r3]
 8005ee6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eea:	f023 0310 	bic.w	r3, r3, #16
 8005eee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	330c      	adds	r3, #12
 8005ef8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005efc:	65ba      	str	r2, [r7, #88]	; 0x58
 8005efe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f04:	e841 2300 	strex	r3, r2, [r1]
 8005f08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1e3      	bne.n	8005ed8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fd f9ca 	bl	80032ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	4619      	mov	r1, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f8ac 	bl	8006088 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f30:	e099      	b.n	8006066 <HAL_UART_IRQHandler+0x50e>
 8005f32:	bf00      	nop
 8005f34:	080062bf 	.word	0x080062bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 808b 	beq.w	800606a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005f54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 8086 	beq.w	800606a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	330c      	adds	r3, #12
 8005f64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	e853 3f00 	ldrex	r3, [r3]
 8005f6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	330c      	adds	r3, #12
 8005f7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f82:	647a      	str	r2, [r7, #68]	; 0x44
 8005f84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f8a:	e841 2300 	strex	r3, r2, [r1]
 8005f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1e3      	bne.n	8005f5e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3314      	adds	r3, #20
 8005f9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	e853 3f00 	ldrex	r3, [r3]
 8005fa4:	623b      	str	r3, [r7, #32]
   return(result);
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	f023 0301 	bic.w	r3, r3, #1
 8005fac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3314      	adds	r3, #20
 8005fb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fba:	633a      	str	r2, [r7, #48]	; 0x30
 8005fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e3      	bne.n	8005f96 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	330c      	adds	r3, #12
 8005fe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	e853 3f00 	ldrex	r3, [r3]
 8005fea:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 0310 	bic.w	r3, r3, #16
 8005ff2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	330c      	adds	r3, #12
 8005ffc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006000:	61fa      	str	r2, [r7, #28]
 8006002:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	69b9      	ldr	r1, [r7, #24]
 8006006:	69fa      	ldr	r2, [r7, #28]
 8006008:	e841 2300 	strex	r3, r2, [r1]
 800600c:	617b      	str	r3, [r7, #20]
   return(result);
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e3      	bne.n	8005fdc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006014:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006018:	4619      	mov	r1, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f834 	bl	8006088 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006020:	e023      	b.n	800606a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602a:	2b00      	cmp	r3, #0
 800602c:	d009      	beq.n	8006042 <HAL_UART_IRQHandler+0x4ea>
 800602e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f953 	bl	80062e6 <UART_Transmit_IT>
    return;
 8006040:	e014      	b.n	800606c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00e      	beq.n	800606c <HAL_UART_IRQHandler+0x514>
 800604e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006056:	2b00      	cmp	r3, #0
 8006058:	d008      	beq.n	800606c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f993 	bl	8006386 <UART_EndTransmit_IT>
    return;
 8006060:	e004      	b.n	800606c <HAL_UART_IRQHandler+0x514>
    return;
 8006062:	bf00      	nop
 8006064:	e002      	b.n	800606c <HAL_UART_IRQHandler+0x514>
      return;
 8006066:	bf00      	nop
 8006068:	e000      	b.n	800606c <HAL_UART_IRQHandler+0x514>
      return;
 800606a:	bf00      	nop
  }
}
 800606c:	37e8      	adds	r7, #232	; 0xe8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop

08006074 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b090      	sub	sp, #64	; 0x40
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	603b      	str	r3, [r7, #0]
 80060ac:	4613      	mov	r3, r2
 80060ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060b0:	e050      	b.n	8006154 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b8:	d04c      	beq.n	8006154 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80060ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d007      	beq.n	80060d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80060c0:	f7fc ff82 	bl	8002fc8 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d241      	bcs.n	8006154 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	330c      	adds	r3, #12
 80060d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060da:	e853 3f00 	ldrex	r3, [r3]
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	330c      	adds	r3, #12
 80060ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060f0:	637a      	str	r2, [r7, #52]	; 0x34
 80060f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060f8:	e841 2300 	strex	r3, r2, [r1]
 80060fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1e5      	bne.n	80060d0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3314      	adds	r3, #20
 800610a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	e853 3f00 	ldrex	r3, [r3]
 8006112:	613b      	str	r3, [r7, #16]
   return(result);
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f023 0301 	bic.w	r3, r3, #1
 800611a:	63bb      	str	r3, [r7, #56]	; 0x38
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3314      	adds	r3, #20
 8006122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006124:	623a      	str	r2, [r7, #32]
 8006126:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	69f9      	ldr	r1, [r7, #28]
 800612a:	6a3a      	ldr	r2, [r7, #32]
 800612c:	e841 2300 	strex	r3, r2, [r1]
 8006130:	61bb      	str	r3, [r7, #24]
   return(result);
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e5      	bne.n	8006104 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2220      	movs	r2, #32
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2220      	movs	r2, #32
 8006144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e00f      	b.n	8006174 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	4013      	ands	r3, r2
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	429a      	cmp	r2, r3
 8006162:	bf0c      	ite	eq
 8006164:	2301      	moveq	r3, #1
 8006166:	2300      	movne	r3, #0
 8006168:	b2db      	uxtb	r3, r3
 800616a:	461a      	mov	r2, r3
 800616c:	79fb      	ldrb	r3, [r7, #7]
 800616e:	429a      	cmp	r2, r3
 8006170:	d09f      	beq.n	80060b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3740      	adds	r7, #64	; 0x40
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	4613      	mov	r3, r2
 8006188:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	88fa      	ldrh	r2, [r7, #6]
 8006194:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	88fa      	ldrh	r2, [r7, #6]
 800619a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2222      	movs	r2, #34	; 0x22
 80061a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d007      	beq.n	80061ca <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68da      	ldr	r2, [r3, #12]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061c8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	695a      	ldr	r2, [r3, #20]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0201 	orr.w	r2, r2, #1
 80061d8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f042 0220 	orr.w	r2, r2, #32
 80061e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b095      	sub	sp, #84	; 0x54
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	330c      	adds	r3, #12
 8006206:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620a:	e853 3f00 	ldrex	r3, [r3]
 800620e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006212:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006216:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	330c      	adds	r3, #12
 800621e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006220:	643a      	str	r2, [r7, #64]	; 0x40
 8006222:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006224:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006226:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006228:	e841 2300 	strex	r3, r2, [r1]
 800622c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800622e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1e5      	bne.n	8006200 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3314      	adds	r3, #20
 800623a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	6a3b      	ldr	r3, [r7, #32]
 800623e:	e853 3f00 	ldrex	r3, [r3]
 8006242:	61fb      	str	r3, [r7, #28]
   return(result);
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	f023 0301 	bic.w	r3, r3, #1
 800624a:	64bb      	str	r3, [r7, #72]	; 0x48
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3314      	adds	r3, #20
 8006252:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006254:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006256:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800625a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e5      	bne.n	8006234 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626c:	2b01      	cmp	r3, #1
 800626e:	d119      	bne.n	80062a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	330c      	adds	r3, #12
 8006276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	e853 3f00 	ldrex	r3, [r3]
 800627e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f023 0310 	bic.w	r3, r3, #16
 8006286:	647b      	str	r3, [r7, #68]	; 0x44
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	330c      	adds	r3, #12
 800628e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006290:	61ba      	str	r2, [r7, #24]
 8006292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006294:	6979      	ldr	r1, [r7, #20]
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	e841 2300 	strex	r3, r2, [r1]
 800629c:	613b      	str	r3, [r7, #16]
   return(result);
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1e5      	bne.n	8006270 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062b2:	bf00      	nop
 80062b4:	3754      	adds	r7, #84	; 0x54
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f7fc f8ab 	bl	8002434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062de:	bf00      	nop
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b085      	sub	sp, #20
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b21      	cmp	r3, #33	; 0x21
 80062f8:	d13e      	bne.n	8006378 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006302:	d114      	bne.n	800632e <UART_Transmit_IT+0x48>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d110      	bne.n	800632e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006320:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	1c9a      	adds	r2, r3, #2
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	621a      	str	r2, [r3, #32]
 800632c:	e008      	b.n	8006340 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	1c59      	adds	r1, r3, #1
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	6211      	str	r1, [r2, #32]
 8006338:	781a      	ldrb	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006344:	b29b      	uxth	r3, r3
 8006346:	3b01      	subs	r3, #1
 8006348:	b29b      	uxth	r3, r3
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	4619      	mov	r1, r3
 800634e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10f      	bne.n	8006374 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006362:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68da      	ldr	r2, [r3, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006372:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	e000      	b.n	800637a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006378:	2302      	movs	r3, #2
  }
}
 800637a:	4618      	mov	r0, r3
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800639c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7ff fe64 	bl	8006074 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b08c      	sub	sp, #48	; 0x30
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b22      	cmp	r3, #34	; 0x22
 80063c8:	f040 80ab 	bne.w	8006522 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d4:	d117      	bne.n	8006406 <UART_Receive_IT+0x50>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d113      	bne.n	8006406 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063de:	2300      	movs	r3, #0
 80063e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fe:	1c9a      	adds	r2, r3, #2
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	629a      	str	r2, [r3, #40]	; 0x28
 8006404:	e026      	b.n	8006454 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800640c:	2300      	movs	r3, #0
 800640e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006418:	d007      	beq.n	800642a <UART_Receive_IT+0x74>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10a      	bne.n	8006438 <UART_Receive_IT+0x82>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d106      	bne.n	8006438 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	b2da      	uxtb	r2, r3
 8006432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006434:	701a      	strb	r2, [r3, #0]
 8006436:	e008      	b.n	800644a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	b2db      	uxtb	r3, r3
 8006440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006444:	b2da      	uxtb	r2, r3
 8006446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006448:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006458:	b29b      	uxth	r3, r3
 800645a:	3b01      	subs	r3, #1
 800645c:	b29b      	uxth	r3, r3
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	4619      	mov	r1, r3
 8006462:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006464:	2b00      	cmp	r3, #0
 8006466:	d15a      	bne.n	800651e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0220 	bic.w	r2, r2, #32
 8006476:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68da      	ldr	r2, [r3, #12]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006486:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	695a      	ldr	r2, [r3, #20]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0201 	bic.w	r2, r2, #1
 8006496:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2220      	movs	r2, #32
 800649c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d135      	bne.n	8006514 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	330c      	adds	r3, #12
 80064b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	613b      	str	r3, [r7, #16]
   return(result);
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f023 0310 	bic.w	r3, r3, #16
 80064c4:	627b      	str	r3, [r7, #36]	; 0x24
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	330c      	adds	r3, #12
 80064cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ce:	623a      	str	r2, [r7, #32]
 80064d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	69f9      	ldr	r1, [r7, #28]
 80064d4:	6a3a      	ldr	r2, [r7, #32]
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	61bb      	str	r3, [r7, #24]
   return(result);
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e5      	bne.n	80064ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0310 	and.w	r3, r3, #16
 80064ec:	2b10      	cmp	r3, #16
 80064ee:	d10a      	bne.n	8006506 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064f0:	2300      	movs	r3, #0
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff fdbb 	bl	8006088 <HAL_UARTEx_RxEventCallback>
 8006512:	e002      	b.n	800651a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7fb ffe1 	bl	80024dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	e002      	b.n	8006524 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	e000      	b.n	8006524 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006522:	2302      	movs	r3, #2
  }
}
 8006524:	4618      	mov	r0, r3
 8006526:	3730      	adds	r7, #48	; 0x30
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800652c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006530:	b0c0      	sub	sp, #256	; 0x100
 8006532:	af00      	add	r7, sp, #0
 8006534:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006548:	68d9      	ldr	r1, [r3, #12]
 800654a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	ea40 0301 	orr.w	r3, r0, r1
 8006554:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	431a      	orrs	r2, r3
 8006564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	431a      	orrs	r2, r3
 800656c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	4313      	orrs	r3, r2
 8006574:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006584:	f021 010c 	bic.w	r1, r1, #12
 8006588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006592:	430b      	orrs	r3, r1
 8006594:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a6:	6999      	ldr	r1, [r3, #24]
 80065a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	ea40 0301 	orr.w	r3, r0, r1
 80065b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	4b8f      	ldr	r3, [pc, #572]	; (80067f8 <UART_SetConfig+0x2cc>)
 80065bc:	429a      	cmp	r2, r3
 80065be:	d005      	beq.n	80065cc <UART_SetConfig+0xa0>
 80065c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	4b8d      	ldr	r3, [pc, #564]	; (80067fc <UART_SetConfig+0x2d0>)
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d104      	bne.n	80065d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065cc:	f7fd fde2 	bl	8004194 <HAL_RCC_GetPCLK2Freq>
 80065d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80065d4:	e003      	b.n	80065de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065d6:	f7fd fdc9 	bl	800416c <HAL_RCC_GetPCLK1Freq>
 80065da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065e8:	f040 810c 	bne.w	8006804 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065f0:	2200      	movs	r2, #0
 80065f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80065fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80065fe:	4622      	mov	r2, r4
 8006600:	462b      	mov	r3, r5
 8006602:	1891      	adds	r1, r2, r2
 8006604:	65b9      	str	r1, [r7, #88]	; 0x58
 8006606:	415b      	adcs	r3, r3
 8006608:	65fb      	str	r3, [r7, #92]	; 0x5c
 800660a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800660e:	4621      	mov	r1, r4
 8006610:	eb12 0801 	adds.w	r8, r2, r1
 8006614:	4629      	mov	r1, r5
 8006616:	eb43 0901 	adc.w	r9, r3, r1
 800661a:	f04f 0200 	mov.w	r2, #0
 800661e:	f04f 0300 	mov.w	r3, #0
 8006622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800662a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800662e:	4690      	mov	r8, r2
 8006630:	4699      	mov	r9, r3
 8006632:	4623      	mov	r3, r4
 8006634:	eb18 0303 	adds.w	r3, r8, r3
 8006638:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800663c:	462b      	mov	r3, r5
 800663e:	eb49 0303 	adc.w	r3, r9, r3
 8006642:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006652:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006656:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800665a:	460b      	mov	r3, r1
 800665c:	18db      	adds	r3, r3, r3
 800665e:	653b      	str	r3, [r7, #80]	; 0x50
 8006660:	4613      	mov	r3, r2
 8006662:	eb42 0303 	adc.w	r3, r2, r3
 8006666:	657b      	str	r3, [r7, #84]	; 0x54
 8006668:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800666c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006670:	f7f9 fe1e 	bl	80002b0 <__aeabi_uldivmod>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	4b61      	ldr	r3, [pc, #388]	; (8006800 <UART_SetConfig+0x2d4>)
 800667a:	fba3 2302 	umull	r2, r3, r3, r2
 800667e:	095b      	lsrs	r3, r3, #5
 8006680:	011c      	lsls	r4, r3, #4
 8006682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006686:	2200      	movs	r2, #0
 8006688:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800668c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006690:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006694:	4642      	mov	r2, r8
 8006696:	464b      	mov	r3, r9
 8006698:	1891      	adds	r1, r2, r2
 800669a:	64b9      	str	r1, [r7, #72]	; 0x48
 800669c:	415b      	adcs	r3, r3
 800669e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066a4:	4641      	mov	r1, r8
 80066a6:	eb12 0a01 	adds.w	sl, r2, r1
 80066aa:	4649      	mov	r1, r9
 80066ac:	eb43 0b01 	adc.w	fp, r3, r1
 80066b0:	f04f 0200 	mov.w	r2, #0
 80066b4:	f04f 0300 	mov.w	r3, #0
 80066b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066c4:	4692      	mov	sl, r2
 80066c6:	469b      	mov	fp, r3
 80066c8:	4643      	mov	r3, r8
 80066ca:	eb1a 0303 	adds.w	r3, sl, r3
 80066ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066d2:	464b      	mov	r3, r9
 80066d4:	eb4b 0303 	adc.w	r3, fp, r3
 80066d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80066dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80066ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80066f0:	460b      	mov	r3, r1
 80066f2:	18db      	adds	r3, r3, r3
 80066f4:	643b      	str	r3, [r7, #64]	; 0x40
 80066f6:	4613      	mov	r3, r2
 80066f8:	eb42 0303 	adc.w	r3, r2, r3
 80066fc:	647b      	str	r3, [r7, #68]	; 0x44
 80066fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006702:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006706:	f7f9 fdd3 	bl	80002b0 <__aeabi_uldivmod>
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	4611      	mov	r1, r2
 8006710:	4b3b      	ldr	r3, [pc, #236]	; (8006800 <UART_SetConfig+0x2d4>)
 8006712:	fba3 2301 	umull	r2, r3, r3, r1
 8006716:	095b      	lsrs	r3, r3, #5
 8006718:	2264      	movs	r2, #100	; 0x64
 800671a:	fb02 f303 	mul.w	r3, r2, r3
 800671e:	1acb      	subs	r3, r1, r3
 8006720:	00db      	lsls	r3, r3, #3
 8006722:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006726:	4b36      	ldr	r3, [pc, #216]	; (8006800 <UART_SetConfig+0x2d4>)
 8006728:	fba3 2302 	umull	r2, r3, r3, r2
 800672c:	095b      	lsrs	r3, r3, #5
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006734:	441c      	add	r4, r3
 8006736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800673a:	2200      	movs	r2, #0
 800673c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006740:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006744:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006748:	4642      	mov	r2, r8
 800674a:	464b      	mov	r3, r9
 800674c:	1891      	adds	r1, r2, r2
 800674e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006750:	415b      	adcs	r3, r3
 8006752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006754:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006758:	4641      	mov	r1, r8
 800675a:	1851      	adds	r1, r2, r1
 800675c:	6339      	str	r1, [r7, #48]	; 0x30
 800675e:	4649      	mov	r1, r9
 8006760:	414b      	adcs	r3, r1
 8006762:	637b      	str	r3, [r7, #52]	; 0x34
 8006764:	f04f 0200 	mov.w	r2, #0
 8006768:	f04f 0300 	mov.w	r3, #0
 800676c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006770:	4659      	mov	r1, fp
 8006772:	00cb      	lsls	r3, r1, #3
 8006774:	4651      	mov	r1, sl
 8006776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800677a:	4651      	mov	r1, sl
 800677c:	00ca      	lsls	r2, r1, #3
 800677e:	4610      	mov	r0, r2
 8006780:	4619      	mov	r1, r3
 8006782:	4603      	mov	r3, r0
 8006784:	4642      	mov	r2, r8
 8006786:	189b      	adds	r3, r3, r2
 8006788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800678c:	464b      	mov	r3, r9
 800678e:	460a      	mov	r2, r1
 8006790:	eb42 0303 	adc.w	r3, r2, r3
 8006794:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80067a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80067ac:	460b      	mov	r3, r1
 80067ae:	18db      	adds	r3, r3, r3
 80067b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80067b2:	4613      	mov	r3, r2
 80067b4:	eb42 0303 	adc.w	r3, r2, r3
 80067b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80067c2:	f7f9 fd75 	bl	80002b0 <__aeabi_uldivmod>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	4b0d      	ldr	r3, [pc, #52]	; (8006800 <UART_SetConfig+0x2d4>)
 80067cc:	fba3 1302 	umull	r1, r3, r3, r2
 80067d0:	095b      	lsrs	r3, r3, #5
 80067d2:	2164      	movs	r1, #100	; 0x64
 80067d4:	fb01 f303 	mul.w	r3, r1, r3
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	00db      	lsls	r3, r3, #3
 80067dc:	3332      	adds	r3, #50	; 0x32
 80067de:	4a08      	ldr	r2, [pc, #32]	; (8006800 <UART_SetConfig+0x2d4>)
 80067e0:	fba2 2303 	umull	r2, r3, r2, r3
 80067e4:	095b      	lsrs	r3, r3, #5
 80067e6:	f003 0207 	and.w	r2, r3, #7
 80067ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4422      	add	r2, r4
 80067f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067f4:	e106      	b.n	8006a04 <UART_SetConfig+0x4d8>
 80067f6:	bf00      	nop
 80067f8:	40011000 	.word	0x40011000
 80067fc:	40011400 	.word	0x40011400
 8006800:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006808:	2200      	movs	r2, #0
 800680a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800680e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006812:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006816:	4642      	mov	r2, r8
 8006818:	464b      	mov	r3, r9
 800681a:	1891      	adds	r1, r2, r2
 800681c:	6239      	str	r1, [r7, #32]
 800681e:	415b      	adcs	r3, r3
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
 8006822:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006826:	4641      	mov	r1, r8
 8006828:	1854      	adds	r4, r2, r1
 800682a:	4649      	mov	r1, r9
 800682c:	eb43 0501 	adc.w	r5, r3, r1
 8006830:	f04f 0200 	mov.w	r2, #0
 8006834:	f04f 0300 	mov.w	r3, #0
 8006838:	00eb      	lsls	r3, r5, #3
 800683a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800683e:	00e2      	lsls	r2, r4, #3
 8006840:	4614      	mov	r4, r2
 8006842:	461d      	mov	r5, r3
 8006844:	4643      	mov	r3, r8
 8006846:	18e3      	adds	r3, r4, r3
 8006848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800684c:	464b      	mov	r3, r9
 800684e:	eb45 0303 	adc.w	r3, r5, r3
 8006852:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006862:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006866:	f04f 0200 	mov.w	r2, #0
 800686a:	f04f 0300 	mov.w	r3, #0
 800686e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006872:	4629      	mov	r1, r5
 8006874:	008b      	lsls	r3, r1, #2
 8006876:	4621      	mov	r1, r4
 8006878:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800687c:	4621      	mov	r1, r4
 800687e:	008a      	lsls	r2, r1, #2
 8006880:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006884:	f7f9 fd14 	bl	80002b0 <__aeabi_uldivmod>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	4b60      	ldr	r3, [pc, #384]	; (8006a10 <UART_SetConfig+0x4e4>)
 800688e:	fba3 2302 	umull	r2, r3, r3, r2
 8006892:	095b      	lsrs	r3, r3, #5
 8006894:	011c      	lsls	r4, r3, #4
 8006896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800689a:	2200      	movs	r2, #0
 800689c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80068a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80068a8:	4642      	mov	r2, r8
 80068aa:	464b      	mov	r3, r9
 80068ac:	1891      	adds	r1, r2, r2
 80068ae:	61b9      	str	r1, [r7, #24]
 80068b0:	415b      	adcs	r3, r3
 80068b2:	61fb      	str	r3, [r7, #28]
 80068b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068b8:	4641      	mov	r1, r8
 80068ba:	1851      	adds	r1, r2, r1
 80068bc:	6139      	str	r1, [r7, #16]
 80068be:	4649      	mov	r1, r9
 80068c0:	414b      	adcs	r3, r1
 80068c2:	617b      	str	r3, [r7, #20]
 80068c4:	f04f 0200 	mov.w	r2, #0
 80068c8:	f04f 0300 	mov.w	r3, #0
 80068cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068d0:	4659      	mov	r1, fp
 80068d2:	00cb      	lsls	r3, r1, #3
 80068d4:	4651      	mov	r1, sl
 80068d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068da:	4651      	mov	r1, sl
 80068dc:	00ca      	lsls	r2, r1, #3
 80068de:	4610      	mov	r0, r2
 80068e0:	4619      	mov	r1, r3
 80068e2:	4603      	mov	r3, r0
 80068e4:	4642      	mov	r2, r8
 80068e6:	189b      	adds	r3, r3, r2
 80068e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068ec:	464b      	mov	r3, r9
 80068ee:	460a      	mov	r2, r1
 80068f0:	eb42 0303 	adc.w	r3, r2, r3
 80068f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	67bb      	str	r3, [r7, #120]	; 0x78
 8006902:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006904:	f04f 0200 	mov.w	r2, #0
 8006908:	f04f 0300 	mov.w	r3, #0
 800690c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006910:	4649      	mov	r1, r9
 8006912:	008b      	lsls	r3, r1, #2
 8006914:	4641      	mov	r1, r8
 8006916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800691a:	4641      	mov	r1, r8
 800691c:	008a      	lsls	r2, r1, #2
 800691e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006922:	f7f9 fcc5 	bl	80002b0 <__aeabi_uldivmod>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	4611      	mov	r1, r2
 800692c:	4b38      	ldr	r3, [pc, #224]	; (8006a10 <UART_SetConfig+0x4e4>)
 800692e:	fba3 2301 	umull	r2, r3, r3, r1
 8006932:	095b      	lsrs	r3, r3, #5
 8006934:	2264      	movs	r2, #100	; 0x64
 8006936:	fb02 f303 	mul.w	r3, r2, r3
 800693a:	1acb      	subs	r3, r1, r3
 800693c:	011b      	lsls	r3, r3, #4
 800693e:	3332      	adds	r3, #50	; 0x32
 8006940:	4a33      	ldr	r2, [pc, #204]	; (8006a10 <UART_SetConfig+0x4e4>)
 8006942:	fba2 2303 	umull	r2, r3, r2, r3
 8006946:	095b      	lsrs	r3, r3, #5
 8006948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800694c:	441c      	add	r4, r3
 800694e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006952:	2200      	movs	r2, #0
 8006954:	673b      	str	r3, [r7, #112]	; 0x70
 8006956:	677a      	str	r2, [r7, #116]	; 0x74
 8006958:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800695c:	4642      	mov	r2, r8
 800695e:	464b      	mov	r3, r9
 8006960:	1891      	adds	r1, r2, r2
 8006962:	60b9      	str	r1, [r7, #8]
 8006964:	415b      	adcs	r3, r3
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800696c:	4641      	mov	r1, r8
 800696e:	1851      	adds	r1, r2, r1
 8006970:	6039      	str	r1, [r7, #0]
 8006972:	4649      	mov	r1, r9
 8006974:	414b      	adcs	r3, r1
 8006976:	607b      	str	r3, [r7, #4]
 8006978:	f04f 0200 	mov.w	r2, #0
 800697c:	f04f 0300 	mov.w	r3, #0
 8006980:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006984:	4659      	mov	r1, fp
 8006986:	00cb      	lsls	r3, r1, #3
 8006988:	4651      	mov	r1, sl
 800698a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800698e:	4651      	mov	r1, sl
 8006990:	00ca      	lsls	r2, r1, #3
 8006992:	4610      	mov	r0, r2
 8006994:	4619      	mov	r1, r3
 8006996:	4603      	mov	r3, r0
 8006998:	4642      	mov	r2, r8
 800699a:	189b      	adds	r3, r3, r2
 800699c:	66bb      	str	r3, [r7, #104]	; 0x68
 800699e:	464b      	mov	r3, r9
 80069a0:	460a      	mov	r2, r1
 80069a2:	eb42 0303 	adc.w	r3, r2, r3
 80069a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	663b      	str	r3, [r7, #96]	; 0x60
 80069b2:	667a      	str	r2, [r7, #100]	; 0x64
 80069b4:	f04f 0200 	mov.w	r2, #0
 80069b8:	f04f 0300 	mov.w	r3, #0
 80069bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80069c0:	4649      	mov	r1, r9
 80069c2:	008b      	lsls	r3, r1, #2
 80069c4:	4641      	mov	r1, r8
 80069c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069ca:	4641      	mov	r1, r8
 80069cc:	008a      	lsls	r2, r1, #2
 80069ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80069d2:	f7f9 fc6d 	bl	80002b0 <__aeabi_uldivmod>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	4b0d      	ldr	r3, [pc, #52]	; (8006a10 <UART_SetConfig+0x4e4>)
 80069dc:	fba3 1302 	umull	r1, r3, r3, r2
 80069e0:	095b      	lsrs	r3, r3, #5
 80069e2:	2164      	movs	r1, #100	; 0x64
 80069e4:	fb01 f303 	mul.w	r3, r1, r3
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	011b      	lsls	r3, r3, #4
 80069ec:	3332      	adds	r3, #50	; 0x32
 80069ee:	4a08      	ldr	r2, [pc, #32]	; (8006a10 <UART_SetConfig+0x4e4>)
 80069f0:	fba2 2303 	umull	r2, r3, r2, r3
 80069f4:	095b      	lsrs	r3, r3, #5
 80069f6:	f003 020f 	and.w	r2, r3, #15
 80069fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4422      	add	r2, r4
 8006a02:	609a      	str	r2, [r3, #8]
}
 8006a04:	bf00      	nop
 8006a06:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a10:	51eb851f 	.word	0x51eb851f

08006a14 <NOP>:
    HAL_Delay(2000);											//Tiempo de reset del módulo
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
}
void NOP(struct WIFI *a)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=0;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <MUX>:
void MUX(struct WIFI *a)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2204      	movs	r2, #4
 8006aa4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <IPDef>:
void IPDef(struct WIFI *a)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2205      	movs	r2, #5
 8006ad0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2206      	movs	r2, #6
 8006b28:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2208      	movs	r2, #8
 8006b54:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2209      	movs	r2, #9
 8006b80:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2207      	movs	r2, #7
 8006bac:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <Inicializar>:
void Inicializar(struct WIFI *a)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
a->_data2SND[64]='\0';			//Data a enviar por TCP
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2a94 	strb.w	r2, [r3, #2708]	; 0xa94
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_instruccion=0;				//Funcion que se desea realizar
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_ejecucion=0;				//Funcion en ejecucion	
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2af4 	strb.w	r2, [r3, #2804]	; 0xaf4
a->_ticks=0;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
a->_ticks2=0;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_debug=0;					//utilizada par fines de debugging
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug_str=0;				//utilizada par fines de debugging
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_debug_pos=0;				//utilizada par fines de debugging
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_chrs=0;				//utilizada par fines de debugging
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_rx_ok=0;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_rx_no_ok=0;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_SEND_OK=0;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_CLOSED=0;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_debug_WF_DISCONNECT=0;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_FAIL=0;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_CONNECT=0;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count=0;				//Cuento la catidad de ipds	
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
a->_debug_count_old=0;			//Cuento la catidad de ipds
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
a->_debug_count2=0;				//SEND OK para enviar datos
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count4=0;				//SEDN OK recibido directo
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count5=0;				//Cuento la catidad de ipds	
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count6=0;				//Cuento la catidad de ipds	
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count7=0;				//Cuento la catidad de ipds
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count8=0;				//Cuento la catidad de ipds
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count9=0;				//Cuento la catidad de ipds
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count10=0;			//Cuento la catidad de ipds
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_subpaso=0;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 8006d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d62:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006d66:	af06      	add	r7, sp, #24
 8006d68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d70:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 8006d72:	2300      	movs	r3, #0
 8006d74:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8006d84:	2300      	movs	r3, #0
 8006d86:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 8006d90:	2320      	movs	r3, #32
 8006d92:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 8006d96:	2322      	movs	r3, #34	; 0x22
 8006d98:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 8006d9c:	4b71      	ldr	r3, [pc, #452]	; (8006f64 <AT_ESP8266_ND+0x204>)
 8006d9e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 8006da2:	4a71      	ldr	r2, [pc, #452]	; (8006f68 <AT_ESP8266_ND+0x208>)
 8006da4:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8006da8:	6812      	ldr	r2, [r2, #0]
 8006daa:	4611      	mov	r1, r2
 8006dac:	8019      	strh	r1, [r3, #0]
 8006dae:	3302      	adds	r3, #2
 8006db0:	0c12      	lsrs	r2, r2, #16
 8006db2:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 8006db4:	f642 4322 	movw	r3, #11298	; 0x2c22
 8006db8:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 8006dbc:	f640 230d 	movw	r3, #2573	; 0xa0d
 8006dc0:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8006dca:	2300      	movs	r3, #0
 8006dcc:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 8006dd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 8006de0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006de4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7f9 fa00 	bl	80001f4 <strlen>
 8006df4:	4603      	mov	r3, r0
 8006df6:	461a      	mov	r2, r3
 8006df8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 8006e06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 8006e16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7f9 f9e5 	bl	80001f4 <strlen>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 8006e3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2206      	movs	r2, #6
 8006e48:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006e4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006e5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006e68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006e76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006e84:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006e88:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006e8c:	6812      	ldr	r2, [r2, #0]
 8006e8e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006e92:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006e96:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006e9a:	6809      	ldr	r1, [r1, #0]
 8006e9c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006ea0:	2600      	movs	r6, #0
 8006ea2:	9604      	str	r6, [sp, #16]
 8006ea4:	9103      	str	r1, [sp, #12]
 8006ea6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006eaa:	9102      	str	r1, [sp, #8]
 8006eac:	9201      	str	r2, [sp, #4]
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	462b      	mov	r3, r5
 8006eb2:	4a2e      	ldr	r2, [pc, #184]	; (8006f6c <AT_ESP8266_ND+0x20c>)
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	f007 fc75 	bl	800e7a4 <FT_String_ND>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	f040 812a 	bne.w	8007116 <AT_ESP8266_ND+0x3b6>
	 {

	 	a->_n_fcomp=strlen("\r\n+IPD");
 8006ec2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ec6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2206      	movs	r2, #6
 8006ece:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 	//a->_estado_data=0;

	 	if(a->_TCP_Local_Server_EN==0)
 8006ed2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ed6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d145      	bne.n	8006f70 <AT_ESP8266_ND+0x210>
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATA);
 8006ee4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ee8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006ef2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ef6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006f00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006f0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006f1c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f20:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f24:	6812      	ldr	r2, [r2, #0]
 8006f26:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006f2a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f2e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f32:	6809      	ldr	r1, [r1, #0]
 8006f34:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006f38:	2604      	movs	r6, #4
 8006f3a:	9604      	str	r6, [sp, #16]
 8006f3c:	9103      	str	r1, [sp, #12]
 8006f3e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f42:	9102      	str	r1, [sp, #8]
 8006f44:	9201      	str	r2, [sp, #4]
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	462b      	mov	r3, r5
 8006f4a:	4a08      	ldr	r2, [pc, #32]	; (8006f6c <AT_ESP8266_ND+0x20c>)
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	f007 fc29 	bl	800e7a4 <FT_String_ND>
 8006f52:	4602      	mov	r2, r0
 8006f54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
 8006f62:	e044      	b.n	8006fee <AT_ESP8266_ND+0x28e>
 8006f64:	00222c22 	.word	0x00222c22
 8006f68:	08010964 	.word	0x08010964
 8006f6c:	0801078c 	.word	0x0801078c
	 	}
	 	else
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATASRVR);
 8006f70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006f7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006f8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006f9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006fa8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006fac:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006fb0:	6812      	ldr	r2, [r2, #0]
 8006fb2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006fb6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006fba:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006fbe:	6809      	ldr	r1, [r1, #0]
 8006fc0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006fc4:	2605      	movs	r6, #5
 8006fc6:	9604      	str	r6, [sp, #16]
 8006fc8:	9103      	str	r1, [sp, #12]
 8006fca:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006fce:	9102      	str	r1, [sp, #8]
 8006fd0:	9201      	str	r2, [sp, #4]
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	462b      	mov	r3, r5
 8006fd6:	4ac1      	ldr	r2, [pc, #772]	; (80072dc <AT_ESP8266_ND+0x57c>)
 8006fd8:	4621      	mov	r1, r4
 8006fda:	f007 fbe3 	bl	800e7a4 <FT_String_ND>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fe4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	 	}

	 	if(a->_estado_data==4)
 8006fee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ff2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d15a      	bne.n	80070b6 <AT_ESP8266_ND+0x356>
	 	{
	 		a->_estado_rcv_data=99;
 8007000:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007004:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2263      	movs	r2, #99	; 0x63
 800700c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=a->_n_tok;
 8007010:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007014:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 800701e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007022:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 800702c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007030:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f103 0094 	add.w	r0, r3, #148	; 0x94
 800703a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800703e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8007048:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800704c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8007056:	2341      	movs	r3, #65	; 0x41
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	2300      	movs	r3, #0
 800705c:	f007 ff08 	bl	800ee70 <CopiaVector>
	 		CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8007060:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007064:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f503 7025 	add.w	r0, r3, #660	; 0x294
 800706e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007072:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f603 0194 	addw	r1, r3, #2196	; 0x894
 800707c:	2341      	movs	r3, #65	; 0x41
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	2300      	movs	r3, #0
 8007082:	2205      	movs	r2, #5
 8007084:	f007 fef4 	bl	800ee70 <CopiaVector>

	 		a->_debug_rx_ok++;
 8007088:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800708c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8007096:	1c5a      	adds	r2, r3, #1
 8007098:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800709c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
	 		a->_new_data_rcv=1;
 80070a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 	}
	 	if(a->_estado_data==5)
 80070b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 80070c4:	2b05      	cmp	r3, #5
 80070c6:	d126      	bne.n	8007116 <AT_ESP8266_ND+0x3b6>
	 	{
	 		a->_estado_rcv_data=55;
 80070c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2237      	movs	r2, #55	; 0x37
 80070d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=0;
 80070d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		a->_debug_rx_no_ok++;
 80070e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f8d3 3cd4 	ldr.w	r3, [r3, #3284]	; 0xcd4
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
	 		a->_new_data_rcv=1;
 8007106:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800710a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2201      	movs	r2, #1
 8007112:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8007116:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800711a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2204      	movs	r2, #4
 8007122:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007126:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800712a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007134:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007138:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007142:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007146:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007150:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007154:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800715e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007162:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007166:	6812      	ldr	r2, [r2, #0]
 8007168:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800716c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007170:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007174:	6809      	ldr	r1, [r1, #0]
 8007176:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800717a:	2600      	movs	r6, #0
 800717c:	9604      	str	r6, [sp, #16]
 800717e:	9103      	str	r1, [sp, #12]
 8007180:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007184:	9102      	str	r1, [sp, #8]
 8007186:	9201      	str	r2, [sp, #4]
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	462b      	mov	r3, r5
 800718c:	4a54      	ldr	r2, [pc, #336]	; (80072e0 <AT_ESP8266_ND+0x580>)
 800718e:	4621      	mov	r1, r4
 8007190:	f007 fb08 	bl	800e7a4 <FT_String_ND>
 8007194:	4603      	mov	r3, r0
 8007196:	2b01      	cmp	r3, #1
 8007198:	f040 8334 	bne.w	8007804 <AT_ESP8266_ND+0xaa4>
	{

		AT_decode=at_ok;
 800719c:	2301      	movs	r3, #1
 800719e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND");
 80071a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2206      	movs	r2, #6
 80071ae:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Transmision ok
 80071b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80071c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80071ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80071dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80071ea:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80071ee:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80071f2:	6812      	ldr	r2, [r2, #0]
 80071f4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80071f8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80071fc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007200:	6809      	ldr	r1, [r1, #0]
 8007202:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007206:	2600      	movs	r6, #0
 8007208:	9604      	str	r6, [sp, #16]
 800720a:	9103      	str	r1, [sp, #12]
 800720c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007210:	9102      	str	r1, [sp, #8]
 8007212:	9201      	str	r2, [sp, #4]
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	462b      	mov	r3, r5
 8007218:	4a32      	ldr	r2, [pc, #200]	; (80072e4 <AT_ESP8266_ND+0x584>)
 800721a:	4621      	mov	r1, r4
 800721c:	f007 fac2 	bl	800e7a4 <FT_String_ND>
 8007220:	4603      	mov	r3, r0
 8007222:	2b01      	cmp	r3, #1
 8007224:	d113      	bne.n	800724e <AT_ESP8266_ND+0x4ee>
			 {
			 AT_decode=at_tcp_enviado_ok;
 8007226:	2313      	movs	r3, #19
 8007228:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 800722c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007230:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007240:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 800724a:	f001 b981 	b.w	8008550 <AT_ESP8266_ND+0x17f0>
			 }
		 else
		 {
		//------------------CONFIRMO CIERRE DE  CONEXION------------------//
		a->_n_fcomp=strlen("AT+CWQAP");
 800724e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007252:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2208      	movs	r2, #8
 800725a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800725e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007262:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800726c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007270:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800727a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800727e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007288:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800728c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007296:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800729a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800729e:	6812      	ldr	r2, [r2, #0]
 80072a0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80072a4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80072a8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80072ac:	6809      	ldr	r1, [r1, #0]
 80072ae:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80072b2:	2600      	movs	r6, #0
 80072b4:	9604      	str	r6, [sp, #16]
 80072b6:	9103      	str	r1, [sp, #12]
 80072b8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80072bc:	9102      	str	r1, [sp, #8]
 80072be:	9201      	str	r2, [sp, #4]
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	462b      	mov	r3, r5
 80072c4:	4a08      	ldr	r2, [pc, #32]	; (80072e8 <AT_ESP8266_ND+0x588>)
 80072c6:	4621      	mov	r1, r4
 80072c8:	f007 fa6c 	bl	800e7a4 <FT_String_ND>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d10c      	bne.n	80072ec <AT_ESP8266_ND+0x58c>
			{
			AT_decode=at_deconectar_ok;
 80072d2:	230d      	movs	r3, #13
 80072d4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80072d8:	f001 b93a 	b.w	8008550 <AT_ESP8266_ND+0x17f0>
 80072dc:	0801078c 	.word	0x0801078c
 80072e0:	08010794 	.word	0x08010794
 80072e4:	0801079c 	.word	0x0801079c
 80072e8:	080107a4 	.word	0x080107a4
			}
		else
		{
		//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
		a->_n_fcomp=strlen("AT+CWMODE=");
 80072ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	220a      	movs	r2, #10
 80072f8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 80072fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007300:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800730a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800730e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007318:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800731c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007326:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800732a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007334:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007338:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800733c:	6812      	ldr	r2, [r2, #0]
 800733e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007342:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007346:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800734a:	6809      	ldr	r1, [r1, #0]
 800734c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007350:	2600      	movs	r6, #0
 8007352:	9604      	str	r6, [sp, #16]
 8007354:	9103      	str	r1, [sp, #12]
 8007356:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800735a:	9102      	str	r1, [sp, #8]
 800735c:	9201      	str	r2, [sp, #4]
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	462b      	mov	r3, r5
 8007362:	4ab7      	ldr	r2, [pc, #732]	; (8007640 <AT_ESP8266_ND+0x8e0>)
 8007364:	4621      	mov	r1, r4
 8007366:	f007 fa1d 	bl	800e7a4 <FT_String_ND>
 800736a:	4603      	mov	r3, r0
 800736c:	2b01      	cmp	r3, #1
 800736e:	d104      	bne.n	800737a <AT_ESP8266_ND+0x61a>
			{
				AT_decode=at_cambiar_modo_ok;
 8007370:	231c      	movs	r3, #28
 8007372:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007376:	f001 b8eb 	b.w	8008550 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
		a->_n_fcomp=strlen("no change\r\nOK\r\n");
 800737a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800737e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	220f      	movs	r2, #15
 8007386:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 800738a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800738e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007398:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800739c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80073a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80073b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80073c2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80073c6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80073ca:	6812      	ldr	r2, [r2, #0]
 80073cc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80073d0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80073d4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80073d8:	6809      	ldr	r1, [r1, #0]
 80073da:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80073de:	2600      	movs	r6, #0
 80073e0:	9604      	str	r6, [sp, #16]
 80073e2:	9103      	str	r1, [sp, #12]
 80073e4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80073e8:	9102      	str	r1, [sp, #8]
 80073ea:	9201      	str	r2, [sp, #4]
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	462b      	mov	r3, r5
 80073f0:	4a94      	ldr	r2, [pc, #592]	; (8007644 <AT_ESP8266_ND+0x8e4>)
 80073f2:	4621      	mov	r1, r4
 80073f4:	f007 f9d6 	bl	800e7a4 <FT_String_ND>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d104      	bne.n	8007408 <AT_ESP8266_ND+0x6a8>
			{
				AT_decode=at_tcp_srvr_ok_noch;
 80073fe:	2317      	movs	r3, #23
 8007400:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007404:	f001 b8a4 	b.w	8008550 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------OK PARA ENVIAR------------------//
		a->_n_fcomp=strlen("\r\n>");
 8007408:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800740c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2203      	movs	r2, #3
 8007414:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007418:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800741c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007426:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800742a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007434:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007438:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007442:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007446:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007450:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007454:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007458:	6812      	ldr	r2, [r2, #0]
 800745a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800745e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007462:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007466:	6809      	ldr	r1, [r1, #0]
 8007468:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800746c:	2600      	movs	r6, #0
 800746e:	9604      	str	r6, [sp, #16]
 8007470:	9103      	str	r1, [sp, #12]
 8007472:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007476:	9102      	str	r1, [sp, #8]
 8007478:	9201      	str	r2, [sp, #4]
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	462b      	mov	r3, r5
 800747e:	4a72      	ldr	r2, [pc, #456]	; (8007648 <AT_ESP8266_ND+0x8e8>)
 8007480:	4621      	mov	r1, r4
 8007482:	f007 f98f 	bl	800e7a4 <FT_String_ND>
 8007486:	4603      	mov	r3, r0
 8007488:	2b01      	cmp	r3, #1
 800748a:	d104      	bne.n	8007496 <AT_ESP8266_ND+0x736>
			{
				AT_decode=at_tcp_ok_to_send;
 800748c:	2314      	movs	r3, #20
 800748e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007492:	f001 b85d 	b.w	8008550 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------OK SERVIDOR------------------//
		a->_n_fcomp=strlen("AT+CIPSERVER");
 8007496:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800749a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	220c      	movs	r2, #12
 80074a2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80074a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80074b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80074c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80074d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80074de:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80074e2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80074e6:	6812      	ldr	r2, [r2, #0]
 80074e8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80074ec:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80074f0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80074f4:	6809      	ldr	r1, [r1, #0]
 80074f6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80074fa:	2600      	movs	r6, #0
 80074fc:	9604      	str	r6, [sp, #16]
 80074fe:	9103      	str	r1, [sp, #12]
 8007500:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007504:	9102      	str	r1, [sp, #8]
 8007506:	9201      	str	r2, [sp, #4]
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	462b      	mov	r3, r5
 800750c:	4a4f      	ldr	r2, [pc, #316]	; (800764c <AT_ESP8266_ND+0x8ec>)
 800750e:	4621      	mov	r1, r4
 8007510:	f007 f948 	bl	800e7a4 <FT_String_ND>
 8007514:	4603      	mov	r3, r0
 8007516:	2b01      	cmp	r3, #1
 8007518:	d104      	bne.n	8007524 <AT_ESP8266_ND+0x7c4>
		{
			AT_decode=at_tcp_srvr_ok;
 800751a:	2315      	movs	r3, #21
 800751c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007520:	f001 b816 	b.w	8008550 <AT_ESP8266_ND+0x17f0>
		}
		else
		{
		//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
		a->_n_fcomp=strlen("AT+CIPCLOSE");
 8007524:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007528:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	220b      	movs	r2, #11
 8007530:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007534:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007538:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007542:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007546:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007550:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007554:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800755e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007562:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800756c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007570:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007574:	6812      	ldr	r2, [r2, #0]
 8007576:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800757a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800757e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007582:	6809      	ldr	r1, [r1, #0]
 8007584:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007588:	2600      	movs	r6, #0
 800758a:	9604      	str	r6, [sp, #16]
 800758c:	9103      	str	r1, [sp, #12]
 800758e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007592:	9102      	str	r1, [sp, #8]
 8007594:	9201      	str	r2, [sp, #4]
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	462b      	mov	r3, r5
 800759a:	4a2d      	ldr	r2, [pc, #180]	; (8007650 <AT_ESP8266_ND+0x8f0>)
 800759c:	4621      	mov	r1, r4
 800759e:	f007 f901 	bl	800e7a4 <FT_String_ND>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d104      	bne.n	80075b2 <AT_ESP8266_ND+0x852>
			{
				AT_decode=at_tcp_closed_ok;
 80075a8:	2309      	movs	r3, #9
 80075aa:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80075ae:	f000 bfcf 	b.w	8008550 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=1");
 80075b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	220b      	movs	r2, #11
 80075be:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80075c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80075d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80075de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80075ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80075fa:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80075fe:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007602:	6812      	ldr	r2, [r2, #0]
 8007604:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007608:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800760c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007610:	6809      	ldr	r1, [r1, #0]
 8007612:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007616:	2600      	movs	r6, #0
 8007618:	9604      	str	r6, [sp, #16]
 800761a:	9103      	str	r1, [sp, #12]
 800761c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007620:	9102      	str	r1, [sp, #8]
 8007622:	9201      	str	r2, [sp, #4]
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	462b      	mov	r3, r5
 8007628:	4a0a      	ldr	r2, [pc, #40]	; (8007654 <AT_ESP8266_ND+0x8f4>)
 800762a:	4621      	mov	r1, r4
 800762c:	f007 f8ba 	bl	800e7a4 <FT_String_ND>
 8007630:	4603      	mov	r3, r0
 8007632:	2b01      	cmp	r3, #1
 8007634:	d110      	bne.n	8007658 <AT_ESP8266_ND+0x8f8>
			{
				AT_decode=at_multiple_conn_ok;
 8007636:	2307      	movs	r3, #7
 8007638:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800763c:	f000 bf88 	b.w	8008550 <AT_ESP8266_ND+0x17f0>
 8007640:	080107b0 	.word	0x080107b0
 8007644:	080107bc 	.word	0x080107bc
 8007648:	080107cc 	.word	0x080107cc
 800764c:	080107d0 	.word	0x080107d0
 8007650:	080107e0 	.word	0x080107e0
 8007654:	080107ec 	.word	0x080107ec
			}
		else
		{
		//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=0");
 8007658:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800765c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	220b      	movs	r2, #11
 8007664:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007668:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800766c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007676:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800767a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007684:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007688:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007692:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007696:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80076a0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80076a4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80076a8:	6812      	ldr	r2, [r2, #0]
 80076aa:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80076ae:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80076b2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80076b6:	6809      	ldr	r1, [r1, #0]
 80076b8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80076bc:	2600      	movs	r6, #0
 80076be:	9604      	str	r6, [sp, #16]
 80076c0:	9103      	str	r1, [sp, #12]
 80076c2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80076c6:	9102      	str	r1, [sp, #8]
 80076c8:	9201      	str	r2, [sp, #4]
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	462b      	mov	r3, r5
 80076ce:	4ab7      	ldr	r2, [pc, #732]	; (80079ac <AT_ESP8266_ND+0xc4c>)
 80076d0:	4621      	mov	r1, r4
 80076d2:	f007 f867 	bl	800e7a4 <FT_String_ND>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d104      	bne.n	80076e6 <AT_ESP8266_ND+0x986>
			{
				AT_decode=at_no_multiple_conn_ok;
 80076dc:	2308      	movs	r3, #8
 80076de:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80076e2:	f000 bf35 	b.w	8008550 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------DEFIIR IP OK------------------//
		a->_n_fcomp=strlen("AT+CIPSTA=");
 80076e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	220a      	movs	r2, #10
 80076f2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80076f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007704:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007708:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007712:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007716:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007720:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007724:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800772e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007732:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007736:	6812      	ldr	r2, [r2, #0]
 8007738:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800773c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007740:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007744:	6809      	ldr	r1, [r1, #0]
 8007746:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800774a:	2600      	movs	r6, #0
 800774c:	9604      	str	r6, [sp, #16]
 800774e:	9103      	str	r1, [sp, #12]
 8007750:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007754:	9102      	str	r1, [sp, #8]
 8007756:	9201      	str	r2, [sp, #4]
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	462b      	mov	r3, r5
 800775c:	4a94      	ldr	r2, [pc, #592]	; (80079b0 <AT_ESP8266_ND+0xc50>)
 800775e:	4621      	mov	r1, r4
 8007760:	f007 f820 	bl	800e7a4 <FT_String_ND>
 8007764:	4603      	mov	r3, r0
 8007766:	2b01      	cmp	r3, #1
 8007768:	d104      	bne.n	8007774 <AT_ESP8266_ND+0xa14>
			{
				AT_decode=at_def_ip_ok;
 800776a:	231b      	movs	r3, #27
 800776c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007770:	f000 beee 	b.w	8008550 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------TCP CONECTADO------------------//
		a->_n_fcomp=strlen("CONNECT");
 8007774:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007778:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2207      	movs	r2, #7
 8007780:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007784:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007788:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007792:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007796:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80077a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80077ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80077bc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80077c0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80077c4:	6812      	ldr	r2, [r2, #0]
 80077c6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80077ca:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80077ce:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80077d2:	6809      	ldr	r1, [r1, #0]
 80077d4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80077d8:	2600      	movs	r6, #0
 80077da:	9604      	str	r6, [sp, #16]
 80077dc:	9103      	str	r1, [sp, #12]
 80077de:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80077e2:	9102      	str	r1, [sp, #8]
 80077e4:	9201      	str	r2, [sp, #4]
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	462b      	mov	r3, r5
 80077ea:	4a72      	ldr	r2, [pc, #456]	; (80079b4 <AT_ESP8266_ND+0xc54>)
 80077ec:	4621      	mov	r1, r4
 80077ee:	f006 ffd9 	bl	800e7a4 <FT_String_ND>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	f040 86ab 	bne.w	8008550 <AT_ESP8266_ND+0x17f0>
			{
			AT_decode=at_tcp_conectado;
 80077fa:	230f      	movs	r3, #15
 80077fc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007800:	f000 bea6 	b.w	8008550 <AT_ESP8266_ND+0x17f0>
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\n");
 8007804:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007808:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2207      	movs	r2, #7
 8007810:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007814:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007818:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007822:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007826:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007830:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007834:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800783e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007842:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800784c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007850:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007854:	6812      	ldr	r2, [r2, #0]
 8007856:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800785a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800785e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007862:	6809      	ldr	r1, [r1, #0]
 8007864:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007868:	2600      	movs	r6, #0
 800786a:	9604      	str	r6, [sp, #16]
 800786c:	9103      	str	r1, [sp, #12]
 800786e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007872:	9102      	str	r1, [sp, #8]
 8007874:	9201      	str	r2, [sp, #4]
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	462b      	mov	r3, r5
 800787a:	4a4f      	ldr	r2, [pc, #316]	; (80079b8 <AT_ESP8266_ND+0xc58>)
 800787c:	4621      	mov	r1, r4
 800787e:	f006 ff91 	bl	800e7a4 <FT_String_ND>
 8007882:	4603      	mov	r3, r0
 8007884:	2b01      	cmp	r3, #1
 8007886:	f040 8326 	bne.w	8007ed6 <AT_ESP8266_ND+0x1176>
		{
				AT_decode=at_error;
 800788a:	2302      	movs	r3, #2
 800788c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("CLOSED\r\n");
 8007890:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007894:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2208      	movs	r2, #8
 800789c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Intentando conectar con servidor TCP caido
 80078a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80078ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80078bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80078ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80078d8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80078dc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80078e0:	6812      	ldr	r2, [r2, #0]
 80078e2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80078e6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80078ea:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80078ee:	6809      	ldr	r1, [r1, #0]
 80078f0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80078f4:	2600      	movs	r6, #0
 80078f6:	9604      	str	r6, [sp, #16]
 80078f8:	9103      	str	r1, [sp, #12]
 80078fa:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80078fe:	9102      	str	r1, [sp, #8]
 8007900:	9201      	str	r2, [sp, #4]
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	462b      	mov	r3, r5
 8007906:	4a2d      	ldr	r2, [pc, #180]	; (80079bc <AT_ESP8266_ND+0xc5c>)
 8007908:	4621      	mov	r1, r4
 800790a:	f006 ff4b 	bl	800e7a4 <FT_String_ND>
 800790e:	4603      	mov	r3, r0
 8007910:	2b01      	cmp	r3, #1
 8007912:	d104      	bne.n	800791e <AT_ESP8266_ND+0xbbe>
				{
						AT_decode=at_tcp_conn_err;
 8007914:	2306      	movs	r3, #6
 8007916:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800791a:	f000 be19 	b.w	8008550 <AT_ESP8266_ND+0x17f0>
				}
				 else
				 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 800791e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007922:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2215      	movs	r2, #21
 800792a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 800792e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007932:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800793c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007940:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800794a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800794e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007958:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800795c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007966:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800796a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800796e:	6812      	ldr	r2, [r2, #0]
 8007970:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007974:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007978:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800797c:	6809      	ldr	r1, [r1, #0]
 800797e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007982:	2600      	movs	r6, #0
 8007984:	9604      	str	r6, [sp, #16]
 8007986:	9103      	str	r1, [sp, #12]
 8007988:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800798c:	9102      	str	r1, [sp, #8]
 800798e:	9201      	str	r2, [sp, #4]
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	462b      	mov	r3, r5
 8007994:	4a0a      	ldr	r2, [pc, #40]	; (80079c0 <AT_ESP8266_ND+0xc60>)
 8007996:	4621      	mov	r1, r4
 8007998:	f006 ff04 	bl	800e7a4 <FT_String_ND>
 800799c:	4603      	mov	r3, r0
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d110      	bne.n	80079c4 <AT_ESP8266_ND+0xc64>
				{
					 	AT_decode=at_tcp_alrdy_cnntd_err;
 80079a2:	230e      	movs	r3, #14
 80079a4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80079a8:	f000 bdd2 	b.w	8008550 <AT_ESP8266_ND+0x17f0>
 80079ac:	080107f8 	.word	0x080107f8
 80079b0:	08010804 	.word	0x08010804
 80079b4:	08010810 	.word	0x08010810
 80079b8:	08010818 	.word	0x08010818
 80079bc:	08010820 	.word	0x08010820
 80079c0:	0801082c 	.word	0x0801082c
				}
				else
				{
				//------------------OK PARA ENVIAR------------------//
				a->_n_fcomp=strlen("AT+CIPSERVER");
 80079c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	220c      	movs	r2, #12
 80079d0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80079d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80079e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80079f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80079fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007a0c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a10:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007a14:	6812      	ldr	r2, [r2, #0]
 8007a16:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007a1a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007a1e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a22:	6809      	ldr	r1, [r1, #0]
 8007a24:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007a28:	2600      	movs	r6, #0
 8007a2a:	9604      	str	r6, [sp, #16]
 8007a2c:	9103      	str	r1, [sp, #12]
 8007a2e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a32:	9102      	str	r1, [sp, #8]
 8007a34:	9201      	str	r2, [sp, #4]
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	462b      	mov	r3, r5
 8007a3a:	4ab7      	ldr	r2, [pc, #732]	; (8007d18 <AT_ESP8266_ND+0xfb8>)
 8007a3c:	4621      	mov	r1, r4
 8007a3e:	f006 feb1 	bl	800e7a4 <FT_String_ND>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d104      	bne.n	8007a52 <AT_ESP8266_ND+0xcf2>
				{
					AT_decode=at_tcp_srvr_err;
 8007a48:	2316      	movs	r3, #22
 8007a4a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007a4e:	f000 bd7f 	b.w	8008550 <AT_ESP8266_ND+0x17f0>
				}
				else
				{
				//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
				a->_n_fcomp=strlen("AT+CIPCLOSE");
 8007a52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	220b      	movs	r2, #11
 8007a5e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8007a62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007a70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007a7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007a8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007a9a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a9e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007aa2:	6812      	ldr	r2, [r2, #0]
 8007aa4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007aa8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007aac:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007ab0:	6809      	ldr	r1, [r1, #0]
 8007ab2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007ab6:	2600      	movs	r6, #0
 8007ab8:	9604      	str	r6, [sp, #16]
 8007aba:	9103      	str	r1, [sp, #12]
 8007abc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007ac0:	9102      	str	r1, [sp, #8]
 8007ac2:	9201      	str	r2, [sp, #4]
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	462b      	mov	r3, r5
 8007ac8:	4a94      	ldr	r2, [pc, #592]	; (8007d1c <AT_ESP8266_ND+0xfbc>)
 8007aca:	4621      	mov	r1, r4
 8007acc:	f006 fe6a 	bl	800e7a4 <FT_String_ND>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d104      	bne.n	8007ae0 <AT_ESP8266_ND+0xd80>
					{
						AT_decode=at_tcp_close_err;
 8007ad6:	231a      	movs	r3, #26
 8007ad8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007adc:	f000 bd38 	b.w	8008550 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
				a->_n_fcomp=strlen("link is not valid");
 8007ae0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ae4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2211      	movs	r2, #17
 8007aec:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007af0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007af4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007afe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007b0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007b1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007b28:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b2c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b30:	6812      	ldr	r2, [r2, #0]
 8007b32:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007b36:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b3a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b3e:	6809      	ldr	r1, [r1, #0]
 8007b40:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007b44:	2600      	movs	r6, #0
 8007b46:	9604      	str	r6, [sp, #16]
 8007b48:	9103      	str	r1, [sp, #12]
 8007b4a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b4e:	9102      	str	r1, [sp, #8]
 8007b50:	9201      	str	r2, [sp, #4]
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	462b      	mov	r3, r5
 8007b56:	4a72      	ldr	r2, [pc, #456]	; (8007d20 <AT_ESP8266_ND+0xfc0>)
 8007b58:	4621      	mov	r1, r4
 8007b5a:	f006 fe23 	bl	800e7a4 <FT_String_ND>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d104      	bne.n	8007b6e <AT_ESP8266_ND+0xe0e>
					{
						AT_decode=at_tcp_snd_err;
 8007b64:	2311      	movs	r3, #17
 8007b66:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007b6a:	f000 bcf1 	b.w	8008550 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 8007b6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	220a      	movs	r2, #10
 8007b7a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8007b7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007b8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007b9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007ba8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007bb6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007bba:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007bbe:	6812      	ldr	r2, [r2, #0]
 8007bc0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007bc4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007bc8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007bcc:	6809      	ldr	r1, [r1, #0]
 8007bce:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007bd2:	2600      	movs	r6, #0
 8007bd4:	9604      	str	r6, [sp, #16]
 8007bd6:	9103      	str	r1, [sp, #12]
 8007bd8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007bdc:	9102      	str	r1, [sp, #8]
 8007bde:	9201      	str	r2, [sp, #4]
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	462b      	mov	r3, r5
 8007be4:	4a4f      	ldr	r2, [pc, #316]	; (8007d24 <AT_ESP8266_ND+0xfc4>)
 8007be6:	4621      	mov	r1, r4
 8007be8:	f006 fddc 	bl	800e7a4 <FT_String_ND>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d104      	bne.n	8007bfc <AT_ESP8266_ND+0xe9c>
					{
						AT_decode=at_cambiar_modo_err;
 8007bf2:	231d      	movs	r3, #29
 8007bf4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007bf8:	f000 bcaa 	b.w	8008550 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007bfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	220b      	movs	r2, #11
 8007c08:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007c0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007c1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007c28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007c36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007c44:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c48:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007c4c:	6812      	ldr	r2, [r2, #0]
 8007c4e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007c52:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c56:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c5a:	6809      	ldr	r1, [r1, #0]
 8007c5c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007c60:	2600      	movs	r6, #0
 8007c62:	9604      	str	r6, [sp, #16]
 8007c64:	9103      	str	r1, [sp, #12]
 8007c66:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007c6a:	9102      	str	r1, [sp, #8]
 8007c6c:	9201      	str	r2, [sp, #4]
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	462b      	mov	r3, r5
 8007c72:	4a2d      	ldr	r2, [pc, #180]	; (8007d28 <AT_ESP8266_ND+0xfc8>)
 8007c74:	4621      	mov	r1, r4
 8007c76:	f006 fd95 	bl	800e7a4 <FT_String_ND>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d104      	bne.n	8007c8a <AT_ESP8266_ND+0xf2a>
					{
						AT_decode=at_multiple_conn_err;
 8007c80:	231e      	movs	r3, #30
 8007c82:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007c86:	f000 bc63 	b.w	8008550 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=0");
 8007c8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	220b      	movs	r2, #11
 8007c96:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007c9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007ca8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007cb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007cc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007cd2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007cd6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007cda:	6812      	ldr	r2, [r2, #0]
 8007cdc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ce0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007ce4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007ce8:	6809      	ldr	r1, [r1, #0]
 8007cea:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007cee:	2600      	movs	r6, #0
 8007cf0:	9604      	str	r6, [sp, #16]
 8007cf2:	9103      	str	r1, [sp, #12]
 8007cf4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007cf8:	9102      	str	r1, [sp, #8]
 8007cfa:	9201      	str	r2, [sp, #4]
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	462b      	mov	r3, r5
 8007d00:	4a0a      	ldr	r2, [pc, #40]	; (8007d2c <AT_ESP8266_ND+0xfcc>)
 8007d02:	4621      	mov	r1, r4
 8007d04:	f006 fd4e 	bl	800e7a4 <FT_String_ND>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d110      	bne.n	8007d30 <AT_ESP8266_ND+0xfd0>
					{
						AT_decode=at_no_multiple_conn_err;
 8007d0e:	231f      	movs	r3, #31
 8007d10:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007d14:	f000 bc1c 	b.w	8008550 <AT_ESP8266_ND+0x17f0>
 8007d18:	080107d0 	.word	0x080107d0
 8007d1c:	080107e0 	.word	0x080107e0
 8007d20:	08010844 	.word	0x08010844
 8007d24:	080107b0 	.word	0x080107b0
 8007d28:	080107ec 	.word	0x080107ec
 8007d2c:	080107f8 	.word	0x080107f8
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CWJAP");
 8007d30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2208      	movs	r2, #8
 8007d3c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007d40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007d4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007d5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007d6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007d78:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d7c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d80:	6812      	ldr	r2, [r2, #0]
 8007d82:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007d86:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007d8a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007d8e:	6809      	ldr	r1, [r1, #0]
 8007d90:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007d94:	2600      	movs	r6, #0
 8007d96:	9604      	str	r6, [sp, #16]
 8007d98:	9103      	str	r1, [sp, #12]
 8007d9a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007d9e:	9102      	str	r1, [sp, #8]
 8007da0:	9201      	str	r2, [sp, #4]
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	462b      	mov	r3, r5
 8007da6:	4ac4      	ldr	r2, [pc, #784]	; (80080b8 <AT_ESP8266_ND+0x1358>)
 8007da8:	4621      	mov	r1, r4
 8007daa:	f006 fcfb 	bl	800e7a4 <FT_String_ND>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d103      	bne.n	8007dbc <AT_ESP8266_ND+0x105c>
					{
						AT_decode=at_conn_wifi_err;
 8007db4:	2320      	movs	r3, #32
 8007db6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007dba:	e3c9      	b.n	8008550 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CIPSTA=");
 8007dbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	220a      	movs	r2, #10
 8007dc8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007dcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007dda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007de8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007df6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007e04:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007e08:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007e0c:	6812      	ldr	r2, [r2, #0]
 8007e0e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007e12:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007e16:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007e1a:	6809      	ldr	r1, [r1, #0]
 8007e1c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007e20:	2600      	movs	r6, #0
 8007e22:	9604      	str	r6, [sp, #16]
 8007e24:	9103      	str	r1, [sp, #12]
 8007e26:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007e2a:	9102      	str	r1, [sp, #8]
 8007e2c:	9201      	str	r2, [sp, #4]
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	462b      	mov	r3, r5
 8007e32:	4aa2      	ldr	r2, [pc, #648]	; (80080bc <AT_ESP8266_ND+0x135c>)
 8007e34:	4621      	mov	r1, r4
 8007e36:	f006 fcb5 	bl	800e7a4 <FT_String_ND>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d103      	bne.n	8007e48 <AT_ESP8266_ND+0x10e8>
					{
						AT_decode=at_def_ip_err;
 8007e40:	2321      	movs	r3, #33	; 0x21
 8007e42:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007e46:	e383      	b.n	8008550 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("no ip");
 8007e48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2205      	movs	r2, #5
 8007e54:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007e58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007e66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007e74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007e82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007e90:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007e94:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007e98:	6812      	ldr	r2, [r2, #0]
 8007e9a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007e9e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007ea2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007ea6:	6809      	ldr	r1, [r1, #0]
 8007ea8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007eac:	2600      	movs	r6, #0
 8007eae:	9604      	str	r6, [sp, #16]
 8007eb0:	9103      	str	r1, [sp, #12]
 8007eb2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007eb6:	9102      	str	r1, [sp, #8]
 8007eb8:	9201      	str	r2, [sp, #4]
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	462b      	mov	r3, r5
 8007ebe:	4a80      	ldr	r2, [pc, #512]	; (80080c0 <AT_ESP8266_ND+0x1360>)
 8007ec0:	4621      	mov	r1, r4
 8007ec2:	f006 fc6f 	bl	800e7a4 <FT_String_ND>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	f040 8341 	bne.w	8008550 <AT_ESP8266_ND+0x17f0>
					{
						AT_decode=at_tcp_noip_err;  //PROCESAR
 8007ece:	2322      	movs	r3, #34	; 0x22
 8007ed0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007ed4:	e33c      	b.n	8008550 <AT_ESP8266_ND+0x17f0>
		else
		{
			 //--------------------------------------------------------------------------------------------------------------//
			 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
			 //--------------------------------------------------------------------------------------------------------------//
			a->_n_fcomp=strlen("WIFI DISCONNECT");
 8007ed6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	220f      	movs	r2, #15
 8007ee2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 8007ee6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007ef4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ef8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007f02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007f10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007f1e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007f22:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007f26:	6812      	ldr	r2, [r2, #0]
 8007f28:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007f2c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007f30:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007f34:	6809      	ldr	r1, [r1, #0]
 8007f36:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007f3a:	2600      	movs	r6, #0
 8007f3c:	9604      	str	r6, [sp, #16]
 8007f3e:	9103      	str	r1, [sp, #12]
 8007f40:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007f44:	9102      	str	r1, [sp, #8]
 8007f46:	9201      	str	r2, [sp, #4]
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	462b      	mov	r3, r5
 8007f4c:	4a5d      	ldr	r2, [pc, #372]	; (80080c4 <AT_ESP8266_ND+0x1364>)
 8007f4e:	4621      	mov	r1, r4
 8007f50:	f006 fc28 	bl	800e7a4 <FT_String_ND>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d112      	bne.n	8007f80 <AT_ESP8266_ND+0x1220>
				{
					 AT_decode=at_wifi_disconnect;
 8007f5a:	230a      	movs	r3, #10
 8007f5c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					 a->_debug_WF_DISCONNECT++;
 8007f60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007f6e:	1c5a      	adds	r2, r3, #1
 8007f70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 8007f7e:	e2e7      	b.n	8008550 <AT_ESP8266_ND+0x17f0>
				}
			else
			{
			//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
			a->_n_fcomp=strlen(",CLOSED\r\n");
 8007f80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2209      	movs	r2, #9
 8007f8c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007f90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007f9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fa2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007fac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007fba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007fc8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007fcc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007fd0:	6812      	ldr	r2, [r2, #0]
 8007fd2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007fd6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007fda:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007fde:	6809      	ldr	r1, [r1, #0]
 8007fe0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007fe4:	2600      	movs	r6, #0
 8007fe6:	9604      	str	r6, [sp, #16]
 8007fe8:	9103      	str	r1, [sp, #12]
 8007fea:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007fee:	9102      	str	r1, [sp, #8]
 8007ff0:	9201      	str	r2, [sp, #4]
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	462b      	mov	r3, r5
 8007ff6:	4a34      	ldr	r2, [pc, #208]	; (80080c8 <AT_ESP8266_ND+0x1368>)
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	f006 fbd3 	bl	800e7a4 <FT_String_ND>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b01      	cmp	r3, #1
 8008002:	d112      	bne.n	800802a <AT_ESP8266_ND+0x12ca>
				{
					AT_decode=at_tcp_client_desc;
 8008004:	2319      	movs	r3, #25
 8008006:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					a->_debug_CLOSED++;
 800800a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800800e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800801e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
 8008028:	e292      	b.n	8008550 <AT_ESP8266_ND+0x17f0>
			//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
			// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
			// primero ve el SEND OKse queda en el estado 705 por error al     //
			//  enviar														  //
			//-----------------------------------------------------------------//
			a->_n_fcomp=strlen("CLOSED\r\n");
 800802a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800802e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2208      	movs	r2, #8
 8008036:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 800803a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800803e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8008048:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800804c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8008056:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800805a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8008064:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008068:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008072:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008076:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800807a:	6812      	ldr	r2, [r2, #0]
 800807c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8008080:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008084:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008088:	6809      	ldr	r1, [r1, #0]
 800808a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800808e:	2600      	movs	r6, #0
 8008090:	9604      	str	r6, [sp, #16]
 8008092:	9103      	str	r1, [sp, #12]
 8008094:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008098:	9102      	str	r1, [sp, #8]
 800809a:	9201      	str	r2, [sp, #4]
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	462b      	mov	r3, r5
 80080a0:	4a0a      	ldr	r2, [pc, #40]	; (80080cc <AT_ESP8266_ND+0x136c>)
 80080a2:	4621      	mov	r1, r4
 80080a4:	f006 fb7e 	bl	800e7a4 <FT_String_ND>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d110      	bne.n	80080d0 <AT_ESP8266_ND+0x1370>
				{
					AT_decode=at_tcp_desconectado;
 80080ae:	2310      	movs	r3, #16
 80080b0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80080b4:	e24c      	b.n	8008550 <AT_ESP8266_ND+0x17f0>
 80080b6:	bf00      	nop
 80080b8:	08010858 	.word	0x08010858
 80080bc:	08010804 	.word	0x08010804
 80080c0:	08010864 	.word	0x08010864
 80080c4:	0801086c 	.word	0x0801086c
 80080c8:	0801087c 	.word	0x0801087c
 80080cc:	08010820 	.word	0x08010820
				}
			else
			{

			//------------------ENVIADO = RECIBIDO ------------------//
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 80080d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80080de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80080ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f203 4594 	addw	r5, r3, #1172	; 0x494
 80080fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f603 46dc 	addw	r6, r3, #3292	; 0xcdc
 8008108:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800810c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008116:	603b      	str	r3, [r7, #0]
 8008118:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800811c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008120:	6812      	ldr	r2, [r2, #0]
 8008122:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8008126:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800812a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800812e:	6809      	ldr	r1, [r1, #0]
 8008130:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8008134:	2300      	movs	r3, #0
 8008136:	9304      	str	r3, [sp, #16]
 8008138:	9103      	str	r1, [sp, #12]
 800813a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800813e:	9102      	str	r1, [sp, #8]
 8008140:	9201      	str	r2, [sp, #4]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	4633      	mov	r3, r6
 8008148:	462a      	mov	r2, r5
 800814a:	4621      	mov	r1, r4
 800814c:	f006 fb2a 	bl	800e7a4 <FT_String_ND>
 8008150:	4603      	mov	r3, r0
 8008152:	2b01      	cmp	r3, #1
 8008154:	d112      	bne.n	800817c <AT_ESP8266_ND+0x141c>
				 {
				 	if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8008156:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800815a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 8008164:	2b00      	cmp	r3, #0
 8008166:	f000 81f3 	beq.w	8008550 <AT_ESP8266_ND+0x17f0>
				 		{
				 		//AT_decode=10;
				 		a->_n_orig=0;
 800816a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800816e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2200      	movs	r2, #0
 8008176:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
 800817a:	e1e9      	b.n	8008550 <AT_ESP8266_ND+0x17f0>
				 		}
				 	}
			else
			{
			//------------------PAQUETE ENVIADO EN FALLA--------------//
			a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 800817c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008180:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	220d      	movs	r2, #13
 8008188:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 800818c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008190:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800819a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800819e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80081a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80081b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80081c4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80081c8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80081cc:	6812      	ldr	r2, [r2, #0]
 80081ce:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80081d2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80081d6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80081da:	6809      	ldr	r1, [r1, #0]
 80081dc:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80081e0:	2600      	movs	r6, #0
 80081e2:	9604      	str	r6, [sp, #16]
 80081e4:	9103      	str	r1, [sp, #12]
 80081e6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80081ea:	9102      	str	r1, [sp, #8]
 80081ec:	9201      	str	r2, [sp, #4]
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	462b      	mov	r3, r5
 80081f2:	4aaf      	ldr	r2, [pc, #700]	; (80084b0 <AT_ESP8266_ND+0x1750>)
 80081f4:	4621      	mov	r1, r4
 80081f6:	f006 fad5 	bl	800e7a4 <FT_String_ND>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d112      	bne.n	8008226 <AT_ESP8266_ND+0x14c6>
			 	{
			 	 AT_decode=at_tcp_enviado_error;
 8008200:	2312      	movs	r3, #18
 8008202:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 	 a->_debug_FAIL++;
 8008206:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800820a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 8008214:	1c5a      	adds	r2, r3, #1
 8008216:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800821a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 8008224:	e194      	b.n	8008550 <AT_ESP8266_ND+0x17f0>



			//------------------OBTENCI�N DE IP------------------//
			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8008226:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800822a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	220d      	movs	r2, #13
 8008232:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Obtiene IP
 8008236:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800823a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8008244:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008248:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8008252:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008256:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8008260:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008264:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800826e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008272:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008276:	6812      	ldr	r2, [r2, #0]
 8008278:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800827c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008280:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008284:	6809      	ldr	r1, [r1, #0]
 8008286:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800828a:	2600      	movs	r6, #0
 800828c:	9604      	str	r6, [sp, #16]
 800828e:	9103      	str	r1, [sp, #12]
 8008290:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008294:	9102      	str	r1, [sp, #8]
 8008296:	9201      	str	r2, [sp, #4]
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	462b      	mov	r3, r5
 800829c:	4a85      	ldr	r2, [pc, #532]	; (80084b4 <AT_ESP8266_ND+0x1754>)
 800829e:	4621      	mov	r1, r4
 80082a0:	f006 fa80 	bl	800e7a4 <FT_String_ND>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d112      	bne.n	80082d0 <AT_ESP8266_ND+0x1570>
				{
					a->_debug_WF_GOTIP++;
 80082aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 80082b8:	1c5a      	adds	r2, r3, #1
 80082ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
					AT_decode=at_wifi_gotip;
 80082c8:	230c      	movs	r3, #12
 80082ca:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80082ce:	e13f      	b.n	8008550 <AT_ESP8266_ND+0x17f0>
				}
			else
			{
				//------------------WIFI CONECTADA------------------//
			a->_n_fcomp=strlen("WIFI CONNECTED");
 80082d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	220e      	movs	r2, #14
 80082dc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//WIFI CONECTADA
 80082e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80082ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80082fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008300:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800830a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800830e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008318:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800831c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008320:	6812      	ldr	r2, [r2, #0]
 8008322:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8008326:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800832a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800832e:	6809      	ldr	r1, [r1, #0]
 8008330:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8008334:	2600      	movs	r6, #0
 8008336:	9604      	str	r6, [sp, #16]
 8008338:	9103      	str	r1, [sp, #12]
 800833a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800833e:	9102      	str	r1, [sp, #8]
 8008340:	9201      	str	r2, [sp, #4]
 8008342:	9300      	str	r3, [sp, #0]
 8008344:	462b      	mov	r3, r5
 8008346:	4a5c      	ldr	r2, [pc, #368]	; (80084b8 <AT_ESP8266_ND+0x1758>)
 8008348:	4621      	mov	r1, r4
 800834a:	f006 fa2b 	bl	800e7a4 <FT_String_ND>
 800834e:	4603      	mov	r3, r0
 8008350:	2b01      	cmp	r3, #1
 8008352:	d112      	bne.n	800837a <AT_ESP8266_ND+0x161a>
				{
					a->_debug_WF_CNNCTD++;
 8008354:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008358:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8008362:	1c5a      	adds	r2, r3, #1
 8008364:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008368:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
						 AT_decode=at_wifi_connected;
 8008372:	230b      	movs	r3, #11
 8008374:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8008378:	e0ea      	b.n	8008550 <AT_ESP8266_ND+0x17f0>
				}
			else
			{

			//------------------CLIENTE TCP CONECTADO------------------//
			a->_n_fcomp=strlen(",CONNECT\r\n");
 800837a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800837e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	220a      	movs	r2, #10
 8008386:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 800838a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800838e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8008398:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800839c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80083a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80083b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80083c2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80083c6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80083ca:	6812      	ldr	r2, [r2, #0]
 80083cc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80083d0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80083d4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80083d8:	6809      	ldr	r1, [r1, #0]
 80083da:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80083de:	2600      	movs	r6, #0
 80083e0:	9604      	str	r6, [sp, #16]
 80083e2:	9103      	str	r1, [sp, #12]
 80083e4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80083e8:	9102      	str	r1, [sp, #8]
 80083ea:	9201      	str	r2, [sp, #4]
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	462b      	mov	r3, r5
 80083f0:	4a32      	ldr	r2, [pc, #200]	; (80084bc <AT_ESP8266_ND+0x175c>)
 80083f2:	4621      	mov	r1, r4
 80083f4:	f006 f9d6 	bl	800e7a4 <FT_String_ND>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d112      	bne.n	8008424 <AT_ESP8266_ND+0x16c4>
				  {
					  AT_decode=at_tcp_client_conectado;
 80083fe:	2318      	movs	r3, #24
 8008400:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					  a->_debug_CONNECT++;
 8008404:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008408:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8008412:	1c5a      	adds	r2, r3, #1
 8008414:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008418:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
 8008422:	e095      	b.n	8008550 <AT_ESP8266_ND+0x17f0>
				  }
			else
			{

			//------------------FALLA------------------//
			a->_n_fcomp=strlen("\r\nFAIL\r\n");
 8008424:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008428:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2208      	movs	r2, #8
 8008430:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8008434:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008438:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8008442:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008446:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8008450:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008454:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800845e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008462:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800846c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008470:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008474:	6812      	ldr	r2, [r2, #0]
 8008476:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800847a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800847e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008482:	6809      	ldr	r1, [r1, #0]
 8008484:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8008488:	2600      	movs	r6, #0
 800848a:	9604      	str	r6, [sp, #16]
 800848c:	9103      	str	r1, [sp, #12]
 800848e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008492:	9102      	str	r1, [sp, #8]
 8008494:	9201      	str	r2, [sp, #4]
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	462b      	mov	r3, r5
 800849a:	4a09      	ldr	r2, [pc, #36]	; (80084c0 <AT_ESP8266_ND+0x1760>)
 800849c:	4621      	mov	r1, r4
 800849e:	f006 f981 	bl	800e7a4 <FT_String_ND>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d10d      	bne.n	80084c4 <AT_ESP8266_ND+0x1764>
				{
					AT_decode=at_fail;
 80084a8:	2303      	movs	r3, #3
 80084aa:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80084ae:	e04f      	b.n	8008550 <AT_ESP8266_ND+0x17f0>
 80084b0:	08010888 	.word	0x08010888
 80084b4:	08010898 	.word	0x08010898
 80084b8:	080108a8 	.word	0x080108a8
 80084bc:	080108b8 	.word	0x080108b8
 80084c0:	080108c4 	.word	0x080108c4
				}
			else
			{
			//------------------busy processing------------------//
				a->_n_fcomp=strlen("busy p...");
 80084c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2209      	movs	r2, #9
 80084d0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 80084d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80084e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80084f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80084fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008502:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800850c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008510:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008514:	6812      	ldr	r2, [r2, #0]
 8008516:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800851a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800851e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008522:	6809      	ldr	r1, [r1, #0]
 8008524:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8008528:	2600      	movs	r6, #0
 800852a:	9604      	str	r6, [sp, #16]
 800852c:	9103      	str	r1, [sp, #12]
 800852e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008532:	9102      	str	r1, [sp, #8]
 8008534:	9201      	str	r2, [sp, #4]
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	462b      	mov	r3, r5
 800853a:	4a77      	ldr	r2, [pc, #476]	; (8008718 <AT_ESP8266_ND+0x19b8>)
 800853c:	4621      	mov	r1, r4
 800853e:	f006 f931 	bl	800e7a4 <FT_String_ND>
 8008542:	4603      	mov	r3, r0
 8008544:	2b01      	cmp	r3, #1
 8008546:	d103      	bne.n	8008550 <AT_ESP8266_ND+0x17f0>
					{
					AT_decode=at_busy_p;
 8008548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800854c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}}}}}}}}}}
	}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 8008550:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008554:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800855e:	3b01      	subs	r3, #1
 8008560:	2b08      	cmp	r3, #8
 8008562:	f201 84c6 	bhi.w	8009ef2 <AT_ESP8266_ND+0x3192>
 8008566:	a201      	add	r2, pc, #4	; (adr r2, 800856c <AT_ESP8266_ND+0x180c>)
 8008568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856c:	08008591 	.word	0x08008591
 8008570:	08008721 	.word	0x08008721
 8008574:	080089a3 	.word	0x080089a3
 8008578:	08008b21 	.word	0x08008b21
 800857c:	08008cf9 	.word	0x08008cf9
 8008580:	08008fcd 	.word	0x08008fcd
 8008584:	08009285 	.word	0x08009285
 8008588:	0800979d 	.word	0x0800979d
 800858c:	08009973 	.word	0x08009973
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008590:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008594:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 80085a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d14f      	bne.n	8008652 <AT_ESP8266_ND+0x18f2>
 80085b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d04b      	beq.n	8008652 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_error)
 80085ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d047      	beq.n	8008652 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_restart)
 80085c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085c6:	2b04      	cmp	r3, #4
 80085c8:	d043      	beq.n	8008652 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_tcp_enviado_ok))
 80085ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085ce:	2b13      	cmp	r3, #19
 80085d0:	d03f      	beq.n	8008652 <AT_ESP8266_ND+0x18f2>
						{
						a->_pasos=0;
 80085d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2200      	movs	r2, #0
 80085de:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80085e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 80085f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008600:	4620      	mov	r0, r4
 8008602:	f7f7 fdf7 	bl	80001f4 <strlen>
 8008606:	4603      	mov	r3, r0
 8008608:	4423      	add	r3, r4
 800860a:	4a44      	ldr	r2, [pc, #272]	; (800871c <AT_ESP8266_ND+0x19bc>)
 800860c:	461c      	mov	r4, r3
 800860e:	4613      	mov	r3, r2
 8008610:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008612:	6020      	str	r0, [r4, #0]
 8008614:	6061      	str	r1, [r4, #4]
 8008616:	60a2      	str	r2, [r4, #8]
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 800861c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008620:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800862a:	4618      	mov	r0, r3
 800862c:	f7f7 fde2 	bl	80001f4 <strlen>
 8008630:	4603      	mov	r3, r0
 8008632:	461a      	mov	r2, r3
 8008634:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008638:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=100;
 8008642:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008646:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2264      	movs	r2, #100	; 0x64
 800864e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 8008652:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008656:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008660:	1c5a      	adds	r2, r3, #1
 8008662:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008666:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 8008670:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008674:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800867e:	2b00      	cmp	r3, #0
 8008680:	d11b      	bne.n	80086ba <AT_ESP8266_ND+0x195a>
 8008682:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008686:	2b01      	cmp	r3, #1
 8008688:	d023      	beq.n	80086d2 <AT_ESP8266_ND+0x1972>
 800868a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800868e:	2b1c      	cmp	r3, #28
 8008690:	d01f      	beq.n	80086d2 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_error)
 8008692:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008696:	2b02      	cmp	r3, #2
 8008698:	d01b      	beq.n	80086d2 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_restart)
 800869a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800869e:	2b04      	cmp	r3, #4
 80086a0:	d017      	beq.n	80086d2 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_wifi_connected)
 80086a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086a6:	2b0b      	cmp	r3, #11
 80086a8:	d013      	beq.n	80086d2 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_wifi_gotip)
 80086aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086ae:	2b0c      	cmp	r3, #12
 80086b0:	d00f      	beq.n	80086d2 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_tcp_enviado_ok)))
 80086b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086b6:	2b13      	cmp	r3, #19
 80086b8:	d00b      	beq.n	80086d2 <AT_ESP8266_ND+0x1972>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 80086ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80086c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086cc:	4293      	cmp	r3, r2
 80086ce:	f341 841a 	ble.w	8009f06 <AT_ESP8266_ND+0x31a6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80086d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80086e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80086e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80086f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2200      	movs	r2, #0
 8008700:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008704:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008708:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2200      	movs	r2, #0
 8008710:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}

			}
			break;
 8008714:	f001 bbf7 	b.w	8009f06 <AT_ESP8266_ND+0x31a6>
 8008718:	080108d0 	.word	0x080108d0
 800871c:	080108dc 	.word	0x080108dc
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008720:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008724:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8008730:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008734:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800873e:	2b01      	cmp	r3, #1
 8008740:	f040 80c8 	bne.w	80088d4 <AT_ESP8266_ND+0x1b74>
 8008744:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008748:	2b01      	cmp	r3, #1
 800874a:	f000 80c3 	beq.w	80088d4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_error)
 800874e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008752:	2b02      	cmp	r3, #2
 8008754:	f000 80be 	beq.w	80088d4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_fail)
 8008758:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800875c:	2b03      	cmp	r3, #3
 800875e:	f000 80b9 	beq.w	80088d4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_restart)
 8008762:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008766:	2b04      	cmp	r3, #4
 8008768:	f000 80b4 	beq.w	80088d4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_disconnect)
 800876c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008770:	2b0a      	cmp	r3, #10
 8008772:	f000 80af 	beq.w	80088d4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_connected)
 8008776:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800877a:	2b0b      	cmp	r3, #11
 800877c:	f000 80aa 	beq.w	80088d4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_gotip))
 8008780:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008784:	2b0c      	cmp	r3, #12
 8008786:	f000 80a5 	beq.w	80088d4 <AT_ESP8266_ND+0x1b74>
						{
						a->_pasos=0;
 800878a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800878e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2200      	movs	r2, #0
 8008796:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800879a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800879e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 80087aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80087b8:	4620      	mov	r0, r4
 80087ba:	f7f7 fd1b 	bl	80001f4 <strlen>
 80087be:	4603      	mov	r3, r0
 80087c0:	4423      	add	r3, r4
 80087c2:	49d5      	ldr	r1, [pc, #852]	; (8008b18 <AT_ESP8266_ND+0x1db8>)
 80087c4:	461a      	mov	r2, r3
 80087c6:	460b      	mov	r3, r1
 80087c8:	cb03      	ldmia	r3!, {r0, r1}
 80087ca:	6010      	str	r0, [r2, #0]
 80087cc:	6051      	str	r1, [r2, #4]
 80087ce:	881b      	ldrh	r3, [r3, #0]
 80087d0:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 80087d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80087e0:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80087e4:	2201      	movs	r2, #1
 80087e6:	4618      	mov	r0, r3
 80087e8:	f006 fd95 	bl	800f316 <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 80087ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80087fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	1d9d      	adds	r5, r3, #6
 8008806:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800880a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	3306      	adds	r3, #6
 8008812:	4618      	mov	r0, r3
 8008814:	f7f7 fcee 	bl	80001f4 <strlen>
 8008818:	4603      	mov	r3, r0
 800881a:	461a      	mov	r2, r3
 800881c:	4629      	mov	r1, r5
 800881e:	4620      	mov	r0, r4
 8008820:	f006 fd79 	bl	800f316 <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 8008824:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008828:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008832:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008836:	4618      	mov	r0, r3
 8008838:	f7f7 fcdc 	bl	80001f4 <strlen>
 800883c:	4602      	mov	r2, r0
 800883e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008842:	4619      	mov	r1, r3
 8008844:	4620      	mov	r0, r4
 8008846:	f006 fd66 	bl	800f316 <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 800884a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800884e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008858:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800885c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8008866:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800886a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	3326      	adds	r3, #38	; 0x26
 8008872:	4618      	mov	r0, r3
 8008874:	f7f7 fcbe 	bl	80001f4 <strlen>
 8008878:	4603      	mov	r3, r0
 800887a:	461a      	mov	r2, r3
 800887c:	4629      	mov	r1, r5
 800887e:	4620      	mov	r0, r4
 8008880:	f006 fd49 	bl	800f316 <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 8008884:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008888:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008892:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8008896:	2203      	movs	r2, #3
 8008898:	4618      	mov	r0, r3
 800889a:	f006 fd3c 	bl	800f316 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 800889e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7f7 fca1 	bl	80001f4 <strlen>
 80088b2:	4603      	mov	r3, r0
 80088b4:	461a      	mov	r2, r3
 80088b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=200;
 80088c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	22c8      	movs	r2, #200	; 0xc8
 80088d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 80088d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80088e2:	1c5a      	adds	r2, r3, #1
 80088e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 80088f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008900:	2b00      	cmp	r3, #0
 8008902:	d11b      	bne.n	800893c <AT_ESP8266_ND+0x1bdc>
 8008904:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008908:	2b01      	cmp	r3, #1
 800890a:	d023      	beq.n	8008954 <AT_ESP8266_ND+0x1bf4>
 800890c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008910:	2b02      	cmp	r3, #2
 8008912:	d01f      	beq.n	8008954 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_fail)
 8008914:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008918:	2b03      	cmp	r3, #3
 800891a:	d01b      	beq.n	8008954 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_restart)
 800891c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008920:	2b04      	cmp	r3, #4
 8008922:	d017      	beq.n	8008954 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_disconnect)
 8008924:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008928:	2b0a      	cmp	r3, #10
 800892a:	d013      	beq.n	8008954 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_connected)
 800892c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008930:	2b0b      	cmp	r3, #11
 8008932:	d00f      	beq.n	8008954 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_gotip)))
 8008934:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008938:	2b0c      	cmp	r3, #12
 800893a:	d00b      	beq.n	8008954 <AT_ESP8266_ND+0x1bf4>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 800893c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008940:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 800894a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800894e:	4293      	cmp	r3, r2
 8008950:	f341 82db 	ble.w	8009f0a <AT_ESP8266_ND+0x31aa>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008954:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008958:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 8008966:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800896a:	2b0a      	cmp	r3, #10
 800896c:	d00f      	beq.n	800898e <AT_ESP8266_ND+0x1c2e>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 800896e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008972:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2200      	movs	r2, #0
 800897a:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							a->_ejecucion=0;
 800897e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008982:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2200      	movs	r2, #0
 800898a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 800898e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008992:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2200      	movs	r2, #0
 800899a:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 800899e:	f001 bab4 	b.w	8009f0a <AT_ESP8266_ND+0x31aa>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80089a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 80089b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d14d      	bne.n	8008a60 <AT_ESP8266_ND+0x1d00>
 80089c4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089c8:	2b04      	cmp	r3, #4
 80089ca:	d049      	beq.n	8008a60 <AT_ESP8266_ND+0x1d00>
 80089cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089d0:	2b0a      	cmp	r3, #10
 80089d2:	d045      	beq.n	8008a60 <AT_ESP8266_ND+0x1d00>
 80089d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089d8:	2b0d      	cmp	r3, #13
 80089da:	d041      	beq.n	8008a60 <AT_ESP8266_ND+0x1d00>
						{
						a->_pasos=0;
 80089dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80089ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",strlen("AT+CWQAP\r\n"));
 80089fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f7f7 fbf2 	bl	80001f4 <strlen>
 8008a10:	4603      	mov	r3, r0
 8008a12:	4423      	add	r3, r4
 8008a14:	4941      	ldr	r1, [pc, #260]	; (8008b1c <AT_ESP8266_ND+0x1dbc>)
 8008a16:	461a      	mov	r2, r3
 8008a18:	460b      	mov	r3, r1
 8008a1a:	cb03      	ldmia	r3!, {r0, r1}
 8008a1c:	6010      	str	r0, [r2, #0]
 8008a1e:	6051      	str	r1, [r2, #4]
 8008a20:	8819      	ldrh	r1, [r3, #0]
 8008a22:	789b      	ldrb	r3, [r3, #2]
 8008a24:	8111      	strh	r1, [r2, #8]
 8008a26:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008a28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7f7 fbdc 	bl	80001f4 <strlen>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	461a      	mov	r2, r3
 8008a40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 8008a4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008a5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008a60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008a6e:	1c5a      	adds	r2, r3, #1
 8008a70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008a7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d113      	bne.n	8008ab8 <AT_ESP8266_ND+0x1d58>
 8008a90:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a94:	2b0a      	cmp	r3, #10
 8008a96:	d01b      	beq.n	8008ad0 <AT_ESP8266_ND+0x1d70>
 8008a98:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a9c:	2b0b      	cmp	r3, #11
 8008a9e:	d017      	beq.n	8008ad0 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_wifi_gotip)
 8008aa0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008aa4:	2b0c      	cmp	r3, #12
 8008aa6:	d013      	beq.n	8008ad0 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_restart	)
 8008aa8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008aac:	2b04      	cmp	r3, #4
 8008aae:	d00f      	beq.n	8008ad0 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_deconectar_ok )))
 8008ab0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ab4:	2b0d      	cmp	r3, #13
 8008ab6:	d00b      	beq.n	8008ad0 <AT_ESP8266_ND+0x1d70>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008ab8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008abc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aca:	4293      	cmp	r3, r2
 8008acc:	f341 821f 	ble.w	8009f0e <AT_ESP8266_ND+0x31ae>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008ad0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ad4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008ade:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008ae2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ae6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008af2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008af6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008b02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008b12:	f001 b9fc 	b.w	8009f0e <AT_ESP8266_ND+0x31ae>
 8008b16:	bf00      	nop
 8008b18:	080108ec 	.word	0x080108ec
 8008b1c:	080108f8 	.word	0x080108f8
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008b20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 8008b30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d16b      	bne.n	8008c1a <AT_ESP8266_ND+0x1eba>
 8008b42:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b46:	2b04      	cmp	r3, #4
 8008b48:	d067      	beq.n	8008c1a <AT_ESP8266_ND+0x1eba>
									   &&(AT_decode!=at_ok)
 8008b4a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d063      	beq.n	8008c1a <AT_ESP8266_ND+0x1eba>
									   &&(AT_decode!=at_error))
 8008b52:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d05f      	beq.n	8008c1a <AT_ESP8266_ND+0x1eba>
						{
						a->_pasos=0;
 8008b5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008b6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 8008b7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d115      	bne.n	8008bb8 <AT_ESP8266_ND+0x1e58>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 8008b8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f7f7 fb2a 	bl	80001f4 <strlen>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	4423      	add	r3, r4
 8008ba4:	4a52      	ldr	r2, [pc, #328]	; (8008cf0 <AT_ESP8266_ND+0x1f90>)
 8008ba6:	461c      	mov	r4, r3
 8008ba8:	4613      	mov	r3, r2
 8008baa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008bac:	6020      	str	r0, [r4, #0]
 8008bae:	6061      	str	r1, [r4, #4]
 8008bb0:	60a2      	str	r2, [r4, #8]
 8008bb2:	881b      	ldrh	r3, [r3, #0]
 8008bb4:	81a3      	strh	r3, [r4, #12]
 8008bb6:	e014      	b.n	8008be2 <AT_ESP8266_ND+0x1e82>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 8008bb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f7f7 fb14 	bl	80001f4 <strlen>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	4423      	add	r3, r4
 8008bd0:	4a48      	ldr	r2, [pc, #288]	; (8008cf4 <AT_ESP8266_ND+0x1f94>)
 8008bd2:	461c      	mov	r4, r3
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008bd8:	6020      	str	r0, [r4, #0]
 8008bda:	6061      	str	r1, [r4, #4]
 8008bdc:	60a2      	str	r2, [r4, #8]
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008be2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008be6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7f7 faff 	bl	80001f4 <strlen>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bfe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 8008c08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008c16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008c1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008c28:	1c5a      	adds	r2, r3, #1
 8008c2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008c38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d123      	bne.n	8008c92 <AT_ESP8266_ND+0x1f32>
 8008c4a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d02b      	beq.n	8008caa <AT_ESP8266_ND+0x1f4a>
 8008c52:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c56:	2b0b      	cmp	r3, #11
 8008c58:	d027      	beq.n	8008caa <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_wifi_gotip)
 8008c5a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c5e:	2b0c      	cmp	r3, #12
 8008c60:	d023      	beq.n	8008caa <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_restart)
 8008c62:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c66:	2b04      	cmp	r3, #4
 8008c68:	d01f      	beq.n	8008caa <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_error)
 8008c6a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d01b      	beq.n	8008caa <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_multiple_conn_ok)
 8008c72:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c76:	2b07      	cmp	r3, #7
 8008c78:	d017      	beq.n	8008caa <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_no_multiple_conn_ok)
 8008c7a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c7e:	2b08      	cmp	r3, #8
 8008c80:	d013      	beq.n	8008caa <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_multiple_conn_err)
 8008c82:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c86:	2b1e      	cmp	r3, #30
 8008c88:	d00f      	beq.n	8008caa <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_no_multiple_conn_err)))
 8008c8a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c8e:	2b1f      	cmp	r3, #31
 8008c90:	d00b      	beq.n	8008caa <AT_ESP8266_ND+0x1f4a>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008c92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	f341 8134 	ble.w	8009f12 <AT_ESP8266_ND+0x31b2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008caa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008cb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008cbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008ccc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008cdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ce0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008cec:	f001 b911 	b.w	8009f12 <AT_ESP8266_ND+0x31b2>
 8008cf0:	08010904 	.word	0x08010904
 8008cf4:	08010914 	.word	0x08010914
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008cf8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 8008d08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	f040 80f3 	bne.w	8008f02 <AT_ESP8266_ND+0x21a2>
 8008d1c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d20:	2b04      	cmp	r3, #4
 8008d22:	f000 80ee 	beq.w	8008f02 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_ok)
 8008d26:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	f000 80e9 	beq.w	8008f02 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_error)
 8008d30:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	f000 80e4 	beq.w	8008f02 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_def_ip_err)
 8008d3a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d3e:	2b21      	cmp	r3, #33	; 0x21
 8008d40:	f000 80df 	beq.w	8008f02 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_def_ip_ok))
 8008d44:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d48:	2b1b      	cmp	r3, #27
 8008d4a:	f000 80da 	beq.w	8008f02 <AT_ESP8266_ND+0x21a2>
						{
						a->_pasos=0;
 8008d4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008d5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 8008d6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	f7f7 fa39 	bl	80001f4 <strlen>
 8008d82:	4603      	mov	r3, r0
 8008d84:	4423      	add	r3, r4
 8008d86:	4990      	ldr	r1, [pc, #576]	; (8008fc8 <AT_ESP8266_ND+0x2268>)
 8008d88:	461a      	mov	r2, r3
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	cb03      	ldmia	r3!, {r0, r1}
 8008d8e:	6010      	str	r0, [r2, #0]
 8008d90:	6051      	str	r1, [r2, #4]
 8008d92:	8819      	ldrh	r1, [r3, #0]
 8008d94:	789b      	ldrb	r3, [r3, #2]
 8008d96:	8111      	strh	r1, [r2, #8]
 8008d98:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 8008d9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008da8:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008dac:	2201      	movs	r2, #1
 8008dae:	4618      	mov	r0, r3
 8008db0:	f006 fab1 	bl	800f316 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8008db4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008db8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008dc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8008dd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	334c      	adds	r3, #76	; 0x4c
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7f7 fa09 	bl	80001f4 <strlen>
 8008de2:	4603      	mov	r3, r0
 8008de4:	461a      	mov	r2, r3
 8008de6:	4629      	mov	r1, r5
 8008de8:	4620      	mov	r0, r4
 8008dea:	f006 fa94 	bl	800f316 <strncat>
						strncat(a->_uart2snd,separador,3);
 8008dee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008df2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008dfc:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008e00:	2203      	movs	r2, #3
 8008e02:	4618      	mov	r0, r3
 8008e04:	f006 fa87 	bl	800f316 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 8008e08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008e16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f103 0562 	add.w	r5, r3, #98	; 0x62
 8008e24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3362      	adds	r3, #98	; 0x62
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7f7 f9df 	bl	80001f4 <strlen>
 8008e36:	4603      	mov	r3, r0
 8008e38:	461a      	mov	r2, r3
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	f006 fa6a 	bl	800f316 <strncat>
						strncat(a->_uart2snd,separador,3);
 8008e42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008e50:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008e54:	2203      	movs	r2, #3
 8008e56:	4618      	mov	r0, r3
 8008e58:	f006 fa5d 	bl	800f316 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8008e5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008e6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f103 0572 	add.w	r5, r3, #114	; 0x72
 8008e78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3372      	adds	r3, #114	; 0x72
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7f7 f9b5 	bl	80001f4 <strlen>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	4629      	mov	r1, r5
 8008e90:	4620      	mov	r0, r4
 8008e92:	f006 fa40 	bl	800f316 <strncat>
						strncat(a->_uart2snd,&comillas,1);
 8008e96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ea4:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f006 fa33 	bl	800f316 <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008eb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ebe:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f006 fa26 	bl	800f316 <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8008eca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ece:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7f7 f98b 	bl	80001f4 <strlen>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ee6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008ef0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ef4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008efe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008f02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008f20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d11b      	bne.n	8008f6a <AT_ESP8266_ND+0x220a>
 8008f32:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d023      	beq.n	8008f82 <AT_ESP8266_ND+0x2222>
 8008f3a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f3e:	2b0b      	cmp	r3, #11
 8008f40:	d01f      	beq.n	8008f82 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_wifi_gotip)
 8008f42:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f46:	2b0c      	cmp	r3, #12
 8008f48:	d01b      	beq.n	8008f82 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_restart)
 8008f4a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f4e:	2b04      	cmp	r3, #4
 8008f50:	d017      	beq.n	8008f82 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_error)
 8008f52:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d013      	beq.n	8008f82 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_def_ip_err)
 8008f5a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f5e:	2b21      	cmp	r3, #33	; 0x21
 8008f60:	d00f      	beq.n	8008f82 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_def_ip_ok)))
 8008f62:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f66:	2b1b      	cmp	r3, #27
 8008f68:	d00b      	beq.n	8008f82 <AT_ESP8266_ND+0x2222>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008f6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	f340 87ca 	ble.w	8009f16 <AT_ESP8266_ND+0x31b6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008f82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008f90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008f94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008fa4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fa8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008fb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008fc4:	f000 bfa7 	b.w	8009f16 <AT_ESP8266_ND+0x31b6>
 8008fc8:	08010804 	.word	0x08010804
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008fcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8008fdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fe0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	f040 80e2 	bne.w	80091b4 <AT_ESP8266_ND+0x2454>
 8008ff0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ff4:	2b0b      	cmp	r3, #11
 8008ff6:	f000 80dd 	beq.w	80091b4 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_wifi_gotip)
 8008ffa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ffe:	2b0c      	cmp	r3, #12
 8009000:	f000 80d8 	beq.w	80091b4 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8009004:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009008:	2b0e      	cmp	r3, #14
 800900a:	f000 80d3 	beq.w	80091b4 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_conectado)
 800900e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009012:	2b0f      	cmp	r3, #15
 8009014:	f000 80ce 	beq.w	80091b4 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_desconectado)
 8009018:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800901c:	2b10      	cmp	r3, #16
 800901e:	f000 80c9 	beq.w	80091b4 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_error))
 8009022:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009026:	2b02      	cmp	r3, #2
 8009028:	f000 80c4 	beq.w	80091b4 <AT_ESP8266_ND+0x2454>
						{
						a->_pasos=0;
 800902c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009030:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2200      	movs	r2, #0
 8009038:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800903c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009040:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2201      	movs	r2, #1
 8009048:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 800904c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009050:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800905a:	4620      	mov	r0, r4
 800905c:	f7f7 f8ca 	bl	80001f4 <strlen>
 8009060:	4603      	mov	r3, r0
 8009062:	4423      	add	r3, r4
 8009064:	4aa1      	ldr	r2, [pc, #644]	; (80092ec <AT_ESP8266_ND+0x258c>)
 8009066:	461c      	mov	r4, r3
 8009068:	4613      	mov	r3, r2
 800906a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800906c:	6020      	str	r0, [r4, #0]
 800906e:	6061      	str	r1, [r4, #4]
 8009070:	60a2      	str	r2, [r4, #8]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8009076:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800907a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009084:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8009088:	2201      	movs	r2, #1
 800908a:	4618      	mov	r0, r3
 800908c:	f006 f943 	bl	800f316 <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8009090:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009094:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800909e:	4620      	mov	r0, r4
 80090a0:	f7f7 f8a8 	bl	80001f4 <strlen>
 80090a4:	4603      	mov	r3, r0
 80090a6:	4423      	add	r3, r4
 80090a8:	4a91      	ldr	r2, [pc, #580]	; (80092f0 <AT_ESP8266_ND+0x2590>)
 80090aa:	6810      	ldr	r0, [r2, #0]
 80090ac:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 80090ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80090bc:	f507 710a 	add.w	r1, r7, #552	; 0x228
 80090c0:	2203      	movs	r2, #3
 80090c2:	4618      	mov	r0, r3
 80090c4:	f006 f927 	bl	800f316 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 80090c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80090d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f103 0536 	add.w	r5, r3, #54	; 0x36
 80090e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	3336      	adds	r3, #54	; 0x36
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7f7 f87f 	bl	80001f4 <strlen>
 80090f6:	4603      	mov	r3, r0
 80090f8:	461a      	mov	r2, r3
 80090fa:	4629      	mov	r1, r5
 80090fc:	4620      	mov	r0, r4
 80090fe:	f006 f90a 	bl	800f316 <strncat>
						strncat(a->_uart2snd,separador2,2);
 8009102:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009106:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009110:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8009114:	2202      	movs	r2, #2
 8009116:	4618      	mov	r0, r3
 8009118:	f006 f8fd 	bl	800f316 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 800911c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009120:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800912a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800912e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8009138:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800913c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3346      	adds	r3, #70	; 0x46
 8009144:	4618      	mov	r0, r3
 8009146:	f7f7 f855 	bl	80001f4 <strlen>
 800914a:	4603      	mov	r3, r0
 800914c:	461a      	mov	r2, r3
 800914e:	4629      	mov	r1, r5
 8009150:	4620      	mov	r0, r4
 8009152:	f006 f8e0 	bl	800f316 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009156:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800915a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009164:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009168:	4618      	mov	r0, r3
 800916a:	f7f7 f843 	bl	80001f4 <strlen>
 800916e:	4602      	mov	r2, r0
 8009170:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009174:	4619      	mov	r1, r3
 8009176:	4620      	mov	r0, r4
 8009178:	f006 f8cd 	bl	800f316 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 800917c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009180:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800918a:	4618      	mov	r0, r3
 800918c:	f7f7 f832 	bl	80001f4 <strlen>
 8009190:	4603      	mov	r3, r0
 8009192:	461a      	mov	r2, r3
 8009194:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009198:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=600;
 80091a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f44f 7216 	mov.w	r2, #600	; 0x258
 80091b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 80091b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80091c2:	1c5a      	adds	r2, r3, #1
 80091c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 80091d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d120      	bne.n	8009226 <AT_ESP8266_ND+0x24c6>
 80091e4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091e8:	2b0a      	cmp	r3, #10
 80091ea:	d028      	beq.n	800923e <AT_ESP8266_ND+0x24de>
 80091ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091f0:	2b0b      	cmp	r3, #11
 80091f2:	d024      	beq.n	800923e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_wifi_gotip)
 80091f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091f8:	2b0c      	cmp	r3, #12
 80091fa:	d020      	beq.n	800923e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 80091fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009200:	2b0e      	cmp	r3, #14
 8009202:	d01c      	beq.n	800923e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_conectado)
 8009204:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009208:	2b0f      	cmp	r3, #15
 800920a:	d018      	beq.n	800923e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_desconectado)
 800920c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009210:	2b10      	cmp	r3, #16
 8009212:	d014      	beq.n	800923e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_error)
 8009214:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009218:	2b02      	cmp	r3, #2
 800921a:	d010      	beq.n	800923e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_busy_p)))
 800921c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009220:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009224:	d00b      	beq.n	800923e <AT_ESP8266_ND+0x24de>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8009226:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800922a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009234:	f241 3288 	movw	r2, #5000	; 0x1388
 8009238:	4293      	cmp	r3, r2
 800923a:	f340 866e 	ble.w	8009f1a <AT_ESP8266_ND+0x31ba>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800923e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009242:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800924c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8009250:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009254:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2200      	movs	r2, #0
 800925c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8009260:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009264:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2200      	movs	r2, #0
 800926c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8009270:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009274:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2200      	movs	r2, #0
 800927c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8009280:	f000 be4b 	b.w	8009f1a <AT_ESP8266_ND+0x31ba>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 8009284:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009288:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800928c:	2200      	movs	r2, #0
 800928e:	601a      	str	r2, [r3, #0]
 8009290:	2200      	movs	r2, #0
 8009292:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 8009294:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009298:	2b10      	cmp	r3, #16
 800929a:	d003      	beq.n	80092a4 <AT_ESP8266_ND+0x2544>
 800929c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092a0:	2b0a      	cmp	r3, #10
 80092a2:	d127      	bne.n	80092f4 <AT_ESP8266_ND+0x2594>
				{
					a->_estado=AT_decode;
 80092a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80092b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 80092b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 80092c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 80092d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80092e6:	f000 be1a 	b.w	8009f1e <AT_ESP8266_ND+0x31be>
 80092ea:	bf00      	nop
 80092ec:	08010924 	.word	0x08010924
 80092f0:	08010934 	.word	0x08010934
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 80092f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009302:	2b01      	cmp	r3, #1
 8009304:	f040 80d1 	bne.w	80094aa <AT_ESP8266_ND+0x274a>
 8009308:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800930c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009316:	2b00      	cmp	r3, #0
 8009318:	f040 80c7 	bne.w	80094aa <AT_ESP8266_ND+0x274a>
										a->_ejecucion=1;
 800931c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009320:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2201      	movs	r2, #1
 8009328:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 800932c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009330:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2218      	movs	r2, #24
 8009338:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800933c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009340:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2200      	movs	r2, #0
 8009348:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 800934c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009350:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800935a:	1c5a      	adds	r2, r3, #1
 800935c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009360:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 800936a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800936e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2200      	movs	r2, #0
 8009376:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 800937a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800937e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 800938a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800938e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009398:	4620      	mov	r0, r4
 800939a:	f7f6 ff2b 	bl	80001f4 <strlen>
 800939e:	4603      	mov	r3, r0
 80093a0:	4423      	add	r3, r4
 80093a2:	4abe      	ldr	r2, [pc, #760]	; (800969c <AT_ESP8266_ND+0x293c>)
 80093a4:	461c      	mov	r4, r3
 80093a6:	4613      	mov	r3, r2
 80093a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80093aa:	6020      	str	r0, [r4, #0]
 80093ac:	6061      	str	r1, [r4, #4]
 80093ae:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 80093b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 80093be:	f107 0214 	add.w	r2, r7, #20
 80093c2:	4611      	mov	r1, r2
 80093c4:	4618      	mov	r0, r3
 80093c6:	f005 fd1f 	bl	800ee08 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 80093ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80093d8:	f107 0314 	add.w	r3, r7, #20
 80093dc:	4618      	mov	r0, r3
 80093de:	f7f6 ff09 	bl	80001f4 <strlen>
 80093e2:	4602      	mov	r2, r0
 80093e4:	f107 0314 	add.w	r3, r7, #20
 80093e8:	4619      	mov	r1, r3
 80093ea:	4620      	mov	r0, r4
 80093ec:	f005 ff93 	bl	800f316 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 80093f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 80093fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009402:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800940c:	4619      	mov	r1, r3
 800940e:	4610      	mov	r0, r2
 8009410:	f006 f862 	bl	800f4d8 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009414:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009418:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009422:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009426:	2202      	movs	r2, #2
 8009428:	4618      	mov	r0, r3
 800942a:	f005 ff74 	bl	800f316 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 800942e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009432:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800943c:	4618      	mov	r0, r3
 800943e:	f7f6 fed9 	bl	80001f4 <strlen>
 8009442:	4603      	mov	r3, r0
 8009444:	461a      	mov	r2, r3
 8009446:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800944a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009454:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009458:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8009462:	4620      	mov	r0, r4
 8009464:	f7f6 fec6 	bl	80001f4 <strlen>
 8009468:	4603      	mov	r3, r0
 800946a:	4423      	add	r3, r4
 800946c:	4a8c      	ldr	r2, [pc, #560]	; (80096a0 <AT_ESP8266_ND+0x2940>)
 800946e:	461c      	mov	r4, r3
 8009470:	4613      	mov	r3, r2
 8009472:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009474:	6020      	str	r0, [r4, #0]
 8009476:	6061      	str	r1, [r4, #4]
 8009478:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 800947a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800947e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009488:	1c5a      	adds	r2, r3, #1
 800948a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800948e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=700;
 8009498:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800949c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80094a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 80094aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80094b8:	1c5a      	adds	r2, r3, #1
 80094ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 80094c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f040 80a6 	bne.w	8009628 <AT_ESP8266_ND+0x28c8>
 80094dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094e0:	2b13      	cmp	r3, #19
 80094e2:	f000 80a1 	beq.w	8009628 <AT_ESP8266_ND+0x28c8>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 80094e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f203 6294 	addw	r2, r3, #1684	; 0x694
 80094f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8009502:	4619      	mov	r1, r3
 8009504:	4610      	mov	r0, r2
 8009506:	f7f6 fe6b 	bl	80001e0 <strcmp>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d01b      	beq.n	8009548 <AT_ESP8266_ND+0x27e8>
 8009510:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009514:	2b01      	cmp	r3, #1
 8009516:	d017      	beq.n	8009548 <AT_ESP8266_ND+0x27e8>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 8009518:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800951c:	2b14      	cmp	r3, #20
 800951e:	d013      	beq.n	8009548 <AT_ESP8266_ND+0x27e8>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009520:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009524:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800952e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009532:	4293      	cmp	r3, r2
 8009534:	dd78      	ble.n	8009628 <AT_ESP8266_ND+0x28c8>
 8009536:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800953a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009544:	2b01      	cmp	r3, #1
 8009546:	d16f      	bne.n	8009628 <AT_ESP8266_ND+0x28c8>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 8009548:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800954c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009556:	f241 3288 	movw	r2, #5000	; 0x1388
 800955a:	4293      	cmp	r3, r2
 800955c:	dd0e      	ble.n	800957c <AT_ESP8266_ND+0x281c>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 800955e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009562:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 800956c:	1c5a      	adds	r2, r3, #1
 800956e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009572:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 800957c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009580:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 800958a:	1c5a      	adds	r2, r3, #1
 800958c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009590:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 800959a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800959e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80095a8:	1c5a      	adds	r2, r3, #1
 80095aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 80095b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 80095c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f203 4094 	addw	r0, r3, #1172	; 0x494
 80095d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f503 7125 	add.w	r1, r3, #660	; 0x294
 80095e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80095f2:	2361      	movs	r3, #97	; 0x61
 80095f4:	9300      	str	r3, [sp, #0]
 80095f6:	2301      	movs	r3, #1
 80095f8:	f005 fc3a 	bl	800ee70 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 80095fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009600:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 800960a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800960e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009618:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800961c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2200      	movs	r2, #0
 8009624:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 8009628:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800962c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009636:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800963a:	f040 8470 	bne.w	8009f1e <AT_ESP8266_ND+0x31be>
 800963e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009642:	2b13      	cmp	r3, #19
 8009644:	d02e      	beq.n	80096a4 <AT_ESP8266_ND+0x2944>
 8009646:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800964a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009654:	f241 3288 	movw	r2, #5000	; 0x1388
 8009658:	4293      	cmp	r3, r2
 800965a:	dc23      	bgt.n	80096a4 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_disconnect)
 800965c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009660:	2b0a      	cmp	r3, #10
 8009662:	d01f      	beq.n	80096a4 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_connected)
 8009664:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009668:	2b0b      	cmp	r3, #11
 800966a:	d01b      	beq.n	80096a4 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_gotip)
 800966c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009670:	2b0c      	cmp	r3, #12
 8009672:	d017      	beq.n	80096a4 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_desconectado)
 8009674:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009678:	2b10      	cmp	r3, #16
 800967a:	d013      	beq.n	80096a4 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_snd_err)
 800967c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009680:	2b11      	cmp	r3, #17
 8009682:	d00f      	beq.n	80096a4 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_enviado_error)
 8009684:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009688:	2b12      	cmp	r3, #18
 800968a:	d00b      	beq.n	80096a4 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_busy_p)))
 800968c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009690:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009694:	f040 8443 	bne.w	8009f1e <AT_ESP8266_ND+0x31be>
 8009698:	e004      	b.n	80096a4 <AT_ESP8266_ND+0x2944>
 800969a:	bf00      	nop
 800969c:	08010938 	.word	0x08010938
 80096a0:	08010944 	.word	0x08010944
									a->_debug_count5++;
 80096a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80096b2:	1c5a      	adds	r2, r3, #1
 80096b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 80096c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80096d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80096d4:	4293      	cmp	r3, r2
 80096d6:	dd25      	ble.n	8009724 <AT_ESP8266_ND+0x29c4>
										a->_debug_count8++;
 80096d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 80096e6:	1c5a      	adds	r2, r3, #1
 80096e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 80096f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009704:	1c5a      	adds	r2, r3, #1
 8009706:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800970a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009714:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009718:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2200      	movs	r2, #0
 8009720:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009724:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009728:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009732:	2b02      	cmp	r3, #2
 8009734:	dd10      	ble.n	8009758 <AT_ESP8266_ND+0x29f8>
 8009736:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800973a:	2b10      	cmp	r3, #16
 800973c:	d00c      	beq.n	8009758 <AT_ESP8266_ND+0x29f8>
 800973e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009742:	2b0a      	cmp	r3, #10
 8009744:	d008      	beq.n	8009758 <AT_ESP8266_ND+0x29f8>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 8009746:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800974a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	220f      	movs	r2, #15
 8009752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009756:	e008      	b.n	800976a <AT_ESP8266_ND+0x2a0a>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009758:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800975c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 800976a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800976e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2200      	movs	r2, #0
 8009776:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 800977a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800977e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2200      	movs	r2, #0
 8009786:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 800978a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800978e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2200      	movs	r2, #0
 8009796:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 800979a:	e3c0      	b.n	8009f1e <AT_ESP8266_ND+0x31be>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800979c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if( a->_enviaruart==1)
 80097ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d16f      	bne.n	800989e <AT_ESP8266_ND+0x2b3e>
						{
						a->_pasos=0;
 80097be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80097ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2201      	movs	r2, #1
 80097da:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 80097de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80097ec:	4620      	mov	r0, r4
 80097ee:	f7f6 fd01 	bl	80001f4 <strlen>
 80097f2:	4603      	mov	r3, r0
 80097f4:	4423      	add	r3, r4
 80097f6:	4a78      	ldr	r2, [pc, #480]	; (80099d8 <AT_ESP8266_ND+0x2c78>)
 80097f8:	461c      	mov	r4, r3
 80097fa:	4615      	mov	r5, r2
 80097fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097fe:	6020      	str	r0, [r4, #0]
 8009800:	6061      	str	r1, [r4, #4]
 8009802:	60a2      	str	r2, [r4, #8]
 8009804:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 8009806:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800980a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009814:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009818:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 8009822:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009826:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	335c      	adds	r3, #92	; 0x5c
 800982e:	4618      	mov	r0, r3
 8009830:	f7f6 fce0 	bl	80001f4 <strlen>
 8009834:	4603      	mov	r3, r0
 8009836:	461a      	mov	r2, r3
 8009838:	4629      	mov	r1, r5
 800983a:	4620      	mov	r0, r4
 800983c:	f005 fd6b 	bl	800f316 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009840:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009844:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800984e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009852:	4618      	mov	r0, r3
 8009854:	f7f6 fcce 	bl	80001f4 <strlen>
 8009858:	4602      	mov	r2, r0
 800985a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800985e:	4619      	mov	r1, r3
 8009860:	4620      	mov	r0, r4
 8009862:	f005 fd58 	bl	800f316 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8009866:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800986a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009874:	4618      	mov	r0, r3
 8009876:	f7f6 fcbd 	bl	80001f4 <strlen>
 800987a:	4603      	mov	r3, r0
 800987c:	461a      	mov	r2, r3
 800987e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009882:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=800;
 800988c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009890:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f44f 7248 	mov.w	r2, #800	; 0x320
 800989a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 800989e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80098ac:	1c5a      	adds	r2, r3, #1
 80098ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80098bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d123      	bne.n	8009916 <AT_ESP8266_ND+0x2bb6>
 80098ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098d2:	2b0a      	cmp	r3, #10
 80098d4:	d02b      	beq.n	800992e <AT_ESP8266_ND+0x2bce>
 80098d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098da:	2b0b      	cmp	r3, #11
 80098dc:	d027      	beq.n	800992e <AT_ESP8266_ND+0x2bce>
 80098de:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098e2:	2b0c      	cmp	r3, #12
 80098e4:	d023      	beq.n	800992e <AT_ESP8266_ND+0x2bce>
 80098e6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098ea:	2b0e      	cmp	r3, #14
 80098ec:	d01f      	beq.n	800992e <AT_ESP8266_ND+0x2bce>
 80098ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098f2:	2b0f      	cmp	r3, #15
 80098f4:	d01b      	beq.n	800992e <AT_ESP8266_ND+0x2bce>
 80098f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098fa:	2b10      	cmp	r3, #16
 80098fc:	d017      	beq.n	800992e <AT_ESP8266_ND+0x2bce>
 80098fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009902:	2b15      	cmp	r3, #21
 8009904:	d013      	beq.n	800992e <AT_ESP8266_ND+0x2bce>
 8009906:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800990a:	2b16      	cmp	r3, #22
 800990c:	d00f      	beq.n	800992e <AT_ESP8266_ND+0x2bce>
 800990e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009912:	2b17      	cmp	r3, #23
 8009914:	d00b      	beq.n	800992e <AT_ESP8266_ND+0x2bce>
 8009916:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800991a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009924:	f241 3288 	movw	r2, #5000	; 0x1388
 8009928:	4293      	cmp	r3, r2
 800992a:	f340 82fa 	ble.w	8009f22 <AT_ESP8266_ND+0x31c2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800992e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009932:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800993c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8009940:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009944:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2200      	movs	r2, #0
 800994c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8009950:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009954:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2200      	movs	r2, #0
 800995c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8009960:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009964:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2200      	movs	r2, #0
 800996c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
			}
			break;
 8009970:	e2d7      	b.n	8009f22 <AT_ESP8266_ND+0x31c2>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 8009972:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009976:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800997a:	2200      	movs	r2, #0
 800997c:	601a      	str	r2, [r3, #0]
 800997e:	2200      	movs	r2, #0
 8009980:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 8009982:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009986:	2b10      	cmp	r3, #16
 8009988:	d003      	beq.n	8009992 <AT_ESP8266_ND+0x2c32>
 800998a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800998e:	2b0a      	cmp	r3, #10
 8009990:	d124      	bne.n	80099dc <AT_ESP8266_ND+0x2c7c>
				{
					a->_estado=AT_decode;
 8009992:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009996:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80099a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 80099a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 80099b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2200      	movs	r2, #0
 80099c0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 80099c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80099d4:	e2a7      	b.n	8009f26 <AT_ESP8266_ND+0x31c6>
 80099d6:	bf00      	nop
 80099d8:	08010950 	.word	0x08010950
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 80099dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	f040 8102 	bne.w	8009bf4 <AT_ESP8266_ND+0x2e94>
 80099f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f040 80f8 	bne.w	8009bf4 <AT_ESP8266_ND+0x2e94>
										a->_ejecucion=1;
 8009a04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8009a14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2218      	movs	r2, #24
 8009a20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009a24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8009a34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009a42:	1c5a      	adds	r2, r3, #1
 8009a44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 8009a52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8009a62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 8009a72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009a80:	4620      	mov	r0, r4
 8009a82:	f7f6 fbb7 	bl	80001f4 <strlen>
 8009a86:	4603      	mov	r3, r0
 8009a88:	4423      	add	r3, r4
 8009a8a:	4a83      	ldr	r2, [pc, #524]	; (8009c98 <AT_ESP8266_ND+0x2f38>)
 8009a8c:	461c      	mov	r4, r3
 8009a8e:	4613      	mov	r3, r2
 8009a90:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009a92:	6020      	str	r0, [r4, #0]
 8009a94:	6061      	str	r1, [r4, #4]
 8009a96:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 8009a98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f8d3 3a94 	ldr.w	r3, [r3, #2708]	; 0xa94
 8009aa6:	f107 020c 	add.w	r2, r7, #12
 8009aaa:	4611      	mov	r1, r2
 8009aac:	4618      	mov	r0, r3
 8009aae:	f005 f9ab 	bl	800ee08 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 8009ab2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ab6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009ac0:	f107 030c 	add.w	r3, r7, #12
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7f6 fb95 	bl	80001f4 <strlen>
 8009aca:	4602      	mov	r2, r0
 8009acc:	f107 030c 	add.w	r3, r7, #12
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	f005 fc1f 	bl	800f316 <strncat>
										strncat(a->_uart2snd,",",1);
 8009ad8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009adc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f7f6 fb84 	bl	80001f4 <strlen>
 8009aec:	4603      	mov	r3, r0
 8009aee:	4423      	add	r3, r4
 8009af0:	496a      	ldr	r1, [pc, #424]	; (8009c9c <AT_ESP8266_ND+0x2f3c>)
 8009af2:	461a      	mov	r2, r3
 8009af4:	460b      	mov	r3, r1
 8009af6:	881b      	ldrh	r3, [r3, #0]
 8009af8:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8009afa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009afe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8009b08:	f107 020c 	add.w	r2, r7, #12
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f005 f97a 	bl	800ee08 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8009b14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009b22:	f107 030c 	add.w	r3, r7, #12
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7f6 fb64 	bl	80001f4 <strlen>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	f107 030c 	add.w	r3, r7, #12
 8009b32:	4619      	mov	r1, r3
 8009b34:	4620      	mov	r0, r4
 8009b36:	f005 fbee 	bl	800f316 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8009b3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8009b48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009b56:	4619      	mov	r1, r3
 8009b58:	4610      	mov	r0, r2
 8009b5a:	f005 fcbd 	bl	800f4d8 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009b5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009b6c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009b70:	2202      	movs	r2, #2
 8009b72:	4618      	mov	r0, r3
 8009b74:	f005 fbcf 	bl	800f316 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8009b78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7f6 fb34 	bl	80001f4 <strlen>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	461a      	mov	r2, r3
 8009b90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009b9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ba2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8009bac:	4620      	mov	r0, r4
 8009bae:	f7f6 fb21 	bl	80001f4 <strlen>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	4423      	add	r3, r4
 8009bb6:	4a3a      	ldr	r2, [pc, #232]	; (8009ca0 <AT_ESP8266_ND+0x2f40>)
 8009bb8:	461c      	mov	r4, r3
 8009bba:	4613      	mov	r3, r2
 8009bbc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009bbe:	6020      	str	r0, [r4, #0]
 8009bc0:	6061      	str	r1, [r4, #4]
 8009bc2:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8009bc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009bd2:	1c5a      	adds	r2, r3, #1
 8009bd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=900;
 8009be2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009be6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009bf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8009bf4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bf8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009c02:	1c5a      	adds	r2, r3, #1
 8009c04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009c12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f040 80b8 	bne.w	8009d96 <AT_ESP8266_ND+0x3036>
 8009c26:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009c2a:	2b13      	cmp	r3, #19
 8009c2c:	f000 80b3 	beq.w	8009d96 <AT_ESP8266_ND+0x3036>
 8009c30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8009c3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4610      	mov	r0, r2
 8009c50:	f7f6 fac6 	bl	80001e0 <strcmp>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d024      	beq.n	8009ca4 <AT_ESP8266_ND+0x2f44>
 8009c5a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d020      	beq.n	8009ca4 <AT_ESP8266_ND+0x2f44>
 8009c62:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009c66:	2b14      	cmp	r3, #20
 8009c68:	d01c      	beq.n	8009ca4 <AT_ESP8266_ND+0x2f44>
 8009c6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	f340 808a 	ble.w	8009d96 <AT_ESP8266_ND+0x3036>
 8009c82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	f040 8080 	bne.w	8009d96 <AT_ESP8266_ND+0x3036>
 8009c96:	e005      	b.n	8009ca4 <AT_ESP8266_ND+0x2f44>
 8009c98:	08010938 	.word	0x08010938
 8009c9c:	08010960 	.word	0x08010960
 8009ca0:	08010944 	.word	0x08010944
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 8009ca4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ca8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	dd17      	ble.n	8009cea <AT_ESP8266_ND+0x2f8a>
 8009cba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d10e      	bne.n	8009cea <AT_ESP8266_ND+0x2f8a>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8009ccc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ce0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 8009cea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8009cf8:	1c5a      	adds	r2, r3, #1
 8009cfa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cfe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 8009d08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009d16:	1c5a      	adds	r2, r3, #1
 8009d18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8009d26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2201      	movs	r2, #1
 8009d32:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009d36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8009d44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8009d52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009d60:	2361      	movs	r3, #97	; 0x61
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	2301      	movs	r3, #1
 8009d66:	f005 f883 	bl	800ee70 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009d6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009d78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009d86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2200      	movs	r2, #0
 8009d92:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 8009d96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009da4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009da8:	f040 80bd 	bne.w	8009f26 <AT_ESP8266_ND+0x31c6>
 8009dac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009db0:	2b13      	cmp	r3, #19
 8009db2:	d02b      	beq.n	8009e0c <AT_ESP8266_ND+0x30ac>
 8009db4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009db8:	2b0b      	cmp	r3, #11
 8009dba:	d027      	beq.n	8009e0c <AT_ESP8266_ND+0x30ac>
 8009dbc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009dc0:	2b0c      	cmp	r3, #12
 8009dc2:	d023      	beq.n	8009e0c <AT_ESP8266_ND+0x30ac>
 8009dc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009dc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	dc18      	bgt.n	8009e0c <AT_ESP8266_ND+0x30ac>
 8009dda:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009dde:	2b0a      	cmp	r3, #10
 8009de0:	d014      	beq.n	8009e0c <AT_ESP8266_ND+0x30ac>
 8009de2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009de6:	2b10      	cmp	r3, #16
 8009de8:	d010      	beq.n	8009e0c <AT_ESP8266_ND+0x30ac>
 8009dea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009dee:	2b11      	cmp	r3, #17
 8009df0:	d00c      	beq.n	8009e0c <AT_ESP8266_ND+0x30ac>
 8009df2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009df6:	2b12      	cmp	r3, #18
 8009df8:	d008      	beq.n	8009e0c <AT_ESP8266_ND+0x30ac>
 8009dfa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009dfe:	2b16      	cmp	r3, #22
 8009e00:	d004      	beq.n	8009e0c <AT_ESP8266_ND+0x30ac>
 8009e02:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009e06:	2b19      	cmp	r3, #25
 8009e08:	f040 808d 	bne.w	8009f26 <AT_ESP8266_ND+0x31c6>
									a->_debug_count5++;
 8009e0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009e1a:	1c5a      	adds	r2, r3, #1
 8009e1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 8009e2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	dd25      	ble.n	8009e8c <AT_ESP8266_ND+0x312c>
										a->_debug_count8++;
 8009e40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009e4e:	1c5a      	adds	r2, r3, #1
 8009e50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8009e5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009e6c:	1c5a      	adds	r2, r3, #1
 8009e6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009e7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009e8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	dd07      	ble.n	8009eae <AT_ESP8266_ND+0x314e>
 8009e9e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009ea2:	2b10      	cmp	r3, #16
 8009ea4:	d003      	beq.n	8009eae <AT_ESP8266_ND+0x314e>
 8009ea6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009eaa:	2b0a      	cmp	r3, #10
 8009eac:	d108      	bne.n	8009ec0 <AT_ESP8266_ND+0x3160>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009eae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009eb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009ebc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009ec0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ec4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009ed0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ed4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8009ee0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ee4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009ef0:	e019      	b.n	8009f26 <AT_ESP8266_ND+0x31c6>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8009ef2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ef6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8009f04:	e010      	b.n	8009f28 <AT_ESP8266_ND+0x31c8>
			break;
 8009f06:	bf00      	nop
 8009f08:	e00e      	b.n	8009f28 <AT_ESP8266_ND+0x31c8>
			break;
 8009f0a:	bf00      	nop
 8009f0c:	e00c      	b.n	8009f28 <AT_ESP8266_ND+0x31c8>
			break;
 8009f0e:	bf00      	nop
 8009f10:	e00a      	b.n	8009f28 <AT_ESP8266_ND+0x31c8>
			break;
 8009f12:	bf00      	nop
 8009f14:	e008      	b.n	8009f28 <AT_ESP8266_ND+0x31c8>
			break;
 8009f16:	bf00      	nop
 8009f18:	e006      	b.n	8009f28 <AT_ESP8266_ND+0x31c8>
			break;
 8009f1a:	bf00      	nop
 8009f1c:	e004      	b.n	8009f28 <AT_ESP8266_ND+0x31c8>
			break;
 8009f1e:	bf00      	nop
 8009f20:	e002      	b.n	8009f28 <AT_ESP8266_ND+0x31c8>
			break;
 8009f22:	bf00      	nop
 8009f24:	e000      	b.n	8009f28 <AT_ESP8266_ND+0x31c8>
			break;
 8009f26:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8009f28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
		a->_n_orig=0;
 8009f38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

		return (a->_estado);
 8009f48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 8009f56:	4618      	mov	r0, r3
 8009f58:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f60 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f72:	f240 328d 	movw	r2, #909	; 0x38d
 8009f76:	4293      	cmp	r3, r2
 8009f78:	f001 83c3 	beq.w	800b702 <WiFi_Conn_ND+0x17a2>
 8009f7c:	f240 328d 	movw	r2, #909	; 0x38d
 8009f80:	4293      	cmp	r3, r2
 8009f82:	f301 8453 	bgt.w	800b82c <WiFi_Conn_ND+0x18cc>
 8009f86:	f240 3289 	movw	r2, #905	; 0x389
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	f001 8335 	beq.w	800b5fa <WiFi_Conn_ND+0x169a>
 8009f90:	f240 3289 	movw	r2, #905	; 0x389
 8009f94:	4293      	cmp	r3, r2
 8009f96:	f301 8449 	bgt.w	800b82c <WiFi_Conn_ND+0x18cc>
 8009f9a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009f9e:	f001 8224 	beq.w	800b3ea <WiFi_Conn_ND+0x148a>
 8009fa2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009fa6:	f301 8441 	bgt.w	800b82c <WiFi_Conn_ND+0x18cc>
 8009faa:	f240 3229 	movw	r2, #809	; 0x329
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	f301 843c 	bgt.w	800b82c <WiFi_Conn_ND+0x18cc>
 8009fb4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009fb8:	f280 80a5 	bge.w	800a106 <WiFi_Conn_ND+0x1a6>
 8009fbc:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	f000 8776 	beq.w	800aeb2 <WiFi_Conn_ND+0xf52>
 8009fc6:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	f301 842e 	bgt.w	800b82c <WiFi_Conn_ND+0x18cc>
 8009fd0:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	f000 86fc 	beq.w	800add2 <WiFi_Conn_ND+0xe72>
 8009fda:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	f301 8424 	bgt.w	800b82c <WiFi_Conn_ND+0x18cc>
 8009fe4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009fe8:	f000 862b 	beq.w	800ac42 <WiFi_Conn_ND+0xce2>
 8009fec:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009ff0:	f301 841c 	bgt.w	800b82c <WiFi_Conn_ND+0x18cc>
 8009ff4:	f240 2261 	movw	r2, #609	; 0x261
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	f000 85b1 	beq.w	800ab60 <WiFi_Conn_ND+0xc00>
 8009ffe:	f240 2261 	movw	r2, #609	; 0x261
 800a002:	4293      	cmp	r3, r2
 800a004:	f301 8412 	bgt.w	800b82c <WiFi_Conn_ND+0x18cc>
 800a008:	f240 225d 	movw	r2, #605	; 0x25d
 800a00c:	4293      	cmp	r3, r2
 800a00e:	f000 8551 	beq.w	800aab4 <WiFi_Conn_ND+0xb54>
 800a012:	f240 225d 	movw	r2, #605	; 0x25d
 800a016:	4293      	cmp	r3, r2
 800a018:	f301 8408 	bgt.w	800b82c <WiFi_Conn_ND+0x18cc>
 800a01c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a020:	f000 84cf 	beq.w	800a9c2 <WiFi_Conn_ND+0xa62>
 800a024:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a028:	f301 8400 	bgt.w	800b82c <WiFi_Conn_ND+0x18cc>
 800a02c:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a030:	4293      	cmp	r3, r2
 800a032:	f000 846a 	beq.w	800a90a <WiFi_Conn_ND+0x9aa>
 800a036:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800a03a:	f281 83f7 	bge.w	800b82c <WiFi_Conn_ND+0x18cc>
 800a03e:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a042:	4293      	cmp	r3, r2
 800a044:	f000 8425 	beq.w	800a892 <WiFi_Conn_ND+0x932>
 800a048:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 800a04c:	f281 83ee 	bge.w	800b82c <WiFi_Conn_ND+0x18cc>
 800a050:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a054:	f000 83b0 	beq.w	800a7b8 <WiFi_Conn_ND+0x858>
 800a058:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a05c:	f301 83e6 	bgt.w	800b82c <WiFi_Conn_ND+0x18cc>
 800a060:	f240 1299 	movw	r2, #409	; 0x199
 800a064:	4293      	cmp	r3, r2
 800a066:	f000 8369 	beq.w	800a73c <WiFi_Conn_ND+0x7dc>
 800a06a:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 800a06e:	f281 83dd 	bge.w	800b82c <WiFi_Conn_ND+0x18cc>
 800a072:	f240 1295 	movw	r2, #405	; 0x195
 800a076:	4293      	cmp	r3, r2
 800a078:	f000 8329 	beq.w	800a6ce <WiFi_Conn_ND+0x76e>
 800a07c:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 800a080:	f281 83d4 	bge.w	800b82c <WiFi_Conn_ND+0x18cc>
 800a084:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a088:	f000 82a0 	beq.w	800a5cc <WiFi_Conn_ND+0x66c>
 800a08c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a090:	f301 83cc 	bgt.w	800b82c <WiFi_Conn_ND+0x18cc>
 800a094:	f240 1235 	movw	r2, #309	; 0x135
 800a098:	4293      	cmp	r3, r2
 800a09a:	f000 8271 	beq.w	800a580 <WiFi_Conn_ND+0x620>
 800a09e:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800a0a2:	f281 83c3 	bge.w	800b82c <WiFi_Conn_ND+0x18cc>
 800a0a6:	f240 1231 	movw	r2, #305	; 0x131
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	f000 8263 	beq.w	800a576 <WiFi_Conn_ND+0x616>
 800a0b0:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800a0b4:	f281 83ba 	bge.w	800b82c <WiFi_Conn_ND+0x18cc>
 800a0b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a0bc:	f000 8207 	beq.w	800a4ce <WiFi_Conn_ND+0x56e>
 800a0c0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a0c4:	f301 83b2 	bgt.w	800b82c <WiFi_Conn_ND+0x18cc>
 800a0c8:	2bd1      	cmp	r3, #209	; 0xd1
 800a0ca:	f000 81a0 	beq.w	800a40e <WiFi_Conn_ND+0x4ae>
 800a0ce:	2bd1      	cmp	r3, #209	; 0xd1
 800a0d0:	f301 83ac 	bgt.w	800b82c <WiFi_Conn_ND+0x18cc>
 800a0d4:	2bcd      	cmp	r3, #205	; 0xcd
 800a0d6:	f000 8170 	beq.w	800a3ba <WiFi_Conn_ND+0x45a>
 800a0da:	2bcd      	cmp	r3, #205	; 0xcd
 800a0dc:	f301 83a6 	bgt.w	800b82c <WiFi_Conn_ND+0x18cc>
 800a0e0:	2bc8      	cmp	r3, #200	; 0xc8
 800a0e2:	f000 80f1 	beq.w	800a2c8 <WiFi_Conn_ND+0x368>
 800a0e6:	2bc8      	cmp	r3, #200	; 0xc8
 800a0e8:	f301 83a0 	bgt.w	800b82c <WiFi_Conn_ND+0x18cc>
 800a0ec:	2b6d      	cmp	r3, #109	; 0x6d
 800a0ee:	f000 80b3 	beq.w	800a258 <WiFi_Conn_ND+0x2f8>
 800a0f2:	2b6d      	cmp	r3, #109	; 0x6d
 800a0f4:	f301 839a 	bgt.w	800b82c <WiFi_Conn_ND+0x18cc>
 800a0f8:	2b64      	cmp	r3, #100	; 0x64
 800a0fa:	d021      	beq.n	800a140 <WiFi_Conn_ND+0x1e0>
 800a0fc:	2b69      	cmp	r3, #105	; 0x69
 800a0fe:	f000 8096 	beq.w	800a22e <WiFi_Conn_ND+0x2ce>
 800a102:	f001 bb93 	b.w	800b82c <WiFi_Conn_ND+0x18cc>
 800a106:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800a10a:	2b09      	cmp	r3, #9
 800a10c:	f201 838e 	bhi.w	800b82c <WiFi_Conn_ND+0x18cc>
 800a110:	a201      	add	r2, pc, #4	; (adr r2, 800a118 <WiFi_Conn_ND+0x1b8>)
 800a112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a116:	bf00      	nop
 800a118:	0800afbf 	.word	0x0800afbf
 800a11c:	0800b82d 	.word	0x0800b82d
 800a120:	0800b82d 	.word	0x0800b82d
 800a124:	0800b82d 	.word	0x0800b82d
 800a128:	0800b82d 	.word	0x0800b82d
 800a12c:	0800b08d 	.word	0x0800b08d
 800a130:	0800b12d 	.word	0x0800b12d
 800a134:	0800b1cd 	.word	0x0800b1cd
 800a138:	0800b26d 	.word	0x0800b26d
 800a13c:	0800b30d 	.word	0x0800b30d
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a146:	2b64      	cmp	r3, #100	; 0x64
 800a148:	d046      	beq.n	800a1d8 <WiFi_Conn_ND+0x278>
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a150:	2b01      	cmp	r3, #1
 800a152:	d041      	beq.n	800a1d8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a15a:	2b1c      	cmp	r3, #28
 800a15c:	d03c      	beq.n	800a1d8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a164:	2b02      	cmp	r3, #2
 800a166:	d037      	beq.n	800a1d8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a16e:	2b04      	cmp	r3, #4
 800a170:	d032      	beq.n	800a1d8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a178:	2b13      	cmp	r3, #19
 800a17a:	d02d      	beq.n	800a1d8 <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f7fc fc5f 	bl	8006a40 <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d14e      	bne.n	800a22a <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f7fc fde7 	bl	8006d60 <AT_ESP8266_ND>
 800a192:	4602      	mov	r2, r0
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d109      	bne.n	800a1c0 <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	4610      	mov	r0, r2
 800a1bc:	f7f7 fbc6 	bl	800194c <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a1cc:	b29a      	uxth	r2, r3
 800a1ce:	2364      	movs	r3, #100	; 0x64
 800a1d0:	68b8      	ldr	r0, [r7, #8]
 800a1d2:	f7fb fbb9 	bl	8005948 <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 800a1d6:	e028      	b.n	800a22a <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d004      	beq.n	800a1ec <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 800a1e8:	2b1c      	cmp	r3, #28
 800a1ea:	d103      	bne.n	800a1f4 <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	226d      	movs	r2, #109	; 0x6d
 800a1f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d00f      	beq.n	800a21e <WiFi_Conn_ND+0x2be>
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a204:	2b04      	cmp	r3, #4
 800a206:	d00a      	beq.n	800a21e <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a20e:	2b0b      	cmp	r3, #11
 800a210:	d005      	beq.n	800a21e <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a218:	2b0c      	cmp	r3, #12
 800a21a:	f041 82d8 	bne.w	800b7ce <WiFi_Conn_ND+0x186e>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2269      	movs	r2, #105	; 0x69
 800a222:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 800a226:	f001 bad2 	b.w	800b7ce <WiFi_Conn_ND+0x186e>
 800a22a:	f001 bad0 	b.w	800b7ce <WiFi_Conn_ND+0x186e>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f7fc fc06 	bl	8006a40 <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2264      	movs	r2, #100	; 0x64
 800a238:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 800a254:	f001 baea 	b.w	800b82c <WiFi_Conn_ND+0x18cc>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00c      	beq.n	800a27c <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f7fc fc18 	bl	8006a98 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a26e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2200      	movs	r2, #0
 800a276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800a27a:	e00e      	b.n	800a29a <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f7fc fbf5 	bl	8006a6c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	22c8      	movs	r2, #200	; 0xc8
 800a286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2200      	movs	r2, #0
 800a296:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2a0:	2b04      	cmp	r3, #4
 800a2a2:	f041 8296 	bne.w	800b7d2 <WiFi_Conn_ND+0x1872>
					{
						Cambiar_CWMODE(b);
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f7fc fbca 	bl	8006a40 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2264      	movs	r2, #100	; 0x64
 800a2b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a2c4:	f001 ba85 	b.w	800b7d2 <WiFi_Conn_ND+0x1872>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ce:	2bc8      	cmp	r3, #200	; 0xc8
 800a2d0:	d04f      	beq.n	800a372 <WiFi_Conn_ND+0x412>
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d04a      	beq.n	800a372 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d045      	beq.n	800a372 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ec:	2b03      	cmp	r3, #3
 800a2ee:	d040      	beq.n	800a372 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f6:	2b04      	cmp	r3, #4
 800a2f8:	d03b      	beq.n	800a372 <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a300:	2b0a      	cmp	r3, #10
 800a302:	d036      	beq.n	800a372 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a30a:	2b0b      	cmp	r3, #11
 800a30c:	d031      	beq.n	800a372 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a314:	2b0c      	cmp	r3, #12
 800a316:	d02c      	beq.n	800a372 <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f7fc fba7 	bl	8006a6c <ConectarWIFI>
						if(b->_enviaruart==1)
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a324:	2b01      	cmp	r3, #1
 800a326:	d124      	bne.n	800a372 <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f7fc fd19 	bl	8006d60 <AT_ESP8266_ND>
 800a32e:	4602      	mov	r2, r0
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2200      	movs	r2, #0
 800a33a:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a344:	2b01      	cmp	r3, #1
 800a346:	d109      	bne.n	800a35c <WiFi_Conn_ND+0x3fc>
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a354:	4619      	mov	r1, r3
 800a356:	4610      	mov	r0, r2
 800a358:	f7f7 faf8 	bl	800194c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a368:	b29a      	uxth	r2, r3
 800a36a:	2364      	movs	r3, #100	; 0x64
 800a36c:	68b8      	ldr	r0, [r7, #8]
 800a36e:	f7fb faeb 	bl	8005948 <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d004      	beq.n	800a386 <WiFi_Conn_ND+0x426>
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a382:	2b0c      	cmp	r3, #12
 800a384:	d103      	bne.n	800a38e <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	22d1      	movs	r2, #209	; 0xd1
 800a38a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a394:	2b02      	cmp	r3, #2
 800a396:	d00a      	beq.n	800a3ae <WiFi_Conn_ND+0x44e>
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a39e:	2b03      	cmp	r3, #3
 800a3a0:	d005      	beq.n	800a3ae <WiFi_Conn_ND+0x44e>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3a8:	2b20      	cmp	r3, #32
 800a3aa:	f041 8214 	bne.w	800b7d6 <WiFi_Conn_ND+0x1876>
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	22cd      	movs	r2, #205	; 0xcd
 800a3b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a3b6:	f001 ba0e 	b.w	800b7d6 <WiFi_Conn_ND+0x1876>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 800a3ba:	f241 3088 	movw	r0, #5000	; 0x1388
 800a3be:	f7f8 fe0f 	bl	8002fe0 <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f7fc fb52 	bl	8006a6c <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	22c8      	movs	r2, #200	; 0xc8
 800a3cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3e6:	2b04      	cmp	r3, #4
 800a3e8:	f041 81f7 	bne.w	800b7da <WiFi_Conn_ND+0x187a>
					{
						Cambiar_CWMODE(b);
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	f7fc fb27 	bl	8006a40 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2264      	movs	r2, #100	; 0x64
 800a3f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2200      	movs	r2, #0
 800a406:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a40a:	f001 b9e6 	b.w	800b7da <WiFi_Conn_ND+0x187a>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2200      	movs	r2, #0
 800a412:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d108      	bne.n	800a432 <WiFi_Conn_ND+0x4d2>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f240 3229 	movw	r2, #809	; 0x329
 800a426:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)) //Si me desconecto, me vuelvo a conectar
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a438:	2b0a      	cmp	r3, #10
 800a43a:	d004      	beq.n	800a446 <WiFi_Conn_ND+0x4e6>
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a442:	2b0d      	cmp	r3, #13
 800a444:	d10a      	bne.n	800a45c <WiFi_Conn_ND+0x4fc>
				{
					ConectarWIFI(b);
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f7fc fb10 	bl	8006a6c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	22c8      	movs	r2, #200	; 0xc8
 800a450:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2200      	movs	r2, #0
 800a458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a462:	2b04      	cmp	r3, #4
 800a464:	d10e      	bne.n	800a484 <WiFi_Conn_ND+0x524>
					{
						Cambiar_CWMODE(b);
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f7fc faea 	bl	8006a40 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2264      	movs	r2, #100	; 0x64
 800a470:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2200      	movs	r2, #0
 800a478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d011      	beq.n	800a4b2 <WiFi_Conn_ND+0x552>
				{//
					CrearServidorTCP(b);
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f7fc fb5a 	bl	8006b48 <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a49a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 800a4ae:	f001 b9bd 	b.w	800b82c <WiFi_Conn_ND+0x18cc>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	f7fc faf0 	bl	8006a98 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a4be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a4ca:	f001 b9af 	b.w	800b82c <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a4d8:	d03b      	beq.n	800a552 <WiFi_Conn_ND+0x5f2>
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e0:	2b04      	cmp	r3, #4
 800a4e2:	d036      	beq.n	800a552 <WiFi_Conn_ND+0x5f2>
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ea:	2b0a      	cmp	r3, #10
 800a4ec:	d031      	beq.n	800a552 <WiFi_Conn_ND+0x5f2>
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4f4:	2b0d      	cmp	r3, #13
 800a4f6:	d02c      	beq.n	800a552 <WiFi_Conn_ND+0x5f2>
				{
						DesconectarWIFI(b);
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f7fc faf9 	bl	8006af0 <DesconectarWIFI>
						if(b->_enviaruart==1)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a504:	2b01      	cmp	r3, #1
 800a506:	d124      	bne.n	800a552 <WiFi_Conn_ND+0x5f2>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f7fc fc29 	bl	8006d60 <AT_ESP8266_ND>
 800a50e:	4602      	mov	r2, r0
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2200      	movs	r2, #0
 800a51a:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a524:	2b01      	cmp	r3, #1
 800a526:	d109      	bne.n	800a53c <WiFi_Conn_ND+0x5dc>
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a534:	4619      	mov	r1, r3
 800a536:	4610      	mov	r0, r2
 800a538:	f7f7 fa08 	bl	800194c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a548:	b29a      	uxth	r2, r3
 800a54a:	2364      	movs	r3, #100	; 0x64
 800a54c:	68b8      	ldr	r0, [r7, #8]
 800a54e:	f7fb f9fb 	bl	8005948 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a558:	2b0a      	cmp	r3, #10
 800a55a:	d005      	beq.n	800a568 <WiFi_Conn_ND+0x608>
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a562:	2b0d      	cmp	r3, #13
 800a564:	f041 813b 	bne.w	800b7de <WiFi_Conn_ND+0x187e>
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f240 1235 	movw	r2, #309	; 0x135
 800a56e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a572:	f001 b934 	b.w	800b7de <WiFi_Conn_ND+0x187e>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f7fc fa4c 	bl	8006a14 <NOP>
			}
			break;
 800a57c:	f001 b956 	b.w	800b82c <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2200      	movs	r2, #0
 800a584:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				ConectarWIFI(b);
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f7fc fa6f 	bl	8006a6c <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	22c8      	movs	r2, #200	; 0xc8
 800a592:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5a4:	2b04      	cmp	r3, #4
 800a5a6:	f041 811c 	bne.w	800b7e2 <WiFi_Conn_ND+0x1882>
					{
						Cambiar_CWMODE(b);
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f7fc fa48 	bl	8006a40 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2264      	movs	r2, #100	; 0x64
 800a5b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a5c8:	f001 b90b 	b.w	800b7e2 <WiFi_Conn_ND+0x1882>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a5d6:	d04f      	beq.n	800a678 <WiFi_Conn_ND+0x718>
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5de:	2b04      	cmp	r3, #4
 800a5e0:	d04a      	beq.n	800a678 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_ok)
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d045      	beq.n	800a678 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_error)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d040      	beq.n	800a678 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_ok)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5fc:	2b07      	cmp	r3, #7
 800a5fe:	d03b      	beq.n	800a678 <WiFi_Conn_ND+0x718>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a606:	2b08      	cmp	r3, #8
 800a608:	d036      	beq.n	800a678 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_err)
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a610:	2b1e      	cmp	r3, #30
 800a612:	d031      	beq.n	800a678 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a61a:	2b1f      	cmp	r3, #31
 800a61c:	d02c      	beq.n	800a678 <WiFi_Conn_ND+0x718>
				{
						MUX(b);
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f7fc fa3a 	bl	8006a98 <MUX>
						if(b->_enviaruart==1)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d124      	bne.n	800a678 <WiFi_Conn_ND+0x718>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	f7fc fb96 	bl	8006d60 <AT_ESP8266_ND>
 800a634:	4602      	mov	r2, r0
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d109      	bne.n	800a662 <WiFi_Conn_ND+0x702>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a65a:	4619      	mov	r1, r3
 800a65c:	4610      	mov	r0, r2
 800a65e:	f7f7 f975 	bl	800194c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a66e:	b29a      	uxth	r2, r3
 800a670:	2364      	movs	r3, #100	; 0x64
 800a672:	68b8      	ldr	r0, [r7, #8]
 800a674:	f7fb f968 	bl	8005948 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d009      	beq.n	800a696 <WiFi_Conn_ND+0x736>
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a688:	2b07      	cmp	r3, #7
 800a68a:	d004      	beq.n	800a696 <WiFi_Conn_ND+0x736>
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a692:	2b08      	cmp	r3, #8
 800a694:	d104      	bne.n	800a6a0 <WiFi_Conn_ND+0x740>
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f240 1299 	movw	r2, #409	; 0x199
 800a69c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err)) b->_estado_conexion=MUX_CONN_ERROR;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d00a      	beq.n	800a6c0 <WiFi_Conn_ND+0x760>
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6b0:	2b1e      	cmp	r3, #30
 800a6b2:	d005      	beq.n	800a6c0 <WiFi_Conn_ND+0x760>
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ba:	2b1f      	cmp	r3, #31
 800a6bc:	f041 8093 	bne.w	800b7e6 <WiFi_Conn_ND+0x1886>
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f240 1295 	movw	r2, #405	; 0x195
 800a6c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a6ca:	f001 b88c 	b.w	800b7e6 <WiFi_Conn_ND+0x1886>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f7fc f9a0 	bl	8006a14 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6da:	2b04      	cmp	r3, #4
 800a6dc:	d112      	bne.n	800a704 <WiFi_Conn_ND+0x7a4>
				{
					Cambiar_CWMODE(b);
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	f7fc f9ae 	bl	8006a40 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2264      	movs	r2, #100	; 0x64
 800a6e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a70a:	2b0a      	cmp	r3, #10
 800a70c:	d005      	beq.n	800a71a <WiFi_Conn_ND+0x7ba>
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a714:	2b0d      	cmp	r3, #13
 800a716:	f041 8068 	bne.w	800b7ea <WiFi_Conn_ND+0x188a>
				{
					ConectarWIFI(b);
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f7fc f9a6 	bl	8006a6c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	22c8      	movs	r2, #200	; 0xc8
 800a724:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2200      	movs	r2, #0
 800a734:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a738:	f001 b857 	b.w	800b7ea <WiFi_Conn_ND+0x188a>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a73c:	68f8      	ldr	r0, [r7, #12]
 800a73e:	f7fc f969 	bl	8006a14 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a750:	2b04      	cmp	r3, #4
 800a752:	d10e      	bne.n	800a772 <WiFi_Conn_ND+0x812>
					{
						Cambiar_CWMODE(b);
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f7fc f973 	bl	8006a40 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2264      	movs	r2, #100	; 0x64
 800a75e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2200      	movs	r2, #0
 800a766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a778:	2b0a      	cmp	r3, #10
 800a77a:	d004      	beq.n	800a786 <WiFi_Conn_ND+0x826>
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a782:	2b0d      	cmp	r3, #13
 800a784:	d10a      	bne.n	800a79c <WiFi_Conn_ND+0x83c>
					{
						ConectarWIFI(b);
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f7fc f970 	bl	8006a6c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	22c8      	movs	r2, #200	; 0xc8
 800a790:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2200      	movs	r2, #0
 800a798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}

					IPDef(b);
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f7fc f991 	bl	8006ac4 <IPDef>
					b->_estado_conexion=DEF_IP_EN_CURSO;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a7a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 800a7b4:	f001 b83a 	b.w	800b82c <WiFi_Conn_ND+0x18cc>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a7c2:	d045      	beq.n	800a850 <WiFi_Conn_ND+0x8f0>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7ca:	2b04      	cmp	r3, #4
 800a7cc:	d040      	beq.n	800a850 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_ok)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d03b      	beq.n	800a850 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_error)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7de:	2b02      	cmp	r3, #2
 800a7e0:	d036      	beq.n	800a850 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_ok)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7e8:	2b1b      	cmp	r3, #27
 800a7ea:	d031      	beq.n	800a850 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7f2:	2b21      	cmp	r3, #33	; 0x21
 800a7f4:	d02c      	beq.n	800a850 <WiFi_Conn_ND+0x8f0>
				{
						IPDef(b);
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f7fc f964 	bl	8006ac4 <IPDef>
						if(b->_enviaruart==1)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a802:	2b01      	cmp	r3, #1
 800a804:	d124      	bne.n	800a850 <WiFi_Conn_ND+0x8f0>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f7fc faaa 	bl	8006d60 <AT_ESP8266_ND>
 800a80c:	4602      	mov	r2, r0
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a822:	2b01      	cmp	r3, #1
 800a824:	d109      	bne.n	800a83a <WiFi_Conn_ND+0x8da>
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a832:	4619      	mov	r1, r3
 800a834:	4610      	mov	r0, r2
 800a836:	f7f7 f889 	bl	800194c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a846:	b29a      	uxth	r2, r3
 800a848:	2364      	movs	r3, #100	; 0x64
 800a84a:	68b8      	ldr	r0, [r7, #8]
 800a84c:	f7fb f87c 	bl	8005948 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a856:	2b01      	cmp	r3, #1
 800a858:	d004      	beq.n	800a864 <WiFi_Conn_ND+0x904>
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a860:	2b1b      	cmp	r3, #27
 800a862:	d104      	bne.n	800a86e <WiFi_Conn_ND+0x90e>
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a86a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a874:	2b02      	cmp	r3, #2
 800a876:	d005      	beq.n	800a884 <WiFi_Conn_ND+0x924>
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a87e:	2b21      	cmp	r3, #33	; 0x21
 800a880:	f040 87b5 	bne.w	800b7ee <WiFi_Conn_ND+0x188e>
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a88a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a88e:	f000 bfae 	b.w	800b7ee <WiFi_Conn_ND+0x188e>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f7fc f8be 	bl	8006a14 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a89e:	2b04      	cmp	r3, #4
 800a8a0:	d004      	beq.n	800a8ac <WiFi_Conn_ND+0x94c>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d112      	bne.n	800a8d2 <WiFi_Conn_ND+0x972>
				{
					Cambiar_CWMODE(b);
 800a8ac:	68f8      	ldr	r0, [r7, #12]
 800a8ae:	f7fc f8c7 	bl	8006a40 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2264      	movs	r2, #100	; 0x64
 800a8b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8d8:	2b0a      	cmp	r3, #10
 800a8da:	d005      	beq.n	800a8e8 <WiFi_Conn_ND+0x988>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8e2:	2b0d      	cmp	r3, #13
 800a8e4:	f040 8785 	bne.w	800b7f2 <WiFi_Conn_ND+0x1892>
				{
					ConectarWIFI(b);
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f7fc f8bf 	bl	8006a6c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	22c8      	movs	r2, #200	; 0xc8
 800a8f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2200      	movs	r2, #0
 800a902:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a906:	f000 bf74 	b.w	800b7f2 <WiFi_Conn_ND+0x1892>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f7fc f882 	bl	8006a14 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a916:	2b04      	cmp	r3, #4
 800a918:	d112      	bne.n	800a940 <WiFi_Conn_ND+0x9e0>
					{
						Cambiar_CWMODE(b);
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f7fc f890 	bl	8006a40 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2264      	movs	r2, #100	; 0x64
 800a924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2200      	movs	r2, #0
 800a934:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2200      	movs	r2, #0
 800a93c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a946:	2b0a      	cmp	r3, #10
 800a948:	d004      	beq.n	800a954 <WiFi_Conn_ND+0x9f4>
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a950:	2b0d      	cmp	r3, #13
 800a952:	d10e      	bne.n	800a972 <WiFi_Conn_ND+0xa12>
					{
						ConectarWIFI(b);
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	f7fc f889 	bl	8006a6c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	22c8      	movs	r2, #200	; 0xc8
 800a95e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2200      	movs	r2, #0
 800a966:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d111      	bne.n	800a9a0 <WiFi_Conn_ND+0xa40>
					{
						ConectarTCP(b);
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f7fc f8cd 	bl	8006b1c <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a988:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2200      	movs	r2, #0
 800a990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						//b->_estado_conexion=TCP_SRVR_EN_CURSO;
						//b->_estado=0;
						//b->_n_orig=0; //Borro el vector RX
					}
			}
			break;
 800a99c:	f000 bf46 	b.w	800b82c <WiFi_Conn_ND+0x18cc>
						ConectarWIFI(b);//
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f7fc f863 	bl	8006a6c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	22c8      	movs	r2, #200	; 0xc8
 800a9aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800a9be:	f000 bf35 	b.w	800b82c <WiFi_Conn_ND+0x18cc>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9c8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a9cc:	d04a      	beq.n	800aa64 <WiFi_Conn_ND+0xb04>
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9d4:	2b02      	cmp	r3, #2
 800a9d6:	d045      	beq.n	800aa64 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_ok)
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d040      	beq.n	800aa64 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_wifi_disconnect)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9e8:	2b0a      	cmp	r3, #10
 800a9ea:	d03b      	beq.n	800aa64 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9f2:	2b0e      	cmp	r3, #14
 800a9f4:	d036      	beq.n	800aa64 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_conectado)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9fc:	2b0f      	cmp	r3, #15
 800a9fe:	d031      	beq.n	800aa64 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa06:	2b10      	cmp	r3, #16
 800aa08:	d02c      	beq.n	800aa64 <WiFi_Conn_ND+0xb04>
				{
					ConectarTCP(b);
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	f7fc f886 	bl	8006b1c <ConectarTCP>
						if(b->_enviaruart==1)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d124      	bne.n	800aa64 <WiFi_Conn_ND+0xb04>
							{
								b->_estado=AT_ESP8266_ND(b);
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f7fc f9a0 	bl	8006d60 <AT_ESP8266_ND>
 800aa20:	4602      	mov	r2, r0
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d109      	bne.n	800aa4e <WiFi_Conn_ND+0xaee>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800aa46:	4619      	mov	r1, r3
 800aa48:	4610      	mov	r0, r2
 800aa4a:	f7f6 ff7f 	bl	800194c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800aa5a:	b29a      	uxth	r2, r3
 800aa5c:	2364      	movs	r3, #100	; 0x64
 800aa5e:	68b8      	ldr	r0, [r7, #8]
 800aa60:	f7fa ff72 	bl	8005948 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d009      	beq.n	800aa82 <WiFi_Conn_ND+0xb22>
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa74:	2b0e      	cmp	r3, #14
 800aa76:	d004      	beq.n	800aa82 <WiFi_Conn_ND+0xb22>
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa7e:	2b0f      	cmp	r3, #15
 800aa80:	d106      	bne.n	800aa90 <WiFi_Conn_ND+0xb30>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f240 2261 	movw	r2, #609	; 0x261
 800aa88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800aa8c:	f000 beb3 	b.w	800b7f6 <WiFi_Conn_ND+0x1896>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d005      	beq.n	800aaa6 <WiFi_Conn_ND+0xb46>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaa0:	2b10      	cmp	r3, #16
 800aaa2:	f040 86a8 	bne.w	800b7f6 <WiFi_Conn_ND+0x1896>
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f240 225d 	movw	r2, #605	; 0x25d
 800aaac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800aab0:	f000 bea1 	b.w	800b7f6 <WiFi_Conn_ND+0x1896>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f7fb ffad 	bl	8006a14 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aac0:	2b04      	cmp	r3, #4
 800aac2:	d112      	bne.n	800aaea <WiFi_Conn_ND+0xb8a>
				{
					Cambiar_CWMODE(b);
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f7fb ffbb 	bl	8006a40 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2264      	movs	r2, #100	; 0x64
 800aace:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2200      	movs	r2, #0
 800aad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2200      	movs	r2, #0
 800aade:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaf0:	2b0a      	cmp	r3, #10
 800aaf2:	d004      	beq.n	800aafe <WiFi_Conn_ND+0xb9e>
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aafa:	2b0d      	cmp	r3, #13
 800aafc:	d10e      	bne.n	800ab1c <WiFi_Conn_ND+0xbbc>
				{
					ConectarWIFI(b);
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	f7fb ffb4 	bl	8006a6c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	22c8      	movs	r2, #200	; 0xc8
 800ab08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab22:	2b02      	cmp	r3, #2
 800ab24:	d00a      	beq.n	800ab3c <WiFi_Conn_ND+0xbdc>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab2c:	2b10      	cmp	r3, #16
 800ab2e:	d005      	beq.n	800ab3c <WiFi_Conn_ND+0xbdc>
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab36:	2b0e      	cmp	r3, #14
 800ab38:	f040 865f 	bne.w	800b7fa <WiFi_Conn_ND+0x189a>
				{
					ConectarTCP(b);
 800ab3c:	68f8      	ldr	r0, [r7, #12]
 800ab3e:	f7fb ffed 	bl	8006b1c <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ab48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2200      	movs	r2, #0
 800ab58:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800ab5c:	f000 be4d 	b.w	800b7fa <WiFi_Conn_ND+0x189a>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800ab60:	68f8      	ldr	r0, [r7, #12]
 800ab62:	f7fb ff57 	bl	8006a14 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab6c:	2b04      	cmp	r3, #4
 800ab6e:	d112      	bne.n	800ab96 <WiFi_Conn_ND+0xc36>
					{
						Cambiar_CWMODE(b);
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f7fb ff65 	bl	8006a40 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2264      	movs	r2, #100	; 0x64
 800ab7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2200      	movs	r2, #0
 800ab82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2200      	movs	r2, #0
 800ab92:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab9c:	2b0a      	cmp	r3, #10
 800ab9e:	d004      	beq.n	800abaa <WiFi_Conn_ND+0xc4a>
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aba6:	2b0d      	cmp	r3, #13
 800aba8:	d10e      	bne.n	800abc8 <WiFi_Conn_ND+0xc68>
					{
						ConectarWIFI(b);
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f7fb ff5e 	bl	8006a6c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	22c8      	movs	r2, #200	; 0xc8
 800abb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2200      	movs	r2, #0
 800abbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abce:	2b02      	cmp	r3, #2
 800abd0:	d004      	beq.n	800abdc <WiFi_Conn_ND+0xc7c>
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abd8:	2b10      	cmp	r3, #16
 800abda:	d10f      	bne.n	800abfc <WiFi_Conn_ND+0xc9c>
					{
						ConectarTCP(b);
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f7fb ff9d 	bl	8006b1c <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f44f 7216 	mov.w	r2, #600	; 0x258
 800abe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2200      	movs	r2, #0
 800abf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac02:	2b0e      	cmp	r3, #14
 800ac04:	d005      	beq.n	800ac12 <WiFi_Conn_ND+0xcb2>
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac0c:	2b0f      	cmp	r3, #15
 800ac0e:	f040 85f6 	bne.w	800b7fe <WiFi_Conn_ND+0x189e>
					{
						if(b->_automatizacion >= WF_SEND )
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	f240 85f0 	bls.w	800b7fe <WiFi_Conn_ND+0x189e>
						{
							EnviarDatos(b);
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	f7fb ffbe 	bl	8006ba0 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800ac2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						}
					}
			}
			break;
 800ac3e:	f000 bdde 	b.w	800b7fe <WiFi_Conn_ND+0x189e>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac48:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800ac4c:	d054      	beq.n	800acf8 <WiFi_Conn_ND+0xd98>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac54:	2b02      	cmp	r3, #2
 800ac56:	d04f      	beq.n	800acf8 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_wifi_disconnect)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac5e:	2b0a      	cmp	r3, #10
 800ac60:	d04a      	beq.n	800acf8 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_desconectado)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac68:	2b10      	cmp	r3, #16
 800ac6a:	d045      	beq.n	800acf8 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_snd_err)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac72:	2b11      	cmp	r3, #17
 800ac74:	d040      	beq.n	800acf8 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_ok_to_send)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac7c:	2b14      	cmp	r3, #20
 800ac7e:	d03b      	beq.n	800acf8 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac86:	2b12      	cmp	r3, #18
 800ac88:	d036      	beq.n	800acf8 <WiFi_Conn_ND+0xd98>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ac90:	2b02      	cmp	r3, #2
 800ac92:	d907      	bls.n	800aca4 <WiFi_Conn_ND+0xd44>
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d002      	beq.n	800aca4 <WiFi_Conn_ND+0xd44>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	f7fb ff7e 	bl	8006ba0 <EnviarDatos>
							b->_data2SND[9]=0x00;
							b->_data2SND[10]=0x00;
							b->_data2SND[11]=0x0A;
							b->_n_D2SND=12;*/
					}
						if(b->_enviaruart==1)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d124      	bne.n	800acf8 <WiFi_Conn_ND+0xd98>
							{
								b->_estado=AT_ESP8266_ND(b);
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	f7fc f856 	bl	8006d60 <AT_ESP8266_ND>
 800acb4:	4602      	mov	r2, r0
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800acca:	2b01      	cmp	r3, #1
 800accc:	d109      	bne.n	800ace2 <WiFi_Conn_ND+0xd82>
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800acda:	4619      	mov	r1, r3
 800acdc:	4610      	mov	r0, r2
 800acde:	f7f6 fe35 	bl	800194c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800acee:	b29a      	uxth	r2, r3
 800acf0:	2364      	movs	r3, #100	; 0x64
 800acf2:	68b8      	ldr	r0, [r7, #8]
 800acf4:	f7fa fe28 	bl	8005948 <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acfe:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800ad02:	d13b      	bne.n	800ad7c <WiFi_Conn_ND+0xe1c>
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d136      	bne.n	800ad7c <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_error)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad14:	2b02      	cmp	r3, #2
 800ad16:	d031      	beq.n	800ad7c <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_wifi_disconnect)
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad1e:	2b0a      	cmp	r3, #10
 800ad20:	d02c      	beq.n	800ad7c <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_desconectado)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad28:	2b10      	cmp	r3, #16
 800ad2a:	d027      	beq.n	800ad7c <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_snd_err)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad32:	2b11      	cmp	r3, #17
 800ad34:	d022      	beq.n	800ad7c <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_enviado_error))
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad3c:	2b12      	cmp	r3, #18
 800ad3e:	d01d      	beq.n	800ad7c <WiFi_Conn_ND+0xe1c>
							{
								b->_enviaruart=0;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d109      	bne.n	800ad66 <WiFi_Conn_ND+0xe06>
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ad5e:	4619      	mov	r1, r3
 800ad60:	4610      	mov	r0, r2
 800ad62:	f7f6 fdf3 	bl	800194c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ad72:	b29a      	uxth	r2, r3
 800ad74:	2364      	movs	r3, #100	; 0x64
 800ad76:	68b8      	ldr	r0, [r7, #8]
 800ad78:	f7fa fde6 	bl	8005948 <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad82:	2b13      	cmp	r3, #19
 800ad84:	d104      	bne.n	800ad90 <WiFi_Conn_ND+0xe30>
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f240 22c5 	movw	r2, #709	; 0x2c5
 800ad8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	d014      	beq.n	800adc4 <WiFi_Conn_ND+0xe64>
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ada0:	2b0a      	cmp	r3, #10
 800ada2:	d00f      	beq.n	800adc4 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_desconectado)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adaa:	2b10      	cmp	r3, #16
 800adac:	d00a      	beq.n	800adc4 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_snd_err)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adb4:	2b11      	cmp	r3, #17
 800adb6:	d005      	beq.n	800adc4 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_enviado_error))
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adbe:	2b12      	cmp	r3, #18
 800adc0:	f040 851f 	bne.w	800b802 <WiFi_Conn_ND+0x18a2>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f240 22c1 	movw	r2, #705	; 0x2c1
 800adca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800adce:	f000 bd18 	b.w	800b802 <WiFi_Conn_ND+0x18a2>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800add2:	68f8      	ldr	r0, [r7, #12]
 800add4:	f7fb fe1e 	bl	8006a14 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adde:	2b04      	cmp	r3, #4
 800ade0:	d112      	bne.n	800ae08 <WiFi_Conn_ND+0xea8>
				{
					Cambiar_CWMODE(b);
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f7fb fe2c 	bl	8006a40 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2264      	movs	r2, #100	; 0x64
 800adec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2200      	movs	r2, #0
 800adfc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2200      	movs	r2, #0
 800ae04:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae0e:	2b0a      	cmp	r3, #10
 800ae10:	d004      	beq.n	800ae1c <WiFi_Conn_ND+0xebc>
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae18:	2b0d      	cmp	r3, #13
 800ae1a:	d10e      	bne.n	800ae3a <WiFi_Conn_ND+0xeda>
				{
					ConectarWIFI(b);
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f7fb fe25 	bl	8006a6c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	22c8      	movs	r2, #200	; 0xc8
 800ae26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2200      	movs	r2, #0
 800ae36:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae40:	2b0c      	cmp	r3, #12
 800ae42:	d10f      	bne.n	800ae64 <WiFi_Conn_ND+0xf04>
				{
					ConectarTCP(b);
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f7fb fe69 	bl	8006b1c <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ae50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d00f      	beq.n	800ae8e <WiFi_Conn_ND+0xf2e>
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae74:	2b10      	cmp	r3, #16
 800ae76:	d00a      	beq.n	800ae8e <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_snd_err)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae7e:	2b11      	cmp	r3, #17
 800ae80:	d005      	beq.n	800ae8e <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae88:	2b12      	cmp	r3, #18
 800ae8a:	f040 84bc 	bne.w	800b806 <WiFi_Conn_ND+0x18a6>
				{
					ConectarTCP(b);
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f7fb fe44 	bl	8006b1c <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ae9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800aeae:	f000 bcaa 	b.w	800b806 <WiFi_Conn_ND+0x18a6>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f7fb fdae 	bl	8006a14 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aebe:	2b04      	cmp	r3, #4
 800aec0:	d112      	bne.n	800aee8 <WiFi_Conn_ND+0xf88>
					{
						Cambiar_CWMODE(b);
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f7fb fdbc 	bl	8006a40 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2264      	movs	r2, #100	; 0x64
 800aecc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2200      	movs	r2, #0
 800aee4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeee:	2b0a      	cmp	r3, #10
 800aef0:	d004      	beq.n	800aefc <WiFi_Conn_ND+0xf9c>
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aef8:	2b0d      	cmp	r3, #13
 800aefa:	d10e      	bne.n	800af1a <WiFi_Conn_ND+0xfba>
					{
						ConectarWIFI(b);
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	f7fb fdb5 	bl	8006a6c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	22c8      	movs	r2, #200	; 0xc8
 800af06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2200      	movs	r2, #0
 800af0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2200      	movs	r2, #0
 800af16:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af20:	2b02      	cmp	r3, #2
 800af22:	d00e      	beq.n	800af42 <WiFi_Conn_ND+0xfe2>
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af2a:	2b0b      	cmp	r3, #11
 800af2c:	d009      	beq.n	800af42 <WiFi_Conn_ND+0xfe2>
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af34:	2b0c      	cmp	r3, #12
 800af36:	d004      	beq.n	800af42 <WiFi_Conn_ND+0xfe2>
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af3e:	2b10      	cmp	r3, #16
 800af40:	d10f      	bne.n	800af62 <WiFi_Conn_ND+0x1002>
					{
						ConectarTCP(b);
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f7fb fdea 	bl	8006b1c <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800af4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2200      	movs	r2, #0
 800af56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800af62:	20c8      	movs	r0, #200	; 0xc8
 800af64:	f7f8 f83c 	bl	8002fe0 <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800af6e:	2b02      	cmp	r3, #2
 800af70:	d916      	bls.n	800afa0 <WiFi_Conn_ND+0x1040>
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d011      	beq.n	800afa0 <WiFi_Conn_ND+0x1040>
					{
							EnviarDatos(b);
 800af7c:	68f8      	ldr	r0, [r7, #12]
 800af7e:	f7fb fe0f 	bl	8006ba0 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800af88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2200      	movs	r2, #0
 800af90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2200      	movs	r2, #0
 800af98:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800af9c:	f000 bc46 	b.w	800b82c <WiFi_Conn_ND+0x18cc>
							b->_estado_conexion=TCP_CONN_OK;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f240 2261 	movw	r2, #609	; 0x261
 800afa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2200      	movs	r2, #0
 800afae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800afba:	f000 bc37 	b.w	800b82c <WiFi_Conn_ND+0x18cc>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afc4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800afc8:	d045      	beq.n	800b056 <WiFi_Conn_ND+0x10f6>
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afd0:	2b02      	cmp	r3, #2
 800afd2:	d040      	beq.n	800b056 <WiFi_Conn_ND+0x10f6>
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afda:	2b0a      	cmp	r3, #10
 800afdc:	d03b      	beq.n	800b056 <WiFi_Conn_ND+0x10f6>
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afe4:	2b15      	cmp	r3, #21
 800afe6:	d036      	beq.n	800b056 <WiFi_Conn_ND+0x10f6>
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afee:	2b16      	cmp	r3, #22
 800aff0:	d031      	beq.n	800b056 <WiFi_Conn_ND+0x10f6>
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aff8:	2b17      	cmp	r3, #23
 800affa:	d02c      	beq.n	800b056 <WiFi_Conn_ND+0x10f6>
							{
								CrearServidorTCP(b);
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f7fb fda3 	bl	8006b48 <CrearServidorTCP>
									if(b->_enviaruart==1)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d124      	bne.n	800b056 <WiFi_Conn_ND+0x10f6>
										{
											b->_estado=AT_ESP8266_ND(b);
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f7fb fea7 	bl	8006d60 <AT_ESP8266_ND>
 800b012:	4602      	mov	r2, r0
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d109      	bne.n	800b040 <WiFi_Conn_ND+0x10e0>
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b038:	4619      	mov	r1, r3
 800b03a:	4610      	mov	r0, r2
 800b03c:	f7f6 fc86 	bl	800194c <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	2364      	movs	r3, #100	; 0x64
 800b050:	68b8      	ldr	r0, [r7, #8]
 800b052:	f7fa fc79 	bl	8005948 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b05c:	2b15      	cmp	r3, #21
 800b05e:	d004      	beq.n	800b06a <WiFi_Conn_ND+0x110a>
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b066:	2b17      	cmp	r3, #23
 800b068:	d104      	bne.n	800b074 <WiFi_Conn_ND+0x1114>
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f240 3229 	movw	r2, #809	; 0x329
 800b070:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b07a:	2b16      	cmp	r3, #22
 800b07c:	f040 83c5 	bne.w	800b80a <WiFi_Conn_ND+0x18aa>
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f240 3225 	movw	r2, #805	; 0x325
 800b086:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800b08a:	e3be      	b.n	800b80a <WiFi_Conn_ND+0x18aa>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f7fb fcc1 	bl	8006a14 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b098:	2b04      	cmp	r3, #4
 800b09a:	d112      	bne.n	800b0c2 <WiFi_Conn_ND+0x1162>
							{
								Cambiar_CWMODE(b);
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	f7fb fccf 	bl	8006a40 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2264      	movs	r2, #100	; 0x64
 800b0a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0c8:	2b0a      	cmp	r3, #10
 800b0ca:	d004      	beq.n	800b0d6 <WiFi_Conn_ND+0x1176>
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0d2:	2b0d      	cmp	r3, #13
 800b0d4:	d10e      	bne.n	800b0f4 <WiFi_Conn_ND+0x1194>
							{
								ConectarWIFI(b);
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	f7fb fcc8 	bl	8006a6c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	22c8      	movs	r2, #200	; 0xc8
 800b0e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0fa:	2b02      	cmp	r3, #2
 800b0fc:	d005      	beq.n	800b10a <WiFi_Conn_ND+0x11aa>
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b104:	2b10      	cmp	r3, #16
 800b106:	f040 8382 	bne.w	800b80e <WiFi_Conn_ND+0x18ae>
							{
								ConectarTCP(b);
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	f7fb fd06 	bl	8006b1c <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b116:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2200      	movs	r2, #0
 800b126:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800b12a:	e370      	b.n	800b80e <WiFi_Conn_ND+0x18ae>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f7fb fc71 	bl	8006a14 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b138:	2b04      	cmp	r3, #4
 800b13a:	d112      	bne.n	800b162 <WiFi_Conn_ND+0x1202>
							{
								Cambiar_CWMODE(b);
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f7fb fc7f 	bl	8006a40 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2264      	movs	r2, #100	; 0x64
 800b146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2200      	movs	r2, #0
 800b14e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2200      	movs	r2, #0
 800b156:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2200      	movs	r2, #0
 800b15e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b168:	2b0a      	cmp	r3, #10
 800b16a:	d004      	beq.n	800b176 <WiFi_Conn_ND+0x1216>
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b172:	2b0d      	cmp	r3, #13
 800b174:	d10e      	bne.n	800b194 <WiFi_Conn_ND+0x1234>
							{
								ConectarWIFI(b);
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	f7fb fc78 	bl	8006a6c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	22c8      	movs	r2, #200	; 0xc8
 800b180:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2200      	movs	r2, #0
 800b188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2200      	movs	r2, #0
 800b190:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	d005      	beq.n	800b1aa <WiFi_Conn_ND+0x124a>
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1a4:	2b10      	cmp	r3, #16
 800b1a6:	f040 8334 	bne.w	800b812 <WiFi_Conn_ND+0x18b2>
							{
								ConectarTCP(b);
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f7fb fcb6 	bl	8006b1c <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b1b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b1ca:	e322      	b.n	800b812 <WiFi_Conn_ND+0x18b2>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b1cc:	68f8      	ldr	r0, [r7, #12]
 800b1ce:	f7fb fc21 	bl	8006a14 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1d8:	2b04      	cmp	r3, #4
 800b1da:	d112      	bne.n	800b202 <WiFi_Conn_ND+0x12a2>
							{
								Cambiar_CWMODE(b);
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f7fb fc2f 	bl	8006a40 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2264      	movs	r2, #100	; 0x64
 800b1e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b208:	2b0a      	cmp	r3, #10
 800b20a:	d004      	beq.n	800b216 <WiFi_Conn_ND+0x12b6>
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b212:	2b0d      	cmp	r3, #13
 800b214:	d10e      	bne.n	800b234 <WiFi_Conn_ND+0x12d4>
							{
								ConectarWIFI(b);
 800b216:	68f8      	ldr	r0, [r7, #12]
 800b218:	f7fb fc28 	bl	8006a6c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	22c8      	movs	r2, #200	; 0xc8
 800b220:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2200      	movs	r2, #0
 800b228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2200      	movs	r2, #0
 800b230:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b23a:	2b02      	cmp	r3, #2
 800b23c:	d005      	beq.n	800b24a <WiFi_Conn_ND+0x12ea>
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b244:	2b10      	cmp	r3, #16
 800b246:	f040 82e6 	bne.w	800b816 <WiFi_Conn_ND+0x18b6>
							{
								ConectarTCP(b);
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f7fb fc66 	bl	8006b1c <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2200      	movs	r2, #0
 800b25e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2200      	movs	r2, #0
 800b266:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b26a:	e2d4      	b.n	800b816 <WiFi_Conn_ND+0x18b6>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f7fb fbd1 	bl	8006a14 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b278:	2b04      	cmp	r3, #4
 800b27a:	d112      	bne.n	800b2a2 <WiFi_Conn_ND+0x1342>
							{
								Cambiar_CWMODE(b);
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f7fb fbdf 	bl	8006a40 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2264      	movs	r2, #100	; 0x64
 800b286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2200      	movs	r2, #0
 800b28e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2200      	movs	r2, #0
 800b296:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2200      	movs	r2, #0
 800b29e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2a8:	2b0a      	cmp	r3, #10
 800b2aa:	d004      	beq.n	800b2b6 <WiFi_Conn_ND+0x1356>
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2b2:	2b0d      	cmp	r3, #13
 800b2b4:	d10e      	bne.n	800b2d4 <WiFi_Conn_ND+0x1374>
							{
								ConectarWIFI(b);
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f7fb fbd8 	bl	8006a6c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	22c8      	movs	r2, #200	; 0xc8
 800b2c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	d005      	beq.n	800b2ea <WiFi_Conn_ND+0x138a>
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2e4:	2b10      	cmp	r3, #16
 800b2e6:	f040 8298 	bne.w	800b81a <WiFi_Conn_ND+0x18ba>
							{
								ConectarTCP(b);
 800b2ea:	68f8      	ldr	r0, [r7, #12]
 800b2ec:	f7fb fc16 	bl	8006b1c <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b2f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2200      	movs	r2, #0
 800b306:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b30a:	e286      	b.n	800b81a <WiFi_Conn_ND+0x18ba>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800b30c:	68f8      	ldr	r0, [r7, #12]
 800b30e:	f7fb fb81 	bl	8006a14 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2201      	movs	r2, #1
 800b316:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b320:	2b04      	cmp	r3, #4
 800b322:	d112      	bne.n	800b34a <WiFi_Conn_ND+0x13ea>
								{
									Cambiar_CWMODE(b);
 800b324:	68f8      	ldr	r0, [r7, #12]
 800b326:	f7fb fb8b 	bl	8006a40 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2264      	movs	r2, #100	; 0x64
 800b32e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2200      	movs	r2, #0
 800b336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2200      	movs	r2, #0
 800b33e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2200      	movs	r2, #0
 800b346:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b350:	2b0a      	cmp	r3, #10
 800b352:	d004      	beq.n	800b35e <WiFi_Conn_ND+0x13fe>
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b35a:	2b0d      	cmp	r3, #13
 800b35c:	d10e      	bne.n	800b37c <WiFi_Conn_ND+0x141c>
								{
									ConectarWIFI(b);
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	f7fb fb84 	bl	8006a6c <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	22c8      	movs	r2, #200	; 0xc8
 800b368:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2200      	movs	r2, #0
 800b370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2200      	movs	r2, #0
 800b378:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b382:	2b02      	cmp	r3, #2
 800b384:	d004      	beq.n	800b390 <WiFi_Conn_ND+0x1430>
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b38c:	2b10      	cmp	r3, #16
 800b38e:	d10f      	bne.n	800b3b0 <WiFi_Conn_ND+0x1450>
								{
									ConectarTCP(b);
 800b390:	68f8      	ldr	r0, [r7, #12]
 800b392:	f7fb fbc3 	bl	8006b1c <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b39c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	f040 8231 	bne.w	800b81e <WiFi_Conn_ND+0x18be>
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	f000 822b 	beq.w	800b81e <WiFi_Conn_ND+0x18be>
								{
									EnviarDatosSRVR(b);
 800b3c8:	68f8      	ldr	r0, [r7, #12]
 800b3ca:	f7fb fbd3 	bl	8006b74 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b3d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800b3e8:	e219      	b.n	800b81e <WiFi_Conn_ND+0x18be>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3f0:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b3f4:	d063      	beq.n	800b4be <WiFi_Conn_ND+0x155e>
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3fc:	2b02      	cmp	r3, #2
 800b3fe:	d05e      	beq.n	800b4be <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_disconnect)&&
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b406:	2b0a      	cmp	r3, #10
 800b408:	d059      	beq.n	800b4be <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_connected)&&
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800b410:	2b0b      	cmp	r3, #11
 800b412:	d054      	beq.n	800b4be <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_gotip)&&
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800b41a:	2b0c      	cmp	r3, #12
 800b41c:	d04f      	beq.n	800b4be <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_desconectado)&&
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800b424:	2b10      	cmp	r3, #16
 800b426:	d04a      	beq.n	800b4be <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_snd_err)&&
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800b42e:	2b11      	cmp	r3, #17
 800b430:	d045      	beq.n	800b4be <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_error)&&
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800b438:	2b12      	cmp	r3, #18
 800b43a:	d040      	beq.n	800b4be <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800b442:	2b13      	cmp	r3, #19
 800b444:	d03b      	beq.n	800b4be <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b44c:	2b16      	cmp	r3, #22
 800b44e:	d036      	beq.n	800b4be <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b456:	2b19      	cmp	r3, #25
 800b458:	d031      	beq.n	800b4be <WiFi_Conn_ND+0x155e>
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b460:	2b00      	cmp	r3, #0
 800b462:	d02c      	beq.n	800b4be <WiFi_Conn_ND+0x155e>
								{
								EnviarDatosSRVR(b);
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f7fb fb85 	bl	8006b74 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b470:	2b01      	cmp	r3, #1
 800b472:	d124      	bne.n	800b4be <WiFi_Conn_ND+0x155e>
										{
											b->_estado=AT_ESP8266_ND(b);
 800b474:	68f8      	ldr	r0, [r7, #12]
 800b476:	f7fb fc73 	bl	8006d60 <AT_ESP8266_ND>
 800b47a:	4602      	mov	r2, r0
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2200      	movs	r2, #0
 800b486:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800b490:	2b01      	cmp	r3, #1
 800b492:	d109      	bne.n	800b4a8 <WiFi_Conn_ND+0x1548>
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	4610      	mov	r0, r2
 800b4a4:	f7f6 fa52 	bl	800194c <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	2364      	movs	r3, #100	; 0x64
 800b4b8:	68b8      	ldr	r0, [r7, #8]
 800b4ba:	f7fa fa45 	bl	8005948 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4c4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b4c8:	d154      	bne.n	800b574 <WiFi_Conn_ND+0x1614>
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d14f      	bne.n	800b574 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_error)&&
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b4da:	2b02      	cmp	r3, #2
 800b4dc:	d04a      	beq.n	800b574 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_disconnect)&&
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800b4e4:	2b0a      	cmp	r3, #10
 800b4e6:	d045      	beq.n	800b574 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_connected)&&
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800b4ee:	2b0b      	cmp	r3, #11
 800b4f0:	d040      	beq.n	800b574 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_gotip)&&
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800b4f8:	2b0c      	cmp	r3, #12
 800b4fa:	d03b      	beq.n	800b574 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_desconectado)&&
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800b502:	2b10      	cmp	r3, #16
 800b504:	d036      	beq.n	800b574 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_snd_err)&&
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800b50c:	2b11      	cmp	r3, #17
 800b50e:	d031      	beq.n	800b574 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_error)&&
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800b516:	2b12      	cmp	r3, #18
 800b518:	d02c      	beq.n	800b574 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800b520:	2b13      	cmp	r3, #19
 800b522:	d027      	beq.n	800b574 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b52a:	2b16      	cmp	r3, #22
 800b52c:	d022      	beq.n	800b574 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b534:	2b19      	cmp	r3, #25
 800b536:	d01d      	beq.n	800b574 <WiFi_Conn_ND+0x1614>
										{
											b->_enviaruart=0;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800b546:	2b01      	cmp	r3, #1
 800b548:	d109      	bne.n	800b55e <WiFi_Conn_ND+0x15fe>
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b556:	4619      	mov	r1, r3
 800b558:	4610      	mov	r0, r2
 800b55a:	f7f6 f9f7 	bl	800194c <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b56a:	b29a      	uxth	r2, r3
 800b56c:	2364      	movs	r3, #100	; 0x64
 800b56e:	68b8      	ldr	r0, [r7, #8]
 800b570:	f7fa f9ea 	bl	8005948 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b57a:	2b13      	cmp	r3, #19
 800b57c:	d104      	bne.n	800b588 <WiFi_Conn_ND+0x1628>
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f240 328d 	movw	r2, #909	; 0x38d
 800b584:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b58e:	2b02      	cmp	r3, #2
 800b590:	d02d      	beq.n	800b5ee <WiFi_Conn_ND+0x168e>
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b598:	2b04      	cmp	r3, #4
 800b59a:	d028      	beq.n	800b5ee <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b5a2:	2b0a      	cmp	r3, #10
 800b5a4:	d023      	beq.n	800b5ee <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5ac:	2b0b      	cmp	r3, #11
 800b5ae:	d01e      	beq.n	800b5ee <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b5b6:	2b0c      	cmp	r3, #12
 800b5b8:	d019      	beq.n	800b5ee <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5c0:	2b10      	cmp	r3, #16
 800b5c2:	d014      	beq.n	800b5ee <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b5ca:	2b11      	cmp	r3, #17
 800b5cc:	d00f      	beq.n	800b5ee <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5d4:	2b12      	cmp	r3, #18
 800b5d6:	d00a      	beq.n	800b5ee <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b5de:	2b16      	cmp	r3, #22
 800b5e0:	d005      	beq.n	800b5ee <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5e8:	2b19      	cmp	r3, #25
 800b5ea:	f040 811a 	bne.w	800b822 <WiFi_Conn_ND+0x18c2>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f240 3289 	movw	r2, #905	; 0x389
 800b5f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800b5f8:	e113      	b.n	800b822 <WiFi_Conn_ND+0x18c2>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f7fb fa0a 	bl	8006a14 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b606:	2b04      	cmp	r3, #4
 800b608:	d009      	beq.n	800b61e <WiFi_Conn_ND+0x16be>
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b610:	2b0b      	cmp	r3, #11
 800b612:	d004      	beq.n	800b61e <WiFi_Conn_ND+0x16be>
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b61a:	2b0c      	cmp	r3, #12
 800b61c:	d112      	bne.n	800b644 <WiFi_Conn_ND+0x16e4>
							{
								Cambiar_CWMODE(b);
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f7fb fa0e 	bl	8006a40 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2264      	movs	r2, #100	; 0x64
 800b628:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2200      	movs	r2, #0
 800b630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2200      	movs	r2, #0
 800b638:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2200      	movs	r2, #0
 800b640:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b64a:	2b0a      	cmp	r3, #10
 800b64c:	d004      	beq.n	800b658 <WiFi_Conn_ND+0x16f8>
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b654:	2b0d      	cmp	r3, #13
 800b656:	d10e      	bne.n	800b676 <WiFi_Conn_ND+0x1716>
							{
								ConectarWIFI(b);
 800b658:	68f8      	ldr	r0, [r7, #12]
 800b65a:	f7fb fa07 	bl	8006a6c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	22c8      	movs	r2, #200	; 0xc8
 800b662:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2200      	movs	r2, #0
 800b66a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2200      	movs	r2, #0
 800b672:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b67c:	2b16      	cmp	r3, #22
 800b67e:	d10c      	bne.n	800b69a <WiFi_Conn_ND+0x173a>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f240 3225 	movw	r2, #805	; 0x325
 800b686:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2200      	movs	r2, #0
 800b68e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2200      	movs	r2, #0
 800b696:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6a0:	2b18      	cmp	r3, #24
 800b6a2:	d10c      	bne.n	800b6be <WiFi_Conn_ND+0x175e>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f240 3229 	movw	r2, #809	; 0x329
 800b6aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6c4:	2b19      	cmp	r3, #25
 800b6c6:	d008      	beq.n	800b6da <WiFi_Conn_ND+0x177a>
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6ce:	2b11      	cmp	r3, #17
 800b6d0:	d003      	beq.n	800b6da <WiFi_Conn_ND+0x177a>
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2212      	movs	r2, #18
 800b6d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	f040 80a0 	bne.w	800b826 <WiFi_Conn_ND+0x18c6>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b6ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

							}


						}
						break;
 800b700:	e091      	b.n	800b826 <WiFi_Conn_ND+0x18c6>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b702:	68f8      	ldr	r0, [r7, #12]
 800b704:	f7fb f986 	bl	8006a14 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b70e:	2b04      	cmp	r3, #4
 800b710:	d009      	beq.n	800b726 <WiFi_Conn_ND+0x17c6>
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b718:	2b0b      	cmp	r3, #11
 800b71a:	d004      	beq.n	800b726 <WiFi_Conn_ND+0x17c6>
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b722:	2b0c      	cmp	r3, #12
 800b724:	d112      	bne.n	800b74c <WiFi_Conn_ND+0x17ec>
								{
									Cambiar_CWMODE(b);
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f7fb f98a 	bl	8006a40 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2264      	movs	r2, #100	; 0x64
 800b730:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2200      	movs	r2, #0
 800b738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2200      	movs	r2, #0
 800b740:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2200      	movs	r2, #0
 800b748:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b752:	2b0a      	cmp	r3, #10
 800b754:	d004      	beq.n	800b760 <WiFi_Conn_ND+0x1800>
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b75c:	2b0d      	cmp	r3, #13
 800b75e:	d10e      	bne.n	800b77e <WiFi_Conn_ND+0x181e>
								{
									ConectarWIFI(b);
 800b760:	68f8      	ldr	r0, [r7, #12]
 800b762:	f7fb f983 	bl	8006a6c <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	22c8      	movs	r2, #200	; 0xc8
 800b76a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2200      	movs	r2, #0
 800b772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2200      	movs	r2, #0
 800b77a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b784:	2b01      	cmp	r3, #1
 800b786:	d004      	beq.n	800b792 <WiFi_Conn_ND+0x1832>
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d14b      	bne.n	800b82a <WiFi_Conn_ND+0x18ca>
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d046      	beq.n	800b82a <WiFi_Conn_ND+0x18ca>
								{
									EnviarDatosSRVR(b);
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f7fb f9e9 	bl	8006b74 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b7a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_new_data_rcv=0;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_send_data=0;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
								}

						}
						break;
 800b7cc:	e02d      	b.n	800b82a <WiFi_Conn_ND+0x18ca>
			break;
 800b7ce:	bf00      	nop
 800b7d0:	e02c      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
			break;
 800b7d2:	bf00      	nop
 800b7d4:	e02a      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
			break;
 800b7d6:	bf00      	nop
 800b7d8:	e028      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
			break;
 800b7da:	bf00      	nop
 800b7dc:	e026      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
			break;
 800b7de:	bf00      	nop
 800b7e0:	e024      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
			break;
 800b7e2:	bf00      	nop
 800b7e4:	e022      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
			break;
 800b7e6:	bf00      	nop
 800b7e8:	e020      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
			break;
 800b7ea:	bf00      	nop
 800b7ec:	e01e      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
			break;
 800b7ee:	bf00      	nop
 800b7f0:	e01c      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
			break;
 800b7f2:	bf00      	nop
 800b7f4:	e01a      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
			break;
 800b7f6:	bf00      	nop
 800b7f8:	e018      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
			break;
 800b7fa:	bf00      	nop
 800b7fc:	e016      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
			break;
 800b7fe:	bf00      	nop
 800b800:	e014      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
			break;
 800b802:	bf00      	nop
 800b804:	e012      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
			break;
 800b806:	bf00      	nop
 800b808:	e010      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
						break;
 800b80a:	bf00      	nop
 800b80c:	e00e      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
						break;
 800b80e:	bf00      	nop
 800b810:	e00c      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
						break;
 800b812:	bf00      	nop
 800b814:	e00a      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
						break;
 800b816:	bf00      	nop
 800b818:	e008      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
						break;
 800b81a:	bf00      	nop
 800b81c:	e006      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
						break;
 800b81e:	bf00      	nop
 800b820:	e004      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
						break;
 800b822:	bf00      	nop
 800b824:	e002      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
						break;
 800b826:	bf00      	nop
 800b828:	e000      	b.n	800b82c <WiFi_Conn_ND+0x18cc>
						break;
 800b82a:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800b832:	4618      	mov	r0, r3
 800b834:	3710      	adds	r7, #16
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop

0800b83c <httpPOST>:




httpPOST(char * endpoint, char* server_ip, char * port,uint16_t dp_cartucho, uint16_t dp_filtro, uint16_t ciclo_ev1, uint16_t ciclo_ev2,uint16_t ciclo_ev3,uint16_t ciclo_ev4,uint16_t ciclo_ev5,uint16_t ciclo_ev6,uint16_t ciclo_ev7,uint16_t ciclo_ev8, uint16_t devId, char  * post, char * body, int max_char)
{
 800b83c:	b5b0      	push	{r4, r5, r7, lr}
 800b83e:	b09c      	sub	sp, #112	; 0x70
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	607a      	str	r2, [r7, #4]
 800b848:	807b      	strh	r3, [r7, #2]
	post[0]='\0';
 800b84a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b84e:	2200      	movs	r2, #0
 800b850:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b856:	2200      	movs	r2, #0
 800b858:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b85a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b85e:	f7f4 fcc9 	bl	80001f4 <strlen>
 800b862:	4603      	mov	r3, r0
 800b864:	461a      	mov	r2, r3
 800b866:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b86a:	4413      	add	r3, r2
 800b86c:	4aeb      	ldr	r2, [pc, #940]	; (800bc1c <httpPOST+0x3e0>)
 800b86e:	6810      	ldr	r0, [r2, #0]
 800b870:	6018      	str	r0, [r3, #0]
 800b872:	8892      	ldrh	r2, [r2, #4]
 800b874:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b876:	68f8      	ldr	r0, [r7, #12]
 800b878:	f7f4 fcbc 	bl	80001f4 <strlen>
 800b87c:	4603      	mov	r3, r0
 800b87e:	461a      	mov	r2, r3
 800b880:	68f9      	ldr	r1, [r7, #12]
 800b882:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b886:	f003 fd46 	bl	800f316 <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b88a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b88e:	f7f4 fcb1 	bl	80001f4 <strlen>
 800b892:	4603      	mov	r3, r0
 800b894:	461a      	mov	r2, r3
 800b896:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b89a:	4413      	add	r3, r2
 800b89c:	49e0      	ldr	r1, [pc, #896]	; (800bc20 <httpPOST+0x3e4>)
 800b89e:	461a      	mov	r2, r3
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	cb03      	ldmia	r3!, {r0, r1}
 800b8a4:	6010      	str	r0, [r2, #0]
 800b8a6:	6051      	str	r1, [r2, #4]
 800b8a8:	8819      	ldrh	r1, [r3, #0]
 800b8aa:	789b      	ldrb	r3, [r3, #2]
 800b8ac:	8111      	strh	r1, [r2, #8]
 800b8ae:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b8b0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b8b4:	f7f4 fc9e 	bl	80001f4 <strlen>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b8c0:	4413      	add	r3, r2
 800b8c2:	4ad8      	ldr	r2, [pc, #864]	; (800bc24 <httpPOST+0x3e8>)
 800b8c4:	8811      	ldrh	r1, [r2, #0]
 800b8c6:	7892      	ldrb	r2, [r2, #2]
 800b8c8:	8019      	strh	r1, [r3, #0]
 800b8ca:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b8cc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b8d0:	f7f4 fc90 	bl	80001f4 <strlen>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b8dc:	4413      	add	r3, r2
 800b8de:	4ad2      	ldr	r2, [pc, #840]	; (800bc28 <httpPOST+0x3ec>)
 800b8e0:	6810      	ldr	r0, [r2, #0]
 800b8e2:	6018      	str	r0, [r3, #0]
 800b8e4:	8891      	ldrh	r1, [r2, #4]
 800b8e6:	7992      	ldrb	r2, [r2, #6]
 800b8e8:	8099      	strh	r1, [r3, #4]
 800b8ea:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b8ec:	68b8      	ldr	r0, [r7, #8]
 800b8ee:	f7f4 fc81 	bl	80001f4 <strlen>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	68b9      	ldr	r1, [r7, #8]
 800b8f8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b8fc:	f003 fd0b 	bl	800f316 <strncat>
	strncat(post,":",1);
 800b900:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b904:	f7f4 fc76 	bl	80001f4 <strlen>
 800b908:	4603      	mov	r3, r0
 800b90a:	461a      	mov	r2, r3
 800b90c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b910:	4413      	add	r3, r2
 800b912:	49c6      	ldr	r1, [pc, #792]	; (800bc2c <httpPOST+0x3f0>)
 800b914:	461a      	mov	r2, r3
 800b916:	460b      	mov	r3, r1
 800b918:	881b      	ldrh	r3, [r3, #0]
 800b91a:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f7f4 fc69 	bl	80001f4 <strlen>
 800b922:	4603      	mov	r3, r0
 800b924:	461a      	mov	r2, r3
 800b926:	6879      	ldr	r1, [r7, #4]
 800b928:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b92c:	f003 fcf3 	bl	800f316 <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b930:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b934:	f7f4 fc5e 	bl	80001f4 <strlen>
 800b938:	4603      	mov	r3, r0
 800b93a:	461a      	mov	r2, r3
 800b93c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b940:	4413      	add	r3, r2
 800b942:	4ab8      	ldr	r2, [pc, #736]	; (800bc24 <httpPOST+0x3e8>)
 800b944:	8811      	ldrh	r1, [r2, #0]
 800b946:	7892      	ldrb	r2, [r2, #2]
 800b948:	8019      	strh	r1, [r3, #0]
 800b94a:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b94c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b950:	f7f4 fc50 	bl	80001f4 <strlen>
 800b954:	4603      	mov	r3, r0
 800b956:	461a      	mov	r2, r3
 800b958:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b95c:	4413      	add	r3, r2
 800b95e:	4ab4      	ldr	r2, [pc, #720]	; (800bc30 <httpPOST+0x3f4>)
 800b960:	461d      	mov	r5, r3
 800b962:	4614      	mov	r4, r2
 800b964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b966:	6028      	str	r0, [r5, #0]
 800b968:	6069      	str	r1, [r5, #4]
 800b96a:	60aa      	str	r2, [r5, #8]
 800b96c:	60eb      	str	r3, [r5, #12]
 800b96e:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b970:	6128      	str	r0, [r5, #16]
 800b972:	6169      	str	r1, [r5, #20]
 800b974:	61aa      	str	r2, [r5, #24]
 800b976:	8823      	ldrh	r3, [r4, #0]
 800b978:	78a2      	ldrb	r2, [r4, #2]
 800b97a:	83ab      	strh	r3, [r5, #28]
 800b97c:	4613      	mov	r3, r2
 800b97e:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b980:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b984:	f7f4 fc36 	bl	80001f4 <strlen>
 800b988:	4603      	mov	r3, r0
 800b98a:	461a      	mov	r2, r3
 800b98c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b990:	4413      	add	r3, r2
 800b992:	4aa4      	ldr	r2, [pc, #656]	; (800bc24 <httpPOST+0x3e8>)
 800b994:	8811      	ldrh	r1, [r2, #0]
 800b996:	7892      	ldrb	r2, [r2, #2]
 800b998:	8019      	strh	r1, [r3, #0]
 800b99a:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b99c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b9a0:	f7f4 fc28 	bl	80001f4 <strlen>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b9ac:	4413      	add	r3, r2
 800b9ae:	4aa1      	ldr	r2, [pc, #644]	; (800bc34 <httpPOST+0x3f8>)
 800b9b0:	461c      	mov	r4, r3
 800b9b2:	4615      	mov	r5, r2
 800b9b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b9b6:	6020      	str	r0, [r4, #0]
 800b9b8:	6061      	str	r1, [r4, #4]
 800b9ba:	60a2      	str	r2, [r4, #8]
 800b9bc:	60e3      	str	r3, [r4, #12]


	// Conversión de datos recibido por ModBUS
	char _cartucho[8];
	_cartucho[0]='\0';
 800b9be:	2300      	movs	r3, #0
 800b9c0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	INTOA( dp_cartucho,_cartucho);
 800b9c4:	887b      	ldrh	r3, [r7, #2]
 800b9c6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800b9ca:	4611      	mov	r1, r2
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f003 fa1b 	bl	800ee08 <INTOA>
	char _filtro[8];
	_filtro[0]='\0';
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	INTOA( dp_filtro, _filtro);
 800b9d8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800b9dc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b9e0:	4611      	mov	r1, r2
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f003 fa10 	bl	800ee08 <INTOA>
	char _ev1[8];
	_ev1[0]='\0';
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	INTOA( ciclo_ev1, _ev1);
 800b9ee:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b9f2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b9f6:	4611      	mov	r1, r2
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f003 fa05 	bl	800ee08 <INTOA>
	char _ev2[8];
	_ev2[0]='\0';
 800b9fe:	2300      	movs	r3, #0
 800ba00:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	INTOA( ciclo_ev2, _ev2);
 800ba04:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800ba08:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ba0c:	4611      	mov	r1, r2
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f003 f9fa 	bl	800ee08 <INTOA>
	char _ev3[8];
	_ev3[0]='\0';
 800ba14:	2300      	movs	r3, #0
 800ba16:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	INTOA( ciclo_ev3, _ev3);
 800ba1a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800ba1e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ba22:	4611      	mov	r1, r2
 800ba24:	4618      	mov	r0, r3
 800ba26:	f003 f9ef 	bl	800ee08 <INTOA>
	char _ev4[8];
	_ev4[0]='\0';
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	INTOA( ciclo_ev4, _ev4);
 800ba30:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800ba34:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ba38:	4611      	mov	r1, r2
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f003 f9e4 	bl	800ee08 <INTOA>
	char _ev5[8];
	_ev5[0]='\0';
 800ba40:	2300      	movs	r3, #0
 800ba42:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	INTOA( ciclo_ev5, _ev5);
 800ba46:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800ba4a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ba4e:	4611      	mov	r1, r2
 800ba50:	4618      	mov	r0, r3
 800ba52:	f003 f9d9 	bl	800ee08 <INTOA>
	char _ev6[8];
	_ev6[0]='\0';
 800ba56:	2300      	movs	r3, #0
 800ba58:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	INTOA( ciclo_ev6, _ev6);
 800ba5c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800ba60:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ba64:	4611      	mov	r1, r2
 800ba66:	4618      	mov	r0, r3
 800ba68:	f003 f9ce 	bl	800ee08 <INTOA>
	char _ev7[8];
	_ev7[0]='\0';
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	INTOA( ciclo_ev7, _ev7);
 800ba72:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800ba76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ba7a:	4611      	mov	r1, r2
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f003 f9c3 	bl	800ee08 <INTOA>
	char _ev8[8];
	_ev8[0]='\0';
 800ba82:	2300      	movs	r3, #0
 800ba84:	f887 3020 	strb.w	r3, [r7, #32]
	INTOA( ciclo_ev8, _ev8);
 800ba88:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800ba8c:	f107 0220 	add.w	r2, r7, #32
 800ba90:	4611      	mov	r1, r2
 800ba92:	4618      	mov	r0, r3
 800ba94:	f003 f9b8 	bl	800ee08 <INTOA>
	char _devId[8];
	_devId[0]='\0';
 800ba98:	2300      	movs	r3, #0
 800ba9a:	763b      	strb	r3, [r7, #24]
	INTOA(devId, _devId);
 800ba9c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800baa0:	f107 0218 	add.w	r2, r7, #24
 800baa4:	4611      	mov	r1, r2
 800baa6:	4618      	mov	r0, r3
 800baa8:	f003 f9ae 	bl	800ee08 <INTOA>

	strncat(body,cartucho,strlen(cartucho));
 800baac:	4862      	ldr	r0, [pc, #392]	; (800bc38 <httpPOST+0x3fc>)
 800baae:	f7f4 fba1 	bl	80001f4 <strlen>
 800bab2:	4603      	mov	r3, r0
 800bab4:	461a      	mov	r2, r3
 800bab6:	4960      	ldr	r1, [pc, #384]	; (800bc38 <httpPOST+0x3fc>)
 800bab8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800babc:	f003 fc2b 	bl	800f316 <strncat>
	strncat(body,_cartucho,strlen(_cartucho));
 800bac0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800bac4:	4618      	mov	r0, r3
 800bac6:	f7f4 fb95 	bl	80001f4 <strlen>
 800baca:	4602      	mov	r2, r0
 800bacc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800bad0:	4619      	mov	r1, r3
 800bad2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bad6:	f003 fc1e 	bl	800f316 <strncat>
	strncat(body,filtro,strlen(filtro));
 800bada:	4858      	ldr	r0, [pc, #352]	; (800bc3c <httpPOST+0x400>)
 800badc:	f7f4 fb8a 	bl	80001f4 <strlen>
 800bae0:	4603      	mov	r3, r0
 800bae2:	461a      	mov	r2, r3
 800bae4:	4955      	ldr	r1, [pc, #340]	; (800bc3c <httpPOST+0x400>)
 800bae6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800baea:	f003 fc14 	bl	800f316 <strncat>
	strncat(body,_filtro,strlen(_filtro));
 800baee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7f4 fb7e 	bl	80001f4 <strlen>
 800baf8:	4602      	mov	r2, r0
 800bafa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bafe:	4619      	mov	r1, r3
 800bb00:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bb04:	f003 fc07 	bl	800f316 <strncat>
	strncat(body,ev1,strlen(ev1));
 800bb08:	484d      	ldr	r0, [pc, #308]	; (800bc40 <httpPOST+0x404>)
 800bb0a:	f7f4 fb73 	bl	80001f4 <strlen>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	461a      	mov	r2, r3
 800bb12:	494b      	ldr	r1, [pc, #300]	; (800bc40 <httpPOST+0x404>)
 800bb14:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bb18:	f003 fbfd 	bl	800f316 <strncat>
	strncat(body,_ev1,strlen(_ev1));
 800bb1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bb20:	4618      	mov	r0, r3
 800bb22:	f7f4 fb67 	bl	80001f4 <strlen>
 800bb26:	4602      	mov	r2, r0
 800bb28:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bb32:	f003 fbf0 	bl	800f316 <strncat>
	strncat(body,ev2,strlen(ev2));
 800bb36:	4843      	ldr	r0, [pc, #268]	; (800bc44 <httpPOST+0x408>)
 800bb38:	f7f4 fb5c 	bl	80001f4 <strlen>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	461a      	mov	r2, r3
 800bb40:	4940      	ldr	r1, [pc, #256]	; (800bc44 <httpPOST+0x408>)
 800bb42:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bb46:	f003 fbe6 	bl	800f316 <strncat>
	strncat(body,_ev2,strlen(_ev2));
 800bb4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7f4 fb50 	bl	80001f4 <strlen>
 800bb54:	4602      	mov	r2, r0
 800bb56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bb60:	f003 fbd9 	bl	800f316 <strncat>
	strncat(body,ev3,strlen(ev3));
 800bb64:	4838      	ldr	r0, [pc, #224]	; (800bc48 <httpPOST+0x40c>)
 800bb66:	f7f4 fb45 	bl	80001f4 <strlen>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	4936      	ldr	r1, [pc, #216]	; (800bc48 <httpPOST+0x40c>)
 800bb70:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bb74:	f003 fbcf 	bl	800f316 <strncat>
	strncat(body,_ev3,strlen(_ev3));
 800bb78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7f4 fb39 	bl	80001f4 <strlen>
 800bb82:	4602      	mov	r2, r0
 800bb84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bb88:	4619      	mov	r1, r3
 800bb8a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bb8e:	f003 fbc2 	bl	800f316 <strncat>
	strncat(body,ev4,strlen(ev4));
 800bb92:	482e      	ldr	r0, [pc, #184]	; (800bc4c <httpPOST+0x410>)
 800bb94:	f7f4 fb2e 	bl	80001f4 <strlen>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	492b      	ldr	r1, [pc, #172]	; (800bc4c <httpPOST+0x410>)
 800bb9e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bba2:	f003 fbb8 	bl	800f316 <strncat>
	strncat(body,_ev4,strlen(_ev4));
 800bba6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7f4 fb22 	bl	80001f4 <strlen>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bbbc:	f003 fbab 	bl	800f316 <strncat>
	strncat(body,ev5,strlen(ev5));
 800bbc0:	4823      	ldr	r0, [pc, #140]	; (800bc50 <httpPOST+0x414>)
 800bbc2:	f7f4 fb17 	bl	80001f4 <strlen>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	461a      	mov	r2, r3
 800bbca:	4921      	ldr	r1, [pc, #132]	; (800bc50 <httpPOST+0x414>)
 800bbcc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bbd0:	f003 fba1 	bl	800f316 <strncat>
	strncat(body,_ev5,strlen(_ev5));
 800bbd4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7f4 fb0b 	bl	80001f4 <strlen>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bbea:	f003 fb94 	bl	800f316 <strncat>
	strncat(body,ev6,strlen(ev6));
 800bbee:	4819      	ldr	r0, [pc, #100]	; (800bc54 <httpPOST+0x418>)
 800bbf0:	f7f4 fb00 	bl	80001f4 <strlen>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	4916      	ldr	r1, [pc, #88]	; (800bc54 <httpPOST+0x418>)
 800bbfa:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bbfe:	f003 fb8a 	bl	800f316 <strncat>
	strncat(body,_ev6,strlen(_ev6));
 800bc02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7f4 faf4 	bl	80001f4 <strlen>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc12:	4619      	mov	r1, r3
 800bc14:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bc18:	e01e      	b.n	800bc58 <httpPOST+0x41c>
 800bc1a:	bf00      	nop
 800bc1c:	08010978 	.word	0x08010978
 800bc20:	08010980 	.word	0x08010980
 800bc24:	0801098c 	.word	0x0801098c
 800bc28:	08010990 	.word	0x08010990
 800bc2c:	08010998 	.word	0x08010998
 800bc30:	0801099c 	.word	0x0801099c
 800bc34:	080109bc 	.word	0x080109bc
 800bc38:	20000090 	.word	0x20000090
 800bc3c:	200000a0 	.word	0x200000a0
 800bc40:	200000b0 	.word	0x200000b0
 800bc44:	200000c0 	.word	0x200000c0
 800bc48:	200000d0 	.word	0x200000d0
 800bc4c:	200000e0 	.word	0x200000e0
 800bc50:	200000f0 	.word	0x200000f0
 800bc54:	20000100 	.word	0x20000100
 800bc58:	f003 fb5d 	bl	800f316 <strncat>
	strncat(body,ev7,strlen(ev7));
 800bc5c:	484a      	ldr	r0, [pc, #296]	; (800bd88 <httpPOST+0x54c>)
 800bc5e:	f7f4 fac9 	bl	80001f4 <strlen>
 800bc62:	4603      	mov	r3, r0
 800bc64:	461a      	mov	r2, r3
 800bc66:	4948      	ldr	r1, [pc, #288]	; (800bd88 <httpPOST+0x54c>)
 800bc68:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bc6c:	f003 fb53 	bl	800f316 <strncat>
	strncat(body,_ev7,strlen(_ev7));
 800bc70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7f4 fabd 	bl	80001f4 <strlen>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bc80:	4619      	mov	r1, r3
 800bc82:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bc86:	f003 fb46 	bl	800f316 <strncat>
	strncat(body,ev8,strlen(ev8));
 800bc8a:	4840      	ldr	r0, [pc, #256]	; (800bd8c <httpPOST+0x550>)
 800bc8c:	f7f4 fab2 	bl	80001f4 <strlen>
 800bc90:	4603      	mov	r3, r0
 800bc92:	461a      	mov	r2, r3
 800bc94:	493d      	ldr	r1, [pc, #244]	; (800bd8c <httpPOST+0x550>)
 800bc96:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bc9a:	f003 fb3c 	bl	800f316 <strncat>
	strncat(body,_ev8,strlen(_ev8));
 800bc9e:	f107 0320 	add.w	r3, r7, #32
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7f4 faa6 	bl	80001f4 <strlen>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	f107 0320 	add.w	r3, r7, #32
 800bcae:	4619      	mov	r1, r3
 800bcb0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bcb4:	f003 fb2f 	bl	800f316 <strncat>
	strncat(body,deviceId,strlen(deviceId));
 800bcb8:	4835      	ldr	r0, [pc, #212]	; (800bd90 <httpPOST+0x554>)
 800bcba:	f7f4 fa9b 	bl	80001f4 <strlen>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	4933      	ldr	r1, [pc, #204]	; (800bd90 <httpPOST+0x554>)
 800bcc4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bcc8:	f003 fb25 	bl	800f316 <strncat>
	strncat(body,_devId,strlen(_devId));
 800bccc:	f107 0318 	add.w	r3, r7, #24
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7f4 fa8f 	bl	80001f4 <strlen>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	f107 0318 	add.w	r3, r7, #24
 800bcdc:	4619      	mov	r1, r3
 800bcde:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bce2:	f003 fb18 	bl	800f316 <strncat>

	strncat(body,"}",strlen("}"));
 800bce6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bcea:	f7f4 fa83 	bl	80001f4 <strlen>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bcf6:	4413      	add	r3, r2
 800bcf8:	4926      	ldr	r1, [pc, #152]	; (800bd94 <httpPOST+0x558>)
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	881b      	ldrh	r3, [r3, #0]
 800bd00:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800bd02:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bd06:	f7f4 fa75 	bl	80001f4 <strlen>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	f107 0310 	add.w	r3, r7, #16
 800bd10:	4619      	mov	r1, r3
 800bd12:	4610      	mov	r0, r2
 800bd14:	f003 f878 	bl	800ee08 <INTOA>
	strncat(post,length,strlen(length));
 800bd18:	f107 0310 	add.w	r3, r7, #16
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7f4 fa69 	bl	80001f4 <strlen>
 800bd22:	4602      	mov	r2, r0
 800bd24:	f107 0310 	add.w	r3, r7, #16
 800bd28:	4619      	mov	r1, r3
 800bd2a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800bd2e:	f003 faf2 	bl	800f316 <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800bd32:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800bd36:	f7f4 fa5d 	bl	80001f4 <strlen>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bd42:	4413      	add	r3, r2
 800bd44:	4a14      	ldr	r2, [pc, #80]	; (800bd98 <httpPOST+0x55c>)
 800bd46:	6810      	ldr	r0, [r2, #0]
 800bd48:	6018      	str	r0, [r3, #0]
 800bd4a:	7912      	ldrb	r2, [r2, #4]
 800bd4c:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800bd4e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bd52:	f7f4 fa4f 	bl	80001f4 <strlen>
 800bd56:	4602      	mov	r2, r0
 800bd58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d20d      	bcs.n	800bd7c <httpPOST+0x540>
	{
		strncat(post,body,strlen(body));
 800bd60:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bd64:	f7f4 fa46 	bl	80001f4 <strlen>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800bd70:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800bd74:	f003 facf 	bl	800f316 <strncat>
		return 1 ;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e000      	b.n	800bd7e <httpPOST+0x542>
	}
		else
		{
			return 0;
 800bd7c:	2300      	movs	r3, #0
		}
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3770      	adds	r7, #112	; 0x70
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bdb0      	pop	{r4, r5, r7, pc}
 800bd86:	bf00      	nop
 800bd88:	20000110 	.word	0x20000110
 800bd8c:	20000120 	.word	0x20000120
 800bd90:	20000130 	.word	0x20000130
 800bd94:	080109cc 	.word	0x080109cc
 800bd98:	080109d0 	.word	0x080109d0

0800bd9c <LoRa_Send>:
#include "RYLR896.h"
#include "string.h"
#include "STR_Chelo.h"

int LoRa_Send(struct LoRa *a, UART_HandleTypeDef * SERIAL)
{
 800bd9c:	b5b0      	push	{r4, r5, r7, lr}
 800bd9e:	b086      	sub	sp, #24
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]

	char items[4];

	if(a->txitems > 241)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800bdac:	2bf1      	cmp	r3, #241	; 0xf1
 800bdae:	dd01      	ble.n	800bdb4 <LoRa_Send+0x18>
	{
		return ERROR_BUFFER_SIZE;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	e099      	b.n	800bee8 <LoRa_Send+0x14c>
	}
	else
	{

		items[0]='\0';
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	723b      	strb	r3, [r7, #8]
		itoa(a->txitems, items,10);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800bdbe:	f107 0108 	add.w	r1, r7, #8
 800bdc2:	220a      	movs	r2, #10
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f003 f8ba 	bl	800ef3e <itoa>
		a->txbuff2SND[0]='\0'; 													//Borro el vector
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		strncat(a->txbuff2SND,"AT+SEND=",strlen("AT+SEND="));					//AT+SEND=
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bdd8:	4620      	mov	r0, r4
 800bdda:	f7f4 fa0b 	bl	80001f4 <strlen>
 800bdde:	4603      	mov	r3, r0
 800bde0:	4423      	add	r3, r4
 800bde2:	4943      	ldr	r1, [pc, #268]	; (800bef0 <LoRa_Send+0x154>)
 800bde4:	461a      	mov	r2, r3
 800bde6:	460b      	mov	r3, r1
 800bde8:	cb03      	ldmia	r3!, {r0, r1}
 800bdea:	6010      	str	r0, [r2, #0]
 800bdec:	6051      	str	r1, [r2, #4]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	7213      	strb	r3, [r2, #8]
		strncat(a->txbuff2SND,a->dest_address,strlen(a->dest_address));			//AT+SEND=1
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f103 0516 	add.w	r5, r3, #22
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	3316      	adds	r3, #22
 800be02:	4618      	mov	r0, r3
 800be04:	f7f4 f9f6 	bl	80001f4 <strlen>
 800be08:	4603      	mov	r3, r0
 800be0a:	461a      	mov	r2, r3
 800be0c:	4629      	mov	r1, r5
 800be0e:	4620      	mov	r0, r4
 800be10:	f003 fa81 	bl	800f316 <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800be1a:	4620      	mov	r0, r4
 800be1c:	f7f4 f9ea 	bl	80001f4 <strlen>
 800be20:	4603      	mov	r3, r0
 800be22:	4423      	add	r3, r4
 800be24:	4933      	ldr	r1, [pc, #204]	; (800bef4 <LoRa_Send+0x158>)
 800be26:	461a      	mov	r2, r3
 800be28:	460b      	mov	r3, r1
 800be2a:	881b      	ldrh	r3, [r3, #0]
 800be2c:	8013      	strh	r3, [r2, #0]
		strncat(a->txbuff2SND,items,strlen(items));								//AT+SEND=1,4
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800be34:	f107 0308 	add.w	r3, r7, #8
 800be38:	4618      	mov	r0, r3
 800be3a:	f7f4 f9db 	bl	80001f4 <strlen>
 800be3e:	4602      	mov	r2, r0
 800be40:	f107 0308 	add.w	r3, r7, #8
 800be44:	4619      	mov	r1, r3
 800be46:	4620      	mov	r0, r4
 800be48:	f003 fa65 	bl	800f316 <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,4,
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800be52:	4620      	mov	r0, r4
 800be54:	f7f4 f9ce 	bl	80001f4 <strlen>
 800be58:	4603      	mov	r3, r0
 800be5a:	4423      	add	r3, r4
 800be5c:	4925      	ldr	r1, [pc, #148]	; (800bef4 <LoRa_Send+0x158>)
 800be5e:	461a      	mov	r2, r3
 800be60:	460b      	mov	r3, r1
 800be62:	881b      	ldrh	r3, [r3, #0]
 800be64:	8013      	strh	r3, [r2, #0]

		int la=strlen(a->txbuff2SND);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7f4 f9c1 	bl	80001f4 <strlen>
 800be72:	4603      	mov	r3, r0
 800be74:	617b      	str	r3, [r7, #20]
		int lb=la+a->txitems;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800be7c:	697a      	ldr	r2, [r7, #20]
 800be7e:	4413      	add	r3, r2
 800be80:	60fb      	str	r3, [r7, #12]
		int lc=0;
 800be82:	2300      	movs	r3, #0
 800be84:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800be86:	e012      	b.n	800beae <LoRa_Send+0x112>
		{
			a->txbuff2SND[la]=a->txbuff[lc];
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	4413      	add	r3, r2
 800be8e:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 800be92:	7819      	ldrb	r1, [r3, #0]
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	4413      	add	r3, r2
 800be9a:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800be9e:	460a      	mov	r2, r1
 800bea0:	701a      	strb	r2, [r3, #0]
			la++;
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	3301      	adds	r3, #1
 800bea6:	617b      	str	r3, [r7, #20]
			lc++;
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	3301      	adds	r3, #1
 800beac:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800beae:	697a      	ldr	r2, [r7, #20]
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	dbe8      	blt.n	800be88 <LoRa_Send+0xec>
		}
		a->txbuff2SND[la++]='\r';
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	1c5a      	adds	r2, r3, #1
 800beba:	617a      	str	r2, [r7, #20]
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	4413      	add	r3, r2
 800bec0:	220d      	movs	r2, #13
 800bec2:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		a->txbuff2SND[la++]='\n';
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	1c5a      	adds	r2, r3, #1
 800beca:	617a      	str	r2, [r7, #20]
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	4413      	add	r3, r2
 800bed0:	220a      	movs	r2, #10
 800bed2:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		HAL_UART_Transmit_IT(SERIAL, a->txbuff2SND, la);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800bedc:	697a      	ldr	r2, [r7, #20]
 800bede:	b292      	uxth	r2, r2
 800bee0:	4619      	mov	r1, r3
 800bee2:	6838      	ldr	r0, [r7, #0]
 800bee4:	f7f9 fdc2 	bl	8005a6c <HAL_UART_Transmit_IT>
	}

}
 800bee8:	4618      	mov	r0, r3
 800beea:	3718      	adds	r7, #24
 800beec:	46bd      	mov	sp, r7
 800beee:	bdb0      	pop	{r4, r5, r7, pc}
 800bef0:	080109d8 	.word	0x080109d8
 800bef4:	080109e4 	.word	0x080109e4

0800bef8 <LoRa_reset_sndTIMER>:
		a->tmr_dly_en=1;
		a->tmr_dlyCNT=0;
 }

void LoRa_reset_sndTIMER(struct LoRa *a,int msec)
 {
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
	 	a->tmr_dly_ON=0;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
		a->tmr_dly=msec;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	683a      	ldr	r2, [r7, #0]
 800bf0e:	f8c3 27f0 	str.w	r2, [r3, #2032]	; 0x7f0
		a->tmr_dly_en=0;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2200      	movs	r2, #0
 800bf16:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		a->tmr_dlyCNT=0;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	f8c3 27f4 	str.w	r2, [r3, #2036]	; 0x7f4
 }
 800bf22:	bf00      	nop
 800bf24:	370c      	adds	r7, #12
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr
	...

0800bf30 <LoRa_decode>:
		break;
	}
}

void LoRa_decode(struct LoRa *b)
 {
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
	switch (Lora_idSTR(b))
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f000 fa25 	bl	800c388 <Lora_idSTR>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b10      	cmp	r3, #16
 800bf42:	f200 820c 	bhi.w	800c35e <LoRa_decode+0x42e>
 800bf46:	a201      	add	r2, pc, #4	; (adr r2, 800bf4c <LoRa_decode+0x1c>)
 800bf48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf4c:	0800bf91 	.word	0x0800bf91
 800bf50:	0800c069 	.word	0x0800c069
 800bf54:	0800c29d 	.word	0x0800c29d
 800bf58:	0800c2a7 	.word	0x0800c2a7
 800bf5c:	0800c2b1 	.word	0x0800c2b1
 800bf60:	0800c2bb 	.word	0x0800c2bb
 800bf64:	0800c2c5 	.word	0x0800c2c5
 800bf68:	0800c2cf 	.word	0x0800c2cf
 800bf6c:	0800c2d9 	.word	0x0800c2d9
 800bf70:	0800c2e3 	.word	0x0800c2e3
 800bf74:	0800c2ed 	.word	0x0800c2ed
 800bf78:	0800c32d 	.word	0x0800c32d
 800bf7c:	0800c337 	.word	0x0800c337
 800bf80:	0800c34b 	.word	0x0800c34b
 800bf84:	0800c341 	.word	0x0800c341
 800bf88:	0800c293 	.word	0x0800c293
 800bf8c:	0800c355 	.word	0x0800c355
	{
		case _OK:
		{
			switch(b->estado)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 800bf96:	3b01      	subs	r3, #1
 800bf98:	2b13      	cmp	r3, #19
 800bf9a:	d860      	bhi.n	800c05e <LoRa_decode+0x12e>
 800bf9c:	a201      	add	r2, pc, #4	; (adr r2, 800bfa4 <LoRa_decode+0x74>)
 800bf9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfa2:	bf00      	nop
 800bfa4:	0800bff5 	.word	0x0800bff5
 800bfa8:	0800c05f 	.word	0x0800c05f
 800bfac:	0800c05f 	.word	0x0800c05f
 800bfb0:	0800c05f 	.word	0x0800c05f
 800bfb4:	0800c05f 	.word	0x0800c05f
 800bfb8:	0800c05f 	.word	0x0800c05f
 800bfbc:	0800bfff 	.word	0x0800bfff
 800bfc0:	0800c009 	.word	0x0800c009
 800bfc4:	0800c05f 	.word	0x0800c05f
 800bfc8:	0800c013 	.word	0x0800c013
 800bfcc:	0800c05f 	.word	0x0800c05f
 800bfd0:	0800c01d 	.word	0x0800c01d
 800bfd4:	0800c05f 	.word	0x0800c05f
 800bfd8:	0800c027 	.word	0x0800c027
 800bfdc:	0800c05f 	.word	0x0800c05f
 800bfe0:	0800c031 	.word	0x0800c031
 800bfe4:	0800c05f 	.word	0x0800c05f
 800bfe8:	0800c03b 	.word	0x0800c03b
 800bfec:	0800c05f 	.word	0x0800c05f
 800bff0:	0800c045 	.word	0x0800c045
			{
				case _AT_SENT:
					b->estado=_IDLE;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bffc:	e02f      	b.n	800c05e <LoRa_decode+0x12e>
				case _MODE_SENT:
					b->estado=_MODE_OK;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2206      	movs	r2, #6
 800c002:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c006:	e02a      	b.n	800c05e <LoRa_decode+0x12e>
				case _PARAMETER_SENT:
					b->estado=_PARAMETER_OK;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2209      	movs	r2, #9
 800c00c:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c010:	e025      	b.n	800c05e <LoRa_decode+0x12e>
				case _BAND_SENT:
					b->estado=_BAND_OK;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	220b      	movs	r2, #11
 800c016:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c01a:	e020      	b.n	800c05e <LoRa_decode+0x12e>
				case _ADDR_SENT:
					b->estado=_ADDR_OK;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	220d      	movs	r2, #13
 800c020:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c024:	e01b      	b.n	800c05e <LoRa_decode+0x12e>
				case _NETWORK_SENT:
					b->estado=_NETWORK_OK;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	220f      	movs	r2, #15
 800c02a:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c02e:	e016      	b.n	800c05e <LoRa_decode+0x12e>
				case _CPIN_SENT:
					b->estado=_CPIN_OK;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2211      	movs	r2, #17
 800c034:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c038:	e011      	b.n	800c05e <LoRa_decode+0x12e>
				case _CRFOP_SENT:
					b->estado=_CRFOP_OK;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2213      	movs	r2, #19
 800c03e:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c042:	e00c      	b.n	800c05e <LoRa_decode+0x12e>
				case _SENT:
					{
						b->estado=_SENT_OK;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2215      	movs	r2, #21
 800c048:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
						b->rxbuff[0]='\0';
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
						ITM0_Write("\r\nLora _SENT_OK\r\n",strlen("\r\nLora _SENT_OK\r\n"));
 800c054:	2111      	movs	r1, #17
 800c056:	48a8      	ldr	r0, [pc, #672]	; (800c2f8 <LoRa_decode+0x3c8>)
 800c058:	f7f5 fc78 	bl	800194c <ITM0_Write>
					}
					break;
 800c05c:	bf00      	nop

			}

			ITM0_Write("\r\nLora _OK\r\n",strlen("\r\nLora _OK\r\n"));
 800c05e:	210c      	movs	r1, #12
 800c060:	48a6      	ldr	r0, [pc, #664]	; (800c2fc <LoRa_decode+0x3cc>)
 800c062:	f7f5 fc73 	bl	800194c <ITM0_Write>
						//Clean rxbuff_hld
		}
			break;
 800c066:	e17f      	b.n	800c368 <LoRa_decode+0x438>
		case _RCV:
		{
			ITM0_Write("\r\nLora _RCV\r\n",strlen("\r\nLora _RCV\r\n"));
 800c068:	210d      	movs	r1, #13
 800c06a:	48a5      	ldr	r0, [pc, #660]	; (800c300 <LoRa_decode+0x3d0>)
 800c06c:	f7f5 fc6e 	bl	800194c <ITM0_Write>
				b->estado=_DATO_RECIBIDO;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	221a      	movs	r2, #26
 800c074:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
				b->_data_available=1;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2201      	movs	r2, #1
 800c07c:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
					int i=0;
 800c080:	2300      	movs	r3, #0
 800c082:	617b      	str	r3, [r7, #20]
					int j=0;
 800c084:	2300      	movs	r3, #0
 800c086:	613b      	str	r3, [r7, #16]
					int lngt=0;
 800c088:	2300      	movs	r3, #0
 800c08a:	60fb      	str	r3, [r7, #12]
					while (b->rxbuff[i] != '=')
 800c08c:	e002      	b.n	800c094 <LoRa_decode+0x164>
					{ i++;}
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	3301      	adds	r3, #1
 800c092:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i] != '=')
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	4413      	add	r3, r2
 800c09a:	3356      	adds	r3, #86	; 0x56
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	2b3d      	cmp	r3, #61	; 0x3d
 800c0a0:	d1f5      	bne.n	800c08e <LoRa_decode+0x15e>
					i++;
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800c0a8:	e017      	b.n	800c0da <LoRa_decode+0x1aa>
					{
						b->rxaddress[j]=b->rxbuff[i];			//Save the address
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	3356      	adds	r3, #86	; 0x56
 800c0b2:	7819      	ldrb	r1, [r3, #0]
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	3306      	adds	r3, #6
 800c0bc:	460a      	mov	r2, r1
 800c0be:	701a      	strb	r2, [r3, #0]
						i++;
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	617b      	str	r3, [r7, #20]
						j++;
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	613b      	str	r3, [r7, #16]
						if (j > 6)
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	2b06      	cmp	r3, #6
 800c0d0:	dd03      	ble.n	800c0da <LoRa_decode+0x1aa>
						{
							Lora_rx_del(b);
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 fb9a 	bl	800c80c <Lora_rx_del>
							break;
 800c0d8:	e006      	b.n	800c0e8 <LoRa_decode+0x1b8>
					while (b->rxbuff[i]!= ',')
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	4413      	add	r3, r2
 800c0e0:	3356      	adds	r3, #86	; 0x56
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	2b2c      	cmp	r3, #44	; 0x2c
 800c0e6:	d1e0      	bne.n	800c0aa <LoRa_decode+0x17a>
						}
					}
					b->rxaddress[j]='\0';
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	3306      	adds	r3, #6
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	701a      	strb	r2, [r3, #0]
					j=0;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	613b      	str	r3, [r7, #16]
					i++;
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800c0fe:	e017      	b.n	800c130 <LoRa_decode+0x200>
					{
						b->rx_items[j]=b->rxbuff[i];			//Save the qty of data
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	4413      	add	r3, r2
 800c106:	3356      	adds	r3, #86	; 0x56
 800c108:	7819      	ldrb	r1, [r3, #0]
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	4413      	add	r3, r2
 800c110:	330c      	adds	r3, #12
 800c112:	460a      	mov	r2, r1
 800c114:	701a      	strb	r2, [r3, #0]
						i++;
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	3301      	adds	r3, #1
 800c11a:	617b      	str	r3, [r7, #20]
						j++;
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	3301      	adds	r3, #1
 800c120:	613b      	str	r3, [r7, #16]
						if (j > 4)
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	2b04      	cmp	r3, #4
 800c126:	dd03      	ble.n	800c130 <LoRa_decode+0x200>
						{
							Lora_rx_del(b);
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 fb6f 	bl	800c80c <Lora_rx_del>
							break;
 800c12e:	e006      	b.n	800c13e <LoRa_decode+0x20e>
					while (b->rxbuff[i]!= ',')
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	4413      	add	r3, r2
 800c136:	3356      	adds	r3, #86	; 0x56
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	2b2c      	cmp	r3, #44	; 0x2c
 800c13c:	d1e0      	bne.n	800c100 <LoRa_decode+0x1d0>
						}
					}
					b->rx_items[j]='\0';
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	4413      	add	r3, r2
 800c144:	330c      	adds	r3, #12
 800c146:	2200      	movs	r2, #0
 800c148:	701a      	strb	r2, [r3, #0]
					j=0;
 800c14a:	2300      	movs	r3, #0
 800c14c:	613b      	str	r3, [r7, #16]
					i++;
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	3301      	adds	r3, #1
 800c152:	617b      	str	r3, [r7, #20]
					lngt=atoi(b->rx_items,10);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	330c      	adds	r3, #12
 800c158:	210a      	movs	r1, #10
 800c15a:	4618      	mov	r0, r3
 800c15c:	f002 fed3 	bl	800ef06 <atoi>
 800c160:	60f8      	str	r0, [r7, #12]
					//lngt=lngt+i;
					//while(lngt>i)   //Ahota busco leer lo datos recibid y luego verificar si ok
					while (b->rxbuff[i]!= ',')
 800c162:	e019      	b.n	800c198 <LoRa_decode+0x268>
					{
						b->dataRCV[j]=b->rxbuff[i];			//Save the data
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	4413      	add	r3, r2
 800c16a:	3356      	adds	r3, #86	; 0x56
 800c16c:	7819      	ldrb	r1, [r3, #0]
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	4413      	add	r3, r2
 800c174:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800c178:	460a      	mov	r2, r1
 800c17a:	701a      	strb	r2, [r3, #0]
						j++;
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	3301      	adds	r3, #1
 800c180:	613b      	str	r3, [r7, #16]
						i++;
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	3301      	adds	r3, #1
 800c186:	617b      	str	r3, [r7, #20]
						if (j > lngt)
 800c188:	693a      	ldr	r2, [r7, #16]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	dd03      	ble.n	800c198 <LoRa_decode+0x268>
						{
							Lora_rx_del(b);
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 fb3b 	bl	800c80c <Lora_rx_del>
							break;
 800c196:	e006      	b.n	800c1a6 <LoRa_decode+0x276>
					while (b->rxbuff[i]!= ',')
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	4413      	add	r3, r2
 800c19e:	3356      	adds	r3, #86	; 0x56
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	2b2c      	cmp	r3, #44	; 0x2c
 800c1a4:	d1de      	bne.n	800c164 <LoRa_decode+0x234>
						}
					}
					b->_n_dataRCV=j;							//Save amount of data received
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	693a      	ldr	r2, [r7, #16]
 800c1aa:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
					j=0;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	613b      	str	r3, [r7, #16]
					i++;
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800c1b8:	e017      	b.n	800c1ea <LoRa_decode+0x2ba>
					{
						b->rx_convert[j]=b->rxbuff[i];			//save RSSI
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	4413      	add	r3, r2
 800c1c0:	3356      	adds	r3, #86	; 0x56
 800c1c2:	7819      	ldrb	r1, [r3, #0]
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	3310      	adds	r3, #16
 800c1cc:	460a      	mov	r2, r1
 800c1ce:	701a      	strb	r2, [r3, #0]
						i++;
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	617b      	str	r3, [r7, #20]
						j++;
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	3301      	adds	r3, #1
 800c1da:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	2b05      	cmp	r3, #5
 800c1e0:	dd03      	ble.n	800c1ea <LoRa_decode+0x2ba>
						{
							Lora_rx_del(b);
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 fb12 	bl	800c80c <Lora_rx_del>
							break;
 800c1e8:	e006      	b.n	800c1f8 <LoRa_decode+0x2c8>
					while (b->rxbuff[i]!= ',')
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	4413      	add	r3, r2
 800c1f0:	3356      	adds	r3, #86	; 0x56
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	2b2c      	cmp	r3, #44	; 0x2c
 800c1f6:	d1e0      	bne.n	800c1ba <LoRa_decode+0x28a>
						}
					}
					b->rxRSSI=atoi(b->rx_convert,10);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	3310      	adds	r3, #16
 800c1fc:	210a      	movs	r1, #10
 800c1fe:	4618      	mov	r0, r3
 800c200:	f002 fe81 	bl	800ef06 <atoi>
 800c204:	4602      	mov	r2, r0
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
					b->rx_convert[j]='\0';
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	4413      	add	r3, r2
 800c212:	3310      	adds	r3, #16
 800c214:	2200      	movs	r2, #0
 800c216:	701a      	strb	r2, [r3, #0]
					j=0;
 800c218:	2300      	movs	r3, #0
 800c21a:	613b      	str	r3, [r7, #16]
					i++;
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	3301      	adds	r3, #1
 800c220:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= '\r')
 800c222:	e017      	b.n	800c254 <LoRa_decode+0x324>
					{
						b->rx_convert[j]=b->rxbuff[i];			// Save SNR
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	4413      	add	r3, r2
 800c22a:	3356      	adds	r3, #86	; 0x56
 800c22c:	7819      	ldrb	r1, [r3, #0]
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	4413      	add	r3, r2
 800c234:	3310      	adds	r3, #16
 800c236:	460a      	mov	r2, r1
 800c238:	701a      	strb	r2, [r3, #0]
						i++;
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	3301      	adds	r3, #1
 800c23e:	617b      	str	r3, [r7, #20]
						j++;
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	3301      	adds	r3, #1
 800c244:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	2b05      	cmp	r3, #5
 800c24a:	dd03      	ble.n	800c254 <LoRa_decode+0x324>
						{
							Lora_rx_del(b);
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f000 fadd 	bl	800c80c <Lora_rx_del>
							break;
 800c252:	e006      	b.n	800c262 <LoRa_decode+0x332>
					while (b->rxbuff[i]!= '\r')
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	4413      	add	r3, r2
 800c25a:	3356      	adds	r3, #86	; 0x56
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	2b0d      	cmp	r3, #13
 800c260:	d1e0      	bne.n	800c224 <LoRa_decode+0x2f4>
						}
					}

					b->rx_convert[j]='\0';
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	4413      	add	r3, r2
 800c268:	3310      	adds	r3, #16
 800c26a:	2200      	movs	r2, #0
 800c26c:	701a      	strb	r2, [r3, #0]
					b->rxSNR=atoi(b->rx_convert,10);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	3310      	adds	r3, #16
 800c272:	210a      	movs	r1, #10
 800c274:	4618      	mov	r0, r3
 800c276:	f002 fe46 	bl	800ef06 <atoi>
 800c27a:	4602      	mov	r2, r0
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
					b->rx_convert[0]='\0';
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2200      	movs	r2, #0
 800c286:	741a      	strb	r2, [r3, #16]


			    //Timer de enviar data cuando antes se recibe
				//LoRa_set_sndTIMER(b, 3000);
				b->rxbuff[0]='\0';
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2200      	movs	r2, #0
 800c28c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		}
			break;
 800c290:	e06a      	b.n	800c368 <LoRa_decode+0x438>
		case _ERR:
			ITM0_Write("\r\nLora _ERR\r\n",strlen("\r\nLora _ERR\r\n"));
 800c292:	210d      	movs	r1, #13
 800c294:	481b      	ldr	r0, [pc, #108]	; (800c304 <LoRa_decode+0x3d4>)
 800c296:	f7f5 fb59 	bl	800194c <ITM0_Write>
			break;
 800c29a:	e065      	b.n	800c368 <LoRa_decode+0x438>
		case _RESET:
			ITM0_Write("\r\nLora _RESET\r\n",strlen("\r\nLora _RESET\r\n"));
 800c29c:	210f      	movs	r1, #15
 800c29e:	481a      	ldr	r0, [pc, #104]	; (800c308 <LoRa_decode+0x3d8>)
 800c2a0:	f7f5 fb54 	bl	800194c <ITM0_Write>
			break;
 800c2a4:	e060      	b.n	800c368 <LoRa_decode+0x438>
		case _READY:
			ITM0_Write("\r\nLora _READY\r\n",strlen("\r\nLora _READY\r\n"));
 800c2a6:	210f      	movs	r1, #15
 800c2a8:	4818      	ldr	r0, [pc, #96]	; (800c30c <LoRa_decode+0x3dc>)
 800c2aa:	f7f5 fb4f 	bl	800194c <ITM0_Write>
			break;
 800c2ae:	e05b      	b.n	800c368 <LoRa_decode+0x438>
		case _MODE:
			ITM0_Write("\r\nLora _MODE\r\n",strlen("\r\nLora _MODE\r\n"));
 800c2b0:	210e      	movs	r1, #14
 800c2b2:	4817      	ldr	r0, [pc, #92]	; (800c310 <LoRa_decode+0x3e0>)
 800c2b4:	f7f5 fb4a 	bl	800194c <ITM0_Write>
			break;
 800c2b8:	e056      	b.n	800c368 <LoRa_decode+0x438>
		case _IPR:
			ITM0_Write("\r\nLora _IPR\r\n",strlen("\r\nLora _IPR\r\n"));
 800c2ba:	210d      	movs	r1, #13
 800c2bc:	4815      	ldr	r0, [pc, #84]	; (800c314 <LoRa_decode+0x3e4>)
 800c2be:	f7f5 fb45 	bl	800194c <ITM0_Write>
			break;
 800c2c2:	e051      	b.n	800c368 <LoRa_decode+0x438>
		case _PARAMETER:
			ITM0_Write("\r\nLora _PARAMETER\r\n",strlen("\r\nLora _PARAMETER\r\n"));
 800c2c4:	2113      	movs	r1, #19
 800c2c6:	4814      	ldr	r0, [pc, #80]	; (800c318 <LoRa_decode+0x3e8>)
 800c2c8:	f7f5 fb40 	bl	800194c <ITM0_Write>
			break;
 800c2cc:	e04c      	b.n	800c368 <LoRa_decode+0x438>
		case _BAND:
			ITM0_Write("\r\nLora _BAND\r\n",strlen("\r\nLora _BAND\r\n"));
 800c2ce:	210e      	movs	r1, #14
 800c2d0:	4812      	ldr	r0, [pc, #72]	; (800c31c <LoRa_decode+0x3ec>)
 800c2d2:	f7f5 fb3b 	bl	800194c <ITM0_Write>
			break;
 800c2d6:	e047      	b.n	800c368 <LoRa_decode+0x438>
		case _ADDRESS:
			ITM0_Write("\r\nLora _ADDRESS\r\n",strlen("\r\nLora _ADDRESS\r\n"));
 800c2d8:	2111      	movs	r1, #17
 800c2da:	4811      	ldr	r0, [pc, #68]	; (800c320 <LoRa_decode+0x3f0>)
 800c2dc:	f7f5 fb36 	bl	800194c <ITM0_Write>
			break;
 800c2e0:	e042      	b.n	800c368 <LoRa_decode+0x438>
		case _NETWORK:
			ITM0_Write("\r\nLora _NETWORK\r\n",strlen("\r\nLora _NETWORK\r\n"));
 800c2e2:	2111      	movs	r1, #17
 800c2e4:	480f      	ldr	r0, [pc, #60]	; (800c324 <LoRa_decode+0x3f4>)
 800c2e6:	f7f5 fb31 	bl	800194c <ITM0_Write>
			break;
 800c2ea:	e03d      	b.n	800c368 <LoRa_decode+0x438>
		case _CPIN:
			ITM0_Write("\r\nLora _CPIN\r\n",strlen("\r\nLora _CPIN\r\n"));
 800c2ec:	210e      	movs	r1, #14
 800c2ee:	480e      	ldr	r0, [pc, #56]	; (800c328 <LoRa_decode+0x3f8>)
 800c2f0:	f7f5 fb2c 	bl	800194c <ITM0_Write>
			break;
 800c2f4:	e038      	b.n	800c368 <LoRa_decode+0x438>
 800c2f6:	bf00      	nop
 800c2f8:	08010a14 	.word	0x08010a14
 800c2fc:	08010a28 	.word	0x08010a28
 800c300:	08010a38 	.word	0x08010a38
 800c304:	08010a48 	.word	0x08010a48
 800c308:	08010a58 	.word	0x08010a58
 800c30c:	08010a68 	.word	0x08010a68
 800c310:	08010a78 	.word	0x08010a78
 800c314:	08010a88 	.word	0x08010a88
 800c318:	08010a98 	.word	0x08010a98
 800c31c:	08010aac 	.word	0x08010aac
 800c320:	08010abc 	.word	0x08010abc
 800c324:	08010ad0 	.word	0x08010ad0
 800c328:	08010ae4 	.word	0x08010ae4
		case _CRFOP:
			ITM0_Write("\r\nLora _CRFOP\r\n",strlen("\r\nLora _CRFOP\r\n"));
 800c32c:	210f      	movs	r1, #15
 800c32e:	4810      	ldr	r0, [pc, #64]	; (800c370 <LoRa_decode+0x440>)
 800c330:	f7f5 fb0c 	bl	800194c <ITM0_Write>
			break;
 800c334:	e018      	b.n	800c368 <LoRa_decode+0x438>
		case _SEND:
			ITM0_Write("\r\nLora _SEND\r\n",strlen("\r\nLora _SEND\r\n"));
 800c336:	210e      	movs	r1, #14
 800c338:	480e      	ldr	r0, [pc, #56]	; (800c374 <LoRa_decode+0x444>)
 800c33a:	f7f5 fb07 	bl	800194c <ITM0_Write>
			break;
 800c33e:	e013      	b.n	800c368 <LoRa_decode+0x438>
		case _UID:
			ITM0_Write("\r\nLora _UID\r\n",strlen("\r\nLora _UID\r\n"));
 800c340:	210d      	movs	r1, #13
 800c342:	480d      	ldr	r0, [pc, #52]	; (800c378 <LoRa_decode+0x448>)
 800c344:	f7f5 fb02 	bl	800194c <ITM0_Write>
			break;
 800c348:	e00e      	b.n	800c368 <LoRa_decode+0x438>
		case _VER:
			ITM0_Write("\r\nLora _VER\r\n",strlen("\r\nLora _VER\r\n"));
 800c34a:	210d      	movs	r1, #13
 800c34c:	480b      	ldr	r0, [pc, #44]	; (800c37c <LoRa_decode+0x44c>)
 800c34e:	f7f5 fafd 	bl	800194c <ITM0_Write>
			break;
 800c352:	e009      	b.n	800c368 <LoRa_decode+0x438>
		case _ERR_RCV_OF:
			ITM0_Write("\r\nLora _ERR_RCV_OF\r\n",strlen("\r\nLora _ERR_RCV_OF\r\n"));
 800c354:	2114      	movs	r1, #20
 800c356:	480a      	ldr	r0, [pc, #40]	; (800c380 <LoRa_decode+0x450>)
 800c358:	f7f5 faf8 	bl	800194c <ITM0_Write>
			break;
 800c35c:	e004      	b.n	800c368 <LoRa_decode+0x438>
		default:
			ITM0_Write("\r\nLora default\r\n",strlen("\r\nLora default\r\n"));
 800c35e:	2110      	movs	r1, #16
 800c360:	4808      	ldr	r0, [pc, #32]	; (800c384 <LoRa_decode+0x454>)
 800c362:	f7f5 faf3 	bl	800194c <ITM0_Write>
			break;
 800c366:	bf00      	nop
	}
 }
 800c368:	bf00      	nop
 800c36a:	3718      	adds	r7, #24
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	08010af4 	.word	0x08010af4
 800c374:	08010b04 	.word	0x08010b04
 800c378:	08010b14 	.word	0x08010b14
 800c37c:	08010b24 	.word	0x08010b24
 800c380:	08010b34 	.word	0x08010b34
 800c384:	08010b4c 	.word	0x08010b4c

0800c388 <Lora_idSTR>:
int Lora_idSTR(struct LoRa *a)
{		int f,g,h,i;
 800c388:	b580      	push	{r7, lr}
 800c38a:	b090      	sub	sp, #64	; 0x40
 800c38c:	af06      	add	r7, sp, #24
 800c38e:	6078      	str	r0, [r7, #4]
		if(a->rxitems > 270) return _ERR_RCV_OF;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 800c396:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c39a:	dd01      	ble.n	800c3a0 <Lora_idSTR+0x18>
 800c39c:	2310      	movs	r3, #16
 800c39e:	e229      	b.n	800c7f4 <Lora_idSTR+0x46c>
		char data[10];
		int ndata=0;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	60fb      	str	r3, [r7, #12]
		i=strlen("+OK=");
 800c3a4:	2304      	movs	r3, #4
 800c3a6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+OK=",&i,data,&ndata,&g,&h, 0)==1) return _OK ;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c3b4:	f107 021c 	add.w	r2, r7, #28
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	9304      	str	r3, [sp, #16]
 800c3bc:	f107 0320 	add.w	r3, r7, #32
 800c3c0:	9303      	str	r3, [sp, #12]
 800c3c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3c6:	9302      	str	r3, [sp, #8]
 800c3c8:	f107 030c 	add.w	r3, r7, #12
 800c3cc:	9301      	str	r3, [sp, #4]
 800c3ce:	f107 0310 	add.w	r3, r7, #16
 800c3d2:	9300      	str	r3, [sp, #0]
 800c3d4:	4613      	mov	r3, r2
 800c3d6:	4ab9      	ldr	r2, [pc, #740]	; (800c6bc <Lora_idSTR+0x334>)
 800c3d8:	f002 f9e4 	bl	800e7a4 <FT_String_ND>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b01      	cmp	r3, #1
 800c3e0:	d101      	bne.n	800c3e6 <Lora_idSTR+0x5e>
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	e206      	b.n	800c7f4 <Lora_idSTR+0x46c>
		i=strlen("+RCV=");
 800c3e6:	2305      	movs	r3, #5
 800c3e8:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RCV=",&i,data,&ndata,&g,&h, 0)==1) return _RCV ;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c3f6:	f107 021c 	add.w	r2, r7, #28
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	9304      	str	r3, [sp, #16]
 800c3fe:	f107 0320 	add.w	r3, r7, #32
 800c402:	9303      	str	r3, [sp, #12]
 800c404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c408:	9302      	str	r3, [sp, #8]
 800c40a:	f107 030c 	add.w	r3, r7, #12
 800c40e:	9301      	str	r3, [sp, #4]
 800c410:	f107 0310 	add.w	r3, r7, #16
 800c414:	9300      	str	r3, [sp, #0]
 800c416:	4613      	mov	r3, r2
 800c418:	4aa9      	ldr	r2, [pc, #676]	; (800c6c0 <Lora_idSTR+0x338>)
 800c41a:	f002 f9c3 	bl	800e7a4 <FT_String_ND>
 800c41e:	4603      	mov	r3, r0
 800c420:	2b01      	cmp	r3, #1
 800c422:	d101      	bne.n	800c428 <Lora_idSTR+0xa0>
 800c424:	2301      	movs	r3, #1
 800c426:	e1e5      	b.n	800c7f4 <Lora_idSTR+0x46c>
		i=strlen("+ERR=");
 800c428:	2305      	movs	r3, #5
 800c42a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ERR=",&i,data,&ndata,&g,&h, 0)==1) return _ERR ;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c438:	f107 021c 	add.w	r2, r7, #28
 800c43c:	2300      	movs	r3, #0
 800c43e:	9304      	str	r3, [sp, #16]
 800c440:	f107 0320 	add.w	r3, r7, #32
 800c444:	9303      	str	r3, [sp, #12]
 800c446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c44a:	9302      	str	r3, [sp, #8]
 800c44c:	f107 030c 	add.w	r3, r7, #12
 800c450:	9301      	str	r3, [sp, #4]
 800c452:	f107 0310 	add.w	r3, r7, #16
 800c456:	9300      	str	r3, [sp, #0]
 800c458:	4613      	mov	r3, r2
 800c45a:	4a9a      	ldr	r2, [pc, #616]	; (800c6c4 <Lora_idSTR+0x33c>)
 800c45c:	f002 f9a2 	bl	800e7a4 <FT_String_ND>
 800c460:	4603      	mov	r3, r0
 800c462:	2b01      	cmp	r3, #1
 800c464:	d101      	bne.n	800c46a <Lora_idSTR+0xe2>
 800c466:	230f      	movs	r3, #15
 800c468:	e1c4      	b.n	800c7f4 <Lora_idSTR+0x46c>
		i=strlen("+RESET");
 800c46a:	2306      	movs	r3, #6
 800c46c:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RESET",&i,data,&ndata,&g,&h, 0)==1)return _RESET;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c47a:	f107 021c 	add.w	r2, r7, #28
 800c47e:	2300      	movs	r3, #0
 800c480:	9304      	str	r3, [sp, #16]
 800c482:	f107 0320 	add.w	r3, r7, #32
 800c486:	9303      	str	r3, [sp, #12]
 800c488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c48c:	9302      	str	r3, [sp, #8]
 800c48e:	f107 030c 	add.w	r3, r7, #12
 800c492:	9301      	str	r3, [sp, #4]
 800c494:	f107 0310 	add.w	r3, r7, #16
 800c498:	9300      	str	r3, [sp, #0]
 800c49a:	4613      	mov	r3, r2
 800c49c:	4a8a      	ldr	r2, [pc, #552]	; (800c6c8 <Lora_idSTR+0x340>)
 800c49e:	f002 f981 	bl	800e7a4 <FT_String_ND>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d101      	bne.n	800c4ac <Lora_idSTR+0x124>
 800c4a8:	2302      	movs	r3, #2
 800c4aa:	e1a3      	b.n	800c7f4 <Lora_idSTR+0x46c>
		i=strlen("+READY");
 800c4ac:	2306      	movs	r3, #6
 800c4ae:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+READY",&i,data,&ndata,&g,&h, 0)==1) return _READY ;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c4bc:	f107 021c 	add.w	r2, r7, #28
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	9304      	str	r3, [sp, #16]
 800c4c4:	f107 0320 	add.w	r3, r7, #32
 800c4c8:	9303      	str	r3, [sp, #12]
 800c4ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4ce:	9302      	str	r3, [sp, #8]
 800c4d0:	f107 030c 	add.w	r3, r7, #12
 800c4d4:	9301      	str	r3, [sp, #4]
 800c4d6:	f107 0310 	add.w	r3, r7, #16
 800c4da:	9300      	str	r3, [sp, #0]
 800c4dc:	4613      	mov	r3, r2
 800c4de:	4a7b      	ldr	r2, [pc, #492]	; (800c6cc <Lora_idSTR+0x344>)
 800c4e0:	f002 f960 	bl	800e7a4 <FT_String_ND>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d101      	bne.n	800c4ee <Lora_idSTR+0x166>
 800c4ea:	2303      	movs	r3, #3
 800c4ec:	e182      	b.n	800c7f4 <Lora_idSTR+0x46c>
		i=strlen("+MODE=");
 800c4ee:	2306      	movs	r3, #6
 800c4f0:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+MODE=",&i,data,&ndata,&g,&h, 0)==1) return _MODE ;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c4fe:	f107 021c 	add.w	r2, r7, #28
 800c502:	2300      	movs	r3, #0
 800c504:	9304      	str	r3, [sp, #16]
 800c506:	f107 0320 	add.w	r3, r7, #32
 800c50a:	9303      	str	r3, [sp, #12]
 800c50c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c510:	9302      	str	r3, [sp, #8]
 800c512:	f107 030c 	add.w	r3, r7, #12
 800c516:	9301      	str	r3, [sp, #4]
 800c518:	f107 0310 	add.w	r3, r7, #16
 800c51c:	9300      	str	r3, [sp, #0]
 800c51e:	4613      	mov	r3, r2
 800c520:	4a6b      	ldr	r2, [pc, #428]	; (800c6d0 <Lora_idSTR+0x348>)
 800c522:	f002 f93f 	bl	800e7a4 <FT_String_ND>
 800c526:	4603      	mov	r3, r0
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d101      	bne.n	800c530 <Lora_idSTR+0x1a8>
 800c52c:	2304      	movs	r3, #4
 800c52e:	e161      	b.n	800c7f4 <Lora_idSTR+0x46c>
		i=strlen("+IPR=");
 800c530:	2305      	movs	r3, #5
 800c532:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+IPR=",&i,data,&ndata,&g,&h, 0)==1) return _IPR ;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c540:	f107 021c 	add.w	r2, r7, #28
 800c544:	2300      	movs	r3, #0
 800c546:	9304      	str	r3, [sp, #16]
 800c548:	f107 0320 	add.w	r3, r7, #32
 800c54c:	9303      	str	r3, [sp, #12]
 800c54e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c552:	9302      	str	r3, [sp, #8]
 800c554:	f107 030c 	add.w	r3, r7, #12
 800c558:	9301      	str	r3, [sp, #4]
 800c55a:	f107 0310 	add.w	r3, r7, #16
 800c55e:	9300      	str	r3, [sp, #0]
 800c560:	4613      	mov	r3, r2
 800c562:	4a5c      	ldr	r2, [pc, #368]	; (800c6d4 <Lora_idSTR+0x34c>)
 800c564:	f002 f91e 	bl	800e7a4 <FT_String_ND>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d101      	bne.n	800c572 <Lora_idSTR+0x1ea>
 800c56e:	2305      	movs	r3, #5
 800c570:	e140      	b.n	800c7f4 <Lora_idSTR+0x46c>
		i=strlen("+PARAMETER=");
 800c572:	230b      	movs	r3, #11
 800c574:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+PARAMETER=",&i,data,&ndata,&g,&h, 0)==1) return _PARAMETER ;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c582:	f107 021c 	add.w	r2, r7, #28
 800c586:	2300      	movs	r3, #0
 800c588:	9304      	str	r3, [sp, #16]
 800c58a:	f107 0320 	add.w	r3, r7, #32
 800c58e:	9303      	str	r3, [sp, #12]
 800c590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c594:	9302      	str	r3, [sp, #8]
 800c596:	f107 030c 	add.w	r3, r7, #12
 800c59a:	9301      	str	r3, [sp, #4]
 800c59c:	f107 0310 	add.w	r3, r7, #16
 800c5a0:	9300      	str	r3, [sp, #0]
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	4a4c      	ldr	r2, [pc, #304]	; (800c6d8 <Lora_idSTR+0x350>)
 800c5a6:	f002 f8fd 	bl	800e7a4 <FT_String_ND>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b01      	cmp	r3, #1
 800c5ae:	d101      	bne.n	800c5b4 <Lora_idSTR+0x22c>
 800c5b0:	2306      	movs	r3, #6
 800c5b2:	e11f      	b.n	800c7f4 <Lora_idSTR+0x46c>
		i=strlen("+BAND=");
 800c5b4:	2306      	movs	r3, #6
 800c5b6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+BAND=",&i,data,&ndata,&g,&h, 0)==1) return _BAND ;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c5c4:	f107 021c 	add.w	r2, r7, #28
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	9304      	str	r3, [sp, #16]
 800c5cc:	f107 0320 	add.w	r3, r7, #32
 800c5d0:	9303      	str	r3, [sp, #12]
 800c5d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5d6:	9302      	str	r3, [sp, #8]
 800c5d8:	f107 030c 	add.w	r3, r7, #12
 800c5dc:	9301      	str	r3, [sp, #4]
 800c5de:	f107 0310 	add.w	r3, r7, #16
 800c5e2:	9300      	str	r3, [sp, #0]
 800c5e4:	4613      	mov	r3, r2
 800c5e6:	4a3d      	ldr	r2, [pc, #244]	; (800c6dc <Lora_idSTR+0x354>)
 800c5e8:	f002 f8dc 	bl	800e7a4 <FT_String_ND>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d101      	bne.n	800c5f6 <Lora_idSTR+0x26e>
 800c5f2:	2307      	movs	r3, #7
 800c5f4:	e0fe      	b.n	800c7f4 <Lora_idSTR+0x46c>
		i=strlen("+ADDRESS=");
 800c5f6:	2309      	movs	r3, #9
 800c5f8:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ADDRESS=",&i,data,&ndata,&g,&h, 0)==1) return _ADDRESS ;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c606:	f107 021c 	add.w	r2, r7, #28
 800c60a:	2300      	movs	r3, #0
 800c60c:	9304      	str	r3, [sp, #16]
 800c60e:	f107 0320 	add.w	r3, r7, #32
 800c612:	9303      	str	r3, [sp, #12]
 800c614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c618:	9302      	str	r3, [sp, #8]
 800c61a:	f107 030c 	add.w	r3, r7, #12
 800c61e:	9301      	str	r3, [sp, #4]
 800c620:	f107 0310 	add.w	r3, r7, #16
 800c624:	9300      	str	r3, [sp, #0]
 800c626:	4613      	mov	r3, r2
 800c628:	4a2d      	ldr	r2, [pc, #180]	; (800c6e0 <Lora_idSTR+0x358>)
 800c62a:	f002 f8bb 	bl	800e7a4 <FT_String_ND>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b01      	cmp	r3, #1
 800c632:	d101      	bne.n	800c638 <Lora_idSTR+0x2b0>
 800c634:	2308      	movs	r3, #8
 800c636:	e0dd      	b.n	800c7f4 <Lora_idSTR+0x46c>
		i=strlen("+NETWORK=");
 800c638:	2309      	movs	r3, #9
 800c63a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+NETWORK=",&i,data,&ndata,&g,&h, 0)==1) return _NETWORK ;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c648:	f107 021c 	add.w	r2, r7, #28
 800c64c:	2300      	movs	r3, #0
 800c64e:	9304      	str	r3, [sp, #16]
 800c650:	f107 0320 	add.w	r3, r7, #32
 800c654:	9303      	str	r3, [sp, #12]
 800c656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c65a:	9302      	str	r3, [sp, #8]
 800c65c:	f107 030c 	add.w	r3, r7, #12
 800c660:	9301      	str	r3, [sp, #4]
 800c662:	f107 0310 	add.w	r3, r7, #16
 800c666:	9300      	str	r3, [sp, #0]
 800c668:	4613      	mov	r3, r2
 800c66a:	4a1e      	ldr	r2, [pc, #120]	; (800c6e4 <Lora_idSTR+0x35c>)
 800c66c:	f002 f89a 	bl	800e7a4 <FT_String_ND>
 800c670:	4603      	mov	r3, r0
 800c672:	2b01      	cmp	r3, #1
 800c674:	d101      	bne.n	800c67a <Lora_idSTR+0x2f2>
 800c676:	2309      	movs	r3, #9
 800c678:	e0bc      	b.n	800c7f4 <Lora_idSTR+0x46c>
		i=strlen("+CPIN=");
 800c67a:	2306      	movs	r3, #6
 800c67c:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CPIN=",&i,data,&ndata,&g,&h, 0)==1) return _CPIN ;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c68a:	f107 021c 	add.w	r2, r7, #28
 800c68e:	2300      	movs	r3, #0
 800c690:	9304      	str	r3, [sp, #16]
 800c692:	f107 0320 	add.w	r3, r7, #32
 800c696:	9303      	str	r3, [sp, #12]
 800c698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c69c:	9302      	str	r3, [sp, #8]
 800c69e:	f107 030c 	add.w	r3, r7, #12
 800c6a2:	9301      	str	r3, [sp, #4]
 800c6a4:	f107 0310 	add.w	r3, r7, #16
 800c6a8:	9300      	str	r3, [sp, #0]
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	4a0e      	ldr	r2, [pc, #56]	; (800c6e8 <Lora_idSTR+0x360>)
 800c6ae:	f002 f879 	bl	800e7a4 <FT_String_ND>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d119      	bne.n	800c6ec <Lora_idSTR+0x364>
 800c6b8:	230a      	movs	r3, #10
 800c6ba:	e09b      	b.n	800c7f4 <Lora_idSTR+0x46c>
 800c6bc:	08010b60 	.word	0x08010b60
 800c6c0:	08010b68 	.word	0x08010b68
 800c6c4:	08010b70 	.word	0x08010b70
 800c6c8:	08010b78 	.word	0x08010b78
 800c6cc:	08010b80 	.word	0x08010b80
 800c6d0:	08010b88 	.word	0x08010b88
 800c6d4:	08010b90 	.word	0x08010b90
 800c6d8:	08010b98 	.word	0x08010b98
 800c6dc:	08010ba4 	.word	0x08010ba4
 800c6e0:	08010bac 	.word	0x08010bac
 800c6e4:	08010bb8 	.word	0x08010bb8
 800c6e8:	08010bc4 	.word	0x08010bc4
		i=strlen("+CRFOP=");
 800c6ec:	2307      	movs	r3, #7
 800c6ee:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CRFOP=",&i,data,&ndata,&g,&h, 0)==1) return _CRFOP ;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c6fc:	f107 021c 	add.w	r2, r7, #28
 800c700:	2300      	movs	r3, #0
 800c702:	9304      	str	r3, [sp, #16]
 800c704:	f107 0320 	add.w	r3, r7, #32
 800c708:	9303      	str	r3, [sp, #12]
 800c70a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c70e:	9302      	str	r3, [sp, #8]
 800c710:	f107 030c 	add.w	r3, r7, #12
 800c714:	9301      	str	r3, [sp, #4]
 800c716:	f107 0310 	add.w	r3, r7, #16
 800c71a:	9300      	str	r3, [sp, #0]
 800c71c:	4613      	mov	r3, r2
 800c71e:	4a37      	ldr	r2, [pc, #220]	; (800c7fc <Lora_idSTR+0x474>)
 800c720:	f002 f840 	bl	800e7a4 <FT_String_ND>
 800c724:	4603      	mov	r3, r0
 800c726:	2b01      	cmp	r3, #1
 800c728:	d101      	bne.n	800c72e <Lora_idSTR+0x3a6>
 800c72a:	230b      	movs	r3, #11
 800c72c:	e062      	b.n	800c7f4 <Lora_idSTR+0x46c>
		i=strlen("+SEND=");
 800c72e:	2306      	movs	r3, #6
 800c730:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+SEND=",&i,data,&ndata,&g,&h, 0)==1) return _SEND ;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c73e:	f107 021c 	add.w	r2, r7, #28
 800c742:	2300      	movs	r3, #0
 800c744:	9304      	str	r3, [sp, #16]
 800c746:	f107 0320 	add.w	r3, r7, #32
 800c74a:	9303      	str	r3, [sp, #12]
 800c74c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c750:	9302      	str	r3, [sp, #8]
 800c752:	f107 030c 	add.w	r3, r7, #12
 800c756:	9301      	str	r3, [sp, #4]
 800c758:	f107 0310 	add.w	r3, r7, #16
 800c75c:	9300      	str	r3, [sp, #0]
 800c75e:	4613      	mov	r3, r2
 800c760:	4a27      	ldr	r2, [pc, #156]	; (800c800 <Lora_idSTR+0x478>)
 800c762:	f002 f81f 	bl	800e7a4 <FT_String_ND>
 800c766:	4603      	mov	r3, r0
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d101      	bne.n	800c770 <Lora_idSTR+0x3e8>
 800c76c:	230c      	movs	r3, #12
 800c76e:	e041      	b.n	800c7f4 <Lora_idSTR+0x46c>
		i=strlen("+UID=");
 800c770:	2305      	movs	r3, #5
 800c772:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+UID=",&i,data,&ndata,&g,&h, 0)==1) return _UID ;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c780:	f107 021c 	add.w	r2, r7, #28
 800c784:	2300      	movs	r3, #0
 800c786:	9304      	str	r3, [sp, #16]
 800c788:	f107 0320 	add.w	r3, r7, #32
 800c78c:	9303      	str	r3, [sp, #12]
 800c78e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c792:	9302      	str	r3, [sp, #8]
 800c794:	f107 030c 	add.w	r3, r7, #12
 800c798:	9301      	str	r3, [sp, #4]
 800c79a:	f107 0310 	add.w	r3, r7, #16
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	4613      	mov	r3, r2
 800c7a2:	4a18      	ldr	r2, [pc, #96]	; (800c804 <Lora_idSTR+0x47c>)
 800c7a4:	f001 fffe 	bl	800e7a4 <FT_String_ND>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	d101      	bne.n	800c7b2 <Lora_idSTR+0x42a>
 800c7ae:	230e      	movs	r3, #14
 800c7b0:	e020      	b.n	800c7f4 <Lora_idSTR+0x46c>
		i=strlen("+VER=");
 800c7b2:	2305      	movs	r3, #5
 800c7b4:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+VER=",&i,data,&ndata,&g,&h, 0)==1) return _VER ;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c7c2:	f107 021c 	add.w	r2, r7, #28
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	9304      	str	r3, [sp, #16]
 800c7ca:	f107 0320 	add.w	r3, r7, #32
 800c7ce:	9303      	str	r3, [sp, #12]
 800c7d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7d4:	9302      	str	r3, [sp, #8]
 800c7d6:	f107 030c 	add.w	r3, r7, #12
 800c7da:	9301      	str	r3, [sp, #4]
 800c7dc:	f107 0310 	add.w	r3, r7, #16
 800c7e0:	9300      	str	r3, [sp, #0]
 800c7e2:	4613      	mov	r3, r2
 800c7e4:	4a08      	ldr	r2, [pc, #32]	; (800c808 <Lora_idSTR+0x480>)
 800c7e6:	f001 ffdd 	bl	800e7a4 <FT_String_ND>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d101      	bne.n	800c7f4 <Lora_idSTR+0x46c>
 800c7f0:	230d      	movs	r3, #13
 800c7f2:	e7ff      	b.n	800c7f4 <Lora_idSTR+0x46c>
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3728      	adds	r7, #40	; 0x28
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	08010bcc 	.word	0x08010bcc
 800c800:	08010bd4 	.word	0x08010bd4
 800c804:	08010bdc 	.word	0x08010bdc
 800c808:	08010be4 	.word	0x08010be4

0800c80c <Lora_rx_del>:
void Lora_rx_del(struct LoRa *a)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
	a->rxbuff[0]='\0';
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	a->rx_items[0]='\0';
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2200      	movs	r2, #0
 800c820:	731a      	strb	r2, [r3, #12]
	//a->dataRCV[0]='\0';
	a->rxRSSI=0;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2200      	movs	r2, #0
 800c826:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
	a->rxSNR=0;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
}
 800c832:	bf00      	nop
 800c834:	370c      	adds	r7, #12
 800c836:	46bd      	mov	sp, r7
 800c838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83c:	4770      	bx	lr
	...

0800c840 <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800c840:	b480      	push	{r7}
 800c842:	b083      	sub	sp, #12
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2201      	movs	r2, #1
 800c84c:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2200      	movs	r2, #0
 800c852:	705a      	strb	r2, [r3, #1]
	m->_timeout=5000;						//Timeout para la recepción de respuesta.
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f241 3288 	movw	r2, #5000	; 0x1388
 800c85a:	805a      	strh	r2, [r3, #2]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2201      	movs	r2, #1
 800c860:	715a      	strb	r2, [r3, #5]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2220      	movs	r2, #32
 800c866:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
	m->_Coils=0xF0F0AF5A;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	4a1c      	ldr	r2, [pc, #112]	; (800c8e0 <ModBUS_Config+0xa0>)
 800c86e:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2201      	movs	r2, #1
 800c876:	719a      	strb	r2, [r3, #6]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2220      	movs	r2, #32
 800c87c:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
	m->_Inputs=0xA5FA0F0F;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	4a18      	ldr	r2, [pc, #96]	; (800c8e4 <ModBUS_Config+0xa4>)
 800c884:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2201      	movs	r2, #1
 800c88c:	71da      	strb	r2, [r3, #7]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2210      	movs	r2, #16
 800c892:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2201      	movs	r2, #1
 800c89a:	721a      	strb	r2, [r3, #8]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2210      	movs	r2, #16
 800c8a0:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	725a      	strb	r2, [r3, #9]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2220      	movs	r2, #32
 800c8ae:	f883 2534 	strb.w	r2, [r3, #1332]	; 0x534

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	729a      	strb	r2, [r3, #10]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	72da      	strb	r2, [r3, #11]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2220      	movs	r2, #32
 800c8c2:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	731a      	strb	r2, [r3, #12]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2220      	movs	r2, #32
 800c8d0:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546
}
 800c8d4:	bf00      	nop
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr
 800c8e0:	f0f0af5a 	.word	0xf0f0af5a
 800c8e4:	a5fa0f0f 	.word	0xa5fa0f0f

0800c8e8 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b083      	sub	sp, #12
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	3305      	adds	r3, #5
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	3306      	adds	r3, #6
 800c8fa:	683a      	ldr	r2, [r7, #0]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d10b      	bne.n	800c918 <ModBUS_Check+0x30>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	3302      	adds	r3, #2
 800c904:	781b      	ldrb	r3, [r3, #0]
 800c906:	461a      	mov	r2, r3
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	3303      	adds	r3, #3
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	4413      	add	r3, r2
 800c910:	2b00      	cmp	r3, #0
 800c912:	d101      	bne.n	800c918 <ModBUS_Check+0x30>
	{
		return(1);
 800c914:	2301      	movs	r3, #1
 800c916:	e000      	b.n	800c91a <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800c918:	2300      	movs	r3, #0
	}
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	370c      	adds	r7, #12
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr

0800c926 <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800c926:	b480      	push	{r7}
 800c928:	b083      	sub	sp, #12
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f893 2194 	ldrb.w	r2, [r3, #404]	; 0x194
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	7b5b      	ldrb	r3, [r3, #13]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d11d      	bne.n	800c978 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f893 2195 	ldrb.w	r2, [r3, #405]	; 0x195
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	7b9b      	ldrb	r3, [r3, #14]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800c946:	429a      	cmp	r2, r3
 800c948:	d116      	bne.n	800c978 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	7bdb      	ldrb	r3, [r3, #15]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800c954:	429a      	cmp	r2, r3
 800c956:	d10f      	bne.n	800c978 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f893 2197 	ldrb.w	r2, [r3, #407]	; 0x197
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	7c1b      	ldrb	r3, [r3, #16]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800c962:	429a      	cmp	r2, r3
 800c964:	d108      	bne.n	800c978 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f893 219b 	ldrb.w	r2, [r3, #411]	; 0x19b
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800c970:	429a      	cmp	r2, r3
 800c972:	d101      	bne.n	800c978 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800c974:	2301      	movs	r3, #1
 800c976:	e000      	b.n	800c97a <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800c978:	2300      	movs	r3, #0
	}
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	370c      	adds	r7, #12
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr

0800c986 <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t a, uint16_t b)
{
 800c986:	b480      	push	{r7}
 800c988:	b085      	sub	sp, #20
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
 800c98e:	460b      	mov	r3, r1
 800c990:	70fb      	strb	r3, [r7, #3]
 800c992:	4613      	mov	r3, r2
 800c994:	803b      	strh	r3, [r7, #0]
	uint8_t c=0;
 800c996:	2300      	movs	r3, #0
 800c998:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800c9a0:	78fa      	ldrb	r2, [r7, #3]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d901      	bls.n	800c9aa <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	e015      	b.n	800c9d6 <ModBUS_F03_Assign+0x50>
	}
	else
	{
		m2->_Holding_Registers[(a*2)+1]=b;
 800c9aa:	78fb      	ldrb	r3, [r7, #3]
 800c9ac:	005b      	lsls	r3, r3, #1
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	883a      	ldrh	r2, [r7, #0]
 800c9b2:	b2d1      	uxtb	r1, r2
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	4413      	add	r3, r2
 800c9b8:	460a      	mov	r2, r1
 800c9ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
		c=b>>8;
 800c9be:	883b      	ldrh	r3, [r7, #0]
 800c9c0:	0a1b      	lsrs	r3, r3, #8
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(a*2)]=c;
 800c9c6:	78fb      	ldrb	r3, [r7, #3]
 800c9c8:	005b      	lsls	r3, r3, #1
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	4413      	add	r3, r2
 800c9ce:	7bfa      	ldrb	r2, [r7, #15]
 800c9d0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

		return(0);
 800c9d4:	2300      	movs	r3, #0
	}
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3714      	adds	r7, #20
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr

0800c9e2 <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t a)
{
 800c9e2:	b480      	push	{r7}
 800c9e4:	b085      	sub	sp, #20
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
 800c9ea:	460b      	mov	r3, r1
 800c9ec:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800c9fc:	78fa      	ldrb	r2, [r7, #3]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d901      	bls.n	800ca06 <ModBUS_F03_Read+0x24>
	{
		return(1);
 800ca02:	2301      	movs	r3, #1
 800ca04:	e015      	b.n	800ca32 <ModBUS_F03_Read+0x50>
	}
	else
	{
		n=m2->_Holding_Registers[(a*2)];
 800ca06:	78fb      	ldrb	r3, [r7, #3]
 800ca08:	005b      	lsls	r3, r3, #1
 800ca0a:	687a      	ldr	r2, [r7, #4]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ca12:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800ca14:	89fb      	ldrh	r3, [r7, #14]
 800ca16:	021b      	lsls	r3, r3, #8
 800ca18:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(a*2)+1];
 800ca1a:	78fb      	ldrb	r3, [r7, #3]
 800ca1c:	005b      	lsls	r3, r3, #1
 800ca1e:	3301      	adds	r3, #1
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	4413      	add	r3, r2
 800ca24:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ca28:	b29a      	uxth	r2, r3
 800ca2a:	89fb      	ldrh	r3, [r7, #14]
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	81fb      	strh	r3, [r7, #14]

		/*m2->_Holding_Registers[(a*2)+1]=b;
		c=b>>8;
		m2->_Holding_Registers[(a*2)]=c;*/
		return(n);
 800ca30:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3714      	adds	r7, #20
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr

0800ca3e <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800ca3e:	b480      	push	{r7}
 800ca40:	b083      	sub	sp, #12
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
 800ca46:	460b      	mov	r3, r1
 800ca48:	807b      	strh	r3, [r7, #2]
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800ca4e:	887b      	ldrh	r3, [r7, #2]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	bf14      	ite	ne
 800ca54:	2301      	movne	r3, #1
 800ca56:	2300      	moveq	r3, #0
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
	addr&=0xF0;
 800ca62:	887b      	ldrh	r3, [r7, #2]
 800ca64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca68:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800ca6a:	887b      	ldrh	r3, [r7, #2]
 800ca6c:	0a1b      	lsrs	r3, r3, #8
 800ca6e:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800ca70:	887b      	ldrh	r3, [r7, #2]
 800ca72:	f003 030f 	and.w	r3, r3, #15
 800ca76:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	m2->_MBUS_2SND[1]=0x00;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2200      	movs	r2, #0
 800ca84:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	m2->_MBUS_2SND[2]=0x00;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
	m2->_MBUS_2SND[3]=0x00;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
	m2->_MBUS_2SND[4]=0x00;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	m2->_MBUS_2SND[5]=0x06;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2206      	movs	r2, #6
 800caa4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
	m2->_MBUS_2SND[6]=m2->_address;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	781a      	ldrb	r2, [r3, #0]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
	m2->_MBUS_2SND[7]=0x03;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2203      	movs	r2, #3
 800cab6:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
	m2->_MBUS_2SND[8]=addr;
 800caba:	887b      	ldrh	r3, [r7, #2]
 800cabc:	b2da      	uxtb	r2, r3
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c

	m2->_MBUS_2SND[10]=0x00;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2200      	movs	r2, #0
 800cac8:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
	m2->_MBUS_2SND[11]=qty;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	787a      	ldrb	r2, [r7, #1]
 800cad0:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	220c      	movs	r2, #12
 800cad8:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

}
 800cadc:	bf00      	nop
 800cade:	4618      	mov	r0, r3
 800cae0:	370c      	adds	r7, #12
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
	...

0800caec <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b09c      	sub	sp, #112	; 0x70
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	785b      	ldrb	r3, [r3, #1]
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	f041 813f 	bne.w	800dd7c <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f103 020d 	add.w	r2, r3, #13
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	4610      	mov	r0, r2
 800cb0e:	f7ff feeb 	bl	800c8e8 <ModBUS_Check>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	f001 812f 	beq.w	800dd78 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	7d1b      	ldrb	r3, [r3, #20]
 800cb1e:	3b01      	subs	r3, #1
 800cb20:	2b0f      	cmp	r3, #15
 800cb22:	f201 80f3 	bhi.w	800dd0c <ModBUS+0x1220>
 800cb26:	a201      	add	r2, pc, #4	; (adr r2, 800cb2c <ModBUS+0x40>)
 800cb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb2c:	0800cb6d 	.word	0x0800cb6d
 800cb30:	0800cdad 	.word	0x0800cdad
 800cb34:	0800cfed 	.word	0x0800cfed
 800cb38:	0800d225 	.word	0x0800d225
 800cb3c:	0800d45d 	.word	0x0800d45d
 800cb40:	0800d673 	.word	0x0800d673
 800cb44:	0800dd0d 	.word	0x0800dd0d
 800cb48:	0800dd0d 	.word	0x0800dd0d
 800cb4c:	0800dd0d 	.word	0x0800dd0d
 800cb50:	0800dd0d 	.word	0x0800dd0d
 800cb54:	0800dd0d 	.word	0x0800dd0d
 800cb58:	0800dd0d 	.word	0x0800dd0d
 800cb5c:	0800dd0d 	.word	0x0800dd0d
 800cb60:	0800dd0d 	.word	0x0800dd0d
 800cb64:	0800d82f 	.word	0x0800d82f
 800cb68:	0800dabf 	.word	0x0800dabf

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	7c5a      	ldrb	r2, [r3, #17]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	7c1a      	ldrb	r2, [r3, #16]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	7bda      	ldrb	r2, [r3, #15]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	7b9a      	ldrb	r2, [r3, #14]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	7b5a      	ldrb	r2, [r3, #13]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	795b      	ldrb	r3, [r3, #5]
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	f040 80e6 	bne.w	800cd78 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	7d5b      	ldrb	r3, [r3, #21]
 800cbb0:	b29a      	uxth	r2, r3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800cbbe:	021b      	lsls	r3, r3, #8
 800cbc0:	b29a      	uxth	r2, r3
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800cbce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cbd2:	b29a      	uxth	r2, r3
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8b3 251e 	ldrh.w	r2, [r3, #1310]	; 0x51e
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	7d9b      	ldrb	r3, [r3, #22]
 800cbe4:	b29b      	uxth	r3, r3
 800cbe6:	4313      	orrs	r3, r2
 800cbe8:	b29a      	uxth	r2, r3
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	7ddb      	ldrb	r3, [r3, #23]
 800cbf4:	b29a      	uxth	r2, r3
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800cc02:	021b      	lsls	r3, r3, #8
 800cc04:	b29a      	uxth	r2, r3
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800cc12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cc16:	b29a      	uxth	r2, r3
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	7e1b      	ldrb	r3, [r3, #24]
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	b29a      	uxth	r2, r3
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f893 351c 	ldrb.w	r3, [r3, #1308]	; 0x51c
 800cc40:	b29b      	uxth	r3, r3
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d87e      	bhi.n	800cd44 <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800cc54:	4413      	add	r3, r2
 800cc56:	687a      	ldr	r2, [r7, #4]
 800cc58:	f892 251c 	ldrb.w	r2, [r2, #1308]	; 0x51c
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	dc57      	bgt.n	800cd10 <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800cc60:	2300      	movs	r3, #0
 800cc62:	613b      	str	r3, [r7, #16]
 800cc64:	2300      	movs	r3, #0
 800cc66:	60fb      	str	r3, [r7, #12]
 800cc68:	2300      	movs	r3, #0
 800cc6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800cc70:	2300      	movs	r3, #0
 800cc72:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800cc7a:	687a      	ldr	r2, [r7, #4]
 800cc7c:	f8b2 251e 	ldrh.w	r2, [r2, #1310]	; 0x51e
 800cc80:	40d3      	lsrs	r3, r2
 800cc82:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800cc8a:	08db      	lsrs	r3, r3, #3
 800cc8c:	b29b      	uxth	r3, r3
 800cc8e:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800cc96:	f003 0307 	and.w	r3, r3, #7
 800cc9a:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d102      	bne.n	800cca8 <ModBUS+0x1bc>
									{
										bytes=div;
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cca6:	e002      	b.n	800ccae <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800ccae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccb0:	b2da      	uxtb	r2, r3
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800ccb8:	e00e      	b.n	800ccd8 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800ccba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccbc:	3308      	adds	r3, #8
 800ccbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ccc0:	b2d1      	uxtb	r1, r2
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	460a      	mov	r2, r1
 800ccc8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800cccc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ccce:	0a1b      	lsrs	r3, r3, #8
 800ccd0:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800ccd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccd4:	3b01      	subs	r3, #1
 800ccd6:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800ccd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	dced      	bgt.n	800ccba <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2201      	movs	r2, #1
 800cce2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2201      	movs	r2, #1
 800ccea:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800ccf4:	3303      	adds	r3, #3
 800ccf6:	b2da      	uxtb	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cd04:	1d9a      	adds	r2, r3, #6
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cd0c:	f001 b8d4 	b.w	800deb8 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2202      	movs	r2, #2
 800cd14:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x81;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2281      	movs	r2, #129	; 0x81
 800cd1c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2201      	movs	r2, #1
 800cd24:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2203      	movs	r2, #3
 800cd2c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cd36:	1d9a      	adds	r2, r3, #6
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800cd3e:	2302      	movs	r3, #2
 800cd40:	f001 b8ba 	b.w	800deb8 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2203      	movs	r2, #3
 800cd48:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x81;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2281      	movs	r2, #129	; 0x81
 800cd50:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2201      	movs	r2, #1
 800cd58:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2203      	movs	r2, #3
 800cd60:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cd6a:	1d9a      	adds	r2, r3, #6
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800cd72:	2303      	movs	r3, #3
 800cd74:	f001 b8a0 	b.w	800deb8 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x81;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2281      	movs	r2, #129	; 0x81
 800cd84:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2203      	movs	r2, #3
 800cd94:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cd9e:	1d9a      	adds	r2, r3, #6
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800cda6:	2301      	movs	r3, #1
 800cda8:	f001 b886 	b.w	800deb8 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	7c5a      	ldrb	r2, [r3, #17]
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	7c1a      	ldrb	r2, [r3, #16]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	7bda      	ldrb	r2, [r3, #15]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	7b9a      	ldrb	r2, [r3, #14]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	7b5a      	ldrb	r2, [r3, #13]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800cdde:	2300      	movs	r3, #0
 800cde0:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	799b      	ldrb	r3, [r3, #6]
 800cde6:	2b01      	cmp	r3, #1
 800cde8:	f040 80e6 	bne.w	800cfb8 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	7d5b      	ldrb	r3, [r3, #21]
 800cdf0:	b29a      	uxth	r2, r3
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800cdfe:	021b      	lsls	r3, r3, #8
 800ce00:	b29a      	uxth	r2, r3
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800ce0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ce12:	b29a      	uxth	r2, r3
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f8b3 2524 	ldrh.w	r2, [r3, #1316]	; 0x524
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	7d9b      	ldrb	r3, [r3, #22]
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	4313      	orrs	r3, r2
 800ce28:	b29a      	uxth	r2, r3
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	7ddb      	ldrb	r3, [r3, #23]
 800ce34:	b29a      	uxth	r2, r3
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ce42:	021b      	lsls	r3, r3, #8
 800ce44:	b29a      	uxth	r2, r3
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ce52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ce56:	b29a      	uxth	r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	7e1b      	ldrb	r3, [r3, #24]
 800ce68:	b29b      	uxth	r3, r3
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	b29a      	uxth	r2, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f893 3522 	ldrb.w	r3, [r3, #1314]	; 0x522
 800ce80:	b29b      	uxth	r3, r3
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d87e      	bhi.n	800cf84 <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ce94:	4413      	add	r3, r2
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	f892 2522 	ldrb.w	r2, [r2, #1314]	; 0x522
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	dc57      	bgt.n	800cf50 <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800cea0:	2300      	movs	r3, #0
 800cea2:	623b      	str	r3, [r7, #32]
 800cea4:	2300      	movs	r3, #0
 800cea6:	61fb      	str	r3, [r7, #28]
 800cea8:	2300      	movs	r3, #0
 800ceaa:	667b      	str	r3, [r7, #100]	; 0x64
 800ceac:	2300      	movs	r3, #0
 800ceae:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	f8b2 2524 	ldrh.w	r2, [r2, #1316]	; 0x524
 800cec0:	40d3      	lsrs	r3, r2
 800cec2:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ceca:	08db      	lsrs	r3, r3, #3
 800cecc:	b29b      	uxth	r3, r3
 800cece:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ced6:	f003 0307 	and.w	r3, r3, #7
 800ceda:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800cedc:	69fb      	ldr	r3, [r7, #28]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d102      	bne.n	800cee8 <ModBUS+0x3fc>
									{
										bytes=div;
 800cee2:	6a3b      	ldr	r3, [r7, #32]
 800cee4:	667b      	str	r3, [r7, #100]	; 0x64
 800cee6:	e002      	b.n	800ceee <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800cee8:	6a3b      	ldr	r3, [r7, #32]
 800ceea:	3301      	adds	r3, #1
 800ceec:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800ceee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cef0:	b2da      	uxtb	r2, r3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800cef8:	e00e      	b.n	800cf18 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800cefa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cefc:	3308      	adds	r3, #8
 800cefe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cf00:	b2d1      	uxtb	r1, r2
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	4413      	add	r3, r2
 800cf06:	460a      	mov	r2, r1
 800cf08:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800cf0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf0e:	0a1b      	lsrs	r3, r3, #8
 800cf10:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800cf12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf14:	3b01      	subs	r3, #1
 800cf16:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800cf18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	dced      	bgt.n	800cefa <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2202      	movs	r2, #2
 800cf22:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800cf34:	3303      	adds	r3, #3
 800cf36:	b2da      	uxtb	r2, r3
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cf44:	1d9a      	adds	r2, r3, #6
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cf4c:	f000 bfb4 	b.w	800deb8 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2202      	movs	r2, #2
 800cf54:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x82;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2282      	movs	r2, #130	; 0x82
 800cf5c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2201      	movs	r2, #1
 800cf64:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2203      	movs	r2, #3
 800cf6c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cf76:	1d9a      	adds	r2, r3, #6
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800cf7e:	2302      	movs	r3, #2
 800cf80:	f000 bf9a 	b.w	800deb8 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2203      	movs	r2, #3
 800cf88:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x82;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2282      	movs	r2, #130	; 0x82
 800cf90:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2201      	movs	r2, #1
 800cf98:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2203      	movs	r2, #3
 800cfa0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cfaa:	1d9a      	adds	r2, r3, #6
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800cfb2:	2303      	movs	r3, #3
 800cfb4:	f000 bf80 	b.w	800deb8 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2201      	movs	r2, #1
 800cfbc:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x82;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2282      	movs	r2, #130	; 0x82
 800cfc4:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2201      	movs	r2, #1
 800cfcc:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2203      	movs	r2, #3
 800cfd4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cfde:	1d9a      	adds	r2, r3, #6
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	f000 bf66 	b.w	800deb8 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	7c5a      	ldrb	r2, [r3, #17]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	7c1a      	ldrb	r2, [r3, #16]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	7bda      	ldrb	r2, [r3, #15]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	7b9a      	ldrb	r2, [r3, #14]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	7b5a      	ldrb	r2, [r3, #13]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800d01e:	2300      	movs	r3, #0
 800d020:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	79db      	ldrb	r3, [r3, #7]
 800d026:	2b01      	cmp	r3, #1
 800d028:	f040 80e2 	bne.w	800d1f0 <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	7d5b      	ldrb	r3, [r3, #21]
 800d030:	b29a      	uxth	r2, r3
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800d03e:	021b      	lsls	r3, r3, #8
 800d040:	b29a      	uxth	r2, r3
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800d04e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d052:	b29a      	uxth	r2, r3
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f8b3 252a 	ldrh.w	r2, [r3, #1322]	; 0x52a
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	7d9b      	ldrb	r3, [r3, #22]
 800d064:	b29b      	uxth	r3, r3
 800d066:	4313      	orrs	r3, r2
 800d068:	b29a      	uxth	r2, r3
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	7ddb      	ldrb	r3, [r3, #23]
 800d074:	b29a      	uxth	r2, r3
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800d082:	021b      	lsls	r3, r3, #8
 800d084:	b29a      	uxth	r2, r3
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800d092:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d096:	b29a      	uxth	r2, r3
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	7e1b      	ldrb	r3, [r3, #24]
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	4313      	orrs	r3, r2
 800d0ac:	b29a      	uxth	r2, r3
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800d0c0:	b29b      	uxth	r3, r3
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d87a      	bhi.n	800d1bc <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800d0d4:	4413      	add	r3, r2
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	f892 2528 	ldrb.w	r2, [r2, #1320]	; 0x528
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	dc53      	bgt.n	800d188 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800d0e0:	e029      	b.n	800d136 <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0ec:	4413      	add	r3, r2
 800d0ee:	005a      	lsls	r2, r3, #1
 800d0f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0f2:	005b      	lsls	r3, r3, #1
 800d0f4:	3309      	adds	r3, #9
 800d0f6:	6879      	ldr	r1, [r7, #4]
 800d0f8:	440a      	add	r2, r1
 800d0fa:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	4413      	add	r3, r2
 800d102:	460a      	mov	r2, r1
 800d104:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800d10e:	461a      	mov	r2, r3
 800d110:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d112:	4413      	add	r3, r2
 800d114:	005b      	lsls	r3, r3, #1
 800d116:	1c5a      	adds	r2, r3, #1
 800d118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d11a:	3305      	adds	r3, #5
 800d11c:	005b      	lsls	r3, r3, #1
 800d11e:	6879      	ldr	r1, [r7, #4]
 800d120:	440a      	add	r2, r1
 800d122:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	4413      	add	r3, r2
 800d12a:	460a      	mov	r2, r1
 800d12c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800d130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d132:	3301      	adds	r3, #1
 800d134:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800d13c:	461a      	mov	r2, r3
 800d13e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d140:	4293      	cmp	r3, r2
 800d142:	dbce      	blt.n	800d0e2 <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	005b      	lsls	r3, r3, #1
 800d14e:	b2da      	uxtb	r2, r3
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x03;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2203      	movs	r2, #3
 800d15a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2201      	movs	r2, #1
 800d162:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800d16c:	3303      	adds	r3, #3
 800d16e:	b2da      	uxtb	r2, r3
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d17c:	1d9a      	adds	r2, r3, #6
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d184:	f000 be98 	b.w	800deb8 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2202      	movs	r2, #2
 800d18c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x83;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2283      	movs	r2, #131	; 0x83
 800d194:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2203      	movs	r2, #3
 800d1a4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d1ae:	1d9a      	adds	r2, r3, #6
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800d1b6:	2302      	movs	r3, #2
 800d1b8:	f000 be7e 	b.w	800deb8 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2203      	movs	r2, #3
 800d1c0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x83;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2283      	movs	r2, #131	; 0x83
 800d1c8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2203      	movs	r2, #3
 800d1d8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d1e2:	1d9a      	adds	r2, r3, #6
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800d1ea:	2303      	movs	r3, #3
 800d1ec:	f000 be64 	b.w	800deb8 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x83;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2283      	movs	r2, #131	; 0x83
 800d1fc:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2201      	movs	r2, #1
 800d204:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2203      	movs	r2, #3
 800d20c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d216:	1d9a      	adds	r2, r3, #6
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d21e:	2301      	movs	r3, #1
 800d220:	f000 be4a 	b.w	800deb8 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	7c5a      	ldrb	r2, [r3, #17]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	7c1a      	ldrb	r2, [r3, #16]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	7bda      	ldrb	r2, [r3, #15]
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	7b9a      	ldrb	r2, [r3, #14]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	7b5a      	ldrb	r2, [r3, #13]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800d256:	2300      	movs	r3, #0
 800d258:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	7a1b      	ldrb	r3, [r3, #8]
 800d25e:	2b01      	cmp	r3, #1
 800d260:	f040 80e2 	bne.w	800d428 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	7d5b      	ldrb	r3, [r3, #21]
 800d268:	b29a      	uxth	r2, r3
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800d276:	021b      	lsls	r3, r3, #8
 800d278:	b29a      	uxth	r2, r3
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800d286:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d28a:	b29a      	uxth	r2, r3
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8b3 2530 	ldrh.w	r2, [r3, #1328]	; 0x530
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	7d9b      	ldrb	r3, [r3, #22]
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	4313      	orrs	r3, r2
 800d2a0:	b29a      	uxth	r2, r3
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	7ddb      	ldrb	r3, [r3, #23]
 800d2ac:	b29a      	uxth	r2, r3
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800d2ba:	021b      	lsls	r3, r3, #8
 800d2bc:	b29a      	uxth	r2, r3
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800d2ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d2ce:	b29a      	uxth	r2, r3
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	7e1b      	ldrb	r3, [r3, #24]
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	4313      	orrs	r3, r2
 800d2e4:	b29a      	uxth	r2, r3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f893 352e 	ldrb.w	r3, [r3, #1326]	; 0x52e
 800d2f8:	b29b      	uxth	r3, r3
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d87a      	bhi.n	800d3f4 <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800d304:	461a      	mov	r2, r3
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800d30c:	4413      	add	r3, r2
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	f892 252e 	ldrb.w	r2, [r2, #1326]	; 0x52e
 800d314:	4293      	cmp	r3, r2
 800d316:	dc53      	bgt.n	800d3c0 <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800d318:	e029      	b.n	800d36e <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800d320:	461a      	mov	r2, r3
 800d322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d324:	4413      	add	r3, r2
 800d326:	005a      	lsls	r2, r3, #1
 800d328:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d32a:	005b      	lsls	r3, r3, #1
 800d32c:	3309      	adds	r3, #9
 800d32e:	6879      	ldr	r1, [r7, #4]
 800d330:	440a      	add	r2, r1
 800d332:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	4413      	add	r3, r2
 800d33a:	460a      	mov	r2, r1
 800d33c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800d346:	461a      	mov	r2, r3
 800d348:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d34a:	4413      	add	r3, r2
 800d34c:	005b      	lsls	r3, r3, #1
 800d34e:	1c5a      	adds	r2, r3, #1
 800d350:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d352:	3305      	adds	r3, #5
 800d354:	005b      	lsls	r3, r3, #1
 800d356:	6879      	ldr	r1, [r7, #4]
 800d358:	440a      	add	r2, r1
 800d35a:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	4413      	add	r3, r2
 800d362:	460a      	mov	r2, r1
 800d364:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800d368:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d36a:	3301      	adds	r3, #1
 800d36c:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800d374:	461a      	mov	r2, r3
 800d376:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d378:	4293      	cmp	r3, r2
 800d37a:	dbce      	blt.n	800d31a <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800d382:	b2db      	uxtb	r3, r3
 800d384:	005b      	lsls	r3, r3, #1
 800d386:	b2da      	uxtb	r2, r3
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x04;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2204      	movs	r2, #4
 800d392:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2201      	movs	r2, #1
 800d39a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800d3a4:	3303      	adds	r3, #3
 800d3a6:	b2da      	uxtb	r2, r3
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d3b4:	1d9a      	adds	r2, r3, #6
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d3bc:	f000 bd7c 	b.w	800deb8 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2202      	movs	r2, #2
 800d3c4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x84;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2284      	movs	r2, #132	; 0x84
 800d3cc:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2203      	movs	r2, #3
 800d3dc:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d3e6:	1d9a      	adds	r2, r3, #6
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800d3ee:	2302      	movs	r3, #2
 800d3f0:	f000 bd62 	b.w	800deb8 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2203      	movs	r2, #3
 800d3f8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x84;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2284      	movs	r2, #132	; 0x84
 800d400:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2201      	movs	r2, #1
 800d408:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2203      	movs	r2, #3
 800d410:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d41a:	1d9a      	adds	r2, r3, #6
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800d422:	2303      	movs	r3, #3
 800d424:	f000 bd48 	b.w	800deb8 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2201      	movs	r2, #1
 800d42c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x84;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2284      	movs	r2, #132	; 0x84
 800d434:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2201      	movs	r2, #1
 800d43c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2203      	movs	r2, #3
 800d444:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d44e:	1d9a      	adds	r2, r3, #6
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d456:	2301      	movs	r3, #1
 800d458:	f000 bd2e 	b.w	800deb8 <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	7c5a      	ldrb	r2, [r3, #17]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	7c1a      	ldrb	r2, [r3, #16]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	7bda      	ldrb	r2, [r3, #15]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	7b9a      	ldrb	r2, [r3, #14]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	7b5a      	ldrb	r2, [r3, #13]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

								int qty_reg=0;
 800d48e:	2300      	movs	r3, #0
 800d490:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	7a5b      	ldrb	r3, [r3, #9]
 800d496:	2b01      	cmp	r3, #1
 800d498:	f040 80d1 	bne.w	800d63e <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	7d5b      	ldrb	r3, [r3, #21]
 800d4a0:	b29a      	uxth	r2, r3
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800d4ae:	021b      	lsls	r3, r3, #8
 800d4b0:	b29a      	uxth	r2, r3
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800d4be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8b3 2536 	ldrh.w	r2, [r3, #1334]	; 0x536
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	7d9b      	ldrb	r3, [r3, #22]
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	b29a      	uxth	r2, r3
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	7ddb      	ldrb	r3, [r3, #23]
 800d4e4:	b29a      	uxth	r2, r3
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d4f2:	021b      	lsls	r3, r3, #8
 800d4f4:	b29a      	uxth	r2, r3
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d502:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d506:	b29a      	uxth	r2, r3
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f8b3 2538 	ldrh.w	r2, [r3, #1336]	; 0x538
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	7e1b      	ldrb	r3, [r3, #24]
 800d518:	b29b      	uxth	r3, r3
 800d51a:	4313      	orrs	r3, r2
 800d51c:	b29a      	uxth	r2, r3
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f893 3534 	ldrb.w	r3, [r3, #1332]	; 0x534
 800d52a:	461a      	mov	r2, r3
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800d532:	429a      	cmp	r2, r3
 800d534:	dd69      	ble.n	800d60a <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d005      	beq.n	800d54c <ModBUS+0xa60>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d546:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d54a:	d144      	bne.n	800d5d6 <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d552:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d556:	d10d      	bne.n	800d574 <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	f8b2 2536 	ldrh.w	r2, [r2, #1334]	; 0x536
 800d564:	4611      	mov	r1, r2
 800d566:	2201      	movs	r2, #1
 800d568:	408a      	lsls	r2, r1
 800d56a:	431a      	orrs	r2, r3
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 800d572:	e003      	b.n	800d57c <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2200      	movs	r2, #0
 800d578:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	7e1a      	ldrb	r2, [r3, #24]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	7dda      	ldrb	r2, [r3, #23]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	7d9a      	ldrb	r2, [r3, #22]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	7d5a      	ldrb	r2, [r3, #21]
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x05;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2205      	movs	r2, #5
 800d5a8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800d5ba:	3306      	adds	r3, #6
 800d5bc:	b2da      	uxtb	r2, r3
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d5ca:	1d9a      	adds	r2, r3, #6
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800d5d2:	f000 bc71 	b.w	800deb8 <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2202      	movs	r2, #2
 800d5da:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x85;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2285      	movs	r2, #133	; 0x85
 800d5e2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2201      	movs	r2, #1
 800d5ea:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2203      	movs	r2, #3
 800d5f2:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d5fc:	1d9a      	adds	r2, r3, #6
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
												return(2);//Error excepcion 02
 800d604:	2302      	movs	r3, #2
 800d606:	f000 bc57 	b.w	800deb8 <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2203      	movs	r2, #3
 800d60e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
											m3->_MBUS_2SND[7]=0x85;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2285      	movs	r2, #133	; 0x85
 800d616:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2201      	movs	r2, #1
 800d61e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2203      	movs	r2, #3
 800d626:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d630:	1d9a      	adds	r2, r3, #6
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
											return(3);//Erroe excepcion 03
 800d638:	2303      	movs	r3, #3
 800d63a:	f000 bc3d 	b.w	800deb8 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2201      	movs	r2, #1
 800d642:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x85;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2285      	movs	r2, #133	; 0x85
 800d64a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2201      	movs	r2, #1
 800d652:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2203      	movs	r2, #3
 800d65a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d664:	1d9a      	adds	r2, r3, #6
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(1);//Error excepcion 01
 800d66c:	2301      	movs	r3, #1
 800d66e:	f000 bc23 	b.w	800deb8 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	7c5a      	ldrb	r2, [r3, #17]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	7c1a      	ldrb	r2, [r3, #16]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	7bda      	ldrb	r2, [r3, #15]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	7b9a      	ldrb	r2, [r3, #14]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	7b5a      	ldrb	r2, [r3, #13]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	7a9b      	ldrb	r3, [r3, #10]
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	f040 80a3 	bne.w	800d7fc <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	7d5b      	ldrb	r3, [r3, #21]
 800d6ba:	b29a      	uxth	r2, r3
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800d6c8:	021b      	lsls	r3, r3, #8
 800d6ca:	b29a      	uxth	r2, r3
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800d6d8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d6dc:	b29a      	uxth	r2, r3
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	7d9b      	ldrb	r3, [r3, #22]
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	b29a      	uxth	r2, r3
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542

							start_address=m3->_06_WriteSingleRegister_Addr;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800d700:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	7ddb      	ldrb	r3, [r3, #23]
 800d706:	b29a      	uxth	r2, r3
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800d714:	021b      	lsls	r3, r3, #8
 800d716:	b29a      	uxth	r2, r3
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800d724:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d728:	b29a      	uxth	r2, r3
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f8b3 2544 	ldrh.w	r2, [r3, #1348]	; 0x544
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	7e1b      	ldrb	r3, [r3, #24]
 800d73a:	b29b      	uxth	r3, r3
 800d73c:	4313      	orrs	r3, r2
 800d73e:	b29a      	uxth	r2, r3
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f893 3540 	ldrb.w	r3, [r3, #1344]	; 0x540
 800d752:	b29b      	uxth	r3, r3
 800d754:	429a      	cmp	r2, r3
 800d756:	d838      	bhi.n	800d7ca <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800d758:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d75a:	687a      	ldr	r2, [r7, #4]
 800d75c:	7dd1      	ldrb	r1, [r2, #23]
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	4413      	add	r3, r2
 800d762:	460a      	mov	r2, r1
 800d764:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800d768:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d76a:	3301      	adds	r3, #1
 800d76c:	687a      	ldr	r2, [r7, #4]
 800d76e:	7e11      	ldrb	r1, [r2, #24]
 800d770:	687a      	ldr	r2, [r7, #4]
 800d772:	4413      	add	r3, r2
 800d774:	460a      	mov	r2, r1
 800d776:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	7e1a      	ldrb	r2, [r3, #24]
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	7dda      	ldrb	r2, [r3, #23]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	7d9a      	ldrb	r2, [r3, #22]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	7d5a      	ldrb	r2, [r3, #21]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x06;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2206      	movs	r2, #6
 800d7a6:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2206      	movs	r2, #6
 800d7b6:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d7c0:	1d9a      	adds	r2, r3, #6
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d7c8:	e376      	b.n	800deb8 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2202      	movs	r2, #2
 800d7ce:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x86;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2286      	movs	r2, #134	; 0x86
 800d7d6:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2201      	movs	r2, #1
 800d7de:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2203      	movs	r2, #3
 800d7e6:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d7f0:	1d9a      	adds	r2, r3, #6
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800d7f8:	2302      	movs	r3, #2
 800d7fa:	e35d      	b.n	800deb8 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2201      	movs	r2, #1
 800d800:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x86;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2286      	movs	r2, #134	; 0x86
 800d808:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2201      	movs	r2, #1
 800d810:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2203      	movs	r2, #3
 800d818:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d822:	1d9a      	adds	r2, r3, #6
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d82a:	2301      	movs	r3, #1
 800d82c:	e344      	b.n	800deb8 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	7c5a      	ldrb	r2, [r3, #17]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	7c1a      	ldrb	r2, [r3, #16]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	7bda      	ldrb	r2, [r3, #15]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	7b9a      	ldrb	r2, [r3, #14]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	7b5a      	ldrb	r2, [r3, #13]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800d860:	2300      	movs	r3, #0
 800d862:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	7adb      	ldrb	r3, [r3, #11]
 800d868:	2b01      	cmp	r3, #1
 800d86a:	f040 810f 	bne.w	800da8c <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	7d5b      	ldrb	r3, [r3, #21]
 800d872:	b29a      	uxth	r2, r3
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d880:	021b      	lsls	r3, r3, #8
 800d882:	b29a      	uxth	r2, r3
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d890:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d894:	b29a      	uxth	r2, r3
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8b3 253c 	ldrh.w	r2, [r3, #1340]	; 0x53c
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	7d9b      	ldrb	r3, [r3, #22]
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	b29a      	uxth	r2, r3
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	7ddb      	ldrb	r3, [r3, #23]
 800d8b6:	b29a      	uxth	r2, r3
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d8c4:	021b      	lsls	r3, r3, #8
 800d8c6:	b29a      	uxth	r2, r3
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d8d4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d8d8:	b29a      	uxth	r2, r3
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	7e1b      	ldrb	r3, [r3, #24]
 800d8ea:	b29b      	uxth	r3, r3
 800d8ec:	4313      	orrs	r3, r2
 800d8ee:	b29a      	uxth	r2, r3
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f893 353a 	ldrb.w	r3, [r3, #1338]	; 0x53a
 800d902:	b29b      	uxth	r3, r3
 800d904:	429a      	cmp	r2, r3
 800d906:	f200 80a8 	bhi.w	800da5a <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d910:	461a      	mov	r2, r3
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d918:	4413      	add	r3, r2
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	f892 253a 	ldrb.w	r2, [r2, #1338]	; 0x53a
 800d920:	4293      	cmp	r3, r2
 800d922:	f300 8081 	bgt.w	800da28 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800d926:	2300      	movs	r3, #0
 800d928:	657b      	str	r3, [r7, #84]	; 0x54
 800d92a:	2300      	movs	r3, #0
 800d92c:	653b      	str	r3, [r7, #80]	; 0x50
 800d92e:	2300      	movs	r3, #0
 800d930:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d932:	2300      	movs	r3, #0
 800d934:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	7e5b      	ldrb	r3, [r3, #25]
 800d93a:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800d93c:	e00e      	b.n	800d95c <ModBUS+0xe70>
									{
										data=data<<8;
 800d93e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d940:	021b      	lsls	r3, r3, #8
 800d942:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800d944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d946:	330c      	adds	r3, #12
 800d948:	687a      	ldr	r2, [r7, #4]
 800d94a:	4413      	add	r3, r2
 800d94c:	7b5b      	ldrb	r3, [r3, #13]
 800d94e:	461a      	mov	r2, r3
 800d950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d952:	4313      	orrs	r3, r2
 800d954:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800d956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d958:	3b01      	subs	r3, #1
 800d95a:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800d95c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d1ed      	bne.n	800d93e <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d968:	461a      	mov	r2, r3
 800d96a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d96c:	4093      	lsls	r3, r2
 800d96e:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800d970:	e00f      	b.n	800d992 <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d978:	461a      	mov	r2, r3
 800d97a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d97c:	4413      	add	r3, r2
 800d97e:	2201      	movs	r2, #1
 800d980:	fa02 f303 	lsl.w	r3, r2, r3
 800d984:	461a      	mov	r2, r3
 800d986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d988:	4313      	orrs	r3, r2
 800d98a:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800d98c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d98e:	3301      	adds	r3, #1
 800d990:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d998:	461a      	mov	r2, r3
 800d99a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d3e8      	bcc.n	800d972 <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800d9a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9a2:	43db      	mvns	r3, r3
 800d9a4:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800d9ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9ae:	401a      	ands	r2, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318


									data &= ~mascara;
 800d9b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9b8:	43db      	mvns	r3, r3
 800d9ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d9bc:	4013      	ands	r3, r2
 800d9be:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800d9c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9c8:	431a      	orrs	r2, r3
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	7e1a      	ldrb	r2, [r3, #24]
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	7dda      	ldrb	r2, [r3, #23]
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	7d9a      	ldrb	r2, [r3, #22]
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	7d5a      	ldrb	r2, [r3, #21]
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x0F;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	220f      	movs	r2, #15
 800d9fc:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2201      	movs	r2, #1
 800da04:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800da0e:	3306      	adds	r3, #6
 800da10:	b2da      	uxtb	r2, r3
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800da1e:	1d9a      	adds	r2, r3, #6
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800da26:	e247      	b.n	800deb8 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2202      	movs	r2, #2
 800da2c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x8F;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	228f      	movs	r2, #143	; 0x8f
 800da34:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2201      	movs	r2, #1
 800da3c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2203      	movs	r2, #3
 800da44:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800da4e:	1d9a      	adds	r2, r3, #6
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800da56:	2302      	movs	r3, #2
 800da58:	e22e      	b.n	800deb8 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2203      	movs	r2, #3
 800da5e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x8F;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	228f      	movs	r2, #143	; 0x8f
 800da66:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2201      	movs	r2, #1
 800da6e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2203      	movs	r2, #3
 800da76:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800da80:	1d9a      	adds	r2, r3, #6
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800da88:	2303      	movs	r3, #3
 800da8a:	e215      	b.n	800deb8 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2201      	movs	r2, #1
 800da90:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x8F;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	228f      	movs	r2, #143	; 0x8f
 800da98:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2201      	movs	r2, #1
 800daa0:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2203      	movs	r2, #3
 800daa8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800dab2:	1d9a      	adds	r2, r3, #6
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800daba:	2301      	movs	r3, #1
 800dabc:	e1fc      	b.n	800deb8 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	7c5a      	ldrb	r2, [r3, #17]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	7c1a      	ldrb	r2, [r3, #16]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	7bda      	ldrb	r2, [r3, #15]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	7b9a      	ldrb	r2, [r3, #14]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	7b5a      	ldrb	r2, [r3, #13]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800daf0:	2300      	movs	r3, #0
 800daf2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800daf6:	2300      	movs	r3, #0
 800daf8:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	7b1b      	ldrb	r3, [r3, #12]
 800dafe:	2b01      	cmp	r3, #1
 800db00:	f040 80eb 	bne.w	800dcda <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	7d5b      	ldrb	r3, [r3, #21]
 800db08:	b29a      	uxth	r2, r3
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800db16:	021b      	lsls	r3, r3, #8
 800db18:	b29a      	uxth	r2, r3
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800db26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800db2a:	b29a      	uxth	r2, r3
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f8b3 2548 	ldrh.w	r2, [r3, #1352]	; 0x548
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	7d9b      	ldrb	r3, [r3, #22]
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	4313      	orrs	r3, r2
 800db40:	b29a      	uxth	r2, r3
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800db4e:	005b      	lsls	r3, r3, #1
 800db50:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	7ddb      	ldrb	r3, [r3, #23]
 800db56:	b29a      	uxth	r2, r3
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800db64:	021b      	lsls	r3, r3, #8
 800db66:	b29a      	uxth	r2, r3
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800db74:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800db78:	b29a      	uxth	r2, r3
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	7e1b      	ldrb	r3, [r3, #24]
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	4313      	orrs	r3, r2
 800db8e:	b29a      	uxth	r2, r3
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f893 3546 	ldrb.w	r3, [r3, #1350]	; 0x546
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d87f      	bhi.n	800dca8 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800dbae:	461a      	mov	r2, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800dbb6:	4413      	add	r3, r2
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	f892 2546 	ldrb.w	r2, [r2, #1350]	; 0x546
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	dc59      	bgt.n	800dc76 <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800dbc2:	e029      	b.n	800dc18 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800dbc4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dbc8:	f103 020d 	add.w	r2, r3, #13
 800dbcc:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800dbce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dbd2:	440b      	add	r3, r1
 800dbd4:	6879      	ldr	r1, [r7, #4]
 800dbd6:	440a      	add	r2, r1
 800dbd8:	7b51      	ldrb	r1, [r2, #13]
 800dbda:	687a      	ldr	r2, [r7, #4]
 800dbdc:	4413      	add	r3, r2
 800dbde:	460a      	mov	r2, r1
 800dbe0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800dbe4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dbe8:	3301      	adds	r3, #1
 800dbea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800dbee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dbf2:	f103 020d 	add.w	r2, r3, #13
 800dbf6:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800dbf8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dbfc:	440b      	add	r3, r1
 800dbfe:	6879      	ldr	r1, [r7, #4]
 800dc00:	440a      	add	r2, r1
 800dc02:	7b51      	ldrb	r1, [r2, #13]
 800dc04:	687a      	ldr	r2, [r7, #4]
 800dc06:	4413      	add	r3, r2
 800dc08:	460a      	mov	r2, r1
 800dc0a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										qty_reg++;
 800dc0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dc12:	3301      	adds	r3, #1
 800dc14:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	7e5b      	ldrb	r3, [r3, #25]
 800dc1c:	b29b      	uxth	r3, r3
 800dc1e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d3ce      	bcc.n	800dbc4 <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	7e1a      	ldrb	r2, [r3, #24]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	7dda      	ldrb	r2, [r3, #23]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	7d9a      	ldrb	r2, [r3, #22]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	7d5a      	ldrb	r2, [r3, #21]
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x10;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2210      	movs	r2, #16
 800dc52:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2201      	movs	r2, #1
 800dc5a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2206      	movs	r2, #6
 800dc62:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800dc6c:	1d9a      	adds	r2, r3, #6
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800dc74:	e120      	b.n	800deb8 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2202      	movs	r2, #2
 800dc7a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x90;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2290      	movs	r2, #144	; 0x90
 800dc82:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2201      	movs	r2, #1
 800dc8a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2203      	movs	r2, #3
 800dc92:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800dc9c:	1d9a      	adds	r2, r3, #6
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800dca4:	2302      	movs	r3, #2
 800dca6:	e107      	b.n	800deb8 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2203      	movs	r2, #3
 800dcac:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x90;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2290      	movs	r2, #144	; 0x90
 800dcb4:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2201      	movs	r2, #1
 800dcbc:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2203      	movs	r2, #3
 800dcc4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800dcce:	1d9a      	adds	r2, r3, #6
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800dcd6:	2303      	movs	r3, #3
 800dcd8:	e0ee      	b.n	800deb8 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2201      	movs	r2, #1
 800dcde:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x90;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2290      	movs	r2, #144	; 0x90
 800dce6:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2201      	movs	r2, #1
 800dcee:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2203      	movs	r2, #3
 800dcf6:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800dd00:	1d9a      	adds	r2, r3, #6
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800dd08:	2301      	movs	r3, #1
 800dd0a:	e0d5      	b.n	800deb8 <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2201      	movs	r2, #1
 800dd10:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	7d1b      	ldrb	r3, [r3, #20]
 800dd18:	3b80      	subs	r3, #128	; 0x80
 800dd1a:	b2da      	uxtb	r2, r3
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	7cda      	ldrb	r2, [r3, #19]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
					m3->_MBUS_2SND[5]=0x03;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2203      	movs	r2, #3
 800dd30:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	7c5a      	ldrb	r2, [r3, #17]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	7c1a      	ldrb	r2, [r3, #16]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	7bda      	ldrb	r2, [r3, #15]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	7b9a      	ldrb	r2, [r3, #14]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	7b5a      	ldrb	r2, [r3, #13]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800dd6c:	1d9a      	adds	r2, r3, #6
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
					return(1);
 800dd74:	2301      	movs	r3, #1
 800dd76:	e09f      	b.n	800deb8 <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800dd78:	2301      	movs	r3, #1
 800dd7a:	e09d      	b.n	800deb8 <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	785b      	ldrb	r3, [r3, #1]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	f040 8099 	bne.w	800deb8 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f103 020d 	add.w	r2, r3, #13
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800dd92:	4619      	mov	r1, r3
 800dd94:	4610      	mov	r0, r2
 800dd96:	f7fe fda7 	bl	800c8e8 <ModBUS_Check>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	f000 808b 	beq.w	800deb8 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f7fe fdbf 	bl	800c926 <ModBUS_Check_tid>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d04f      	beq.n	800de4e <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	7d1b      	ldrb	r3, [r3, #20]
 800ddb2:	2b03      	cmp	r3, #3
 800ddb4:	d143      	bne.n	800de3e <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800ddc6:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800ddc8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ddca:	021b      	lsls	r3, r3, #8
 800ddcc:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800ddd4:	b29a      	uxth	r2, r3
 800ddd6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ddd8:	4313      	orrs	r3, r2
 800ddda:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800dde2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800dde6:	2300      	movs	r3, #0
 800dde8:	643b      	str	r3, [r7, #64]	; 0x40
 800ddea:	e022      	b.n	800de32 <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800ddec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddee:	005b      	lsls	r3, r3, #1
 800ddf0:	f103 0209 	add.w	r2, r3, #9
 800ddf4:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800ddf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddf8:	440b      	add	r3, r1
 800ddfa:	005b      	lsls	r3, r3, #1
 800ddfc:	6879      	ldr	r1, [r7, #4]
 800ddfe:	440a      	add	r2, r1
 800de00:	7b51      	ldrb	r1, [r2, #13]
 800de02:	687a      	ldr	r2, [r7, #4]
 800de04:	4413      	add	r3, r2
 800de06:	460a      	mov	r2, r1
 800de08:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800de0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de0e:	3305      	adds	r3, #5
 800de10:	005a      	lsls	r2, r3, #1
 800de12:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800de14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de16:	440b      	add	r3, r1
 800de18:	005b      	lsls	r3, r3, #1
 800de1a:	3301      	adds	r3, #1
 800de1c:	6879      	ldr	r1, [r7, #4]
 800de1e:	440a      	add	r2, r1
 800de20:	7b51      	ldrb	r1, [r2, #13]
 800de22:	687a      	ldr	r2, [r7, #4]
 800de24:	4413      	add	r3, r2
 800de26:	460a      	mov	r2, r1
 800de28:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
						for (int i=0;i< qty; i++)
 800de2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de2e:	3301      	adds	r3, #1
 800de30:	643b      	str	r3, [r7, #64]	; 0x40
 800de32:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800de36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800de38:	429a      	cmp	r2, r3
 800de3a:	dbd7      	blt.n	800ddec <ModBUS+0x1300>

						}


					}
					break;
 800de3c:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	7c9b      	ldrb	r3, [r3, #18]
 800de42:	461a      	mov	r2, r3
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	7d5b      	ldrb	r3, [r3, #21]
 800de48:	1ad3      	subs	r3, r2, r3
 800de4a:	63bb      	str	r3, [r7, #56]	; 0x38
 800de4c:	e034      	b.n	800deb8 <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	7d1b      	ldrb	r3, [r3, #20]
 800de52:	3b81      	subs	r3, #129	; 0x81
 800de54:	2b15      	cmp	r3, #21
 800de56:	d82f      	bhi.n	800deb8 <ModBUS+0x13cc>
 800de58:	a201      	add	r2, pc, #4	; (adr r2, 800de60 <ModBUS+0x1374>)
 800de5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de5e:	bf00      	nop
 800de60:	0800deb9 	.word	0x0800deb9
 800de64:	0800deb9 	.word	0x0800deb9
 800de68:	0800deb9 	.word	0x0800deb9
 800de6c:	0800deb9 	.word	0x0800deb9
 800de70:	0800deb9 	.word	0x0800deb9
 800de74:	0800deb9 	.word	0x0800deb9
 800de78:	0800deb9 	.word	0x0800deb9
 800de7c:	0800deb9 	.word	0x0800deb9
 800de80:	0800deb9 	.word	0x0800deb9
 800de84:	0800deb9 	.word	0x0800deb9
 800de88:	0800deb9 	.word	0x0800deb9
 800de8c:	0800deb9 	.word	0x0800deb9
 800de90:	0800deb9 	.word	0x0800deb9
 800de94:	0800deb9 	.word	0x0800deb9
 800de98:	0800deb9 	.word	0x0800deb9
 800de9c:	0800deb9 	.word	0x0800deb9
 800dea0:	0800deb9 	.word	0x0800deb9
 800dea4:	0800deb9 	.word	0x0800deb9
 800dea8:	0800deb9 	.word	0x0800deb9
 800deac:	0800deb9 	.word	0x0800deb9
 800deb0:	0800deb9 	.word	0x0800deb9
 800deb4:	0800deb9 	.word	0x0800deb9
			}
		}
	}


}
 800deb8:	4618      	mov	r0, r3
 800deba:	3770      	adds	r7, #112	; 0x70
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <SPI_ETH>:

#include "ETH_W5100.h"


uint8_t  SPI_ETH(struct  W5100_SPI * x )
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b084      	sub	sp, #16
 800dec4:	af02      	add	r7, sp, #8
 800dec6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6858      	ldr	r0, [r3, #4]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	891b      	ldrh	r3, [r3, #8]
 800ded0:	2200      	movs	r2, #0
 800ded2:	4619      	mov	r1, r3
 800ded4:	f7f5 fce6 	bl	80038a4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6818      	ldr	r0, [r3, #0]
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f103 0114 	add.w	r1, r3, #20
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f103 0218 	add.w	r2, r3, #24
 800dee8:	2364      	movs	r3, #100	; 0x64
 800deea:	9300      	str	r3, [sp, #0]
 800deec:	2304      	movs	r3, #4
 800deee:	f7f6 f9ee 	bl	80042ce <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6858      	ldr	r0, [r3, #4]
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	891b      	ldrh	r3, [r3, #8]
 800defa:	2201      	movs	r2, #1
 800defc:	4619      	mov	r1, r3
 800defe:	f7f5 fcd1 	bl	80038a4 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	7edb      	ldrb	r3, [r3, #27]
}
 800df06:	4618      	mov	r0, r3
 800df08:	3708      	adds	r7, #8
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5100_SPI * x, uint8_t addrh, uint8_t addrl, uint8_t op, uint8_t * data, uint8_t lnght)
{
 800df0e:	b580      	push	{r7, lr}
 800df10:	b086      	sub	sp, #24
 800df12:	af00      	add	r7, sp, #0
 800df14:	6078      	str	r0, [r7, #4]
 800df16:	4608      	mov	r0, r1
 800df18:	4611      	mov	r1, r2
 800df1a:	461a      	mov	r2, r3
 800df1c:	4603      	mov	r3, r0
 800df1e:	70fb      	strb	r3, [r7, #3]
 800df20:	460b      	mov	r3, r1
 800df22:	70bb      	strb	r3, [r7, #2]
 800df24:	4613      	mov	r3, r2
 800df26:	707b      	strb	r3, [r7, #1]
 uint16_t res=0;
 800df28:	2300      	movs	r3, #0
 800df2a:	82fb      	strh	r3, [r7, #22]

 x->TX[0]= op; //asigno lectura o escritura
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	787a      	ldrb	r2, [r7, #1]
 800df30:	751a      	strb	r2, [r3, #20]
 x->TX[1]= addrh;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	78fa      	ldrb	r2, [r7, #3]
 800df36:	755a      	strb	r2, [r3, #21]
 x->TX[2]= addrl;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	78ba      	ldrb	r2, [r7, #2]
 800df3c:	759a      	strb	r2, [r3, #22]
 x->TX[3]=0x00;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2200      	movs	r2, #0
 800df42:	75da      	strb	r2, [r3, #23]
 if(op == SPI_WRITE)
 800df44:	787b      	ldrb	r3, [r7, #1]
 800df46:	2bf0      	cmp	r3, #240	; 0xf0
 800df48:	d11d      	bne.n	800df86 <SPI_ETH_REG+0x78>
 {
	 for(int i=0; i<(lnght); i++)
 800df4a:	2300      	movs	r3, #0
 800df4c:	613b      	str	r3, [r7, #16]
 800df4e:	e013      	b.n	800df78 <SPI_ETH_REG+0x6a>
	 {
		x->TX[3]=data[i];
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	6a3a      	ldr	r2, [r7, #32]
 800df54:	4413      	add	r3, r2
 800df56:	781a      	ldrb	r2, [r3, #0]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f7ff ffaf 	bl	800dec0 <SPI_ETH>
 800df62:	4603      	mov	r3, r0
 800df64:	82fb      	strh	r3, [r7, #22]
		x->TX[2]++;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	7d9b      	ldrb	r3, [r3, #22]
 800df6a:	3301      	adds	r3, #1
 800df6c:	b2da      	uxtb	r2, r3
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	759a      	strb	r2, [r3, #22]
	 for(int i=0; i<(lnght); i++)
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	3301      	adds	r3, #1
 800df76:	613b      	str	r3, [r7, #16]
 800df78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800df7c:	693a      	ldr	r2, [r7, #16]
 800df7e:	429a      	cmp	r2, r3
 800df80:	dbe6      	blt.n	800df50 <SPI_ETH_REG+0x42>
	 }
	 return(res);
 800df82:	8afb      	ldrh	r3, [r7, #22]
 800df84:	e037      	b.n	800dff6 <SPI_ETH_REG+0xe8>
 }
	 if(op == SPI_READ)
 800df86:	787b      	ldrb	r3, [r7, #1]
 800df88:	2b0f      	cmp	r3, #15
 800df8a:	d134      	bne.n	800dff6 <SPI_ETH_REG+0xe8>
	 {
		 x->TX[3]=0x00;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2200      	movs	r2, #0
 800df90:	75da      	strb	r2, [r3, #23]
		 if (lnght==2)
 800df92:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800df96:	2b02      	cmp	r3, #2
 800df98:	d120      	bne.n	800dfdc <SPI_ETH_REG+0xce>
		{
		for(int i=0; i<(lnght); i++)
 800df9a:	2300      	movs	r3, #0
 800df9c:	60fb      	str	r3, [r7, #12]
 800df9e:	e016      	b.n	800dfce <SPI_ETH_REG+0xc0>
			{
			res|=SPI_ETH(x);
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f7ff ff8d 	bl	800dec0 <SPI_ETH>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	b29a      	uxth	r2, r3
 800dfaa:	8afb      	ldrh	r3, [r7, #22]
 800dfac:	4313      	orrs	r3, r2
 800dfae:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	7d9b      	ldrb	r3, [r3, #22]
 800dfb4:	3301      	adds	r3, #1
 800dfb6:	b2da      	uxtb	r2, r3
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	759a      	strb	r2, [r3, #22]
			if (i==0)res=res<<8;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d102      	bne.n	800dfc8 <SPI_ETH_REG+0xba>
 800dfc2:	8afb      	ldrh	r3, [r7, #22]
 800dfc4:	021b      	lsls	r3, r3, #8
 800dfc6:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	3301      	adds	r3, #1
 800dfcc:	60fb      	str	r3, [r7, #12]
 800dfce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dfd2:	68fa      	ldr	r2, [r7, #12]
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	dbe3      	blt.n	800dfa0 <SPI_ETH_REG+0x92>
			}
		 return(res);
 800dfd8:	8afb      	ldrh	r3, [r7, #22]
 800dfda:	e00c      	b.n	800dff6 <SPI_ETH_REG+0xe8>
		}else
		{
			res=SPI_ETH(x);
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f7ff ff6f 	bl	800dec0 <SPI_ETH>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	7d9b      	ldrb	r3, [r3, #22]
 800dfea:	3301      	adds	r3, #1
 800dfec:	b2da      	uxtb	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	759a      	strb	r2, [r3, #22]
			return(res);
 800dff2:	8afb      	ldrh	r3, [r7, #22]
 800dff4:	e7ff      	b.n	800dff6 <SPI_ETH_REG+0xe8>
		}
 	 }
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3718      	adds	r7, #24
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}

0800dffe <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5100_SPI * x, uint16_t addr, uint16_t  data)
{
 800dffe:	b580      	push	{r7, lr}
 800e000:	b086      	sub	sp, #24
 800e002:	af00      	add	r7, sp, #0
 800e004:	6078      	str	r0, [r7, #4]
 800e006:	460b      	mov	r3, r1
 800e008:	807b      	strh	r3, [r7, #2]
 800e00a:	4613      	mov	r3, r2
 800e00c:	803b      	strh	r3, [r7, #0]
 uint16_t res=0;
 800e00e:	2300      	movs	r3, #0
 800e010:	82fb      	strh	r3, [r7, #22]
 uint8_t num[2];

 x->TX[0]= SPI_WRITE; //asigno lectura o escritura
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	22f0      	movs	r2, #240	; 0xf0
 800e016:	751a      	strb	r2, [r3, #20]

 num[1] = data & 0x00FF ;
 800e018:	883b      	ldrh	r3, [r7, #0]
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	737b      	strb	r3, [r7, #13]
 num[0] = (data & 0xFF00)>>8 ;
 800e01e:	883b      	ldrh	r3, [r7, #0]
 800e020:	0a1b      	lsrs	r3, r3, #8
 800e022:	b29b      	uxth	r3, r3
 800e024:	b2db      	uxtb	r3, r3
 800e026:	733b      	strb	r3, [r7, #12]

	 for(int i=0; i<(2); i++)
 800e028:	2300      	movs	r3, #0
 800e02a:	613b      	str	r3, [r7, #16]
 800e02c:	e01b      	b.n	800e066 <SPI_ETH_WR_REG_16+0x68>
	 {
		x->TX[2]= addr & 0x00FF;
 800e02e:	887b      	ldrh	r3, [r7, #2]
 800e030:	b2da      	uxtb	r2, r3
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	759a      	strb	r2, [r3, #22]
		x->TX[1]=(addr & 0xFF00)>>8;
 800e036:	887b      	ldrh	r3, [r7, #2]
 800e038:	0a1b      	lsrs	r3, r3, #8
 800e03a:	b29b      	uxth	r3, r3
 800e03c:	b2da      	uxtb	r2, r3
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	755a      	strb	r2, [r3, #21]
		addr++;
 800e042:	887b      	ldrh	r3, [r7, #2]
 800e044:	3301      	adds	r3, #1
 800e046:	807b      	strh	r3, [r7, #2]
		x->TX[3]=num[i];
 800e048:	f107 020c 	add.w	r2, r7, #12
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	4413      	add	r3, r2
 800e050:	781a      	ldrb	r2, [r3, #0]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f7ff ff32 	bl	800dec0 <SPI_ETH>
 800e05c:	4603      	mov	r3, r0
 800e05e:	82fb      	strh	r3, [r7, #22]
	 for(int i=0; i<(2); i++)
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	3301      	adds	r3, #1
 800e064:	613b      	str	r3, [r7, #16]
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	2b01      	cmp	r3, #1
 800e06a:	dde0      	ble.n	800e02e <SPI_ETH_WR_REG_16+0x30>
	 }
	 return(res);
 800e06c:	8afb      	ldrh	r3, [r7, #22]
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3718      	adds	r7, #24
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}

0800e076 <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800e076:	b590      	push	{r4, r7, lr}
 800e078:	b087      	sub	sp, #28
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	60f8      	str	r0, [r7, #12]
 800e07e:	607a      	str	r2, [r7, #4]
 800e080:	461a      	mov	r2, r3
 800e082:	460b      	mov	r3, r1
 800e084:	817b      	strh	r3, [r7, #10]
 800e086:	4613      	mov	r3, r2
 800e088:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0x0F; //read operation
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	220f      	movs	r2, #15
 800e08e:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800e090:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e096:	d226      	bcs.n	800e0e6 <SPI_ETH_RD_RCV_REG_16+0x70>
	{
			x->TX[3]=0x00;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2200      	movs	r2, #0
 800e09c:	75da      	strb	r2, [r3, #23]
			for(int i=0; i<(lnght); i++)
 800e09e:	2300      	movs	r3, #0
 800e0a0:	617b      	str	r3, [r7, #20]
 800e0a2:	e01a      	b.n	800e0da <SPI_ETH_RD_RCV_REG_16+0x64>
				{
				x->TX[2] = addr & 0x00FF;
 800e0a4:	897b      	ldrh	r3, [r7, #10]
 800e0a6:	b2da      	uxtb	r2, r3
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800e0ac:	897b      	ldrh	r3, [r7, #10]
 800e0ae:	0a1b      	lsrs	r3, r3, #8
 800e0b0:	b29b      	uxth	r3, r3
 800e0b2:	b2da      	uxtb	r2, r3
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	755a      	strb	r2, [r3, #21]
				data[i+offset]=SPI_ETH(x);
 800e0b8:	893a      	ldrh	r2, [r7, #8]
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	4413      	add	r3, r2
 800e0be:	461a      	mov	r2, r3
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	189c      	adds	r4, r3, r2
 800e0c4:	68f8      	ldr	r0, [r7, #12]
 800e0c6:	f7ff fefb 	bl	800dec0 <SPI_ETH>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	7023      	strb	r3, [r4, #0]
				addr++;
 800e0ce:	897b      	ldrh	r3, [r7, #10]
 800e0d0:	3301      	adds	r3, #1
 800e0d2:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	617b      	str	r3, [r7, #20]
 800e0da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e0dc:	697a      	ldr	r2, [r7, #20]
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	dbe0      	blt.n	800e0a4 <SPI_ETH_RD_RCV_REG_16+0x2e>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	e000      	b.n	800e0e8 <SPI_ETH_RD_RCV_REG_16+0x72>
	}
	else
	{
	return(1);
 800e0e6:	2301      	movs	r3, #1
	}
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	371c      	adds	r7, #28
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd90      	pop	{r4, r7, pc}

0800e0f0 <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b086      	sub	sp, #24
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	607a      	str	r2, [r7, #4]
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	460b      	mov	r3, r1
 800e0fe:	817b      	strh	r3, [r7, #10]
 800e100:	4613      	mov	r3, r2
 800e102:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0xF0; //write operation
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	22f0      	movs	r2, #240	; 0xf0
 800e108:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800e10a:	8c3b      	ldrh	r3, [r7, #32]
 800e10c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e110:	d223      	bcs.n	800e15a <SPI_ETH_WR_TX_REG_16+0x6a>
	{

			for(int i=0; i<(lnght); i++)
 800e112:	2300      	movs	r3, #0
 800e114:	617b      	str	r3, [r7, #20]
 800e116:	e01a      	b.n	800e14e <SPI_ETH_WR_TX_REG_16+0x5e>
				{
				x->TX[2] = addr & 0x00FF;
 800e118:	897b      	ldrh	r3, [r7, #10]
 800e11a:	b2da      	uxtb	r2, r3
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800e120:	897b      	ldrh	r3, [r7, #10]
 800e122:	0a1b      	lsrs	r3, r3, #8
 800e124:	b29b      	uxth	r3, r3
 800e126:	b2da      	uxtb	r2, r3
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	755a      	strb	r2, [r3, #21]
				x->TX[3]= x->data[i+offset];
 800e12c:	893a      	ldrh	r2, [r7, #8]
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	4413      	add	r3, r2
 800e132:	68fa      	ldr	r2, [r7, #12]
 800e134:	4413      	add	r3, r2
 800e136:	7f1a      	ldrb	r2, [r3, #28]
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	75da      	strb	r2, [r3, #23]
				SPI_ETH(x);
 800e13c:	68f8      	ldr	r0, [r7, #12]
 800e13e:	f7ff febf 	bl	800dec0 <SPI_ETH>
				addr++;
 800e142:	897b      	ldrh	r3, [r7, #10]
 800e144:	3301      	adds	r3, #1
 800e146:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	3301      	adds	r3, #1
 800e14c:	617b      	str	r3, [r7, #20]
 800e14e:	8c3b      	ldrh	r3, [r7, #32]
 800e150:	697a      	ldr	r2, [r7, #20]
 800e152:	429a      	cmp	r2, r3
 800e154:	dbe0      	blt.n	800e118 <SPI_ETH_WR_TX_REG_16+0x28>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800e156:	2300      	movs	r3, #0
 800e158:	e000      	b.n	800e15c <SPI_ETH_WR_TX_REG_16+0x6c>
	}
	else
	{
	return(1);
 800e15a:	2301      	movs	r3, #1
	}
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3718      	adds	r7, #24
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	460b      	mov	r3, r1
 800e16e:	70fb      	strb	r3, [r7, #3]
 800e170:	4613      	mov	r3, r2
 800e172:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	22f0      	movs	r2, #240	; 0xf0
 800e178:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_CR_ADDR_BASEH + s;
 800e17a:	78fb      	ldrb	r3, [r7, #3]
 800e17c:	3304      	adds	r3, #4
 800e17e:	b2da      	uxtb	r2, r3
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_CR_ADDR_BASEL ;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2201      	movs	r2, #1
 800e188:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	78ba      	ldrb	r2, [r7, #2]
 800e18e:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f7ff fe95 	bl	800dec0 <SPI_ETH>
}
 800e196:	bf00      	nop
 800e198:	4618      	mov	r0, r3
 800e19a:	3708      	adds	r7, #8
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}

0800e1a0 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b082      	sub	sp, #8
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	460b      	mov	r3, r1
 800e1aa:	70fb      	strb	r3, [r7, #3]
 800e1ac:	4613      	mov	r3, r2
 800e1ae:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	22f0      	movs	r2, #240	; 0xf0
 800e1b4:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_MR_ADDR_BASEH + s;
 800e1b6:	78fb      	ldrb	r3, [r7, #3]
 800e1b8:	3304      	adds	r3, #4
 800e1ba:	b2da      	uxtb	r2, r3
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_MR_ADDR_BASEL ;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	78ba      	ldrb	r2, [r7, #2]
 800e1ca:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f7ff fe77 	bl	800dec0 <SPI_ETH>
}
 800e1d2:	bf00      	nop
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3708      	adds	r7, #8
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <eth_init>:


uint8_t eth_init(struct W5100_SPI * ETH)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b084      	sub	sp, #16
 800e1e0:	af02      	add	r7, sp, #8
 800e1e2:	6078      	str	r0, [r7, #4]
	 SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1ea:	331c      	adds	r3, #28
 800e1ec:	2204      	movs	r2, #4
 800e1ee:	9201      	str	r2, [sp, #4]
 800e1f0:	9300      	str	r3, [sp, #0]
 800e1f2:	23f0      	movs	r3, #240	; 0xf0
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	2100      	movs	r1, #0
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f7ff fe88 	bl	800df0e <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-GATEWAY SET\r\n",strlen("\r\nETH-W5100-GATEWAY SET\r\n"));									//same for server and client
 800e1fe:	2119      	movs	r1, #25
 800e200:	482d      	ldr	r0, [pc, #180]	; (800e2b8 <eth_init+0xdc>)
 800e202:	f7f3 fba3 	bl	800194c <ITM0_Write>
	 SPI_ETH_REG(ETH, SUBR_ADDR_BASEH,SUBR_ADDR_BASEL,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e20c:	2204      	movs	r2, #4
 800e20e:	9201      	str	r2, [sp, #4]
 800e210:	9300      	str	r3, [sp, #0]
 800e212:	23f0      	movs	r3, #240	; 0xf0
 800e214:	2205      	movs	r2, #5
 800e216:	2100      	movs	r1, #0
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f7ff fe78 	bl	800df0e <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SUBNET SET\r\n",strlen("\r\nETH-W5100-SUBNET SET"));											//same for server and client
 800e21e:	2116      	movs	r1, #22
 800e220:	4826      	ldr	r0, [pc, #152]	; (800e2bc <eth_init+0xe0>)
 800e222:	f7f3 fb93 	bl	800194c <ITM0_Write>
	 SPI_ETH_REG(ETH, SHAR_ADDR_BASEH,SHAR_ADDR_BASEL,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e22c:	3304      	adds	r3, #4
 800e22e:	2206      	movs	r2, #6
 800e230:	9201      	str	r2, [sp, #4]
 800e232:	9300      	str	r3, [sp, #0]
 800e234:	23f0      	movs	r3, #240	; 0xf0
 800e236:	2209      	movs	r2, #9
 800e238:	2100      	movs	r1, #0
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f7ff fe67 	bl	800df0e <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-MAC SET\r\n",strlen("\r\nETH-W5100-MAC SET"));												//same for server and client
 800e240:	2113      	movs	r1, #19
 800e242:	481f      	ldr	r0, [pc, #124]	; (800e2c0 <eth_init+0xe4>)
 800e244:	f7f3 fb82 	bl	800194c <ITM0_Write>
	 SPI_ETH_REG(ETH, SIPR_ADDR_BASEH,SIPR_ADDR_BASEL,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e24e:	330a      	adds	r3, #10
 800e250:	2204      	movs	r2, #4
 800e252:	9201      	str	r2, [sp, #4]
 800e254:	9300      	str	r3, [sp, #0]
 800e256:	23f0      	movs	r3, #240	; 0xf0
 800e258:	220f      	movs	r2, #15
 800e25a:	2100      	movs	r1, #0
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f7ff fe56 	bl	800df0e <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-IP SET\r\n",strlen("\r\nETH-W5100-IP SET"));													//same for server and client
 800e262:	2112      	movs	r1, #18
 800e264:	4817      	ldr	r0, [pc, #92]	; (800e2c4 <eth_init+0xe8>)
 800e266:	f7f3 fb71 	bl	800194c <ITM0_Write>
	 SPI_ETH_REG(ETH, RMSR_ADDR_BASEH,RMSR_ADDR_BASEL,SPI_WRITE, &ETH->RMSR,1);												//same for server and client
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e270:	330e      	adds	r3, #14
 800e272:	2201      	movs	r2, #1
 800e274:	9201      	str	r2, [sp, #4]
 800e276:	9300      	str	r3, [sp, #0]
 800e278:	23f0      	movs	r3, #240	; 0xf0
 800e27a:	221a      	movs	r2, #26
 800e27c:	2100      	movs	r1, #0
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f7ff fe45 	bl	800df0e <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n")); 	//same for server and client
 800e284:	2128      	movs	r1, #40	; 0x28
 800e286:	4810      	ldr	r0, [pc, #64]	; (800e2c8 <eth_init+0xec>)
 800e288:	f7f3 fb60 	bl	800194c <ITM0_Write>
	 SPI_ETH_REG(ETH, TMSR_ADDR_BASEH,TMSR_ADDR_BASEL,SPI_WRITE, &ETH->TMSR,1);												//same for server and client
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e292:	330f      	adds	r3, #15
 800e294:	2201      	movs	r2, #1
 800e296:	9201      	str	r2, [sp, #4]
 800e298:	9300      	str	r3, [sp, #0]
 800e29a:	23f0      	movs	r3, #240	; 0xf0
 800e29c:	221b      	movs	r2, #27
 800e29e:	2100      	movs	r1, #0
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f7ff fe34 	bl	800df0e <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n"));		//same for server and client
 800e2a6:	2128      	movs	r1, #40	; 0x28
 800e2a8:	4808      	ldr	r0, [pc, #32]	; (800e2cc <eth_init+0xf0>)
 800e2aa:	f7f3 fb4f 	bl	800194c <ITM0_Write>

}
 800e2ae:	bf00      	nop
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3708      	adds	r7, #8
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}
 800e2b8:	08010bec 	.word	0x08010bec
 800e2bc:	08010c08 	.word	0x08010c08
 800e2c0:	08010c24 	.word	0x08010c24
 800e2c4:	08010c3c 	.word	0x08010c3c
 800e2c8:	08010c54 	.word	0x08010c54
 800e2cc:	08010c80 	.word	0x08010c80

0800e2d0 <eth_socket_init>:

uint8_t eth_socket_init(struct W5100_SPI * ETH, uint8_t socket)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b084      	sub	sp, #16
 800e2d4:	af02      	add	r7, sp, #8
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	460b      	mov	r3, r1
 800e2da:	70fb      	strb	r3, [r7, #3]
	 eth_wr_SOCKET_MODE(ETH,socket, MODE_TCP);																				//same for server and client
 800e2dc:	78fb      	ldrb	r3, [r7, #3]
 800e2de:	2201      	movs	r2, #1
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f7ff ff5c 	bl	800e1a0 <eth_wr_SOCKET_MODE>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP SET"));									//same for server and client
 800e2e8:	2119      	movs	r1, #25
 800e2ea:	4830      	ldr	r0, [pc, #192]	; (800e3ac <eth_socket_init+0xdc>)
 800e2ec:	f7f3 fb2e 	bl	800194c <ITM0_Write>
	 SPI_ETH_REG(ETH, S0_PORT_ADDR_BASELH,S0_PORT_ADDR_BASELL,SPI_WRITE, ETH->S0_PORT,2);									//same for server and client
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e2f6:	331a      	adds	r3, #26
 800e2f8:	2202      	movs	r2, #2
 800e2fa:	9201      	str	r2, [sp, #4]
 800e2fc:	9300      	str	r3, [sp, #0]
 800e2fe:	23f0      	movs	r3, #240	; 0xf0
 800e300:	2204      	movs	r2, #4
 800e302:	2104      	movs	r1, #4
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f7ff fe02 	bl	800df0e <SPI_ETH_REG>

	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
 800e30a:	212c      	movs	r1, #44	; 0x2c
 800e30c:	4828      	ldr	r0, [pc, #160]	; (800e3b0 <eth_socket_init+0xe0>)
 800e30e:	f7f3 fb1d 	bl	800194c <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x0C,SPI_WRITE, ETH->S0_DIPR,4);									// client
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e318:	331c      	adds	r3, #28
 800e31a:	2204      	movs	r2, #4
 800e31c:	9201      	str	r2, [sp, #4]
 800e31e:	9300      	str	r3, [sp, #0]
 800e320:	23f0      	movs	r3, #240	; 0xf0
 800e322:	220c      	movs	r2, #12
 800e324:	2104      	movs	r1, #4
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f7ff fdf1 	bl	800df0e <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 800e32c:	212e      	movs	r1, #46	; 0x2e
 800e32e:	4821      	ldr	r0, [pc, #132]	; (800e3b4 <eth_socket_init+0xe4>)
 800e330:	f7f3 fb0c 	bl	800194c <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x10,SPI_WRITE, ETH->S0_DPORT,2);									// client
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e33a:	2202      	movs	r2, #2
 800e33c:	9201      	str	r2, [sp, #4]
 800e33e:	9300      	str	r3, [sp, #0]
 800e340:	23f0      	movs	r3, #240	; 0xf0
 800e342:	2210      	movs	r2, #16
 800e344:	2104      	movs	r1, #4
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f7ff fde1 	bl	800df0e <SPI_ETH_REG>


	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 800e34c:	2120      	movs	r1, #32
 800e34e:	481a      	ldr	r0, [pc, #104]	; (800e3b8 <eth_socket_init+0xe8>)
 800e350:	f7f3 fafc 	bl	800194c <ITM0_Write>
	 eth_wr_SOCKET_CMD(ETH,socket, OPEN);																					//same for server and client
 800e354:	78fb      	ldrb	r3, [r7, #3]
 800e356:	2201      	movs	r2, #1
 800e358:	4619      	mov	r1, r3
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f7ff ff02 	bl	800e164 <eth_wr_SOCKET_CMD>
	 ITM0_Write("\r\nETH-W5100-OPEN SOCKET\r\n",strlen("\r\nETH-W5100-OPEN SOCKET\r\n"));									//same for server and client
 800e360:	2119      	movs	r1, #25
 800e362:	4816      	ldr	r0, [pc, #88]	; (800e3bc <eth_socket_init+0xec>)
 800e364:	f7f3 faf2 	bl	800194c <ITM0_Write>

	 if(ETH->S0_ENserver == 1)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e36e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e372:	2b01      	cmp	r3, #1
 800e374:	d10a      	bne.n	800e38c <eth_socket_init+0xbc>
	 {
		 eth_wr_SOCKET_CMD(ETH,socket, LISTEN);																				//only for server
 800e376:	78fb      	ldrb	r3, [r7, #3]
 800e378:	2202      	movs	r2, #2
 800e37a:	4619      	mov	r1, r3
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f7ff fef1 	bl	800e164 <eth_wr_SOCKET_CMD>
		 ITM0_Write("\r\nETH-W5100-LISTEN SOCKET\r\n",strlen("\r\nETH-W5100-LISTEN SOCKET\r\n"));							//only for server
 800e382:	211b      	movs	r1, #27
 800e384:	480e      	ldr	r0, [pc, #56]	; (800e3c0 <eth_socket_init+0xf0>)
 800e386:	f7f3 fae1 	bl	800194c <ITM0_Write>
 800e38a:	e009      	b.n	800e3a0 <eth_socket_init+0xd0>
	 }
	 else
	 {

		 	 eth_wr_SOCKET_CMD(ETH,socket, CONNECT);																				//only for server
 800e38c:	78fb      	ldrb	r3, [r7, #3]
 800e38e:	2204      	movs	r2, #4
 800e390:	4619      	mov	r1, r3
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f7ff fee6 	bl	800e164 <eth_wr_SOCKET_CMD>
			 ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));											//only fir server
 800e398:	2115      	movs	r1, #21
 800e39a:	480a      	ldr	r0, [pc, #40]	; (800e3c4 <eth_socket_init+0xf4>)
 800e39c:	f7f3 fad6 	bl	800194c <ITM0_Write>
	 }
}
 800e3a0:	bf00      	nop
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3708      	adds	r7, #8
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	08010cac 	.word	0x08010cac
 800e3b0:	08010cc8 	.word	0x08010cc8
 800e3b4:	08010cf8 	.word	0x08010cf8
 800e3b8:	08010d28 	.word	0x08010d28
 800e3bc:	08010d4c 	.word	0x08010d4c
 800e3c0:	08010d68 	.word	0x08010d68
 800e3c4:	08010d84 	.word	0x08010d84

0800e3c8 <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5100_SPI * y, uint8_t socket)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	220f      	movs	r2, #15
 800e3d8:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_SR_ADDR_BASEH + socket;
 800e3da:	78fb      	ldrb	r3, [r7, #3]
 800e3dc:	3304      	adds	r3, #4
 800e3de:	b2da      	uxtb	r2, r3
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_SR_ADDR_BASEL ;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2203      	movs	r2, #3
 800e3e8:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f7ff fd65 	bl	800dec0 <SPI_ETH>
	return(y->RX[3]);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	7edb      	ldrb	r3, [r3, #27]
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3708      	adds	r7, #8
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}

0800e402 <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5100_SPI * y, uint8_t socket)
{
 800e402:	b580      	push	{r7, lr}
 800e404:	b082      	sub	sp, #8
 800e406:	af00      	add	r7, sp, #0
 800e408:	6078      	str	r0, [r7, #4]
 800e40a:	460b      	mov	r3, r1
 800e40c:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	220f      	movs	r2, #15
 800e412:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_CR_ADDR_BASEH + socket;
 800e414:	78fb      	ldrb	r3, [r7, #3]
 800e416:	3304      	adds	r3, #4
 800e418:	b2da      	uxtb	r2, r3
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_CR_ADDR_BASEL ;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2201      	movs	r2, #1
 800e422:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2200      	movs	r2, #0
 800e428:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f7ff fd48 	bl	800dec0 <SPI_ETH>
	return(y->RX[3]);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	7edb      	ldrb	r3, [r3, #27]
}
 800e434:	4618      	mov	r0, r3
 800e436:	3708      	adds	r7, #8
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b08c      	sub	sp, #48	; 0x30
 800e440:	af02      	add	r7, sp, #8
 800e442:	60f8      	str	r0, [r7, #12]
 800e444:	607a      	str	r2, [r7, #4]
 800e446:	461a      	mov	r2, r3
 800e448:	460b      	mov	r3, r1
 800e44a:	72fb      	strb	r3, [r7, #11]
 800e44c:	4613      	mov	r3, r2
 800e44e:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e450:	2300      	movs	r3, #0
 800e452:	847b      	strh	r3, [r7, #34]	; 0x22
			 left_size=0,
 800e454:	2300      	movs	r3, #0
 800e456:	843b      	strh	r3, [r7, #32]
			 upper_size=0,
 800e458:	2300      	movs	r3, #0
 800e45a:	83fb      	strh	r3, [r7, #30]
			 destination_addr=0,
 800e45c:	2300      	movs	r3, #0
 800e45e:	83bb      	strh	r3, [r7, #28]
			 S0_RX_RD=0,
 800e460:	2300      	movs	r3, #0
 800e462:	837b      	strh	r3, [r7, #26]
			 S0_get_offset=0,
 800e464:	2300      	movs	r3, #0
 800e466:	833b      	strh	r3, [r7, #24]
			 S0_get_start_address=0,
 800e468:	2300      	movs	r3, #0
 800e46a:	82fb      	strh	r3, [r7, #22]
			 S0_mem_pointer=0,
 800e46c:	2300      	movs	r3, #0
 800e46e:	82bb      	strh	r3, [r7, #20]
			 RX_MASK=0,
 800e470:	2300      	movs	r3, #0
 800e472:	84fb      	strh	r3, [r7, #38]	; 0x26
			 RX_BASE=0;
 800e474:	2300      	movs	r3, #0
 800e476:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t spi_Data[2];

	switch (socket)
 800e478:	7afb      	ldrb	r3, [r7, #11]
 800e47a:	2b03      	cmp	r3, #3
 800e47c:	d83e      	bhi.n	800e4fc <eth_rd_SOCKET_DATA+0xc0>
 800e47e:	a201      	add	r2, pc, #4	; (adr r2, 800e484 <eth_rd_SOCKET_DATA+0x48>)
 800e480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e484:	0800e495 	.word	0x0800e495
 800e488:	0800e4af 	.word	0x0800e4af
 800e48c:	0800e4c9 	.word	0x0800e4c9
 800e490:	0800e4e3 	.word	0x0800e4e3
	{
		case 0 :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e49a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e49e:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e4aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e4ac:	e033      	b.n	800e516 <eth_rd_SOCKET_DATA+0xda>
		case 1 :
		{
			RX_MASK=ETH->gS1_RX_MASK;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4b4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800e4b8:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS1_RX_BASE;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4c0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e4c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e4c6:	e026      	b.n	800e516 <eth_rd_SOCKET_DATA+0xda>
		case 2 :
		{
			RX_MASK=ETH->gS2_RX_MASK;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e4d2:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS2_RX_BASE;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4da:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e4de:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e4e0:	e019      	b.n	800e516 <eth_rd_SOCKET_DATA+0xda>
		case 3 :
		{
			RX_MASK=ETH->gS3_RX_MASK;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4e8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800e4ec:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS3_RX_BASE;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e4f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e4fa:	e00c      	b.n	800e516 <eth_rd_SOCKET_DATA+0xda>
		default :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e502:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e506:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e50e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e512:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e514:	bf00      	nop
	}

	S0_RX_RD = SPI_ETH_REG(ETH, S0_RX_RD_ADDR_BASEHH + socket ,S0_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800e516:	7afb      	ldrb	r3, [r7, #11]
 800e518:	3304      	adds	r3, #4
 800e51a:	b2d9      	uxtb	r1, r3
 800e51c:	2302      	movs	r3, #2
 800e51e:	9301      	str	r3, [sp, #4]
 800e520:	f107 0310 	add.w	r3, r7, #16
 800e524:	9300      	str	r3, [sp, #0]
 800e526:	230f      	movs	r3, #15
 800e528:	2228      	movs	r2, #40	; 0x28
 800e52a:	68f8      	ldr	r0, [r7, #12]
 800e52c:	f7ff fcef 	bl	800df0e <SPI_ETH_REG>
 800e530:	4603      	mov	r3, r0
 800e532:	837b      	strh	r3, [r7, #26]
	S0_get_offset = S0_RX_RD & RX_MASK;
 800e534:	8b7a      	ldrh	r2, [r7, #26]
 800e536:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e538:	4013      	ands	r3, r2
 800e53a:	833b      	strh	r3, [r7, #24]
	S0_get_start_address  = RX_BASE + S0_get_offset;
 800e53c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e53e:	8b3b      	ldrh	r3, [r7, #24]
 800e540:	4413      	add	r3, r2
 800e542:	82fb      	strh	r3, [r7, #22]
	if((S0_get_offset  + sizedata )>(RX_MASK + 1))
 800e544:	8b3a      	ldrh	r2, [r7, #24]
 800e546:	893b      	ldrh	r3, [r7, #8]
 800e548:	441a      	add	r2, r3
 800e54a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e54c:	3301      	adds	r3, #1
 800e54e:	429a      	cmp	r2, r3
 800e550:	dd2c      	ble.n	800e5ac <eth_rd_SOCKET_DATA+0x170>
		{
			upper_size = (RX_MASK + 1) - S0_get_offset ;
 800e552:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e554:	8b3b      	ldrh	r3, [r7, #24]
 800e556:	1ad3      	subs	r3, r2, r3
 800e558:	b29b      	uxth	r3, r3
 800e55a:	3301      	adds	r3, #1
 800e55c:	83fb      	strh	r3, [r7, #30]
			SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	f103 021c 	add.w	r2, r3, #28
 800e564:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e566:	8af9      	ldrh	r1, [r7, #22]
 800e568:	8bfb      	ldrh	r3, [r7, #30]
 800e56a:	9300      	str	r3, [sp, #0]
 800e56c:	4603      	mov	r3, r0
 800e56e:	68f8      	ldr	r0, [r7, #12]
 800e570:	f7ff fd81 	bl	800e076 <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800e574:	8bba      	ldrh	r2, [r7, #28]
 800e576:	8bfb      	ldrh	r3, [r7, #30]
 800e578:	4413      	add	r3, r2
 800e57a:	83bb      	strh	r3, [r7, #28]
			left_size=sizedata-upper_size;
 800e57c:	893a      	ldrh	r2, [r7, #8]
 800e57e:	8bfb      	ldrh	r3, [r7, #30]
 800e580:	1ad3      	subs	r3, r2, r3
 800e582:	843b      	strh	r3, [r7, #32]
			S0_bf_rcv_offset=upper_size;
 800e584:	8bfb      	ldrh	r3, [r7, #30]
 800e586:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	f103 021c 	add.w	r2, r3, #28
 800e58e:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e590:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e592:	8c3b      	ldrh	r3, [r7, #32]
 800e594:	9300      	str	r3, [sp, #0]
 800e596:	4603      	mov	r3, r0
 800e598:	68f8      	ldr	r0, [r7, #12]
 800e59a:	f7ff fd6c 	bl	800e076 <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S0_RX_RD + sizedata;
 800e59e:	8b7a      	ldrh	r2, [r7, #26]
 800e5a0:	893b      	ldrh	r3, [r7, #8]
 800e5a2:	4413      	add	r3, r2
 800e5a4:	b29a      	uxth	r2, r3
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	801a      	strh	r2, [r3, #0]
 800e5aa:	e010      	b.n	800e5ce <eth_rd_SOCKET_DATA+0x192>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, sizedata);
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	f103 021c 	add.w	r2, r3, #28
 800e5b2:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e5b4:	8af9      	ldrh	r1, [r7, #22]
 800e5b6:	893b      	ldrh	r3, [r7, #8]
 800e5b8:	9300      	str	r3, [sp, #0]
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	68f8      	ldr	r0, [r7, #12]
 800e5be:	f7ff fd5a 	bl	800e076 <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S0_RX_RD + sizedata;
 800e5c2:	8b7a      	ldrh	r2, [r7, #26]
 800e5c4:	893b      	ldrh	r3, [r7, #8]
 800e5c6:	4413      	add	r3, r2
 800e5c8:	b29a      	uxth	r2, r3
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	b29b      	uxth	r3, r3
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3728      	adds	r7, #40	; 0x28
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
 800e5da:	bf00      	nop

0800e5dc <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b08c      	sub	sp, #48	; 0x30
 800e5e0:	af02      	add	r7, sp, #8
 800e5e2:	60f8      	str	r0, [r7, #12]
 800e5e4:	607a      	str	r2, [r7, #4]
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	460b      	mov	r3, r1
 800e5ea:	72fb      	strb	r3, [r7, #11]
 800e5ec:	4613      	mov	r3, r2
 800e5ee:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	843b      	strh	r3, [r7, #32]
			 left_size=0,
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	83fb      	strh	r3, [r7, #30]
			 upper_size=0,
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	83bb      	strh	r3, [r7, #28]
			 source_addr=0,
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	837b      	strh	r3, [r7, #26]
			 Sn_TX_WR=0,
 800e600:	2300      	movs	r3, #0
 800e602:	833b      	strh	r3, [r7, #24]
			 get_offset=0,
 800e604:	2300      	movs	r3, #0
 800e606:	82fb      	strh	r3, [r7, #22]
			 get_free_size=0,
 800e608:	2300      	movs	r3, #0
 800e60a:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800e60c:	2300      	movs	r3, #0
 800e60e:	82bb      	strh	r3, [r7, #20]
			 S0_mem_pointer=0,
 800e610:	2300      	movs	r3, #0
 800e612:	827b      	strh	r3, [r7, #18]
			 TX_MASK=0,
 800e614:	2300      	movs	r3, #0
 800e616:	84bb      	strh	r3, [r7, #36]	; 0x24
			 TX_BASE=0;
 800e618:	2300      	movs	r3, #0
 800e61a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t spi_Data[2];

	switch (socket)
 800e61c:	7afb      	ldrb	r3, [r7, #11]
 800e61e:	2b03      	cmp	r3, #3
 800e620:	d83e      	bhi.n	800e6a0 <eth_wr_SOCKET_DATA+0xc4>
 800e622:	a201      	add	r2, pc, #4	; (adr r2, 800e628 <eth_wr_SOCKET_DATA+0x4c>)
 800e624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e628:	0800e639 	.word	0x0800e639
 800e62c:	0800e653 	.word	0x0800e653
 800e630:	0800e66d 	.word	0x0800e66d
 800e634:	0800e687 	.word	0x0800e687
	{
		case 0 :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e63e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e642:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e64a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e64e:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e650:	e033      	b.n	800e6ba <eth_wr_SOCKET_DATA+0xde>
		case 1 :
		{
			TX_MASK=ETH->gS1_TX_MASK;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e658:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e65c:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS1_TX_BASE;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e664:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e668:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e66a:	e026      	b.n	800e6ba <eth_wr_SOCKET_DATA+0xde>
		case 2 :
		{
			TX_MASK=ETH->gS2_TX_MASK;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e672:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e676:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS2_TX_BASE;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e67e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e682:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e684:	e019      	b.n	800e6ba <eth_wr_SOCKET_DATA+0xde>
		case 3 :
		{
			TX_MASK=ETH->gS3_TX_MASK;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e68c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e690:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS3_TX_BASE;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e698:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e69c:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e69e:	e00c      	b.n	800e6ba <eth_wr_SOCKET_DATA+0xde>
		default :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e6aa:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e6b6:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e6b8:	bf00      	nop
	}

	while(get_free_size<send_size)
 800e6ba:	e00e      	b.n	800e6da <eth_wr_SOCKET_DATA+0xfe>
			{
				get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S0_TX_FSR	=   0x420,
 800e6bc:	7afb      	ldrb	r3, [r7, #11]
 800e6be:	3304      	adds	r3, #4
 800e6c0:	b2d9      	uxtb	r1, r3
 800e6c2:	2302      	movs	r3, #2
 800e6c4:	9301      	str	r3, [sp, #4]
 800e6c6:	f107 0310 	add.w	r3, r7, #16
 800e6ca:	9300      	str	r3, [sp, #0]
 800e6cc:	230f      	movs	r3, #15
 800e6ce:	2220      	movs	r2, #32
 800e6d0:	68f8      	ldr	r0, [r7, #12]
 800e6d2:	f7ff fc1c 	bl	800df0e <SPI_ETH_REG>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800e6da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e6dc:	893b      	ldrh	r3, [r7, #8]
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d3ec      	bcc.n	800e6bc <eth_wr_SOCKET_DATA+0xe0>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S0_TX_RD =   0x424,
 800e6e2:	7afb      	ldrb	r3, [r7, #11]
 800e6e4:	3304      	adds	r3, #4
 800e6e6:	b2d9      	uxtb	r1, r3
 800e6e8:	2302      	movs	r3, #2
 800e6ea:	9301      	str	r3, [sp, #4]
 800e6ec:	f107 0310 	add.w	r3, r7, #16
 800e6f0:	9300      	str	r3, [sp, #0]
 800e6f2:	230f      	movs	r3, #15
 800e6f4:	2224      	movs	r2, #36	; 0x24
 800e6f6:	68f8      	ldr	r0, [r7, #12]
 800e6f8:	f7ff fc09 	bl	800df0e <SPI_ETH_REG>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	833b      	strh	r3, [r7, #24]
				get_offset= Sn_TX_WR & TX_MASK;
 800e700:	8b3a      	ldrh	r2, [r7, #24]
 800e702:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e704:	4013      	ands	r3, r2
 800e706:	82fb      	strh	r3, [r7, #22]
				get_start_address=TX_BASE + get_offset;
 800e708:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e70a:	8afb      	ldrh	r3, [r7, #22]
 800e70c:	4413      	add	r3, r2
 800e70e:	82bb      	strh	r3, [r7, #20]

				if((get_offset + send_size)>(TX_MASK + 1))
 800e710:	8afa      	ldrh	r2, [r7, #22]
 800e712:	893b      	ldrh	r3, [r7, #8]
 800e714:	441a      	add	r2, r3
 800e716:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e718:	3301      	adds	r3, #1
 800e71a:	429a      	cmp	r2, r3
 800e71c:	dd2c      	ble.n	800e778 <eth_wr_SOCKET_DATA+0x19c>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800e71e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e720:	8afb      	ldrh	r3, [r7, #22]
 800e722:	1ad3      	subs	r3, r2, r3
 800e724:	b29b      	uxth	r3, r3
 800e726:	3301      	adds	r3, #1
 800e728:	83bb      	strh	r3, [r7, #28]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f103 021c 	add.w	r2, r3, #28
 800e730:	8c38      	ldrh	r0, [r7, #32]
 800e732:	8ab9      	ldrh	r1, [r7, #20]
 800e734:	8bbb      	ldrh	r3, [r7, #28]
 800e736:	9300      	str	r3, [sp, #0]
 800e738:	4603      	mov	r3, r0
 800e73a:	68f8      	ldr	r0, [r7, #12]
 800e73c:	f7ff fcd8 	bl	800e0f0 <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800e740:	8b7a      	ldrh	r2, [r7, #26]
 800e742:	8bbb      	ldrh	r3, [r7, #28]
 800e744:	4413      	add	r3, r2
 800e746:	837b      	strh	r3, [r7, #26]
						left_size=send_size-upper_size;
 800e748:	893a      	ldrh	r2, [r7, #8]
 800e74a:	8bbb      	ldrh	r3, [r7, #28]
 800e74c:	1ad3      	subs	r3, r2, r3
 800e74e:	83fb      	strh	r3, [r7, #30]
						S0_bf_rcv_offset=upper_size;
 800e750:	8bbb      	ldrh	r3, [r7, #28]
 800e752:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	f103 021c 	add.w	r2, r3, #28
 800e75a:	8c38      	ldrh	r0, [r7, #32]
 800e75c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800e75e:	8bfb      	ldrh	r3, [r7, #30]
 800e760:	9300      	str	r3, [sp, #0]
 800e762:	4603      	mov	r3, r0
 800e764:	68f8      	ldr	r0, [r7, #12]
 800e766:	f7ff fcc3 	bl	800e0f0 <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800e76a:	8b3a      	ldrh	r2, [r7, #24]
 800e76c:	893b      	ldrh	r3, [r7, #8]
 800e76e:	4413      	add	r3, r2
 800e770:	b29a      	uxth	r2, r3
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	801a      	strh	r2, [r3, #0]
 800e776:	e010      	b.n	800e79a <eth_wr_SOCKET_DATA+0x1be>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, send_size);
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f103 021c 	add.w	r2, r3, #28
 800e77e:	8c38      	ldrh	r0, [r7, #32]
 800e780:	8ab9      	ldrh	r1, [r7, #20]
 800e782:	893b      	ldrh	r3, [r7, #8]
 800e784:	9300      	str	r3, [sp, #0]
 800e786:	4603      	mov	r3, r0
 800e788:	68f8      	ldr	r0, [r7, #12]
 800e78a:	f7ff fcb1 	bl	800e0f0 <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800e78e:	8b3a      	ldrh	r2, [r7, #24]
 800e790:	893b      	ldrh	r3, [r7, #8]
 800e792:	4413      	add	r3, r2
 800e794:	b29a      	uxth	r2, r3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	801a      	strh	r2, [r3, #0]
					}

}
 800e79a:	bf00      	nop
 800e79c:	4618      	mov	r0, r3
 800e79e:	3728      	adds	r7, #40	; 0x28
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int tf)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b090      	sub	sp, #64	; 0x40
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	607a      	str	r2, [r7, #4]
 800e7b0:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	637b      	str	r3, [r7, #52]	; 0x34
 800e7be:	2300      	movs	r3, #0
 800e7c0:	633b      	str	r3, [r7, #48]	; 0x30
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	623b      	str	r3, [r7, #32]
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	61fb      	str	r3, [r7, #28]
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	61bb      	str	r3, [r7, #24]
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	617b      	str	r3, [r7, #20]
 800e7da:	2300      	movs	r3, #0
 800e7dc:	627b      	str	r3, [r7, #36]	; 0x24
 800e7de:	2300      	movs	r3, #0
 800e7e0:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	623b      	str	r3, [r7, #32]
	lngb=*bn;
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	61fb      	str	r3, [r7, #28]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800e7ee:	6a3a      	ldr	r2, [r7, #32]
 800e7f0:	69fb      	ldr	r3, [r7, #28]
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	f2c0 82fe 	blt.w	800edf4 <FT_String_ND+0x650>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800e7fc:	e00c      	b.n	800e818 <FT_String_ND+0x74>
							{
								n++;
 800e7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e800:	3301      	adds	r3, #1
 800e802:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800e804:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e806:	69fb      	ldr	r3, [r7, #28]
 800e808:	441a      	add	r2, r3
 800e80a:	6a3b      	ldr	r3, [r7, #32]
 800e80c:	3301      	adds	r3, #1
 800e80e:	429a      	cmp	r2, r3
 800e810:	dd02      	ble.n	800e818 <FT_String_ND+0x74>
								{
									estado=0;
 800e812:	2300      	movs	r3, #0
 800e814:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800e816:	e009      	b.n	800e82c <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800e818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e81a:	68fa      	ldr	r2, [r7, #12]
 800e81c:	4413      	add	r3, r2
 800e81e:	781a      	ldrb	r2, [r3, #0]
 800e820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e822:	6879      	ldr	r1, [r7, #4]
 800e824:	440b      	add	r3, r1
 800e826:	781b      	ldrb	r3, [r3, #0]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d1e8      	bne.n	800e7fe <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800e82c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e82e:	3301      	adds	r3, #1
 800e830:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800e832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e834:	3301      	adds	r3, #1
 800e836:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800e838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e83a:	69fb      	ldr	r3, [r7, #28]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d108      	bne.n	800e852 <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800e840:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e842:	69fb      	ldr	r3, [r7, #28]
 800e844:	1ad3      	subs	r3, r2, r3
 800e846:	1c5a      	adds	r2, r3, #1
 800e848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e84a:	601a      	str	r2, [r3, #0]
									estado=1;
 800e84c:	2301      	movs	r3, #1
 800e84e:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800e850:	e010      	b.n	800e874 <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800e852:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e854:	69fb      	ldr	r3, [r7, #28]
 800e856:	429a      	cmp	r2, r3
 800e858:	dd02      	ble.n	800e860 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800e85a:	2300      	movs	r3, #0
 800e85c:	627b      	str	r3, [r7, #36]	; 0x24
									 break;
 800e85e:	e009      	b.n	800e874 <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800e860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e862:	68fa      	ldr	r2, [r7, #12]
 800e864:	4413      	add	r3, r2
 800e866:	781a      	ldrb	r2, [r3, #0]
 800e868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e86a:	6879      	ldr	r1, [r7, #4]
 800e86c:	440b      	add	r3, r1
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	429a      	cmp	r2, r3
 800e872:	d0db      	beq.n	800e82c <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800e874:	69fb      	ldr	r3, [r7, #28]
 800e876:	1e5a      	subs	r2, r3, #1
 800e878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e87a:	4413      	add	r3, r2
 800e87c:	6a3a      	ldr	r2, [r7, #32]
 800e87e:	429a      	cmp	r2, r3
 800e880:	dd02      	ble.n	800e888 <FT_String_ND+0xe4>
 800e882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e884:	2b01      	cmp	r3, #1
 800e886:	d1b7      	bne.n	800e7f8 <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800e888:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d101      	bne.n	800e892 <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800e88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e890:	e2b1      	b.n	800edf6 <FT_String_ND+0x652>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800e892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e894:	2b01      	cmp	r3, #1
 800e896:	d12c      	bne.n	800e8f2 <FT_String_ND+0x14e>
 800e898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89a:	2b01      	cmp	r3, #1
 800e89c:	d129      	bne.n	800e8f2 <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800e89e:	e014      	b.n	800e8ca <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800e8a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8a2:	681a      	ldr	r2, [r3, #0]
 800e8a4:	69fb      	ldr	r3, [r7, #28]
 800e8a6:	441a      	add	r2, r3
 800e8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8aa:	4413      	add	r3, r2
 800e8ac:	3b01      	subs	r3, #1
 800e8ae:	68fa      	ldr	r2, [r7, #12]
 800e8b0:	441a      	add	r2, r3
 800e8b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8b4:	6819      	ldr	r1, [r3, #0]
 800e8b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8b8:	440b      	add	r3, r1
 800e8ba:	3b01      	subs	r3, #1
 800e8bc:	68f9      	ldr	r1, [r7, #12]
 800e8be:	440b      	add	r3, r1
 800e8c0:	7812      	ldrb	r2, [r2, #0]
 800e8c2:	701a      	strb	r2, [r3, #0]
										n3++;
 800e8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800e8ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8cc:	681a      	ldr	r2, [r3, #0]
 800e8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d0:	441a      	add	r2, r3
 800e8d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8d4:	4413      	add	r3, r2
 800e8d6:	6a3a      	ldr	r2, [r7, #32]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	dae1      	bge.n	800e8a0 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800e8dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8de:	681a      	ldr	r2, [r3, #0]
 800e8e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8e2:	4413      	add	r3, r2
 800e8e4:	1e5a      	subs	r2, r3, #1
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	601a      	str	r2, [r3, #0]
							estado=3;
 800e8ea:	2303      	movs	r3, #3
 800e8ec:	627b      	str	r3, [r7, #36]	; 0x24
							return(estado);
 800e8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f0:	e281      	b.n	800edf6 <FT_String_ND+0x652>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800e8f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e8f4:	2b02      	cmp	r3, #2
 800e8f6:	f040 80b6 	bne.w	800ea66 <FT_String_ND+0x2c2>
 800e8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	f040 80b2 	bne.w	800ea66 <FT_String_ND+0x2c2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e902:	e012      	b.n	800e92a <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e904:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e906:	69fb      	ldr	r3, [r7, #28]
 800e908:	1ad2      	subs	r2, r2, r3
 800e90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90c:	4413      	add	r3, r2
 800e90e:	461a      	mov	r2, r3
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	441a      	add	r2, r3
 800e914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e916:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e918:	440b      	add	r3, r1
 800e91a:	7812      	ldrb	r2, [r2, #0]
 800e91c:	701a      	strb	r2, [r3, #0]
								n4++;
 800e91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e920:	3301      	adds	r3, #1
 800e922:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800e924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e928:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e92a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e92c:	69fb      	ldr	r3, [r7, #28]
 800e92e:	1ad2      	subs	r2, r2, r3
 800e930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e932:	4413      	add	r3, r2
 800e934:	6a3a      	ldr	r2, [r7, #32]
 800e936:	429a      	cmp	r2, r3
 800e938:	dae4      	bge.n	800e904 <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800e93a:	499e      	ldr	r1, [pc, #632]	; (800ebb4 <FT_String_ND+0x410>)
 800e93c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e93e:	f000 fcfd 	bl	800f33c <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800e942:	499d      	ldr	r1, [pc, #628]	; (800ebb8 <FT_String_ND+0x414>)
 800e944:	2000      	movs	r0, #0
 800e946:	f000 fcf9 	bl	800f33c <strtok>
 800e94a:	4603      	mov	r3, r0
 800e94c:	4618      	mov	r0, r3
 800e94e:	f000 fada 	bl	800ef06 <atoi>
 800e952:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e956:	3306      	adds	r3, #6
 800e958:	222c      	movs	r2, #44	; 0x2c
 800e95a:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e95c:	69bb      	ldr	r3, [r7, #24]
 800e95e:	2b09      	cmp	r3, #9
 800e960:	dc0d      	bgt.n	800e97e <FT_String_ND+0x1da>
											{
												c[8]=':';
 800e962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e964:	3308      	adds	r3, #8
 800e966:	223a      	movs	r2, #58	; 0x3a
 800e968:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800e96a:	69bb      	ldr	r3, [r7, #24]
 800e96c:	3309      	adds	r3, #9
 800e96e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e970:	4413      	add	r3, r2
 800e972:	2200      	movs	r2, #0
 800e974:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800e976:	69bb      	ldr	r3, [r7, #24]
 800e978:	3309      	adds	r3, #9
 800e97a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e97c:	e021      	b.n	800e9c2 <FT_String_ND+0x21e>
											}
											else{
														if (lngd< 100)
 800e97e:	69bb      	ldr	r3, [r7, #24]
 800e980:	2b63      	cmp	r3, #99	; 0x63
 800e982:	dc0d      	bgt.n	800e9a0 <FT_String_ND+0x1fc>
														{
															c[9]=':';
 800e984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e986:	3309      	adds	r3, #9
 800e988:	223a      	movs	r2, #58	; 0x3a
 800e98a:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800e98c:	69bb      	ldr	r3, [r7, #24]
 800e98e:	330a      	adds	r3, #10
 800e990:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e992:	4413      	add	r3, r2
 800e994:	2200      	movs	r2, #0
 800e996:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800e998:	69bb      	ldr	r3, [r7, #24]
 800e99a:	330a      	adds	r3, #10
 800e99c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e99e:	e010      	b.n	800e9c2 <FT_String_ND+0x21e>
														}
														else
														{
														if (lngd < 1000)
 800e9a0:	69bb      	ldr	r3, [r7, #24]
 800e9a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e9a6:	da0c      	bge.n	800e9c2 <FT_String_ND+0x21e>
														{
															c[10]=':';
 800e9a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9aa:	330a      	adds	r3, #10
 800e9ac:	223a      	movs	r2, #58	; 0x3a
 800e9ae:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800e9b0:	69bb      	ldr	r3, [r7, #24]
 800e9b2:	330b      	adds	r3, #11
 800e9b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e9b6:	4413      	add	r3, r2
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800e9bc:	69bb      	ldr	r3, [r7, #24]
 800e9be:	330b      	adds	r3, #11
 800e9c0:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800e9c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9c6:	601a      	str	r2, [r3, #0]
							n4=0;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e9cc:	e016      	b.n	800e9fc <FT_String_ND+0x258>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e9ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9d0:	69fb      	ldr	r3, [r7, #28]
 800e9d2:	1ad2      	subs	r2, r2, r3
 800e9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d6:	441a      	add	r2, r3
 800e9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9da:	4413      	add	r3, r2
 800e9dc:	461a      	mov	r2, r3
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	441a      	add	r2, r3
 800e9e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e9e4:	69fb      	ldr	r3, [r7, #28]
 800e9e6:	1ac9      	subs	r1, r1, r3
 800e9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ea:	440b      	add	r3, r1
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	440b      	add	r3, r1
 800e9f2:	7812      	ldrb	r2, [r2, #0]
 800e9f4:	701a      	strb	r2, [r3, #0]
								n4++;
 800e9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f8:	3301      	adds	r3, #1
 800e9fa:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e9fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9fe:	69fb      	ldr	r3, [r7, #28]
 800ea00:	1ad2      	subs	r2, r2, r3
 800ea02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea04:	441a      	add	r2, r3
 800ea06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea08:	4413      	add	r3, r2
 800ea0a:	6a3a      	ldr	r2, [r7, #32]
 800ea0c:	429a      	cmp	r2, r3
 800ea0e:	dade      	bge.n	800e9ce <FT_String_ND+0x22a>
							}
							*an=n+n4-lngb-1;
 800ea10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea14:	441a      	add	r2, r3
 800ea16:	69fb      	ldr	r3, [r7, #28]
 800ea18:	1ad3      	subs	r3, r2, r3
 800ea1a:	1e5a      	subs	r2, r3, #1
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800ea20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea22:	69fb      	ldr	r3, [r7, #28]
 800ea24:	1ad2      	subs	r2, r2, r3
 800ea26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea28:	441a      	add	r2, r3
 800ea2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea2c:	4413      	add	r3, r2
 800ea2e:	461a      	mov	r2, r3
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	4413      	add	r3, r2
 800ea34:	2200      	movs	r2, #0
 800ea36:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800ea38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea3a:	69fb      	ldr	r3, [r7, #28]
 800ea3c:	1ad2      	subs	r2, r2, r3
 800ea3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea40:	4413      	add	r3, r2
 800ea42:	461a      	mov	r2, r3
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	4413      	add	r3, r2
 800ea48:	2200      	movs	r2, #0
 800ea4a:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800ea4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea4e:	69fb      	ldr	r3, [r7, #28]
 800ea50:	1ad2      	subs	r2, r2, r3
 800ea52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea56:	440b      	add	r3, r1
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d102      	bne.n	800ea62 <FT_String_ND+0x2be>
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	701a      	strb	r2, [r3, #0]
							estado=3;
 800ea62:	2303      	movs	r3, #3
 800ea64:	627b      	str	r3, [r7, #36]	; 0x24

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800ea66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea68:	2b03      	cmp	r3, #3
 800ea6a:	d146      	bne.n	800eafa <FT_String_ND+0x356>
 800ea6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea6e:	2b01      	cmp	r3, #1
 800ea70:	d143      	bne.n	800eafa <FT_String_ND+0x356>
						{
						n3=0;
 800ea72:	2300      	movs	r3, #0
 800ea74:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800ea76:	e00e      	b.n	800ea96 <FT_String_ND+0x2f2>
									{
										c[n3]=a[*ubicacion+n3-1];
 800ea78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea7a:	681a      	ldr	r2, [r3, #0]
 800ea7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea7e:	4413      	add	r3, r2
 800ea80:	3b01      	subs	r3, #1
 800ea82:	68fa      	ldr	r2, [r7, #12]
 800ea84:	441a      	add	r2, r3
 800ea86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea88:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ea8a:	440b      	add	r3, r1
 800ea8c:	7812      	ldrb	r2, [r2, #0]
 800ea8e:	701a      	strb	r2, [r3, #0]
										n3++;
 800ea90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea92:	3301      	adds	r3, #1
 800ea94:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800ea96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea98:	69fb      	ldr	r3, [r7, #28]
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	dbec      	blt.n	800ea78 <FT_String_ND+0x2d4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800eaa2:	e014      	b.n	800eace <FT_String_ND+0x32a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800eaa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eaa6:	681a      	ldr	r2, [r3, #0]
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	441a      	add	r2, r3
 800eaac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaae:	4413      	add	r3, r2
 800eab0:	3b01      	subs	r3, #1
 800eab2:	68fa      	ldr	r2, [r7, #12]
 800eab4:	441a      	add	r2, r3
 800eab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eab8:	6819      	ldr	r1, [r3, #0]
 800eaba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eabc:	440b      	add	r3, r1
 800eabe:	3b01      	subs	r3, #1
 800eac0:	68f9      	ldr	r1, [r7, #12]
 800eac2:	440b      	add	r3, r1
 800eac4:	7812      	ldrb	r2, [r2, #0]
 800eac6:	701a      	strb	r2, [r3, #0]
										n5++;
 800eac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaca:	3301      	adds	r3, #1
 800eacc:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800eace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	69fb      	ldr	r3, [r7, #28]
 800ead4:	441a      	add	r2, r3
 800ead6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead8:	441a      	add	r2, r3
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	429a      	cmp	r2, r3
 800eae0:	dde0      	ble.n	800eaa4 <FT_String_ND+0x300>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800eae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eae4:	681a      	ldr	r2, [r3, #0]
 800eae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae8:	4413      	add	r3, r2
 800eaea:	1e5a      	subs	r2, r3, #1
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800eaf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eaf4:	601a      	str	r2, [r3, #0]
							estado=3;
 800eaf6:	2303      	movs	r3, #3
 800eaf8:	627b      	str	r3, [r7, #36]	; 0x24
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800eafa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eafc:	2b04      	cmp	r3, #4
 800eafe:	f040 80b6 	bne.w	800ec6e <FT_String_ND+0x4ca>
 800eb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb04:	2b01      	cmp	r3, #1
 800eb06:	f040 80b2 	bne.w	800ec6e <FT_String_ND+0x4ca>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800eb0a:	e012      	b.n	800eb32 <FT_String_ND+0x38e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800eb0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb0e:	69fb      	ldr	r3, [r7, #28]
 800eb10:	1ad2      	subs	r2, r2, r3
 800eb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb14:	4413      	add	r3, r2
 800eb16:	461a      	mov	r2, r3
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	441a      	add	r2, r3
 800eb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb1e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eb20:	440b      	add	r3, r1
 800eb22:	7812      	ldrb	r2, [r2, #0]
 800eb24:	701a      	strb	r2, [r3, #0]
								n4++;
 800eb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb28:	3301      	adds	r3, #1
 800eb2a:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800eb2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb30:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800eb32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb34:	69fb      	ldr	r3, [r7, #28]
 800eb36:	1ad2      	subs	r2, r2, r3
 800eb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb3a:	4413      	add	r3, r2
 800eb3c:	6a3a      	ldr	r2, [r7, #32]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	dae4      	bge.n	800eb0c <FT_String_ND+0x368>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800eb42:	491c      	ldr	r1, [pc, #112]	; (800ebb4 <FT_String_ND+0x410>)
 800eb44:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800eb46:	f000 fbf9 	bl	800f33c <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800eb4a:	491b      	ldr	r1, [pc, #108]	; (800ebb8 <FT_String_ND+0x414>)
 800eb4c:	2000      	movs	r0, #0
 800eb4e:	f000 fbf5 	bl	800f33c <strtok>
 800eb52:	4603      	mov	r3, r0
 800eb54:	4618      	mov	r0, r3
 800eb56:	f000 f9d6 	bl	800ef06 <atoi>
 800eb5a:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800eb5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb5e:	3306      	adds	r3, #6
 800eb60:	222c      	movs	r2, #44	; 0x2c
 800eb62:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800eb64:	69bb      	ldr	r3, [r7, #24]
 800eb66:	2b09      	cmp	r3, #9
 800eb68:	dc07      	bgt.n	800eb7a <FT_String_ND+0x3d6>
											{
												c[8]=':';
 800eb6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb6c:	3308      	adds	r3, #8
 800eb6e:	223a      	movs	r2, #58	; 0x3a
 800eb70:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800eb72:	69bb      	ldr	r3, [r7, #24]
 800eb74:	3309      	adds	r3, #9
 800eb76:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb78:	e015      	b.n	800eba6 <FT_String_ND+0x402>
											}
											else{
														if (lngd< 100)
 800eb7a:	69bb      	ldr	r3, [r7, #24]
 800eb7c:	2b63      	cmp	r3, #99	; 0x63
 800eb7e:	dc07      	bgt.n	800eb90 <FT_String_ND+0x3ec>
														{
															c[9]=':';
 800eb80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb82:	3309      	adds	r3, #9
 800eb84:	223a      	movs	r2, #58	; 0x3a
 800eb86:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800eb88:	69bb      	ldr	r3, [r7, #24]
 800eb8a:	330a      	adds	r3, #10
 800eb8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb8e:	e00a      	b.n	800eba6 <FT_String_ND+0x402>
														}
														else
														{
														if (lngd < 1000)
 800eb90:	69bb      	ldr	r3, [r7, #24]
 800eb92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eb96:	da06      	bge.n	800eba6 <FT_String_ND+0x402>
														{
															c[10]=':';
 800eb98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb9a:	330a      	adds	r3, #10
 800eb9c:	223a      	movs	r2, #58	; 0x3a
 800eb9e:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800eba0:	69bb      	ldr	r3, [r7, #24]
 800eba2:	330b      	adds	r3, #11
 800eba4:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800eba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebaa:	601a      	str	r2, [r3, #0]
							n4=0;
 800ebac:	2300      	movs	r3, #0
 800ebae:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ebb0:	e01b      	b.n	800ebea <FT_String_ND+0x446>
 800ebb2:	bf00      	nop
 800ebb4:	08010d9c 	.word	0x08010d9c
 800ebb8:	08010da0 	.word	0x08010da0
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ebbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebbe:	69fb      	ldr	r3, [r7, #28]
 800ebc0:	1ad2      	subs	r2, r2, r3
 800ebc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc4:	441a      	add	r2, r3
 800ebc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc8:	4413      	add	r3, r2
 800ebca:	461a      	mov	r2, r3
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	441a      	add	r2, r3
 800ebd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ebd2:	69fb      	ldr	r3, [r7, #28]
 800ebd4:	1ac9      	subs	r1, r1, r3
 800ebd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd8:	440b      	add	r3, r1
 800ebda:	4619      	mov	r1, r3
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	440b      	add	r3, r1
 800ebe0:	7812      	ldrb	r2, [r2, #0]
 800ebe2:	701a      	strb	r2, [r3, #0]
								n4++;
 800ebe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ebea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebec:	69fb      	ldr	r3, [r7, #28]
 800ebee:	1ad2      	subs	r2, r2, r3
 800ebf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf2:	441a      	add	r2, r3
 800ebf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf6:	4413      	add	r3, r2
 800ebf8:	6a3a      	ldr	r2, [r7, #32]
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	dade      	bge.n	800ebbc <FT_String_ND+0x418>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800ebfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec02:	441a      	add	r2, r3
 800ec04:	69fb      	ldr	r3, [r7, #28]
 800ec06:	1ad3      	subs	r3, r2, r3
 800ec08:	1e5a      	subs	r2, r3, #1
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	601a      	str	r2, [r3, #0]
							n5=0;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ec12:	e00f      	b.n	800ec34 <FT_String_ND+0x490>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800ec14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec16:	69bb      	ldr	r3, [r7, #24]
 800ec18:	1ad2      	subs	r2, r2, r3
 800ec1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1c:	4413      	add	r3, r2
 800ec1e:	461a      	mov	r2, r3
 800ec20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec22:	441a      	add	r2, r3
 800ec24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec26:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ec28:	440b      	add	r3, r1
 800ec2a:	7812      	ldrb	r2, [r2, #0]
 800ec2c:	701a      	strb	r2, [r3, #0]
								n5++;
 800ec2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec30:	3301      	adds	r3, #1
 800ec32:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ec34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec36:	69bb      	ldr	r3, [r7, #24]
 800ec38:	1ad2      	subs	r2, r2, r3
 800ec3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3c:	441a      	add	r2, r3
 800ec3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	429a      	cmp	r2, r3
 800ec44:	dbe6      	blt.n	800ec14 <FT_String_ND+0x470>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800ec46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec4a:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800ec4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec4e:	681a      	ldr	r2, [r3, #0]
 800ec50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec52:	441a      	add	r2, r3
 800ec54:	69bb      	ldr	r3, [r7, #24]
 800ec56:	1ad2      	subs	r2, r2, r3
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	4413      	add	r3, r2
 800ec5e:	6a3a      	ldr	r2, [r7, #32]
 800ec60:	429a      	cmp	r2, r3
 800ec62:	d102      	bne.n	800ec6a <FT_String_ND+0x4c6>
							{
								estado=4;
 800ec64:	2304      	movs	r3, #4
 800ec66:	627b      	str	r3, [r7, #36]	; 0x24
 800ec68:	e001      	b.n	800ec6e <FT_String_ND+0x4ca>

							}
							else
							{
								estado=5;
 800ec6a:	2305      	movs	r3, #5
 800ec6c:	627b      	str	r3, [r7, #36]	; 0x24
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800ec6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec70:	2b05      	cmp	r3, #5
 800ec72:	f040 80bd 	bne.w	800edf0 <FT_String_ND+0x64c>
 800ec76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	f040 80b9 	bne.w	800edf0 <FT_String_ND+0x64c>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ec7e:	e012      	b.n	800eca6 <FT_String_ND+0x502>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800ec80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec82:	69fb      	ldr	r3, [r7, #28]
 800ec84:	1ad2      	subs	r2, r2, r3
 800ec86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec88:	4413      	add	r3, r2
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	441a      	add	r2, r3
 800ec90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec92:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ec94:	440b      	add	r3, r1
 800ec96:	7812      	ldrb	r2, [r2, #0]
 800ec98:	701a      	strb	r2, [r3, #0]
								n4++;
 800ec9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800eca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eca4:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800eca6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eca8:	69fb      	ldr	r3, [r7, #28]
 800ecaa:	1ad2      	subs	r2, r2, r3
 800ecac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecae:	4413      	add	r3, r2
 800ecb0:	6a3a      	ldr	r2, [r7, #32]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	dae4      	bge.n	800ec80 <FT_String_ND+0x4dc>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800ecb6:	4952      	ldr	r1, [pc, #328]	; (800ee00 <FT_String_ND+0x65c>)
 800ecb8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ecba:	f000 fb3f 	bl	800f33c <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800ecbe:	4951      	ldr	r1, [pc, #324]	; (800ee04 <FT_String_ND+0x660>)
 800ecc0:	2000      	movs	r0, #0
 800ecc2:	f000 fb3b 	bl	800f33c <strtok>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f000 f91c 	bl	800ef06 <atoi>
 800ecce:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800ecd0:	494c      	ldr	r1, [pc, #304]	; (800ee04 <FT_String_ND+0x660>)
 800ecd2:	2000      	movs	r0, #0
 800ecd4:	f000 fb32 	bl	800f33c <strtok>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f000 f913 	bl	800ef06 <atoi>
 800ece0:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800ece2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ece4:	3306      	adds	r3, #6
 800ece6:	222c      	movs	r2, #44	; 0x2c
 800ece8:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ecea:	69bb      	ldr	r3, [r7, #24]
 800ecec:	2b09      	cmp	r3, #9
 800ecee:	dc07      	bgt.n	800ed00 <FT_String_ND+0x55c>
											{
												c[10]=':';
 800ecf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecf2:	330a      	adds	r3, #10
 800ecf4:	223a      	movs	r2, #58	; 0x3a
 800ecf6:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800ecf8:	69bb      	ldr	r3, [r7, #24]
 800ecfa:	330b      	adds	r3, #11
 800ecfc:	62bb      	str	r3, [r7, #40]	; 0x28
 800ecfe:	e015      	b.n	800ed2c <FT_String_ND+0x588>
											}
											else{
														if (lngd< 100)
 800ed00:	69bb      	ldr	r3, [r7, #24]
 800ed02:	2b63      	cmp	r3, #99	; 0x63
 800ed04:	dc07      	bgt.n	800ed16 <FT_String_ND+0x572>
														{
															c[11]=':';
 800ed06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed08:	330b      	adds	r3, #11
 800ed0a:	223a      	movs	r2, #58	; 0x3a
 800ed0c:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800ed0e:	69bb      	ldr	r3, [r7, #24]
 800ed10:	330c      	adds	r3, #12
 800ed12:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed14:	e00a      	b.n	800ed2c <FT_String_ND+0x588>
														}
														else
														{
														if (lngd < 1000)
 800ed16:	69bb      	ldr	r3, [r7, #24]
 800ed18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ed1c:	da06      	bge.n	800ed2c <FT_String_ND+0x588>
														{
															c[12]=':';
 800ed1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed20:	330c      	adds	r3, #12
 800ed22:	223a      	movs	r2, #58	; 0x3a
 800ed24:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800ed26:	69bb      	ldr	r3, [r7, #24]
 800ed28:	330d      	adds	r3, #13
 800ed2a:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800ed2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed30:	601a      	str	r2, [r3, #0]
							n4=0;
 800ed32:	2300      	movs	r3, #0
 800ed34:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ed36:	e016      	b.n	800ed66 <FT_String_ND+0x5c2>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ed38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed3a:	69fb      	ldr	r3, [r7, #28]
 800ed3c:	1ad2      	subs	r2, r2, r3
 800ed3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed40:	441a      	add	r2, r3
 800ed42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed44:	4413      	add	r3, r2
 800ed46:	461a      	mov	r2, r3
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	441a      	add	r2, r3
 800ed4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ed4e:	69fb      	ldr	r3, [r7, #28]
 800ed50:	1ac9      	subs	r1, r1, r3
 800ed52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed54:	440b      	add	r3, r1
 800ed56:	4619      	mov	r1, r3
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	440b      	add	r3, r1
 800ed5c:	7812      	ldrb	r2, [r2, #0]
 800ed5e:	701a      	strb	r2, [r3, #0]
								n4++;
 800ed60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed62:	3301      	adds	r3, #1
 800ed64:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ed66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed68:	69fb      	ldr	r3, [r7, #28]
 800ed6a:	1ad2      	subs	r2, r2, r3
 800ed6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed6e:	441a      	add	r2, r3
 800ed70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed72:	4413      	add	r3, r2
 800ed74:	6a3a      	ldr	r2, [r7, #32]
 800ed76:	429a      	cmp	r2, r3
 800ed78:	dade      	bge.n	800ed38 <FT_String_ND+0x594>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800ed7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7e:	441a      	add	r2, r3
 800ed80:	69fb      	ldr	r3, [r7, #28]
 800ed82:	1ad3      	subs	r3, r2, r3
 800ed84:	1e5a      	subs	r2, r3, #1
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	601a      	str	r2, [r3, #0]
							n5=0;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ed8e:	e00f      	b.n	800edb0 <FT_String_ND+0x60c>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800ed90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed92:	69bb      	ldr	r3, [r7, #24]
 800ed94:	1ad2      	subs	r2, r2, r3
 800ed96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed98:	4413      	add	r3, r2
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed9e:	441a      	add	r2, r3
 800eda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eda4:	440b      	add	r3, r1
 800eda6:	7812      	ldrb	r2, [r2, #0]
 800eda8:	701a      	strb	r2, [r3, #0]
								n5++;
 800edaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edac:	3301      	adds	r3, #1
 800edae:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800edb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edb2:	69bb      	ldr	r3, [r7, #24]
 800edb4:	1ad2      	subs	r2, r2, r3
 800edb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb8:	441a      	add	r2, r3
 800edba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	429a      	cmp	r2, r3
 800edc0:	dbe6      	blt.n	800ed90 <FT_String_ND+0x5ec>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800edc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800edc6:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800edc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edca:	681a      	ldr	r2, [r3, #0]
 800edcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edce:	441a      	add	r2, r3
 800edd0:	69bb      	ldr	r3, [r7, #24]
 800edd2:	1ad2      	subs	r2, r2, r3
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4413      	add	r3, r2
 800edda:	6a3a      	ldr	r2, [r7, #32]
 800eddc:	429a      	cmp	r2, r3
 800edde:	d105      	bne.n	800edec <FT_String_ND+0x648>
							{
								estado=4;
 800ede0:	2304      	movs	r3, #4
 800ede2:	627b      	str	r3, [r7, #36]	; 0x24
								*idcom=cliente;
 800ede4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ede6:	693a      	ldr	r2, [r7, #16]
 800ede8:	601a      	str	r2, [r3, #0]
 800edea:	e001      	b.n	800edf0 <FT_String_ND+0x64c>
							}
							else
							{
								estado=5;
 800edec:	2305      	movs	r3, #5
 800edee:	627b      	str	r3, [r7, #36]	; 0x24
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800edf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf2:	e000      	b.n	800edf6 <FT_String_ND+0x652>
					}
			}
			else
			{
				return(2);
 800edf4:	2302      	movs	r3, #2
			}
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3740      	adds	r7, #64	; 0x40
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	08010d9c 	.word	0x08010d9c
 800ee04:	08010da0 	.word	0x08010da0

0800ee08 <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b088      	sub	sp, #32
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800ee12:	2330      	movs	r3, #48	; 0x30
 800ee14:	60bb      	str	r3, [r7, #8]
 800ee16:	f107 030c 	add.w	r3, r7, #12
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	601a      	str	r2, [r3, #0]
 800ee1e:	605a      	str	r2, [r3, #4]
 800ee20:	609a      	str	r2, [r3, #8]
 800ee22:	60da      	str	r2, [r3, #12]
int i=0;	
 800ee24:	2300      	movs	r3, #0
 800ee26:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800ee28:	f107 0308 	add.w	r3, r7, #8
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	490f      	ldr	r1, [pc, #60]	; (800ee6c <INTOA+0x64>)
 800ee30:	4618      	mov	r0, r3
 800ee32:	f000 fa05 	bl	800f240 <siprintf>
		while(i<=strlen(origbuff))
 800ee36:	e00b      	b.n	800ee50 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	1c5a      	adds	r2, r3, #1
 800ee3c:	603a      	str	r2, [r7, #0]
 800ee3e:	f107 0108 	add.w	r1, r7, #8
 800ee42:	69fa      	ldr	r2, [r7, #28]
 800ee44:	440a      	add	r2, r1
 800ee46:	7812      	ldrb	r2, [r2, #0]
 800ee48:	701a      	strb	r2, [r3, #0]
		i++;
 800ee4a:	69fb      	ldr	r3, [r7, #28]
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800ee50:	f107 0308 	add.w	r3, r7, #8
 800ee54:	4618      	mov	r0, r3
 800ee56:	f7f1 f9cd 	bl	80001f4 <strlen>
 800ee5a:	4602      	mov	r2, r0
 800ee5c:	69fb      	ldr	r3, [r7, #28]
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	d2ea      	bcs.n	800ee38 <INTOA+0x30>
		}
		return(i);
 800ee62:	69fb      	ldr	r3, [r7, #28]
}
 800ee64:	4618      	mov	r0, r3
 800ee66:	3720      	adds	r7, #32
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}
 800ee6c:	08010da4 	.word	0x08010da4

0800ee70 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b088      	sub	sp, #32
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	60f8      	str	r0, [r7, #12]
 800ee78:	60b9      	str	r1, [r7, #8]
 800ee7a:	607a      	str	r2, [r7, #4]
 800ee7c:	603b      	str	r3, [r7, #0]
int x =0;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800ee82:	2300      	movs	r3, #0
 800ee84:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800ee86:	f107 0310 	add.w	r3, r7, #16
 800ee8a:	617b      	str	r3, [r7, #20]
if (c==0)
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d105      	bne.n	800ee9e <CopiaVector+0x2e>
{
	x=strlen(b);
 800ee92:	68b8      	ldr	r0, [r7, #8]
 800ee94:	f7f1 f9ae 	bl	80001f4 <strlen>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	61bb      	str	r3, [r7, #24]
 800ee9c:	e02e      	b.n	800eefc <CopiaVector+0x8c>
}
else
	{
		x=c;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eea8:	dd01      	ble.n	800eeae <CopiaVector+0x3e>
			{
				return(1);
 800eeaa:	2301      	movs	r3, #1
 800eeac:	e027      	b.n	800eefe <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800eeb2:	e00a      	b.n	800eeca <CopiaVector+0x5a>
				{
					*a++=*b++;
 800eeb4:	68ba      	ldr	r2, [r7, #8]
 800eeb6:	1c53      	adds	r3, r2, #1
 800eeb8:	60bb      	str	r3, [r7, #8]
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	1c59      	adds	r1, r3, #1
 800eebe:	60f9      	str	r1, [r7, #12]
 800eec0:	7812      	ldrb	r2, [r2, #0]
 800eec2:	701a      	strb	r2, [r3, #0]
					p++;
 800eec4:	69fb      	ldr	r3, [r7, #28]
 800eec6:	3301      	adds	r3, #1
 800eec8:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800eeca:	69fa      	ldr	r2, [r7, #28]
 800eecc:	69bb      	ldr	r3, [r7, #24]
 800eece:	429a      	cmp	r2, r3
 800eed0:	dbf0      	blt.n	800eeb4 <CopiaVector+0x44>
				}


			if (d==1)
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d111      	bne.n	800eefc <CopiaVector+0x8c>
			{
			  p=c;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800eedc:	e008      	b.n	800eef0 <CopiaVector+0x80>
			  {

				  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	1c5a      	adds	r2, r3, #1
 800eee2:	60fa      	str	r2, [r7, #12]
 800eee4:	697a      	ldr	r2, [r7, #20]
 800eee6:	7812      	ldrb	r2, [r2, #0]
 800eee8:	701a      	strb	r2, [r3, #0]
				  p++;
 800eeea:	69fb      	ldr	r3, [r7, #28]
 800eeec:	3301      	adds	r3, #1
 800eeee:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800eef0:	69fb      	ldr	r3, [r7, #28]
 800eef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eef6:	dbf2      	blt.n	800eede <CopiaVector+0x6e>
				  //&a[p]="/0";

			  }
			return (0);
 800eef8:	2300      	movs	r3, #0
 800eefa:	e000      	b.n	800eefe <CopiaVector+0x8e>
			}

			}
	}
return (1);
 800eefc:	2301      	movs	r3, #1
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3720      	adds	r7, #32
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}

0800ef06 <atoi>:
 800ef06:	220a      	movs	r2, #10
 800ef08:	2100      	movs	r1, #0
 800ef0a:	f000 b89d 	b.w	800f048 <strtol>

0800ef0e <__itoa>:
 800ef0e:	1e93      	subs	r3, r2, #2
 800ef10:	2b22      	cmp	r3, #34	; 0x22
 800ef12:	b510      	push	{r4, lr}
 800ef14:	460c      	mov	r4, r1
 800ef16:	d904      	bls.n	800ef22 <__itoa+0x14>
 800ef18:	2300      	movs	r3, #0
 800ef1a:	700b      	strb	r3, [r1, #0]
 800ef1c:	461c      	mov	r4, r3
 800ef1e:	4620      	mov	r0, r4
 800ef20:	bd10      	pop	{r4, pc}
 800ef22:	2a0a      	cmp	r2, #10
 800ef24:	d109      	bne.n	800ef3a <__itoa+0x2c>
 800ef26:	2800      	cmp	r0, #0
 800ef28:	da07      	bge.n	800ef3a <__itoa+0x2c>
 800ef2a:	232d      	movs	r3, #45	; 0x2d
 800ef2c:	700b      	strb	r3, [r1, #0]
 800ef2e:	4240      	negs	r0, r0
 800ef30:	2101      	movs	r1, #1
 800ef32:	4421      	add	r1, r4
 800ef34:	f000 f892 	bl	800f05c <__utoa>
 800ef38:	e7f1      	b.n	800ef1e <__itoa+0x10>
 800ef3a:	2100      	movs	r1, #0
 800ef3c:	e7f9      	b.n	800ef32 <__itoa+0x24>

0800ef3e <itoa>:
 800ef3e:	f7ff bfe6 	b.w	800ef0e <__itoa>
	...

0800ef44 <_strtol_l.constprop.0>:
 800ef44:	2b01      	cmp	r3, #1
 800ef46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef4a:	d001      	beq.n	800ef50 <_strtol_l.constprop.0+0xc>
 800ef4c:	2b24      	cmp	r3, #36	; 0x24
 800ef4e:	d906      	bls.n	800ef5e <_strtol_l.constprop.0+0x1a>
 800ef50:	f000 fa96 	bl	800f480 <__errno>
 800ef54:	2316      	movs	r3, #22
 800ef56:	6003      	str	r3, [r0, #0]
 800ef58:	2000      	movs	r0, #0
 800ef5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f044 <_strtol_l.constprop.0+0x100>
 800ef62:	460d      	mov	r5, r1
 800ef64:	462e      	mov	r6, r5
 800ef66:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef6a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ef6e:	f017 0708 	ands.w	r7, r7, #8
 800ef72:	d1f7      	bne.n	800ef64 <_strtol_l.constprop.0+0x20>
 800ef74:	2c2d      	cmp	r4, #45	; 0x2d
 800ef76:	d132      	bne.n	800efde <_strtol_l.constprop.0+0x9a>
 800ef78:	782c      	ldrb	r4, [r5, #0]
 800ef7a:	2701      	movs	r7, #1
 800ef7c:	1cb5      	adds	r5, r6, #2
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d05b      	beq.n	800f03a <_strtol_l.constprop.0+0xf6>
 800ef82:	2b10      	cmp	r3, #16
 800ef84:	d109      	bne.n	800ef9a <_strtol_l.constprop.0+0x56>
 800ef86:	2c30      	cmp	r4, #48	; 0x30
 800ef88:	d107      	bne.n	800ef9a <_strtol_l.constprop.0+0x56>
 800ef8a:	782c      	ldrb	r4, [r5, #0]
 800ef8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ef90:	2c58      	cmp	r4, #88	; 0x58
 800ef92:	d14d      	bne.n	800f030 <_strtol_l.constprop.0+0xec>
 800ef94:	786c      	ldrb	r4, [r5, #1]
 800ef96:	2310      	movs	r3, #16
 800ef98:	3502      	adds	r5, #2
 800ef9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ef9e:	f108 38ff 	add.w	r8, r8, #4294967295
 800efa2:	f04f 0e00 	mov.w	lr, #0
 800efa6:	fbb8 f9f3 	udiv	r9, r8, r3
 800efaa:	4676      	mov	r6, lr
 800efac:	fb03 8a19 	mls	sl, r3, r9, r8
 800efb0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800efb4:	f1bc 0f09 	cmp.w	ip, #9
 800efb8:	d816      	bhi.n	800efe8 <_strtol_l.constprop.0+0xa4>
 800efba:	4664      	mov	r4, ip
 800efbc:	42a3      	cmp	r3, r4
 800efbe:	dd24      	ble.n	800f00a <_strtol_l.constprop.0+0xc6>
 800efc0:	f1be 3fff 	cmp.w	lr, #4294967295
 800efc4:	d008      	beq.n	800efd8 <_strtol_l.constprop.0+0x94>
 800efc6:	45b1      	cmp	r9, r6
 800efc8:	d31c      	bcc.n	800f004 <_strtol_l.constprop.0+0xc0>
 800efca:	d101      	bne.n	800efd0 <_strtol_l.constprop.0+0x8c>
 800efcc:	45a2      	cmp	sl, r4
 800efce:	db19      	blt.n	800f004 <_strtol_l.constprop.0+0xc0>
 800efd0:	fb06 4603 	mla	r6, r6, r3, r4
 800efd4:	f04f 0e01 	mov.w	lr, #1
 800efd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800efdc:	e7e8      	b.n	800efb0 <_strtol_l.constprop.0+0x6c>
 800efde:	2c2b      	cmp	r4, #43	; 0x2b
 800efe0:	bf04      	itt	eq
 800efe2:	782c      	ldrbeq	r4, [r5, #0]
 800efe4:	1cb5      	addeq	r5, r6, #2
 800efe6:	e7ca      	b.n	800ef7e <_strtol_l.constprop.0+0x3a>
 800efe8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800efec:	f1bc 0f19 	cmp.w	ip, #25
 800eff0:	d801      	bhi.n	800eff6 <_strtol_l.constprop.0+0xb2>
 800eff2:	3c37      	subs	r4, #55	; 0x37
 800eff4:	e7e2      	b.n	800efbc <_strtol_l.constprop.0+0x78>
 800eff6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800effa:	f1bc 0f19 	cmp.w	ip, #25
 800effe:	d804      	bhi.n	800f00a <_strtol_l.constprop.0+0xc6>
 800f000:	3c57      	subs	r4, #87	; 0x57
 800f002:	e7db      	b.n	800efbc <_strtol_l.constprop.0+0x78>
 800f004:	f04f 3eff 	mov.w	lr, #4294967295
 800f008:	e7e6      	b.n	800efd8 <_strtol_l.constprop.0+0x94>
 800f00a:	f1be 3fff 	cmp.w	lr, #4294967295
 800f00e:	d105      	bne.n	800f01c <_strtol_l.constprop.0+0xd8>
 800f010:	2322      	movs	r3, #34	; 0x22
 800f012:	6003      	str	r3, [r0, #0]
 800f014:	4646      	mov	r6, r8
 800f016:	b942      	cbnz	r2, 800f02a <_strtol_l.constprop.0+0xe6>
 800f018:	4630      	mov	r0, r6
 800f01a:	e79e      	b.n	800ef5a <_strtol_l.constprop.0+0x16>
 800f01c:	b107      	cbz	r7, 800f020 <_strtol_l.constprop.0+0xdc>
 800f01e:	4276      	negs	r6, r6
 800f020:	2a00      	cmp	r2, #0
 800f022:	d0f9      	beq.n	800f018 <_strtol_l.constprop.0+0xd4>
 800f024:	f1be 0f00 	cmp.w	lr, #0
 800f028:	d000      	beq.n	800f02c <_strtol_l.constprop.0+0xe8>
 800f02a:	1e69      	subs	r1, r5, #1
 800f02c:	6011      	str	r1, [r2, #0]
 800f02e:	e7f3      	b.n	800f018 <_strtol_l.constprop.0+0xd4>
 800f030:	2430      	movs	r4, #48	; 0x30
 800f032:	2b00      	cmp	r3, #0
 800f034:	d1b1      	bne.n	800ef9a <_strtol_l.constprop.0+0x56>
 800f036:	2308      	movs	r3, #8
 800f038:	e7af      	b.n	800ef9a <_strtol_l.constprop.0+0x56>
 800f03a:	2c30      	cmp	r4, #48	; 0x30
 800f03c:	d0a5      	beq.n	800ef8a <_strtol_l.constprop.0+0x46>
 800f03e:	230a      	movs	r3, #10
 800f040:	e7ab      	b.n	800ef9a <_strtol_l.constprop.0+0x56>
 800f042:	bf00      	nop
 800f044:	08010de6 	.word	0x08010de6

0800f048 <strtol>:
 800f048:	4613      	mov	r3, r2
 800f04a:	460a      	mov	r2, r1
 800f04c:	4601      	mov	r1, r0
 800f04e:	4802      	ldr	r0, [pc, #8]	; (800f058 <strtol+0x10>)
 800f050:	6800      	ldr	r0, [r0, #0]
 800f052:	f7ff bf77 	b.w	800ef44 <_strtol_l.constprop.0>
 800f056:	bf00      	nop
 800f058:	20000194 	.word	0x20000194

0800f05c <__utoa>:
 800f05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f05e:	4c1f      	ldr	r4, [pc, #124]	; (800f0dc <__utoa+0x80>)
 800f060:	b08b      	sub	sp, #44	; 0x2c
 800f062:	4605      	mov	r5, r0
 800f064:	460b      	mov	r3, r1
 800f066:	466e      	mov	r6, sp
 800f068:	f104 0c20 	add.w	ip, r4, #32
 800f06c:	6820      	ldr	r0, [r4, #0]
 800f06e:	6861      	ldr	r1, [r4, #4]
 800f070:	4637      	mov	r7, r6
 800f072:	c703      	stmia	r7!, {r0, r1}
 800f074:	3408      	adds	r4, #8
 800f076:	4564      	cmp	r4, ip
 800f078:	463e      	mov	r6, r7
 800f07a:	d1f7      	bne.n	800f06c <__utoa+0x10>
 800f07c:	7921      	ldrb	r1, [r4, #4]
 800f07e:	7139      	strb	r1, [r7, #4]
 800f080:	1e91      	subs	r1, r2, #2
 800f082:	6820      	ldr	r0, [r4, #0]
 800f084:	6038      	str	r0, [r7, #0]
 800f086:	2922      	cmp	r1, #34	; 0x22
 800f088:	f04f 0100 	mov.w	r1, #0
 800f08c:	d904      	bls.n	800f098 <__utoa+0x3c>
 800f08e:	7019      	strb	r1, [r3, #0]
 800f090:	460b      	mov	r3, r1
 800f092:	4618      	mov	r0, r3
 800f094:	b00b      	add	sp, #44	; 0x2c
 800f096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f098:	1e58      	subs	r0, r3, #1
 800f09a:	4684      	mov	ip, r0
 800f09c:	fbb5 f7f2 	udiv	r7, r5, r2
 800f0a0:	fb02 5617 	mls	r6, r2, r7, r5
 800f0a4:	3628      	adds	r6, #40	; 0x28
 800f0a6:	446e      	add	r6, sp
 800f0a8:	460c      	mov	r4, r1
 800f0aa:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800f0ae:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800f0b2:	462e      	mov	r6, r5
 800f0b4:	42b2      	cmp	r2, r6
 800f0b6:	f101 0101 	add.w	r1, r1, #1
 800f0ba:	463d      	mov	r5, r7
 800f0bc:	d9ee      	bls.n	800f09c <__utoa+0x40>
 800f0be:	2200      	movs	r2, #0
 800f0c0:	545a      	strb	r2, [r3, r1]
 800f0c2:	1919      	adds	r1, r3, r4
 800f0c4:	1aa5      	subs	r5, r4, r2
 800f0c6:	42aa      	cmp	r2, r5
 800f0c8:	dae3      	bge.n	800f092 <__utoa+0x36>
 800f0ca:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800f0ce:	780e      	ldrb	r6, [r1, #0]
 800f0d0:	7006      	strb	r6, [r0, #0]
 800f0d2:	3201      	adds	r2, #1
 800f0d4:	f801 5901 	strb.w	r5, [r1], #-1
 800f0d8:	e7f4      	b.n	800f0c4 <__utoa+0x68>
 800f0da:	bf00      	nop
 800f0dc:	08010dc0 	.word	0x08010dc0

0800f0e0 <std>:
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	b510      	push	{r4, lr}
 800f0e4:	4604      	mov	r4, r0
 800f0e6:	e9c0 3300 	strd	r3, r3, [r0]
 800f0ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f0ee:	6083      	str	r3, [r0, #8]
 800f0f0:	8181      	strh	r1, [r0, #12]
 800f0f2:	6643      	str	r3, [r0, #100]	; 0x64
 800f0f4:	81c2      	strh	r2, [r0, #14]
 800f0f6:	6183      	str	r3, [r0, #24]
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	2208      	movs	r2, #8
 800f0fc:	305c      	adds	r0, #92	; 0x5c
 800f0fe:	f000 f902 	bl	800f306 <memset>
 800f102:	4b05      	ldr	r3, [pc, #20]	; (800f118 <std+0x38>)
 800f104:	6263      	str	r3, [r4, #36]	; 0x24
 800f106:	4b05      	ldr	r3, [pc, #20]	; (800f11c <std+0x3c>)
 800f108:	62a3      	str	r3, [r4, #40]	; 0x28
 800f10a:	4b05      	ldr	r3, [pc, #20]	; (800f120 <std+0x40>)
 800f10c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f10e:	4b05      	ldr	r3, [pc, #20]	; (800f124 <std+0x44>)
 800f110:	6224      	str	r4, [r4, #32]
 800f112:	6323      	str	r3, [r4, #48]	; 0x30
 800f114:	bd10      	pop	{r4, pc}
 800f116:	bf00      	nop
 800f118:	0800f281 	.word	0x0800f281
 800f11c:	0800f2a3 	.word	0x0800f2a3
 800f120:	0800f2db 	.word	0x0800f2db
 800f124:	0800f2ff 	.word	0x0800f2ff

0800f128 <stdio_exit_handler>:
 800f128:	4a02      	ldr	r2, [pc, #8]	; (800f134 <stdio_exit_handler+0xc>)
 800f12a:	4903      	ldr	r1, [pc, #12]	; (800f138 <stdio_exit_handler+0x10>)
 800f12c:	4803      	ldr	r0, [pc, #12]	; (800f13c <stdio_exit_handler+0x14>)
 800f12e:	f000 b869 	b.w	800f204 <_fwalk_sglue>
 800f132:	bf00      	nop
 800f134:	2000013c 	.word	0x2000013c
 800f138:	0800fe01 	.word	0x0800fe01
 800f13c:	20000148 	.word	0x20000148

0800f140 <cleanup_stdio>:
 800f140:	6841      	ldr	r1, [r0, #4]
 800f142:	4b0c      	ldr	r3, [pc, #48]	; (800f174 <cleanup_stdio+0x34>)
 800f144:	4299      	cmp	r1, r3
 800f146:	b510      	push	{r4, lr}
 800f148:	4604      	mov	r4, r0
 800f14a:	d001      	beq.n	800f150 <cleanup_stdio+0x10>
 800f14c:	f000 fe58 	bl	800fe00 <_fflush_r>
 800f150:	68a1      	ldr	r1, [r4, #8]
 800f152:	4b09      	ldr	r3, [pc, #36]	; (800f178 <cleanup_stdio+0x38>)
 800f154:	4299      	cmp	r1, r3
 800f156:	d002      	beq.n	800f15e <cleanup_stdio+0x1e>
 800f158:	4620      	mov	r0, r4
 800f15a:	f000 fe51 	bl	800fe00 <_fflush_r>
 800f15e:	68e1      	ldr	r1, [r4, #12]
 800f160:	4b06      	ldr	r3, [pc, #24]	; (800f17c <cleanup_stdio+0x3c>)
 800f162:	4299      	cmp	r1, r3
 800f164:	d004      	beq.n	800f170 <cleanup_stdio+0x30>
 800f166:	4620      	mov	r0, r4
 800f168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f16c:	f000 be48 	b.w	800fe00 <_fflush_r>
 800f170:	bd10      	pop	{r4, pc}
 800f172:	bf00      	nop
 800f174:	20003e78 	.word	0x20003e78
 800f178:	20003ee0 	.word	0x20003ee0
 800f17c:	20003f48 	.word	0x20003f48

0800f180 <global_stdio_init.part.0>:
 800f180:	b510      	push	{r4, lr}
 800f182:	4b0b      	ldr	r3, [pc, #44]	; (800f1b0 <global_stdio_init.part.0+0x30>)
 800f184:	4c0b      	ldr	r4, [pc, #44]	; (800f1b4 <global_stdio_init.part.0+0x34>)
 800f186:	4a0c      	ldr	r2, [pc, #48]	; (800f1b8 <global_stdio_init.part.0+0x38>)
 800f188:	601a      	str	r2, [r3, #0]
 800f18a:	4620      	mov	r0, r4
 800f18c:	2200      	movs	r2, #0
 800f18e:	2104      	movs	r1, #4
 800f190:	f7ff ffa6 	bl	800f0e0 <std>
 800f194:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f198:	2201      	movs	r2, #1
 800f19a:	2109      	movs	r1, #9
 800f19c:	f7ff ffa0 	bl	800f0e0 <std>
 800f1a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f1a4:	2202      	movs	r2, #2
 800f1a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1aa:	2112      	movs	r1, #18
 800f1ac:	f7ff bf98 	b.w	800f0e0 <std>
 800f1b0:	20003fb0 	.word	0x20003fb0
 800f1b4:	20003e78 	.word	0x20003e78
 800f1b8:	0800f129 	.word	0x0800f129

0800f1bc <__sfp_lock_acquire>:
 800f1bc:	4801      	ldr	r0, [pc, #4]	; (800f1c4 <__sfp_lock_acquire+0x8>)
 800f1be:	f000 b989 	b.w	800f4d4 <__retarget_lock_acquire_recursive>
 800f1c2:	bf00      	nop
 800f1c4:	20003fb9 	.word	0x20003fb9

0800f1c8 <__sfp_lock_release>:
 800f1c8:	4801      	ldr	r0, [pc, #4]	; (800f1d0 <__sfp_lock_release+0x8>)
 800f1ca:	f000 b984 	b.w	800f4d6 <__retarget_lock_release_recursive>
 800f1ce:	bf00      	nop
 800f1d0:	20003fb9 	.word	0x20003fb9

0800f1d4 <__sinit>:
 800f1d4:	b510      	push	{r4, lr}
 800f1d6:	4604      	mov	r4, r0
 800f1d8:	f7ff fff0 	bl	800f1bc <__sfp_lock_acquire>
 800f1dc:	6a23      	ldr	r3, [r4, #32]
 800f1de:	b11b      	cbz	r3, 800f1e8 <__sinit+0x14>
 800f1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1e4:	f7ff bff0 	b.w	800f1c8 <__sfp_lock_release>
 800f1e8:	4b04      	ldr	r3, [pc, #16]	; (800f1fc <__sinit+0x28>)
 800f1ea:	6223      	str	r3, [r4, #32]
 800f1ec:	4b04      	ldr	r3, [pc, #16]	; (800f200 <__sinit+0x2c>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d1f5      	bne.n	800f1e0 <__sinit+0xc>
 800f1f4:	f7ff ffc4 	bl	800f180 <global_stdio_init.part.0>
 800f1f8:	e7f2      	b.n	800f1e0 <__sinit+0xc>
 800f1fa:	bf00      	nop
 800f1fc:	0800f141 	.word	0x0800f141
 800f200:	20003fb0 	.word	0x20003fb0

0800f204 <_fwalk_sglue>:
 800f204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f208:	4607      	mov	r7, r0
 800f20a:	4688      	mov	r8, r1
 800f20c:	4614      	mov	r4, r2
 800f20e:	2600      	movs	r6, #0
 800f210:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f214:	f1b9 0901 	subs.w	r9, r9, #1
 800f218:	d505      	bpl.n	800f226 <_fwalk_sglue+0x22>
 800f21a:	6824      	ldr	r4, [r4, #0]
 800f21c:	2c00      	cmp	r4, #0
 800f21e:	d1f7      	bne.n	800f210 <_fwalk_sglue+0xc>
 800f220:	4630      	mov	r0, r6
 800f222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f226:	89ab      	ldrh	r3, [r5, #12]
 800f228:	2b01      	cmp	r3, #1
 800f22a:	d907      	bls.n	800f23c <_fwalk_sglue+0x38>
 800f22c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f230:	3301      	adds	r3, #1
 800f232:	d003      	beq.n	800f23c <_fwalk_sglue+0x38>
 800f234:	4629      	mov	r1, r5
 800f236:	4638      	mov	r0, r7
 800f238:	47c0      	blx	r8
 800f23a:	4306      	orrs	r6, r0
 800f23c:	3568      	adds	r5, #104	; 0x68
 800f23e:	e7e9      	b.n	800f214 <_fwalk_sglue+0x10>

0800f240 <siprintf>:
 800f240:	b40e      	push	{r1, r2, r3}
 800f242:	b500      	push	{lr}
 800f244:	b09c      	sub	sp, #112	; 0x70
 800f246:	ab1d      	add	r3, sp, #116	; 0x74
 800f248:	9002      	str	r0, [sp, #8]
 800f24a:	9006      	str	r0, [sp, #24]
 800f24c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f250:	4809      	ldr	r0, [pc, #36]	; (800f278 <siprintf+0x38>)
 800f252:	9107      	str	r1, [sp, #28]
 800f254:	9104      	str	r1, [sp, #16]
 800f256:	4909      	ldr	r1, [pc, #36]	; (800f27c <siprintf+0x3c>)
 800f258:	f853 2b04 	ldr.w	r2, [r3], #4
 800f25c:	9105      	str	r1, [sp, #20]
 800f25e:	6800      	ldr	r0, [r0, #0]
 800f260:	9301      	str	r3, [sp, #4]
 800f262:	a902      	add	r1, sp, #8
 800f264:	f000 fab8 	bl	800f7d8 <_svfiprintf_r>
 800f268:	9b02      	ldr	r3, [sp, #8]
 800f26a:	2200      	movs	r2, #0
 800f26c:	701a      	strb	r2, [r3, #0]
 800f26e:	b01c      	add	sp, #112	; 0x70
 800f270:	f85d eb04 	ldr.w	lr, [sp], #4
 800f274:	b003      	add	sp, #12
 800f276:	4770      	bx	lr
 800f278:	20000194 	.word	0x20000194
 800f27c:	ffff0208 	.word	0xffff0208

0800f280 <__sread>:
 800f280:	b510      	push	{r4, lr}
 800f282:	460c      	mov	r4, r1
 800f284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f288:	f000 f8d6 	bl	800f438 <_read_r>
 800f28c:	2800      	cmp	r0, #0
 800f28e:	bfab      	itete	ge
 800f290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f292:	89a3      	ldrhlt	r3, [r4, #12]
 800f294:	181b      	addge	r3, r3, r0
 800f296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f29a:	bfac      	ite	ge
 800f29c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f29e:	81a3      	strhlt	r3, [r4, #12]
 800f2a0:	bd10      	pop	{r4, pc}

0800f2a2 <__swrite>:
 800f2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2a6:	461f      	mov	r7, r3
 800f2a8:	898b      	ldrh	r3, [r1, #12]
 800f2aa:	05db      	lsls	r3, r3, #23
 800f2ac:	4605      	mov	r5, r0
 800f2ae:	460c      	mov	r4, r1
 800f2b0:	4616      	mov	r6, r2
 800f2b2:	d505      	bpl.n	800f2c0 <__swrite+0x1e>
 800f2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2b8:	2302      	movs	r3, #2
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	f000 f8aa 	bl	800f414 <_lseek_r>
 800f2c0:	89a3      	ldrh	r3, [r4, #12]
 800f2c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f2ca:	81a3      	strh	r3, [r4, #12]
 800f2cc:	4632      	mov	r2, r6
 800f2ce:	463b      	mov	r3, r7
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2d6:	f000 b8c1 	b.w	800f45c <_write_r>

0800f2da <__sseek>:
 800f2da:	b510      	push	{r4, lr}
 800f2dc:	460c      	mov	r4, r1
 800f2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2e2:	f000 f897 	bl	800f414 <_lseek_r>
 800f2e6:	1c43      	adds	r3, r0, #1
 800f2e8:	89a3      	ldrh	r3, [r4, #12]
 800f2ea:	bf15      	itete	ne
 800f2ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800f2ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f2f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f2f6:	81a3      	strheq	r3, [r4, #12]
 800f2f8:	bf18      	it	ne
 800f2fa:	81a3      	strhne	r3, [r4, #12]
 800f2fc:	bd10      	pop	{r4, pc}

0800f2fe <__sclose>:
 800f2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f302:	f000 b877 	b.w	800f3f4 <_close_r>

0800f306 <memset>:
 800f306:	4402      	add	r2, r0
 800f308:	4603      	mov	r3, r0
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d100      	bne.n	800f310 <memset+0xa>
 800f30e:	4770      	bx	lr
 800f310:	f803 1b01 	strb.w	r1, [r3], #1
 800f314:	e7f9      	b.n	800f30a <memset+0x4>

0800f316 <strncat>:
 800f316:	b530      	push	{r4, r5, lr}
 800f318:	4604      	mov	r4, r0
 800f31a:	7825      	ldrb	r5, [r4, #0]
 800f31c:	4623      	mov	r3, r4
 800f31e:	3401      	adds	r4, #1
 800f320:	2d00      	cmp	r5, #0
 800f322:	d1fa      	bne.n	800f31a <strncat+0x4>
 800f324:	3a01      	subs	r2, #1
 800f326:	d304      	bcc.n	800f332 <strncat+0x1c>
 800f328:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f32c:	f803 4b01 	strb.w	r4, [r3], #1
 800f330:	b904      	cbnz	r4, 800f334 <strncat+0x1e>
 800f332:	bd30      	pop	{r4, r5, pc}
 800f334:	2a00      	cmp	r2, #0
 800f336:	d1f5      	bne.n	800f324 <strncat+0xe>
 800f338:	701a      	strb	r2, [r3, #0]
 800f33a:	e7f3      	b.n	800f324 <strncat+0xe>

0800f33c <strtok>:
 800f33c:	4b16      	ldr	r3, [pc, #88]	; (800f398 <strtok+0x5c>)
 800f33e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f340:	681e      	ldr	r6, [r3, #0]
 800f342:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800f344:	4605      	mov	r5, r0
 800f346:	b9fc      	cbnz	r4, 800f388 <strtok+0x4c>
 800f348:	2050      	movs	r0, #80	; 0x50
 800f34a:	9101      	str	r1, [sp, #4]
 800f34c:	f000 f936 	bl	800f5bc <malloc>
 800f350:	9901      	ldr	r1, [sp, #4]
 800f352:	6470      	str	r0, [r6, #68]	; 0x44
 800f354:	4602      	mov	r2, r0
 800f356:	b920      	cbnz	r0, 800f362 <strtok+0x26>
 800f358:	4b10      	ldr	r3, [pc, #64]	; (800f39c <strtok+0x60>)
 800f35a:	4811      	ldr	r0, [pc, #68]	; (800f3a0 <strtok+0x64>)
 800f35c:	215b      	movs	r1, #91	; 0x5b
 800f35e:	f000 f8c3 	bl	800f4e8 <__assert_func>
 800f362:	e9c0 4400 	strd	r4, r4, [r0]
 800f366:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f36a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f36e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f372:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f376:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f37a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f37e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f382:	6184      	str	r4, [r0, #24]
 800f384:	7704      	strb	r4, [r0, #28]
 800f386:	6244      	str	r4, [r0, #36]	; 0x24
 800f388:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800f38a:	2301      	movs	r3, #1
 800f38c:	4628      	mov	r0, r5
 800f38e:	b002      	add	sp, #8
 800f390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f394:	f000 b806 	b.w	800f3a4 <__strtok_r>
 800f398:	20000194 	.word	0x20000194
 800f39c:	08010ee6 	.word	0x08010ee6
 800f3a0:	08010efd 	.word	0x08010efd

0800f3a4 <__strtok_r>:
 800f3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3a6:	b908      	cbnz	r0, 800f3ac <__strtok_r+0x8>
 800f3a8:	6810      	ldr	r0, [r2, #0]
 800f3aa:	b188      	cbz	r0, 800f3d0 <__strtok_r+0x2c>
 800f3ac:	4604      	mov	r4, r0
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f3b4:	460f      	mov	r7, r1
 800f3b6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f3ba:	b91e      	cbnz	r6, 800f3c4 <__strtok_r+0x20>
 800f3bc:	b965      	cbnz	r5, 800f3d8 <__strtok_r+0x34>
 800f3be:	6015      	str	r5, [r2, #0]
 800f3c0:	4628      	mov	r0, r5
 800f3c2:	e005      	b.n	800f3d0 <__strtok_r+0x2c>
 800f3c4:	42b5      	cmp	r5, r6
 800f3c6:	d1f6      	bne.n	800f3b6 <__strtok_r+0x12>
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d1f0      	bne.n	800f3ae <__strtok_r+0xa>
 800f3cc:	6014      	str	r4, [r2, #0]
 800f3ce:	7003      	strb	r3, [r0, #0]
 800f3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3d2:	461c      	mov	r4, r3
 800f3d4:	e00c      	b.n	800f3f0 <__strtok_r+0x4c>
 800f3d6:	b915      	cbnz	r5, 800f3de <__strtok_r+0x3a>
 800f3d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f3dc:	460e      	mov	r6, r1
 800f3de:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f3e2:	42ab      	cmp	r3, r5
 800f3e4:	d1f7      	bne.n	800f3d6 <__strtok_r+0x32>
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d0f3      	beq.n	800f3d2 <__strtok_r+0x2e>
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f3f0:	6014      	str	r4, [r2, #0]
 800f3f2:	e7ed      	b.n	800f3d0 <__strtok_r+0x2c>

0800f3f4 <_close_r>:
 800f3f4:	b538      	push	{r3, r4, r5, lr}
 800f3f6:	4d06      	ldr	r5, [pc, #24]	; (800f410 <_close_r+0x1c>)
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	4604      	mov	r4, r0
 800f3fc:	4608      	mov	r0, r1
 800f3fe:	602b      	str	r3, [r5, #0]
 800f400:	f7f3 fcd5 	bl	8002dae <_close>
 800f404:	1c43      	adds	r3, r0, #1
 800f406:	d102      	bne.n	800f40e <_close_r+0x1a>
 800f408:	682b      	ldr	r3, [r5, #0]
 800f40a:	b103      	cbz	r3, 800f40e <_close_r+0x1a>
 800f40c:	6023      	str	r3, [r4, #0]
 800f40e:	bd38      	pop	{r3, r4, r5, pc}
 800f410:	20003fb4 	.word	0x20003fb4

0800f414 <_lseek_r>:
 800f414:	b538      	push	{r3, r4, r5, lr}
 800f416:	4d07      	ldr	r5, [pc, #28]	; (800f434 <_lseek_r+0x20>)
 800f418:	4604      	mov	r4, r0
 800f41a:	4608      	mov	r0, r1
 800f41c:	4611      	mov	r1, r2
 800f41e:	2200      	movs	r2, #0
 800f420:	602a      	str	r2, [r5, #0]
 800f422:	461a      	mov	r2, r3
 800f424:	f7f3 fcea 	bl	8002dfc <_lseek>
 800f428:	1c43      	adds	r3, r0, #1
 800f42a:	d102      	bne.n	800f432 <_lseek_r+0x1e>
 800f42c:	682b      	ldr	r3, [r5, #0]
 800f42e:	b103      	cbz	r3, 800f432 <_lseek_r+0x1e>
 800f430:	6023      	str	r3, [r4, #0]
 800f432:	bd38      	pop	{r3, r4, r5, pc}
 800f434:	20003fb4 	.word	0x20003fb4

0800f438 <_read_r>:
 800f438:	b538      	push	{r3, r4, r5, lr}
 800f43a:	4d07      	ldr	r5, [pc, #28]	; (800f458 <_read_r+0x20>)
 800f43c:	4604      	mov	r4, r0
 800f43e:	4608      	mov	r0, r1
 800f440:	4611      	mov	r1, r2
 800f442:	2200      	movs	r2, #0
 800f444:	602a      	str	r2, [r5, #0]
 800f446:	461a      	mov	r2, r3
 800f448:	f7f3 fc78 	bl	8002d3c <_read>
 800f44c:	1c43      	adds	r3, r0, #1
 800f44e:	d102      	bne.n	800f456 <_read_r+0x1e>
 800f450:	682b      	ldr	r3, [r5, #0]
 800f452:	b103      	cbz	r3, 800f456 <_read_r+0x1e>
 800f454:	6023      	str	r3, [r4, #0]
 800f456:	bd38      	pop	{r3, r4, r5, pc}
 800f458:	20003fb4 	.word	0x20003fb4

0800f45c <_write_r>:
 800f45c:	b538      	push	{r3, r4, r5, lr}
 800f45e:	4d07      	ldr	r5, [pc, #28]	; (800f47c <_write_r+0x20>)
 800f460:	4604      	mov	r4, r0
 800f462:	4608      	mov	r0, r1
 800f464:	4611      	mov	r1, r2
 800f466:	2200      	movs	r2, #0
 800f468:	602a      	str	r2, [r5, #0]
 800f46a:	461a      	mov	r2, r3
 800f46c:	f7f3 fc83 	bl	8002d76 <_write>
 800f470:	1c43      	adds	r3, r0, #1
 800f472:	d102      	bne.n	800f47a <_write_r+0x1e>
 800f474:	682b      	ldr	r3, [r5, #0]
 800f476:	b103      	cbz	r3, 800f47a <_write_r+0x1e>
 800f478:	6023      	str	r3, [r4, #0]
 800f47a:	bd38      	pop	{r3, r4, r5, pc}
 800f47c:	20003fb4 	.word	0x20003fb4

0800f480 <__errno>:
 800f480:	4b01      	ldr	r3, [pc, #4]	; (800f488 <__errno+0x8>)
 800f482:	6818      	ldr	r0, [r3, #0]
 800f484:	4770      	bx	lr
 800f486:	bf00      	nop
 800f488:	20000194 	.word	0x20000194

0800f48c <__libc_init_array>:
 800f48c:	b570      	push	{r4, r5, r6, lr}
 800f48e:	4d0d      	ldr	r5, [pc, #52]	; (800f4c4 <__libc_init_array+0x38>)
 800f490:	4c0d      	ldr	r4, [pc, #52]	; (800f4c8 <__libc_init_array+0x3c>)
 800f492:	1b64      	subs	r4, r4, r5
 800f494:	10a4      	asrs	r4, r4, #2
 800f496:	2600      	movs	r6, #0
 800f498:	42a6      	cmp	r6, r4
 800f49a:	d109      	bne.n	800f4b0 <__libc_init_array+0x24>
 800f49c:	4d0b      	ldr	r5, [pc, #44]	; (800f4cc <__libc_init_array+0x40>)
 800f49e:	4c0c      	ldr	r4, [pc, #48]	; (800f4d0 <__libc_init_array+0x44>)
 800f4a0:	f001 f800 	bl	80104a4 <_init>
 800f4a4:	1b64      	subs	r4, r4, r5
 800f4a6:	10a4      	asrs	r4, r4, #2
 800f4a8:	2600      	movs	r6, #0
 800f4aa:	42a6      	cmp	r6, r4
 800f4ac:	d105      	bne.n	800f4ba <__libc_init_array+0x2e>
 800f4ae:	bd70      	pop	{r4, r5, r6, pc}
 800f4b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4b4:	4798      	blx	r3
 800f4b6:	3601      	adds	r6, #1
 800f4b8:	e7ee      	b.n	800f498 <__libc_init_array+0xc>
 800f4ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4be:	4798      	blx	r3
 800f4c0:	3601      	adds	r6, #1
 800f4c2:	e7f2      	b.n	800f4aa <__libc_init_array+0x1e>
 800f4c4:	08010fd0 	.word	0x08010fd0
 800f4c8:	08010fd0 	.word	0x08010fd0
 800f4cc:	08010fd0 	.word	0x08010fd0
 800f4d0:	08010fd4 	.word	0x08010fd4

0800f4d4 <__retarget_lock_acquire_recursive>:
 800f4d4:	4770      	bx	lr

0800f4d6 <__retarget_lock_release_recursive>:
 800f4d6:	4770      	bx	lr

0800f4d8 <strcpy>:
 800f4d8:	4603      	mov	r3, r0
 800f4da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f4de:	f803 2b01 	strb.w	r2, [r3], #1
 800f4e2:	2a00      	cmp	r2, #0
 800f4e4:	d1f9      	bne.n	800f4da <strcpy+0x2>
 800f4e6:	4770      	bx	lr

0800f4e8 <__assert_func>:
 800f4e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f4ea:	4614      	mov	r4, r2
 800f4ec:	461a      	mov	r2, r3
 800f4ee:	4b09      	ldr	r3, [pc, #36]	; (800f514 <__assert_func+0x2c>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	4605      	mov	r5, r0
 800f4f4:	68d8      	ldr	r0, [r3, #12]
 800f4f6:	b14c      	cbz	r4, 800f50c <__assert_func+0x24>
 800f4f8:	4b07      	ldr	r3, [pc, #28]	; (800f518 <__assert_func+0x30>)
 800f4fa:	9100      	str	r1, [sp, #0]
 800f4fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f500:	4906      	ldr	r1, [pc, #24]	; (800f51c <__assert_func+0x34>)
 800f502:	462b      	mov	r3, r5
 800f504:	f000 fca4 	bl	800fe50 <fiprintf>
 800f508:	f000 fcec 	bl	800fee4 <abort>
 800f50c:	4b04      	ldr	r3, [pc, #16]	; (800f520 <__assert_func+0x38>)
 800f50e:	461c      	mov	r4, r3
 800f510:	e7f3      	b.n	800f4fa <__assert_func+0x12>
 800f512:	bf00      	nop
 800f514:	20000194 	.word	0x20000194
 800f518:	08010f57 	.word	0x08010f57
 800f51c:	08010f64 	.word	0x08010f64
 800f520:	08010f92 	.word	0x08010f92

0800f524 <_free_r>:
 800f524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f526:	2900      	cmp	r1, #0
 800f528:	d044      	beq.n	800f5b4 <_free_r+0x90>
 800f52a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f52e:	9001      	str	r0, [sp, #4]
 800f530:	2b00      	cmp	r3, #0
 800f532:	f1a1 0404 	sub.w	r4, r1, #4
 800f536:	bfb8      	it	lt
 800f538:	18e4      	addlt	r4, r4, r3
 800f53a:	f000 f8e7 	bl	800f70c <__malloc_lock>
 800f53e:	4a1e      	ldr	r2, [pc, #120]	; (800f5b8 <_free_r+0x94>)
 800f540:	9801      	ldr	r0, [sp, #4]
 800f542:	6813      	ldr	r3, [r2, #0]
 800f544:	b933      	cbnz	r3, 800f554 <_free_r+0x30>
 800f546:	6063      	str	r3, [r4, #4]
 800f548:	6014      	str	r4, [r2, #0]
 800f54a:	b003      	add	sp, #12
 800f54c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f550:	f000 b8e2 	b.w	800f718 <__malloc_unlock>
 800f554:	42a3      	cmp	r3, r4
 800f556:	d908      	bls.n	800f56a <_free_r+0x46>
 800f558:	6825      	ldr	r5, [r4, #0]
 800f55a:	1961      	adds	r1, r4, r5
 800f55c:	428b      	cmp	r3, r1
 800f55e:	bf01      	itttt	eq
 800f560:	6819      	ldreq	r1, [r3, #0]
 800f562:	685b      	ldreq	r3, [r3, #4]
 800f564:	1949      	addeq	r1, r1, r5
 800f566:	6021      	streq	r1, [r4, #0]
 800f568:	e7ed      	b.n	800f546 <_free_r+0x22>
 800f56a:	461a      	mov	r2, r3
 800f56c:	685b      	ldr	r3, [r3, #4]
 800f56e:	b10b      	cbz	r3, 800f574 <_free_r+0x50>
 800f570:	42a3      	cmp	r3, r4
 800f572:	d9fa      	bls.n	800f56a <_free_r+0x46>
 800f574:	6811      	ldr	r1, [r2, #0]
 800f576:	1855      	adds	r5, r2, r1
 800f578:	42a5      	cmp	r5, r4
 800f57a:	d10b      	bne.n	800f594 <_free_r+0x70>
 800f57c:	6824      	ldr	r4, [r4, #0]
 800f57e:	4421      	add	r1, r4
 800f580:	1854      	adds	r4, r2, r1
 800f582:	42a3      	cmp	r3, r4
 800f584:	6011      	str	r1, [r2, #0]
 800f586:	d1e0      	bne.n	800f54a <_free_r+0x26>
 800f588:	681c      	ldr	r4, [r3, #0]
 800f58a:	685b      	ldr	r3, [r3, #4]
 800f58c:	6053      	str	r3, [r2, #4]
 800f58e:	440c      	add	r4, r1
 800f590:	6014      	str	r4, [r2, #0]
 800f592:	e7da      	b.n	800f54a <_free_r+0x26>
 800f594:	d902      	bls.n	800f59c <_free_r+0x78>
 800f596:	230c      	movs	r3, #12
 800f598:	6003      	str	r3, [r0, #0]
 800f59a:	e7d6      	b.n	800f54a <_free_r+0x26>
 800f59c:	6825      	ldr	r5, [r4, #0]
 800f59e:	1961      	adds	r1, r4, r5
 800f5a0:	428b      	cmp	r3, r1
 800f5a2:	bf04      	itt	eq
 800f5a4:	6819      	ldreq	r1, [r3, #0]
 800f5a6:	685b      	ldreq	r3, [r3, #4]
 800f5a8:	6063      	str	r3, [r4, #4]
 800f5aa:	bf04      	itt	eq
 800f5ac:	1949      	addeq	r1, r1, r5
 800f5ae:	6021      	streq	r1, [r4, #0]
 800f5b0:	6054      	str	r4, [r2, #4]
 800f5b2:	e7ca      	b.n	800f54a <_free_r+0x26>
 800f5b4:	b003      	add	sp, #12
 800f5b6:	bd30      	pop	{r4, r5, pc}
 800f5b8:	20003fbc 	.word	0x20003fbc

0800f5bc <malloc>:
 800f5bc:	4b02      	ldr	r3, [pc, #8]	; (800f5c8 <malloc+0xc>)
 800f5be:	4601      	mov	r1, r0
 800f5c0:	6818      	ldr	r0, [r3, #0]
 800f5c2:	f000 b823 	b.w	800f60c <_malloc_r>
 800f5c6:	bf00      	nop
 800f5c8:	20000194 	.word	0x20000194

0800f5cc <sbrk_aligned>:
 800f5cc:	b570      	push	{r4, r5, r6, lr}
 800f5ce:	4e0e      	ldr	r6, [pc, #56]	; (800f608 <sbrk_aligned+0x3c>)
 800f5d0:	460c      	mov	r4, r1
 800f5d2:	6831      	ldr	r1, [r6, #0]
 800f5d4:	4605      	mov	r5, r0
 800f5d6:	b911      	cbnz	r1, 800f5de <sbrk_aligned+0x12>
 800f5d8:	f000 fc66 	bl	800fea8 <_sbrk_r>
 800f5dc:	6030      	str	r0, [r6, #0]
 800f5de:	4621      	mov	r1, r4
 800f5e0:	4628      	mov	r0, r5
 800f5e2:	f000 fc61 	bl	800fea8 <_sbrk_r>
 800f5e6:	1c43      	adds	r3, r0, #1
 800f5e8:	d00a      	beq.n	800f600 <sbrk_aligned+0x34>
 800f5ea:	1cc4      	adds	r4, r0, #3
 800f5ec:	f024 0403 	bic.w	r4, r4, #3
 800f5f0:	42a0      	cmp	r0, r4
 800f5f2:	d007      	beq.n	800f604 <sbrk_aligned+0x38>
 800f5f4:	1a21      	subs	r1, r4, r0
 800f5f6:	4628      	mov	r0, r5
 800f5f8:	f000 fc56 	bl	800fea8 <_sbrk_r>
 800f5fc:	3001      	adds	r0, #1
 800f5fe:	d101      	bne.n	800f604 <sbrk_aligned+0x38>
 800f600:	f04f 34ff 	mov.w	r4, #4294967295
 800f604:	4620      	mov	r0, r4
 800f606:	bd70      	pop	{r4, r5, r6, pc}
 800f608:	20003fc0 	.word	0x20003fc0

0800f60c <_malloc_r>:
 800f60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f610:	1ccd      	adds	r5, r1, #3
 800f612:	f025 0503 	bic.w	r5, r5, #3
 800f616:	3508      	adds	r5, #8
 800f618:	2d0c      	cmp	r5, #12
 800f61a:	bf38      	it	cc
 800f61c:	250c      	movcc	r5, #12
 800f61e:	2d00      	cmp	r5, #0
 800f620:	4607      	mov	r7, r0
 800f622:	db01      	blt.n	800f628 <_malloc_r+0x1c>
 800f624:	42a9      	cmp	r1, r5
 800f626:	d905      	bls.n	800f634 <_malloc_r+0x28>
 800f628:	230c      	movs	r3, #12
 800f62a:	603b      	str	r3, [r7, #0]
 800f62c:	2600      	movs	r6, #0
 800f62e:	4630      	mov	r0, r6
 800f630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f634:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f708 <_malloc_r+0xfc>
 800f638:	f000 f868 	bl	800f70c <__malloc_lock>
 800f63c:	f8d8 3000 	ldr.w	r3, [r8]
 800f640:	461c      	mov	r4, r3
 800f642:	bb5c      	cbnz	r4, 800f69c <_malloc_r+0x90>
 800f644:	4629      	mov	r1, r5
 800f646:	4638      	mov	r0, r7
 800f648:	f7ff ffc0 	bl	800f5cc <sbrk_aligned>
 800f64c:	1c43      	adds	r3, r0, #1
 800f64e:	4604      	mov	r4, r0
 800f650:	d155      	bne.n	800f6fe <_malloc_r+0xf2>
 800f652:	f8d8 4000 	ldr.w	r4, [r8]
 800f656:	4626      	mov	r6, r4
 800f658:	2e00      	cmp	r6, #0
 800f65a:	d145      	bne.n	800f6e8 <_malloc_r+0xdc>
 800f65c:	2c00      	cmp	r4, #0
 800f65e:	d048      	beq.n	800f6f2 <_malloc_r+0xe6>
 800f660:	6823      	ldr	r3, [r4, #0]
 800f662:	4631      	mov	r1, r6
 800f664:	4638      	mov	r0, r7
 800f666:	eb04 0903 	add.w	r9, r4, r3
 800f66a:	f000 fc1d 	bl	800fea8 <_sbrk_r>
 800f66e:	4581      	cmp	r9, r0
 800f670:	d13f      	bne.n	800f6f2 <_malloc_r+0xe6>
 800f672:	6821      	ldr	r1, [r4, #0]
 800f674:	1a6d      	subs	r5, r5, r1
 800f676:	4629      	mov	r1, r5
 800f678:	4638      	mov	r0, r7
 800f67a:	f7ff ffa7 	bl	800f5cc <sbrk_aligned>
 800f67e:	3001      	adds	r0, #1
 800f680:	d037      	beq.n	800f6f2 <_malloc_r+0xe6>
 800f682:	6823      	ldr	r3, [r4, #0]
 800f684:	442b      	add	r3, r5
 800f686:	6023      	str	r3, [r4, #0]
 800f688:	f8d8 3000 	ldr.w	r3, [r8]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d038      	beq.n	800f702 <_malloc_r+0xf6>
 800f690:	685a      	ldr	r2, [r3, #4]
 800f692:	42a2      	cmp	r2, r4
 800f694:	d12b      	bne.n	800f6ee <_malloc_r+0xe2>
 800f696:	2200      	movs	r2, #0
 800f698:	605a      	str	r2, [r3, #4]
 800f69a:	e00f      	b.n	800f6bc <_malloc_r+0xb0>
 800f69c:	6822      	ldr	r2, [r4, #0]
 800f69e:	1b52      	subs	r2, r2, r5
 800f6a0:	d41f      	bmi.n	800f6e2 <_malloc_r+0xd6>
 800f6a2:	2a0b      	cmp	r2, #11
 800f6a4:	d917      	bls.n	800f6d6 <_malloc_r+0xca>
 800f6a6:	1961      	adds	r1, r4, r5
 800f6a8:	42a3      	cmp	r3, r4
 800f6aa:	6025      	str	r5, [r4, #0]
 800f6ac:	bf18      	it	ne
 800f6ae:	6059      	strne	r1, [r3, #4]
 800f6b0:	6863      	ldr	r3, [r4, #4]
 800f6b2:	bf08      	it	eq
 800f6b4:	f8c8 1000 	streq.w	r1, [r8]
 800f6b8:	5162      	str	r2, [r4, r5]
 800f6ba:	604b      	str	r3, [r1, #4]
 800f6bc:	4638      	mov	r0, r7
 800f6be:	f104 060b 	add.w	r6, r4, #11
 800f6c2:	f000 f829 	bl	800f718 <__malloc_unlock>
 800f6c6:	f026 0607 	bic.w	r6, r6, #7
 800f6ca:	1d23      	adds	r3, r4, #4
 800f6cc:	1af2      	subs	r2, r6, r3
 800f6ce:	d0ae      	beq.n	800f62e <_malloc_r+0x22>
 800f6d0:	1b9b      	subs	r3, r3, r6
 800f6d2:	50a3      	str	r3, [r4, r2]
 800f6d4:	e7ab      	b.n	800f62e <_malloc_r+0x22>
 800f6d6:	42a3      	cmp	r3, r4
 800f6d8:	6862      	ldr	r2, [r4, #4]
 800f6da:	d1dd      	bne.n	800f698 <_malloc_r+0x8c>
 800f6dc:	f8c8 2000 	str.w	r2, [r8]
 800f6e0:	e7ec      	b.n	800f6bc <_malloc_r+0xb0>
 800f6e2:	4623      	mov	r3, r4
 800f6e4:	6864      	ldr	r4, [r4, #4]
 800f6e6:	e7ac      	b.n	800f642 <_malloc_r+0x36>
 800f6e8:	4634      	mov	r4, r6
 800f6ea:	6876      	ldr	r6, [r6, #4]
 800f6ec:	e7b4      	b.n	800f658 <_malloc_r+0x4c>
 800f6ee:	4613      	mov	r3, r2
 800f6f0:	e7cc      	b.n	800f68c <_malloc_r+0x80>
 800f6f2:	230c      	movs	r3, #12
 800f6f4:	603b      	str	r3, [r7, #0]
 800f6f6:	4638      	mov	r0, r7
 800f6f8:	f000 f80e 	bl	800f718 <__malloc_unlock>
 800f6fc:	e797      	b.n	800f62e <_malloc_r+0x22>
 800f6fe:	6025      	str	r5, [r4, #0]
 800f700:	e7dc      	b.n	800f6bc <_malloc_r+0xb0>
 800f702:	605b      	str	r3, [r3, #4]
 800f704:	deff      	udf	#255	; 0xff
 800f706:	bf00      	nop
 800f708:	20003fbc 	.word	0x20003fbc

0800f70c <__malloc_lock>:
 800f70c:	4801      	ldr	r0, [pc, #4]	; (800f714 <__malloc_lock+0x8>)
 800f70e:	f7ff bee1 	b.w	800f4d4 <__retarget_lock_acquire_recursive>
 800f712:	bf00      	nop
 800f714:	20003fb8 	.word	0x20003fb8

0800f718 <__malloc_unlock>:
 800f718:	4801      	ldr	r0, [pc, #4]	; (800f720 <__malloc_unlock+0x8>)
 800f71a:	f7ff bedc 	b.w	800f4d6 <__retarget_lock_release_recursive>
 800f71e:	bf00      	nop
 800f720:	20003fb8 	.word	0x20003fb8

0800f724 <__ssputs_r>:
 800f724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f728:	688e      	ldr	r6, [r1, #8]
 800f72a:	461f      	mov	r7, r3
 800f72c:	42be      	cmp	r6, r7
 800f72e:	680b      	ldr	r3, [r1, #0]
 800f730:	4682      	mov	sl, r0
 800f732:	460c      	mov	r4, r1
 800f734:	4690      	mov	r8, r2
 800f736:	d82c      	bhi.n	800f792 <__ssputs_r+0x6e>
 800f738:	898a      	ldrh	r2, [r1, #12]
 800f73a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f73e:	d026      	beq.n	800f78e <__ssputs_r+0x6a>
 800f740:	6965      	ldr	r5, [r4, #20]
 800f742:	6909      	ldr	r1, [r1, #16]
 800f744:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f748:	eba3 0901 	sub.w	r9, r3, r1
 800f74c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f750:	1c7b      	adds	r3, r7, #1
 800f752:	444b      	add	r3, r9
 800f754:	106d      	asrs	r5, r5, #1
 800f756:	429d      	cmp	r5, r3
 800f758:	bf38      	it	cc
 800f75a:	461d      	movcc	r5, r3
 800f75c:	0553      	lsls	r3, r2, #21
 800f75e:	d527      	bpl.n	800f7b0 <__ssputs_r+0x8c>
 800f760:	4629      	mov	r1, r5
 800f762:	f7ff ff53 	bl	800f60c <_malloc_r>
 800f766:	4606      	mov	r6, r0
 800f768:	b360      	cbz	r0, 800f7c4 <__ssputs_r+0xa0>
 800f76a:	6921      	ldr	r1, [r4, #16]
 800f76c:	464a      	mov	r2, r9
 800f76e:	f000 fbab 	bl	800fec8 <memcpy>
 800f772:	89a3      	ldrh	r3, [r4, #12]
 800f774:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f77c:	81a3      	strh	r3, [r4, #12]
 800f77e:	6126      	str	r6, [r4, #16]
 800f780:	6165      	str	r5, [r4, #20]
 800f782:	444e      	add	r6, r9
 800f784:	eba5 0509 	sub.w	r5, r5, r9
 800f788:	6026      	str	r6, [r4, #0]
 800f78a:	60a5      	str	r5, [r4, #8]
 800f78c:	463e      	mov	r6, r7
 800f78e:	42be      	cmp	r6, r7
 800f790:	d900      	bls.n	800f794 <__ssputs_r+0x70>
 800f792:	463e      	mov	r6, r7
 800f794:	6820      	ldr	r0, [r4, #0]
 800f796:	4632      	mov	r2, r6
 800f798:	4641      	mov	r1, r8
 800f79a:	f000 fb6b 	bl	800fe74 <memmove>
 800f79e:	68a3      	ldr	r3, [r4, #8]
 800f7a0:	1b9b      	subs	r3, r3, r6
 800f7a2:	60a3      	str	r3, [r4, #8]
 800f7a4:	6823      	ldr	r3, [r4, #0]
 800f7a6:	4433      	add	r3, r6
 800f7a8:	6023      	str	r3, [r4, #0]
 800f7aa:	2000      	movs	r0, #0
 800f7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7b0:	462a      	mov	r2, r5
 800f7b2:	f000 fb9e 	bl	800fef2 <_realloc_r>
 800f7b6:	4606      	mov	r6, r0
 800f7b8:	2800      	cmp	r0, #0
 800f7ba:	d1e0      	bne.n	800f77e <__ssputs_r+0x5a>
 800f7bc:	6921      	ldr	r1, [r4, #16]
 800f7be:	4650      	mov	r0, sl
 800f7c0:	f7ff feb0 	bl	800f524 <_free_r>
 800f7c4:	230c      	movs	r3, #12
 800f7c6:	f8ca 3000 	str.w	r3, [sl]
 800f7ca:	89a3      	ldrh	r3, [r4, #12]
 800f7cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7d0:	81a3      	strh	r3, [r4, #12]
 800f7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800f7d6:	e7e9      	b.n	800f7ac <__ssputs_r+0x88>

0800f7d8 <_svfiprintf_r>:
 800f7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7dc:	4698      	mov	r8, r3
 800f7de:	898b      	ldrh	r3, [r1, #12]
 800f7e0:	061b      	lsls	r3, r3, #24
 800f7e2:	b09d      	sub	sp, #116	; 0x74
 800f7e4:	4607      	mov	r7, r0
 800f7e6:	460d      	mov	r5, r1
 800f7e8:	4614      	mov	r4, r2
 800f7ea:	d50e      	bpl.n	800f80a <_svfiprintf_r+0x32>
 800f7ec:	690b      	ldr	r3, [r1, #16]
 800f7ee:	b963      	cbnz	r3, 800f80a <_svfiprintf_r+0x32>
 800f7f0:	2140      	movs	r1, #64	; 0x40
 800f7f2:	f7ff ff0b 	bl	800f60c <_malloc_r>
 800f7f6:	6028      	str	r0, [r5, #0]
 800f7f8:	6128      	str	r0, [r5, #16]
 800f7fa:	b920      	cbnz	r0, 800f806 <_svfiprintf_r+0x2e>
 800f7fc:	230c      	movs	r3, #12
 800f7fe:	603b      	str	r3, [r7, #0]
 800f800:	f04f 30ff 	mov.w	r0, #4294967295
 800f804:	e0d0      	b.n	800f9a8 <_svfiprintf_r+0x1d0>
 800f806:	2340      	movs	r3, #64	; 0x40
 800f808:	616b      	str	r3, [r5, #20]
 800f80a:	2300      	movs	r3, #0
 800f80c:	9309      	str	r3, [sp, #36]	; 0x24
 800f80e:	2320      	movs	r3, #32
 800f810:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f814:	f8cd 800c 	str.w	r8, [sp, #12]
 800f818:	2330      	movs	r3, #48	; 0x30
 800f81a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f9c0 <_svfiprintf_r+0x1e8>
 800f81e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f822:	f04f 0901 	mov.w	r9, #1
 800f826:	4623      	mov	r3, r4
 800f828:	469a      	mov	sl, r3
 800f82a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f82e:	b10a      	cbz	r2, 800f834 <_svfiprintf_r+0x5c>
 800f830:	2a25      	cmp	r2, #37	; 0x25
 800f832:	d1f9      	bne.n	800f828 <_svfiprintf_r+0x50>
 800f834:	ebba 0b04 	subs.w	fp, sl, r4
 800f838:	d00b      	beq.n	800f852 <_svfiprintf_r+0x7a>
 800f83a:	465b      	mov	r3, fp
 800f83c:	4622      	mov	r2, r4
 800f83e:	4629      	mov	r1, r5
 800f840:	4638      	mov	r0, r7
 800f842:	f7ff ff6f 	bl	800f724 <__ssputs_r>
 800f846:	3001      	adds	r0, #1
 800f848:	f000 80a9 	beq.w	800f99e <_svfiprintf_r+0x1c6>
 800f84c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f84e:	445a      	add	r2, fp
 800f850:	9209      	str	r2, [sp, #36]	; 0x24
 800f852:	f89a 3000 	ldrb.w	r3, [sl]
 800f856:	2b00      	cmp	r3, #0
 800f858:	f000 80a1 	beq.w	800f99e <_svfiprintf_r+0x1c6>
 800f85c:	2300      	movs	r3, #0
 800f85e:	f04f 32ff 	mov.w	r2, #4294967295
 800f862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f866:	f10a 0a01 	add.w	sl, sl, #1
 800f86a:	9304      	str	r3, [sp, #16]
 800f86c:	9307      	str	r3, [sp, #28]
 800f86e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f872:	931a      	str	r3, [sp, #104]	; 0x68
 800f874:	4654      	mov	r4, sl
 800f876:	2205      	movs	r2, #5
 800f878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f87c:	4850      	ldr	r0, [pc, #320]	; (800f9c0 <_svfiprintf_r+0x1e8>)
 800f87e:	f7f0 fcc7 	bl	8000210 <memchr>
 800f882:	9a04      	ldr	r2, [sp, #16]
 800f884:	b9d8      	cbnz	r0, 800f8be <_svfiprintf_r+0xe6>
 800f886:	06d0      	lsls	r0, r2, #27
 800f888:	bf44      	itt	mi
 800f88a:	2320      	movmi	r3, #32
 800f88c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f890:	0711      	lsls	r1, r2, #28
 800f892:	bf44      	itt	mi
 800f894:	232b      	movmi	r3, #43	; 0x2b
 800f896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f89a:	f89a 3000 	ldrb.w	r3, [sl]
 800f89e:	2b2a      	cmp	r3, #42	; 0x2a
 800f8a0:	d015      	beq.n	800f8ce <_svfiprintf_r+0xf6>
 800f8a2:	9a07      	ldr	r2, [sp, #28]
 800f8a4:	4654      	mov	r4, sl
 800f8a6:	2000      	movs	r0, #0
 800f8a8:	f04f 0c0a 	mov.w	ip, #10
 800f8ac:	4621      	mov	r1, r4
 800f8ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8b2:	3b30      	subs	r3, #48	; 0x30
 800f8b4:	2b09      	cmp	r3, #9
 800f8b6:	d94d      	bls.n	800f954 <_svfiprintf_r+0x17c>
 800f8b8:	b1b0      	cbz	r0, 800f8e8 <_svfiprintf_r+0x110>
 800f8ba:	9207      	str	r2, [sp, #28]
 800f8bc:	e014      	b.n	800f8e8 <_svfiprintf_r+0x110>
 800f8be:	eba0 0308 	sub.w	r3, r0, r8
 800f8c2:	fa09 f303 	lsl.w	r3, r9, r3
 800f8c6:	4313      	orrs	r3, r2
 800f8c8:	9304      	str	r3, [sp, #16]
 800f8ca:	46a2      	mov	sl, r4
 800f8cc:	e7d2      	b.n	800f874 <_svfiprintf_r+0x9c>
 800f8ce:	9b03      	ldr	r3, [sp, #12]
 800f8d0:	1d19      	adds	r1, r3, #4
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	9103      	str	r1, [sp, #12]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	bfbb      	ittet	lt
 800f8da:	425b      	neglt	r3, r3
 800f8dc:	f042 0202 	orrlt.w	r2, r2, #2
 800f8e0:	9307      	strge	r3, [sp, #28]
 800f8e2:	9307      	strlt	r3, [sp, #28]
 800f8e4:	bfb8      	it	lt
 800f8e6:	9204      	strlt	r2, [sp, #16]
 800f8e8:	7823      	ldrb	r3, [r4, #0]
 800f8ea:	2b2e      	cmp	r3, #46	; 0x2e
 800f8ec:	d10c      	bne.n	800f908 <_svfiprintf_r+0x130>
 800f8ee:	7863      	ldrb	r3, [r4, #1]
 800f8f0:	2b2a      	cmp	r3, #42	; 0x2a
 800f8f2:	d134      	bne.n	800f95e <_svfiprintf_r+0x186>
 800f8f4:	9b03      	ldr	r3, [sp, #12]
 800f8f6:	1d1a      	adds	r2, r3, #4
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	9203      	str	r2, [sp, #12]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	bfb8      	it	lt
 800f900:	f04f 33ff 	movlt.w	r3, #4294967295
 800f904:	3402      	adds	r4, #2
 800f906:	9305      	str	r3, [sp, #20]
 800f908:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f9d0 <_svfiprintf_r+0x1f8>
 800f90c:	7821      	ldrb	r1, [r4, #0]
 800f90e:	2203      	movs	r2, #3
 800f910:	4650      	mov	r0, sl
 800f912:	f7f0 fc7d 	bl	8000210 <memchr>
 800f916:	b138      	cbz	r0, 800f928 <_svfiprintf_r+0x150>
 800f918:	9b04      	ldr	r3, [sp, #16]
 800f91a:	eba0 000a 	sub.w	r0, r0, sl
 800f91e:	2240      	movs	r2, #64	; 0x40
 800f920:	4082      	lsls	r2, r0
 800f922:	4313      	orrs	r3, r2
 800f924:	3401      	adds	r4, #1
 800f926:	9304      	str	r3, [sp, #16]
 800f928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f92c:	4825      	ldr	r0, [pc, #148]	; (800f9c4 <_svfiprintf_r+0x1ec>)
 800f92e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f932:	2206      	movs	r2, #6
 800f934:	f7f0 fc6c 	bl	8000210 <memchr>
 800f938:	2800      	cmp	r0, #0
 800f93a:	d038      	beq.n	800f9ae <_svfiprintf_r+0x1d6>
 800f93c:	4b22      	ldr	r3, [pc, #136]	; (800f9c8 <_svfiprintf_r+0x1f0>)
 800f93e:	bb1b      	cbnz	r3, 800f988 <_svfiprintf_r+0x1b0>
 800f940:	9b03      	ldr	r3, [sp, #12]
 800f942:	3307      	adds	r3, #7
 800f944:	f023 0307 	bic.w	r3, r3, #7
 800f948:	3308      	adds	r3, #8
 800f94a:	9303      	str	r3, [sp, #12]
 800f94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f94e:	4433      	add	r3, r6
 800f950:	9309      	str	r3, [sp, #36]	; 0x24
 800f952:	e768      	b.n	800f826 <_svfiprintf_r+0x4e>
 800f954:	fb0c 3202 	mla	r2, ip, r2, r3
 800f958:	460c      	mov	r4, r1
 800f95a:	2001      	movs	r0, #1
 800f95c:	e7a6      	b.n	800f8ac <_svfiprintf_r+0xd4>
 800f95e:	2300      	movs	r3, #0
 800f960:	3401      	adds	r4, #1
 800f962:	9305      	str	r3, [sp, #20]
 800f964:	4619      	mov	r1, r3
 800f966:	f04f 0c0a 	mov.w	ip, #10
 800f96a:	4620      	mov	r0, r4
 800f96c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f970:	3a30      	subs	r2, #48	; 0x30
 800f972:	2a09      	cmp	r2, #9
 800f974:	d903      	bls.n	800f97e <_svfiprintf_r+0x1a6>
 800f976:	2b00      	cmp	r3, #0
 800f978:	d0c6      	beq.n	800f908 <_svfiprintf_r+0x130>
 800f97a:	9105      	str	r1, [sp, #20]
 800f97c:	e7c4      	b.n	800f908 <_svfiprintf_r+0x130>
 800f97e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f982:	4604      	mov	r4, r0
 800f984:	2301      	movs	r3, #1
 800f986:	e7f0      	b.n	800f96a <_svfiprintf_r+0x192>
 800f988:	ab03      	add	r3, sp, #12
 800f98a:	9300      	str	r3, [sp, #0]
 800f98c:	462a      	mov	r2, r5
 800f98e:	4b0f      	ldr	r3, [pc, #60]	; (800f9cc <_svfiprintf_r+0x1f4>)
 800f990:	a904      	add	r1, sp, #16
 800f992:	4638      	mov	r0, r7
 800f994:	f3af 8000 	nop.w
 800f998:	1c42      	adds	r2, r0, #1
 800f99a:	4606      	mov	r6, r0
 800f99c:	d1d6      	bne.n	800f94c <_svfiprintf_r+0x174>
 800f99e:	89ab      	ldrh	r3, [r5, #12]
 800f9a0:	065b      	lsls	r3, r3, #25
 800f9a2:	f53f af2d 	bmi.w	800f800 <_svfiprintf_r+0x28>
 800f9a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9a8:	b01d      	add	sp, #116	; 0x74
 800f9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ae:	ab03      	add	r3, sp, #12
 800f9b0:	9300      	str	r3, [sp, #0]
 800f9b2:	462a      	mov	r2, r5
 800f9b4:	4b05      	ldr	r3, [pc, #20]	; (800f9cc <_svfiprintf_r+0x1f4>)
 800f9b6:	a904      	add	r1, sp, #16
 800f9b8:	4638      	mov	r0, r7
 800f9ba:	f000 f879 	bl	800fab0 <_printf_i>
 800f9be:	e7eb      	b.n	800f998 <_svfiprintf_r+0x1c0>
 800f9c0:	08010f93 	.word	0x08010f93
 800f9c4:	08010f9d 	.word	0x08010f9d
 800f9c8:	00000000 	.word	0x00000000
 800f9cc:	0800f725 	.word	0x0800f725
 800f9d0:	08010f99 	.word	0x08010f99

0800f9d4 <_printf_common>:
 800f9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9d8:	4616      	mov	r6, r2
 800f9da:	4699      	mov	r9, r3
 800f9dc:	688a      	ldr	r2, [r1, #8]
 800f9de:	690b      	ldr	r3, [r1, #16]
 800f9e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f9e4:	4293      	cmp	r3, r2
 800f9e6:	bfb8      	it	lt
 800f9e8:	4613      	movlt	r3, r2
 800f9ea:	6033      	str	r3, [r6, #0]
 800f9ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f9f0:	4607      	mov	r7, r0
 800f9f2:	460c      	mov	r4, r1
 800f9f4:	b10a      	cbz	r2, 800f9fa <_printf_common+0x26>
 800f9f6:	3301      	adds	r3, #1
 800f9f8:	6033      	str	r3, [r6, #0]
 800f9fa:	6823      	ldr	r3, [r4, #0]
 800f9fc:	0699      	lsls	r1, r3, #26
 800f9fe:	bf42      	ittt	mi
 800fa00:	6833      	ldrmi	r3, [r6, #0]
 800fa02:	3302      	addmi	r3, #2
 800fa04:	6033      	strmi	r3, [r6, #0]
 800fa06:	6825      	ldr	r5, [r4, #0]
 800fa08:	f015 0506 	ands.w	r5, r5, #6
 800fa0c:	d106      	bne.n	800fa1c <_printf_common+0x48>
 800fa0e:	f104 0a19 	add.w	sl, r4, #25
 800fa12:	68e3      	ldr	r3, [r4, #12]
 800fa14:	6832      	ldr	r2, [r6, #0]
 800fa16:	1a9b      	subs	r3, r3, r2
 800fa18:	42ab      	cmp	r3, r5
 800fa1a:	dc26      	bgt.n	800fa6a <_printf_common+0x96>
 800fa1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fa20:	1e13      	subs	r3, r2, #0
 800fa22:	6822      	ldr	r2, [r4, #0]
 800fa24:	bf18      	it	ne
 800fa26:	2301      	movne	r3, #1
 800fa28:	0692      	lsls	r2, r2, #26
 800fa2a:	d42b      	bmi.n	800fa84 <_printf_common+0xb0>
 800fa2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa30:	4649      	mov	r1, r9
 800fa32:	4638      	mov	r0, r7
 800fa34:	47c0      	blx	r8
 800fa36:	3001      	adds	r0, #1
 800fa38:	d01e      	beq.n	800fa78 <_printf_common+0xa4>
 800fa3a:	6823      	ldr	r3, [r4, #0]
 800fa3c:	6922      	ldr	r2, [r4, #16]
 800fa3e:	f003 0306 	and.w	r3, r3, #6
 800fa42:	2b04      	cmp	r3, #4
 800fa44:	bf02      	ittt	eq
 800fa46:	68e5      	ldreq	r5, [r4, #12]
 800fa48:	6833      	ldreq	r3, [r6, #0]
 800fa4a:	1aed      	subeq	r5, r5, r3
 800fa4c:	68a3      	ldr	r3, [r4, #8]
 800fa4e:	bf0c      	ite	eq
 800fa50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa54:	2500      	movne	r5, #0
 800fa56:	4293      	cmp	r3, r2
 800fa58:	bfc4      	itt	gt
 800fa5a:	1a9b      	subgt	r3, r3, r2
 800fa5c:	18ed      	addgt	r5, r5, r3
 800fa5e:	2600      	movs	r6, #0
 800fa60:	341a      	adds	r4, #26
 800fa62:	42b5      	cmp	r5, r6
 800fa64:	d11a      	bne.n	800fa9c <_printf_common+0xc8>
 800fa66:	2000      	movs	r0, #0
 800fa68:	e008      	b.n	800fa7c <_printf_common+0xa8>
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	4652      	mov	r2, sl
 800fa6e:	4649      	mov	r1, r9
 800fa70:	4638      	mov	r0, r7
 800fa72:	47c0      	blx	r8
 800fa74:	3001      	adds	r0, #1
 800fa76:	d103      	bne.n	800fa80 <_printf_common+0xac>
 800fa78:	f04f 30ff 	mov.w	r0, #4294967295
 800fa7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa80:	3501      	adds	r5, #1
 800fa82:	e7c6      	b.n	800fa12 <_printf_common+0x3e>
 800fa84:	18e1      	adds	r1, r4, r3
 800fa86:	1c5a      	adds	r2, r3, #1
 800fa88:	2030      	movs	r0, #48	; 0x30
 800fa8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa8e:	4422      	add	r2, r4
 800fa90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa98:	3302      	adds	r3, #2
 800fa9a:	e7c7      	b.n	800fa2c <_printf_common+0x58>
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	4622      	mov	r2, r4
 800faa0:	4649      	mov	r1, r9
 800faa2:	4638      	mov	r0, r7
 800faa4:	47c0      	blx	r8
 800faa6:	3001      	adds	r0, #1
 800faa8:	d0e6      	beq.n	800fa78 <_printf_common+0xa4>
 800faaa:	3601      	adds	r6, #1
 800faac:	e7d9      	b.n	800fa62 <_printf_common+0x8e>
	...

0800fab0 <_printf_i>:
 800fab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fab4:	7e0f      	ldrb	r7, [r1, #24]
 800fab6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fab8:	2f78      	cmp	r7, #120	; 0x78
 800faba:	4691      	mov	r9, r2
 800fabc:	4680      	mov	r8, r0
 800fabe:	460c      	mov	r4, r1
 800fac0:	469a      	mov	sl, r3
 800fac2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fac6:	d807      	bhi.n	800fad8 <_printf_i+0x28>
 800fac8:	2f62      	cmp	r7, #98	; 0x62
 800faca:	d80a      	bhi.n	800fae2 <_printf_i+0x32>
 800facc:	2f00      	cmp	r7, #0
 800face:	f000 80d4 	beq.w	800fc7a <_printf_i+0x1ca>
 800fad2:	2f58      	cmp	r7, #88	; 0x58
 800fad4:	f000 80c0 	beq.w	800fc58 <_printf_i+0x1a8>
 800fad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fadc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fae0:	e03a      	b.n	800fb58 <_printf_i+0xa8>
 800fae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fae6:	2b15      	cmp	r3, #21
 800fae8:	d8f6      	bhi.n	800fad8 <_printf_i+0x28>
 800faea:	a101      	add	r1, pc, #4	; (adr r1, 800faf0 <_printf_i+0x40>)
 800faec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800faf0:	0800fb49 	.word	0x0800fb49
 800faf4:	0800fb5d 	.word	0x0800fb5d
 800faf8:	0800fad9 	.word	0x0800fad9
 800fafc:	0800fad9 	.word	0x0800fad9
 800fb00:	0800fad9 	.word	0x0800fad9
 800fb04:	0800fad9 	.word	0x0800fad9
 800fb08:	0800fb5d 	.word	0x0800fb5d
 800fb0c:	0800fad9 	.word	0x0800fad9
 800fb10:	0800fad9 	.word	0x0800fad9
 800fb14:	0800fad9 	.word	0x0800fad9
 800fb18:	0800fad9 	.word	0x0800fad9
 800fb1c:	0800fc61 	.word	0x0800fc61
 800fb20:	0800fb89 	.word	0x0800fb89
 800fb24:	0800fc1b 	.word	0x0800fc1b
 800fb28:	0800fad9 	.word	0x0800fad9
 800fb2c:	0800fad9 	.word	0x0800fad9
 800fb30:	0800fc83 	.word	0x0800fc83
 800fb34:	0800fad9 	.word	0x0800fad9
 800fb38:	0800fb89 	.word	0x0800fb89
 800fb3c:	0800fad9 	.word	0x0800fad9
 800fb40:	0800fad9 	.word	0x0800fad9
 800fb44:	0800fc23 	.word	0x0800fc23
 800fb48:	682b      	ldr	r3, [r5, #0]
 800fb4a:	1d1a      	adds	r2, r3, #4
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	602a      	str	r2, [r5, #0]
 800fb50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb58:	2301      	movs	r3, #1
 800fb5a:	e09f      	b.n	800fc9c <_printf_i+0x1ec>
 800fb5c:	6820      	ldr	r0, [r4, #0]
 800fb5e:	682b      	ldr	r3, [r5, #0]
 800fb60:	0607      	lsls	r7, r0, #24
 800fb62:	f103 0104 	add.w	r1, r3, #4
 800fb66:	6029      	str	r1, [r5, #0]
 800fb68:	d501      	bpl.n	800fb6e <_printf_i+0xbe>
 800fb6a:	681e      	ldr	r6, [r3, #0]
 800fb6c:	e003      	b.n	800fb76 <_printf_i+0xc6>
 800fb6e:	0646      	lsls	r6, r0, #25
 800fb70:	d5fb      	bpl.n	800fb6a <_printf_i+0xba>
 800fb72:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fb76:	2e00      	cmp	r6, #0
 800fb78:	da03      	bge.n	800fb82 <_printf_i+0xd2>
 800fb7a:	232d      	movs	r3, #45	; 0x2d
 800fb7c:	4276      	negs	r6, r6
 800fb7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb82:	485a      	ldr	r0, [pc, #360]	; (800fcec <_printf_i+0x23c>)
 800fb84:	230a      	movs	r3, #10
 800fb86:	e012      	b.n	800fbae <_printf_i+0xfe>
 800fb88:	682b      	ldr	r3, [r5, #0]
 800fb8a:	6820      	ldr	r0, [r4, #0]
 800fb8c:	1d19      	adds	r1, r3, #4
 800fb8e:	6029      	str	r1, [r5, #0]
 800fb90:	0605      	lsls	r5, r0, #24
 800fb92:	d501      	bpl.n	800fb98 <_printf_i+0xe8>
 800fb94:	681e      	ldr	r6, [r3, #0]
 800fb96:	e002      	b.n	800fb9e <_printf_i+0xee>
 800fb98:	0641      	lsls	r1, r0, #25
 800fb9a:	d5fb      	bpl.n	800fb94 <_printf_i+0xe4>
 800fb9c:	881e      	ldrh	r6, [r3, #0]
 800fb9e:	4853      	ldr	r0, [pc, #332]	; (800fcec <_printf_i+0x23c>)
 800fba0:	2f6f      	cmp	r7, #111	; 0x6f
 800fba2:	bf0c      	ite	eq
 800fba4:	2308      	moveq	r3, #8
 800fba6:	230a      	movne	r3, #10
 800fba8:	2100      	movs	r1, #0
 800fbaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fbae:	6865      	ldr	r5, [r4, #4]
 800fbb0:	60a5      	str	r5, [r4, #8]
 800fbb2:	2d00      	cmp	r5, #0
 800fbb4:	bfa2      	ittt	ge
 800fbb6:	6821      	ldrge	r1, [r4, #0]
 800fbb8:	f021 0104 	bicge.w	r1, r1, #4
 800fbbc:	6021      	strge	r1, [r4, #0]
 800fbbe:	b90e      	cbnz	r6, 800fbc4 <_printf_i+0x114>
 800fbc0:	2d00      	cmp	r5, #0
 800fbc2:	d04b      	beq.n	800fc5c <_printf_i+0x1ac>
 800fbc4:	4615      	mov	r5, r2
 800fbc6:	fbb6 f1f3 	udiv	r1, r6, r3
 800fbca:	fb03 6711 	mls	r7, r3, r1, r6
 800fbce:	5dc7      	ldrb	r7, [r0, r7]
 800fbd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fbd4:	4637      	mov	r7, r6
 800fbd6:	42bb      	cmp	r3, r7
 800fbd8:	460e      	mov	r6, r1
 800fbda:	d9f4      	bls.n	800fbc6 <_printf_i+0x116>
 800fbdc:	2b08      	cmp	r3, #8
 800fbde:	d10b      	bne.n	800fbf8 <_printf_i+0x148>
 800fbe0:	6823      	ldr	r3, [r4, #0]
 800fbe2:	07de      	lsls	r6, r3, #31
 800fbe4:	d508      	bpl.n	800fbf8 <_printf_i+0x148>
 800fbe6:	6923      	ldr	r3, [r4, #16]
 800fbe8:	6861      	ldr	r1, [r4, #4]
 800fbea:	4299      	cmp	r1, r3
 800fbec:	bfde      	ittt	le
 800fbee:	2330      	movle	r3, #48	; 0x30
 800fbf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fbf4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fbf8:	1b52      	subs	r2, r2, r5
 800fbfa:	6122      	str	r2, [r4, #16]
 800fbfc:	f8cd a000 	str.w	sl, [sp]
 800fc00:	464b      	mov	r3, r9
 800fc02:	aa03      	add	r2, sp, #12
 800fc04:	4621      	mov	r1, r4
 800fc06:	4640      	mov	r0, r8
 800fc08:	f7ff fee4 	bl	800f9d4 <_printf_common>
 800fc0c:	3001      	adds	r0, #1
 800fc0e:	d14a      	bne.n	800fca6 <_printf_i+0x1f6>
 800fc10:	f04f 30ff 	mov.w	r0, #4294967295
 800fc14:	b004      	add	sp, #16
 800fc16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc1a:	6823      	ldr	r3, [r4, #0]
 800fc1c:	f043 0320 	orr.w	r3, r3, #32
 800fc20:	6023      	str	r3, [r4, #0]
 800fc22:	4833      	ldr	r0, [pc, #204]	; (800fcf0 <_printf_i+0x240>)
 800fc24:	2778      	movs	r7, #120	; 0x78
 800fc26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fc2a:	6823      	ldr	r3, [r4, #0]
 800fc2c:	6829      	ldr	r1, [r5, #0]
 800fc2e:	061f      	lsls	r7, r3, #24
 800fc30:	f851 6b04 	ldr.w	r6, [r1], #4
 800fc34:	d402      	bmi.n	800fc3c <_printf_i+0x18c>
 800fc36:	065f      	lsls	r7, r3, #25
 800fc38:	bf48      	it	mi
 800fc3a:	b2b6      	uxthmi	r6, r6
 800fc3c:	07df      	lsls	r7, r3, #31
 800fc3e:	bf48      	it	mi
 800fc40:	f043 0320 	orrmi.w	r3, r3, #32
 800fc44:	6029      	str	r1, [r5, #0]
 800fc46:	bf48      	it	mi
 800fc48:	6023      	strmi	r3, [r4, #0]
 800fc4a:	b91e      	cbnz	r6, 800fc54 <_printf_i+0x1a4>
 800fc4c:	6823      	ldr	r3, [r4, #0]
 800fc4e:	f023 0320 	bic.w	r3, r3, #32
 800fc52:	6023      	str	r3, [r4, #0]
 800fc54:	2310      	movs	r3, #16
 800fc56:	e7a7      	b.n	800fba8 <_printf_i+0xf8>
 800fc58:	4824      	ldr	r0, [pc, #144]	; (800fcec <_printf_i+0x23c>)
 800fc5a:	e7e4      	b.n	800fc26 <_printf_i+0x176>
 800fc5c:	4615      	mov	r5, r2
 800fc5e:	e7bd      	b.n	800fbdc <_printf_i+0x12c>
 800fc60:	682b      	ldr	r3, [r5, #0]
 800fc62:	6826      	ldr	r6, [r4, #0]
 800fc64:	6961      	ldr	r1, [r4, #20]
 800fc66:	1d18      	adds	r0, r3, #4
 800fc68:	6028      	str	r0, [r5, #0]
 800fc6a:	0635      	lsls	r5, r6, #24
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	d501      	bpl.n	800fc74 <_printf_i+0x1c4>
 800fc70:	6019      	str	r1, [r3, #0]
 800fc72:	e002      	b.n	800fc7a <_printf_i+0x1ca>
 800fc74:	0670      	lsls	r0, r6, #25
 800fc76:	d5fb      	bpl.n	800fc70 <_printf_i+0x1c0>
 800fc78:	8019      	strh	r1, [r3, #0]
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	6123      	str	r3, [r4, #16]
 800fc7e:	4615      	mov	r5, r2
 800fc80:	e7bc      	b.n	800fbfc <_printf_i+0x14c>
 800fc82:	682b      	ldr	r3, [r5, #0]
 800fc84:	1d1a      	adds	r2, r3, #4
 800fc86:	602a      	str	r2, [r5, #0]
 800fc88:	681d      	ldr	r5, [r3, #0]
 800fc8a:	6862      	ldr	r2, [r4, #4]
 800fc8c:	2100      	movs	r1, #0
 800fc8e:	4628      	mov	r0, r5
 800fc90:	f7f0 fabe 	bl	8000210 <memchr>
 800fc94:	b108      	cbz	r0, 800fc9a <_printf_i+0x1ea>
 800fc96:	1b40      	subs	r0, r0, r5
 800fc98:	6060      	str	r0, [r4, #4]
 800fc9a:	6863      	ldr	r3, [r4, #4]
 800fc9c:	6123      	str	r3, [r4, #16]
 800fc9e:	2300      	movs	r3, #0
 800fca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fca4:	e7aa      	b.n	800fbfc <_printf_i+0x14c>
 800fca6:	6923      	ldr	r3, [r4, #16]
 800fca8:	462a      	mov	r2, r5
 800fcaa:	4649      	mov	r1, r9
 800fcac:	4640      	mov	r0, r8
 800fcae:	47d0      	blx	sl
 800fcb0:	3001      	adds	r0, #1
 800fcb2:	d0ad      	beq.n	800fc10 <_printf_i+0x160>
 800fcb4:	6823      	ldr	r3, [r4, #0]
 800fcb6:	079b      	lsls	r3, r3, #30
 800fcb8:	d413      	bmi.n	800fce2 <_printf_i+0x232>
 800fcba:	68e0      	ldr	r0, [r4, #12]
 800fcbc:	9b03      	ldr	r3, [sp, #12]
 800fcbe:	4298      	cmp	r0, r3
 800fcc0:	bfb8      	it	lt
 800fcc2:	4618      	movlt	r0, r3
 800fcc4:	e7a6      	b.n	800fc14 <_printf_i+0x164>
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	4632      	mov	r2, r6
 800fcca:	4649      	mov	r1, r9
 800fccc:	4640      	mov	r0, r8
 800fcce:	47d0      	blx	sl
 800fcd0:	3001      	adds	r0, #1
 800fcd2:	d09d      	beq.n	800fc10 <_printf_i+0x160>
 800fcd4:	3501      	adds	r5, #1
 800fcd6:	68e3      	ldr	r3, [r4, #12]
 800fcd8:	9903      	ldr	r1, [sp, #12]
 800fcda:	1a5b      	subs	r3, r3, r1
 800fcdc:	42ab      	cmp	r3, r5
 800fcde:	dcf2      	bgt.n	800fcc6 <_printf_i+0x216>
 800fce0:	e7eb      	b.n	800fcba <_printf_i+0x20a>
 800fce2:	2500      	movs	r5, #0
 800fce4:	f104 0619 	add.w	r6, r4, #25
 800fce8:	e7f5      	b.n	800fcd6 <_printf_i+0x226>
 800fcea:	bf00      	nop
 800fcec:	08010fa4 	.word	0x08010fa4
 800fcf0:	08010fb5 	.word	0x08010fb5

0800fcf4 <__sflush_r>:
 800fcf4:	898a      	ldrh	r2, [r1, #12]
 800fcf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcfa:	4605      	mov	r5, r0
 800fcfc:	0710      	lsls	r0, r2, #28
 800fcfe:	460c      	mov	r4, r1
 800fd00:	d458      	bmi.n	800fdb4 <__sflush_r+0xc0>
 800fd02:	684b      	ldr	r3, [r1, #4]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	dc05      	bgt.n	800fd14 <__sflush_r+0x20>
 800fd08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	dc02      	bgt.n	800fd14 <__sflush_r+0x20>
 800fd0e:	2000      	movs	r0, #0
 800fd10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd16:	2e00      	cmp	r6, #0
 800fd18:	d0f9      	beq.n	800fd0e <__sflush_r+0x1a>
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fd20:	682f      	ldr	r7, [r5, #0]
 800fd22:	6a21      	ldr	r1, [r4, #32]
 800fd24:	602b      	str	r3, [r5, #0]
 800fd26:	d032      	beq.n	800fd8e <__sflush_r+0x9a>
 800fd28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fd2a:	89a3      	ldrh	r3, [r4, #12]
 800fd2c:	075a      	lsls	r2, r3, #29
 800fd2e:	d505      	bpl.n	800fd3c <__sflush_r+0x48>
 800fd30:	6863      	ldr	r3, [r4, #4]
 800fd32:	1ac0      	subs	r0, r0, r3
 800fd34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fd36:	b10b      	cbz	r3, 800fd3c <__sflush_r+0x48>
 800fd38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd3a:	1ac0      	subs	r0, r0, r3
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	4602      	mov	r2, r0
 800fd40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd42:	6a21      	ldr	r1, [r4, #32]
 800fd44:	4628      	mov	r0, r5
 800fd46:	47b0      	blx	r6
 800fd48:	1c43      	adds	r3, r0, #1
 800fd4a:	89a3      	ldrh	r3, [r4, #12]
 800fd4c:	d106      	bne.n	800fd5c <__sflush_r+0x68>
 800fd4e:	6829      	ldr	r1, [r5, #0]
 800fd50:	291d      	cmp	r1, #29
 800fd52:	d82b      	bhi.n	800fdac <__sflush_r+0xb8>
 800fd54:	4a29      	ldr	r2, [pc, #164]	; (800fdfc <__sflush_r+0x108>)
 800fd56:	410a      	asrs	r2, r1
 800fd58:	07d6      	lsls	r6, r2, #31
 800fd5a:	d427      	bmi.n	800fdac <__sflush_r+0xb8>
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	6062      	str	r2, [r4, #4]
 800fd60:	04d9      	lsls	r1, r3, #19
 800fd62:	6922      	ldr	r2, [r4, #16]
 800fd64:	6022      	str	r2, [r4, #0]
 800fd66:	d504      	bpl.n	800fd72 <__sflush_r+0x7e>
 800fd68:	1c42      	adds	r2, r0, #1
 800fd6a:	d101      	bne.n	800fd70 <__sflush_r+0x7c>
 800fd6c:	682b      	ldr	r3, [r5, #0]
 800fd6e:	b903      	cbnz	r3, 800fd72 <__sflush_r+0x7e>
 800fd70:	6560      	str	r0, [r4, #84]	; 0x54
 800fd72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd74:	602f      	str	r7, [r5, #0]
 800fd76:	2900      	cmp	r1, #0
 800fd78:	d0c9      	beq.n	800fd0e <__sflush_r+0x1a>
 800fd7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd7e:	4299      	cmp	r1, r3
 800fd80:	d002      	beq.n	800fd88 <__sflush_r+0x94>
 800fd82:	4628      	mov	r0, r5
 800fd84:	f7ff fbce 	bl	800f524 <_free_r>
 800fd88:	2000      	movs	r0, #0
 800fd8a:	6360      	str	r0, [r4, #52]	; 0x34
 800fd8c:	e7c0      	b.n	800fd10 <__sflush_r+0x1c>
 800fd8e:	2301      	movs	r3, #1
 800fd90:	4628      	mov	r0, r5
 800fd92:	47b0      	blx	r6
 800fd94:	1c41      	adds	r1, r0, #1
 800fd96:	d1c8      	bne.n	800fd2a <__sflush_r+0x36>
 800fd98:	682b      	ldr	r3, [r5, #0]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d0c5      	beq.n	800fd2a <__sflush_r+0x36>
 800fd9e:	2b1d      	cmp	r3, #29
 800fda0:	d001      	beq.n	800fda6 <__sflush_r+0xb2>
 800fda2:	2b16      	cmp	r3, #22
 800fda4:	d101      	bne.n	800fdaa <__sflush_r+0xb6>
 800fda6:	602f      	str	r7, [r5, #0]
 800fda8:	e7b1      	b.n	800fd0e <__sflush_r+0x1a>
 800fdaa:	89a3      	ldrh	r3, [r4, #12]
 800fdac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdb0:	81a3      	strh	r3, [r4, #12]
 800fdb2:	e7ad      	b.n	800fd10 <__sflush_r+0x1c>
 800fdb4:	690f      	ldr	r7, [r1, #16]
 800fdb6:	2f00      	cmp	r7, #0
 800fdb8:	d0a9      	beq.n	800fd0e <__sflush_r+0x1a>
 800fdba:	0793      	lsls	r3, r2, #30
 800fdbc:	680e      	ldr	r6, [r1, #0]
 800fdbe:	bf08      	it	eq
 800fdc0:	694b      	ldreq	r3, [r1, #20]
 800fdc2:	600f      	str	r7, [r1, #0]
 800fdc4:	bf18      	it	ne
 800fdc6:	2300      	movne	r3, #0
 800fdc8:	eba6 0807 	sub.w	r8, r6, r7
 800fdcc:	608b      	str	r3, [r1, #8]
 800fdce:	f1b8 0f00 	cmp.w	r8, #0
 800fdd2:	dd9c      	ble.n	800fd0e <__sflush_r+0x1a>
 800fdd4:	6a21      	ldr	r1, [r4, #32]
 800fdd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fdd8:	4643      	mov	r3, r8
 800fdda:	463a      	mov	r2, r7
 800fddc:	4628      	mov	r0, r5
 800fdde:	47b0      	blx	r6
 800fde0:	2800      	cmp	r0, #0
 800fde2:	dc06      	bgt.n	800fdf2 <__sflush_r+0xfe>
 800fde4:	89a3      	ldrh	r3, [r4, #12]
 800fde6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdea:	81a3      	strh	r3, [r4, #12]
 800fdec:	f04f 30ff 	mov.w	r0, #4294967295
 800fdf0:	e78e      	b.n	800fd10 <__sflush_r+0x1c>
 800fdf2:	4407      	add	r7, r0
 800fdf4:	eba8 0800 	sub.w	r8, r8, r0
 800fdf8:	e7e9      	b.n	800fdce <__sflush_r+0xda>
 800fdfa:	bf00      	nop
 800fdfc:	dfbffffe 	.word	0xdfbffffe

0800fe00 <_fflush_r>:
 800fe00:	b538      	push	{r3, r4, r5, lr}
 800fe02:	690b      	ldr	r3, [r1, #16]
 800fe04:	4605      	mov	r5, r0
 800fe06:	460c      	mov	r4, r1
 800fe08:	b913      	cbnz	r3, 800fe10 <_fflush_r+0x10>
 800fe0a:	2500      	movs	r5, #0
 800fe0c:	4628      	mov	r0, r5
 800fe0e:	bd38      	pop	{r3, r4, r5, pc}
 800fe10:	b118      	cbz	r0, 800fe1a <_fflush_r+0x1a>
 800fe12:	6a03      	ldr	r3, [r0, #32]
 800fe14:	b90b      	cbnz	r3, 800fe1a <_fflush_r+0x1a>
 800fe16:	f7ff f9dd 	bl	800f1d4 <__sinit>
 800fe1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d0f3      	beq.n	800fe0a <_fflush_r+0xa>
 800fe22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fe24:	07d0      	lsls	r0, r2, #31
 800fe26:	d404      	bmi.n	800fe32 <_fflush_r+0x32>
 800fe28:	0599      	lsls	r1, r3, #22
 800fe2a:	d402      	bmi.n	800fe32 <_fflush_r+0x32>
 800fe2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe2e:	f7ff fb51 	bl	800f4d4 <__retarget_lock_acquire_recursive>
 800fe32:	4628      	mov	r0, r5
 800fe34:	4621      	mov	r1, r4
 800fe36:	f7ff ff5d 	bl	800fcf4 <__sflush_r>
 800fe3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe3c:	07da      	lsls	r2, r3, #31
 800fe3e:	4605      	mov	r5, r0
 800fe40:	d4e4      	bmi.n	800fe0c <_fflush_r+0xc>
 800fe42:	89a3      	ldrh	r3, [r4, #12]
 800fe44:	059b      	lsls	r3, r3, #22
 800fe46:	d4e1      	bmi.n	800fe0c <_fflush_r+0xc>
 800fe48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe4a:	f7ff fb44 	bl	800f4d6 <__retarget_lock_release_recursive>
 800fe4e:	e7dd      	b.n	800fe0c <_fflush_r+0xc>

0800fe50 <fiprintf>:
 800fe50:	b40e      	push	{r1, r2, r3}
 800fe52:	b503      	push	{r0, r1, lr}
 800fe54:	4601      	mov	r1, r0
 800fe56:	ab03      	add	r3, sp, #12
 800fe58:	4805      	ldr	r0, [pc, #20]	; (800fe70 <fiprintf+0x20>)
 800fe5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe5e:	6800      	ldr	r0, [r0, #0]
 800fe60:	9301      	str	r3, [sp, #4]
 800fe62:	f000 f89f 	bl	800ffa4 <_vfiprintf_r>
 800fe66:	b002      	add	sp, #8
 800fe68:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe6c:	b003      	add	sp, #12
 800fe6e:	4770      	bx	lr
 800fe70:	20000194 	.word	0x20000194

0800fe74 <memmove>:
 800fe74:	4288      	cmp	r0, r1
 800fe76:	b510      	push	{r4, lr}
 800fe78:	eb01 0402 	add.w	r4, r1, r2
 800fe7c:	d902      	bls.n	800fe84 <memmove+0x10>
 800fe7e:	4284      	cmp	r4, r0
 800fe80:	4623      	mov	r3, r4
 800fe82:	d807      	bhi.n	800fe94 <memmove+0x20>
 800fe84:	1e43      	subs	r3, r0, #1
 800fe86:	42a1      	cmp	r1, r4
 800fe88:	d008      	beq.n	800fe9c <memmove+0x28>
 800fe8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fe92:	e7f8      	b.n	800fe86 <memmove+0x12>
 800fe94:	4402      	add	r2, r0
 800fe96:	4601      	mov	r1, r0
 800fe98:	428a      	cmp	r2, r1
 800fe9a:	d100      	bne.n	800fe9e <memmove+0x2a>
 800fe9c:	bd10      	pop	{r4, pc}
 800fe9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fea2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fea6:	e7f7      	b.n	800fe98 <memmove+0x24>

0800fea8 <_sbrk_r>:
 800fea8:	b538      	push	{r3, r4, r5, lr}
 800feaa:	4d06      	ldr	r5, [pc, #24]	; (800fec4 <_sbrk_r+0x1c>)
 800feac:	2300      	movs	r3, #0
 800feae:	4604      	mov	r4, r0
 800feb0:	4608      	mov	r0, r1
 800feb2:	602b      	str	r3, [r5, #0]
 800feb4:	f7f2 ffb0 	bl	8002e18 <_sbrk>
 800feb8:	1c43      	adds	r3, r0, #1
 800feba:	d102      	bne.n	800fec2 <_sbrk_r+0x1a>
 800febc:	682b      	ldr	r3, [r5, #0]
 800febe:	b103      	cbz	r3, 800fec2 <_sbrk_r+0x1a>
 800fec0:	6023      	str	r3, [r4, #0]
 800fec2:	bd38      	pop	{r3, r4, r5, pc}
 800fec4:	20003fb4 	.word	0x20003fb4

0800fec8 <memcpy>:
 800fec8:	440a      	add	r2, r1
 800feca:	4291      	cmp	r1, r2
 800fecc:	f100 33ff 	add.w	r3, r0, #4294967295
 800fed0:	d100      	bne.n	800fed4 <memcpy+0xc>
 800fed2:	4770      	bx	lr
 800fed4:	b510      	push	{r4, lr}
 800fed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800feda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fede:	4291      	cmp	r1, r2
 800fee0:	d1f9      	bne.n	800fed6 <memcpy+0xe>
 800fee2:	bd10      	pop	{r4, pc}

0800fee4 <abort>:
 800fee4:	b508      	push	{r3, lr}
 800fee6:	2006      	movs	r0, #6
 800fee8:	f000 fa34 	bl	8010354 <raise>
 800feec:	2001      	movs	r0, #1
 800feee:	f7f2 ff1b 	bl	8002d28 <_exit>

0800fef2 <_realloc_r>:
 800fef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fef6:	4680      	mov	r8, r0
 800fef8:	4614      	mov	r4, r2
 800fefa:	460e      	mov	r6, r1
 800fefc:	b921      	cbnz	r1, 800ff08 <_realloc_r+0x16>
 800fefe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff02:	4611      	mov	r1, r2
 800ff04:	f7ff bb82 	b.w	800f60c <_malloc_r>
 800ff08:	b92a      	cbnz	r2, 800ff16 <_realloc_r+0x24>
 800ff0a:	f7ff fb0b 	bl	800f524 <_free_r>
 800ff0e:	4625      	mov	r5, r4
 800ff10:	4628      	mov	r0, r5
 800ff12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff16:	f000 fa39 	bl	801038c <_malloc_usable_size_r>
 800ff1a:	4284      	cmp	r4, r0
 800ff1c:	4607      	mov	r7, r0
 800ff1e:	d802      	bhi.n	800ff26 <_realloc_r+0x34>
 800ff20:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ff24:	d812      	bhi.n	800ff4c <_realloc_r+0x5a>
 800ff26:	4621      	mov	r1, r4
 800ff28:	4640      	mov	r0, r8
 800ff2a:	f7ff fb6f 	bl	800f60c <_malloc_r>
 800ff2e:	4605      	mov	r5, r0
 800ff30:	2800      	cmp	r0, #0
 800ff32:	d0ed      	beq.n	800ff10 <_realloc_r+0x1e>
 800ff34:	42bc      	cmp	r4, r7
 800ff36:	4622      	mov	r2, r4
 800ff38:	4631      	mov	r1, r6
 800ff3a:	bf28      	it	cs
 800ff3c:	463a      	movcs	r2, r7
 800ff3e:	f7ff ffc3 	bl	800fec8 <memcpy>
 800ff42:	4631      	mov	r1, r6
 800ff44:	4640      	mov	r0, r8
 800ff46:	f7ff faed 	bl	800f524 <_free_r>
 800ff4a:	e7e1      	b.n	800ff10 <_realloc_r+0x1e>
 800ff4c:	4635      	mov	r5, r6
 800ff4e:	e7df      	b.n	800ff10 <_realloc_r+0x1e>

0800ff50 <__sfputc_r>:
 800ff50:	6893      	ldr	r3, [r2, #8]
 800ff52:	3b01      	subs	r3, #1
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	b410      	push	{r4}
 800ff58:	6093      	str	r3, [r2, #8]
 800ff5a:	da08      	bge.n	800ff6e <__sfputc_r+0x1e>
 800ff5c:	6994      	ldr	r4, [r2, #24]
 800ff5e:	42a3      	cmp	r3, r4
 800ff60:	db01      	blt.n	800ff66 <__sfputc_r+0x16>
 800ff62:	290a      	cmp	r1, #10
 800ff64:	d103      	bne.n	800ff6e <__sfputc_r+0x1e>
 800ff66:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff6a:	f000 b935 	b.w	80101d8 <__swbuf_r>
 800ff6e:	6813      	ldr	r3, [r2, #0]
 800ff70:	1c58      	adds	r0, r3, #1
 800ff72:	6010      	str	r0, [r2, #0]
 800ff74:	7019      	strb	r1, [r3, #0]
 800ff76:	4608      	mov	r0, r1
 800ff78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff7c:	4770      	bx	lr

0800ff7e <__sfputs_r>:
 800ff7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff80:	4606      	mov	r6, r0
 800ff82:	460f      	mov	r7, r1
 800ff84:	4614      	mov	r4, r2
 800ff86:	18d5      	adds	r5, r2, r3
 800ff88:	42ac      	cmp	r4, r5
 800ff8a:	d101      	bne.n	800ff90 <__sfputs_r+0x12>
 800ff8c:	2000      	movs	r0, #0
 800ff8e:	e007      	b.n	800ffa0 <__sfputs_r+0x22>
 800ff90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff94:	463a      	mov	r2, r7
 800ff96:	4630      	mov	r0, r6
 800ff98:	f7ff ffda 	bl	800ff50 <__sfputc_r>
 800ff9c:	1c43      	adds	r3, r0, #1
 800ff9e:	d1f3      	bne.n	800ff88 <__sfputs_r+0xa>
 800ffa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ffa4 <_vfiprintf_r>:
 800ffa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffa8:	460d      	mov	r5, r1
 800ffaa:	b09d      	sub	sp, #116	; 0x74
 800ffac:	4614      	mov	r4, r2
 800ffae:	4698      	mov	r8, r3
 800ffb0:	4606      	mov	r6, r0
 800ffb2:	b118      	cbz	r0, 800ffbc <_vfiprintf_r+0x18>
 800ffb4:	6a03      	ldr	r3, [r0, #32]
 800ffb6:	b90b      	cbnz	r3, 800ffbc <_vfiprintf_r+0x18>
 800ffb8:	f7ff f90c 	bl	800f1d4 <__sinit>
 800ffbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ffbe:	07d9      	lsls	r1, r3, #31
 800ffc0:	d405      	bmi.n	800ffce <_vfiprintf_r+0x2a>
 800ffc2:	89ab      	ldrh	r3, [r5, #12]
 800ffc4:	059a      	lsls	r2, r3, #22
 800ffc6:	d402      	bmi.n	800ffce <_vfiprintf_r+0x2a>
 800ffc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ffca:	f7ff fa83 	bl	800f4d4 <__retarget_lock_acquire_recursive>
 800ffce:	89ab      	ldrh	r3, [r5, #12]
 800ffd0:	071b      	lsls	r3, r3, #28
 800ffd2:	d501      	bpl.n	800ffd8 <_vfiprintf_r+0x34>
 800ffd4:	692b      	ldr	r3, [r5, #16]
 800ffd6:	b99b      	cbnz	r3, 8010000 <_vfiprintf_r+0x5c>
 800ffd8:	4629      	mov	r1, r5
 800ffda:	4630      	mov	r0, r6
 800ffdc:	f000 f93a 	bl	8010254 <__swsetup_r>
 800ffe0:	b170      	cbz	r0, 8010000 <_vfiprintf_r+0x5c>
 800ffe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ffe4:	07dc      	lsls	r4, r3, #31
 800ffe6:	d504      	bpl.n	800fff2 <_vfiprintf_r+0x4e>
 800ffe8:	f04f 30ff 	mov.w	r0, #4294967295
 800ffec:	b01d      	add	sp, #116	; 0x74
 800ffee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fff2:	89ab      	ldrh	r3, [r5, #12]
 800fff4:	0598      	lsls	r0, r3, #22
 800fff6:	d4f7      	bmi.n	800ffe8 <_vfiprintf_r+0x44>
 800fff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fffa:	f7ff fa6c 	bl	800f4d6 <__retarget_lock_release_recursive>
 800fffe:	e7f3      	b.n	800ffe8 <_vfiprintf_r+0x44>
 8010000:	2300      	movs	r3, #0
 8010002:	9309      	str	r3, [sp, #36]	; 0x24
 8010004:	2320      	movs	r3, #32
 8010006:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801000a:	f8cd 800c 	str.w	r8, [sp, #12]
 801000e:	2330      	movs	r3, #48	; 0x30
 8010010:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80101c4 <_vfiprintf_r+0x220>
 8010014:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010018:	f04f 0901 	mov.w	r9, #1
 801001c:	4623      	mov	r3, r4
 801001e:	469a      	mov	sl, r3
 8010020:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010024:	b10a      	cbz	r2, 801002a <_vfiprintf_r+0x86>
 8010026:	2a25      	cmp	r2, #37	; 0x25
 8010028:	d1f9      	bne.n	801001e <_vfiprintf_r+0x7a>
 801002a:	ebba 0b04 	subs.w	fp, sl, r4
 801002e:	d00b      	beq.n	8010048 <_vfiprintf_r+0xa4>
 8010030:	465b      	mov	r3, fp
 8010032:	4622      	mov	r2, r4
 8010034:	4629      	mov	r1, r5
 8010036:	4630      	mov	r0, r6
 8010038:	f7ff ffa1 	bl	800ff7e <__sfputs_r>
 801003c:	3001      	adds	r0, #1
 801003e:	f000 80a9 	beq.w	8010194 <_vfiprintf_r+0x1f0>
 8010042:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010044:	445a      	add	r2, fp
 8010046:	9209      	str	r2, [sp, #36]	; 0x24
 8010048:	f89a 3000 	ldrb.w	r3, [sl]
 801004c:	2b00      	cmp	r3, #0
 801004e:	f000 80a1 	beq.w	8010194 <_vfiprintf_r+0x1f0>
 8010052:	2300      	movs	r3, #0
 8010054:	f04f 32ff 	mov.w	r2, #4294967295
 8010058:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801005c:	f10a 0a01 	add.w	sl, sl, #1
 8010060:	9304      	str	r3, [sp, #16]
 8010062:	9307      	str	r3, [sp, #28]
 8010064:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010068:	931a      	str	r3, [sp, #104]	; 0x68
 801006a:	4654      	mov	r4, sl
 801006c:	2205      	movs	r2, #5
 801006e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010072:	4854      	ldr	r0, [pc, #336]	; (80101c4 <_vfiprintf_r+0x220>)
 8010074:	f7f0 f8cc 	bl	8000210 <memchr>
 8010078:	9a04      	ldr	r2, [sp, #16]
 801007a:	b9d8      	cbnz	r0, 80100b4 <_vfiprintf_r+0x110>
 801007c:	06d1      	lsls	r1, r2, #27
 801007e:	bf44      	itt	mi
 8010080:	2320      	movmi	r3, #32
 8010082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010086:	0713      	lsls	r3, r2, #28
 8010088:	bf44      	itt	mi
 801008a:	232b      	movmi	r3, #43	; 0x2b
 801008c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010090:	f89a 3000 	ldrb.w	r3, [sl]
 8010094:	2b2a      	cmp	r3, #42	; 0x2a
 8010096:	d015      	beq.n	80100c4 <_vfiprintf_r+0x120>
 8010098:	9a07      	ldr	r2, [sp, #28]
 801009a:	4654      	mov	r4, sl
 801009c:	2000      	movs	r0, #0
 801009e:	f04f 0c0a 	mov.w	ip, #10
 80100a2:	4621      	mov	r1, r4
 80100a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100a8:	3b30      	subs	r3, #48	; 0x30
 80100aa:	2b09      	cmp	r3, #9
 80100ac:	d94d      	bls.n	801014a <_vfiprintf_r+0x1a6>
 80100ae:	b1b0      	cbz	r0, 80100de <_vfiprintf_r+0x13a>
 80100b0:	9207      	str	r2, [sp, #28]
 80100b2:	e014      	b.n	80100de <_vfiprintf_r+0x13a>
 80100b4:	eba0 0308 	sub.w	r3, r0, r8
 80100b8:	fa09 f303 	lsl.w	r3, r9, r3
 80100bc:	4313      	orrs	r3, r2
 80100be:	9304      	str	r3, [sp, #16]
 80100c0:	46a2      	mov	sl, r4
 80100c2:	e7d2      	b.n	801006a <_vfiprintf_r+0xc6>
 80100c4:	9b03      	ldr	r3, [sp, #12]
 80100c6:	1d19      	adds	r1, r3, #4
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	9103      	str	r1, [sp, #12]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	bfbb      	ittet	lt
 80100d0:	425b      	neglt	r3, r3
 80100d2:	f042 0202 	orrlt.w	r2, r2, #2
 80100d6:	9307      	strge	r3, [sp, #28]
 80100d8:	9307      	strlt	r3, [sp, #28]
 80100da:	bfb8      	it	lt
 80100dc:	9204      	strlt	r2, [sp, #16]
 80100de:	7823      	ldrb	r3, [r4, #0]
 80100e0:	2b2e      	cmp	r3, #46	; 0x2e
 80100e2:	d10c      	bne.n	80100fe <_vfiprintf_r+0x15a>
 80100e4:	7863      	ldrb	r3, [r4, #1]
 80100e6:	2b2a      	cmp	r3, #42	; 0x2a
 80100e8:	d134      	bne.n	8010154 <_vfiprintf_r+0x1b0>
 80100ea:	9b03      	ldr	r3, [sp, #12]
 80100ec:	1d1a      	adds	r2, r3, #4
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	9203      	str	r2, [sp, #12]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	bfb8      	it	lt
 80100f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80100fa:	3402      	adds	r4, #2
 80100fc:	9305      	str	r3, [sp, #20]
 80100fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80101d4 <_vfiprintf_r+0x230>
 8010102:	7821      	ldrb	r1, [r4, #0]
 8010104:	2203      	movs	r2, #3
 8010106:	4650      	mov	r0, sl
 8010108:	f7f0 f882 	bl	8000210 <memchr>
 801010c:	b138      	cbz	r0, 801011e <_vfiprintf_r+0x17a>
 801010e:	9b04      	ldr	r3, [sp, #16]
 8010110:	eba0 000a 	sub.w	r0, r0, sl
 8010114:	2240      	movs	r2, #64	; 0x40
 8010116:	4082      	lsls	r2, r0
 8010118:	4313      	orrs	r3, r2
 801011a:	3401      	adds	r4, #1
 801011c:	9304      	str	r3, [sp, #16]
 801011e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010122:	4829      	ldr	r0, [pc, #164]	; (80101c8 <_vfiprintf_r+0x224>)
 8010124:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010128:	2206      	movs	r2, #6
 801012a:	f7f0 f871 	bl	8000210 <memchr>
 801012e:	2800      	cmp	r0, #0
 8010130:	d03f      	beq.n	80101b2 <_vfiprintf_r+0x20e>
 8010132:	4b26      	ldr	r3, [pc, #152]	; (80101cc <_vfiprintf_r+0x228>)
 8010134:	bb1b      	cbnz	r3, 801017e <_vfiprintf_r+0x1da>
 8010136:	9b03      	ldr	r3, [sp, #12]
 8010138:	3307      	adds	r3, #7
 801013a:	f023 0307 	bic.w	r3, r3, #7
 801013e:	3308      	adds	r3, #8
 8010140:	9303      	str	r3, [sp, #12]
 8010142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010144:	443b      	add	r3, r7
 8010146:	9309      	str	r3, [sp, #36]	; 0x24
 8010148:	e768      	b.n	801001c <_vfiprintf_r+0x78>
 801014a:	fb0c 3202 	mla	r2, ip, r2, r3
 801014e:	460c      	mov	r4, r1
 8010150:	2001      	movs	r0, #1
 8010152:	e7a6      	b.n	80100a2 <_vfiprintf_r+0xfe>
 8010154:	2300      	movs	r3, #0
 8010156:	3401      	adds	r4, #1
 8010158:	9305      	str	r3, [sp, #20]
 801015a:	4619      	mov	r1, r3
 801015c:	f04f 0c0a 	mov.w	ip, #10
 8010160:	4620      	mov	r0, r4
 8010162:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010166:	3a30      	subs	r2, #48	; 0x30
 8010168:	2a09      	cmp	r2, #9
 801016a:	d903      	bls.n	8010174 <_vfiprintf_r+0x1d0>
 801016c:	2b00      	cmp	r3, #0
 801016e:	d0c6      	beq.n	80100fe <_vfiprintf_r+0x15a>
 8010170:	9105      	str	r1, [sp, #20]
 8010172:	e7c4      	b.n	80100fe <_vfiprintf_r+0x15a>
 8010174:	fb0c 2101 	mla	r1, ip, r1, r2
 8010178:	4604      	mov	r4, r0
 801017a:	2301      	movs	r3, #1
 801017c:	e7f0      	b.n	8010160 <_vfiprintf_r+0x1bc>
 801017e:	ab03      	add	r3, sp, #12
 8010180:	9300      	str	r3, [sp, #0]
 8010182:	462a      	mov	r2, r5
 8010184:	4b12      	ldr	r3, [pc, #72]	; (80101d0 <_vfiprintf_r+0x22c>)
 8010186:	a904      	add	r1, sp, #16
 8010188:	4630      	mov	r0, r6
 801018a:	f3af 8000 	nop.w
 801018e:	4607      	mov	r7, r0
 8010190:	1c78      	adds	r0, r7, #1
 8010192:	d1d6      	bne.n	8010142 <_vfiprintf_r+0x19e>
 8010194:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010196:	07d9      	lsls	r1, r3, #31
 8010198:	d405      	bmi.n	80101a6 <_vfiprintf_r+0x202>
 801019a:	89ab      	ldrh	r3, [r5, #12]
 801019c:	059a      	lsls	r2, r3, #22
 801019e:	d402      	bmi.n	80101a6 <_vfiprintf_r+0x202>
 80101a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101a2:	f7ff f998 	bl	800f4d6 <__retarget_lock_release_recursive>
 80101a6:	89ab      	ldrh	r3, [r5, #12]
 80101a8:	065b      	lsls	r3, r3, #25
 80101aa:	f53f af1d 	bmi.w	800ffe8 <_vfiprintf_r+0x44>
 80101ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101b0:	e71c      	b.n	800ffec <_vfiprintf_r+0x48>
 80101b2:	ab03      	add	r3, sp, #12
 80101b4:	9300      	str	r3, [sp, #0]
 80101b6:	462a      	mov	r2, r5
 80101b8:	4b05      	ldr	r3, [pc, #20]	; (80101d0 <_vfiprintf_r+0x22c>)
 80101ba:	a904      	add	r1, sp, #16
 80101bc:	4630      	mov	r0, r6
 80101be:	f7ff fc77 	bl	800fab0 <_printf_i>
 80101c2:	e7e4      	b.n	801018e <_vfiprintf_r+0x1ea>
 80101c4:	08010f93 	.word	0x08010f93
 80101c8:	08010f9d 	.word	0x08010f9d
 80101cc:	00000000 	.word	0x00000000
 80101d0:	0800ff7f 	.word	0x0800ff7f
 80101d4:	08010f99 	.word	0x08010f99

080101d8 <__swbuf_r>:
 80101d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101da:	460e      	mov	r6, r1
 80101dc:	4614      	mov	r4, r2
 80101de:	4605      	mov	r5, r0
 80101e0:	b118      	cbz	r0, 80101ea <__swbuf_r+0x12>
 80101e2:	6a03      	ldr	r3, [r0, #32]
 80101e4:	b90b      	cbnz	r3, 80101ea <__swbuf_r+0x12>
 80101e6:	f7fe fff5 	bl	800f1d4 <__sinit>
 80101ea:	69a3      	ldr	r3, [r4, #24]
 80101ec:	60a3      	str	r3, [r4, #8]
 80101ee:	89a3      	ldrh	r3, [r4, #12]
 80101f0:	071a      	lsls	r2, r3, #28
 80101f2:	d525      	bpl.n	8010240 <__swbuf_r+0x68>
 80101f4:	6923      	ldr	r3, [r4, #16]
 80101f6:	b31b      	cbz	r3, 8010240 <__swbuf_r+0x68>
 80101f8:	6823      	ldr	r3, [r4, #0]
 80101fa:	6922      	ldr	r2, [r4, #16]
 80101fc:	1a98      	subs	r0, r3, r2
 80101fe:	6963      	ldr	r3, [r4, #20]
 8010200:	b2f6      	uxtb	r6, r6
 8010202:	4283      	cmp	r3, r0
 8010204:	4637      	mov	r7, r6
 8010206:	dc04      	bgt.n	8010212 <__swbuf_r+0x3a>
 8010208:	4621      	mov	r1, r4
 801020a:	4628      	mov	r0, r5
 801020c:	f7ff fdf8 	bl	800fe00 <_fflush_r>
 8010210:	b9e0      	cbnz	r0, 801024c <__swbuf_r+0x74>
 8010212:	68a3      	ldr	r3, [r4, #8]
 8010214:	3b01      	subs	r3, #1
 8010216:	60a3      	str	r3, [r4, #8]
 8010218:	6823      	ldr	r3, [r4, #0]
 801021a:	1c5a      	adds	r2, r3, #1
 801021c:	6022      	str	r2, [r4, #0]
 801021e:	701e      	strb	r6, [r3, #0]
 8010220:	6962      	ldr	r2, [r4, #20]
 8010222:	1c43      	adds	r3, r0, #1
 8010224:	429a      	cmp	r2, r3
 8010226:	d004      	beq.n	8010232 <__swbuf_r+0x5a>
 8010228:	89a3      	ldrh	r3, [r4, #12]
 801022a:	07db      	lsls	r3, r3, #31
 801022c:	d506      	bpl.n	801023c <__swbuf_r+0x64>
 801022e:	2e0a      	cmp	r6, #10
 8010230:	d104      	bne.n	801023c <__swbuf_r+0x64>
 8010232:	4621      	mov	r1, r4
 8010234:	4628      	mov	r0, r5
 8010236:	f7ff fde3 	bl	800fe00 <_fflush_r>
 801023a:	b938      	cbnz	r0, 801024c <__swbuf_r+0x74>
 801023c:	4638      	mov	r0, r7
 801023e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010240:	4621      	mov	r1, r4
 8010242:	4628      	mov	r0, r5
 8010244:	f000 f806 	bl	8010254 <__swsetup_r>
 8010248:	2800      	cmp	r0, #0
 801024a:	d0d5      	beq.n	80101f8 <__swbuf_r+0x20>
 801024c:	f04f 37ff 	mov.w	r7, #4294967295
 8010250:	e7f4      	b.n	801023c <__swbuf_r+0x64>
	...

08010254 <__swsetup_r>:
 8010254:	b538      	push	{r3, r4, r5, lr}
 8010256:	4b2a      	ldr	r3, [pc, #168]	; (8010300 <__swsetup_r+0xac>)
 8010258:	4605      	mov	r5, r0
 801025a:	6818      	ldr	r0, [r3, #0]
 801025c:	460c      	mov	r4, r1
 801025e:	b118      	cbz	r0, 8010268 <__swsetup_r+0x14>
 8010260:	6a03      	ldr	r3, [r0, #32]
 8010262:	b90b      	cbnz	r3, 8010268 <__swsetup_r+0x14>
 8010264:	f7fe ffb6 	bl	800f1d4 <__sinit>
 8010268:	89a3      	ldrh	r3, [r4, #12]
 801026a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801026e:	0718      	lsls	r0, r3, #28
 8010270:	d422      	bmi.n	80102b8 <__swsetup_r+0x64>
 8010272:	06d9      	lsls	r1, r3, #27
 8010274:	d407      	bmi.n	8010286 <__swsetup_r+0x32>
 8010276:	2309      	movs	r3, #9
 8010278:	602b      	str	r3, [r5, #0]
 801027a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801027e:	81a3      	strh	r3, [r4, #12]
 8010280:	f04f 30ff 	mov.w	r0, #4294967295
 8010284:	e034      	b.n	80102f0 <__swsetup_r+0x9c>
 8010286:	0758      	lsls	r0, r3, #29
 8010288:	d512      	bpl.n	80102b0 <__swsetup_r+0x5c>
 801028a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801028c:	b141      	cbz	r1, 80102a0 <__swsetup_r+0x4c>
 801028e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010292:	4299      	cmp	r1, r3
 8010294:	d002      	beq.n	801029c <__swsetup_r+0x48>
 8010296:	4628      	mov	r0, r5
 8010298:	f7ff f944 	bl	800f524 <_free_r>
 801029c:	2300      	movs	r3, #0
 801029e:	6363      	str	r3, [r4, #52]	; 0x34
 80102a0:	89a3      	ldrh	r3, [r4, #12]
 80102a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80102a6:	81a3      	strh	r3, [r4, #12]
 80102a8:	2300      	movs	r3, #0
 80102aa:	6063      	str	r3, [r4, #4]
 80102ac:	6923      	ldr	r3, [r4, #16]
 80102ae:	6023      	str	r3, [r4, #0]
 80102b0:	89a3      	ldrh	r3, [r4, #12]
 80102b2:	f043 0308 	orr.w	r3, r3, #8
 80102b6:	81a3      	strh	r3, [r4, #12]
 80102b8:	6923      	ldr	r3, [r4, #16]
 80102ba:	b94b      	cbnz	r3, 80102d0 <__swsetup_r+0x7c>
 80102bc:	89a3      	ldrh	r3, [r4, #12]
 80102be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80102c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80102c6:	d003      	beq.n	80102d0 <__swsetup_r+0x7c>
 80102c8:	4621      	mov	r1, r4
 80102ca:	4628      	mov	r0, r5
 80102cc:	f000 f88c 	bl	80103e8 <__smakebuf_r>
 80102d0:	89a0      	ldrh	r0, [r4, #12]
 80102d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80102d6:	f010 0301 	ands.w	r3, r0, #1
 80102da:	d00a      	beq.n	80102f2 <__swsetup_r+0x9e>
 80102dc:	2300      	movs	r3, #0
 80102de:	60a3      	str	r3, [r4, #8]
 80102e0:	6963      	ldr	r3, [r4, #20]
 80102e2:	425b      	negs	r3, r3
 80102e4:	61a3      	str	r3, [r4, #24]
 80102e6:	6923      	ldr	r3, [r4, #16]
 80102e8:	b943      	cbnz	r3, 80102fc <__swsetup_r+0xa8>
 80102ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80102ee:	d1c4      	bne.n	801027a <__swsetup_r+0x26>
 80102f0:	bd38      	pop	{r3, r4, r5, pc}
 80102f2:	0781      	lsls	r1, r0, #30
 80102f4:	bf58      	it	pl
 80102f6:	6963      	ldrpl	r3, [r4, #20]
 80102f8:	60a3      	str	r3, [r4, #8]
 80102fa:	e7f4      	b.n	80102e6 <__swsetup_r+0x92>
 80102fc:	2000      	movs	r0, #0
 80102fe:	e7f7      	b.n	80102f0 <__swsetup_r+0x9c>
 8010300:	20000194 	.word	0x20000194

08010304 <_raise_r>:
 8010304:	291f      	cmp	r1, #31
 8010306:	b538      	push	{r3, r4, r5, lr}
 8010308:	4604      	mov	r4, r0
 801030a:	460d      	mov	r5, r1
 801030c:	d904      	bls.n	8010318 <_raise_r+0x14>
 801030e:	2316      	movs	r3, #22
 8010310:	6003      	str	r3, [r0, #0]
 8010312:	f04f 30ff 	mov.w	r0, #4294967295
 8010316:	bd38      	pop	{r3, r4, r5, pc}
 8010318:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801031a:	b112      	cbz	r2, 8010322 <_raise_r+0x1e>
 801031c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010320:	b94b      	cbnz	r3, 8010336 <_raise_r+0x32>
 8010322:	4620      	mov	r0, r4
 8010324:	f000 f830 	bl	8010388 <_getpid_r>
 8010328:	462a      	mov	r2, r5
 801032a:	4601      	mov	r1, r0
 801032c:	4620      	mov	r0, r4
 801032e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010332:	f000 b817 	b.w	8010364 <_kill_r>
 8010336:	2b01      	cmp	r3, #1
 8010338:	d00a      	beq.n	8010350 <_raise_r+0x4c>
 801033a:	1c59      	adds	r1, r3, #1
 801033c:	d103      	bne.n	8010346 <_raise_r+0x42>
 801033e:	2316      	movs	r3, #22
 8010340:	6003      	str	r3, [r0, #0]
 8010342:	2001      	movs	r0, #1
 8010344:	e7e7      	b.n	8010316 <_raise_r+0x12>
 8010346:	2400      	movs	r4, #0
 8010348:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801034c:	4628      	mov	r0, r5
 801034e:	4798      	blx	r3
 8010350:	2000      	movs	r0, #0
 8010352:	e7e0      	b.n	8010316 <_raise_r+0x12>

08010354 <raise>:
 8010354:	4b02      	ldr	r3, [pc, #8]	; (8010360 <raise+0xc>)
 8010356:	4601      	mov	r1, r0
 8010358:	6818      	ldr	r0, [r3, #0]
 801035a:	f7ff bfd3 	b.w	8010304 <_raise_r>
 801035e:	bf00      	nop
 8010360:	20000194 	.word	0x20000194

08010364 <_kill_r>:
 8010364:	b538      	push	{r3, r4, r5, lr}
 8010366:	4d07      	ldr	r5, [pc, #28]	; (8010384 <_kill_r+0x20>)
 8010368:	2300      	movs	r3, #0
 801036a:	4604      	mov	r4, r0
 801036c:	4608      	mov	r0, r1
 801036e:	4611      	mov	r1, r2
 8010370:	602b      	str	r3, [r5, #0]
 8010372:	f7f2 fcc9 	bl	8002d08 <_kill>
 8010376:	1c43      	adds	r3, r0, #1
 8010378:	d102      	bne.n	8010380 <_kill_r+0x1c>
 801037a:	682b      	ldr	r3, [r5, #0]
 801037c:	b103      	cbz	r3, 8010380 <_kill_r+0x1c>
 801037e:	6023      	str	r3, [r4, #0]
 8010380:	bd38      	pop	{r3, r4, r5, pc}
 8010382:	bf00      	nop
 8010384:	20003fb4 	.word	0x20003fb4

08010388 <_getpid_r>:
 8010388:	f7f2 bcb6 	b.w	8002cf8 <_getpid>

0801038c <_malloc_usable_size_r>:
 801038c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010390:	1f18      	subs	r0, r3, #4
 8010392:	2b00      	cmp	r3, #0
 8010394:	bfbc      	itt	lt
 8010396:	580b      	ldrlt	r3, [r1, r0]
 8010398:	18c0      	addlt	r0, r0, r3
 801039a:	4770      	bx	lr

0801039c <__swhatbuf_r>:
 801039c:	b570      	push	{r4, r5, r6, lr}
 801039e:	460c      	mov	r4, r1
 80103a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103a4:	2900      	cmp	r1, #0
 80103a6:	b096      	sub	sp, #88	; 0x58
 80103a8:	4615      	mov	r5, r2
 80103aa:	461e      	mov	r6, r3
 80103ac:	da0d      	bge.n	80103ca <__swhatbuf_r+0x2e>
 80103ae:	89a3      	ldrh	r3, [r4, #12]
 80103b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80103b4:	f04f 0100 	mov.w	r1, #0
 80103b8:	bf0c      	ite	eq
 80103ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80103be:	2340      	movne	r3, #64	; 0x40
 80103c0:	2000      	movs	r0, #0
 80103c2:	6031      	str	r1, [r6, #0]
 80103c4:	602b      	str	r3, [r5, #0]
 80103c6:	b016      	add	sp, #88	; 0x58
 80103c8:	bd70      	pop	{r4, r5, r6, pc}
 80103ca:	466a      	mov	r2, sp
 80103cc:	f000 f848 	bl	8010460 <_fstat_r>
 80103d0:	2800      	cmp	r0, #0
 80103d2:	dbec      	blt.n	80103ae <__swhatbuf_r+0x12>
 80103d4:	9901      	ldr	r1, [sp, #4]
 80103d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80103da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80103de:	4259      	negs	r1, r3
 80103e0:	4159      	adcs	r1, r3
 80103e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103e6:	e7eb      	b.n	80103c0 <__swhatbuf_r+0x24>

080103e8 <__smakebuf_r>:
 80103e8:	898b      	ldrh	r3, [r1, #12]
 80103ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80103ec:	079d      	lsls	r5, r3, #30
 80103ee:	4606      	mov	r6, r0
 80103f0:	460c      	mov	r4, r1
 80103f2:	d507      	bpl.n	8010404 <__smakebuf_r+0x1c>
 80103f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80103f8:	6023      	str	r3, [r4, #0]
 80103fa:	6123      	str	r3, [r4, #16]
 80103fc:	2301      	movs	r3, #1
 80103fe:	6163      	str	r3, [r4, #20]
 8010400:	b002      	add	sp, #8
 8010402:	bd70      	pop	{r4, r5, r6, pc}
 8010404:	ab01      	add	r3, sp, #4
 8010406:	466a      	mov	r2, sp
 8010408:	f7ff ffc8 	bl	801039c <__swhatbuf_r>
 801040c:	9900      	ldr	r1, [sp, #0]
 801040e:	4605      	mov	r5, r0
 8010410:	4630      	mov	r0, r6
 8010412:	f7ff f8fb 	bl	800f60c <_malloc_r>
 8010416:	b948      	cbnz	r0, 801042c <__smakebuf_r+0x44>
 8010418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801041c:	059a      	lsls	r2, r3, #22
 801041e:	d4ef      	bmi.n	8010400 <__smakebuf_r+0x18>
 8010420:	f023 0303 	bic.w	r3, r3, #3
 8010424:	f043 0302 	orr.w	r3, r3, #2
 8010428:	81a3      	strh	r3, [r4, #12]
 801042a:	e7e3      	b.n	80103f4 <__smakebuf_r+0xc>
 801042c:	89a3      	ldrh	r3, [r4, #12]
 801042e:	6020      	str	r0, [r4, #0]
 8010430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010434:	81a3      	strh	r3, [r4, #12]
 8010436:	9b00      	ldr	r3, [sp, #0]
 8010438:	6163      	str	r3, [r4, #20]
 801043a:	9b01      	ldr	r3, [sp, #4]
 801043c:	6120      	str	r0, [r4, #16]
 801043e:	b15b      	cbz	r3, 8010458 <__smakebuf_r+0x70>
 8010440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010444:	4630      	mov	r0, r6
 8010446:	f000 f81d 	bl	8010484 <_isatty_r>
 801044a:	b128      	cbz	r0, 8010458 <__smakebuf_r+0x70>
 801044c:	89a3      	ldrh	r3, [r4, #12]
 801044e:	f023 0303 	bic.w	r3, r3, #3
 8010452:	f043 0301 	orr.w	r3, r3, #1
 8010456:	81a3      	strh	r3, [r4, #12]
 8010458:	89a3      	ldrh	r3, [r4, #12]
 801045a:	431d      	orrs	r5, r3
 801045c:	81a5      	strh	r5, [r4, #12]
 801045e:	e7cf      	b.n	8010400 <__smakebuf_r+0x18>

08010460 <_fstat_r>:
 8010460:	b538      	push	{r3, r4, r5, lr}
 8010462:	4d07      	ldr	r5, [pc, #28]	; (8010480 <_fstat_r+0x20>)
 8010464:	2300      	movs	r3, #0
 8010466:	4604      	mov	r4, r0
 8010468:	4608      	mov	r0, r1
 801046a:	4611      	mov	r1, r2
 801046c:	602b      	str	r3, [r5, #0]
 801046e:	f7f2 fcaa 	bl	8002dc6 <_fstat>
 8010472:	1c43      	adds	r3, r0, #1
 8010474:	d102      	bne.n	801047c <_fstat_r+0x1c>
 8010476:	682b      	ldr	r3, [r5, #0]
 8010478:	b103      	cbz	r3, 801047c <_fstat_r+0x1c>
 801047a:	6023      	str	r3, [r4, #0]
 801047c:	bd38      	pop	{r3, r4, r5, pc}
 801047e:	bf00      	nop
 8010480:	20003fb4 	.word	0x20003fb4

08010484 <_isatty_r>:
 8010484:	b538      	push	{r3, r4, r5, lr}
 8010486:	4d06      	ldr	r5, [pc, #24]	; (80104a0 <_isatty_r+0x1c>)
 8010488:	2300      	movs	r3, #0
 801048a:	4604      	mov	r4, r0
 801048c:	4608      	mov	r0, r1
 801048e:	602b      	str	r3, [r5, #0]
 8010490:	f7f2 fca9 	bl	8002de6 <_isatty>
 8010494:	1c43      	adds	r3, r0, #1
 8010496:	d102      	bne.n	801049e <_isatty_r+0x1a>
 8010498:	682b      	ldr	r3, [r5, #0]
 801049a:	b103      	cbz	r3, 801049e <_isatty_r+0x1a>
 801049c:	6023      	str	r3, [r4, #0]
 801049e:	bd38      	pop	{r3, r4, r5, pc}
 80104a0:	20003fb4 	.word	0x20003fb4

080104a4 <_init>:
 80104a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104a6:	bf00      	nop
 80104a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104aa:	bc08      	pop	{r3}
 80104ac:	469e      	mov	lr, r3
 80104ae:	4770      	bx	lr

080104b0 <_fini>:
 80104b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104b2:	bf00      	nop
 80104b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104b6:	bc08      	pop	{r3}
 80104b8:	469e      	mov	lr, r3
 80104ba:	4770      	bx	lr
