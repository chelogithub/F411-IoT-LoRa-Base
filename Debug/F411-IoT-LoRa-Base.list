
F411-IoT-LoRa-Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d254  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000778  0800d3f4  0800d3f4  0001d3f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db6c  0800db6c  00020198  2**0
                  CONTENTS
  4 .ARM          00000008  0800db6c  0800db6c  0001db6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db74  0800db74  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db74  0800db74  0001db74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db78  0800db78  0001db78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  0800db7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d0c  20000198  0800dd14  00020198  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002ea4  0800dd14  00022ea4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012134  00000000  00000000  0002020b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b13  00000000  00000000  0003233f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  00034e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c4e  00000000  00000000  00035d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000181d5  00000000  00000000  000369be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015432  00000000  00000000  0004eb93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000914d6  00000000  00000000  00063fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b94  00000000  00000000  000f549c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000fa030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000198 	.word	0x20000198
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d3dc 	.word	0x0800d3dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000019c 	.word	0x2000019c
 80001dc:	0800d3dc 	.word	0x0800d3dc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	b08f      	sub	sp, #60	; 0x3c
 8000698:	af06      	add	r7, sp, #24
	  //----------------------- LoRa ------------------------//

	  //----------------------- LoRa ------------------------//

	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 800069a:	4876      	ldr	r0, [pc, #472]	; (8000874 <main+0x1e0>)
 800069c:	f004 ff86 	bl	80055ac <Inicializar>
 	  	wf.RESET_PORT=GPIOA;
 80006a0:	4b74      	ldr	r3, [pc, #464]	; (8000874 <main+0x1e0>)
 80006a2:	4a75      	ldr	r2, [pc, #468]	; (8000878 <main+0x1e4>)
 80006a4:	601a      	str	r2, [r3, #0]
 	  	wf.RESET_PIN=GPIO_PIN_8;
 80006a6:	4b73      	ldr	r3, [pc, #460]	; (8000874 <main+0x1e0>)
 80006a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ac:	809a      	strh	r2, [r3, #4]
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80006ae:	4973      	ldr	r1, [pc, #460]	; (800087c <main+0x1e8>)
 80006b0:	4873      	ldr	r0, [pc, #460]	; (8000880 <main+0x1ec>)
 80006b2:	f00b fead 	bl	800c410 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 80006b6:	4973      	ldr	r1, [pc, #460]	; (8000884 <main+0x1f0>)
 80006b8:	4873      	ldr	r0, [pc, #460]	; (8000888 <main+0x1f4>)
 80006ba:	f00b fea9 	bl	800c410 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 80006be:	4973      	ldr	r1, [pc, #460]	; (800088c <main+0x1f8>)
 80006c0:	4873      	ldr	r0, [pc, #460]	; (8000890 <main+0x1fc>)
 80006c2:	f00b fea5 	bl	800c410 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 80006c6:	4973      	ldr	r1, [pc, #460]	; (8000894 <main+0x200>)
 80006c8:	4873      	ldr	r0, [pc, #460]	; (8000898 <main+0x204>)
 80006ca:	f00b fea1 	bl	800c410 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 80006ce:	4973      	ldr	r1, [pc, #460]	; (800089c <main+0x208>)
 80006d0:	4873      	ldr	r0, [pc, #460]	; (80008a0 <main+0x20c>)
 80006d2:	f00b fe9d 	bl	800c410 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 80006d6:	4973      	ldr	r1, [pc, #460]	; (80008a4 <main+0x210>)
 80006d8:	4873      	ldr	r0, [pc, #460]	; (80008a8 <main+0x214>)
 80006da:	f00b fe99 	bl	800c410 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 80006de:	4973      	ldr	r1, [pc, #460]	; (80008ac <main+0x218>)
 80006e0:	4873      	ldr	r0, [pc, #460]	; (80008b0 <main+0x21c>)
 80006e2:	f00b fe95 	bl	800c410 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 80006e6:	4973      	ldr	r1, [pc, #460]	; (80008b4 <main+0x220>)
 80006e8:	4873      	ldr	r0, [pc, #460]	; (80008b8 <main+0x224>)
 80006ea:	f00b fe91 	bl	800c410 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 80006ee:	4b61      	ldr	r3, [pc, #388]	; (8000874 <main+0x1e0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[12]=0x00;
		wf._data2SND[13]=0x33;
		wf._data2SND[14]=0x34;
		wf._data2SND[15]=0x35;
		wf._n_D2SND=12;*/
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80006f6:	4b5f      	ldr	r3, [pc, #380]	; (8000874 <main+0x1e0>)
 80006f8:	2264      	movs	r2, #100	; 0x64
 80006fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 80006fe:	4b5d      	ldr	r3, [pc, #372]	; (8000874 <main+0x1e0>)
 8000700:	2202      	movs	r2, #2
 8000702:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._NO_IP=1;
 8000706:	4b5b      	ldr	r3, [pc, #364]	; (8000874 <main+0x1e0>)
 8000708:	2201      	movs	r2, #1
 800070a:	f8c3 2d58 	str.w	r2, [r3, #3416]	; 0xd58
		wf._DBG_EN=1;
 800070e:	4b59      	ldr	r3, [pc, #356]	; (8000874 <main+0x1e0>)
 8000710:	2201      	movs	r2, #1
 8000712:	f8c3 2d5c 	str.w	r2, [r3, #3420]	; 0xd5c
     //----------------------- WIFI ------------------------//

		for(uint8_t i=0;i<=16;i++)
 8000716:	2300      	movs	r3, #0
 8000718:	77fb      	strb	r3, [r7, #31]
 800071a:	e006      	b.n	800072a <main+0x96>
		{
			decimal[i]=1;
 800071c:	7ffb      	ldrb	r3, [r7, #31]
 800071e:	4a67      	ldr	r2, [pc, #412]	; (80008bc <main+0x228>)
 8000720:	2101      	movs	r1, #1
 8000722:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0;i<=16;i++)
 8000724:	7ffb      	ldrb	r3, [r7, #31]
 8000726:	3301      	adds	r3, #1
 8000728:	77fb      	strb	r3, [r7, #31]
 800072a:	7ffb      	ldrb	r3, [r7, #31]
 800072c:	2b10      	cmp	r3, #16
 800072e:	d9f5      	bls.n	800071c <main+0x88>
		}
	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_lr);		//ETHERNET como cliente TCP envía  ModBUS
 8000730:	4863      	ldr	r0, [pc, #396]	; (80008c0 <main+0x22c>)
 8000732:	f00a fe95 	bl	800b460 <ModBUS_Config>
		mb_lr._mode = CLIENTE;
 8000736:	4b62      	ldr	r3, [pc, #392]	; (80008c0 <main+0x22c>)
 8000738:	2200      	movs	r2, #0
 800073a:	711a      	strb	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073c:	f001 fb9c 	bl	8001e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000740:	f000 faa4 	bl	8000c8c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000744:	4b5f      	ldr	r3, [pc, #380]	; (80008c4 <main+0x230>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a5f      	ldr	r2, [pc, #380]	; (80008c8 <main+0x234>)
 800074a:	fba2 2303 	umull	r2, r3, r2, r3
 800074e:	099b      	lsrs	r3, r3, #6
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff55 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000756:	f000 fc77 	bl	8001048 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800075a:	f000 fbf7 	bl	8000f4c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800075e:	f000 fc1f 	bl	8000fa0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000762:	f000 fc47 	bl	8000ff4 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000766:	f000 faf9 	bl	8000d5c <MX_TIM2_Init>
  MX_TIM3_Init();
 800076a:	f000 fb73 	bl	8000e54 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2102      	movs	r1, #2
 8000772:	4841      	ldr	r0, [pc, #260]	; (8000878 <main+0x1e4>)
 8000774:	f002 f854 	bl	8002820 <HAL_GPIO_WritePin>
  ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000778:	210e      	movs	r1, #14
 800077a:	4854      	ldr	r0, [pc, #336]	; (80008cc <main+0x238>)
 800077c:	f000 fce8 	bl	8001150 <ITM0_Write>
     HW_RESET(&wf);
 8000780:	483c      	ldr	r0, [pc, #240]	; (8000874 <main+0x1e0>)
 8000782:	f004 fe0f 	bl	80053a4 <HW_RESET>
     if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000786:	4b3b      	ldr	r3, [pc, #236]	; (8000874 <main+0x1e0>)
 8000788:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800078c:	2b00      	cmp	r3, #0
 800078e:	d003      	beq.n	8000798 <main+0x104>
 8000790:	2113      	movs	r1, #19
 8000792:	484f      	ldr	r0, [pc, #316]	; (80008d0 <main+0x23c>)
 8000794:	f000 fcdc 	bl	8001150 <ITM0_Write>
     HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000798:	2201      	movs	r2, #1
 800079a:	494e      	ldr	r1, [pc, #312]	; (80008d4 <main+0x240>)
 800079c:	484e      	ldr	r0, [pc, #312]	; (80008d8 <main+0x244>)
 800079e:	f003 fe72 	bl	8004486 <HAL_UART_Receive_IT>
     HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1);
 80007a2:	2201      	movs	r2, #1
 80007a4:	494d      	ldr	r1, [pc, #308]	; (80008dc <main+0x248>)
 80007a6:	484e      	ldr	r0, [pc, #312]	; (80008e0 <main+0x24c>)
 80007a8:	f003 fe6d 	bl	8004486 <HAL_UART_Receive_IT>

     if(ESP8266_HW_Init(&huart1)==1)
 80007ac:	484a      	ldr	r0, [pc, #296]	; (80008d8 <main+0x244>)
 80007ae:	f000 ffe7 	bl	8001780 <ESP8266_HW_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d10c      	bne.n	80007d2 <main+0x13e>
     {
   	  ESP_HW_Init=1;
 80007b8:	4b4a      	ldr	r3, [pc, #296]	; (80008e4 <main+0x250>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	701a      	strb	r2, [r3, #0]
   	  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 80007be:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <main+0x1e0>)
 80007c0:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d026      	beq.n	8000816 <main+0x182>
 80007c8:	2113      	movs	r1, #19
 80007ca:	4847      	ldr	r0, [pc, #284]	; (80008e8 <main+0x254>)
 80007cc:	f000 fcc0 	bl	8001150 <ITM0_Write>
 80007d0:	e021      	b.n	8000816 <main+0x182>
     }
     else
		 {
		   HW_RESET(&wf);
 80007d2:	4828      	ldr	r0, [pc, #160]	; (8000874 <main+0x1e0>)
 80007d4:	f004 fde6 	bl	80053a4 <HW_RESET>
		  if(ESP8266_HW_Init(&huart1)==1)
 80007d8:	483f      	ldr	r0, [pc, #252]	; (80008d8 <main+0x244>)
 80007da:	f000 ffd1 	bl	8001780 <ESP8266_HW_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d10c      	bne.n	80007fe <main+0x16a>
			  {
				  ESP_HW_Init=1;
 80007e4:	4b3f      	ldr	r3, [pc, #252]	; (80008e4 <main+0x250>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]
				  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 80007ea:	4b22      	ldr	r3, [pc, #136]	; (8000874 <main+0x1e0>)
 80007ec:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d010      	beq.n	8000816 <main+0x182>
 80007f4:	2113      	movs	r1, #19
 80007f6:	483c      	ldr	r0, [pc, #240]	; (80008e8 <main+0x254>)
 80007f8:	f000 fcaa 	bl	8001150 <ITM0_Write>
 80007fc:	e00b      	b.n	8000816 <main+0x182>
			  }
			  else
				  {
					  ESP_HW_Init=0;
 80007fe:	4b39      	ldr	r3, [pc, #228]	; (80008e4 <main+0x250>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
					  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <main+0x1e0>)
 8000806:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800080a:	2b00      	cmp	r3, #0
 800080c:	d003      	beq.n	8000816 <main+0x182>
 800080e:	2115      	movs	r1, #21
 8000810:	4836      	ldr	r0, [pc, #216]	; (80008ec <main+0x258>)
 8000812:	f000 fc9d 	bl	8001150 <ITM0_Write>
				  }
		 }

     HAL_Delay(1000);
 8000816:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800081a:	f001 fb9f 	bl	8001f5c <HAL_Delay>

    /* USER CODE BEGIN 3 */


	  /**************[ INICIO PIDO ENVIAR DATOS ]**************/
  if (ESP_HW_Init==1)
 800081e:	4b31      	ldr	r3, [pc, #196]	; (80008e4 <main+0x250>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b01      	cmp	r3, #1
 8000824:	f040 80b2 	bne.w	800098c <main+0x2f8>
	  	  {
			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(lr._data_available))
 8000828:	4b31      	ldr	r3, [pc, #196]	; (80008f0 <main+0x25c>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b01      	cmp	r3, #1
 800082e:	f040 80ad 	bne.w	800098c <main+0x2f8>
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <main+0x1e0>)
 8000834:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000838:	2b00      	cmp	r3, #0
 800083a:	f040 80a7 	bne.w	800098c <main+0x2f8>
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <main+0x1e0>)
 8000840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000844:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000848:	f340 80a0 	ble.w	800098c <main+0x2f8>
 800084c:	4b29      	ldr	r3, [pc, #164]	; (80008f4 <main+0x260>)
 800084e:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8000852:	2b00      	cmp	r3, #0
 8000854:	f000 809a 	beq.w	800098c <main+0x2f8>
	  			{	lr._data_available=0;
 8000858:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <main+0x260>)
 800085a:	2200      	movs	r2, #0
 800085c:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
	  				wf_snd_flag_ticks=0;
 8000860:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <main+0x264>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
	  				WF_SND_FLAG=0;
 8000866:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <main+0x25c>)
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
		  			for(uint8_t i=0;i<=16;i++)
 800086c:	2300      	movs	r3, #0
 800086e:	77bb      	strb	r3, [r7, #30]
 8000870:	e052      	b.n	8000918 <main+0x284>
 8000872:	bf00      	nop
 8000874:	20000b14 	.word	0x20000b14
 8000878:	40020000 	.word	0x40020000
 800087c:	20000024 	.word	0x20000024
 8000880:	20000b1a 	.word	0x20000b1a
 8000884:	2000002c 	.word	0x2000002c
 8000888:	20000b3a 	.word	0x20000b3a
 800088c:	20000038 	.word	0x20000038
 8000890:	20000b4a 	.word	0x20000b4a
 8000894:	20000048 	.word	0x20000048
 8000898:	20000b5a 	.word	0x20000b5a
 800089c:	20000050 	.word	0x20000050
 80008a0:	20000b60 	.word	0x20000b60
 80008a4:	20000060 	.word	0x20000060
 80008a8:	20000b76 	.word	0x20000b76
 80008ac:	20000070 	.word	0x20000070
 80008b0:	20000b86 	.word	0x20000b86
 80008b4:	20000080 	.word	0x20000080
 80008b8:	20000b70 	.word	0x20000b70
 80008bc:	200022c4 	.word	0x200022c4
 80008c0:	20001874 	.word	0x20001874
 80008c4:	20000084 	.word	0x20000084
 80008c8:	10624dd3 	.word	0x10624dd3
 80008cc:	0800d3f4 	.word	0x0800d3f4
 80008d0:	0800d404 	.word	0x0800d404
 80008d4:	20002d14 	.word	0x20002d14
 80008d8:	20000244 	.word	0x20000244
 80008dc:	20002d18 	.word	0x20002d18
 80008e0:	20000288 	.word	0x20000288
 80008e4:	200022d8 	.word	0x200022d8
 80008e8:	0800d418 	.word	0x0800d418
 80008ec:	0800d42c 	.word	0x0800d42c
 80008f0:	200022e3 	.word	0x200022e3
 80008f4:	20000310 	.word	0x20000310
 80008f8:	20002d1c 	.word	0x20002d1c
		  				{
		  					datos[i]=ModBUS_F03_Read(&mb_lr,i);//datos[i]=ModBUS_F03_Read(&mb_lr,i);
 80008fc:	7fbc      	ldrb	r4, [r7, #30]
 80008fe:	7fbb      	ldrb	r3, [r7, #30]
 8000900:	4619      	mov	r1, r3
 8000902:	4864      	ldr	r0, [pc, #400]	; (8000a94 <main+0x400>)
 8000904:	f00a fe2f 	bl	800b566 <ModBUS_F03_Read>
 8000908:	4603      	mov	r3, r0
 800090a:	461a      	mov	r2, r3
 800090c:	4b62      	ldr	r3, [pc, #392]	; (8000a98 <main+0x404>)
 800090e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		  			for(uint8_t i=0;i<=16;i++)
 8000912:	7fbb      	ldrb	r3, [r7, #30]
 8000914:	3301      	adds	r3, #1
 8000916:	77bb      	strb	r3, [r7, #30]
 8000918:	7fbb      	ldrb	r3, [r7, #30]
 800091a:	2b10      	cmp	r3, #16
 800091c:	d9ee      	bls.n	80008fc <main+0x268>
		  				}

		  				if(httpPOST2(ENDPOINT, SERVER_IP,PORT,&datos,&decimal,16,TEST_1,post,body, 512))
 800091e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000922:	9305      	str	r3, [sp, #20]
 8000924:	4b5d      	ldr	r3, [pc, #372]	; (8000a9c <main+0x408>)
 8000926:	9304      	str	r3, [sp, #16]
 8000928:	4b5d      	ldr	r3, [pc, #372]	; (8000aa0 <main+0x40c>)
 800092a:	9303      	str	r3, [sp, #12]
 800092c:	2301      	movs	r3, #1
 800092e:	9302      	str	r3, [sp, #8]
 8000930:	2310      	movs	r3, #16
 8000932:	9301      	str	r3, [sp, #4]
 8000934:	4b5b      	ldr	r3, [pc, #364]	; (8000aa4 <main+0x410>)
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	4b57      	ldr	r3, [pc, #348]	; (8000a98 <main+0x404>)
 800093a:	4a5b      	ldr	r2, [pc, #364]	; (8000aa8 <main+0x414>)
 800093c:	495b      	ldr	r1, [pc, #364]	; (8000aac <main+0x418>)
 800093e:	485c      	ldr	r0, [pc, #368]	; (8000ab0 <main+0x41c>)
 8000940:	f009 fea6 	bl	800a690 <httpPOST2>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d020      	beq.n	800098c <main+0x2f8>
							{
							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 800094a:	4855      	ldr	r0, [pc, #340]	; (8000aa0 <main+0x40c>)
 800094c:	f7ff fc52 	bl	80001f4 <strlen>
 8000950:	4603      	mov	r3, r0
 8000952:	461a      	mov	r2, r3
 8000954:	2341      	movs	r3, #65	; 0x41
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2300      	movs	r3, #0
 800095a:	4951      	ldr	r1, [pc, #324]	; (8000aa0 <main+0x40c>)
 800095c:	4855      	ldr	r0, [pc, #340]	; (8000ab4 <main+0x420>)
 800095e:	f00b fa23 	bl	800bda8 <CopiaVector>
							wf._n_D2SND=strlen(post);
 8000962:	484f      	ldr	r0, [pc, #316]	; (8000aa0 <main+0x40c>)
 8000964:	f7ff fc46 	bl	80001f4 <strlen>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	4b52      	ldr	r3, [pc, #328]	; (8000ab8 <main+0x424>)
 800096e:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
								if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000972:	4b51      	ldr	r3, [pc, #324]	; (8000ab8 <main+0x424>)
 8000974:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000978:	2b02      	cmp	r3, #2
 800097a:	d807      	bhi.n	800098c <main+0x2f8>
								{
									EnviarDatos(&wf);
 800097c:	484e      	ldr	r0, [pc, #312]	; (8000ab8 <main+0x424>)
 800097e:	f004 fdff 	bl	8005580 <EnviarDatos>
									wf._estado_conexion=TCP_SND_EN_CURSO;
 8000982:	4b4d      	ldr	r3, [pc, #308]	; (8000ab8 <main+0x424>)
 8000984:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000988:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							}
	  			}
	  	  }
	  /**************[ FIN PIDO ENVIAR DATOS ]**************/

	  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 800098c:	4b4b      	ldr	r3, [pc, #300]	; (8000abc <main+0x428>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d003      	beq.n	800099c <main+0x308>
 8000994:	4b4a      	ldr	r3, [pc, #296]	; (8000ac0 <main+0x42c>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d140      	bne.n	8000a1e <main+0x38a>
	  		{
	  			if(FLAG_UART1==1)
 800099c:	4b47      	ldr	r3, [pc, #284]	; (8000abc <main+0x428>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d11c      	bne.n	80009de <main+0x34a>
	  				{
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 80009a4:	4b47      	ldr	r3, [pc, #284]	; (8000ac4 <main+0x430>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b47      	ldr	r3, [pc, #284]	; (8000ac8 <main+0x434>)
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2301      	movs	r3, #1
 80009ae:	4947      	ldr	r1, [pc, #284]	; (8000acc <main+0x438>)
 80009b0:	4847      	ldr	r0, [pc, #284]	; (8000ad0 <main+0x43c>)
 80009b2:	f00b f9f9 	bl	800bda8 <CopiaVector>
	  					FLAG_UART1=0;
 80009b6:	4b41      	ldr	r3, [pc, #260]	; (8000abc <main+0x428>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]

	  						if (error_rxdata==3)
 80009bc:	4b45      	ldr	r3, [pc, #276]	; (8000ad4 <main+0x440>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b03      	cmp	r3, #3
 80009c2:	d102      	bne.n	80009ca <main+0x336>
	  						{
	  							error_rxdata=0;
 80009c4:	4b43      	ldr	r3, [pc, #268]	; (8000ad4 <main+0x440>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	701a      	strb	r2, [r3, #0]
	  						}
	  						if (error_rxdata==1)
 80009ca:	4b42      	ldr	r3, [pc, #264]	; (8000ad4 <main+0x440>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d105      	bne.n	80009de <main+0x34a>
	  						{
	  							error_rxdata=5;
 80009d2:	4b40      	ldr	r3, [pc, #256]	; (8000ad4 <main+0x440>)
 80009d4:	2205      	movs	r2, #5
 80009d6:	701a      	strb	r2, [r3, #0]
	  							error_rxdata=0;
 80009d8:	4b3e      	ldr	r3, [pc, #248]	; (8000ad4 <main+0x440>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
	  						}
	  				}
	  			if(FLAG_TIMEOUT==1)
 80009de:	4b38      	ldr	r3, [pc, #224]	; (8000ac0 <main+0x42c>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d102      	bne.n	80009ec <main+0x358>
	  					{
	  						FLAG_TIMEOUT=0;
 80009e6:	4b36      	ldr	r3, [pc, #216]	; (8000ac0 <main+0x42c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
	  					}

	  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 80009ec:	4b3a      	ldr	r3, [pc, #232]	; (8000ad8 <main+0x444>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d114      	bne.n	8000a1e <main+0x38a>
	  				{
	  					/*************** Copio y proceso info recibida ***************/
	  					wf._n_orig=UART_RX_items;
 80009f4:	4b33      	ldr	r3, [pc, #204]	; (8000ac4 <main+0x430>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a2f      	ldr	r2, [pc, #188]	; (8000ab8 <main+0x424>)
 80009fa:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 80009fe:	4b31      	ldr	r3, [pc, #196]	; (8000ac4 <main+0x430>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	4b31      	ldr	r3, [pc, #196]	; (8000ac8 <main+0x434>)
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	2301      	movs	r3, #1
 8000a08:	4930      	ldr	r1, [pc, #192]	; (8000acc <main+0x438>)
 8000a0a:	4831      	ldr	r0, [pc, #196]	; (8000ad0 <main+0x43c>)
 8000a0c:	f00b f9cc 	bl	800bda8 <CopiaVector>
	  					resultado=AT_ESP8266_ND(&wf);
 8000a10:	4829      	ldr	r0, [pc, #164]	; (8000ab8 <main+0x424>)
 8000a12:	f004 fe9b 	bl	800574c <AT_ESP8266_ND>
 8000a16:	4603      	mov	r3, r0
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4b30      	ldr	r3, [pc, #192]	; (8000adc <main+0x448>)
 8000a1c:	701a      	strb	r2, [r3, #0]
	  					}

	  		}
// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT
	  		if((FLAG_UART2 == 1)||(lr.tmr_dly_ON==1))  //Evento de dato recibido LoRA debo verificar que es
 8000a1e:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <main+0x44c>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d005      	beq.n	8000a32 <main+0x39e>
 8000a26:	4b2f      	ldr	r3, [pc, #188]	; (8000ae4 <main+0x450>)
 8000a28:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	f040 80ea 	bne.w	8000c06 <main+0x572>
	  		{
	  			if(FLAG_UART2==1)
 8000a32:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <main+0x44c>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	f040 8098 	bne.w	8000b6c <main+0x4d8>
	  				{
	  				FLAG_UART2=0;
 8000a3c:	4b28      	ldr	r3, [pc, #160]	; (8000ae0 <main+0x44c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
	  				LoRa_decode(&lr);
 8000a42:	4828      	ldr	r0, [pc, #160]	; (8000ae4 <main+0x450>)
 8000a44:	f00a f854 	bl	800aaf0 <LoRa_decode>
	  				if(lr._data_available)
 8000a48:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <main+0x450>)
 8000a4a:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f000 808c 	beq.w	8000b6c <main+0x4d8>
	  				{
	  					CopiaVector(lr.dataRCV_hld,lr.dataRCV,lr._n_dataRCV,1,"D");
 8000a54:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <main+0x450>)
 8000a56:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	; 0x4d8
 8000a5a:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <main+0x454>)
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	4922      	ldr	r1, [pc, #136]	; (8000aec <main+0x458>)
 8000a62:	4823      	ldr	r0, [pc, #140]	; (8000af0 <main+0x45c>)
 8000a64:	f00b f9a0 	bl	800bda8 <CopiaVector>
	  					char num[6];
	  					int i=0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
	  					int n=0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
	  					int lnn=0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
	  					lnn=strlen(lr.dataRCV_hld);
 8000a74:	481e      	ldr	r0, [pc, #120]	; (8000af0 <main+0x45c>)
 8000a76:	f7ff fbbd 	bl	80001f4 <strlen>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	60fb      	str	r3, [r7, #12]
	  					while(i < lnn-1)
 8000a7e:	e070      	b.n	8000b62 <main+0x4ce>
	  					{
							if( i!=0) i++;
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d002      	beq.n	8000a8c <main+0x3f8>
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	61bb      	str	r3, [r7, #24]
							int j=0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]

								while(lr.dataRCV_hld[i] != ';')
 8000a90:	e049      	b.n	8000b26 <main+0x492>
 8000a92:	bf00      	nop
 8000a94:	20001874 	.word	0x20001874
 8000a98:	200022e4 	.word	0x200022e4
 8000a9c:	200020c4 	.word	0x200020c4
 8000aa0:	20001ec4 	.word	0x20001ec4
 8000aa4:	200022c4 	.word	0x200022c4
 8000aa8:	2000001c 	.word	0x2000001c
 8000aac:	2000000c 	.word	0x2000000c
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20000dac 	.word	0x20000dac
 8000ab8:	20000b14 	.word	0x20000b14
 8000abc:	200022dd 	.word	0x200022dd
 8000ac0:	200022dc 	.word	0x200022dc
 8000ac4:	20002d20 	.word	0x20002d20
 8000ac8:	20002d10 	.word	0x20002d10
 8000acc:	20002910 	.word	0x20002910
 8000ad0:	200011ac 	.word	0x200011ac
 8000ad4:	200022e0 	.word	0x200022e0
 8000ad8:	200022d8 	.word	0x200022d8
 8000adc:	200022df 	.word	0x200022df
 8000ae0:	200022de 	.word	0x200022de
 8000ae4:	20000310 	.word	0x20000310
 8000ae8:	0800d444 	.word	0x0800d444
 8000aec:	200004e6 	.word	0x200004e6
 8000af0:	20000666 	.word	0x20000666
								{
									if(lr.dataRCV_hld[i] != '.')
 8000af4:	4a58      	ldr	r2, [pc, #352]	; (8000c58 <main+0x5c4>)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	4413      	add	r3, r2
 8000afa:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b2e      	cmp	r3, #46	; 0x2e
 8000b02:	d00d      	beq.n	8000b20 <main+0x48c>
									{
										num[j]=lr.dataRCV_hld[i];
 8000b04:	4a54      	ldr	r2, [pc, #336]	; (8000c58 <main+0x5c4>)
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	4413      	add	r3, r2
 8000b0a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000b0e:	7819      	ldrb	r1, [r3, #0]
 8000b10:	1d3a      	adds	r2, r7, #4
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	4413      	add	r3, r2
 8000b16:	460a      	mov	r2, r1
 8000b18:	701a      	strb	r2, [r3, #0]
										j++;
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	613b      	str	r3, [r7, #16]
									}
									i++;
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	3301      	adds	r3, #1
 8000b24:	61bb      	str	r3, [r7, #24]
								while(lr.dataRCV_hld[i] != ';')
 8000b26:	4a4c      	ldr	r2, [pc, #304]	; (8000c58 <main+0x5c4>)
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b3b      	cmp	r3, #59	; 0x3b
 8000b34:	d1de      	bne.n	8000af4 <main+0x460>
								}
							num[j]='\0';
 8000b36:	1d3a      	adds	r2, r7, #4
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
							ModBUS_F03_Assign(&mb_lr,n,atoi(num,10));
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	b2dc      	uxtb	r4, r3
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	210a      	movs	r1, #10
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f00b f978 	bl	800be3e <atoi>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	461a      	mov	r2, r3
 8000b54:	4621      	mov	r1, r4
 8000b56:	4841      	ldr	r0, [pc, #260]	; (8000c5c <main+0x5c8>)
 8000b58:	f00a fcd6 	bl	800b508 <ModBUS_F03_Assign>
							n++;//Incremento posición  a almacenar
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	617b      	str	r3, [r7, #20]
	  					while(i < lnn-1)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	69ba      	ldr	r2, [r7, #24]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	db89      	blt.n	8000a80 <main+0x3ec>
	  					}
	  				}
	  				}

	  			if(lr.tmr_dly_ON==1)
 8000b6c:	4b3a      	ldr	r3, [pc, #232]	; (8000c58 <main+0x5c4>)
 8000b6e:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d147      	bne.n	8000c06 <main+0x572>
	  				{
	  					lr.tmr_dly_ON=0;
 8000b76:	4b38      	ldr	r3, [pc, #224]	; (8000c58 <main+0x5c4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
	  					LoRa_reset_sndTIMER(&lr,3000);
 8000b7e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000b82:	4835      	ldr	r0, [pc, #212]	; (8000c58 <main+0x5c4>)
 8000b84:	f009 ff98 	bl	800aab8 <LoRa_reset_sndTIMER>
						lr.dest_address[0]='\0';
 8000b88:	4b33      	ldr	r3, [pc, #204]	; (8000c58 <main+0x5c4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	759a      	strb	r2, [r3, #22]
						lr.txbuff[0]='\0';
 8000b8e:	4b32      	ldr	r3, [pc, #200]	; (8000c58 <main+0x5c4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
			  			strncat(lr.dest_address,"1",1);
 8000b96:	4832      	ldr	r0, [pc, #200]	; (8000c60 <main+0x5cc>)
 8000b98:	f7ff fb2c 	bl	80001f4 <strlen>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4b2f      	ldr	r3, [pc, #188]	; (8000c60 <main+0x5cc>)
 8000ba2:	4413      	add	r3, r2
 8000ba4:	492f      	ldr	r1, [pc, #188]	; (8000c64 <main+0x5d0>)
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	460b      	mov	r3, r1
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	8013      	strh	r3, [r2, #0]
			  			strncat(lr.txbuff,"prueba de envio de mensaje de texto",strlen("prueba de envio de mensaje de texto"));
 8000bae:	482e      	ldr	r0, [pc, #184]	; (8000c68 <main+0x5d4>)
 8000bb0:	f7ff fb20 	bl	80001f4 <strlen>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <main+0x5d4>)
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a2b      	ldr	r2, [pc, #172]	; (8000c6c <main+0x5d8>)
 8000bbe:	4614      	mov	r4, r2
 8000bc0:	469c      	mov	ip, r3
 8000bc2:	f104 0e20 	add.w	lr, r4, #32
 8000bc6:	4665      	mov	r5, ip
 8000bc8:	4626      	mov	r6, r4
 8000bca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bcc:	6028      	str	r0, [r5, #0]
 8000bce:	6069      	str	r1, [r5, #4]
 8000bd0:	60aa      	str	r2, [r5, #8]
 8000bd2:	60eb      	str	r3, [r5, #12]
 8000bd4:	3410      	adds	r4, #16
 8000bd6:	f10c 0c10 	add.w	ip, ip, #16
 8000bda:	4574      	cmp	r4, lr
 8000bdc:	d1f3      	bne.n	8000bc6 <main+0x532>
 8000bde:	4663      	mov	r3, ip
 8000be0:	4622      	mov	r2, r4
 8000be2:	6810      	ldr	r0, [r2, #0]
 8000be4:	6018      	str	r0, [r3, #0]
			  			lr.txitems=strlen("prueba de envio de mensaje de texto");
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <main+0x5c4>)
 8000be8:	2223      	movs	r2, #35	; 0x23
 8000bea:	f8c3 27e0 	str.w	r2, [r3, #2016]	; 0x7e0
		  				lr.estado=_SENT;										//
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <main+0x5c4>)
 8000bf0:	2214      	movs	r2, #20
 8000bf2:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
			  			error=LoRa_Send(&lr,&huart2);
 8000bf6:	491e      	ldr	r1, [pc, #120]	; (8000c70 <main+0x5dc>)
 8000bf8:	4817      	ldr	r0, [pc, #92]	; (8000c58 <main+0x5c4>)
 8000bfa:	f009 feaf 	bl	800a95c <LoRa_Send>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <main+0x5e0>)
 8000c04:	701a      	strb	r2, [r3, #0]
	  				}
	  		}

	  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <main+0x5e4>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d108      	bne.n	8000c20 <main+0x58c>
	  			{
	  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000c0e:	2201      	movs	r2, #1
 8000c10:	491a      	ldr	r1, [pc, #104]	; (8000c7c <main+0x5e8>)
 8000c12:	481b      	ldr	r0, [pc, #108]	; (8000c80 <main+0x5ec>)
 8000c14:	f008 f844 	bl	8008ca0 <WiFi_Conn_ND>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <main+0x5f0>)
 8000c1e:	701a      	strb	r2, [r3, #0]
	  			}
	  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000c20:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <main+0x5f4>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	f47f adfa 	bne.w	800081e <main+0x18a>
	  			{

	  				HW_RESET(&wf);
 8000c2a:	4815      	ldr	r0, [pc, #84]	; (8000c80 <main+0x5ec>)
 8000c2c:	f004 fbba 	bl	80053a4 <HW_RESET>
	  				HAL_Delay(5000);//210419
 8000c30:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c34:	f001 f992 	bl	8001f5c <HAL_Delay>
	  				esp_restart=0;
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <main+0x5f4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
	  				wf._estado=0;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <main+0x5ec>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  				wf._estado_conexion=100;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <main+0x5ec>)
 8000c48:	2264      	movs	r2, #100	; 0x64
 8000c4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  				ConectarWIFI(&wf);
 8000c4e:	480c      	ldr	r0, [pc, #48]	; (8000c80 <main+0x5ec>)
 8000c50:	f004 fbfc 	bl	800544c <ConectarWIFI>
  if (ESP_HW_Init==1)
 8000c54:	e5e3      	b.n	800081e <main+0x18a>
 8000c56:	bf00      	nop
 8000c58:	20000310 	.word	0x20000310
 8000c5c:	20001874 	.word	0x20001874
 8000c60:	20000326 	.word	0x20000326
 8000c64:	0800d448 	.word	0x0800d448
 8000c68:	200007ec 	.word	0x200007ec
 8000c6c:	0800d44c 	.word	0x0800d44c
 8000c70:	20000288 	.word	0x20000288
 8000c74:	200022d5 	.word	0x200022d5
 8000c78:	200022d8 	.word	0x200022d8
 8000c7c:	20000244 	.word	0x20000244
 8000c80:	20000b14 	.word	0x20000b14
 8000c84:	200022e2 	.word	0x200022e2
 8000c88:	200022e1 	.word	0x200022e1

08000c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b094      	sub	sp, #80	; 0x50
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	f107 0320 	add.w	r3, r7, #32
 8000c96:	2230      	movs	r2, #48	; 0x30
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f00b facf 	bl	800c23e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	4b27      	ldr	r3, [pc, #156]	; (8000d54 <SystemClock_Config+0xc8>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	4a26      	ldr	r2, [pc, #152]	; (8000d54 <SystemClock_Config+0xc8>)
 8000cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc0:	4b24      	ldr	r3, [pc, #144]	; (8000d54 <SystemClock_Config+0xc8>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <SystemClock_Config+0xcc>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a20      	ldr	r2, [pc, #128]	; (8000d58 <SystemClock_Config+0xcc>)
 8000cd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <SystemClock_Config+0xcc>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000cfc:	230c      	movs	r3, #12
 8000cfe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000d00:	2360      	movs	r3, #96	; 0x60
 8000d02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d04:	2302      	movs	r3, #2
 8000d06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0c:	f107 0320 	add.w	r3, r7, #32
 8000d10:	4618      	mov	r0, r3
 8000d12:	f001 fdb9 	bl	8002888 <HAL_RCC_OscConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d1c:	f000 fde0 	bl	80018e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d20:	230f      	movs	r3, #15
 8000d22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d24:	2302      	movs	r3, #2
 8000d26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	2103      	movs	r1, #3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f002 f81b 	bl	8002d78 <HAL_RCC_ClockConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d48:	f000 fdca 	bl	80018e0 <Error_Handler>
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	3750      	adds	r7, #80	; 0x50
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40007000 	.word	0x40007000

08000d5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08e      	sub	sp, #56	; 0x38
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d70:	f107 0320 	add.w	r3, r7, #32
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
 8000d88:	615a      	str	r2, [r3, #20]
 8000d8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d8c:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <MX_TIM2_Init+0xf4>)
 8000d8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8000d94:	4b2e      	ldr	r3, [pc, #184]	; (8000e50 <MX_TIM2_Init+0xf4>)
 8000d96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9c:	4b2c      	ldr	r3, [pc, #176]	; (8000e50 <MX_TIM2_Init+0xf4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8000da2:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <MX_TIM2_Init+0xf4>)
 8000da4:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000da8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000daa:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <MX_TIM2_Init+0xf4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000db0:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <MX_TIM2_Init+0xf4>)
 8000db2:	2280      	movs	r2, #128	; 0x80
 8000db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000db6:	4826      	ldr	r0, [pc, #152]	; (8000e50 <MX_TIM2_Init+0xf4>)
 8000db8:	f002 f9be 	bl	8003138 <HAL_TIM_Base_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000dc2:	f000 fd8d 	bl	80018e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	481f      	ldr	r0, [pc, #124]	; (8000e50 <MX_TIM2_Init+0xf4>)
 8000dd4:	f002 fdc6 	bl	8003964 <HAL_TIM_ConfigClockSource>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000dde:	f000 fd7f 	bl	80018e0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000de2:	481b      	ldr	r0, [pc, #108]	; (8000e50 <MX_TIM2_Init+0xf4>)
 8000de4:	f002 f9f7 	bl	80031d6 <HAL_TIM_OC_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000dee:	f000 fd77 	bl	80018e0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000df2:	2108      	movs	r1, #8
 8000df4:	4816      	ldr	r0, [pc, #88]	; (8000e50 <MX_TIM2_Init+0xf4>)
 8000df6:	f002 fbf7 	bl	80035e8 <HAL_TIM_OnePulse_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000e00:	f000 fd6e 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e04:	2300      	movs	r3, #0
 8000e06:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e0c:	f107 0320 	add.w	r3, r7, #32
 8000e10:	4619      	mov	r1, r3
 8000e12:	480f      	ldr	r0, [pc, #60]	; (8000e50 <MX_TIM2_Init+0xf4>)
 8000e14:	f003 f962 	bl	80040dc <HAL_TIMEx_MasterConfigSynchronization>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8000e1e:	f000 fd5f 	bl	80018e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8000e22:	2320      	movs	r3, #32
 8000e24:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2200      	movs	r2, #0
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_TIM2_Init+0xf4>)
 8000e3a:	f002 fd37 	bl	80038ac <HAL_TIM_OC_ConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8000e44:	f000 fd4c 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e48:	bf00      	nop
 8000e4a:	3738      	adds	r7, #56	; 0x38
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	200001b4 	.word	0x200001b4

08000e54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08e      	sub	sp, #56	; 0x38
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e68:	f107 0320 	add.w	r3, r7, #32
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e84:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <MX_TIM3_Init+0xf0>)
 8000e86:	4a30      	ldr	r2, [pc, #192]	; (8000f48 <MX_TIM3_Init+0xf4>)
 8000e88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8000e8a:	4b2e      	ldr	r3, [pc, #184]	; (8000f44 <MX_TIM3_Init+0xf0>)
 8000e8c:	2264      	movs	r2, #100	; 0x64
 8000e8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e90:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <MX_TIM3_Init+0xf0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 8000e96:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <MX_TIM3_Init+0xf0>)
 8000e98:	2296      	movs	r2, #150	; 0x96
 8000e9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9c:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <MX_TIM3_Init+0xf0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ea2:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <MX_TIM3_Init+0xf0>)
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ea8:	4826      	ldr	r0, [pc, #152]	; (8000f44 <MX_TIM3_Init+0xf0>)
 8000eaa:	f002 f945 	bl	8003138 <HAL_TIM_Base_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000eb4:	f000 fd14 	bl	80018e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ebe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	481f      	ldr	r0, [pc, #124]	; (8000f44 <MX_TIM3_Init+0xf0>)
 8000ec6:	f002 fd4d 	bl	8003964 <HAL_TIM_ConfigClockSource>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000ed0:	f000 fd06 	bl	80018e0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000ed4:	481b      	ldr	r0, [pc, #108]	; (8000f44 <MX_TIM3_Init+0xf0>)
 8000ed6:	f002 f97e 	bl	80031d6 <HAL_TIM_OC_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000ee0:	f000 fcfe 	bl	80018e0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8000ee4:	2108      	movs	r1, #8
 8000ee6:	4817      	ldr	r0, [pc, #92]	; (8000f44 <MX_TIM3_Init+0xf0>)
 8000ee8:	f002 fb7e 	bl	80035e8 <HAL_TIM_OnePulse_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000ef2:	f000 fcf5 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000efe:	f107 0320 	add.w	r3, r7, #32
 8000f02:	4619      	mov	r1, r3
 8000f04:	480f      	ldr	r0, [pc, #60]	; (8000f44 <MX_TIM3_Init+0xf0>)
 8000f06:	f003 f8e9 	bl	80040dc <HAL_TIMEx_MasterConfigSynchronization>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000f10:	f000 fce6 	bl	80018e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8000f14:	2320      	movs	r3, #32
 8000f16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2200      	movs	r2, #0
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4806      	ldr	r0, [pc, #24]	; (8000f44 <MX_TIM3_Init+0xf0>)
 8000f2c:	f002 fcbe 	bl	80038ac <HAL_TIM_OC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000f36:	f000 fcd3 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	3738      	adds	r7, #56	; 0x38
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200001fc 	.word	0x200001fc
 8000f48:	40000400 	.word	0x40000400

08000f4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <MX_USART1_UART_Init+0x50>)
 8000f54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f72:	220c      	movs	r2, #12
 8000f74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f84:	f003 f92c 	bl	80041e0 <HAL_UART_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f8e:	f000 fca7 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000244 	.word	0x20000244
 8000f9c:	40011000 	.word	0x40011000

08000fa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <MX_USART2_UART_Init+0x50>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fd8:	f003 f902 	bl	80041e0 <HAL_UART_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fe2:	f000 fc7d 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000288 	.word	0x20000288
 8000ff0:	40004400 	.word	0x40004400

08000ff4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <MX_USART6_UART_Init+0x50>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001004:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 800102c:	f003 f8d8 	bl	80041e0 <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001036:	f000 fc53 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200002cc 	.word	0x200002cc
 8001044:	40011400 	.word	0x40011400

08001048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	4b38      	ldr	r3, [pc, #224]	; (8001144 <MX_GPIO_Init+0xfc>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a37      	ldr	r2, [pc, #220]	; (8001144 <MX_GPIO_Init+0xfc>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b35      	ldr	r3, [pc, #212]	; (8001144 <MX_GPIO_Init+0xfc>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b31      	ldr	r3, [pc, #196]	; (8001144 <MX_GPIO_Init+0xfc>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a30      	ldr	r2, [pc, #192]	; (8001144 <MX_GPIO_Init+0xfc>)
 8001084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <MX_GPIO_Init+0xfc>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <MX_GPIO_Init+0xfc>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a29      	ldr	r2, [pc, #164]	; (8001144 <MX_GPIO_Init+0xfc>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b27      	ldr	r3, [pc, #156]	; (8001144 <MX_GPIO_Init+0xfc>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b23      	ldr	r3, [pc, #140]	; (8001144 <MX_GPIO_Init+0xfc>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a22      	ldr	r2, [pc, #136]	; (8001144 <MX_GPIO_Init+0xfc>)
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b20      	ldr	r3, [pc, #128]	; (8001144 <MX_GPIO_Init+0xfc>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010d4:	481c      	ldr	r0, [pc, #112]	; (8001148 <MX_GPIO_Init+0x100>)
 80010d6:	f001 fba3 	bl	8002820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WIFI_EN_Pin, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e0:	481a      	ldr	r0, [pc, #104]	; (800114c <MX_GPIO_Init+0x104>)
 80010e2:	f001 fb9d 	bl	8002820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 80010e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	4812      	ldr	r0, [pc, #72]	; (8001148 <MX_GPIO_Init+0x100>)
 8001100:	f001 f926 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_BTN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin;
 8001104:	2301      	movs	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_BTN_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <MX_GPIO_Init+0x104>)
 8001118:	f001 f91a 	bl	8002350 <HAL_GPIO_Init>



  /*Configure GPIO pin : WIFI_EN_Pin */
  GPIO_InitStruct.Pin = WIFI_EN_Pin;
 800111c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_EN_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_GPIO_Init+0x104>)
 8001136:	f001 f90b 	bl	8002350 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800113a:	bf00      	nop
 800113c:	3728      	adds	r7, #40	; 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40020800 	.word	0x40020800
 800114c:	40020000 	.word	0x40020000

08001150 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	e009      	b.n	8001174 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fa6b 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3301      	adds	r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	dbf1      	blt.n	8001160 <ITM0_Write+0x10>
  }
  return len;
 800117c:	683b      	ldr	r3, [r7, #0]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 800118c:	4b55      	ldr	r3, [pc, #340]	; (80012e4 <SysTick_Handler+0x15c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	4a54      	ldr	r2, [pc, #336]	; (80012e4 <SysTick_Handler+0x15c>)
 8001194:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 8001196:	4b54      	ldr	r3, [pc, #336]	; (80012e8 <SysTick_Handler+0x160>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	3301      	adds	r3, #1
 800119c:	4a52      	ldr	r2, [pc, #328]	; (80012e8 <SysTick_Handler+0x160>)
 800119e:	6013      	str	r3, [r2, #0]
	if(mb_lr._w_answer) MB_TOUT_ticks++;
 80011a0:	4b52      	ldr	r3, [pc, #328]	; (80012ec <SysTick_Handler+0x164>)
 80011a2:	7a1b      	ldrb	r3, [r3, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <SysTick_Handler+0x2a>
 80011a8:	4b51      	ldr	r3, [pc, #324]	; (80012f0 <SysTick_Handler+0x168>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	4a50      	ldr	r2, [pc, #320]	; (80012f0 <SysTick_Handler+0x168>)
 80011b0:	6013      	str	r3, [r2, #0]
	if ( mb_lr._w_answer && (mb_lr._timeout < MB_TOUT_ticks))
 80011b2:	4b4e      	ldr	r3, [pc, #312]	; (80012ec <SysTick_Handler+0x164>)
 80011b4:	7a1b      	ldrb	r3, [r3, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00c      	beq.n	80011d4 <SysTick_Handler+0x4c>
 80011ba:	4b4c      	ldr	r3, [pc, #304]	; (80012ec <SysTick_Handler+0x164>)
 80011bc:	88db      	ldrh	r3, [r3, #6]
 80011be:	461a      	mov	r2, r3
 80011c0:	4b4b      	ldr	r3, [pc, #300]	; (80012f0 <SysTick_Handler+0x168>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	da05      	bge.n	80011d4 <SysTick_Handler+0x4c>
		{
			mb_lr._w_answer=0;
 80011c8:	4b48      	ldr	r3, [pc, #288]	; (80012ec <SysTick_Handler+0x164>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	721a      	strb	r2, [r3, #8]
			MB_TOUT_ticks=0;
 80011ce:	4b48      	ldr	r3, [pc, #288]	; (80012f0 <SysTick_Handler+0x168>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
		}
// ENVIO DATOS LoRa ---------------------------------------------------------------//

	if(lr.tmr_dly_en==1)
 80011d4:	4b47      	ldr	r3, [pc, #284]	; (80012f4 <SysTick_Handler+0x16c>)
 80011d6:	f893 37ed 	ldrb.w	r3, [r3, #2029]	; 0x7ed
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d116      	bne.n	800120c <SysTick_Handler+0x84>
	{
		lr.tmr_dlyCNT++;
 80011de:	4b45      	ldr	r3, [pc, #276]	; (80012f4 <SysTick_Handler+0x16c>)
 80011e0:	f8d3 37f4 	ldr.w	r3, [r3, #2036]	; 0x7f4
 80011e4:	3301      	adds	r3, #1
 80011e6:	4a43      	ldr	r2, [pc, #268]	; (80012f4 <SysTick_Handler+0x16c>)
 80011e8:	f8c2 37f4 	str.w	r3, [r2, #2036]	; 0x7f4
		if(lr.tmr_dlyCNT > lr.tmr_dly)
 80011ec:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <SysTick_Handler+0x16c>)
 80011ee:	f8d3 27f4 	ldr.w	r2, [r3, #2036]	; 0x7f4
 80011f2:	4b40      	ldr	r3, [pc, #256]	; (80012f4 <SysTick_Handler+0x16c>)
 80011f4:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
 80011f8:	429a      	cmp	r2, r3
 80011fa:	dd07      	ble.n	800120c <SysTick_Handler+0x84>
		{
			lr.tmr_dly_ON=1;
 80011fc:	4b3d      	ldr	r3, [pc, #244]	; (80012f4 <SysTick_Handler+0x16c>)
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
			lr.tmr_dly_en=0;
 8001204:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <SysTick_Handler+0x16c>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		}
	}
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 800120c:	4b3a      	ldr	r3, [pc, #232]	; (80012f8 <SysTick_Handler+0x170>)
 800120e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001212:	f240 2261 	movw	r2, #609	; 0x261
 8001216:	4293      	cmp	r3, r2
 8001218:	d005      	beq.n	8001226 <SysTick_Handler+0x9e>
 800121a:	4b37      	ldr	r3, [pc, #220]	; (80012f8 <SysTick_Handler+0x170>)
 800121c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001220:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001224:	d109      	bne.n	800123a <SysTick_Handler+0xb2>
 8001226:	4b34      	ldr	r3, [pc, #208]	; (80012f8 <SysTick_Handler+0x170>)
 8001228:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800122c:	2b00      	cmp	r3, #0
 800122e:	d104      	bne.n	800123a <SysTick_Handler+0xb2>
 8001230:	4b32      	ldr	r3, [pc, #200]	; (80012fc <SysTick_Handler+0x174>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	4a31      	ldr	r2, [pc, #196]	; (80012fc <SysTick_Handler+0x174>)
 8001238:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 2000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;
 800123a:	4b30      	ldr	r3, [pc, #192]	; (80012fc <SysTick_Handler+0x174>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001242:	db0c      	blt.n	800125e <SysTick_Handler+0xd6>
 8001244:	4b2c      	ldr	r3, [pc, #176]	; (80012f8 <SysTick_Handler+0x170>)
 8001246:	f8d3 3ab4 	ldr.w	r3, [r3, #2740]	; 0xab4
 800124a:	2b01      	cmp	r3, #1
 800124c:	d007      	beq.n	800125e <SysTick_Handler+0xd6>
 800124e:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <SysTick_Handler+0x170>)
 8001250:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <SysTick_Handler+0xd6>
 8001258:	4b29      	ldr	r3, [pc, #164]	; (8001300 <SysTick_Handler+0x178>)
 800125a:	2201      	movs	r2, #1
 800125c:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <SysTick_Handler+0x15c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b64      	cmp	r3, #100	; 0x64
 8001264:	d113      	bne.n	800128e <SysTick_Handler+0x106>
  {

	  ms_ticks=0;
 8001266:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <SysTick_Handler+0x15c>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 800126c:	4b25      	ldr	r3, [pc, #148]	; (8001304 <SysTick_Handler+0x17c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	4a24      	ldr	r2, [pc, #144]	; (8001304 <SysTick_Handler+0x17c>)
 8001274:	6013      	str	r3, [r2, #0]

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127a:	4823      	ldr	r0, [pc, #140]	; (8001308 <SysTick_Handler+0x180>)
 800127c:	f001 fae9 	bl	8002852 <HAL_GPIO_TogglePin>

	  if(min_ticks==2)//if(min_ticks==10)
 8001280:	4b20      	ldr	r3, [pc, #128]	; (8001304 <SysTick_Handler+0x17c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d102      	bne.n	800128e <SysTick_Handler+0x106>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <SysTick_Handler+0x17c>)
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 800128e:	4b1f      	ldr	r3, [pc, #124]	; (800130c <SysTick_Handler+0x184>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d104      	bne.n	80012a0 <SysTick_Handler+0x118>
 8001296:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <SysTick_Handler+0x188>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	4a1c      	ldr	r2, [pc, #112]	; (8001310 <SysTick_Handler+0x188>)
 800129e:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <SysTick_Handler+0x188>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	dd0f      	ble.n	80012c8 <SysTick_Handler+0x140>
	{
		USART1_ticks=0;
 80012a8:	4b19      	ldr	r3, [pc, #100]	; (8001310 <SysTick_Handler+0x188>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <SysTick_Handler+0x18c>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <SysTick_Handler+0x184>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <SysTick_Handler+0x190>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a17      	ldr	r2, [pc, #92]	; (800131c <SysTick_Handler+0x194>)
 80012c0:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <SysTick_Handler+0x190>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c8:	f000 fe28 	bl	8001f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <SysTick_Handler+0x170>)
 80012ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d126      	bne.n	8001324 <SysTick_Handler+0x19c>
	{
		ticks++;
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <SysTick_Handler+0x198>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	4a10      	ldr	r2, [pc, #64]	; (8001320 <SysTick_Handler+0x198>)
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	e023      	b.n	800132a <SysTick_Handler+0x1a2>
 80012e2:	bf00      	nop
 80012e4:	20002308 	.word	0x20002308
 80012e8:	20002d28 	.word	0x20002d28
 80012ec:	20001874 	.word	0x20001874
 80012f0:	20002d2c 	.word	0x20002d2c
 80012f4:	20000310 	.word	0x20000310
 80012f8:	20000b14 	.word	0x20000b14
 80012fc:	20002d1c 	.word	0x20002d1c
 8001300:	200022e3 	.word	0x200022e3
 8001304:	2000230c 	.word	0x2000230c
 8001308:	40020800 	.word	0x40020800
 800130c:	200022db 	.word	0x200022db
 8001310:	20002d3c 	.word	0x20002d3c
 8001314:	20002d40 	.word	0x20002d40
 8001318:	20002d38 	.word	0x20002d38
 800131c:	20002d44 	.word	0x20002d44
 8001320:	20002d30 	.word	0x20002d30
	}
	else
	{
		ticks=0;
 8001324:	4b4f      	ldr	r3, [pc, #316]	; (8001464 <SysTick_Handler+0x2dc>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
	}

    if((wf._estado_conexion==TCP_CONN_EN_CURSO) || (wf._estado_conexion==CONEXION_EN_CURSO)) wf._ticks2++;	//Conteo
 800132a:	4b4f      	ldr	r3, [pc, #316]	; (8001468 <SysTick_Handler+0x2e0>)
 800132c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001330:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001334:	d004      	beq.n	8001340 <SysTick_Handler+0x1b8>
 8001336:	4b4c      	ldr	r3, [pc, #304]	; (8001468 <SysTick_Handler+0x2e0>)
 8001338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800133c:	2bc8      	cmp	r3, #200	; 0xc8
 800133e:	d106      	bne.n	800134e <SysTick_Handler+0x1c6>
 8001340:	4b49      	ldr	r3, [pc, #292]	; (8001468 <SysTick_Handler+0x2e0>)
 8001342:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 8001346:	3301      	adds	r3, #1
 8001348:	4a47      	ldr	r2, [pc, #284]	; (8001468 <SysTick_Handler+0x2e0>)
 800134a:	f8c2 3cbc 	str.w	r3, [r2, #3260]	; 0xcbc

 	if((wf._estado_conexion==CONEXION_EN_CURSO) && (wf._ticks2 >10000))
 800134e:	4b46      	ldr	r3, [pc, #280]	; (8001468 <SysTick_Handler+0x2e0>)
 8001350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001354:	2bc8      	cmp	r3, #200	; 0xc8
 8001356:	d10d      	bne.n	8001374 <SysTick_Handler+0x1ec>
 8001358:	4b43      	ldr	r3, [pc, #268]	; (8001468 <SysTick_Handler+0x2e0>)
 800135a:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 800135e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001362:	4293      	cmp	r3, r2
 8001364:	dd06      	ble.n	8001374 <SysTick_Handler+0x1ec>
 	{
 		wf._ticks2=0;
 8001366:	4b40      	ldr	r3, [pc, #256]	; (8001468 <SysTick_Handler+0x2e0>)
 8001368:	2200      	movs	r2, #0
 800136a:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
 		esp_restart=1;
 800136e:	4b3f      	ldr	r3, [pc, #252]	; (800146c <SysTick_Handler+0x2e4>)
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]
 	}
 	if(wf._estado_conexion==TCP_CONN_ERROR || wf._estado_conexion==CONEXION_ERROR) wf._ticks2++;
 8001374:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <SysTick_Handler+0x2e0>)
 8001376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800137a:	f240 225d 	movw	r2, #605	; 0x25d
 800137e:	4293      	cmp	r3, r2
 8001380:	d004      	beq.n	800138c <SysTick_Handler+0x204>
 8001382:	4b39      	ldr	r3, [pc, #228]	; (8001468 <SysTick_Handler+0x2e0>)
 8001384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001388:	2bcd      	cmp	r3, #205	; 0xcd
 800138a:	d106      	bne.n	800139a <SysTick_Handler+0x212>
 800138c:	4b36      	ldr	r3, [pc, #216]	; (8001468 <SysTick_Handler+0x2e0>)
 800138e:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 8001392:	3301      	adds	r3, #1
 8001394:	4a34      	ldr	r2, [pc, #208]	; (8001468 <SysTick_Handler+0x2e0>)
 8001396:	f8c2 3cbc 	str.w	r3, [r2, #3260]	; 0xcbc

if(wf._ejecucion==1)
 800139a:	4b33      	ldr	r3, [pc, #204]	; (8001468 <SysTick_Handler+0x2e0>)
 800139c:	f8d3 3ab4 	ldr.w	r3, [r3, #2740]	; 0xab4
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d158      	bne.n	8001456 <SysTick_Handler+0x2ce>
	{
		if (FLAG_TIMEOUT!=1)
 80013a4:	4b32      	ldr	r3, [pc, #200]	; (8001470 <SysTick_Handler+0x2e8>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d017      	beq.n	80013dc <SysTick_Handler+0x254>
		{
			if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 80013ac:	4b2e      	ldr	r3, [pc, #184]	; (8001468 <SysTick_Handler+0x2e0>)
 80013ae:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d006      	beq.n	80013c4 <SysTick_Handler+0x23c>
 80013b6:	4b2c      	ldr	r3, [pc, #176]	; (8001468 <SysTick_Handler+0x2e0>)
 80013b8:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80013bc:	3301      	adds	r3, #1
 80013be:	4a2a      	ldr	r2, [pc, #168]	; (8001468 <SysTick_Handler+0x2e0>)
 80013c0:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
			if(wf._instruccion==2) wf._ticks2++;
 80013c4:	4b28      	ldr	r3, [pc, #160]	; (8001468 <SysTick_Handler+0x2e0>)
 80013c6:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d106      	bne.n	80013dc <SysTick_Handler+0x254>
 80013ce:	4b26      	ldr	r3, [pc, #152]	; (8001468 <SysTick_Handler+0x2e0>)
 80013d0:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 80013d4:	3301      	adds	r3, #1
 80013d6:	4a24      	ldr	r2, [pc, #144]	; (8001468 <SysTick_Handler+0x2e0>)
 80013d8:	f8c2 3cbc 	str.w	r3, [r2, #3260]	; 0xcbc
		}
		if ((wf._instruccion!=2)&&(wf._ticks > 5500))
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <SysTick_Handler+0x2e0>)
 80013de:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d018      	beq.n	8001418 <SysTick_Handler+0x290>
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <SysTick_Handler+0x2e0>)
 80013e8:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80013ec:	f241 527c 	movw	r2, #5500	; 0x157c
 80013f0:	4293      	cmp	r3, r2
 80013f2:	dd11      	ble.n	8001418 <SysTick_Handler+0x290>
		{
			FLAG_TIMEOUT=1;
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <SysTick_Handler+0x2e8>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <SysTick_Handler+0x2ec>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	f242 020c 	movw	r2, #8204	; 0x200c
 8001404:	4293      	cmp	r3, r2
 8001406:	d107      	bne.n	8001418 <SysTick_Handler+0x290>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8001408:	2201      	movs	r2, #1
 800140a:	491b      	ldr	r1, [pc, #108]	; (8001478 <SysTick_Handler+0x2f0>)
 800140c:	4819      	ldr	r0, [pc, #100]	; (8001474 <SysTick_Handler+0x2ec>)
 800140e:	f003 f83a 	bl	8004486 <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001412:	4b1a      	ldr	r3, [pc, #104]	; (800147c <SysTick_Handler+0x2f4>)
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
			}
		}
		if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <SysTick_Handler+0x2e0>)
 800141a:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 800141e:	2b02      	cmp	r3, #2
 8001420:	d11d      	bne.n	800145e <SysTick_Handler+0x2d6>
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <SysTick_Handler+0x2e0>)
 8001424:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 8001428:	f245 0214 	movw	r2, #20500	; 0x5014
 800142c:	4293      	cmp	r3, r2
 800142e:	dd16      	ble.n	800145e <SysTick_Handler+0x2d6>
		{
			FLAG_TIMEOUT=1;
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <SysTick_Handler+0x2e8>)
 8001432:	2201      	movs	r2, #1
 8001434:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <SysTick_Handler+0x2ec>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	f242 020c 	movw	r2, #8204	; 0x200c
 8001440:	4293      	cmp	r3, r2
 8001442:	d10c      	bne.n	800145e <SysTick_Handler+0x2d6>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8001444:	2201      	movs	r2, #1
 8001446:	490c      	ldr	r1, [pc, #48]	; (8001478 <SysTick_Handler+0x2f0>)
 8001448:	480a      	ldr	r0, [pc, #40]	; (8001474 <SysTick_Handler+0x2ec>)
 800144a:	f003 f81c 	bl	8004486 <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <SysTick_Handler+0x2f4>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
	else
	{
		wf._ticks=0;
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 8001454:	e003      	b.n	800145e <SysTick_Handler+0x2d6>
		wf._ticks=0;
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <SysTick_Handler+0x2e0>)
 8001458:	2200      	movs	r2, #0
 800145a:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20002d30 	.word	0x20002d30
 8001468:	20000b14 	.word	0x20000b14
 800146c:	200022e1 	.word	0x200022e1
 8001470:	200022dc 	.word	0x200022dc
 8001474:	20000244 	.word	0x20000244
 8001478:	20002d14 	.word	0x20002d14
 800147c:	200022d9 	.word	0x200022d9

08001480 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a22      	ldr	r2, [pc, #136]	; (8001518 <HAL_UART_ErrorCallback+0x98>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d11c      	bne.n	80014cc <HAL_UART_ErrorCallback+0x4c>
	{
		 volatile int aore=0;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		 wf._debug_count9++;
 800149a:	4b20      	ldr	r3, [pc, #128]	; (800151c <HAL_UART_ErrorCallback+0x9c>)
 800149c:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 80014a0:	3301      	adds	r3, #1
 80014a2:	4a1e      	ldr	r2, [pc, #120]	; (800151c <HAL_UART_ErrorCallback+0x9c>)
 80014a4:	f8c2 3d28 	str.w	r3, [r2, #3368]	; 0xd28
		 aore=ERRUART->Instance->SR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	617b      	str	r3, [r7, #20]
		 bore=ERRUART->Instance->DR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	613b      	str	r3, [r7, #16]
		 HAL_UART_DeInit(ERRUART);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f002 fede 	bl	800427a <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 80014be:	f7ff fd45 	bl	8000f4c <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 80014c2:	2201      	movs	r2, #1
 80014c4:	4916      	ldr	r1, [pc, #88]	; (8001520 <HAL_UART_ErrorCallback+0xa0>)
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f002 ffdd 	bl	8004486 <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a14      	ldr	r2, [pc, #80]	; (8001524 <HAL_UART_ErrorCallback+0xa4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d11c      	bne.n	8001510 <HAL_UART_ErrorCallback+0x90>
	{
		 volatile int aore=0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]

		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		 wf._debug_count9++;
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <HAL_UART_ErrorCallback+0x9c>)
 80014e0:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 80014e4:	3301      	adds	r3, #1
 80014e6:	4a0d      	ldr	r2, [pc, #52]	; (800151c <HAL_UART_ErrorCallback+0x9c>)
 80014e8:	f8c2 3d28 	str.w	r3, [r2, #3368]	; 0xd28
		 aore=ERRUART->Instance->SR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	60fb      	str	r3, [r7, #12]
		 bore=ERRUART->Instance->DR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	60bb      	str	r3, [r7, #8]
		 HAL_UART_DeInit(ERRUART);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f002 febc 	bl	800427a <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 8001502:	f7ff fd4d 	bl	8000fa0 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART2_RX_byte,1);
 8001506:	2201      	movs	r2, #1
 8001508:	4907      	ldr	r1, [pc, #28]	; (8001528 <HAL_UART_ErrorCallback+0xa8>)
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f002 ffbb 	bl	8004486 <HAL_UART_Receive_IT>
	}
}
 8001510:	bf00      	nop
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40011000 	.word	0x40011000
 800151c:	20000b14 	.word	0x20000b14
 8001520:	20002d14 	.word	0x20002d14
 8001524:	40004400 	.word	0x40004400
 8001528:	20002d18 	.word	0x20002d18

0800152c <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a2c      	ldr	r2, [pc, #176]	; (80015ec <HAL_UART_RxCpltCallback+0xc0>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d124      	bne.n	8001588 <HAL_UART_RxCpltCallback+0x5c>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 800153e:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <HAL_UART_RxCpltCallback+0xc4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a2c      	ldr	r2, [pc, #176]	; (80015f4 <HAL_UART_RxCpltCallback+0xc8>)
 8001544:	7811      	ldrb	r1, [r2, #0]
 8001546:	4a2c      	ldr	r2, [pc, #176]	; (80015f8 <HAL_UART_RxCpltCallback+0xcc>)
 8001548:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 800154a:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <HAL_UART_RxCpltCallback+0xc4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	3301      	adds	r3, #1
 8001550:	4a27      	ldr	r2, [pc, #156]	; (80015f0 <HAL_UART_RxCpltCallback+0xc4>)
 8001552:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=1022) UART_RX_pos=1022;
 8001554:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <HAL_UART_RxCpltCallback+0xc4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f240 32fd 	movw	r2, #1021	; 0x3fd
 800155c:	4293      	cmp	r3, r2
 800155e:	dd03      	ble.n	8001568 <HAL_UART_RxCpltCallback+0x3c>
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <HAL_UART_RxCpltCallback+0xc4>)
 8001562:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001566:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8001568:	2100      	movs	r1, #0
 800156a:	4824      	ldr	r0, [pc, #144]	; (80015fc <HAL_UART_RxCpltCallback+0xd0>)
 800156c:	f001 fe8c 	bl	8003288 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 8001570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001574:	2201      	movs	r2, #1
 8001576:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 8001578:	4b21      	ldr	r3, [pc, #132]	; (8001600 <HAL_UART_RxCpltCallback+0xd4>)
 800157a:	2201      	movs	r2, #1
 800157c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 800157e:	2201      	movs	r2, #1
 8001580:	491c      	ldr	r1, [pc, #112]	; (80015f4 <HAL_UART_RxCpltCallback+0xc8>)
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f002 ff7f 	bl	8004486 <HAL_UART_Receive_IT>
		 }
// LoRa USART2 TIMER3
	if(INTSERIE->Instance==USART2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_UART_RxCpltCallback+0xd8>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d127      	bne.n	80015e2 <HAL_UART_RxCpltCallback+0xb6>
		 {
			UART2_RX_vect[UART2_RX_pos]=UART2_RX_byte[0];
 8001592:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <HAL_UART_RxCpltCallback+0xdc>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1d      	ldr	r2, [pc, #116]	; (800160c <HAL_UART_RxCpltCallback+0xe0>)
 8001598:	7811      	ldrb	r1, [r2, #0]
 800159a:	4a1d      	ldr	r2, [pc, #116]	; (8001610 <HAL_UART_RxCpltCallback+0xe4>)
 800159c:	54d1      	strb	r1, [r2, r3]
			UART2_RX_pos++;
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <HAL_UART_RxCpltCallback+0xdc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	4a18      	ldr	r2, [pc, #96]	; (8001608 <HAL_UART_RxCpltCallback+0xdc>)
 80015a6:	6013      	str	r3, [r2, #0]
			if(UART2_RX_pos>=512) UART2_RX_pos=512;
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <HAL_UART_RxCpltCallback+0xdc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015b0:	db03      	blt.n	80015ba <HAL_UART_RxCpltCallback+0x8e>
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_UART_RxCpltCallback+0xdc>)
 80015b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80015ba:	2201      	movs	r2, #1
 80015bc:	2102      	movs	r1, #2
 80015be:	4815      	ldr	r0, [pc, #84]	; (8001614 <HAL_UART_RxCpltCallback+0xe8>)
 80015c0:	f001 f92e 	bl	8002820 <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 80015c4:	2100      	movs	r1, #0
 80015c6:	4814      	ldr	r0, [pc, #80]	; (8001618 <HAL_UART_RxCpltCallback+0xec>)
 80015c8:	f001 fe5e 	bl	8003288 <HAL_TIM_OC_Start_IT>
			TIM3->CNT=1;
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <HAL_UART_RxCpltCallback+0xf0>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART2_TMR=1;	//Habilito Timeout de software
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_UART_RxCpltCallback+0xf4>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART2_RX_byte,1);
 80015d8:	2201      	movs	r2, #1
 80015da:	490c      	ldr	r1, [pc, #48]	; (800160c <HAL_UART_RxCpltCallback+0xe0>)
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f002 ff52 	bl	8004486 <HAL_UART_Receive_IT>
		 }
 }
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40011000 	.word	0x40011000
 80015f0:	20002d48 	.word	0x20002d48
 80015f4:	20002d14 	.word	0x20002d14
 80015f8:	20002310 	.word	0x20002310
 80015fc:	200001b4 	.word	0x200001b4
 8001600:	200022d9 	.word	0x200022d9
 8001604:	40004400 	.word	0x40004400
 8001608:	20002d4c 	.word	0x20002d4c
 800160c:	20002d18 	.word	0x20002d18
 8001610:	20002710 	.word	0x20002710
 8001614:	40020000 	.word	0x40020000
 8001618:	200001fc 	.word	0x200001fc
 800161c:	40000400 	.word	0x40000400
 8001620:	200022da 	.word	0x200022da

08001624 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af02      	add	r7, sp, #8
 800162a:	6078      	str	r0, [r7, #4]
// WiFi	USART 1 TIMER2
		if(TIMER->Instance==TIM2)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001634:	d12d      	bne.n	8001692 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8001636:	2100      	movs	r1, #0
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f001 ff23 	bl	8003484 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 800163e:	4b39      	ldr	r3, [pc, #228]	; (8001724 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8001640:	2201      	movs	r2, #1
 8001642:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 8001644:	4b38      	ldr	r3, [pc, #224]	; (8001728 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 800164a:	4b38      	ldr	r3, [pc, #224]	; (800172c <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a38      	ldr	r2, [pc, #224]	; (8001730 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8001650:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 8001652:	4b36      	ldr	r3, [pc, #216]	; (800172c <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[1022]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8001658:	4b36      	ldr	r3, [pc, #216]	; (8001734 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 800165a:	2200      	movs	r2, #0
 800165c:	f883 23fe 	strb.w	r2, [r3, #1022]	; 0x3fe
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 8001660:	4b33      	ldr	r3, [pc, #204]	; (8001730 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b34      	ldr	r3, [pc, #208]	; (8001738 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	2301      	movs	r3, #1
 800166a:	4932      	ldr	r1, [pc, #200]	; (8001734 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 800166c:	4833      	ldr	r0, [pc, #204]	; (800173c <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 800166e:	f00a fb9b 	bl	800bda8 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8001672:	2201      	movs	r2, #1
 8001674:	4932      	ldr	r1, [pc, #200]	; (8001740 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8001676:	4833      	ldr	r0, [pc, #204]	; (8001744 <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 8001678:	f002 ff05 	bl	8004486 <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 800167c:	4b32      	ldr	r3, [pc, #200]	; (8001748 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 800167e:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8001682:	2b01      	cmp	r3, #1
 8001684:	d105      	bne.n	8001692 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 8001686:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4619      	mov	r1, r3
 800168c:	482b      	ldr	r0, [pc, #172]	; (800173c <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 800168e:	f7ff fd5f 	bl	8001150 <ITM0_Write>
				 }
		}
// LoRa USART2 TIMER3
		if(TIMER->Instance==TIM3)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a2d      	ldr	r2, [pc, #180]	; (800174c <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d13f      	bne.n	800171c <HAL_TIM_OC_DelayElapsedCallback+0xf8>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 800169c:	2100      	movs	r1, #0
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f001 fef0 	bl	8003484 <HAL_TIM_OC_Stop_IT>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2102      	movs	r1, #2
 80016a8:	4829      	ldr	r0, [pc, #164]	; (8001750 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 80016aa:	f001 f8b9 	bl	8002820 <HAL_GPIO_WritePin>
				 FLAG_UART2=1;
 80016ae:	4b29      	ldr	r3, [pc, #164]	; (8001754 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	701a      	strb	r2, [r3, #0]
				 EN_UART2_TMR=0;
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
				 UART2_RX_items=UART2_RX_pos;
 80016ba:	4b28      	ldr	r3, [pc, #160]	; (800175c <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a28      	ldr	r2, [pc, #160]	; (8001760 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80016c0:	6013      	str	r3, [r2, #0]
				 UART2_RX_pos=0;
 80016c2:	4b26      	ldr	r3, [pc, #152]	; (800175c <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
				 UART2_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 80016c8:	4b26      	ldr	r3, [pc, #152]	; (8001764 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(lr.rxbuff,UART2_RX_vect,UART2_RX_items,1,CMP_VECT);
 80016d0:	4b23      	ldr	r3, [pc, #140]	; (8001760 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b18      	ldr	r3, [pc, #96]	; (8001738 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	2301      	movs	r3, #1
 80016da:	4922      	ldr	r1, [pc, #136]	; (8001764 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 80016dc:	4822      	ldr	r0, [pc, #136]	; (8001768 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 80016de:	f00a fb63 	bl	800bda8 <CopiaVector>
				 lr.rxitems=UART2_RX_items;
 80016e2:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a21      	ldr	r2, [pc, #132]	; (800176c <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 80016e8:	f8c2 37dc 	str.w	r3, [r2, #2012]	; 0x7dc
				 HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 80016ec:	2201      	movs	r2, #1
 80016ee:	4920      	ldr	r1, [pc, #128]	; (8001770 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 80016f0:	4820      	ldr	r0, [pc, #128]	; (8001774 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 80016f2:	f002 fec8 	bl	8004486 <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 80016f8:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d10d      	bne.n	800171c <HAL_TIM_OC_DelayElapsedCallback+0xf8>
				 {
					 ITM0_Write("\r\nData LoRa recibida = ",strlen("\r\nData LoRa recibida = "));
 8001700:	2117      	movs	r1, #23
 8001702:	481d      	ldr	r0, [pc, #116]	; (8001778 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 8001704:	f7ff fd24 	bl	8001150 <ITM0_Write>
					 ITM0_Write((uint8_t *)UART2_RX_vect,UART2_RX_items);
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4619      	mov	r1, r3
 800170e:	4815      	ldr	r0, [pc, #84]	; (8001764 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8001710:	f7ff fd1e 	bl	8001150 <ITM0_Write>
					 ITM0_Write("\r\n",strlen("\r\n"));
 8001714:	2102      	movs	r1, #2
 8001716:	4819      	ldr	r0, [pc, #100]	; (800177c <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 8001718:	f7ff fd1a 	bl	8001150 <ITM0_Write>
				 }
		}
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200022dd 	.word	0x200022dd
 8001728:	200022d9 	.word	0x200022d9
 800172c:	20002d48 	.word	0x20002d48
 8001730:	20002d20 	.word	0x20002d20
 8001734:	20002310 	.word	0x20002310
 8001738:	20002d10 	.word	0x20002d10
 800173c:	20002910 	.word	0x20002910
 8001740:	20002d14 	.word	0x20002d14
 8001744:	20000244 	.word	0x20000244
 8001748:	20000b14 	.word	0x20000b14
 800174c:	40000400 	.word	0x40000400
 8001750:	40020000 	.word	0x40020000
 8001754:	200022de 	.word	0x200022de
 8001758:	200022da 	.word	0x200022da
 800175c:	20002d4c 	.word	0x20002d4c
 8001760:	20002d24 	.word	0x20002d24
 8001764:	20002710 	.word	0x20002710
 8001768:	20000366 	.word	0x20000366
 800176c:	20000310 	.word	0x20000310
 8001770:	20002d18 	.word	0x20002d18
 8001774:	20000288 	.word	0x20000288
 8001778:	0800d470 	.word	0x0800d470
 800177c:	0800d488 	.word	0x0800d488

08001780 <ESP8266_HW_Init>:

uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af06      	add	r7, sp, #24
 8001786:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 8001788:	2364      	movs	r3, #100	; 0x64
 800178a:	220c      	movs	r2, #12
 800178c:	4945      	ldr	r1, [pc, #276]	; (80018a4 <ESP8266_HW_Init+0x124>)
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f002 fda2 	bl	80042d8 <HAL_UART_Transmit>
		  HAL_Delay(500);
 8001794:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001798:	f000 fbe0 	bl	8001f5c <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 800179c:	4b42      	ldr	r3, [pc, #264]	; (80018a8 <ESP8266_HW_Init+0x128>)
 800179e:	2205      	movs	r2, #5
 80017a0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
		  wf._n_orig=UART_RX_items;
 80017a4:	4b41      	ldr	r3, [pc, #260]	; (80018ac <ESP8266_HW_Init+0x12c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a3f      	ldr	r2, [pc, #252]	; (80018a8 <ESP8266_HW_Init+0x128>)
 80017aa:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 80017ae:	e00e      	b.n	80017ce <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 80017b0:	4b3e      	ldr	r3, [pc, #248]	; (80018ac <ESP8266_HW_Init+0x12c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a3c      	ldr	r2, [pc, #240]	; (80018a8 <ESP8266_HW_Init+0x128>)
 80017b6:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
			  	  if (ESP_ticks>=5000)
 80017ba:	4b3d      	ldr	r3, [pc, #244]	; (80018b0 <ESP8266_HW_Init+0x130>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f241 3287 	movw	r2, #4999	; 0x1387
 80017c2:	4293      	cmp	r3, r2
 80017c4:	dd03      	ble.n	80017ce <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 80017c6:	4b3b      	ldr	r3, [pc, #236]	; (80018b4 <ESP8266_HW_Init+0x134>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	701a      	strb	r2, [r3, #0]
			  		 break;
 80017cc:	e014      	b.n	80017f8 <ESP8266_HW_Init+0x78>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 80017ce:	4b3a      	ldr	r3, [pc, #232]	; (80018b8 <ESP8266_HW_Init+0x138>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	9205      	str	r2, [sp, #20]
 80017d4:	9304      	str	r3, [sp, #16]
 80017d6:	4b39      	ldr	r3, [pc, #228]	; (80018bc <ESP8266_HW_Init+0x13c>)
 80017d8:	9303      	str	r3, [sp, #12]
 80017da:	4b39      	ldr	r3, [pc, #228]	; (80018c0 <ESP8266_HW_Init+0x140>)
 80017dc:	9302      	str	r3, [sp, #8]
 80017de:	4b39      	ldr	r3, [pc, #228]	; (80018c4 <ESP8266_HW_Init+0x144>)
 80017e0:	9301      	str	r3, [sp, #4]
 80017e2:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <ESP8266_HW_Init+0x148>)
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	4b39      	ldr	r3, [pc, #228]	; (80018cc <ESP8266_HW_Init+0x14c>)
 80017e8:	4a39      	ldr	r2, [pc, #228]	; (80018d0 <ESP8266_HW_Init+0x150>)
 80017ea:	493a      	ldr	r1, [pc, #232]	; (80018d4 <ESP8266_HW_Init+0x154>)
 80017ec:	483a      	ldr	r0, [pc, #232]	; (80018d8 <ESP8266_HW_Init+0x158>)
 80017ee:	f009 fee9 	bl	800b5c4 <FT_String_ND>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d1db      	bne.n	80017b0 <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 80017f8:	4b2e      	ldr	r3, [pc, #184]	; (80018b4 <ESP8266_HW_Init+0x134>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d12b      	bne.n	8001858 <ESP8266_HW_Init+0xd8>
		  {
			  wf._n_fcomp=strlen("ready");
 8001800:	4b29      	ldr	r3, [pc, #164]	; (80018a8 <ESP8266_HW_Init+0x128>)
 8001802:	2205      	movs	r2, #5
 8001804:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
			  wf._n_orig=UART_RX_items;
 8001808:	4b28      	ldr	r3, [pc, #160]	; (80018ac <ESP8266_HW_Init+0x12c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a26      	ldr	r2, [pc, #152]	; (80018a8 <ESP8266_HW_Init+0x128>)
 800180e:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 8001812:	e00a      	b.n	800182a <ESP8266_HW_Init+0xaa>
			  {
				  wf._n_orig=UART_RX_items;
 8001814:	4b25      	ldr	r3, [pc, #148]	; (80018ac <ESP8266_HW_Init+0x12c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a23      	ldr	r2, [pc, #140]	; (80018a8 <ESP8266_HW_Init+0x128>)
 800181a:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
				  if (ESP_ticks>=5000)
 800181e:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <ESP8266_HW_Init+0x130>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f241 3287 	movw	r2, #4999	; 0x1387
 8001826:	4293      	cmp	r3, r2
 8001828:	dc15      	bgt.n	8001856 <ESP8266_HW_Init+0xd6>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <ESP8266_HW_Init+0x138>)
 800182c:	2200      	movs	r2, #0
 800182e:	9205      	str	r2, [sp, #20]
 8001830:	9304      	str	r3, [sp, #16]
 8001832:	4b22      	ldr	r3, [pc, #136]	; (80018bc <ESP8266_HW_Init+0x13c>)
 8001834:	9303      	str	r3, [sp, #12]
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <ESP8266_HW_Init+0x140>)
 8001838:	9302      	str	r3, [sp, #8]
 800183a:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <ESP8266_HW_Init+0x144>)
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <ESP8266_HW_Init+0x148>)
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	4b22      	ldr	r3, [pc, #136]	; (80018cc <ESP8266_HW_Init+0x14c>)
 8001844:	4a22      	ldr	r2, [pc, #136]	; (80018d0 <ESP8266_HW_Init+0x150>)
 8001846:	4923      	ldr	r1, [pc, #140]	; (80018d4 <ESP8266_HW_Init+0x154>)
 8001848:	4823      	ldr	r0, [pc, #140]	; (80018d8 <ESP8266_HW_Init+0x158>)
 800184a:	f009 febb 	bl	800b5c4 <FT_String_ND>
 800184e:	4603      	mov	r3, r0
 8001850:	2b01      	cmp	r3, #1
 8001852:	d1df      	bne.n	8001814 <ESP8266_HW_Init+0x94>
 8001854:	e000      	b.n	8001858 <ESP8266_HW_Init+0xd8>
					 {
					 break;
 8001856:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 8001858:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <ESP8266_HW_Init+0x130>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001860:	4293      	cmp	r3, r2
 8001862:	dc06      	bgt.n	8001872 <ESP8266_HW_Init+0xf2>
		  {
			  ESP_REinit=10;
 8001864:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <ESP8266_HW_Init+0x15c>)
 8001866:	220a      	movs	r2, #10
 8001868:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <ESP8266_HW_Init+0x130>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	e008      	b.n	8001884 <ESP8266_HW_Init+0x104>
		  }
		  else
		  {
			  ESP_REinit++;
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <ESP8266_HW_Init+0x15c>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <ESP8266_HW_Init+0x15c>)
 800187c:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <ESP8266_HW_Init+0x130>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 8001884:	4b15      	ldr	r3, [pc, #84]	; (80018dc <ESP8266_HW_Init+0x15c>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b05      	cmp	r3, #5
 800188a:	f67f af7d 	bls.w	8001788 <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <ESP8266_HW_Init+0x15c>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b0a      	cmp	r3, #10
 8001894:	d101      	bne.n	800189a <ESP8266_HW_Init+0x11a>
	  {
		  return(1);
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <ESP8266_HW_Init+0x11c>
	  }
	  else
	  {
		  return(0);
 800189a:	2300      	movs	r3, #0
	  }
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	0800d48c 	.word	0x0800d48c
 80018a8:	20000b14 	.word	0x20000b14
 80018ac:	20002d20 	.word	0x20002d20
 80018b0:	20002d28 	.word	0x20002d28
 80018b4:	200022d7 	.word	0x200022d7
 80018b8:	20001868 	.word	0x20001868
 80018bc:	200015ac 	.word	0x200015ac
 80018c0:	20002d34 	.word	0x20002d34
 80018c4:	20001800 	.word	0x20001800
 80018c8:	200013ac 	.word	0x200013ac
 80018cc:	2000180c 	.word	0x2000180c
 80018d0:	0800d49c 	.word	0x0800d49c
 80018d4:	200017f8 	.word	0x200017f8
 80018d8:	20002910 	.word	0x20002910
 80018dc:	200022d6 	.word	0x200022d6

080018e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e4:	b672      	cpsid	i
}
 80018e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <Error_Handler+0x8>
	...

080018ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_MspInit+0x4c>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <HAL_MspInit+0x4c>)
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001900:	6453      	str	r3, [r2, #68]	; 0x44
 8001902:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <HAL_MspInit+0x4c>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_MspInit+0x4c>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	4a08      	ldr	r2, [pc, #32]	; (8001938 <HAL_MspInit+0x4c>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_MspInit+0x4c>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800

0800193c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800194c:	d116      	bne.n	800197c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <HAL_TIM_Base_MspInit+0x80>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	4a19      	ldr	r2, [pc, #100]	; (80019bc <HAL_TIM_Base_MspInit+0x80>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6413      	str	r3, [r2, #64]	; 0x40
 800195e:	4b17      	ldr	r3, [pc, #92]	; (80019bc <HAL_TIM_Base_MspInit+0x80>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	201c      	movs	r0, #28
 8001970:	f000 fc17 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001974:	201c      	movs	r0, #28
 8001976:	f000 fc30 	bl	80021da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800197a:	e01a      	b.n	80019b2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <HAL_TIM_Base_MspInit+0x84>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d115      	bne.n	80019b2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <HAL_TIM_Base_MspInit+0x80>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <HAL_TIM_Base_MspInit+0x80>)
 8001990:	f043 0302 	orr.w	r3, r3, #2
 8001994:	6413      	str	r3, [r2, #64]	; 0x40
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_TIM_Base_MspInit+0x80>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2100      	movs	r1, #0
 80019a6:	201d      	movs	r0, #29
 80019a8:	f000 fbfb 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019ac:	201d      	movs	r0, #29
 80019ae:	f000 fc14 	bl	80021da <HAL_NVIC_EnableIRQ>
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40000400 	.word	0x40000400

080019c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08e      	sub	sp, #56	; 0x38
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a54      	ldr	r2, [pc, #336]	; (8001b34 <HAL_UART_MspInit+0x170>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d135      	bne.n	8001a52 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
 80019ea:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HAL_UART_MspInit+0x174>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a52      	ldr	r2, [pc, #328]	; (8001b38 <HAL_UART_MspInit+0x174>)
 80019f0:	f043 0310 	orr.w	r3, r3, #16
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b50      	ldr	r3, [pc, #320]	; (8001b38 <HAL_UART_MspInit+0x174>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	623b      	str	r3, [r7, #32]
 8001a00:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
 8001a06:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <HAL_UART_MspInit+0x174>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a4b      	ldr	r2, [pc, #300]	; (8001b38 <HAL_UART_MspInit+0x174>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b49      	ldr	r3, [pc, #292]	; (8001b38 <HAL_UART_MspInit+0x174>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_WF_Pin|USART1_RX_WF_Pin;
 8001a1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a30:	2307      	movs	r3, #7
 8001a32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4840      	ldr	r0, [pc, #256]	; (8001b3c <HAL_UART_MspInit+0x178>)
 8001a3c:	f000 fc88 	bl	8002350 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	2025      	movs	r0, #37	; 0x25
 8001a46:	f000 fbac 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a4a:	2025      	movs	r0, #37	; 0x25
 8001a4c:	f000 fbc5 	bl	80021da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a50:	e06b      	b.n	8001b2a <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a3a      	ldr	r2, [pc, #232]	; (8001b40 <HAL_UART_MspInit+0x17c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d134      	bne.n	8001ac6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	4b35      	ldr	r3, [pc, #212]	; (8001b38 <HAL_UART_MspInit+0x174>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	4a34      	ldr	r2, [pc, #208]	; (8001b38 <HAL_UART_MspInit+0x174>)
 8001a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6c:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <HAL_UART_MspInit+0x174>)
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <HAL_UART_MspInit+0x174>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	4a2d      	ldr	r2, [pc, #180]	; (8001b38 <HAL_UART_MspInit+0x174>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6313      	str	r3, [r2, #48]	; 0x30
 8001a88:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <HAL_UART_MspInit+0x174>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART2_TX_LR_Pin|USART2_RX_LR_Pin;
 8001a94:	230c      	movs	r3, #12
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aa4:	2307      	movs	r3, #7
 8001aa6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aac:	4619      	mov	r1, r3
 8001aae:	4823      	ldr	r0, [pc, #140]	; (8001b3c <HAL_UART_MspInit+0x178>)
 8001ab0:	f000 fc4e 	bl	8002350 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2026      	movs	r0, #38	; 0x26
 8001aba:	f000 fb72 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001abe:	2026      	movs	r0, #38	; 0x26
 8001ac0:	f000 fb8b 	bl	80021da <HAL_NVIC_EnableIRQ>
}
 8001ac4:	e031      	b.n	8001b2a <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a1e      	ldr	r2, [pc, #120]	; (8001b44 <HAL_UART_MspInit+0x180>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d12c      	bne.n	8001b2a <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_UART_MspInit+0x174>)
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad8:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <HAL_UART_MspInit+0x174>)
 8001ada:	f043 0320 	orr.w	r3, r3, #32
 8001ade:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae0:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_UART_MspInit+0x174>)
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae4:	f003 0320 	and.w	r3, r3, #32
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_UART_MspInit+0x174>)
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	4a10      	ldr	r2, [pc, #64]	; (8001b38 <HAL_UART_MspInit+0x174>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6313      	str	r3, [r2, #48]	; 0x30
 8001afc:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_UART_MspInit+0x174>)
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b08:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b1a:	2308      	movs	r3, #8
 8001b1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	; (8001b3c <HAL_UART_MspInit+0x178>)
 8001b26:	f000 fc13 	bl	8002350 <HAL_GPIO_Init>
}
 8001b2a:	bf00      	nop
 8001b2c:	3738      	adds	r7, #56	; 0x38
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40011000 	.word	0x40011000
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020000 	.word	0x40020000
 8001b40:	40004400 	.word	0x40004400
 8001b44:	40011400 	.word	0x40011400

08001b48 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a1c      	ldr	r2, [pc, #112]	; (8001bc8 <HAL_UART_MspDeInit+0x80>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d10e      	bne.n	8001b78 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <HAL_UART_MspDeInit+0x84>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	4a1b      	ldr	r2, [pc, #108]	; (8001bcc <HAL_UART_MspDeInit+0x84>)
 8001b60:	f023 0310 	bic.w	r3, r3, #16
 8001b64:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART1_TX_WF_Pin|USART1_RX_WF_Pin);
 8001b66:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001b6a:	4819      	ldr	r0, [pc, #100]	; (8001bd0 <HAL_UART_MspDeInit+0x88>)
 8001b6c:	f000 fd74 	bl	8002658 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001b70:	2025      	movs	r0, #37	; 0x25
 8001b72:	f000 fb40 	bl	80021f6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8001b76:	e022      	b.n	8001bbe <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a15      	ldr	r2, [pc, #84]	; (8001bd4 <HAL_UART_MspDeInit+0x8c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d10d      	bne.n	8001b9e <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_UART_MspDeInit+0x84>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	4a11      	ldr	r2, [pc, #68]	; (8001bcc <HAL_UART_MspDeInit+0x84>)
 8001b88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b8c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART2_TX_LR_Pin|USART2_RX_LR_Pin);
 8001b8e:	210c      	movs	r1, #12
 8001b90:	480f      	ldr	r0, [pc, #60]	; (8001bd0 <HAL_UART_MspDeInit+0x88>)
 8001b92:	f000 fd61 	bl	8002658 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001b96:	2026      	movs	r0, #38	; 0x26
 8001b98:	f000 fb2d 	bl	80021f6 <HAL_NVIC_DisableIRQ>
}
 8001b9c:	e00f      	b.n	8001bbe <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART6)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <HAL_UART_MspDeInit+0x90>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d10a      	bne.n	8001bbe <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART6_CLK_DISABLE();
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HAL_UART_MspDeInit+0x84>)
 8001baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bac:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <HAL_UART_MspDeInit+0x84>)
 8001bae:	f023 0320 	bic.w	r3, r3, #32
 8001bb2:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8001bb4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001bb8:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <HAL_UART_MspDeInit+0x88>)
 8001bba:	f000 fd4d 	bl	8002658 <HAL_GPIO_DeInit>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40011000 	.word	0x40011000
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	40004400 	.word	0x40004400
 8001bd8:	40011400 	.word	0x40011400

08001bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <NMI_Handler+0x4>

08001be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be6:	e7fe      	b.n	8001be6 <HardFault_Handler+0x4>

08001be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <MemManage_Handler+0x4>

08001bee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <BusFault_Handler+0x4>

08001bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <UsageFault_Handler+0x4>

08001bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <TIM2_IRQHandler+0x10>)
 8001c2a:	f001 fd37 	bl	800369c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200001b4 	.word	0x200001b4

08001c38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <TIM3_IRQHandler+0x10>)
 8001c3e:	f001 fd2d 	bl	800369c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200001fc 	.word	0x200001fc

08001c4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <USART1_IRQHandler+0x10>)
 8001c52:	f002 fc49 	bl	80044e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000244 	.word	0x20000244

08001c60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <USART2_IRQHandler+0x10>)
 8001c66:	f002 fc3f 	bl	80044e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000288 	.word	0x20000288

08001c74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
	return 1;
 8001c78:	2301      	movs	r3, #1
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_kill>:

int _kill(int pid, int sig)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c8e:	f00a fb93 	bl	800c3b8 <__errno>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2216      	movs	r2, #22
 8001c96:	601a      	str	r2, [r3, #0]
	return -1;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_exit>:

void _exit (int status)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ffe7 	bl	8001c84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cb6:	e7fe      	b.n	8001cb6 <_exit+0x12>

08001cb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	e00a      	b.n	8001ce0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cca:	f3af 8000 	nop.w
 8001cce:	4601      	mov	r1, r0
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	60ba      	str	r2, [r7, #8]
 8001cd6:	b2ca      	uxtb	r2, r1
 8001cd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	dbf0      	blt.n	8001cca <_read+0x12>
	}

return len;
 8001ce8:	687b      	ldr	r3, [r7, #4]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	e009      	b.n	8001d18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	60ba      	str	r2, [r7, #8]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	3301      	adds	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	dbf1      	blt.n	8001d04 <_write+0x12>
	}
	return len;
 8001d20:	687b      	ldr	r3, [r7, #4]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <_close>:

int _close(int file)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
	return -1;
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d52:	605a      	str	r2, [r3, #4]
	return 0;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <_isatty>:

int _isatty(int file)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
	return 1;
 8001d6a:	2301      	movs	r3, #1
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
	return 0;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d9c:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <_sbrk+0x5c>)
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <_sbrk+0x60>)
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d102      	bne.n	8001db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <_sbrk+0x64>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <_sbrk+0x68>)
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d207      	bcs.n	8001dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc4:	f00a faf8 	bl	800c3b8 <__errno>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	220c      	movs	r2, #12
 8001dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd2:	e009      	b.n	8001de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <_sbrk+0x64>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <_sbrk+0x64>)
 8001de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de6:	68fb      	ldr	r3, [r7, #12]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20020000 	.word	0x20020000
 8001df4:	00000400 	.word	0x00000400
 8001df8:	20002d50 	.word	0x20002d50
 8001dfc:	20002ea8 	.word	0x20002ea8

08001e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <SystemInit+0x20>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0a:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <SystemInit+0x20>)
 8001e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e28:	480d      	ldr	r0, [pc, #52]	; (8001e60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e2a:	490e      	ldr	r1, [pc, #56]	; (8001e64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e2c:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e30:	e002      	b.n	8001e38 <LoopCopyDataInit>

08001e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e36:	3304      	adds	r3, #4

08001e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e3c:	d3f9      	bcc.n	8001e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e40:	4c0b      	ldr	r4, [pc, #44]	; (8001e70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e44:	e001      	b.n	8001e4a <LoopFillZerobss>

08001e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e48:	3204      	adds	r2, #4

08001e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e4c:	d3fb      	bcc.n	8001e46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e4e:	f7ff ffd7 	bl	8001e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e52:	f00a fab7 	bl	800c3c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e56:	f7fe fc1d 	bl	8000694 <main>
  bx  lr    
 8001e5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e64:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8001e68:	0800db7c 	.word	0x0800db7c
  ldr r2, =_sbss
 8001e6c:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8001e70:	20002ea4 	.word	0x20002ea4

08001e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC_IRQHandler>
	...

08001e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <HAL_Init+0x40>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0d      	ldr	r2, [pc, #52]	; (8001eb8 <HAL_Init+0x40>)
 8001e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_Init+0x40>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <HAL_Init+0x40>)
 8001e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_Init+0x40>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <HAL_Init+0x40>)
 8001e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea0:	2003      	movs	r0, #3
 8001ea2:	f000 f973 	bl	800218c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea6:	200f      	movs	r0, #15
 8001ea8:	f000 f808 	bl	8001ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eac:	f7ff fd1e 	bl	80018ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023c00 	.word	0x40023c00

08001ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_InitTick+0x54>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_InitTick+0x58>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f999 	bl	8002212 <HAL_SYSTICK_Config>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00e      	b.n	8001f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b0f      	cmp	r3, #15
 8001eee:	d80a      	bhi.n	8001f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef8:	f000 f953 	bl	80021a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001efc:	4a06      	ldr	r2, [pc, #24]	; (8001f18 <HAL_InitTick+0x5c>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e000      	b.n	8001f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000084 	.word	0x20000084
 8001f14:	2000008c 	.word	0x2000008c
 8001f18:	20000088 	.word	0x20000088

08001f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_IncTick+0x20>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_IncTick+0x24>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <HAL_IncTick+0x24>)
 8001f2e:	6013      	str	r3, [r2, #0]
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	2000008c 	.word	0x2000008c
 8001f40:	20002d54 	.word	0x20002d54

08001f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return uwTick;
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <HAL_GetTick+0x14>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20002d54 	.word	0x20002d54

08001f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f64:	f7ff ffee 	bl	8001f44 <HAL_GetTick>
 8001f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f74:	d005      	beq.n	8001f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <HAL_Delay+0x44>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4413      	add	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f82:	bf00      	nop
 8001f84:	f7ff ffde 	bl	8001f44 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d8f7      	bhi.n	8001f84 <HAL_Delay+0x28>
  {
  }
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	2000008c 	.word	0x2000008c

08001fa4 <__NVIC_SetPriorityGrouping>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd6:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	60d3      	str	r3, [r2, #12]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_GetPriorityGrouping>:
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f003 0307 	and.w	r3, r3, #7
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_EnableIRQ>:
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	2b00      	cmp	r3, #0
 8002018:	db0b      	blt.n	8002032 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	4907      	ldr	r1, [pc, #28]	; (8002040 <__NVIC_EnableIRQ+0x38>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	2001      	movs	r0, #1
 800202a:	fa00 f202 	lsl.w	r2, r0, r2
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000e100 	.word	0xe000e100

08002044 <__NVIC_DisableIRQ>:
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	2b00      	cmp	r3, #0
 8002054:	db12      	blt.n	800207c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	f003 021f 	and.w	r2, r3, #31
 800205c:	490a      	ldr	r1, [pc, #40]	; (8002088 <__NVIC_DisableIRQ+0x44>)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	2001      	movs	r0, #1
 8002066:	fa00 f202 	lsl.w	r2, r0, r2
 800206a:	3320      	adds	r3, #32
 800206c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002070:	f3bf 8f4f 	dsb	sy
}
 8002074:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002076:	f3bf 8f6f 	isb	sy
}
 800207a:	bf00      	nop
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000e100 	.word	0xe000e100

0800208c <__NVIC_SetPriority>:
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	6039      	str	r1, [r7, #0]
 8002096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209c:	2b00      	cmp	r3, #0
 800209e:	db0a      	blt.n	80020b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	490c      	ldr	r1, [pc, #48]	; (80020d8 <__NVIC_SetPriority+0x4c>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	0112      	lsls	r2, r2, #4
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	440b      	add	r3, r1
 80020b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80020b4:	e00a      	b.n	80020cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4908      	ldr	r1, [pc, #32]	; (80020dc <__NVIC_SetPriority+0x50>)
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	3b04      	subs	r3, #4
 80020c4:	0112      	lsls	r2, r2, #4
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	440b      	add	r3, r1
 80020ca:	761a      	strb	r2, [r3, #24]
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000e100 	.word	0xe000e100
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <NVIC_EncodePriority>:
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f1c3 0307 	rsb	r3, r3, #7
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	bf28      	it	cs
 80020fe:	2304      	movcs	r3, #4
 8002100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3304      	adds	r3, #4
 8002106:	2b06      	cmp	r3, #6
 8002108:	d902      	bls.n	8002110 <NVIC_EncodePriority+0x30>
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3b03      	subs	r3, #3
 800210e:	e000      	b.n	8002112 <NVIC_EncodePriority+0x32>
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	f04f 32ff 	mov.w	r2, #4294967295
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43da      	mvns	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	401a      	ands	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002128:	f04f 31ff 	mov.w	r1, #4294967295
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	43d9      	mvns	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	4313      	orrs	r3, r2
}
 800213a:	4618      	mov	r0, r3
 800213c:	3724      	adds	r7, #36	; 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <SysTick_Config>:
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002158:	d301      	bcc.n	800215e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800215a:	2301      	movs	r3, #1
 800215c:	e00f      	b.n	800217e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <SysTick_Config+0x40>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002166:	210f      	movs	r1, #15
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f7ff ff8e 	bl	800208c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <SysTick_Config+0x40>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <SysTick_Config+0x40>)
 8002178:	2207      	movs	r2, #7
 800217a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	e000e010 	.word	0xe000e010

0800218c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ff05 	bl	8001fa4 <__NVIC_SetPriorityGrouping>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4603      	mov	r3, r0
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b4:	f7ff ff1a 	bl	8001fec <__NVIC_GetPriorityGrouping>
 80021b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	6978      	ldr	r0, [r7, #20]
 80021c0:	f7ff ff8e 	bl	80020e0 <NVIC_EncodePriority>
 80021c4:	4602      	mov	r2, r0
 80021c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff5d 	bl	800208c <__NVIC_SetPriority>
}
 80021d2:	bf00      	nop
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff0d 	bl	8002008 <__NVIC_EnableIRQ>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff1d 	bl	8002044 <__NVIC_DisableIRQ>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ff94 	bl	8002148 <SysTick_Config>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002236:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002238:	f7ff fe84 	bl	8001f44 <HAL_GetTick>
 800223c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d008      	beq.n	800225c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2280      	movs	r2, #128	; 0x80
 800224e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e052      	b.n	8002302 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0216 	bic.w	r2, r2, #22
 800226a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800227a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	2b00      	cmp	r3, #0
 8002282:	d103      	bne.n	800228c <HAL_DMA_Abort+0x62>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0208 	bic.w	r2, r2, #8
 800229a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ac:	e013      	b.n	80022d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ae:	f7ff fe49 	bl	8001f44 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b05      	cmp	r3, #5
 80022ba:	d90c      	bls.n	80022d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2220      	movs	r2, #32
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2203      	movs	r2, #3
 80022c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e015      	b.n	8002302 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1e4      	bne.n	80022ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e8:	223f      	movs	r2, #63	; 0x3f
 80022ea:	409a      	lsls	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d004      	beq.n	8002328 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2280      	movs	r2, #128	; 0x80
 8002322:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e00c      	b.n	8002342 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2205      	movs	r2, #5
 800232c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0201 	bic.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	e159      	b.n	8002620 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800236c:	2201      	movs	r2, #1
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	429a      	cmp	r2, r3
 8002386:	f040 8148 	bne.w	800261a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b01      	cmp	r3, #1
 8002394:	d005      	beq.n	80023a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d130      	bne.n	8002404 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	2203      	movs	r2, #3
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d8:	2201      	movs	r2, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 0201 	and.w	r2, r3, #1
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	2b03      	cmp	r3, #3
 800240e:	d017      	beq.n	8002440 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	2203      	movs	r2, #3
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d123      	bne.n	8002494 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	08da      	lsrs	r2, r3, #3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3208      	adds	r2, #8
 8002454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	220f      	movs	r2, #15
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	08da      	lsrs	r2, r3, #3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3208      	adds	r2, #8
 800248e:	69b9      	ldr	r1, [r7, #24]
 8002490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	2203      	movs	r2, #3
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0203 	and.w	r2, r3, #3
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80a2 	beq.w	800261a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	4b57      	ldr	r3, [pc, #348]	; (8002638 <HAL_GPIO_Init+0x2e8>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	4a56      	ldr	r2, [pc, #344]	; (8002638 <HAL_GPIO_Init+0x2e8>)
 80024e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e4:	6453      	str	r3, [r2, #68]	; 0x44
 80024e6:	4b54      	ldr	r3, [pc, #336]	; (8002638 <HAL_GPIO_Init+0x2e8>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024f2:	4a52      	ldr	r2, [pc, #328]	; (800263c <HAL_GPIO_Init+0x2ec>)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	3302      	adds	r3, #2
 80024fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	220f      	movs	r2, #15
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a49      	ldr	r2, [pc, #292]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d019      	beq.n	8002552 <HAL_GPIO_Init+0x202>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a48      	ldr	r2, [pc, #288]	; (8002644 <HAL_GPIO_Init+0x2f4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d013      	beq.n	800254e <HAL_GPIO_Init+0x1fe>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a47      	ldr	r2, [pc, #284]	; (8002648 <HAL_GPIO_Init+0x2f8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00d      	beq.n	800254a <HAL_GPIO_Init+0x1fa>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a46      	ldr	r2, [pc, #280]	; (800264c <HAL_GPIO_Init+0x2fc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d007      	beq.n	8002546 <HAL_GPIO_Init+0x1f6>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a45      	ldr	r2, [pc, #276]	; (8002650 <HAL_GPIO_Init+0x300>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d101      	bne.n	8002542 <HAL_GPIO_Init+0x1f2>
 800253e:	2304      	movs	r3, #4
 8002540:	e008      	b.n	8002554 <HAL_GPIO_Init+0x204>
 8002542:	2307      	movs	r3, #7
 8002544:	e006      	b.n	8002554 <HAL_GPIO_Init+0x204>
 8002546:	2303      	movs	r3, #3
 8002548:	e004      	b.n	8002554 <HAL_GPIO_Init+0x204>
 800254a:	2302      	movs	r3, #2
 800254c:	e002      	b.n	8002554 <HAL_GPIO_Init+0x204>
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <HAL_GPIO_Init+0x204>
 8002552:	2300      	movs	r3, #0
 8002554:	69fa      	ldr	r2, [r7, #28]
 8002556:	f002 0203 	and.w	r2, r2, #3
 800255a:	0092      	lsls	r2, r2, #2
 800255c:	4093      	lsls	r3, r2
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002564:	4935      	ldr	r1, [pc, #212]	; (800263c <HAL_GPIO_Init+0x2ec>)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	089b      	lsrs	r3, r3, #2
 800256a:	3302      	adds	r3, #2
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002572:	4b38      	ldr	r3, [pc, #224]	; (8002654 <HAL_GPIO_Init+0x304>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002596:	4a2f      	ldr	r2, [pc, #188]	; (8002654 <HAL_GPIO_Init+0x304>)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800259c:	4b2d      	ldr	r3, [pc, #180]	; (8002654 <HAL_GPIO_Init+0x304>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025c0:	4a24      	ldr	r2, [pc, #144]	; (8002654 <HAL_GPIO_Init+0x304>)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025c6:	4b23      	ldr	r3, [pc, #140]	; (8002654 <HAL_GPIO_Init+0x304>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ea:	4a1a      	ldr	r2, [pc, #104]	; (8002654 <HAL_GPIO_Init+0x304>)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f0:	4b18      	ldr	r3, [pc, #96]	; (8002654 <HAL_GPIO_Init+0x304>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002614:	4a0f      	ldr	r2, [pc, #60]	; (8002654 <HAL_GPIO_Init+0x304>)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3301      	adds	r3, #1
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	2b0f      	cmp	r3, #15
 8002624:	f67f aea2 	bls.w	800236c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	3724      	adds	r7, #36	; 0x24
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800
 800263c:	40013800 	.word	0x40013800
 8002640:	40020000 	.word	0x40020000
 8002644:	40020400 	.word	0x40020400
 8002648:	40020800 	.word	0x40020800
 800264c:	40020c00 	.word	0x40020c00
 8002650:	40021000 	.word	0x40021000
 8002654:	40013c00 	.word	0x40013c00

08002658 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	e0bb      	b.n	80027ec <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002674:	2201      	movs	r2, #1
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	429a      	cmp	r2, r3
 800268c:	f040 80ab 	bne.w	80027e6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002690:	4a5c      	ldr	r2, [pc, #368]	; (8002804 <HAL_GPIO_DeInit+0x1ac>)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	3302      	adds	r3, #2
 8002698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	220f      	movs	r2, #15
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	4013      	ands	r3, r2
 80026b0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a54      	ldr	r2, [pc, #336]	; (8002808 <HAL_GPIO_DeInit+0x1b0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d019      	beq.n	80026ee <HAL_GPIO_DeInit+0x96>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a53      	ldr	r2, [pc, #332]	; (800280c <HAL_GPIO_DeInit+0x1b4>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_GPIO_DeInit+0x92>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a52      	ldr	r2, [pc, #328]	; (8002810 <HAL_GPIO_DeInit+0x1b8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00d      	beq.n	80026e6 <HAL_GPIO_DeInit+0x8e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a51      	ldr	r2, [pc, #324]	; (8002814 <HAL_GPIO_DeInit+0x1bc>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <HAL_GPIO_DeInit+0x8a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a50      	ldr	r2, [pc, #320]	; (8002818 <HAL_GPIO_DeInit+0x1c0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_GPIO_DeInit+0x86>
 80026da:	2304      	movs	r3, #4
 80026dc:	e008      	b.n	80026f0 <HAL_GPIO_DeInit+0x98>
 80026de:	2307      	movs	r3, #7
 80026e0:	e006      	b.n	80026f0 <HAL_GPIO_DeInit+0x98>
 80026e2:	2303      	movs	r3, #3
 80026e4:	e004      	b.n	80026f0 <HAL_GPIO_DeInit+0x98>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e002      	b.n	80026f0 <HAL_GPIO_DeInit+0x98>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_GPIO_DeInit+0x98>
 80026ee:	2300      	movs	r3, #0
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	f002 0203 	and.w	r2, r2, #3
 80026f6:	0092      	lsls	r2, r2, #2
 80026f8:	4093      	lsls	r3, r2
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d132      	bne.n	8002766 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002700:	4b46      	ldr	r3, [pc, #280]	; (800281c <HAL_GPIO_DeInit+0x1c4>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	43db      	mvns	r3, r3
 8002708:	4944      	ldr	r1, [pc, #272]	; (800281c <HAL_GPIO_DeInit+0x1c4>)
 800270a:	4013      	ands	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800270e:	4b43      	ldr	r3, [pc, #268]	; (800281c <HAL_GPIO_DeInit+0x1c4>)
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	43db      	mvns	r3, r3
 8002716:	4941      	ldr	r1, [pc, #260]	; (800281c <HAL_GPIO_DeInit+0x1c4>)
 8002718:	4013      	ands	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800271c:	4b3f      	ldr	r3, [pc, #252]	; (800281c <HAL_GPIO_DeInit+0x1c4>)
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	43db      	mvns	r3, r3
 8002724:	493d      	ldr	r1, [pc, #244]	; (800281c <HAL_GPIO_DeInit+0x1c4>)
 8002726:	4013      	ands	r3, r2
 8002728:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800272a:	4b3c      	ldr	r3, [pc, #240]	; (800281c <HAL_GPIO_DeInit+0x1c4>)
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	43db      	mvns	r3, r3
 8002732:	493a      	ldr	r1, [pc, #232]	; (800281c <HAL_GPIO_DeInit+0x1c4>)
 8002734:	4013      	ands	r3, r2
 8002736:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	220f      	movs	r2, #15
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002748:	4a2e      	ldr	r2, [pc, #184]	; (8002804 <HAL_GPIO_DeInit+0x1ac>)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	089b      	lsrs	r3, r3, #2
 800274e:	3302      	adds	r3, #2
 8002750:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	43da      	mvns	r2, r3
 8002758:	482a      	ldr	r0, [pc, #168]	; (8002804 <HAL_GPIO_DeInit+0x1ac>)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	400a      	ands	r2, r1
 8002760:	3302      	adds	r3, #2
 8002762:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	2103      	movs	r1, #3
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	401a      	ands	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	08da      	lsrs	r2, r3, #3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3208      	adds	r2, #8
 8002784:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	220f      	movs	r2, #15
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	08d2      	lsrs	r2, r2, #3
 800279c:	4019      	ands	r1, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3208      	adds	r2, #8
 80027a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2103      	movs	r1, #3
 80027b0:	fa01 f303 	lsl.w	r3, r1, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	401a      	ands	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	2101      	movs	r1, #1
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	fa01 f303 	lsl.w	r3, r1, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	401a      	ands	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	2103      	movs	r1, #3
 80027da:	fa01 f303 	lsl.w	r3, r1, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	401a      	ands	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	3301      	adds	r3, #1
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	2b0f      	cmp	r3, #15
 80027f0:	f67f af40 	bls.w	8002674 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop
 80027f8:	371c      	adds	r7, #28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40013800 	.word	0x40013800
 8002808:	40020000 	.word	0x40020000
 800280c:	40020400 	.word	0x40020400
 8002810:	40020800 	.word	0x40020800
 8002814:	40020c00 	.word	0x40020c00
 8002818:	40021000 	.word	0x40021000
 800281c:	40013c00 	.word	0x40013c00

08002820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	807b      	strh	r3, [r7, #2]
 800282c:	4613      	mov	r3, r2
 800282e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002830:	787b      	ldrb	r3, [r7, #1]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002836:	887a      	ldrh	r2, [r7, #2]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800283c:	e003      	b.n	8002846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800283e:	887b      	ldrh	r3, [r7, #2]
 8002840:	041a      	lsls	r2, r3, #16
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	619a      	str	r2, [r3, #24]
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	460b      	mov	r3, r1
 800285c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002864:	887a      	ldrh	r2, [r7, #2]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4013      	ands	r3, r2
 800286a:	041a      	lsls	r2, r3, #16
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	43d9      	mvns	r1, r3
 8002870:	887b      	ldrh	r3, [r7, #2]
 8002872:	400b      	ands	r3, r1
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	619a      	str	r2, [r3, #24]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e267      	b.n	8002d6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d075      	beq.n	8002992 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028a6:	4b88      	ldr	r3, [pc, #544]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d00c      	beq.n	80028cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028b2:	4b85      	ldr	r3, [pc, #532]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d112      	bne.n	80028e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028be:	4b82      	ldr	r3, [pc, #520]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ca:	d10b      	bne.n	80028e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028cc:	4b7e      	ldr	r3, [pc, #504]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d05b      	beq.n	8002990 <HAL_RCC_OscConfig+0x108>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d157      	bne.n	8002990 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e242      	b.n	8002d6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ec:	d106      	bne.n	80028fc <HAL_RCC_OscConfig+0x74>
 80028ee:	4b76      	ldr	r3, [pc, #472]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a75      	ldr	r2, [pc, #468]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 80028f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	e01d      	b.n	8002938 <HAL_RCC_OscConfig+0xb0>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002904:	d10c      	bne.n	8002920 <HAL_RCC_OscConfig+0x98>
 8002906:	4b70      	ldr	r3, [pc, #448]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a6f      	ldr	r2, [pc, #444]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 800290c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	4b6d      	ldr	r3, [pc, #436]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a6c      	ldr	r2, [pc, #432]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 8002918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	e00b      	b.n	8002938 <HAL_RCC_OscConfig+0xb0>
 8002920:	4b69      	ldr	r3, [pc, #420]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a68      	ldr	r2, [pc, #416]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 8002926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	4b66      	ldr	r3, [pc, #408]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a65      	ldr	r2, [pc, #404]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 8002932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d013      	beq.n	8002968 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7ff fb00 	bl	8001f44 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002948:	f7ff fafc 	bl	8001f44 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	; 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e207      	b.n	8002d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295a:	4b5b      	ldr	r3, [pc, #364]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0xc0>
 8002966:	e014      	b.n	8002992 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7ff faec 	bl	8001f44 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002970:	f7ff fae8 	bl	8001f44 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b64      	cmp	r3, #100	; 0x64
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e1f3      	b.n	8002d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002982:	4b51      	ldr	r3, [pc, #324]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0xe8>
 800298e:	e000      	b.n	8002992 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d063      	beq.n	8002a66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800299e:	4b4a      	ldr	r3, [pc, #296]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00b      	beq.n	80029c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029aa:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d11c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029b6:	4b44      	ldr	r3, [pc, #272]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d116      	bne.n	80029f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c2:	4b41      	ldr	r3, [pc, #260]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <HAL_RCC_OscConfig+0x152>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d001      	beq.n	80029da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e1c7      	b.n	8002d6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029da:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4937      	ldr	r1, [pc, #220]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ee:	e03a      	b.n	8002a66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d020      	beq.n	8002a3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f8:	4b34      	ldr	r3, [pc, #208]	; (8002acc <HAL_RCC_OscConfig+0x244>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fe:	f7ff faa1 	bl	8001f44 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a06:	f7ff fa9d 	bl	8001f44 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e1a8      	b.n	8002d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a18:	4b2b      	ldr	r3, [pc, #172]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a24:	4b28      	ldr	r3, [pc, #160]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4925      	ldr	r1, [pc, #148]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]
 8002a38:	e015      	b.n	8002a66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a3a:	4b24      	ldr	r3, [pc, #144]	; (8002acc <HAL_RCC_OscConfig+0x244>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7ff fa80 	bl	8001f44 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a48:	f7ff fa7c 	bl	8001f44 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e187      	b.n	8002d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d036      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d016      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <HAL_RCC_OscConfig+0x248>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a80:	f7ff fa60 	bl	8001f44 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a88:	f7ff fa5c 	bl	8001f44 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e167      	b.n	8002d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x200>
 8002aa6:	e01b      	b.n	8002ae0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa8:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <HAL_RCC_OscConfig+0x248>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aae:	f7ff fa49 	bl	8001f44 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab4:	e00e      	b.n	8002ad4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab6:	f7ff fa45 	bl	8001f44 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d907      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e150      	b.n	8002d6a <HAL_RCC_OscConfig+0x4e2>
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	42470000 	.word	0x42470000
 8002ad0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad4:	4b88      	ldr	r3, [pc, #544]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1ea      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 8097 	beq.w	8002c1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aee:	2300      	movs	r3, #0
 8002af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af2:	4b81      	ldr	r3, [pc, #516]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10f      	bne.n	8002b1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	4b7d      	ldr	r3, [pc, #500]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	4a7c      	ldr	r2, [pc, #496]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0e:	4b7a      	ldr	r3, [pc, #488]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1e:	4b77      	ldr	r3, [pc, #476]	; (8002cfc <HAL_RCC_OscConfig+0x474>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d118      	bne.n	8002b5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b2a:	4b74      	ldr	r3, [pc, #464]	; (8002cfc <HAL_RCC_OscConfig+0x474>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a73      	ldr	r2, [pc, #460]	; (8002cfc <HAL_RCC_OscConfig+0x474>)
 8002b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b36:	f7ff fa05 	bl	8001f44 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3e:	f7ff fa01 	bl	8001f44 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e10c      	b.n	8002d6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b50:	4b6a      	ldr	r3, [pc, #424]	; (8002cfc <HAL_RCC_OscConfig+0x474>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d106      	bne.n	8002b72 <HAL_RCC_OscConfig+0x2ea>
 8002b64:	4b64      	ldr	r3, [pc, #400]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	4a63      	ldr	r2, [pc, #396]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b70:	e01c      	b.n	8002bac <HAL_RCC_OscConfig+0x324>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b05      	cmp	r3, #5
 8002b78:	d10c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x30c>
 8002b7a:	4b5f      	ldr	r3, [pc, #380]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7e:	4a5e      	ldr	r2, [pc, #376]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002b80:	f043 0304 	orr.w	r3, r3, #4
 8002b84:	6713      	str	r3, [r2, #112]	; 0x70
 8002b86:	4b5c      	ldr	r3, [pc, #368]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	4a5b      	ldr	r2, [pc, #364]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	6713      	str	r3, [r2, #112]	; 0x70
 8002b92:	e00b      	b.n	8002bac <HAL_RCC_OscConfig+0x324>
 8002b94:	4b58      	ldr	r3, [pc, #352]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b98:	4a57      	ldr	r2, [pc, #348]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002b9a:	f023 0301 	bic.w	r3, r3, #1
 8002b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba0:	4b55      	ldr	r3, [pc, #340]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	4a54      	ldr	r2, [pc, #336]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002ba6:	f023 0304 	bic.w	r3, r3, #4
 8002baa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d015      	beq.n	8002be0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb4:	f7ff f9c6 	bl	8001f44 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bbc:	f7ff f9c2 	bl	8001f44 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e0cb      	b.n	8002d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd2:	4b49      	ldr	r3, [pc, #292]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0ee      	beq.n	8002bbc <HAL_RCC_OscConfig+0x334>
 8002bde:	e014      	b.n	8002c0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be0:	f7ff f9b0 	bl	8001f44 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be6:	e00a      	b.n	8002bfe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be8:	f7ff f9ac 	bl	8001f44 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e0b5      	b.n	8002d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfe:	4b3e      	ldr	r3, [pc, #248]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1ee      	bne.n	8002be8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c0a:	7dfb      	ldrb	r3, [r7, #23]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d105      	bne.n	8002c1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c10:	4b39      	ldr	r3, [pc, #228]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	4a38      	ldr	r2, [pc, #224]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80a1 	beq.w	8002d68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c26:	4b34      	ldr	r3, [pc, #208]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d05c      	beq.n	8002cec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d141      	bne.n	8002cbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3a:	4b31      	ldr	r3, [pc, #196]	; (8002d00 <HAL_RCC_OscConfig+0x478>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7ff f980 	bl	8001f44 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c48:	f7ff f97c 	bl	8001f44 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e087      	b.n	8002d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5a:	4b27      	ldr	r3, [pc, #156]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69da      	ldr	r2, [r3, #28]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	019b      	lsls	r3, r3, #6
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	085b      	lsrs	r3, r3, #1
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	041b      	lsls	r3, r3, #16
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	061b      	lsls	r3, r3, #24
 8002c8a:	491b      	ldr	r1, [pc, #108]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_RCC_OscConfig+0x478>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c96:	f7ff f955 	bl	8001f44 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7ff f951 	bl	8001f44 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e05c      	b.n	8002d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x416>
 8002cbc:	e054      	b.n	8002d68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cbe:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <HAL_RCC_OscConfig+0x478>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7ff f93e 	bl	8001f44 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ccc:	f7ff f93a 	bl	8001f44 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e045      	b.n	8002d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cde:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HAL_RCC_OscConfig+0x470>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x444>
 8002cea:	e03d      	b.n	8002d68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d107      	bne.n	8002d04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e038      	b.n	8002d6a <HAL_RCC_OscConfig+0x4e2>
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40007000 	.word	0x40007000
 8002d00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d04:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <HAL_RCC_OscConfig+0x4ec>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d028      	beq.n	8002d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d121      	bne.n	8002d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d11a      	bne.n	8002d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d34:	4013      	ands	r3, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d111      	bne.n	8002d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d107      	bne.n	8002d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40023800 	.word	0x40023800

08002d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0cc      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d8c:	4b68      	ldr	r3, [pc, #416]	; (8002f30 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d90c      	bls.n	8002db4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9a:	4b65      	ldr	r3, [pc, #404]	; (8002f30 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da2:	4b63      	ldr	r3, [pc, #396]	; (8002f30 <HAL_RCC_ClockConfig+0x1b8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0b8      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d020      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dcc:	4b59      	ldr	r3, [pc, #356]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	4a58      	ldr	r2, [pc, #352]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002de4:	4b53      	ldr	r3, [pc, #332]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	4a52      	ldr	r2, [pc, #328]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df0:	4b50      	ldr	r3, [pc, #320]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	494d      	ldr	r1, [pc, #308]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d044      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d107      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e16:	4b47      	ldr	r3, [pc, #284]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d119      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e07f      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d003      	beq.n	8002e36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e32:	2b03      	cmp	r3, #3
 8002e34:	d107      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e36:	4b3f      	ldr	r3, [pc, #252]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e06f      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e46:	4b3b      	ldr	r3, [pc, #236]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e067      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e56:	4b37      	ldr	r3, [pc, #220]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f023 0203 	bic.w	r2, r3, #3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	4934      	ldr	r1, [pc, #208]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e68:	f7ff f86c 	bl	8001f44 <HAL_GetTick>
 8002e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6e:	e00a      	b.n	8002e86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e70:	f7ff f868 	bl	8001f44 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e04f      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e86:	4b2b      	ldr	r3, [pc, #172]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 020c 	and.w	r2, r3, #12
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d1eb      	bne.n	8002e70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e98:	4b25      	ldr	r3, [pc, #148]	; (8002f30 <HAL_RCC_ClockConfig+0x1b8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d20c      	bcs.n	8002ec0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea6:	4b22      	ldr	r3, [pc, #136]	; (8002f30 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eae:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e032      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	4916      	ldr	r1, [pc, #88]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d009      	beq.n	8002efe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eea:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	490e      	ldr	r1, [pc, #56]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002efe:	f000 f821 	bl	8002f44 <HAL_RCC_GetSysClockFreq>
 8002f02:	4602      	mov	r2, r0
 8002f04:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	091b      	lsrs	r3, r3, #4
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	490a      	ldr	r1, [pc, #40]	; (8002f38 <HAL_RCC_ClockConfig+0x1c0>)
 8002f10:	5ccb      	ldrb	r3, [r1, r3]
 8002f12:	fa22 f303 	lsr.w	r3, r2, r3
 8002f16:	4a09      	ldr	r2, [pc, #36]	; (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f1a:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <HAL_RCC_ClockConfig+0x1c8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe ffcc 	bl	8001ebc <HAL_InitTick>

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40023c00 	.word	0x40023c00
 8002f34:	40023800 	.word	0x40023800
 8002f38:	0800d94c 	.word	0x0800d94c
 8002f3c:	20000084 	.word	0x20000084
 8002f40:	20000088 	.word	0x20000088

08002f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f48:	b090      	sub	sp, #64	; 0x40
 8002f4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f50:	2300      	movs	r3, #0
 8002f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f54:	2300      	movs	r3, #0
 8002f56:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f5c:	4b59      	ldr	r3, [pc, #356]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 030c 	and.w	r3, r3, #12
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d00d      	beq.n	8002f84 <HAL_RCC_GetSysClockFreq+0x40>
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	f200 80a1 	bhi.w	80030b0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0x34>
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d003      	beq.n	8002f7e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f76:	e09b      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f78:	4b53      	ldr	r3, [pc, #332]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f7a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002f7c:	e09b      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f7e:	4b53      	ldr	r3, [pc, #332]	; (80030cc <HAL_RCC_GetSysClockFreq+0x188>)
 8002f80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f82:	e098      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f84:	4b4f      	ldr	r3, [pc, #316]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f8e:	4b4d      	ldr	r3, [pc, #308]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d028      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f9a:	4b4a      	ldr	r3, [pc, #296]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	099b      	lsrs	r3, r3, #6
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	623b      	str	r3, [r7, #32]
 8002fa4:	627a      	str	r2, [r7, #36]	; 0x24
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002fac:	2100      	movs	r1, #0
 8002fae:	4b47      	ldr	r3, [pc, #284]	; (80030cc <HAL_RCC_GetSysClockFreq+0x188>)
 8002fb0:	fb03 f201 	mul.w	r2, r3, r1
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	fb00 f303 	mul.w	r3, r0, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	4a43      	ldr	r2, [pc, #268]	; (80030cc <HAL_RCC_GetSysClockFreq+0x188>)
 8002fbe:	fba0 1202 	umull	r1, r2, r0, r2
 8002fc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fc4:	460a      	mov	r2, r1
 8002fc6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fca:	4413      	add	r3, r2
 8002fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	61bb      	str	r3, [r7, #24]
 8002fd4:	61fa      	str	r2, [r7, #28]
 8002fd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fde:	f7fd f967 	bl	80002b0 <__aeabi_uldivmod>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fea:	e053      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fec:	4b35      	ldr	r3, [pc, #212]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	099b      	lsrs	r3, r3, #6
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	617a      	str	r2, [r7, #20]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ffe:	f04f 0b00 	mov.w	fp, #0
 8003002:	4652      	mov	r2, sl
 8003004:	465b      	mov	r3, fp
 8003006:	f04f 0000 	mov.w	r0, #0
 800300a:	f04f 0100 	mov.w	r1, #0
 800300e:	0159      	lsls	r1, r3, #5
 8003010:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003014:	0150      	lsls	r0, r2, #5
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	ebb2 080a 	subs.w	r8, r2, sl
 800301e:	eb63 090b 	sbc.w	r9, r3, fp
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	f04f 0300 	mov.w	r3, #0
 800302a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800302e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003032:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003036:	ebb2 0408 	subs.w	r4, r2, r8
 800303a:	eb63 0509 	sbc.w	r5, r3, r9
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	00eb      	lsls	r3, r5, #3
 8003048:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800304c:	00e2      	lsls	r2, r4, #3
 800304e:	4614      	mov	r4, r2
 8003050:	461d      	mov	r5, r3
 8003052:	eb14 030a 	adds.w	r3, r4, sl
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	eb45 030b 	adc.w	r3, r5, fp
 800305c:	607b      	str	r3, [r7, #4]
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800306a:	4629      	mov	r1, r5
 800306c:	028b      	lsls	r3, r1, #10
 800306e:	4621      	mov	r1, r4
 8003070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003074:	4621      	mov	r1, r4
 8003076:	028a      	lsls	r2, r1, #10
 8003078:	4610      	mov	r0, r2
 800307a:	4619      	mov	r1, r3
 800307c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307e:	2200      	movs	r2, #0
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	60fa      	str	r2, [r7, #12]
 8003084:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003088:	f7fd f912 	bl	80002b0 <__aeabi_uldivmod>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4613      	mov	r3, r2
 8003092:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	0c1b      	lsrs	r3, r3, #16
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	3301      	adds	r3, #1
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80030a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030ae:	e002      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80030b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3740      	adds	r7, #64	; 0x40
 80030bc:	46bd      	mov	sp, r7
 80030be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030c2:	bf00      	nop
 80030c4:	40023800 	.word	0x40023800
 80030c8:	00f42400 	.word	0x00f42400
 80030cc:	017d7840 	.word	0x017d7840

080030d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d4:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030d6:	681b      	ldr	r3, [r3, #0]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	20000084 	.word	0x20000084

080030e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030ec:	f7ff fff0 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	0a9b      	lsrs	r3, r3, #10
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	4903      	ldr	r1, [pc, #12]	; (800310c <HAL_RCC_GetPCLK1Freq+0x24>)
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003104:	4618      	mov	r0, r3
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40023800 	.word	0x40023800
 800310c:	0800d95c 	.word	0x0800d95c

08003110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003114:	f7ff ffdc 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 8003118:	4602      	mov	r2, r0
 800311a:	4b05      	ldr	r3, [pc, #20]	; (8003130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	0b5b      	lsrs	r3, r3, #13
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	4903      	ldr	r1, [pc, #12]	; (8003134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003126:	5ccb      	ldrb	r3, [r1, r3]
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40023800 	.word	0x40023800
 8003134:	0800d95c 	.word	0x0800d95c

08003138 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e041      	b.n	80031ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fe fbec 	bl	800193c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3304      	adds	r3, #4
 8003174:	4619      	mov	r1, r3
 8003176:	4610      	mov	r0, r2
 8003178:	f000 fce4 	bl	8003b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e041      	b.n	800326c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d106      	bne.n	8003202 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f839 	bl	8003274 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2202      	movs	r2, #2
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3304      	adds	r3, #4
 8003212:	4619      	mov	r1, r3
 8003214:	4610      	mov	r0, r2
 8003216:	f000 fc95 	bl	8003b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d109      	bne.n	80032b0 <HAL_TIM_OC_Start_IT+0x28>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	bf14      	ite	ne
 80032a8:	2301      	movne	r3, #1
 80032aa:	2300      	moveq	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e022      	b.n	80032f6 <HAL_TIM_OC_Start_IT+0x6e>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d109      	bne.n	80032ca <HAL_TIM_OC_Start_IT+0x42>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b01      	cmp	r3, #1
 80032c0:	bf14      	ite	ne
 80032c2:	2301      	movne	r3, #1
 80032c4:	2300      	moveq	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	e015      	b.n	80032f6 <HAL_TIM_OC_Start_IT+0x6e>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d109      	bne.n	80032e4 <HAL_TIM_OC_Start_IT+0x5c>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	bf14      	ite	ne
 80032dc:	2301      	movne	r3, #1
 80032de:	2300      	moveq	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	e008      	b.n	80032f6 <HAL_TIM_OC_Start_IT+0x6e>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	bf14      	ite	ne
 80032f0:	2301      	movne	r3, #1
 80032f2:	2300      	moveq	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e0b3      	b.n	8003466 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d104      	bne.n	800330e <HAL_TIM_OC_Start_IT+0x86>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800330c:	e013      	b.n	8003336 <HAL_TIM_OC_Start_IT+0xae>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b04      	cmp	r3, #4
 8003312:	d104      	bne.n	800331e <HAL_TIM_OC_Start_IT+0x96>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800331c:	e00b      	b.n	8003336 <HAL_TIM_OC_Start_IT+0xae>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b08      	cmp	r3, #8
 8003322:	d104      	bne.n	800332e <HAL_TIM_OC_Start_IT+0xa6>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800332c:	e003      	b.n	8003336 <HAL_TIM_OC_Start_IT+0xae>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b0c      	cmp	r3, #12
 800333a:	d841      	bhi.n	80033c0 <HAL_TIM_OC_Start_IT+0x138>
 800333c:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <HAL_TIM_OC_Start_IT+0xbc>)
 800333e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003342:	bf00      	nop
 8003344:	08003379 	.word	0x08003379
 8003348:	080033c1 	.word	0x080033c1
 800334c:	080033c1 	.word	0x080033c1
 8003350:	080033c1 	.word	0x080033c1
 8003354:	0800338b 	.word	0x0800338b
 8003358:	080033c1 	.word	0x080033c1
 800335c:	080033c1 	.word	0x080033c1
 8003360:	080033c1 	.word	0x080033c1
 8003364:	0800339d 	.word	0x0800339d
 8003368:	080033c1 	.word	0x080033c1
 800336c:	080033c1 	.word	0x080033c1
 8003370:	080033c1 	.word	0x080033c1
 8003374:	080033af 	.word	0x080033af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0202 	orr.w	r2, r2, #2
 8003386:	60da      	str	r2, [r3, #12]
      break;
 8003388:	e01d      	b.n	80033c6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 0204 	orr.w	r2, r2, #4
 8003398:	60da      	str	r2, [r3, #12]
      break;
 800339a:	e014      	b.n	80033c6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0208 	orr.w	r2, r2, #8
 80033aa:	60da      	str	r2, [r3, #12]
      break;
 80033ac:	e00b      	b.n	80033c6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0210 	orr.w	r2, r2, #16
 80033bc:	60da      	str	r2, [r3, #12]
      break;
 80033be:	e002      	b.n	80033c6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	73fb      	strb	r3, [r7, #15]
      break;
 80033c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d14b      	bne.n	8003464 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2201      	movs	r2, #1
 80033d2:	6839      	ldr	r1, [r7, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fe5b 	bl	8004090 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a24      	ldr	r2, [pc, #144]	; (8003470 <HAL_TIM_OC_Start_IT+0x1e8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d107      	bne.n	80033f4 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a1d      	ldr	r2, [pc, #116]	; (8003470 <HAL_TIM_OC_Start_IT+0x1e8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d018      	beq.n	8003430 <HAL_TIM_OC_Start_IT+0x1a8>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003406:	d013      	beq.n	8003430 <HAL_TIM_OC_Start_IT+0x1a8>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a19      	ldr	r2, [pc, #100]	; (8003474 <HAL_TIM_OC_Start_IT+0x1ec>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00e      	beq.n	8003430 <HAL_TIM_OC_Start_IT+0x1a8>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a18      	ldr	r2, [pc, #96]	; (8003478 <HAL_TIM_OC_Start_IT+0x1f0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d009      	beq.n	8003430 <HAL_TIM_OC_Start_IT+0x1a8>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a16      	ldr	r2, [pc, #88]	; (800347c <HAL_TIM_OC_Start_IT+0x1f4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d004      	beq.n	8003430 <HAL_TIM_OC_Start_IT+0x1a8>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a15      	ldr	r2, [pc, #84]	; (8003480 <HAL_TIM_OC_Start_IT+0x1f8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d111      	bne.n	8003454 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b06      	cmp	r3, #6
 8003440:	d010      	beq.n	8003464 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f042 0201 	orr.w	r2, r2, #1
 8003450:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003452:	e007      	b.n	8003464 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003464:	7bfb      	ldrb	r3, [r7, #15]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40010000 	.word	0x40010000
 8003474:	40000400 	.word	0x40000400
 8003478:	40000800 	.word	0x40000800
 800347c:	40000c00 	.word	0x40000c00
 8003480:	40014000 	.word	0x40014000

08003484 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b0c      	cmp	r3, #12
 8003496:	d841      	bhi.n	800351c <HAL_TIM_OC_Stop_IT+0x98>
 8003498:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <HAL_TIM_OC_Stop_IT+0x1c>)
 800349a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349e:	bf00      	nop
 80034a0:	080034d5 	.word	0x080034d5
 80034a4:	0800351d 	.word	0x0800351d
 80034a8:	0800351d 	.word	0x0800351d
 80034ac:	0800351d 	.word	0x0800351d
 80034b0:	080034e7 	.word	0x080034e7
 80034b4:	0800351d 	.word	0x0800351d
 80034b8:	0800351d 	.word	0x0800351d
 80034bc:	0800351d 	.word	0x0800351d
 80034c0:	080034f9 	.word	0x080034f9
 80034c4:	0800351d 	.word	0x0800351d
 80034c8:	0800351d 	.word	0x0800351d
 80034cc:	0800351d 	.word	0x0800351d
 80034d0:	0800350b 	.word	0x0800350b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0202 	bic.w	r2, r2, #2
 80034e2:	60da      	str	r2, [r3, #12]
      break;
 80034e4:	e01d      	b.n	8003522 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0204 	bic.w	r2, r2, #4
 80034f4:	60da      	str	r2, [r3, #12]
      break;
 80034f6:	e014      	b.n	8003522 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0208 	bic.w	r2, r2, #8
 8003506:	60da      	str	r2, [r3, #12]
      break;
 8003508:	e00b      	b.n	8003522 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0210 	bic.w	r2, r2, #16
 8003518:	60da      	str	r2, [r3, #12]
      break;
 800351a:	e002      	b.n	8003522 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
      break;
 8003520:	bf00      	nop
  }

  if (status == HAL_OK)
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d157      	bne.n	80035d8 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2200      	movs	r2, #0
 800352e:	6839      	ldr	r1, [r7, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fdad 	bl	8004090 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a2a      	ldr	r2, [pc, #168]	; (80035e4 <HAL_TIM_OC_Stop_IT+0x160>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d117      	bne.n	8003570 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6a1a      	ldr	r2, [r3, #32]
 8003546:	f241 1311 	movw	r3, #4369	; 0x1111
 800354a:	4013      	ands	r3, r2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10f      	bne.n	8003570 <HAL_TIM_OC_Stop_IT+0xec>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6a1a      	ldr	r2, [r3, #32]
 8003556:	f240 4344 	movw	r3, #1092	; 0x444
 800355a:	4013      	ands	r3, r2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d107      	bne.n	8003570 <HAL_TIM_OC_Stop_IT+0xec>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800356e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6a1a      	ldr	r2, [r3, #32]
 8003576:	f241 1311 	movw	r3, #4369	; 0x1111
 800357a:	4013      	ands	r3, r2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10f      	bne.n	80035a0 <HAL_TIM_OC_Stop_IT+0x11c>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6a1a      	ldr	r2, [r3, #32]
 8003586:	f240 4344 	movw	r3, #1092	; 0x444
 800358a:	4013      	ands	r3, r2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d107      	bne.n	80035a0 <HAL_TIM_OC_Stop_IT+0x11c>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0201 	bic.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d104      	bne.n	80035b0 <HAL_TIM_OC_Stop_IT+0x12c>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ae:	e013      	b.n	80035d8 <HAL_TIM_OC_Stop_IT+0x154>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d104      	bne.n	80035c0 <HAL_TIM_OC_Stop_IT+0x13c>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035be:	e00b      	b.n	80035d8 <HAL_TIM_OC_Stop_IT+0x154>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d104      	bne.n	80035d0 <HAL_TIM_OC_Stop_IT+0x14c>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035ce:	e003      	b.n	80035d8 <HAL_TIM_OC_Stop_IT+0x154>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40010000 	.word	0x40010000

080035e8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e041      	b.n	8003680 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d106      	bne.n	8003616 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f839 	bl	8003688 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2202      	movs	r2, #2
 800361a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3304      	adds	r3, #4
 8003626:	4619      	mov	r1, r3
 8003628:	4610      	mov	r0, r2
 800362a:	f000 fa8b 	bl	8003b44 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0208 	bic.w	r2, r2, #8
 800363c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6819      	ldr	r1, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d122      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d11b      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0202 	mvn.w	r2, #2
 80036c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fa11 	bl	8003b06 <HAL_TIM_IC_CaptureCallback>
 80036e4:	e005      	b.n	80036f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fd ff9c 	bl	8001624 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 fa14 	bl	8003b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b04      	cmp	r3, #4
 8003704:	d122      	bne.n	800374c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b04      	cmp	r3, #4
 8003712:	d11b      	bne.n	800374c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0204 	mvn.w	r2, #4
 800371c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2202      	movs	r2, #2
 8003722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f9e7 	bl	8003b06 <HAL_TIM_IC_CaptureCallback>
 8003738:	e005      	b.n	8003746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fd ff72 	bl	8001624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f9ea 	bl	8003b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b08      	cmp	r3, #8
 8003758:	d122      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b08      	cmp	r3, #8
 8003766:	d11b      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0208 	mvn.w	r2, #8
 8003770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2204      	movs	r2, #4
 8003776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f9bd 	bl	8003b06 <HAL_TIM_IC_CaptureCallback>
 800378c:	e005      	b.n	800379a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7fd ff48 	bl	8001624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f9c0 	bl	8003b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b10      	cmp	r3, #16
 80037ac:	d122      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b10      	cmp	r3, #16
 80037ba:	d11b      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0210 	mvn.w	r2, #16
 80037c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2208      	movs	r2, #8
 80037ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f993 	bl	8003b06 <HAL_TIM_IC_CaptureCallback>
 80037e0:	e005      	b.n	80037ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd ff1e 	bl	8001624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f996 	bl	8003b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d10e      	bne.n	8003820 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b01      	cmp	r3, #1
 800380e:	d107      	bne.n	8003820 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0201 	mvn.w	r2, #1
 8003818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f969 	bl	8003af2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382a:	2b80      	cmp	r3, #128	; 0x80
 800382c:	d10e      	bne.n	800384c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003838:	2b80      	cmp	r3, #128	; 0x80
 800383a:	d107      	bne.n	800384c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fcc0 	bl	80041cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b40      	cmp	r3, #64	; 0x40
 8003858:	d10e      	bne.n	8003878 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003864:	2b40      	cmp	r3, #64	; 0x40
 8003866:	d107      	bne.n	8003878 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f95b 	bl	8003b2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	2b20      	cmp	r3, #32
 8003884:	d10e      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b20      	cmp	r3, #32
 8003892:	d107      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0220 	mvn.w	r2, #32
 800389c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fc8a 	bl	80041b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038a4:	bf00      	nop
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_TIM_OC_ConfigChannel+0x1e>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e048      	b.n	800395c <HAL_TIM_OC_ConfigChannel+0xb0>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b0c      	cmp	r3, #12
 80038d6:	d839      	bhi.n	800394c <HAL_TIM_OC_ConfigChannel+0xa0>
 80038d8:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80038da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038de:	bf00      	nop
 80038e0:	08003915 	.word	0x08003915
 80038e4:	0800394d 	.word	0x0800394d
 80038e8:	0800394d 	.word	0x0800394d
 80038ec:	0800394d 	.word	0x0800394d
 80038f0:	08003923 	.word	0x08003923
 80038f4:	0800394d 	.word	0x0800394d
 80038f8:	0800394d 	.word	0x0800394d
 80038fc:	0800394d 	.word	0x0800394d
 8003900:	08003931 	.word	0x08003931
 8003904:	0800394d 	.word	0x0800394d
 8003908:	0800394d 	.word	0x0800394d
 800390c:	0800394d 	.word	0x0800394d
 8003910:	0800393f 	.word	0x0800393f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	4618      	mov	r0, r3
 800391c:	f000 f992 	bl	8003c44 <TIM_OC1_SetConfig>
      break;
 8003920:	e017      	b.n	8003952 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	4618      	mov	r0, r3
 800392a:	f000 f9f1 	bl	8003d10 <TIM_OC2_SetConfig>
      break;
 800392e:	e010      	b.n	8003952 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	4618      	mov	r0, r3
 8003938:	f000 fa56 	bl	8003de8 <TIM_OC3_SetConfig>
      break;
 800393c:	e009      	b.n	8003952 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	4618      	mov	r0, r3
 8003946:	f000 fab9 	bl	8003ebc <TIM_OC4_SetConfig>
      break;
 800394a:	e002      	b.n	8003952 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	75fb      	strb	r3, [r7, #23]
      break;
 8003950:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800395a:	7dfb      	ldrb	r3, [r7, #23]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_TIM_ConfigClockSource+0x1c>
 800397c:	2302      	movs	r3, #2
 800397e:	e0b4      	b.n	8003aea <HAL_TIM_ConfigClockSource+0x186>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800399e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b8:	d03e      	beq.n	8003a38 <HAL_TIM_ConfigClockSource+0xd4>
 80039ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039be:	f200 8087 	bhi.w	8003ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80039c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c6:	f000 8086 	beq.w	8003ad6 <HAL_TIM_ConfigClockSource+0x172>
 80039ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ce:	d87f      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80039d0:	2b70      	cmp	r3, #112	; 0x70
 80039d2:	d01a      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0xa6>
 80039d4:	2b70      	cmp	r3, #112	; 0x70
 80039d6:	d87b      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80039d8:	2b60      	cmp	r3, #96	; 0x60
 80039da:	d050      	beq.n	8003a7e <HAL_TIM_ConfigClockSource+0x11a>
 80039dc:	2b60      	cmp	r3, #96	; 0x60
 80039de:	d877      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80039e0:	2b50      	cmp	r3, #80	; 0x50
 80039e2:	d03c      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0xfa>
 80039e4:	2b50      	cmp	r3, #80	; 0x50
 80039e6:	d873      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d058      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x13a>
 80039ec:	2b40      	cmp	r3, #64	; 0x40
 80039ee:	d86f      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80039f0:	2b30      	cmp	r3, #48	; 0x30
 80039f2:	d064      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x15a>
 80039f4:	2b30      	cmp	r3, #48	; 0x30
 80039f6:	d86b      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d060      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x15a>
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d867      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x16c>
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d05c      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x15a>
 8003a04:	2b10      	cmp	r3, #16
 8003a06:	d05a      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x15a>
 8003a08:	e062      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6899      	ldr	r1, [r3, #8]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f000 fb19 	bl	8004050 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	609a      	str	r2, [r3, #8]
      break;
 8003a36:	e04f      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6818      	ldr	r0, [r3, #0]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	6899      	ldr	r1, [r3, #8]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f000 fb02 	bl	8004050 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a5a:	609a      	str	r2, [r3, #8]
      break;
 8003a5c:	e03c      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	6859      	ldr	r1, [r3, #4]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f000 fa76 	bl	8003f5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2150      	movs	r1, #80	; 0x50
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 facf 	bl	800401a <TIM_ITRx_SetConfig>
      break;
 8003a7c:	e02c      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	6859      	ldr	r1, [r3, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f000 fa95 	bl	8003fba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2160      	movs	r1, #96	; 0x60
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fabf 	bl	800401a <TIM_ITRx_SetConfig>
      break;
 8003a9c:	e01c      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	6859      	ldr	r1, [r3, #4]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f000 fa56 	bl	8003f5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2140      	movs	r1, #64	; 0x40
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 faaf 	bl	800401a <TIM_ITRx_SetConfig>
      break;
 8003abc:	e00c      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4610      	mov	r0, r2
 8003aca:	f000 faa6 	bl	800401a <TIM_ITRx_SetConfig>
      break;
 8003ace:	e003      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad4:	e000      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ad6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a34      	ldr	r2, [pc, #208]	; (8003c28 <TIM_Base_SetConfig+0xe4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00f      	beq.n	8003b7c <TIM_Base_SetConfig+0x38>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b62:	d00b      	beq.n	8003b7c <TIM_Base_SetConfig+0x38>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a31      	ldr	r2, [pc, #196]	; (8003c2c <TIM_Base_SetConfig+0xe8>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d007      	beq.n	8003b7c <TIM_Base_SetConfig+0x38>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a30      	ldr	r2, [pc, #192]	; (8003c30 <TIM_Base_SetConfig+0xec>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d003      	beq.n	8003b7c <TIM_Base_SetConfig+0x38>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a2f      	ldr	r2, [pc, #188]	; (8003c34 <TIM_Base_SetConfig+0xf0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d108      	bne.n	8003b8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a25      	ldr	r2, [pc, #148]	; (8003c28 <TIM_Base_SetConfig+0xe4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d01b      	beq.n	8003bce <TIM_Base_SetConfig+0x8a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9c:	d017      	beq.n	8003bce <TIM_Base_SetConfig+0x8a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a22      	ldr	r2, [pc, #136]	; (8003c2c <TIM_Base_SetConfig+0xe8>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d013      	beq.n	8003bce <TIM_Base_SetConfig+0x8a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a21      	ldr	r2, [pc, #132]	; (8003c30 <TIM_Base_SetConfig+0xec>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00f      	beq.n	8003bce <TIM_Base_SetConfig+0x8a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a20      	ldr	r2, [pc, #128]	; (8003c34 <TIM_Base_SetConfig+0xf0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00b      	beq.n	8003bce <TIM_Base_SetConfig+0x8a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a1f      	ldr	r2, [pc, #124]	; (8003c38 <TIM_Base_SetConfig+0xf4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d007      	beq.n	8003bce <TIM_Base_SetConfig+0x8a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a1e      	ldr	r2, [pc, #120]	; (8003c3c <TIM_Base_SetConfig+0xf8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d003      	beq.n	8003bce <TIM_Base_SetConfig+0x8a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a1d      	ldr	r2, [pc, #116]	; (8003c40 <TIM_Base_SetConfig+0xfc>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d108      	bne.n	8003be0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a08      	ldr	r2, [pc, #32]	; (8003c28 <TIM_Base_SetConfig+0xe4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d103      	bne.n	8003c14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	615a      	str	r2, [r3, #20]
}
 8003c1a:	bf00      	nop
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40010000 	.word	0x40010000
 8003c2c:	40000400 	.word	0x40000400
 8003c30:	40000800 	.word	0x40000800
 8003c34:	40000c00 	.word	0x40000c00
 8003c38:	40014000 	.word	0x40014000
 8003c3c:	40014400 	.word	0x40014400
 8003c40:	40014800 	.word	0x40014800

08003c44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f023 0201 	bic.w	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0303 	bic.w	r3, r3, #3
 8003c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f023 0302 	bic.w	r3, r3, #2
 8003c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a1c      	ldr	r2, [pc, #112]	; (8003d0c <TIM_OC1_SetConfig+0xc8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d10c      	bne.n	8003cba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f023 0308 	bic.w	r3, r3, #8
 8003ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f023 0304 	bic.w	r3, r3, #4
 8003cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a13      	ldr	r2, [pc, #76]	; (8003d0c <TIM_OC1_SetConfig+0xc8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d111      	bne.n	8003ce6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	621a      	str	r2, [r3, #32]
}
 8003d00:	bf00      	nop
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	40010000 	.word	0x40010000

08003d10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	f023 0210 	bic.w	r2, r3, #16
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f023 0320 	bic.w	r3, r3, #32
 8003d5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a1e      	ldr	r2, [pc, #120]	; (8003de4 <TIM_OC2_SetConfig+0xd4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d10d      	bne.n	8003d8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a15      	ldr	r2, [pc, #84]	; (8003de4 <TIM_OC2_SetConfig+0xd4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d113      	bne.n	8003dbc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003da2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	621a      	str	r2, [r3, #32]
}
 8003dd6:	bf00      	nop
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40010000 	.word	0x40010000

08003de8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0303 	bic.w	r3, r3, #3
 8003e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	021b      	lsls	r3, r3, #8
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a1d      	ldr	r2, [pc, #116]	; (8003eb8 <TIM_OC3_SetConfig+0xd0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d10d      	bne.n	8003e62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a14      	ldr	r2, [pc, #80]	; (8003eb8 <TIM_OC3_SetConfig+0xd0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d113      	bne.n	8003e92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	621a      	str	r2, [r3, #32]
}
 8003eac:	bf00      	nop
 8003eae:	371c      	adds	r7, #28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	40010000 	.word	0x40010000

08003ebc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	031b      	lsls	r3, r3, #12
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a10      	ldr	r2, [pc, #64]	; (8003f58 <TIM_OC4_SetConfig+0x9c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d109      	bne.n	8003f30 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	019b      	lsls	r3, r3, #6
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	621a      	str	r2, [r3, #32]
}
 8003f4a:	bf00      	nop
 8003f4c:	371c      	adds	r7, #28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40010000 	.word	0x40010000

08003f5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	f023 0201 	bic.w	r2, r3, #1
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f023 030a 	bic.w	r3, r3, #10
 8003f98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	621a      	str	r2, [r3, #32]
}
 8003fae:	bf00      	nop
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b087      	sub	sp, #28
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	f023 0210 	bic.w	r2, r3, #16
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fe4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	031b      	lsls	r3, r3, #12
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ff6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	621a      	str	r2, [r3, #32]
}
 800400e:	bf00      	nop
 8004010:	371c      	adds	r7, #28
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800401a:	b480      	push	{r7}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004030:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4313      	orrs	r3, r2
 8004038:	f043 0307 	orr.w	r3, r3, #7
 800403c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	609a      	str	r2, [r3, #8]
}
 8004044:	bf00      	nop
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800406a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	021a      	lsls	r2, r3, #8
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	431a      	orrs	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4313      	orrs	r3, r2
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	609a      	str	r2, [r3, #8]
}
 8004084:	bf00      	nop
 8004086:	371c      	adds	r7, #28
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f003 031f 	and.w	r3, r3, #31
 80040a2:	2201      	movs	r2, #1
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a1a      	ldr	r2, [r3, #32]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	43db      	mvns	r3, r3
 80040b2:	401a      	ands	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a1a      	ldr	r2, [r3, #32]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f003 031f 	and.w	r3, r3, #31
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	fa01 f303 	lsl.w	r3, r1, r3
 80040c8:	431a      	orrs	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	621a      	str	r2, [r3, #32]
}
 80040ce:	bf00      	nop
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e050      	b.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1c      	ldr	r2, [pc, #112]	; (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d018      	beq.n	800416a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004140:	d013      	beq.n	800416a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a18      	ldr	r2, [pc, #96]	; (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00e      	beq.n	800416a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a16      	ldr	r2, [pc, #88]	; (80041ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d009      	beq.n	800416a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a15      	ldr	r2, [pc, #84]	; (80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d004      	beq.n	800416a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a13      	ldr	r2, [pc, #76]	; (80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d10c      	bne.n	8004184 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004170:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	4313      	orrs	r3, r2
 800417a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40010000 	.word	0x40010000
 80041a8:	40000400 	.word	0x40000400
 80041ac:	40000800 	.word	0x40000800
 80041b0:	40000c00 	.word	0x40000c00
 80041b4:	40014000 	.word	0x40014000

080041b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e03f      	b.n	8004272 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fd fbdc 	bl	80019c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2224      	movs	r2, #36	; 0x24
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004222:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 fe49 	bl	8004ebc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004238:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695a      	ldr	r2, [r3, #20]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004248:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004258:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e021      	b.n	80042d0 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2224      	movs	r2, #36	; 0x24
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042a2:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7fd fc4f 	bl	8001b48 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08a      	sub	sp, #40	; 0x28
 80042dc:	af02      	add	r7, sp, #8
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	603b      	str	r3, [r7, #0]
 80042e4:	4613      	mov	r3, r2
 80042e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d17c      	bne.n	80043f2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <HAL_UART_Transmit+0x2c>
 80042fe:	88fb      	ldrh	r3, [r7, #6]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e075      	b.n	80043f4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800430e:	2b01      	cmp	r3, #1
 8004310:	d101      	bne.n	8004316 <HAL_UART_Transmit+0x3e>
 8004312:	2302      	movs	r3, #2
 8004314:	e06e      	b.n	80043f4 <HAL_UART_Transmit+0x11c>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2221      	movs	r2, #33	; 0x21
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800432c:	f7fd fe0a 	bl	8001f44 <HAL_GetTick>
 8004330:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	88fa      	ldrh	r2, [r7, #6]
 8004336:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	88fa      	ldrh	r2, [r7, #6]
 800433c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004346:	d108      	bne.n	800435a <HAL_UART_Transmit+0x82>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d104      	bne.n	800435a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004350:	2300      	movs	r3, #0
 8004352:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	e003      	b.n	8004362 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800435e:	2300      	movs	r3, #0
 8004360:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800436a:	e02a      	b.n	80043c2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2200      	movs	r2, #0
 8004374:	2180      	movs	r1, #128	; 0x80
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 fb5a 	bl	8004a30 <UART_WaitOnFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e036      	b.n	80043f4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10b      	bne.n	80043a4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800439a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	3302      	adds	r3, #2
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	e007      	b.n	80043b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	781a      	ldrb	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	3301      	adds	r3, #1
 80043b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1cf      	bne.n	800436c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2200      	movs	r2, #0
 80043d4:	2140      	movs	r1, #64	; 0x40
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 fb2a 	bl	8004a30 <UART_WaitOnFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e006      	b.n	80043f4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	e000      	b.n	80043f4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043f2:	2302      	movs	r3, #2
  }
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3720      	adds	r7, #32
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	4613      	mov	r3, r2
 8004408:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b20      	cmp	r3, #32
 8004414:	d130      	bne.n	8004478 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <HAL_UART_Transmit_IT+0x26>
 800441c:	88fb      	ldrh	r3, [r7, #6]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e029      	b.n	800447a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_UART_Transmit_IT+0x38>
 8004430:	2302      	movs	r3, #2
 8004432:	e022      	b.n	800447a <HAL_UART_Transmit_IT+0x7e>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	88fa      	ldrh	r2, [r7, #6]
 8004446:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	88fa      	ldrh	r2, [r7, #6]
 800444c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2221      	movs	r2, #33	; 0x21
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004472:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	e000      	b.n	800447a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004478:	2302      	movs	r3, #2
  }
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	4613      	mov	r3, r2
 8004492:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b20      	cmp	r3, #32
 800449e:	d11d      	bne.n	80044dc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <HAL_UART_Receive_IT+0x26>
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e016      	b.n	80044de <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_UART_Receive_IT+0x38>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e00f      	b.n	80044de <HAL_UART_Receive_IT+0x58>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044cc:	88fb      	ldrh	r3, [r7, #6]
 80044ce:	461a      	mov	r2, r3
 80044d0:	68b9      	ldr	r1, [r7, #8]
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 fb1a 	bl	8004b0c <UART_Start_Receive_IT>
 80044d8:	4603      	mov	r3, r0
 80044da:	e000      	b.n	80044de <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80044dc:	2302      	movs	r3, #2
  }
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b0ba      	sub	sp, #232	; 0xe8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800450e:	2300      	movs	r3, #0
 8004510:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004514:	2300      	movs	r3, #0
 8004516:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800451a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004526:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10f      	bne.n	800454e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800452e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d009      	beq.n	800454e <HAL_UART_IRQHandler+0x66>
 800453a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800453e:	f003 0320 	and.w	r3, r3, #32
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fbfd 	bl	8004d46 <UART_Receive_IT>
      return;
 800454c:	e256      	b.n	80049fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800454e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 80de 	beq.w	8004714 <HAL_UART_IRQHandler+0x22c>
 8004558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	d106      	bne.n	8004572 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004568:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 80d1 	beq.w	8004714 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00b      	beq.n	8004596 <HAL_UART_IRQHandler+0xae>
 800457e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004586:	2b00      	cmp	r3, #0
 8004588:	d005      	beq.n	8004596 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	f043 0201 	orr.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00b      	beq.n	80045ba <HAL_UART_IRQHandler+0xd2>
 80045a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	f043 0202 	orr.w	r2, r3, #2
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00b      	beq.n	80045de <HAL_UART_IRQHandler+0xf6>
 80045c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f043 0204 	orr.w	r2, r3, #4
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d011      	beq.n	800460e <HAL_UART_IRQHandler+0x126>
 80045ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d105      	bne.n	8004602 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d005      	beq.n	800460e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f043 0208 	orr.w	r2, r3, #8
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 81ed 	beq.w	80049f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <HAL_UART_IRQHandler+0x14e>
 8004624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fb88 	bl	8004d46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	bf0c      	ite	eq
 8004644:	2301      	moveq	r3, #1
 8004646:	2300      	movne	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d103      	bne.n	8004662 <HAL_UART_IRQHandler+0x17a>
 800465a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800465e:	2b00      	cmp	r3, #0
 8004660:	d04f      	beq.n	8004702 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fa90 	bl	8004b88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004672:	2b40      	cmp	r3, #64	; 0x40
 8004674:	d141      	bne.n	80046fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3314      	adds	r3, #20
 800467c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800468c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004694:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3314      	adds	r3, #20
 800469e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1d9      	bne.n	8004676 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d013      	beq.n	80046f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	4a7d      	ldr	r2, [pc, #500]	; (80048c4 <HAL_UART_IRQHandler+0x3dc>)
 80046d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fd fe17 	bl	800230a <HAL_DMA_Abort_IT>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d016      	beq.n	8004710 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046ec:	4610      	mov	r0, r2
 80046ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f0:	e00e      	b.n	8004710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fc fec4 	bl	8001480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f8:	e00a      	b.n	8004710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fc fec0 	bl	8001480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004700:	e006      	b.n	8004710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fc febc 	bl	8001480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800470e:	e170      	b.n	80049f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004710:	bf00      	nop
    return;
 8004712:	e16e      	b.n	80049f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	2b01      	cmp	r3, #1
 800471a:	f040 814a 	bne.w	80049b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800471e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004722:	f003 0310 	and.w	r3, r3, #16
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 8143 	beq.w	80049b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800472c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004730:	f003 0310 	and.w	r3, r3, #16
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 813c 	beq.w	80049b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800473a:	2300      	movs	r3, #0
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475a:	2b40      	cmp	r3, #64	; 0x40
 800475c:	f040 80b4 	bne.w	80048c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800476c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 8140 	beq.w	80049f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800477a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800477e:	429a      	cmp	r2, r3
 8004780:	f080 8139 	bcs.w	80049f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800478a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004796:	f000 8088 	beq.w	80048aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	330c      	adds	r3, #12
 80047a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047a8:	e853 3f00 	ldrex	r3, [r3]
 80047ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	330c      	adds	r3, #12
 80047c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80047c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1d9      	bne.n	800479a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3314      	adds	r3, #20
 80047ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047f8:	f023 0301 	bic.w	r3, r3, #1
 80047fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3314      	adds	r3, #20
 8004806:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800480a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800480e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004810:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004812:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004816:	e841 2300 	strex	r3, r2, [r1]
 800481a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800481c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1e1      	bne.n	80047e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3314      	adds	r3, #20
 8004828:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3314      	adds	r3, #20
 8004842:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004846:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004848:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800484c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800484e:	e841 2300 	strex	r3, r2, [r1]
 8004852:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1e3      	bne.n	8004822 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2220      	movs	r2, #32
 800485e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	330c      	adds	r3, #12
 800486e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800487a:	f023 0310 	bic.w	r3, r3, #16
 800487e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	330c      	adds	r3, #12
 8004888:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800488c:	65ba      	str	r2, [r7, #88]	; 0x58
 800488e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004890:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004892:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004894:	e841 2300 	strex	r3, r2, [r1]
 8004898:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800489a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1e3      	bne.n	8004868 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fd fcc0 	bl	800222a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	4619      	mov	r1, r3
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f8ac 	bl	8004a18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048c0:	e099      	b.n	80049f6 <HAL_UART_IRQHandler+0x50e>
 80048c2:	bf00      	nop
 80048c4:	08004c4f 	.word	0x08004c4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 808b 	beq.w	80049fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80048e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8086 	beq.w	80049fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	330c      	adds	r3, #12
 80048f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f8:	e853 3f00 	ldrex	r3, [r3]
 80048fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004900:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004904:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	330c      	adds	r3, #12
 800490e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004912:	647a      	str	r2, [r7, #68]	; 0x44
 8004914:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004916:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004918:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800491a:	e841 2300 	strex	r3, r2, [r1]
 800491e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1e3      	bne.n	80048ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3314      	adds	r3, #20
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	623b      	str	r3, [r7, #32]
   return(result);
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	f023 0301 	bic.w	r3, r3, #1
 800493c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3314      	adds	r3, #20
 8004946:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800494a:	633a      	str	r2, [r7, #48]	; 0x30
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e3      	bne.n	8004926 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	330c      	adds	r3, #12
 8004972:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	e853 3f00 	ldrex	r3, [r3]
 800497a:	60fb      	str	r3, [r7, #12]
   return(result);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0310 	bic.w	r3, r3, #16
 8004982:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	330c      	adds	r3, #12
 800498c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004990:	61fa      	str	r2, [r7, #28]
 8004992:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	69b9      	ldr	r1, [r7, #24]
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	617b      	str	r3, [r7, #20]
   return(result);
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e3      	bne.n	800496c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049a8:	4619      	mov	r1, r3
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f834 	bl	8004a18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049b0:	e023      	b.n	80049fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d009      	beq.n	80049d2 <HAL_UART_IRQHandler+0x4ea>
 80049be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f953 	bl	8004c76 <UART_Transmit_IT>
    return;
 80049d0:	e014      	b.n	80049fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00e      	beq.n	80049fc <HAL_UART_IRQHandler+0x514>
 80049de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d008      	beq.n	80049fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f993 	bl	8004d16 <UART_EndTransmit_IT>
    return;
 80049f0:	e004      	b.n	80049fc <HAL_UART_IRQHandler+0x514>
    return;
 80049f2:	bf00      	nop
 80049f4:	e002      	b.n	80049fc <HAL_UART_IRQHandler+0x514>
      return;
 80049f6:	bf00      	nop
 80049f8:	e000      	b.n	80049fc <HAL_UART_IRQHandler+0x514>
      return;
 80049fa:	bf00      	nop
  }
}
 80049fc:	37e8      	adds	r7, #232	; 0xe8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop

08004a04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b090      	sub	sp, #64	; 0x40
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	603b      	str	r3, [r7, #0]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a40:	e050      	b.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a48:	d04c      	beq.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d007      	beq.n	8004a60 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a50:	f7fd fa78 	bl	8001f44 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d241      	bcs.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	330c      	adds	r3, #12
 8004a66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	e853 3f00 	ldrex	r3, [r3]
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	330c      	adds	r3, #12
 8004a7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a80:	637a      	str	r2, [r7, #52]	; 0x34
 8004a82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a88:	e841 2300 	strex	r3, r2, [r1]
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e5      	bne.n	8004a60 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3314      	adds	r3, #20
 8004a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f023 0301 	bic.w	r3, r3, #1
 8004aaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3314      	adds	r3, #20
 8004ab2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ab4:	623a      	str	r2, [r7, #32]
 8004ab6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab8:	69f9      	ldr	r1, [r7, #28]
 8004aba:	6a3a      	ldr	r2, [r7, #32]
 8004abc:	e841 2300 	strex	r3, r2, [r1]
 8004ac0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1e5      	bne.n	8004a94 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e00f      	b.n	8004b04 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	4013      	ands	r3, r2
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	bf0c      	ite	eq
 8004af4:	2301      	moveq	r3, #1
 8004af6:	2300      	movne	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d09f      	beq.n	8004a42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3740      	adds	r7, #64	; 0x40
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	4613      	mov	r3, r2
 8004b18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	88fa      	ldrh	r2, [r7, #6]
 8004b24:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	88fa      	ldrh	r2, [r7, #6]
 8004b2a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2222      	movs	r2, #34	; 0x22
 8004b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d007      	beq.n	8004b5a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b58:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695a      	ldr	r2, [r3, #20]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f042 0201 	orr.w	r2, r2, #1
 8004b68:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f042 0220 	orr.w	r2, r2, #32
 8004b78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b095      	sub	sp, #84	; 0x54
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	330c      	adds	r3, #12
 8004b96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9a:	e853 3f00 	ldrex	r3, [r3]
 8004b9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	330c      	adds	r3, #12
 8004bae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bb0:	643a      	str	r2, [r7, #64]	; 0x40
 8004bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bb8:	e841 2300 	strex	r3, r2, [r1]
 8004bbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e5      	bne.n	8004b90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3314      	adds	r3, #20
 8004bca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	e853 3f00 	ldrex	r3, [r3]
 8004bd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f023 0301 	bic.w	r3, r3, #1
 8004bda:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3314      	adds	r3, #20
 8004be2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004be4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004be6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bec:	e841 2300 	strex	r3, r2, [r1]
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e5      	bne.n	8004bc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d119      	bne.n	8004c34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	330c      	adds	r3, #12
 8004c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	e853 3f00 	ldrex	r3, [r3]
 8004c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f023 0310 	bic.w	r3, r3, #16
 8004c16:	647b      	str	r3, [r7, #68]	; 0x44
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	330c      	adds	r3, #12
 8004c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c20:	61ba      	str	r2, [r7, #24]
 8004c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c24:	6979      	ldr	r1, [r7, #20]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	e841 2300 	strex	r3, r2, [r1]
 8004c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1e5      	bne.n	8004c00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c42:	bf00      	nop
 8004c44:	3754      	adds	r7, #84	; 0x54
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b084      	sub	sp, #16
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f7fc fc09 	bl	8001480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c6e:	bf00      	nop
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b085      	sub	sp, #20
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b21      	cmp	r3, #33	; 0x21
 8004c88:	d13e      	bne.n	8004d08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c92:	d114      	bne.n	8004cbe <UART_Transmit_IT+0x48>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d110      	bne.n	8004cbe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	1c9a      	adds	r2, r3, #2
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	621a      	str	r2, [r3, #32]
 8004cbc:	e008      	b.n	8004cd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	1c59      	adds	r1, r3, #1
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6211      	str	r1, [r2, #32]
 8004cc8:	781a      	ldrb	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	4619      	mov	r1, r3
 8004cde:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10f      	bne.n	8004d04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cf2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	e000      	b.n	8004d0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d08:	2302      	movs	r3, #2
  }
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b082      	sub	sp, #8
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7ff fe64 	bl	8004a04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b08c      	sub	sp, #48	; 0x30
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b22      	cmp	r3, #34	; 0x22
 8004d58:	f040 80ab 	bne.w	8004eb2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d64:	d117      	bne.n	8004d96 <UART_Receive_IT+0x50>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d113      	bne.n	8004d96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	1c9a      	adds	r2, r3, #2
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	629a      	str	r2, [r3, #40]	; 0x28
 8004d94:	e026      	b.n	8004de4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da8:	d007      	beq.n	8004dba <UART_Receive_IT+0x74>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10a      	bne.n	8004dc8 <UART_Receive_IT+0x82>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc4:	701a      	strb	r2, [r3, #0]
 8004dc6:	e008      	b.n	8004dda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	4619      	mov	r1, r3
 8004df2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d15a      	bne.n	8004eae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0220 	bic.w	r2, r2, #32
 8004e06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695a      	ldr	r2, [r3, #20]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0201 	bic.w	r2, r2, #1
 8004e26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d135      	bne.n	8004ea4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	330c      	adds	r3, #12
 8004e44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	e853 3f00 	ldrex	r3, [r3]
 8004e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f023 0310 	bic.w	r3, r3, #16
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	330c      	adds	r3, #12
 8004e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5e:	623a      	str	r2, [r7, #32]
 8004e60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e62:	69f9      	ldr	r1, [r7, #28]
 8004e64:	6a3a      	ldr	r2, [r7, #32]
 8004e66:	e841 2300 	strex	r3, r2, [r1]
 8004e6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1e5      	bne.n	8004e3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b10      	cmp	r3, #16
 8004e7e:	d10a      	bne.n	8004e96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7ff fdbb 	bl	8004a18 <HAL_UARTEx_RxEventCallback>
 8004ea2:	e002      	b.n	8004eaa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f7fc fb41 	bl	800152c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e002      	b.n	8004eb4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e000      	b.n	8004eb4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004eb2:	2302      	movs	r3, #2
  }
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3730      	adds	r7, #48	; 0x30
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ec0:	b0c0      	sub	sp, #256	; 0x100
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed8:	68d9      	ldr	r1, [r3, #12]
 8004eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	ea40 0301 	orr.w	r3, r0, r1
 8004ee4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	431a      	orrs	r2, r3
 8004efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f14:	f021 010c 	bic.w	r1, r1, #12
 8004f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f22:	430b      	orrs	r3, r1
 8004f24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f36:	6999      	ldr	r1, [r3, #24]
 8004f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	ea40 0301 	orr.w	r3, r0, r1
 8004f42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	4b8f      	ldr	r3, [pc, #572]	; (8005188 <UART_SetConfig+0x2cc>)
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d005      	beq.n	8004f5c <UART_SetConfig+0xa0>
 8004f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4b8d      	ldr	r3, [pc, #564]	; (800518c <UART_SetConfig+0x2d0>)
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d104      	bne.n	8004f66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f5c:	f7fe f8d8 	bl	8003110 <HAL_RCC_GetPCLK2Freq>
 8004f60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f64:	e003      	b.n	8004f6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f66:	f7fe f8bf 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 8004f6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f78:	f040 810c 	bne.w	8005194 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f80:	2200      	movs	r2, #0
 8004f82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f8e:	4622      	mov	r2, r4
 8004f90:	462b      	mov	r3, r5
 8004f92:	1891      	adds	r1, r2, r2
 8004f94:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f96:	415b      	adcs	r3, r3
 8004f98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	eb12 0801 	adds.w	r8, r2, r1
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	eb43 0901 	adc.w	r9, r3, r1
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	f04f 0300 	mov.w	r3, #0
 8004fb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fbe:	4690      	mov	r8, r2
 8004fc0:	4699      	mov	r9, r3
 8004fc2:	4623      	mov	r3, r4
 8004fc4:	eb18 0303 	adds.w	r3, r8, r3
 8004fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004fcc:	462b      	mov	r3, r5
 8004fce:	eb49 0303 	adc.w	r3, r9, r3
 8004fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fe2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004fe6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004fea:	460b      	mov	r3, r1
 8004fec:	18db      	adds	r3, r3, r3
 8004fee:	653b      	str	r3, [r7, #80]	; 0x50
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	eb42 0303 	adc.w	r3, r2, r3
 8004ff6:	657b      	str	r3, [r7, #84]	; 0x54
 8004ff8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ffc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005000:	f7fb f956 	bl	80002b0 <__aeabi_uldivmod>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4b61      	ldr	r3, [pc, #388]	; (8005190 <UART_SetConfig+0x2d4>)
 800500a:	fba3 2302 	umull	r2, r3, r3, r2
 800500e:	095b      	lsrs	r3, r3, #5
 8005010:	011c      	lsls	r4, r3, #4
 8005012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005016:	2200      	movs	r2, #0
 8005018:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800501c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005020:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005024:	4642      	mov	r2, r8
 8005026:	464b      	mov	r3, r9
 8005028:	1891      	adds	r1, r2, r2
 800502a:	64b9      	str	r1, [r7, #72]	; 0x48
 800502c:	415b      	adcs	r3, r3
 800502e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005030:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005034:	4641      	mov	r1, r8
 8005036:	eb12 0a01 	adds.w	sl, r2, r1
 800503a:	4649      	mov	r1, r9
 800503c:	eb43 0b01 	adc.w	fp, r3, r1
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	f04f 0300 	mov.w	r3, #0
 8005048:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800504c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005050:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005054:	4692      	mov	sl, r2
 8005056:	469b      	mov	fp, r3
 8005058:	4643      	mov	r3, r8
 800505a:	eb1a 0303 	adds.w	r3, sl, r3
 800505e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005062:	464b      	mov	r3, r9
 8005064:	eb4b 0303 	adc.w	r3, fp, r3
 8005068:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005078:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800507c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005080:	460b      	mov	r3, r1
 8005082:	18db      	adds	r3, r3, r3
 8005084:	643b      	str	r3, [r7, #64]	; 0x40
 8005086:	4613      	mov	r3, r2
 8005088:	eb42 0303 	adc.w	r3, r2, r3
 800508c:	647b      	str	r3, [r7, #68]	; 0x44
 800508e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005092:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005096:	f7fb f90b 	bl	80002b0 <__aeabi_uldivmod>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	4611      	mov	r1, r2
 80050a0:	4b3b      	ldr	r3, [pc, #236]	; (8005190 <UART_SetConfig+0x2d4>)
 80050a2:	fba3 2301 	umull	r2, r3, r3, r1
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	2264      	movs	r2, #100	; 0x64
 80050aa:	fb02 f303 	mul.w	r3, r2, r3
 80050ae:	1acb      	subs	r3, r1, r3
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80050b6:	4b36      	ldr	r3, [pc, #216]	; (8005190 <UART_SetConfig+0x2d4>)
 80050b8:	fba3 2302 	umull	r2, r3, r3, r2
 80050bc:	095b      	lsrs	r3, r3, #5
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050c4:	441c      	add	r4, r3
 80050c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050ca:	2200      	movs	r2, #0
 80050cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80050d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80050d8:	4642      	mov	r2, r8
 80050da:	464b      	mov	r3, r9
 80050dc:	1891      	adds	r1, r2, r2
 80050de:	63b9      	str	r1, [r7, #56]	; 0x38
 80050e0:	415b      	adcs	r3, r3
 80050e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050e8:	4641      	mov	r1, r8
 80050ea:	1851      	adds	r1, r2, r1
 80050ec:	6339      	str	r1, [r7, #48]	; 0x30
 80050ee:	4649      	mov	r1, r9
 80050f0:	414b      	adcs	r3, r1
 80050f2:	637b      	str	r3, [r7, #52]	; 0x34
 80050f4:	f04f 0200 	mov.w	r2, #0
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005100:	4659      	mov	r1, fp
 8005102:	00cb      	lsls	r3, r1, #3
 8005104:	4651      	mov	r1, sl
 8005106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800510a:	4651      	mov	r1, sl
 800510c:	00ca      	lsls	r2, r1, #3
 800510e:	4610      	mov	r0, r2
 8005110:	4619      	mov	r1, r3
 8005112:	4603      	mov	r3, r0
 8005114:	4642      	mov	r2, r8
 8005116:	189b      	adds	r3, r3, r2
 8005118:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800511c:	464b      	mov	r3, r9
 800511e:	460a      	mov	r2, r1
 8005120:	eb42 0303 	adc.w	r3, r2, r3
 8005124:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005134:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005138:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800513c:	460b      	mov	r3, r1
 800513e:	18db      	adds	r3, r3, r3
 8005140:	62bb      	str	r3, [r7, #40]	; 0x28
 8005142:	4613      	mov	r3, r2
 8005144:	eb42 0303 	adc.w	r3, r2, r3
 8005148:	62fb      	str	r3, [r7, #44]	; 0x2c
 800514a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800514e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005152:	f7fb f8ad 	bl	80002b0 <__aeabi_uldivmod>
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	4b0d      	ldr	r3, [pc, #52]	; (8005190 <UART_SetConfig+0x2d4>)
 800515c:	fba3 1302 	umull	r1, r3, r3, r2
 8005160:	095b      	lsrs	r3, r3, #5
 8005162:	2164      	movs	r1, #100	; 0x64
 8005164:	fb01 f303 	mul.w	r3, r1, r3
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	3332      	adds	r3, #50	; 0x32
 800516e:	4a08      	ldr	r2, [pc, #32]	; (8005190 <UART_SetConfig+0x2d4>)
 8005170:	fba2 2303 	umull	r2, r3, r2, r3
 8005174:	095b      	lsrs	r3, r3, #5
 8005176:	f003 0207 	and.w	r2, r3, #7
 800517a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4422      	add	r2, r4
 8005182:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005184:	e106      	b.n	8005394 <UART_SetConfig+0x4d8>
 8005186:	bf00      	nop
 8005188:	40011000 	.word	0x40011000
 800518c:	40011400 	.word	0x40011400
 8005190:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005198:	2200      	movs	r2, #0
 800519a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800519e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80051a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80051a6:	4642      	mov	r2, r8
 80051a8:	464b      	mov	r3, r9
 80051aa:	1891      	adds	r1, r2, r2
 80051ac:	6239      	str	r1, [r7, #32]
 80051ae:	415b      	adcs	r3, r3
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24
 80051b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051b6:	4641      	mov	r1, r8
 80051b8:	1854      	adds	r4, r2, r1
 80051ba:	4649      	mov	r1, r9
 80051bc:	eb43 0501 	adc.w	r5, r3, r1
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	f04f 0300 	mov.w	r3, #0
 80051c8:	00eb      	lsls	r3, r5, #3
 80051ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051ce:	00e2      	lsls	r2, r4, #3
 80051d0:	4614      	mov	r4, r2
 80051d2:	461d      	mov	r5, r3
 80051d4:	4643      	mov	r3, r8
 80051d6:	18e3      	adds	r3, r4, r3
 80051d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051dc:	464b      	mov	r3, r9
 80051de:	eb45 0303 	adc.w	r3, r5, r3
 80051e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051f6:	f04f 0200 	mov.w	r2, #0
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005202:	4629      	mov	r1, r5
 8005204:	008b      	lsls	r3, r1, #2
 8005206:	4621      	mov	r1, r4
 8005208:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800520c:	4621      	mov	r1, r4
 800520e:	008a      	lsls	r2, r1, #2
 8005210:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005214:	f7fb f84c 	bl	80002b0 <__aeabi_uldivmod>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4b60      	ldr	r3, [pc, #384]	; (80053a0 <UART_SetConfig+0x4e4>)
 800521e:	fba3 2302 	umull	r2, r3, r3, r2
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	011c      	lsls	r4, r3, #4
 8005226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800522a:	2200      	movs	r2, #0
 800522c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005230:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005234:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005238:	4642      	mov	r2, r8
 800523a:	464b      	mov	r3, r9
 800523c:	1891      	adds	r1, r2, r2
 800523e:	61b9      	str	r1, [r7, #24]
 8005240:	415b      	adcs	r3, r3
 8005242:	61fb      	str	r3, [r7, #28]
 8005244:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005248:	4641      	mov	r1, r8
 800524a:	1851      	adds	r1, r2, r1
 800524c:	6139      	str	r1, [r7, #16]
 800524e:	4649      	mov	r1, r9
 8005250:	414b      	adcs	r3, r1
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	f04f 0200 	mov.w	r2, #0
 8005258:	f04f 0300 	mov.w	r3, #0
 800525c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005260:	4659      	mov	r1, fp
 8005262:	00cb      	lsls	r3, r1, #3
 8005264:	4651      	mov	r1, sl
 8005266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800526a:	4651      	mov	r1, sl
 800526c:	00ca      	lsls	r2, r1, #3
 800526e:	4610      	mov	r0, r2
 8005270:	4619      	mov	r1, r3
 8005272:	4603      	mov	r3, r0
 8005274:	4642      	mov	r2, r8
 8005276:	189b      	adds	r3, r3, r2
 8005278:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800527c:	464b      	mov	r3, r9
 800527e:	460a      	mov	r2, r1
 8005280:	eb42 0303 	adc.w	r3, r2, r3
 8005284:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	67bb      	str	r3, [r7, #120]	; 0x78
 8005292:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	f04f 0300 	mov.w	r3, #0
 800529c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80052a0:	4649      	mov	r1, r9
 80052a2:	008b      	lsls	r3, r1, #2
 80052a4:	4641      	mov	r1, r8
 80052a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052aa:	4641      	mov	r1, r8
 80052ac:	008a      	lsls	r2, r1, #2
 80052ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052b2:	f7fa fffd 	bl	80002b0 <__aeabi_uldivmod>
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	4611      	mov	r1, r2
 80052bc:	4b38      	ldr	r3, [pc, #224]	; (80053a0 <UART_SetConfig+0x4e4>)
 80052be:	fba3 2301 	umull	r2, r3, r3, r1
 80052c2:	095b      	lsrs	r3, r3, #5
 80052c4:	2264      	movs	r2, #100	; 0x64
 80052c6:	fb02 f303 	mul.w	r3, r2, r3
 80052ca:	1acb      	subs	r3, r1, r3
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	3332      	adds	r3, #50	; 0x32
 80052d0:	4a33      	ldr	r2, [pc, #204]	; (80053a0 <UART_SetConfig+0x4e4>)
 80052d2:	fba2 2303 	umull	r2, r3, r2, r3
 80052d6:	095b      	lsrs	r3, r3, #5
 80052d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052dc:	441c      	add	r4, r3
 80052de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052e2:	2200      	movs	r2, #0
 80052e4:	673b      	str	r3, [r7, #112]	; 0x70
 80052e6:	677a      	str	r2, [r7, #116]	; 0x74
 80052e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80052ec:	4642      	mov	r2, r8
 80052ee:	464b      	mov	r3, r9
 80052f0:	1891      	adds	r1, r2, r2
 80052f2:	60b9      	str	r1, [r7, #8]
 80052f4:	415b      	adcs	r3, r3
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052fc:	4641      	mov	r1, r8
 80052fe:	1851      	adds	r1, r2, r1
 8005300:	6039      	str	r1, [r7, #0]
 8005302:	4649      	mov	r1, r9
 8005304:	414b      	adcs	r3, r1
 8005306:	607b      	str	r3, [r7, #4]
 8005308:	f04f 0200 	mov.w	r2, #0
 800530c:	f04f 0300 	mov.w	r3, #0
 8005310:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005314:	4659      	mov	r1, fp
 8005316:	00cb      	lsls	r3, r1, #3
 8005318:	4651      	mov	r1, sl
 800531a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800531e:	4651      	mov	r1, sl
 8005320:	00ca      	lsls	r2, r1, #3
 8005322:	4610      	mov	r0, r2
 8005324:	4619      	mov	r1, r3
 8005326:	4603      	mov	r3, r0
 8005328:	4642      	mov	r2, r8
 800532a:	189b      	adds	r3, r3, r2
 800532c:	66bb      	str	r3, [r7, #104]	; 0x68
 800532e:	464b      	mov	r3, r9
 8005330:	460a      	mov	r2, r1
 8005332:	eb42 0303 	adc.w	r3, r2, r3
 8005336:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	663b      	str	r3, [r7, #96]	; 0x60
 8005342:	667a      	str	r2, [r7, #100]	; 0x64
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005350:	4649      	mov	r1, r9
 8005352:	008b      	lsls	r3, r1, #2
 8005354:	4641      	mov	r1, r8
 8005356:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800535a:	4641      	mov	r1, r8
 800535c:	008a      	lsls	r2, r1, #2
 800535e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005362:	f7fa ffa5 	bl	80002b0 <__aeabi_uldivmod>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4b0d      	ldr	r3, [pc, #52]	; (80053a0 <UART_SetConfig+0x4e4>)
 800536c:	fba3 1302 	umull	r1, r3, r3, r2
 8005370:	095b      	lsrs	r3, r3, #5
 8005372:	2164      	movs	r1, #100	; 0x64
 8005374:	fb01 f303 	mul.w	r3, r1, r3
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	3332      	adds	r3, #50	; 0x32
 800537e:	4a08      	ldr	r2, [pc, #32]	; (80053a0 <UART_SetConfig+0x4e4>)
 8005380:	fba2 2303 	umull	r2, r3, r2, r3
 8005384:	095b      	lsrs	r3, r3, #5
 8005386:	f003 020f 	and.w	r2, r3, #15
 800538a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4422      	add	r2, r4
 8005392:	609a      	str	r2, [r3, #8]
}
 8005394:	bf00      	nop
 8005396:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800539a:	46bd      	mov	sp, r7
 800539c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053a0:	51eb851f 	.word	0x51eb851f

080053a4 <HW_RESET>:


//No se puede quedar esperano en las funciones, hay que detectar a situaci�n y salir del bucle.
//pensar que solo entra cuando recibe datos, si no vuelve a entrar queda ah� eternamentes.
void HW_RESET(struct WIFI *a)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_RESET);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6818      	ldr	r0, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	889b      	ldrh	r3, [r3, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	4619      	mov	r1, r3
 80053b8:	f7fd fa32 	bl	8002820 <HAL_GPIO_WritePin>
    ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 80053bc:	2115      	movs	r1, #21
 80053be:	480b      	ldr	r0, [pc, #44]	; (80053ec <HW_RESET+0x48>)
 80053c0:	f7fb fec6 	bl	8001150 <ITM0_Write>
    HAL_Delay(2000);											//Tiempo de reset del módulo
 80053c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80053c8:	f7fc fdc8 	bl	8001f5c <HAL_Delay>
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
 80053cc:	210e      	movs	r1, #14
 80053ce:	4808      	ldr	r0, [pc, #32]	; (80053f0 <HW_RESET+0x4c>)
 80053d0:	f7fb febe 	bl	8001150 <ITM0_Write>
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6818      	ldr	r0, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	889b      	ldrh	r3, [r3, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	4619      	mov	r1, r3
 80053e0:	f7fd fa1e 	bl	8002820 <HAL_GPIO_WritePin>
}
 80053e4:	bf00      	nop
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	0800d4a4 	.word	0x0800d4a4
 80053f0:	0800d4bc 	.word	0x0800d4bc

080053f4 <NOP>:
void NOP(struct WIFI *a)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=0;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <MUX>:
void MUX(struct WIFI *a)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2204      	movs	r2, #4
 8005484:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <IPDef>:
void IPDef(struct WIFI *a)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2205      	movs	r2, #5
 80054b0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2206      	movs	r2, #6
 8005508:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2208      	movs	r2, #8
 8005534:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2209      	movs	r2, #9
 8005560:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2207      	movs	r2, #7
 800558c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <Inicializar>:
void Inicializar(struct WIFI *a)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
a->_data2SND[64]='\0';			//Data a enviar por TCP
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2898 	strb.w	r2, [r3, #2200]	; 0x898
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2a98 	strb.w	r2, [r3, #2712]	; 0xa98
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_instruccion=0;				//Funcion que se desea realizar
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_ejecucion=0;				//Funcion en ejecucion	
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2af8 	strb.w	r2, [r3, #2808]	; 0xaf8
a->_ticks=0;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_ticks2=0;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug=0;					//utilizada par fines de debugging
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_str=0;				//utilizada par fines de debugging
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_pos=0;				//utilizada par fines de debugging
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
a->_debug_chrs=0;				//utilizada par fines de debugging
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_rx_ok=0;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
a->_debug_rx_no_ok=0;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
a->_debug_SEND_OK=0;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_CLOSED=0;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38
a->_debug_WF_DISCONNECT=0;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
a->_debug_FAIL=0;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
a->_debug_CONNECT=0;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_count=0;				//Cuento la catidad de ipds	
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count_old=0;			//Cuento la catidad de ipds
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count2=0;				//SEND OK para enviar datos
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count4=0;				//SEDN OK recibido directo
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count5=0;				//Cuento la catidad de ipds	
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count6=0;				//Cuento la catidad de ipds	
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count7=0;				//Cuento la catidad de ipds
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_debug_count8=0;				//Cuento la catidad de ipds
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_count9=0;				//Cuento la catidad de ipds
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count10=0;			//Cuento la catidad de ipds
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_subpaso=0;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
a->_overflowVector=512;			//Maximo tamaño del vector al procesar un +IPD
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800573a:	f8c3 2d54 	str.w	r2, [r3, #3412]	; 0xd54
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
	...

0800574c <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 800574c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800574e:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005752:	af06      	add	r7, sp, #24
 8005754:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005758:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800575c:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 800575e:	2300      	movs	r3, #0
 8005760:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8005764:	2300      	movs	r3, #0
 8005766:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800576a:	2300      	movs	r3, #0
 800576c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8005770:	2300      	movs	r3, #0
 8005772:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8005776:	2300      	movs	r3, #0
 8005778:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 800577c:	2320      	movs	r3, #32
 800577e:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 8005782:	2322      	movs	r3, #34	; 0x22
 8005784:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 8005788:	4b7c      	ldr	r3, [pc, #496]	; (800597c <AT_ESP8266_ND+0x230>)
 800578a:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 800578e:	4a7c      	ldr	r2, [pc, #496]	; (8005980 <AT_ESP8266_ND+0x234>)
 8005790:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8005794:	6812      	ldr	r2, [r2, #0]
 8005796:	4611      	mov	r1, r2
 8005798:	8019      	strh	r1, [r3, #0]
 800579a:	3302      	adds	r3, #2
 800579c:	0c12      	lsrs	r2, r2, #16
 800579e:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 80057a0:	f642 4322 	movw	r3, #11298	; 0x2c22
 80057a4:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 80057a8:	f640 230d 	movw	r3, #2573	; 0xa0d
 80057ac:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 80057b0:	2300      	movs	r3, #0
 80057b2:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80057b6:	2300      	movs	r3, #0
 80057b8:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 80057bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80057c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 80057cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80057d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fa fd0a 	bl	80001f4 <strlen>
 80057e0:	4603      	mov	r3, r0
 80057e2:	461a      	mov	r2, r3
 80057e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80057e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 80057f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80057f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 8005802:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005806:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 8005810:	4618      	mov	r0, r3
 8005812:	f7fa fcef 	bl	80001f4 <strlen>
 8005816:	4603      	mov	r3, r0
 8005818:	461a      	mov	r2, r3
 800581a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800581e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los +IPD proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 8005828:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800582c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2206      	movs	r2, #6
 8005834:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8005838:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800583c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8005846:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800584a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8005854:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005858:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8005862:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005866:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8005870:	603b      	str	r3, [r7, #0]
 8005872:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005876:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800587a:	6812      	ldr	r2, [r2, #0]
 800587c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8005880:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8005884:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8005888:	6809      	ldr	r1, [r1, #0]
 800588a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800588e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8005892:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8005896:	6800      	ldr	r0, [r0, #0]
 8005898:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800589c:	2300      	movs	r3, #0
 800589e:	9305      	str	r3, [sp, #20]
 80058a0:	9004      	str	r0, [sp, #16]
 80058a2:	9103      	str	r1, [sp, #12]
 80058a4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80058a8:	9102      	str	r1, [sp, #8]
 80058aa:	9201      	str	r2, [sp, #4]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	4633      	mov	r3, r6
 80058b2:	4a34      	ldr	r2, [pc, #208]	; (8005984 <AT_ESP8266_ND+0x238>)
 80058b4:	4629      	mov	r1, r5
 80058b6:	4620      	mov	r0, r4
 80058b8:	f005 fe84 	bl	800b5c4 <FT_String_ND>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b01      	cmp	r3, #1
 80058c0:	f040 8140 	bne.w	8005b44 <AT_ESP8266_ND+0x3f8>
		 {
			a->_n_fcomp=strlen("\r\n+IPD");
 80058c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2206      	movs	r2, #6
 80058d0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
			if(a->_TCP_Local_Server_EN==0)
 80058d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d150      	bne.n	8005988 <AT_ESP8266_ND+0x23c>
				{
					a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATA);
 80058e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80058f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8005902:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005906:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8005910:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005914:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800591e:	603b      	str	r3, [r7, #0]
 8005920:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005924:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8005928:	6812      	ldr	r2, [r2, #0]
 800592a:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800592e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8005932:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8005936:	6809      	ldr	r1, [r1, #0]
 8005938:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800593c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8005940:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8005944:	6800      	ldr	r0, [r0, #0]
 8005946:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800594a:	2304      	movs	r3, #4
 800594c:	9305      	str	r3, [sp, #20]
 800594e:	9004      	str	r0, [sp, #16]
 8005950:	9103      	str	r1, [sp, #12]
 8005952:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8005956:	9102      	str	r1, [sp, #8]
 8005958:	9201      	str	r2, [sp, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	4633      	mov	r3, r6
 8005960:	4a08      	ldr	r2, [pc, #32]	; (8005984 <AT_ESP8266_ND+0x238>)
 8005962:	4629      	mov	r1, r5
 8005964:	4620      	mov	r0, r4
 8005966:	f005 fe2d 	bl	800b5c4 <FT_String_ND>
 800596a:	4602      	mov	r2, r0
 800596c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005970:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
 800597a:	e04f      	b.n	8005a1c <AT_ESP8266_ND+0x2d0>
 800597c:	00222c22 	.word	0x00222c22
 8005980:	0800d6b8 	.word	0x0800d6b8
 8005984:	0800d4cc 	.word	0x0800d4cc
				}
				else
				{
					a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATASRVR);
 8005988:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800598c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8005996:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800599a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80059a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80059a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80059b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80059b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80059c0:	603b      	str	r3, [r7, #0]
 80059c2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80059c6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80059ca:	6812      	ldr	r2, [r2, #0]
 80059cc:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80059d0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80059d4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80059d8:	6809      	ldr	r1, [r1, #0]
 80059da:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80059de:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80059e2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80059e6:	6800      	ldr	r0, [r0, #0]
 80059e8:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80059ec:	2305      	movs	r3, #5
 80059ee:	9305      	str	r3, [sp, #20]
 80059f0:	9004      	str	r0, [sp, #16]
 80059f2:	9103      	str	r1, [sp, #12]
 80059f4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80059f8:	9102      	str	r1, [sp, #8]
 80059fa:	9201      	str	r2, [sp, #4]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	4633      	mov	r3, r6
 8005a02:	4ad2      	ldr	r2, [pc, #840]	; (8005d4c <AT_ESP8266_ND+0x600>)
 8005a04:	4629      	mov	r1, r5
 8005a06:	4620      	mov	r0, r4
 8005a08:	f005 fddc 	bl	800b5c4 <FT_String_ND>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
				}

			if(a->_estado_data==4)
 8005a1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d15a      	bne.n	8005ae4 <AT_ESP8266_ND+0x398>
				{
					a->_estado_rcv_data=99;
 8005a2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2263      	movs	r2, #99	; 0x63
 8005a3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					a->_n_dataRCV=a->_n_tok;
 8005a3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f8d3 2cec 	ldr.w	r2, [r3, #3308]	; 0xcec
 8005a4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
					CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8005a5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8005a68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f603 0198 	addw	r1, r3, #2200	; 0x898
 8005a76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f8d3 2cec 	ldr.w	r2, [r3, #3308]	; 0xcec
 8005a84:	2341      	movs	r3, #65	; 0x41
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f006 f98d 	bl	800bda8 <CopiaVector>
					CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8005a8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005a92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f503 7026 	add.w	r0, r3, #664	; 0x298
 8005a9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005aa0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f603 0198 	addw	r1, r3, #2200	; 0x898
 8005aaa:	2341      	movs	r3, #65	; 0x41
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	2205      	movs	r2, #5
 8005ab2:	f006 f979 	bl	800bda8 <CopiaVector>

					a->_debug_rx_ok++;
 8005ab6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005aba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f8d3 3cd8 	ldr.w	r3, [r3, #3288]	; 0xcd8
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005aca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					a->_new_data_rcv=1;
 8005ad4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ad8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
				}
			if(a->_estado_data==5)
 8005ae4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ae8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8005af2:	2b05      	cmp	r3, #5
 8005af4:	d126      	bne.n	8005b44 <AT_ESP8266_ND+0x3f8>
				{
					a->_estado_rcv_data=55;
 8005af6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005afa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2237      	movs	r2, #55	; 0x37
 8005b02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					a->_n_dataRCV=0;
 8005b06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
					a->_debug_rx_no_ok++;
 8005b16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 8005b24:	1c5a      	adds	r2, r3, #1
 8005b26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
					a->_new_data_rcv=1;
 8005b34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
		 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8005b44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2204      	movs	r2, #4
 8005b50:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8005b54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8005b62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8005b70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8005b7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8005b8c:	603b      	str	r3, [r7, #0]
 8005b8e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005b92:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8005b96:	6812      	ldr	r2, [r2, #0]
 8005b98:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8005b9c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8005ba0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8005ba4:	6809      	ldr	r1, [r1, #0]
 8005ba6:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8005baa:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8005bae:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8005bb2:	6800      	ldr	r0, [r0, #0]
 8005bb4:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8005bb8:	2300      	movs	r3, #0
 8005bba:	9305      	str	r3, [sp, #20]
 8005bbc:	9004      	str	r0, [sp, #16]
 8005bbe:	9103      	str	r1, [sp, #12]
 8005bc0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8005bc4:	9102      	str	r1, [sp, #8]
 8005bc6:	9201      	str	r2, [sp, #4]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	4633      	mov	r3, r6
 8005bce:	4a60      	ldr	r2, [pc, #384]	; (8005d50 <AT_ESP8266_ND+0x604>)
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f005 fcf6 	bl	800b5c4 <FT_String_ND>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	f040 83ab 	bne.w	8006336 <AT_ESP8266_ND+0xbea>
	{
		AT_decode=at_ok;
 8005be0:	2301      	movs	r3, #1
 8005be2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND OK\r\n");
 8005be6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005bea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	220b      	movs	r2, #11
 8005bf2:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Transmision ok
 8005bf6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005bfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8005c04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005c08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8005c12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005c16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8005c20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005c24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8005c2e:	603b      	str	r3, [r7, #0]
 8005c30:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005c34:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8005c38:	6812      	ldr	r2, [r2, #0]
 8005c3a:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8005c3e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8005c42:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8005c46:	6809      	ldr	r1, [r1, #0]
 8005c48:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8005c4c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8005c50:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8005c54:	6800      	ldr	r0, [r0, #0]
 8005c56:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	9305      	str	r3, [sp, #20]
 8005c5e:	9004      	str	r0, [sp, #16]
 8005c60:	9103      	str	r1, [sp, #12]
 8005c62:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8005c66:	9102      	str	r1, [sp, #8]
 8005c68:	9201      	str	r2, [sp, #4]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	4633      	mov	r3, r6
 8005c70:	4a38      	ldr	r2, [pc, #224]	; (8005d54 <AT_ESP8266_ND+0x608>)
 8005c72:	4629      	mov	r1, r5
 8005c74:	4620      	mov	r0, r4
 8005c76:	f005 fca5 	bl	800b5c4 <FT_String_ND>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d113      	bne.n	8005ca8 <AT_ESP8266_ND+0x55c>
			 {
			 AT_decode=at_tcp_enviado_ok;
 8005c80:	2313      	movs	r3, #19
 8005c82:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 8005c86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005c8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005c9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 8005ca4:	f001 badf 	b.w	8007266 <AT_ESP8266_ND+0x1b1a>
			 }
		 else
		 {
			//------------------CONFIRMO CIERRE DE  CONEXION------------------//
			a->_n_fcomp=strlen("AT+CWQAP");
 8005ca8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005cac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2208      	movs	r2, #8
 8005cb4:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8005cb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005cbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8005cc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005cca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8005cd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005cd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8005ce2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ce6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8005cf0:	603b      	str	r3, [r7, #0]
 8005cf2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005cf6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8005cfa:	6812      	ldr	r2, [r2, #0]
 8005cfc:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8005d00:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8005d04:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8005d08:	6809      	ldr	r1, [r1, #0]
 8005d0a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8005d0e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8005d12:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8005d16:	6800      	ldr	r0, [r0, #0]
 8005d18:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	9305      	str	r3, [sp, #20]
 8005d20:	9004      	str	r0, [sp, #16]
 8005d22:	9103      	str	r1, [sp, #12]
 8005d24:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8005d28:	9102      	str	r1, [sp, #8]
 8005d2a:	9201      	str	r2, [sp, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	4633      	mov	r3, r6
 8005d32:	4a09      	ldr	r2, [pc, #36]	; (8005d58 <AT_ESP8266_ND+0x60c>)
 8005d34:	4629      	mov	r1, r5
 8005d36:	4620      	mov	r0, r4
 8005d38:	f005 fc44 	bl	800b5c4 <FT_String_ND>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d10c      	bne.n	8005d5c <AT_ESP8266_ND+0x610>
				{
				AT_decode=at_deconectar_ok;
 8005d42:	230d      	movs	r3, #13
 8005d44:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8005d48:	f001 ba8d 	b.w	8007266 <AT_ESP8266_ND+0x1b1a>
 8005d4c:	0800d4cc 	.word	0x0800d4cc
 8005d50:	0800d4d4 	.word	0x0800d4d4
 8005d54:	0800d4dc 	.word	0x0800d4dc
 8005d58:	0800d4e8 	.word	0x0800d4e8
				}
			else
			{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 8005d5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	220a      	movs	r2, #10
 8005d68:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8005d6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8005d7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8005d88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8005d96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8005da4:	603b      	str	r3, [r7, #0]
 8005da6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005daa:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8005dae:	6812      	ldr	r2, [r2, #0]
 8005db0:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8005db4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8005db8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8005dbc:	6809      	ldr	r1, [r1, #0]
 8005dbe:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8005dc2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8005dc6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8005dca:	6800      	ldr	r0, [r0, #0]
 8005dcc:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	9305      	str	r3, [sp, #20]
 8005dd4:	9004      	str	r0, [sp, #16]
 8005dd6:	9103      	str	r1, [sp, #12]
 8005dd8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8005ddc:	9102      	str	r1, [sp, #8]
 8005dde:	9201      	str	r2, [sp, #4]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	4633      	mov	r3, r6
 8005de6:	4aaa      	ldr	r2, [pc, #680]	; (8006090 <AT_ESP8266_ND+0x944>)
 8005de8:	4629      	mov	r1, r5
 8005dea:	4620      	mov	r0, r4
 8005dec:	f005 fbea 	bl	800b5c4 <FT_String_ND>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d104      	bne.n	8005e00 <AT_ESP8266_ND+0x6b4>
					{
						AT_decode=at_cambiar_modo_ok;
 8005df6:	231c      	movs	r3, #28
 8005df8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8005dfc:	f001 ba33 	b.w	8007266 <AT_ESP8266_ND+0x1b1a>
					}
				else
				{
					//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
					a->_n_fcomp=strlen("no change\r\nOK\r\n");
 8005e00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005e04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	220f      	movs	r2, #15
 8005e0c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
						if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8005e10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005e14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8005e1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005e22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8005e2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005e30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8005e3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005e3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8005e48:	603b      	str	r3, [r7, #0]
 8005e4a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005e4e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8005e52:	6812      	ldr	r2, [r2, #0]
 8005e54:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8005e58:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8005e5c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8005e60:	6809      	ldr	r1, [r1, #0]
 8005e62:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8005e66:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8005e6a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8005e6e:	6800      	ldr	r0, [r0, #0]
 8005e70:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8005e74:	2300      	movs	r3, #0
 8005e76:	9305      	str	r3, [sp, #20]
 8005e78:	9004      	str	r0, [sp, #16]
 8005e7a:	9103      	str	r1, [sp, #12]
 8005e7c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8005e80:	9102      	str	r1, [sp, #8]
 8005e82:	9201      	str	r2, [sp, #4]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	4633      	mov	r3, r6
 8005e8a:	4a82      	ldr	r2, [pc, #520]	; (8006094 <AT_ESP8266_ND+0x948>)
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f005 fb98 	bl	800b5c4 <FT_String_ND>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d104      	bne.n	8005ea4 <AT_ESP8266_ND+0x758>
						{
							AT_decode=at_tcp_srvr_ok_noch;
 8005e9a:	2317      	movs	r3, #23
 8005e9c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8005ea0:	f001 b9e1 	b.w	8007266 <AT_ESP8266_ND+0x1b1a>
						}
					else
					{
						//------------------OK PARA ENVIAR------------------//
						a->_n_fcomp=strlen("\r\n>");
 8005ea4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ea8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2203      	movs	r2, #3
 8005eb0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
						if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8005eb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005eb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8005ec2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ec6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8005ed0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ed4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8005ede:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ee2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8005eec:	603b      	str	r3, [r7, #0]
 8005eee:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005ef2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8005ef6:	6812      	ldr	r2, [r2, #0]
 8005ef8:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8005efc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8005f00:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8005f04:	6809      	ldr	r1, [r1, #0]
 8005f06:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8005f0a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8005f0e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8005f12:	6800      	ldr	r0, [r0, #0]
 8005f14:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8005f18:	2300      	movs	r3, #0
 8005f1a:	9305      	str	r3, [sp, #20]
 8005f1c:	9004      	str	r0, [sp, #16]
 8005f1e:	9103      	str	r1, [sp, #12]
 8005f20:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8005f24:	9102      	str	r1, [sp, #8]
 8005f26:	9201      	str	r2, [sp, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	4633      	mov	r3, r6
 8005f2e:	4a5a      	ldr	r2, [pc, #360]	; (8006098 <AT_ESP8266_ND+0x94c>)
 8005f30:	4629      	mov	r1, r5
 8005f32:	4620      	mov	r0, r4
 8005f34:	f005 fb46 	bl	800b5c4 <FT_String_ND>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d104      	bne.n	8005f48 <AT_ESP8266_ND+0x7fc>
							{
								AT_decode=at_tcp_ok_to_send;
 8005f3e:	2314      	movs	r3, #20
 8005f40:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8005f44:	f001 b98f 	b.w	8007266 <AT_ESP8266_ND+0x1b1a>
							}
						else
						{
							//------------------OK SERVIDOR------------------//
							a->_n_fcomp=strlen("AT+CIPSERVER");
 8005f48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	220c      	movs	r2, #12
 8005f54:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8005f58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8005f66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8005f74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8005f82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8005f90:	603b      	str	r3, [r7, #0]
 8005f92:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005f96:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8005f9a:	6812      	ldr	r2, [r2, #0]
 8005f9c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8005fa0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8005fa4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8005fa8:	6809      	ldr	r1, [r1, #0]
 8005faa:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8005fae:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8005fb2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8005fb6:	6800      	ldr	r0, [r0, #0]
 8005fb8:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	9305      	str	r3, [sp, #20]
 8005fc0:	9004      	str	r0, [sp, #16]
 8005fc2:	9103      	str	r1, [sp, #12]
 8005fc4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8005fc8:	9102      	str	r1, [sp, #8]
 8005fca:	9201      	str	r2, [sp, #4]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	4633      	mov	r3, r6
 8005fd2:	4a32      	ldr	r2, [pc, #200]	; (800609c <AT_ESP8266_ND+0x950>)
 8005fd4:	4629      	mov	r1, r5
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	f005 faf4 	bl	800b5c4 <FT_String_ND>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d104      	bne.n	8005fec <AT_ESP8266_ND+0x8a0>
							{
								AT_decode=at_tcp_srvr_ok;
 8005fe2:	2315      	movs	r3, #21
 8005fe4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8005fe8:	f001 b93d 	b.w	8007266 <AT_ESP8266_ND+0x1b1a>
							}
							else
							{
								//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
								a->_n_fcomp=strlen("AT+CIPCLOSE");
 8005fec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ff0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	220b      	movs	r2, #11
 8005ff8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
								if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8005ffc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006000:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800600a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800600e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006018:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800601c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006026:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800602a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006034:	603b      	str	r3, [r7, #0]
 8006036:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800603a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800603e:	6812      	ldr	r2, [r2, #0]
 8006040:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006044:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006048:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800604c:	6809      	ldr	r1, [r1, #0]
 800604e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006052:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006056:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800605a:	6800      	ldr	r0, [r0, #0]
 800605c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006060:	2300      	movs	r3, #0
 8006062:	9305      	str	r3, [sp, #20]
 8006064:	9004      	str	r0, [sp, #16]
 8006066:	9103      	str	r1, [sp, #12]
 8006068:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800606c:	9102      	str	r1, [sp, #8]
 800606e:	9201      	str	r2, [sp, #4]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	4633      	mov	r3, r6
 8006076:	4a0a      	ldr	r2, [pc, #40]	; (80060a0 <AT_ESP8266_ND+0x954>)
 8006078:	4629      	mov	r1, r5
 800607a:	4620      	mov	r0, r4
 800607c:	f005 faa2 	bl	800b5c4 <FT_String_ND>
 8006080:	4603      	mov	r3, r0
 8006082:	2b01      	cmp	r3, #1
 8006084:	d10e      	bne.n	80060a4 <AT_ESP8266_ND+0x958>
									{
										AT_decode=at_tcp_closed_ok;
 8006086:	2309      	movs	r3, #9
 8006088:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800608c:	f001 b8eb 	b.w	8007266 <AT_ESP8266_ND+0x1b1a>
 8006090:	0800d4f4 	.word	0x0800d4f4
 8006094:	0800d500 	.word	0x0800d500
 8006098:	0800d510 	.word	0x0800d510
 800609c:	0800d514 	.word	0x0800d514
 80060a0:	0800d524 	.word	0x0800d524
									}
								else
								{
									//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
									a->_n_fcomp=strlen("AT+CIPMUX=1");
 80060a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80060a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	220b      	movs	r2, #11
 80060b0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
									if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80060b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80060b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80060c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80060c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80060d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80060d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80060de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80060e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80060ec:	603b      	str	r3, [r7, #0]
 80060ee:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80060f2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80060f6:	6812      	ldr	r2, [r2, #0]
 80060f8:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80060fc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006100:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006104:	6809      	ldr	r1, [r1, #0]
 8006106:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800610a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800610e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006112:	6800      	ldr	r0, [r0, #0]
 8006114:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006118:	2300      	movs	r3, #0
 800611a:	9305      	str	r3, [sp, #20]
 800611c:	9004      	str	r0, [sp, #16]
 800611e:	9103      	str	r1, [sp, #12]
 8006120:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006124:	9102      	str	r1, [sp, #8]
 8006126:	9201      	str	r2, [sp, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	4633      	mov	r3, r6
 800612e:	4aaf      	ldr	r2, [pc, #700]	; (80063ec <AT_ESP8266_ND+0xca0>)
 8006130:	4629      	mov	r1, r5
 8006132:	4620      	mov	r0, r4
 8006134:	f005 fa46 	bl	800b5c4 <FT_String_ND>
 8006138:	4603      	mov	r3, r0
 800613a:	2b01      	cmp	r3, #1
 800613c:	d104      	bne.n	8006148 <AT_ESP8266_ND+0x9fc>
										{
											AT_decode=at_multiple_conn_ok;
 800613e:	2307      	movs	r3, #7
 8006140:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006144:	f001 b88f 	b.w	8007266 <AT_ESP8266_ND+0x1b1a>
										}
									else
									{
										//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
										a->_n_fcomp=strlen("AT+CIPMUX=0");
 8006148:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800614c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	220b      	movs	r2, #11
 8006154:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
										if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006158:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800615c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006166:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800616a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006174:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006178:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006182:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006186:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006190:	603b      	str	r3, [r7, #0]
 8006192:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006196:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800619a:	6812      	ldr	r2, [r2, #0]
 800619c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80061a0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80061a4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80061a8:	6809      	ldr	r1, [r1, #0]
 80061aa:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80061ae:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80061b2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80061b6:	6800      	ldr	r0, [r0, #0]
 80061b8:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80061bc:	2300      	movs	r3, #0
 80061be:	9305      	str	r3, [sp, #20]
 80061c0:	9004      	str	r0, [sp, #16]
 80061c2:	9103      	str	r1, [sp, #12]
 80061c4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80061c8:	9102      	str	r1, [sp, #8]
 80061ca:	9201      	str	r2, [sp, #4]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	4633      	mov	r3, r6
 80061d2:	4a87      	ldr	r2, [pc, #540]	; (80063f0 <AT_ESP8266_ND+0xca4>)
 80061d4:	4629      	mov	r1, r5
 80061d6:	4620      	mov	r0, r4
 80061d8:	f005 f9f4 	bl	800b5c4 <FT_String_ND>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d104      	bne.n	80061ec <AT_ESP8266_ND+0xaa0>
											{
												AT_decode=at_no_multiple_conn_ok;
 80061e2:	2308      	movs	r3, #8
 80061e4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80061e8:	f001 b83d 	b.w	8007266 <AT_ESP8266_ND+0x1b1a>
											}
										else
										{
											//------------------DEFIIR IP OK------------------//
											a->_n_fcomp=strlen("AT+CIPSTA=");
 80061ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80061f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	220a      	movs	r2, #10
 80061f8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
											if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80061fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006200:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800620a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800620e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006218:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800621c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006226:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800622a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006234:	603b      	str	r3, [r7, #0]
 8006236:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800623a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800623e:	6812      	ldr	r2, [r2, #0]
 8006240:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006244:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006248:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800624c:	6809      	ldr	r1, [r1, #0]
 800624e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006252:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006256:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800625a:	6800      	ldr	r0, [r0, #0]
 800625c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006260:	2300      	movs	r3, #0
 8006262:	9305      	str	r3, [sp, #20]
 8006264:	9004      	str	r0, [sp, #16]
 8006266:	9103      	str	r1, [sp, #12]
 8006268:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800626c:	9102      	str	r1, [sp, #8]
 800626e:	9201      	str	r2, [sp, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	4633      	mov	r3, r6
 8006276:	4a5f      	ldr	r2, [pc, #380]	; (80063f4 <AT_ESP8266_ND+0xca8>)
 8006278:	4629      	mov	r1, r5
 800627a:	4620      	mov	r0, r4
 800627c:	f005 f9a2 	bl	800b5c4 <FT_String_ND>
 8006280:	4603      	mov	r3, r0
 8006282:	2b01      	cmp	r3, #1
 8006284:	d104      	bne.n	8006290 <AT_ESP8266_ND+0xb44>
												{
													AT_decode=at_def_ip_ok;
 8006286:	231b      	movs	r3, #27
 8006288:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800628c:	f000 bfeb 	b.w	8007266 <AT_ESP8266_ND+0x1b1a>
												}
											else
											{
										//------------------TCP CONECTADO------------------//
										a->_n_fcomp=strlen("CONNECT");
 8006290:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006294:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2207      	movs	r2, #7
 800629c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
										if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 80062a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80062a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80062ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80062b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80062bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80062c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80062ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80062ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80062d8:	603b      	str	r3, [r7, #0]
 80062da:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80062de:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80062e2:	6812      	ldr	r2, [r2, #0]
 80062e4:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80062e8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80062ec:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80062f0:	6809      	ldr	r1, [r1, #0]
 80062f2:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80062f6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80062fa:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80062fe:	6800      	ldr	r0, [r0, #0]
 8006300:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006304:	2300      	movs	r3, #0
 8006306:	9305      	str	r3, [sp, #20]
 8006308:	9004      	str	r0, [sp, #16]
 800630a:	9103      	str	r1, [sp, #12]
 800630c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006310:	9102      	str	r1, [sp, #8]
 8006312:	9201      	str	r2, [sp, #4]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	4633      	mov	r3, r6
 800631a:	4a37      	ldr	r2, [pc, #220]	; (80063f8 <AT_ESP8266_ND+0xcac>)
 800631c:	4629      	mov	r1, r5
 800631e:	4620      	mov	r0, r4
 8006320:	f005 f950 	bl	800b5c4 <FT_String_ND>
 8006324:	4603      	mov	r3, r0
 8006326:	2b01      	cmp	r3, #1
 8006328:	f040 879d 	bne.w	8007266 <AT_ESP8266_ND+0x1b1a>
											{
											AT_decode=at_tcp_conectado;
 800632c:	230f      	movs	r3, #15
 800632e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006332:	f000 bf98 	b.w	8007266 <AT_ESP8266_ND+0x1b1a>
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\nCLOSED\r\n");
 8006336:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800633a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	220f      	movs	r2, #15
 8006342:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\nCLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006346:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800634a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006354:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006358:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006362:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006366:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006370:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006374:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800637e:	603b      	str	r3, [r7, #0]
 8006380:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006384:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006388:	6812      	ldr	r2, [r2, #0]
 800638a:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800638e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006392:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006396:	6809      	ldr	r1, [r1, #0]
 8006398:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800639c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80063a0:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80063a4:	6800      	ldr	r0, [r0, #0]
 80063a6:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80063aa:	2300      	movs	r3, #0
 80063ac:	9305      	str	r3, [sp, #20]
 80063ae:	9004      	str	r0, [sp, #16]
 80063b0:	9103      	str	r1, [sp, #12]
 80063b2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80063b6:	9102      	str	r1, [sp, #8]
 80063b8:	9201      	str	r2, [sp, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	4633      	mov	r3, r6
 80063c0:	4a0e      	ldr	r2, [pc, #56]	; (80063fc <AT_ESP8266_ND+0xcb0>)
 80063c2:	4629      	mov	r1, r5
 80063c4:	4620      	mov	r0, r4
 80063c6:	f005 f8fd 	bl	800b5c4 <FT_String_ND>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d117      	bne.n	8006400 <AT_ESP8266_ND+0xcb4>
		{
				AT_decode=at_tcp_conn_err;
 80063d0:	2306      	movs	r3, #6
 80063d2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("ERROR\r\nCLOSED\r\n");
 80063d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80063da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	220f      	movs	r2, #15
 80063e2:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
 80063e6:	f000 bf3e 	b.w	8007266 <AT_ESP8266_ND+0x1b1a>
 80063ea:	bf00      	nop
 80063ec:	0800d530 	.word	0x0800d530
 80063f0:	0800d53c 	.word	0x0800d53c
 80063f4:	0800d548 	.word	0x0800d548
 80063f8:	0800d554 	.word	0x0800d554
 80063fc:	0800d55c 	.word	0x0800d55c
		}
		else
		{
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Intentando conectar con servidor TCP caido
 8006400:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006404:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800640e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006412:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 800641c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006420:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800642a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800642e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006438:	603b      	str	r3, [r7, #0]
 800643a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800643e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006442:	6812      	ldr	r2, [r2, #0]
 8006444:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006448:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800644c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006450:	6809      	ldr	r1, [r1, #0]
 8006452:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006456:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800645a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800645e:	6800      	ldr	r0, [r0, #0]
 8006460:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006464:	2300      	movs	r3, #0
 8006466:	9305      	str	r3, [sp, #20]
 8006468:	9004      	str	r0, [sp, #16]
 800646a:	9103      	str	r1, [sp, #12]
 800646c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006470:	9102      	str	r1, [sp, #8]
 8006472:	9201      	str	r2, [sp, #4]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	4633      	mov	r3, r6
 800647a:	4aaa      	ldr	r2, [pc, #680]	; (8006724 <AT_ESP8266_ND+0xfd8>)
 800647c:	4629      	mov	r1, r5
 800647e:	4620      	mov	r0, r4
 8006480:	f005 f8a0 	bl	800b5c4 <FT_String_ND>
 8006484:	4603      	mov	r3, r0
 8006486:	2b01      	cmp	r3, #1
 8006488:	d104      	bne.n	8006494 <AT_ESP8266_ND+0xd48>
			{
					AT_decode=at_error;
 800648a:	2302      	movs	r3, #2
 800648c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006490:	f000 bee9 	b.w	8007266 <AT_ESP8266_ND+0x1b1a>
			}
			 else
			 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 8006494:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006498:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2215      	movs	r2, #21
 80064a0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 80064a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80064b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80064c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80064ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80064dc:	603b      	str	r3, [r7, #0]
 80064de:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80064e2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80064e6:	6812      	ldr	r2, [r2, #0]
 80064e8:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80064ec:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80064f0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80064f4:	6809      	ldr	r1, [r1, #0]
 80064f6:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80064fa:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80064fe:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006502:	6800      	ldr	r0, [r0, #0]
 8006504:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006508:	2300      	movs	r3, #0
 800650a:	9305      	str	r3, [sp, #20]
 800650c:	9004      	str	r0, [sp, #16]
 800650e:	9103      	str	r1, [sp, #12]
 8006510:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006514:	9102      	str	r1, [sp, #8]
 8006516:	9201      	str	r2, [sp, #4]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	4633      	mov	r3, r6
 800651e:	4a82      	ldr	r2, [pc, #520]	; (8006728 <AT_ESP8266_ND+0xfdc>)
 8006520:	4629      	mov	r1, r5
 8006522:	4620      	mov	r0, r4
 8006524:	f005 f84e 	bl	800b5c4 <FT_String_ND>
 8006528:	4603      	mov	r3, r0
 800652a:	2b01      	cmp	r3, #1
 800652c:	d104      	bne.n	8006538 <AT_ESP8266_ND+0xdec>
				{
						AT_decode=at_tcp_alrdy_cnntd_err;
 800652e:	230e      	movs	r3, #14
 8006530:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006534:	f000 be97 	b.w	8007266 <AT_ESP8266_ND+0x1b1a>
				}
				else
				{
					//------------------OK PARA ENVIAR------------------//
					a->_n_fcomp=strlen("AT+CIPSERVER");
 8006538:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800653c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	220c      	movs	r2, #12
 8006544:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
					if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006548:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800654c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006556:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800655a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006564:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006568:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006572:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006576:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006580:	603b      	str	r3, [r7, #0]
 8006582:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006586:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800658a:	6812      	ldr	r2, [r2, #0]
 800658c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006590:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006594:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006598:	6809      	ldr	r1, [r1, #0]
 800659a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800659e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80065a2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80065a6:	6800      	ldr	r0, [r0, #0]
 80065a8:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80065ac:	2300      	movs	r3, #0
 80065ae:	9305      	str	r3, [sp, #20]
 80065b0:	9004      	str	r0, [sp, #16]
 80065b2:	9103      	str	r1, [sp, #12]
 80065b4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80065b8:	9102      	str	r1, [sp, #8]
 80065ba:	9201      	str	r2, [sp, #4]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	4633      	mov	r3, r6
 80065c2:	4a5a      	ldr	r2, [pc, #360]	; (800672c <AT_ESP8266_ND+0xfe0>)
 80065c4:	4629      	mov	r1, r5
 80065c6:	4620      	mov	r0, r4
 80065c8:	f004 fffc 	bl	800b5c4 <FT_String_ND>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d104      	bne.n	80065dc <AT_ESP8266_ND+0xe90>
					{
						AT_decode=at_tcp_srvr_err;
 80065d2:	2316      	movs	r3, #22
 80065d4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80065d8:	f000 be45 	b.w	8007266 <AT_ESP8266_ND+0x1b1a>
					}
					else
					{
						//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
						a->_n_fcomp=strlen("AT+CIPCLOSE");
 80065dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	220b      	movs	r2, #11
 80065e8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
						if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 80065ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80065fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006608:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800660c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006616:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800661a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006624:	603b      	str	r3, [r7, #0]
 8006626:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800662a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800662e:	6812      	ldr	r2, [r2, #0]
 8006630:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006634:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006638:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800663c:	6809      	ldr	r1, [r1, #0]
 800663e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006642:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006646:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800664a:	6800      	ldr	r0, [r0, #0]
 800664c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006650:	2300      	movs	r3, #0
 8006652:	9305      	str	r3, [sp, #20]
 8006654:	9004      	str	r0, [sp, #16]
 8006656:	9103      	str	r1, [sp, #12]
 8006658:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800665c:	9102      	str	r1, [sp, #8]
 800665e:	9201      	str	r2, [sp, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	4633      	mov	r3, r6
 8006666:	4a32      	ldr	r2, [pc, #200]	; (8006730 <AT_ESP8266_ND+0xfe4>)
 8006668:	4629      	mov	r1, r5
 800666a:	4620      	mov	r0, r4
 800666c:	f004 ffaa 	bl	800b5c4 <FT_String_ND>
 8006670:	4603      	mov	r3, r0
 8006672:	2b01      	cmp	r3, #1
 8006674:	d104      	bne.n	8006680 <AT_ESP8266_ND+0xf34>
							{
								AT_decode=at_tcp_close_err;
 8006676:	231a      	movs	r3, #26
 8006678:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800667c:	f000 bdf3 	b.w	8007266 <AT_ESP8266_ND+0x1b1a>
							}
						else
							{
							//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
							a->_n_fcomp=strlen("link is not valid");
 8006680:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006684:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2211      	movs	r2, #17
 800668c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006690:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006694:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800669e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80066ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80066ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80066c8:	603b      	str	r3, [r7, #0]
 80066ca:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80066ce:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80066d2:	6812      	ldr	r2, [r2, #0]
 80066d4:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80066d8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80066dc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80066e0:	6809      	ldr	r1, [r1, #0]
 80066e2:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80066e6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80066ea:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80066ee:	6800      	ldr	r0, [r0, #0]
 80066f0:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80066f4:	2300      	movs	r3, #0
 80066f6:	9305      	str	r3, [sp, #20]
 80066f8:	9004      	str	r0, [sp, #16]
 80066fa:	9103      	str	r1, [sp, #12]
 80066fc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006700:	9102      	str	r1, [sp, #8]
 8006702:	9201      	str	r2, [sp, #4]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	4633      	mov	r3, r6
 800670a:	4a0a      	ldr	r2, [pc, #40]	; (8006734 <AT_ESP8266_ND+0xfe8>)
 800670c:	4629      	mov	r1, r5
 800670e:	4620      	mov	r0, r4
 8006710:	f004 ff58 	bl	800b5c4 <FT_String_ND>
 8006714:	4603      	mov	r3, r0
 8006716:	2b01      	cmp	r3, #1
 8006718:	d10e      	bne.n	8006738 <AT_ESP8266_ND+0xfec>
								{
									AT_decode=at_tcp_snd_err;
 800671a:	2311      	movs	r3, #17
 800671c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006720:	f000 bda1 	b.w	8007266 <AT_ESP8266_ND+0x1b1a>
 8006724:	0800d56c 	.word	0x0800d56c
 8006728:	0800d574 	.word	0x0800d574
 800672c:	0800d514 	.word	0x0800d514
 8006730:	0800d524 	.word	0x0800d524
 8006734:	0800d58c 	.word	0x0800d58c
								}
							else
								{
								//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
								a->_n_fcomp=strlen("AT+CWMODE=");
 8006738:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800673c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	220a      	movs	r2, #10
 8006744:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
								if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8006748:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800674c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006756:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800675a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006764:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006768:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006772:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006776:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006780:	603b      	str	r3, [r7, #0]
 8006782:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006786:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800678a:	6812      	ldr	r2, [r2, #0]
 800678c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006790:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006794:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006798:	6809      	ldr	r1, [r1, #0]
 800679a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800679e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80067a2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80067a6:	6800      	ldr	r0, [r0, #0]
 80067a8:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80067ac:	2300      	movs	r3, #0
 80067ae:	9305      	str	r3, [sp, #20]
 80067b0:	9004      	str	r0, [sp, #16]
 80067b2:	9103      	str	r1, [sp, #12]
 80067b4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80067b8:	9102      	str	r1, [sp, #8]
 80067ba:	9201      	str	r2, [sp, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	4633      	mov	r3, r6
 80067c2:	4aa8      	ldr	r2, [pc, #672]	; (8006a64 <AT_ESP8266_ND+0x1318>)
 80067c4:	4629      	mov	r1, r5
 80067c6:	4620      	mov	r0, r4
 80067c8:	f004 fefc 	bl	800b5c4 <FT_String_ND>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d104      	bne.n	80067dc <AT_ESP8266_ND+0x1090>
									{
										AT_decode=at_cambiar_modo_err;
 80067d2:	231d      	movs	r3, #29
 80067d4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80067d8:	f000 bd45 	b.w	8007266 <AT_ESP8266_ND+0x1b1a>
									}
								else
								{
									//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
									a->_n_fcomp=strlen("AT+CIPMUX=1");
 80067dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	220b      	movs	r2, #11
 80067e8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
									if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80067ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80067fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006808:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800680c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006816:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800681a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006824:	603b      	str	r3, [r7, #0]
 8006826:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800682a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800682e:	6812      	ldr	r2, [r2, #0]
 8006830:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006834:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006838:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800683c:	6809      	ldr	r1, [r1, #0]
 800683e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006842:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006846:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800684a:	6800      	ldr	r0, [r0, #0]
 800684c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006850:	2300      	movs	r3, #0
 8006852:	9305      	str	r3, [sp, #20]
 8006854:	9004      	str	r0, [sp, #16]
 8006856:	9103      	str	r1, [sp, #12]
 8006858:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800685c:	9102      	str	r1, [sp, #8]
 800685e:	9201      	str	r2, [sp, #4]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	4633      	mov	r3, r6
 8006866:	4a80      	ldr	r2, [pc, #512]	; (8006a68 <AT_ESP8266_ND+0x131c>)
 8006868:	4629      	mov	r1, r5
 800686a:	4620      	mov	r0, r4
 800686c:	f004 feaa 	bl	800b5c4 <FT_String_ND>
 8006870:	4603      	mov	r3, r0
 8006872:	2b01      	cmp	r3, #1
 8006874:	d104      	bne.n	8006880 <AT_ESP8266_ND+0x1134>
										{
											AT_decode=at_multiple_conn_err;
 8006876:	231e      	movs	r3, #30
 8006878:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800687c:	f000 bcf3 	b.w	8007266 <AT_ESP8266_ND+0x1b1a>
										}
									else
									{
										//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
										a->_n_fcomp=strlen("AT+CIPMUX=0");
 8006880:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006884:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	220b      	movs	r2, #11
 800688c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
										if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006890:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006894:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800689e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80068ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80068ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80068c8:	603b      	str	r3, [r7, #0]
 80068ca:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80068ce:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80068d2:	6812      	ldr	r2, [r2, #0]
 80068d4:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80068d8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80068dc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80068e0:	6809      	ldr	r1, [r1, #0]
 80068e2:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80068e6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80068ea:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80068ee:	6800      	ldr	r0, [r0, #0]
 80068f0:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80068f4:	2300      	movs	r3, #0
 80068f6:	9305      	str	r3, [sp, #20]
 80068f8:	9004      	str	r0, [sp, #16]
 80068fa:	9103      	str	r1, [sp, #12]
 80068fc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006900:	9102      	str	r1, [sp, #8]
 8006902:	9201      	str	r2, [sp, #4]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	4633      	mov	r3, r6
 800690a:	4a58      	ldr	r2, [pc, #352]	; (8006a6c <AT_ESP8266_ND+0x1320>)
 800690c:	4629      	mov	r1, r5
 800690e:	4620      	mov	r0, r4
 8006910:	f004 fe58 	bl	800b5c4 <FT_String_ND>
 8006914:	4603      	mov	r3, r0
 8006916:	2b01      	cmp	r3, #1
 8006918:	f000 84a5 	beq.w	8007266 <AT_ESP8266_ND+0x1b1a>
												//AT_decode=at_no_multiple_conn_err;
											}
										else
										{
											//------------------ERROR AL CONECTAR WIFI------------------//
											a->_n_fcomp=strlen("AT+CWJAP");
 800691c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006920:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2208      	movs	r2, #8
 8006928:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
											if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800692c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006930:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800693a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800693e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006948:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800694c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006956:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800695a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006964:	603b      	str	r3, [r7, #0]
 8006966:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800696a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800696e:	6812      	ldr	r2, [r2, #0]
 8006970:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006974:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006978:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800697c:	6809      	ldr	r1, [r1, #0]
 800697e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006982:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006986:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800698a:	6800      	ldr	r0, [r0, #0]
 800698c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006990:	2300      	movs	r3, #0
 8006992:	9305      	str	r3, [sp, #20]
 8006994:	9004      	str	r0, [sp, #16]
 8006996:	9103      	str	r1, [sp, #12]
 8006998:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800699c:	9102      	str	r1, [sp, #8]
 800699e:	9201      	str	r2, [sp, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	4633      	mov	r3, r6
 80069a6:	4a32      	ldr	r2, [pc, #200]	; (8006a70 <AT_ESP8266_ND+0x1324>)
 80069a8:	4629      	mov	r1, r5
 80069aa:	4620      	mov	r0, r4
 80069ac:	f004 fe0a 	bl	800b5c4 <FT_String_ND>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d104      	bne.n	80069c0 <AT_ESP8266_ND+0x1274>
												{
													AT_decode=at_conn_wifi_err;
 80069b6:	2320      	movs	r3, #32
 80069b8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80069bc:	f000 bc53 	b.w	8007266 <AT_ESP8266_ND+0x1b1a>
												}
											else
											{
												//------------------ERROR AL CONECTAR WIFI------------------//
												a->_n_fcomp=strlen("AT+CIPSTA=");
 80069c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	220a      	movs	r2, #10
 80069cc:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
												if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80069d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80069de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80069ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80069fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006a08:	603b      	str	r3, [r7, #0]
 8006a0a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006a0e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006a12:	6812      	ldr	r2, [r2, #0]
 8006a14:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006a18:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006a1c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006a20:	6809      	ldr	r1, [r1, #0]
 8006a22:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006a26:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006a2a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006a2e:	6800      	ldr	r0, [r0, #0]
 8006a30:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006a34:	2300      	movs	r3, #0
 8006a36:	9305      	str	r3, [sp, #20]
 8006a38:	9004      	str	r0, [sp, #16]
 8006a3a:	9103      	str	r1, [sp, #12]
 8006a3c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006a40:	9102      	str	r1, [sp, #8]
 8006a42:	9201      	str	r2, [sp, #4]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	4633      	mov	r3, r6
 8006a4a:	4a0a      	ldr	r2, [pc, #40]	; (8006a74 <AT_ESP8266_ND+0x1328>)
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f004 fdb8 	bl	800b5c4 <FT_String_ND>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d10e      	bne.n	8006a78 <AT_ESP8266_ND+0x132c>
													{
														AT_decode=at_def_ip_err;
 8006a5a:	2321      	movs	r3, #33	; 0x21
 8006a5c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006a60:	f000 bc01 	b.w	8007266 <AT_ESP8266_ND+0x1b1a>
 8006a64:	0800d4f4 	.word	0x0800d4f4
 8006a68:	0800d530 	.word	0x0800d530
 8006a6c:	0800d53c 	.word	0x0800d53c
 8006a70:	0800d5a0 	.word	0x0800d5a0
 8006a74:	0800d548 	.word	0x0800d548
													}
												else
												{
													//------------------ERROR AL CONECTAR WIFI------------------//
													a->_n_fcomp=strlen("no ip");
 8006a78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2205      	movs	r2, #5
 8006a84:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
													if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006a88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006a96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006aa4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006aa8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006ab2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ab6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006ac0:	603b      	str	r3, [r7, #0]
 8006ac2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ac6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006aca:	6812      	ldr	r2, [r2, #0]
 8006acc:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006ad0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006ad4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ad8:	6809      	ldr	r1, [r1, #0]
 8006ada:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006ade:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006ae2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006ae6:	6800      	ldr	r0, [r0, #0]
 8006ae8:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006aec:	2300      	movs	r3, #0
 8006aee:	9305      	str	r3, [sp, #20]
 8006af0:	9004      	str	r0, [sp, #16]
 8006af2:	9103      	str	r1, [sp, #12]
 8006af4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006af8:	9102      	str	r1, [sp, #8]
 8006afa:	9201      	str	r2, [sp, #4]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	4633      	mov	r3, r6
 8006b02:	4abe      	ldr	r2, [pc, #760]	; (8006dfc <AT_ESP8266_ND+0x16b0>)
 8006b04:	4629      	mov	r1, r5
 8006b06:	4620      	mov	r0, r4
 8006b08:	f004 fd5c 	bl	800b5c4 <FT_String_ND>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d103      	bne.n	8006b1a <AT_ESP8266_ND+0x13ce>
														{
															AT_decode=at_tcp_noip_err;  //PROCESAR
 8006b12:	2322      	movs	r3, #34	; 0x22
 8006b14:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006b18:	e3a5      	b.n	8007266 <AT_ESP8266_ND+0x1b1a>
													{

														 //--------------------------------------------------------------------------------------------------------------//
														 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
														 //--------------------------------------------------------------------------------------------------------------//
														a->_n_fcomp=strlen("WIFI DISCONNECT");
 8006b1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	220f      	movs	r2, #15
 8006b26:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
														if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 8006b2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006b38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006b46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006b54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006b62:	603b      	str	r3, [r7, #0]
 8006b64:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b68:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b6c:	6812      	ldr	r2, [r2, #0]
 8006b6e:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006b72:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b76:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b7a:	6809      	ldr	r1, [r1, #0]
 8006b7c:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006b80:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006b84:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006b88:	6800      	ldr	r0, [r0, #0]
 8006b8a:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006b8e:	2300      	movs	r3, #0
 8006b90:	9305      	str	r3, [sp, #20]
 8006b92:	9004      	str	r0, [sp, #16]
 8006b94:	9103      	str	r1, [sp, #12]
 8006b96:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006b9a:	9102      	str	r1, [sp, #8]
 8006b9c:	9201      	str	r2, [sp, #4]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	4633      	mov	r3, r6
 8006ba4:	4a96      	ldr	r2, [pc, #600]	; (8006e00 <AT_ESP8266_ND+0x16b4>)
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f004 fd0b 	bl	800b5c4 <FT_String_ND>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d112      	bne.n	8006bda <AT_ESP8266_ND+0x148e>
															{
																 AT_decode=at_wifi_disconnect;
 8006bb4:	230a      	movs	r3, #10
 8006bb6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
																 a->_debug_WF_DISCONNECT++;
 8006bba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
 8006bd8:	e345      	b.n	8007266 <AT_ESP8266_ND+0x1b1a>
															}
														else
														{
															//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
															a->_n_fcomp=strlen(",CLOSED\r\n");
 8006bda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2209      	movs	r2, #9
 8006be6:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
															if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006bea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006bf8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006c06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006c14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006c22:	603b      	str	r3, [r7, #0]
 8006c24:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006c28:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006c2c:	6812      	ldr	r2, [r2, #0]
 8006c2e:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006c32:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006c36:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006c3a:	6809      	ldr	r1, [r1, #0]
 8006c3c:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006c40:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006c44:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006c48:	6800      	ldr	r0, [r0, #0]
 8006c4a:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006c4e:	2300      	movs	r3, #0
 8006c50:	9305      	str	r3, [sp, #20]
 8006c52:	9004      	str	r0, [sp, #16]
 8006c54:	9103      	str	r1, [sp, #12]
 8006c56:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006c5a:	9102      	str	r1, [sp, #8]
 8006c5c:	9201      	str	r2, [sp, #4]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	4633      	mov	r3, r6
 8006c64:	4a67      	ldr	r2, [pc, #412]	; (8006e04 <AT_ESP8266_ND+0x16b8>)
 8006c66:	4629      	mov	r1, r5
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f004 fcab 	bl	800b5c4 <FT_String_ND>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d112      	bne.n	8006c9a <AT_ESP8266_ND+0x154e>
																{
																	AT_decode=at_tcp_client_desc;
 8006c74:	2319      	movs	r3, #25
 8006c76:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
																	a->_debug_CLOSED++;
 8006c7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38
 8006c98:	e2e5      	b.n	8007266 <AT_ESP8266_ND+0x1b1a>
																//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
																// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
																// primero ve el SEND OKse queda en el estado 705 por error al     //
																//  enviar														  //
																//-----------------------------------------------------------------//
																a->_n_fcomp=strlen("CLOSED\r\n");
 8006c9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2208      	movs	r2, #8
 8006ca6:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006caa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006cb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006cc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006cd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ce8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006cec:	6812      	ldr	r2, [r2, #0]
 8006cee:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006cf2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006cf6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006cfa:	6809      	ldr	r1, [r1, #0]
 8006cfc:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006d00:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006d04:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006d08:	6800      	ldr	r0, [r0, #0]
 8006d0a:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006d0e:	2300      	movs	r3, #0
 8006d10:	9305      	str	r3, [sp, #20]
 8006d12:	9004      	str	r0, [sp, #16]
 8006d14:	9103      	str	r1, [sp, #12]
 8006d16:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d1a:	9102      	str	r1, [sp, #8]
 8006d1c:	9201      	str	r2, [sp, #4]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	4633      	mov	r3, r6
 8006d24:	4a38      	ldr	r2, [pc, #224]	; (8006e08 <AT_ESP8266_ND+0x16bc>)
 8006d26:	4629      	mov	r1, r5
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f004 fc4b 	bl	800b5c4 <FT_String_ND>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d103      	bne.n	8006d3c <AT_ESP8266_ND+0x15f0>
																	{
																		AT_decode=at_tcp_desconectado;
 8006d34:	2310      	movs	r3, #16
 8006d36:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006d3a:	e294      	b.n	8007266 <AT_ESP8266_ND+0x1b1a>
																	}
																else
																{

																	//------------------ENVIADO = RECIBIDO ------------------//
																	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8006d3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006d4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006d58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f503 6693 	add.w	r6, r3, #1176	; 0x498
 8006d66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f603 4ce8 	addw	ip, r3, #3304	; 0xce8
 8006d74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006d82:	603b      	str	r3, [r7, #0]
 8006d84:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d88:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d8c:	6812      	ldr	r2, [r2, #0]
 8006d8e:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006d92:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d96:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d9a:	6809      	ldr	r1, [r1, #0]
 8006d9c:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006da0:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006da4:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006da8:	6800      	ldr	r0, [r0, #0]
 8006daa:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006dae:	2300      	movs	r3, #0
 8006db0:	9305      	str	r3, [sp, #20]
 8006db2:	9004      	str	r0, [sp, #16]
 8006db4:	9103      	str	r1, [sp, #12]
 8006db6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006dba:	9102      	str	r1, [sp, #8]
 8006dbc:	9201      	str	r2, [sp, #4]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	4663      	mov	r3, ip
 8006dc4:	4632      	mov	r2, r6
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f004 fbfb 	bl	800b5c4 <FT_String_ND>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d11b      	bne.n	8006e0c <AT_ESP8266_ND+0x16c0>
																		 {
																			if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8006dd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f893 3698 	ldrb.w	r3, [r3, #1688]	; 0x698
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 823f 	beq.w	8007266 <AT_ESP8266_ND+0x1b1a>
																				{
																				//AT_decode=10;
																				a->_n_orig=0;
 8006de8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
 8006df8:	e235      	b.n	8007266 <AT_ESP8266_ND+0x1b1a>
 8006dfa:	bf00      	nop
 8006dfc:	0800d5ac 	.word	0x0800d5ac
 8006e00:	0800d5b4 	.word	0x0800d5b4
 8006e04:	0800d5c4 	.word	0x0800d5c4
 8006e08:	0800d5d0 	.word	0x0800d5d0
																				}
																			}
																	else
																	{
																		//------------------PAQUETE ENVIADO EN FALLA--------------//
																		a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8006e0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	220d      	movs	r2, #13
 8006e18:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 8006e1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006e2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006e38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006e46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006e54:	603b      	str	r3, [r7, #0]
 8006e56:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006e5a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006e5e:	6812      	ldr	r2, [r2, #0]
 8006e60:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006e64:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006e68:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006e6c:	6809      	ldr	r1, [r1, #0]
 8006e6e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006e72:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006e76:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006e7a:	6800      	ldr	r0, [r0, #0]
 8006e7c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006e80:	2300      	movs	r3, #0
 8006e82:	9305      	str	r3, [sp, #20]
 8006e84:	9004      	str	r0, [sp, #16]
 8006e86:	9103      	str	r1, [sp, #12]
 8006e88:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e8c:	9102      	str	r1, [sp, #8]
 8006e8e:	9201      	str	r2, [sp, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	4633      	mov	r3, r6
 8006e96:	4ac6      	ldr	r2, [pc, #792]	; (80071b0 <AT_ESP8266_ND+0x1a64>)
 8006e98:	4629      	mov	r1, r5
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f004 fb92 	bl	800b5c4 <FT_String_ND>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d112      	bne.n	8006ecc <AT_ESP8266_ND+0x1780>
																			{
																			 AT_decode=at_tcp_enviado_error;
 8006ea6:	2312      	movs	r3, #18
 8006ea8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
																			 a->_debug_FAIL++;
 8006eac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ec0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
 8006eca:	e1cc      	b.n	8007266 <AT_ESP8266_ND+0x1b1a>



																			//------------------OBTENCI�N DE IP------------------//
																			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
																			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8006ecc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ed0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	220d      	movs	r2, #13
 8006ed8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Obtiene IP
 8006edc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ee0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006eea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006ef8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006efc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006f06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006f14:	603b      	str	r3, [r7, #0]
 8006f16:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f1a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f1e:	6812      	ldr	r2, [r2, #0]
 8006f20:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006f24:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f28:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f2c:	6809      	ldr	r1, [r1, #0]
 8006f2e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006f32:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006f36:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006f3a:	6800      	ldr	r0, [r0, #0]
 8006f3c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006f40:	2300      	movs	r3, #0
 8006f42:	9305      	str	r3, [sp, #20]
 8006f44:	9004      	str	r0, [sp, #16]
 8006f46:	9103      	str	r1, [sp, #12]
 8006f48:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f4c:	9102      	str	r1, [sp, #8]
 8006f4e:	9201      	str	r2, [sp, #4]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	4633      	mov	r3, r6
 8006f56:	4a97      	ldr	r2, [pc, #604]	; (80071b4 <AT_ESP8266_ND+0x1a68>)
 8006f58:	4629      	mov	r1, r5
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f004 fb32 	bl	800b5c4 <FT_String_ND>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d112      	bne.n	8006f8c <AT_ESP8266_ND+0x1840>
																				{
																					a->_debug_WF_GOTIP++;
 8006f66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8006f74:	1c5a      	adds	r2, r3, #1
 8006f76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f8c3 2d4c 	str.w	r2, [r3, #3404]	; 0xd4c
																					AT_decode=at_wifi_gotip;
 8006f84:	230c      	movs	r3, #12
 8006f86:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006f8a:	e16c      	b.n	8007266 <AT_ESP8266_ND+0x1b1a>
																				}
																			else
																			{
																					//------------------WIFI CONECTADA------------------//
																				a->_n_fcomp=strlen("WIFI CONNECTED");
 8006f8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	220e      	movs	r2, #14
 8006f98:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//WIFI CONECTADA
 8006f9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fa0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006faa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006fb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006fc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006fd4:	603b      	str	r3, [r7, #0]
 8006fd6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006fda:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006fde:	6812      	ldr	r2, [r2, #0]
 8006fe0:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006fe4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006fe8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006fec:	6809      	ldr	r1, [r1, #0]
 8006fee:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006ff2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006ff6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006ffa:	6800      	ldr	r0, [r0, #0]
 8006ffc:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007000:	2300      	movs	r3, #0
 8007002:	9305      	str	r3, [sp, #20]
 8007004:	9004      	str	r0, [sp, #16]
 8007006:	9103      	str	r1, [sp, #12]
 8007008:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800700c:	9102      	str	r1, [sp, #8]
 800700e:	9201      	str	r2, [sp, #4]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	4633      	mov	r3, r6
 8007016:	4a68      	ldr	r2, [pc, #416]	; (80071b8 <AT_ESP8266_ND+0x1a6c>)
 8007018:	4629      	mov	r1, r5
 800701a:	4620      	mov	r0, r4
 800701c:	f004 fad2 	bl	800b5c4 <FT_String_ND>
 8007020:	4603      	mov	r3, r0
 8007022:	2b01      	cmp	r3, #1
 8007024:	d112      	bne.n	800704c <AT_ESP8266_ND+0x1900>
																					{
																						a->_debug_WF_CNNCTD++;
 8007026:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800702a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8007034:	1c5a      	adds	r2, r3, #1
 8007036:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800703a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
																							 AT_decode=at_wifi_connected;
 8007044:	230b      	movs	r3, #11
 8007046:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800704a:	e10c      	b.n	8007266 <AT_ESP8266_ND+0x1b1a>
																					}
																				else
																				{

																					//------------------CLIENTE TCP CONECTADO------------------//
																					a->_n_fcomp=strlen(",CONNECT\r\n");
 800704c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007050:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	220a      	movs	r2, #10
 8007058:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																					if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 800705c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007060:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800706a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800706e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007078:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800707c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007086:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800708a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007094:	603b      	str	r3, [r7, #0]
 8007096:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800709a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800709e:	6812      	ldr	r2, [r2, #0]
 80070a0:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80070a4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80070a8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80070ac:	6809      	ldr	r1, [r1, #0]
 80070ae:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80070b2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80070b6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80070ba:	6800      	ldr	r0, [r0, #0]
 80070bc:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80070c0:	2300      	movs	r3, #0
 80070c2:	9305      	str	r3, [sp, #20]
 80070c4:	9004      	str	r0, [sp, #16]
 80070c6:	9103      	str	r1, [sp, #12]
 80070c8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80070cc:	9102      	str	r1, [sp, #8]
 80070ce:	9201      	str	r2, [sp, #4]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	4633      	mov	r3, r6
 80070d6:	4a39      	ldr	r2, [pc, #228]	; (80071bc <AT_ESP8266_ND+0x1a70>)
 80070d8:	4629      	mov	r1, r5
 80070da:	4620      	mov	r0, r4
 80070dc:	f004 fa72 	bl	800b5c4 <FT_String_ND>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d112      	bne.n	800710c <AT_ESP8266_ND+0x19c0>
																						  {
																							  AT_decode=at_tcp_client_conectado;
 80070e6:	2318      	movs	r3, #24
 80070e8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
																							  a->_debug_CONNECT++;
 80070ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007100:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 800710a:	e0ac      	b.n	8007266 <AT_ESP8266_ND+0x1b1a>
																						  }
																					else
																					{

																						//------------------FALLA------------------//
																						a->_n_fcomp=strlen("\r\nFAIL\r\n");
 800710c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007110:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2208      	movs	r2, #8
 8007118:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 800711c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007120:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800712a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800712e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007138:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800713c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007146:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800714a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007154:	603b      	str	r3, [r7, #0]
 8007156:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800715a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800715e:	6812      	ldr	r2, [r2, #0]
 8007160:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007164:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007168:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800716c:	6809      	ldr	r1, [r1, #0]
 800716e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007172:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007176:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800717a:	6800      	ldr	r0, [r0, #0]
 800717c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007180:	2300      	movs	r3, #0
 8007182:	9305      	str	r3, [sp, #20]
 8007184:	9004      	str	r0, [sp, #16]
 8007186:	9103      	str	r1, [sp, #12]
 8007188:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800718c:	9102      	str	r1, [sp, #8]
 800718e:	9201      	str	r2, [sp, #4]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	9300      	str	r3, [sp, #0]
 8007194:	4633      	mov	r3, r6
 8007196:	4a0a      	ldr	r2, [pc, #40]	; (80071c0 <AT_ESP8266_ND+0x1a74>)
 8007198:	4629      	mov	r1, r5
 800719a:	4620      	mov	r0, r4
 800719c:	f004 fa12 	bl	800b5c4 <FT_String_ND>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d10e      	bne.n	80071c4 <AT_ESP8266_ND+0x1a78>
																							{
																								AT_decode=at_fail;
 80071a6:	2303      	movs	r3, #3
 80071a8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80071ac:	e05b      	b.n	8007266 <AT_ESP8266_ND+0x1b1a>
 80071ae:	bf00      	nop
 80071b0:	0800d5dc 	.word	0x0800d5dc
 80071b4:	0800d5ec 	.word	0x0800d5ec
 80071b8:	0800d5fc 	.word	0x0800d5fc
 80071bc:	0800d60c 	.word	0x0800d60c
 80071c0:	0800d618 	.word	0x0800d618
																							}
																						else
																						{
																						//------------------busy processing------------------//
																							a->_n_fcomp=strlen("busy p...");
 80071c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2209      	movs	r2, #9
 80071d0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 80071d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80071e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80071f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80071fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007202:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800720c:	603b      	str	r3, [r7, #0]
 800720e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007212:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007216:	6812      	ldr	r2, [r2, #0]
 8007218:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800721c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007220:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007224:	6809      	ldr	r1, [r1, #0]
 8007226:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800722a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800722e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007232:	6800      	ldr	r0, [r0, #0]
 8007234:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007238:	2300      	movs	r3, #0
 800723a:	9305      	str	r3, [sp, #20]
 800723c:	9004      	str	r0, [sp, #16]
 800723e:	9103      	str	r1, [sp, #12]
 8007240:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007244:	9102      	str	r1, [sp, #8]
 8007246:	9201      	str	r2, [sp, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	4633      	mov	r3, r6
 800724e:	4a78      	ldr	r2, [pc, #480]	; (8007430 <AT_ESP8266_ND+0x1ce4>)
 8007250:	4629      	mov	r1, r5
 8007252:	4620      	mov	r0, r4
 8007254:	f004 f9b6 	bl	800b5c4 <FT_String_ND>
 8007258:	4603      	mov	r3, r0
 800725a:	2b01      	cmp	r3, #1
 800725c:	d103      	bne.n	8007266 <AT_ESP8266_ND+0x1b1a>
																								{
																								AT_decode=at_busy_p;
 800725e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007262:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}
}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 8007266:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800726a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8007274:	3b01      	subs	r3, #1
 8007276:	2b08      	cmp	r3, #8
 8007278:	f201 84db 	bhi.w	8008c32 <AT_ESP8266_ND+0x34e6>
 800727c:	a201      	add	r2, pc, #4	; (adr r2, 8007284 <AT_ESP8266_ND+0x1b38>)
 800727e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007282:	bf00      	nop
 8007284:	080072a9 	.word	0x080072a9
 8007288:	08007439 	.word	0x08007439
 800728c:	080076bb 	.word	0x080076bb
 8007290:	08007839 	.word	0x08007839
 8007294:	08007a11 	.word	0x08007a11
 8007298:	08007ce5 	.word	0x08007ce5
 800729c:	08007fa5 	.word	0x08007fa5
 80072a0:	080084d5 	.word	0x080084d5
 80072a4:	080086ab 	.word	0x080086ab
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80072a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 80072b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d14f      	bne.n	800736a <AT_ESP8266_ND+0x1c1e>
 80072ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d04b      	beq.n	800736a <AT_ESP8266_ND+0x1c1e>
									   &&(AT_decode!=at_error)
 80072d2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d047      	beq.n	800736a <AT_ESP8266_ND+0x1c1e>
									   &&(AT_decode!=at_restart)
 80072da:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d043      	beq.n	800736a <AT_ESP8266_ND+0x1c1e>
									   &&(AT_decode!=at_tcp_enviado_ok))
 80072e2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80072e6:	2b13      	cmp	r3, #19
 80072e8:	d03f      	beq.n	800736a <AT_ESP8266_ND+0x1c1e>
						{
						a->_pasos=0;
 80072ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 80072fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2201      	movs	r2, #1
 8007306:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 800730a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800730e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007318:	4620      	mov	r0, r4
 800731a:	f7f8 ff6b 	bl	80001f4 <strlen>
 800731e:	4603      	mov	r3, r0
 8007320:	4423      	add	r3, r4
 8007322:	4a44      	ldr	r2, [pc, #272]	; (8007434 <AT_ESP8266_ND+0x1ce8>)
 8007324:	461c      	mov	r4, r3
 8007326:	4613      	mov	r3, r2
 8007328:	cb07      	ldmia	r3!, {r0, r1, r2}
 800732a:	6020      	str	r0, [r4, #0]
 800732c:	6061      	str	r1, [r4, #4]
 800732e:	60a2      	str	r2, [r4, #8]
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8007334:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007338:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007342:	4618      	mov	r0, r3
 8007344:	f7f8 ff56 	bl	80001f4 <strlen>
 8007348:	4603      	mov	r3, r0
 800734a:	461a      	mov	r2, r3
 800734c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007350:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=100;
 800735a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800735e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2264      	movs	r2, #100	; 0x64
 8007366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 800736a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800736e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800737e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 8007388:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800738c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007396:	2b00      	cmp	r3, #0
 8007398:	d11b      	bne.n	80073d2 <AT_ESP8266_ND+0x1c86>
 800739a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d023      	beq.n	80073ea <AT_ESP8266_ND+0x1c9e>
 80073a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80073a6:	2b1c      	cmp	r3, #28
 80073a8:	d01f      	beq.n	80073ea <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_error)
 80073aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d01b      	beq.n	80073ea <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_restart)
 80073b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	d017      	beq.n	80073ea <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_wifi_connected)
 80073ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80073be:	2b0b      	cmp	r3, #11
 80073c0:	d013      	beq.n	80073ea <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_wifi_gotip)
 80073c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80073c6:	2b0c      	cmp	r3, #12
 80073c8:	d00f      	beq.n	80073ea <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_tcp_enviado_ok)))
 80073ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80073ce:	2b13      	cmp	r3, #19
 80073d0:	d00b      	beq.n	80073ea <AT_ESP8266_ND+0x1c9e>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 80073d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80073e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80073e4:	4293      	cmp	r3, r2
 80073e6:	f341 842e 	ble.w	8008c46 <AT_ESP8266_ND+0x34fa>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80073ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80073f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80073fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007400:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2200      	movs	r2, #0
 8007408:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 800740c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007410:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2200      	movs	r2, #0
 8007418:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 800741c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007420:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2200      	movs	r2, #0
 8007428:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 800742c:	f001 bc0b 	b.w	8008c46 <AT_ESP8266_ND+0x34fa>
 8007430:	0800d624 	.word	0x0800d624
 8007434:	0800d630 	.word	0x0800d630
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007438:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800743c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8007448:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800744c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007456:	2b01      	cmp	r3, #1
 8007458:	f040 80c8 	bne.w	80075ec <AT_ESP8266_ND+0x1ea0>
 800745c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007460:	2b01      	cmp	r3, #1
 8007462:	f000 80c3 	beq.w	80075ec <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_error)
 8007466:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800746a:	2b02      	cmp	r3, #2
 800746c:	f000 80be 	beq.w	80075ec <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_fail)
 8007470:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007474:	2b03      	cmp	r3, #3
 8007476:	f000 80b9 	beq.w	80075ec <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_restart)
 800747a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800747e:	2b04      	cmp	r3, #4
 8007480:	f000 80b4 	beq.w	80075ec <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_wifi_disconnect)
 8007484:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007488:	2b0a      	cmp	r3, #10
 800748a:	f000 80af 	beq.w	80075ec <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_wifi_connected)
 800748e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007492:	2b0b      	cmp	r3, #11
 8007494:	f000 80aa 	beq.w	80075ec <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_wifi_gotip))
 8007498:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800749c:	2b0c      	cmp	r3, #12
 800749e:	f000 80a5 	beq.w	80075ec <AT_ESP8266_ND+0x1ea0>
						{
						a->_pasos=0;
 80074a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 80074b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2201      	movs	r2, #1
 80074be:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 80074c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80074d0:	4620      	mov	r0, r4
 80074d2:	f7f8 fe8f 	bl	80001f4 <strlen>
 80074d6:	4603      	mov	r3, r0
 80074d8:	4423      	add	r3, r4
 80074da:	49d5      	ldr	r1, [pc, #852]	; (8007830 <AT_ESP8266_ND+0x20e4>)
 80074dc:	461a      	mov	r2, r3
 80074de:	460b      	mov	r3, r1
 80074e0:	cb03      	ldmia	r3!, {r0, r1}
 80074e2:	6010      	str	r0, [r2, #0]
 80074e4:	6051      	str	r1, [r2, #4]
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 80074ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80074f8:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80074fc:	2201      	movs	r2, #1
 80074fe:	4618      	mov	r0, r3
 8007500:	f004 fea5 	bl	800c24e <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 8007504:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007508:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007512:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007516:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	1d9d      	adds	r5, r3, #6
 800751e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007522:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	3306      	adds	r3, #6
 800752a:	4618      	mov	r0, r3
 800752c:	f7f8 fe62 	bl	80001f4 <strlen>
 8007530:	4603      	mov	r3, r0
 8007532:	461a      	mov	r2, r3
 8007534:	4629      	mov	r1, r5
 8007536:	4620      	mov	r0, r4
 8007538:	f004 fe89 	bl	800c24e <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 800753c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007540:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800754a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800754e:	4618      	mov	r0, r3
 8007550:	f7f8 fe50 	bl	80001f4 <strlen>
 8007554:	4602      	mov	r2, r0
 8007556:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800755a:	4619      	mov	r1, r3
 800755c:	4620      	mov	r0, r4
 800755e:	f004 fe76 	bl	800c24e <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 8007562:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007566:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007570:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007574:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800757e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007582:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3326      	adds	r3, #38	; 0x26
 800758a:	4618      	mov	r0, r3
 800758c:	f7f8 fe32 	bl	80001f4 <strlen>
 8007590:	4603      	mov	r3, r0
 8007592:	461a      	mov	r2, r3
 8007594:	4629      	mov	r1, r5
 8007596:	4620      	mov	r0, r4
 8007598:	f004 fe59 	bl	800c24e <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 800759c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80075aa:	f507 7109 	add.w	r1, r7, #548	; 0x224
 80075ae:	2203      	movs	r2, #3
 80075b0:	4618      	mov	r0, r3
 80075b2:	f004 fe4c 	bl	800c24e <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 80075b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7f8 fe15 	bl	80001f4 <strlen>
 80075ca:	4603      	mov	r3, r0
 80075cc:	461a      	mov	r2, r3
 80075ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=200;
 80075dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	22c8      	movs	r2, #200	; 0xc8
 80075e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 80075ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007600:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 800760a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800760e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007618:	2b00      	cmp	r3, #0
 800761a:	d11b      	bne.n	8007654 <AT_ESP8266_ND+0x1f08>
 800761c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007620:	2b01      	cmp	r3, #1
 8007622:	d023      	beq.n	800766c <AT_ESP8266_ND+0x1f20>
 8007624:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007628:	2b02      	cmp	r3, #2
 800762a:	d01f      	beq.n	800766c <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_fail)
 800762c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007630:	2b03      	cmp	r3, #3
 8007632:	d01b      	beq.n	800766c <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_restart)
 8007634:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007638:	2b04      	cmp	r3, #4
 800763a:	d017      	beq.n	800766c <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_wifi_disconnect)
 800763c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007640:	2b0a      	cmp	r3, #10
 8007642:	d013      	beq.n	800766c <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_wifi_connected)
 8007644:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007648:	2b0b      	cmp	r3, #11
 800764a:	d00f      	beq.n	800766c <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_wifi_gotip)))
 800764c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007650:	2b0c      	cmp	r3, #12
 8007652:	d00b      	beq.n	800766c <AT_ESP8266_ND+0x1f20>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 8007654:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007658:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 8007662:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007666:	4293      	cmp	r3, r2
 8007668:	f341 82ef 	ble.w	8008c4a <AT_ESP8266_ND+0x34fe>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800766c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007670:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800767a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 800767e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007682:	2b0a      	cmp	r3, #10
 8007684:	d00f      	beq.n	80076a6 <AT_ESP8266_ND+0x1f5a>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 8007686:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800768a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2200      	movs	r2, #0
 8007692:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							a->_ejecucion=0;
 8007696:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800769a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 80076a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
					}

			}
			break;
 80076b6:	f001 bac8 	b.w	8008c4a <AT_ESP8266_ND+0x34fe>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80076ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 80076ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d14d      	bne.n	8007778 <AT_ESP8266_ND+0x202c>
 80076dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80076e0:	2b04      	cmp	r3, #4
 80076e2:	d049      	beq.n	8007778 <AT_ESP8266_ND+0x202c>
 80076e4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80076e8:	2b0a      	cmp	r3, #10
 80076ea:	d045      	beq.n	8007778 <AT_ESP8266_ND+0x202c>
 80076ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80076f0:	2b0d      	cmp	r3, #13
 80076f2:	d041      	beq.n	8007778 <AT_ESP8266_ND+0x202c>
						{
						a->_pasos=0;
 80076f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2200      	movs	r2, #0
 8007700:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8007704:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007708:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2201      	movs	r2, #1
 8007710:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",10);
 8007714:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007718:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007722:	4620      	mov	r0, r4
 8007724:	f7f8 fd66 	bl	80001f4 <strlen>
 8007728:	4603      	mov	r3, r0
 800772a:	4423      	add	r3, r4
 800772c:	4941      	ldr	r1, [pc, #260]	; (8007834 <AT_ESP8266_ND+0x20e8>)
 800772e:	461a      	mov	r2, r3
 8007730:	460b      	mov	r3, r1
 8007732:	cb03      	ldmia	r3!, {r0, r1}
 8007734:	6010      	str	r0, [r2, #0]
 8007736:	6051      	str	r1, [r2, #4]
 8007738:	8819      	ldrh	r1, [r3, #0]
 800773a:	789b      	ldrb	r3, [r3, #2]
 800773c:	8111      	strh	r1, [r2, #8]
 800773e:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8007740:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007744:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800774e:	4618      	mov	r0, r3
 8007750:	f7f8 fd50 	bl	80001f4 <strlen>
 8007754:	4603      	mov	r3, r0
 8007756:	461a      	mov	r2, r3
 8007758:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800775c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 8007766:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800776a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8007778:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800777c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800778c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8007796:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800779a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d113      	bne.n	80077d0 <AT_ESP8266_ND+0x2084>
 80077a8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80077ac:	2b0a      	cmp	r3, #10
 80077ae:	d01b      	beq.n	80077e8 <AT_ESP8266_ND+0x209c>
 80077b0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80077b4:	2b0b      	cmp	r3, #11
 80077b6:	d017      	beq.n	80077e8 <AT_ESP8266_ND+0x209c>
																		  ||(AT_decode==at_wifi_gotip)
 80077b8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80077bc:	2b0c      	cmp	r3, #12
 80077be:	d013      	beq.n	80077e8 <AT_ESP8266_ND+0x209c>
																		  ||(AT_decode==at_restart	)
 80077c0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80077c4:	2b04      	cmp	r3, #4
 80077c6:	d00f      	beq.n	80077e8 <AT_ESP8266_ND+0x209c>
																		  ||(AT_decode==at_deconectar_ok )))
 80077c8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80077cc:	2b0d      	cmp	r3, #13
 80077ce:	d00b      	beq.n	80077e8 <AT_ESP8266_ND+0x209c>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80077d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80077de:	f241 3288 	movw	r2, #5000	; 0x1388
 80077e2:	4293      	cmp	r3, r2
 80077e4:	f341 8233 	ble.w	8008c4e <AT_ESP8266_ND+0x3502>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80077e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80077f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80077fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2200      	movs	r2, #0
 8007806:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 800780a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800780e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2200      	movs	r2, #0
 8007816:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 800781a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800781e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2200      	movs	r2, #0
 8007826:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 800782a:	f001 ba10 	b.w	8008c4e <AT_ESP8266_ND+0x3502>
 800782e:	bf00      	nop
 8007830:	0800d640 	.word	0x0800d640
 8007834:	0800d64c 	.word	0x0800d64c
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007838:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800783c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 8007848:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800784c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007856:	2b01      	cmp	r3, #1
 8007858:	d16b      	bne.n	8007932 <AT_ESP8266_ND+0x21e6>
 800785a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800785e:	2b04      	cmp	r3, #4
 8007860:	d067      	beq.n	8007932 <AT_ESP8266_ND+0x21e6>
									   &&(AT_decode!=at_ok)
 8007862:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007866:	2b01      	cmp	r3, #1
 8007868:	d063      	beq.n	8007932 <AT_ESP8266_ND+0x21e6>
									   &&(AT_decode!=at_error))
 800786a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800786e:	2b02      	cmp	r3, #2
 8007870:	d05f      	beq.n	8007932 <AT_ESP8266_ND+0x21e6>
						{
						a->_pasos=0;
 8007872:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007876:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2200      	movs	r2, #0
 800787e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8007882:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007886:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2201      	movs	r2, #1
 800788e:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 8007892:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007896:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d115      	bne.n	80078d0 <AT_ESP8266_ND+0x2184>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 80078a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80078b2:	4620      	mov	r0, r4
 80078b4:	f7f8 fc9e 	bl	80001f4 <strlen>
 80078b8:	4603      	mov	r3, r0
 80078ba:	4423      	add	r3, r4
 80078bc:	4a52      	ldr	r2, [pc, #328]	; (8007a08 <AT_ESP8266_ND+0x22bc>)
 80078be:	461c      	mov	r4, r3
 80078c0:	4613      	mov	r3, r2
 80078c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80078c4:	6020      	str	r0, [r4, #0]
 80078c6:	6061      	str	r1, [r4, #4]
 80078c8:	60a2      	str	r2, [r4, #8]
 80078ca:	881b      	ldrh	r3, [r3, #0]
 80078cc:	81a3      	strh	r3, [r4, #12]
 80078ce:	e014      	b.n	80078fa <AT_ESP8266_ND+0x21ae>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 80078d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80078de:	4620      	mov	r0, r4
 80078e0:	f7f8 fc88 	bl	80001f4 <strlen>
 80078e4:	4603      	mov	r3, r0
 80078e6:	4423      	add	r3, r4
 80078e8:	4a48      	ldr	r2, [pc, #288]	; (8007a0c <AT_ESP8266_ND+0x22c0>)
 80078ea:	461c      	mov	r4, r3
 80078ec:	4613      	mov	r3, r2
 80078ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80078f0:	6020      	str	r0, [r4, #0]
 80078f2:	6061      	str	r1, [r4, #4]
 80078f4:	60a2      	str	r2, [r4, #8]
 80078f6:	881b      	ldrh	r3, [r3, #0]
 80078f8:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 80078fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007908:	4618      	mov	r0, r3
 800790a:	f7f8 fc73 	bl	80001f4 <strlen>
 800790e:	4603      	mov	r3, r0
 8007910:	461a      	mov	r2, r3
 8007912:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007916:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 8007920:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007924:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800792e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8007932:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007936:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007946:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8007950:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007954:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800795e:	2b00      	cmp	r3, #0
 8007960:	d123      	bne.n	80079aa <AT_ESP8266_ND+0x225e>
 8007962:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007966:	2b01      	cmp	r3, #1
 8007968:	d02b      	beq.n	80079c2 <AT_ESP8266_ND+0x2276>
 800796a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800796e:	2b0b      	cmp	r3, #11
 8007970:	d027      	beq.n	80079c2 <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_wifi_gotip)
 8007972:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007976:	2b0c      	cmp	r3, #12
 8007978:	d023      	beq.n	80079c2 <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_restart)
 800797a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800797e:	2b04      	cmp	r3, #4
 8007980:	d01f      	beq.n	80079c2 <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_error)
 8007982:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007986:	2b02      	cmp	r3, #2
 8007988:	d01b      	beq.n	80079c2 <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_multiple_conn_ok)
 800798a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800798e:	2b07      	cmp	r3, #7
 8007990:	d017      	beq.n	80079c2 <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_no_multiple_conn_ok)
 8007992:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007996:	2b08      	cmp	r3, #8
 8007998:	d013      	beq.n	80079c2 <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_multiple_conn_err)
 800799a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800799e:	2b1e      	cmp	r3, #30
 80079a0:	d00f      	beq.n	80079c2 <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_no_multiple_conn_err)))
 80079a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80079a6:	2b1f      	cmp	r3, #31
 80079a8:	d00b      	beq.n	80079c2 <AT_ESP8266_ND+0x2276>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80079aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80079b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80079bc:	4293      	cmp	r3, r2
 80079be:	f341 8148 	ble.w	8008c52 <AT_ESP8266_ND+0x3506>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80079c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80079d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80079d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2200      	movs	r2, #0
 80079e0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 80079e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 80079f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8007a04:	f001 b925 	b.w	8008c52 <AT_ESP8266_ND+0x3506>
 8007a08:	0800d658 	.word	0x0800d658
 8007a0c:	0800d668 	.word	0x0800d668
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007a10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 8007a20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	f040 80f3 	bne.w	8007c1a <AT_ESP8266_ND+0x24ce>
 8007a34:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007a38:	2b04      	cmp	r3, #4
 8007a3a:	f000 80ee 	beq.w	8007c1a <AT_ESP8266_ND+0x24ce>
									   &&(AT_decode!=at_ok)
 8007a3e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	f000 80e9 	beq.w	8007c1a <AT_ESP8266_ND+0x24ce>
									   &&(AT_decode!=at_error)
 8007a48:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	f000 80e4 	beq.w	8007c1a <AT_ESP8266_ND+0x24ce>
									   &&(AT_decode!=at_def_ip_err)
 8007a52:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007a56:	2b21      	cmp	r3, #33	; 0x21
 8007a58:	f000 80df 	beq.w	8007c1a <AT_ESP8266_ND+0x24ce>
									   &&(AT_decode!=at_def_ip_ok))
 8007a5c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007a60:	2b1b      	cmp	r3, #27
 8007a62:	f000 80da 	beq.w	8007c1a <AT_ESP8266_ND+0x24ce>
						{
						a->_pasos=0;
 8007a66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8007a76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 8007a86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007a94:	4620      	mov	r0, r4
 8007a96:	f7f8 fbad 	bl	80001f4 <strlen>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	4423      	add	r3, r4
 8007a9e:	4990      	ldr	r1, [pc, #576]	; (8007ce0 <AT_ESP8266_ND+0x2594>)
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	cb03      	ldmia	r3!, {r0, r1}
 8007aa6:	6010      	str	r0, [r2, #0]
 8007aa8:	6051      	str	r1, [r2, #4]
 8007aaa:	8819      	ldrh	r1, [r3, #0]
 8007aac:	789b      	ldrb	r3, [r3, #2]
 8007aae:	8111      	strh	r1, [r2, #8]
 8007ab0:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 8007ab2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ab6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007ac0:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f004 fbc1 	bl	800c24e <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8007acc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ad0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007ada:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ade:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8007ae8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007aec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	334c      	adds	r3, #76	; 0x4c
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7f8 fb7d 	bl	80001f4 <strlen>
 8007afa:	4603      	mov	r3, r0
 8007afc:	461a      	mov	r2, r3
 8007afe:	4629      	mov	r1, r5
 8007b00:	4620      	mov	r0, r4
 8007b02:	f004 fba4 	bl	800c24e <strncat>
						strncat(a->_uart2snd,separador,3);
 8007b06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007b14:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8007b18:	2203      	movs	r2, #3
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f004 fb97 	bl	800c24e <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 8007b20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007b2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f103 0562 	add.w	r5, r3, #98	; 0x62
 8007b3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3362      	adds	r3, #98	; 0x62
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7f8 fb53 	bl	80001f4 <strlen>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	461a      	mov	r2, r3
 8007b52:	4629      	mov	r1, r5
 8007b54:	4620      	mov	r0, r4
 8007b56:	f004 fb7a 	bl	800c24e <strncat>
						strncat(a->_uart2snd,separador,3);
 8007b5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007b68:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8007b6c:	2203      	movs	r2, #3
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f004 fb6d 	bl	800c24e <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8007b74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007b82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f103 0572 	add.w	r5, r3, #114	; 0x72
 8007b90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3372      	adds	r3, #114	; 0x72
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7f8 fb29 	bl	80001f4 <strlen>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f004 fb50 	bl	800c24e <strncat>
						strncat(a->_uart2snd,&comillas,1);
 8007bae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007bbc:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f004 fb43 	bl	800c24e <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8007bc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007bd6:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8007bda:	2202      	movs	r2, #2
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f004 fb36 	bl	800c24e <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8007be2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007be6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7f8 faff 	bl	80001f4 <strlen>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bfe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8007c08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007c16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8007c1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8007c28:	1c5a      	adds	r2, r3, #1
 8007c2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8007c38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d11b      	bne.n	8007c82 <AT_ESP8266_ND+0x2536>
 8007c4a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d023      	beq.n	8007c9a <AT_ESP8266_ND+0x254e>
 8007c52:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007c56:	2b0b      	cmp	r3, #11
 8007c58:	d01f      	beq.n	8007c9a <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_wifi_gotip)
 8007c5a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007c5e:	2b0c      	cmp	r3, #12
 8007c60:	d01b      	beq.n	8007c9a <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_restart)
 8007c62:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007c66:	2b04      	cmp	r3, #4
 8007c68:	d017      	beq.n	8007c9a <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_error)
 8007c6a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d013      	beq.n	8007c9a <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_def_ip_err)
 8007c72:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007c76:	2b21      	cmp	r3, #33	; 0x21
 8007c78:	d00f      	beq.n	8007c9a <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_def_ip_ok)))
 8007c7a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007c7e:	2b1b      	cmp	r3, #27
 8007c80:	d00b      	beq.n	8007c9a <AT_ESP8266_ND+0x254e>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8007c82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8007c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c94:	4293      	cmp	r3, r2
 8007c96:	f340 87de 	ble.w	8008c56 <AT_ESP8266_ND+0x350a>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8007c9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8007ca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8007cac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8007cbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8007ccc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8007cdc:	f000 bfbb 	b.w	8008c56 <AT_ESP8266_ND+0x350a>
 8007ce0:	0800d548 	.word	0x0800d548
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007ce4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ce8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8007cf4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cf8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	f040 80e2 	bne.w	8007ecc <AT_ESP8266_ND+0x2780>
 8007d08:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007d0c:	2b0b      	cmp	r3, #11
 8007d0e:	f000 80dd 	beq.w	8007ecc <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_wifi_gotip)
 8007d12:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007d16:	2b0c      	cmp	r3, #12
 8007d18:	f000 80d8 	beq.w	8007ecc <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8007d1c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007d20:	2b0e      	cmp	r3, #14
 8007d22:	f000 80d3 	beq.w	8007ecc <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_tcp_conectado)
 8007d26:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007d2a:	2b0f      	cmp	r3, #15
 8007d2c:	f000 80ce 	beq.w	8007ecc <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_tcp_desconectado)
 8007d30:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007d34:	2b10      	cmp	r3, #16
 8007d36:	f000 80c9 	beq.w	8007ecc <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_error))
 8007d3a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	f000 80c4 	beq.w	8007ecc <AT_ESP8266_ND+0x2780>
						{
						a->_pasos=0;
 8007d44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8007d54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8007d64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007d72:	4620      	mov	r0, r4
 8007d74:	f7f8 fa3e 	bl	80001f4 <strlen>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	4423      	add	r3, r4
 8007d7c:	4aa7      	ldr	r2, [pc, #668]	; (800801c <AT_ESP8266_ND+0x28d0>)
 8007d7e:	461c      	mov	r4, r3
 8007d80:	4613      	mov	r3, r2
 8007d82:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007d84:	6020      	str	r0, [r4, #0]
 8007d86:	6061      	str	r1, [r4, #4]
 8007d88:	60a2      	str	r2, [r4, #8]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8007d8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007d9c:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8007da0:	2201      	movs	r2, #1
 8007da2:	4618      	mov	r0, r3
 8007da4:	f004 fa53 	bl	800c24e <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8007da8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007db6:	4620      	mov	r0, r4
 8007db8:	f7f8 fa1c 	bl	80001f4 <strlen>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	4423      	add	r3, r4
 8007dc0:	4a97      	ldr	r2, [pc, #604]	; (8008020 <AT_ESP8266_ND+0x28d4>)
 8007dc2:	6810      	ldr	r0, [r2, #0]
 8007dc4:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8007dc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007dd4:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8007dd8:	2203      	movs	r2, #3
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f004 fa37 	bl	800c24e <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8007de0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007de4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007dee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007df2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8007dfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3336      	adds	r3, #54	; 0x36
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7f8 f9f3 	bl	80001f4 <strlen>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	461a      	mov	r2, r3
 8007e12:	4629      	mov	r1, r5
 8007e14:	4620      	mov	r0, r4
 8007e16:	f004 fa1a 	bl	800c24e <strncat>
						strncat(a->_uart2snd,separador2,2);
 8007e1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007e28:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8007e2c:	2202      	movs	r2, #2
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f004 fa0d 	bl	800c24e <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8007e34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007e42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8007e50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3346      	adds	r3, #70	; 0x46
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7f8 f9c9 	bl	80001f4 <strlen>
 8007e62:	4603      	mov	r3, r0
 8007e64:	461a      	mov	r2, r3
 8007e66:	4629      	mov	r1, r5
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f004 f9f0 	bl	800c24e <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8007e6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007e7c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7f8 f9b7 	bl	80001f4 <strlen>
 8007e86:	4602      	mov	r2, r0
 8007e88:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f004 f9dd 	bl	800c24e <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8007e94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7f8 f9a6 	bl	80001f4 <strlen>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	461a      	mov	r2, r3
 8007eac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=600;
 8007eba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ebe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007ec8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8007ecc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ed0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8007eda:	1c5a      	adds	r2, r3, #1
 8007edc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ee0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8007eea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d124      	bne.n	8007f46 <AT_ESP8266_ND+0x27fa>
 8007efc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f00:	2b0a      	cmp	r3, #10
 8007f02:	d02c      	beq.n	8007f5e <AT_ESP8266_ND+0x2812>
 8007f04:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f08:	2b0b      	cmp	r3, #11
 8007f0a:	d028      	beq.n	8007f5e <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_fail)
 8007f0c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f10:	2b03      	cmp	r3, #3
 8007f12:	d024      	beq.n	8007f5e <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_wifi_gotip)
 8007f14:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f18:	2b0c      	cmp	r3, #12
 8007f1a:	d020      	beq.n	8007f5e <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 8007f1c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f20:	2b0e      	cmp	r3, #14
 8007f22:	d01c      	beq.n	8007f5e <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_tcp_conectado)
 8007f24:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f28:	2b0f      	cmp	r3, #15
 8007f2a:	d018      	beq.n	8007f5e <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_tcp_desconectado)
 8007f2c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f30:	2b10      	cmp	r3, #16
 8007f32:	d014      	beq.n	8007f5e <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_error)
 8007f34:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d010      	beq.n	8007f5e <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_busy_p)))
 8007f3c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f44:	d00b      	beq.n	8007f5e <AT_ESP8266_ND+0x2812>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8007f46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8007f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	f340 867e 	ble.w	8008c5a <AT_ESP8266_ND+0x350e>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8007f5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8007f6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8007f70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8007f80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8007f90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8007fa0:	f000 be5b 	b.w	8008c5a <AT_ESP8266_ND+0x350e>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 8007fa4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fa8:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8007fac:	2200      	movs	r2, #0
 8007fae:	601a      	str	r2, [r3, #0]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail)
 8007fb4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007fb8:	2b10      	cmp	r3, #16
 8007fba:	d00b      	beq.n	8007fd4 <AT_ESP8266_ND+0x2888>
 8007fbc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007fc0:	2b0a      	cmp	r3, #10
 8007fc2:	d007      	beq.n	8007fd4 <AT_ESP8266_ND+0x2888>
 8007fc4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007fc8:	2b03      	cmp	r3, #3
 8007fca:	d003      	beq.n	8007fd4 <AT_ESP8266_ND+0x2888>
						||(AT_decode==at_error))//240420
 8007fcc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d127      	bne.n	8008024 <AT_ESP8266_ND+0x28d8>
				{
					a->_estado=AT_decode;
 8007fd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8007fe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8007fe6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_ejecucion=0;
 8007ff6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ffa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2200      	movs	r2, #0
 8008002:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
					a->_subpaso=0;
 8008006:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800800a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2200      	movs	r2, #0
 8008012:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008016:	f000 be22 	b.w	8008c5e <AT_ESP8266_ND+0x3512>
 800801a:	bf00      	nop
 800801c:	0800d678 	.word	0x0800d678
 8008020:	0800d688 	.word	0x0800d688
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8008024:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008028:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008032:	2b01      	cmp	r3, #1
 8008034:	f040 80d1 	bne.w	80081da <AT_ESP8266_ND+0x2a8e>
 8008038:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800803c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008046:	2b00      	cmp	r3, #0
 8008048:	f040 80c7 	bne.w	80081da <AT_ESP8266_ND+0x2a8e>
										a->_ejecucion=1;
 800804c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008050:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2201      	movs	r2, #1
 8008058:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
										a->_estado=24;
 800805c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008060:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2218      	movs	r2, #24
 8008068:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800806c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008070:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 800807c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008080:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800808a:	1c5a      	adds	r2, r3, #1
 800808c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008090:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_pasos=0;
 800809a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800809e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 80080aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2ab8 	strb.w	r2, [r3, #2744]	; 0xab8
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 80080ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80080c8:	4620      	mov	r0, r4
 80080ca:	f7f8 f893 	bl	80001f4 <strlen>
 80080ce:	4603      	mov	r3, r0
 80080d0:	4423      	add	r3, r4
 80080d2:	4ac0      	ldr	r2, [pc, #768]	; (80083d4 <AT_ESP8266_ND+0x2c88>)
 80080d4:	461c      	mov	r4, r3
 80080d6:	4613      	mov	r3, r2
 80080d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80080da:	6020      	str	r0, [r4, #0]
 80080dc:	6061      	str	r1, [r4, #4]
 80080de:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 80080e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 80080ee:	f107 0214 	add.w	r2, r7, #20
 80080f2:	4611      	mov	r1, r2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f003 fdad 	bl	800bc54 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 80080fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008108:	f107 0314 	add.w	r3, r7, #20
 800810c:	4618      	mov	r0, r3
 800810e:	f7f8 f871 	bl	80001f4 <strlen>
 8008112:	4602      	mov	r2, r0
 8008114:	f107 0314 	add.w	r3, r7, #20
 8008118:	4619      	mov	r1, r3
 800811a:	4620      	mov	r0, r4
 800811c:	f004 f897 	bl	800c24e <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8008120:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008124:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f603 22b8 	addw	r2, r3, #2744	; 0xab8
 800812e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008132:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800813c:	4619      	mov	r1, r3
 800813e:	4610      	mov	r0, r2
 8008140:	f004 f966 	bl	800c410 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008144:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008148:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008152:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008156:	2202      	movs	r2, #2
 8008158:	4618      	mov	r0, r3
 800815a:	f004 f878 	bl	800c24e <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 800815e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008162:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800816c:	4618      	mov	r0, r3
 800816e:	f7f8 f841 	bl	80001f4 <strlen>
 8008172:	4603      	mov	r3, r0
 8008174:	461a      	mov	r2, r3
 8008176:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800817a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8008184:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008188:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f603 24b8 	addw	r4, r3, #2744	; 0xab8
 8008192:	4620      	mov	r0, r4
 8008194:	f7f8 f82e 	bl	80001f4 <strlen>
 8008198:	4603      	mov	r3, r0
 800819a:	4423      	add	r3, r4
 800819c:	4a8e      	ldr	r2, [pc, #568]	; (80083d8 <AT_ESP8266_ND+0x2c8c>)
 800819e:	461c      	mov	r4, r3
 80081a0:	4613      	mov	r3, r2
 80081a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80081a4:	6020      	str	r0, [r4, #0]
 80081a6:	6061      	str	r1, [r4, #4]
 80081a8:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 80081aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 80081b8:	1c5a      	adds	r2, r3, #1
 80081ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
										a->_estado=700;
 80081c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80081d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 80081da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80081e8:	1c5a      	adds	r2, r3, #1
 80081ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 80081f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008206:	2b00      	cmp	r3, #0
 8008208:	f040 80a6 	bne.w	8008358 <AT_ESP8266_ND+0x2c0c>
 800820c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008210:	2b13      	cmp	r3, #19
 8008212:	f000 80a1 	beq.w	8008358 <AT_ESP8266_ND+0x2c0c>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 8008216:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800821a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f503 62d3 	add.w	r2, r3, #1688	; 0x698
 8008224:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008228:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 8008232:	4619      	mov	r1, r3
 8008234:	4610      	mov	r0, r2
 8008236:	f7f7 ffd3 	bl	80001e0 <strcmp>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d01b      	beq.n	8008278 <AT_ESP8266_ND+0x2b2c>
 8008240:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008244:	2b01      	cmp	r3, #1
 8008246:	d017      	beq.n	8008278 <AT_ESP8266_ND+0x2b2c>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 8008248:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800824c:	2b14      	cmp	r3, #20
 800824e:	d013      	beq.n	8008278 <AT_ESP8266_ND+0x2b2c>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8008250:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008254:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 800825e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008262:	4293      	cmp	r3, r2
 8008264:	dd78      	ble.n	8008358 <AT_ESP8266_ND+0x2c0c>
 8008266:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800826a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008274:	2b01      	cmp	r3, #1
 8008276:	d16f      	bne.n	8008358 <AT_ESP8266_ND+0x2c0c>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 8008278:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800827c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8008286:	f241 3288 	movw	r2, #5000	; 0x1388
 800828a:	4293      	cmp	r3, r2
 800828c:	dd0e      	ble.n	80082ac <AT_ESP8266_ND+0x2b60>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 800828e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008292:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
 800829c:	1c5a      	adds	r2, r3, #1
 800829e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
								a->_debug_count4++;
 80082ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_subpaso++;
 80082ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 80082d8:	1c5a      	adds	r2, r3, #1
 80082da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
								a->_enviaruart=1;
 80082e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 80082f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f503 6093 	add.w	r0, r3, #1176	; 0x498
 8008306:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800830a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8008314:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008318:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 8008322:	2361      	movs	r3, #97	; 0x61
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	2301      	movs	r3, #1
 8008328:	f003 fd3e 	bl	800bda8 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 800832c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008330:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 800833a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800833e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8008348:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800834c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2200      	movs	r2, #0
 8008354:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 8008358:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800835c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008366:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800836a:	f040 8478 	bne.w	8008c5e <AT_ESP8266_ND+0x3512>
 800836e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008372:	2b13      	cmp	r3, #19
 8008374:	d032      	beq.n	80083dc <AT_ESP8266_ND+0x2c90>
 8008376:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800837a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8008384:	f241 3288 	movw	r2, #5000	; 0x1388
 8008388:	4293      	cmp	r3, r2
 800838a:	dc27      	bgt.n	80083dc <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_wifi_disconnect)
 800838c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008390:	2b0a      	cmp	r3, #10
 8008392:	d023      	beq.n	80083dc <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_fail)
 8008394:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008398:	2b03      	cmp	r3, #3
 800839a:	d01f      	beq.n	80083dc <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_wifi_connected)
 800839c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083a0:	2b0b      	cmp	r3, #11
 80083a2:	d01b      	beq.n	80083dc <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_wifi_gotip)
 80083a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083a8:	2b0c      	cmp	r3, #12
 80083aa:	d017      	beq.n	80083dc <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_tcp_desconectado)
 80083ac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083b0:	2b10      	cmp	r3, #16
 80083b2:	d013      	beq.n	80083dc <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_tcp_snd_err)
 80083b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083b8:	2b11      	cmp	r3, #17
 80083ba:	d00f      	beq.n	80083dc <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_tcp_enviado_error)
 80083bc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083c0:	2b12      	cmp	r3, #18
 80083c2:	d00b      	beq.n	80083dc <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_busy_p)))
 80083c4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083cc:	f040 8447 	bne.w	8008c5e <AT_ESP8266_ND+0x3512>
 80083d0:	e004      	b.n	80083dc <AT_ESP8266_ND+0x2c90>
 80083d2:	bf00      	nop
 80083d4:	0800d68c 	.word	0x0800d68c
 80083d8:	0800d698 	.word	0x0800d698
									a->_debug_count5++;
 80083dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 80083ea:	1c5a      	adds	r2, r3, #1
 80083ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
									if(a->_ticks > 5000)
 80083fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8008408:	f241 3288 	movw	r2, #5000	; 0x1388
 800840c:	4293      	cmp	r3, r2
 800840e:	dd25      	ble.n	800845c <AT_ESP8266_ND+0x2d10>
										a->_debug_count8++;
 8008410:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008414:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 800841e:	1c5a      	adds	r2, r3, #1
 8008420:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008424:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
										a->_subpaso++;
 800842e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008432:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800843c:	1c5a      	adds	r2, r3, #1
 800843e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008442:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_ticks=0;
 800844c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008450:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2200      	movs	r2, #0
 8008458:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 800845c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008460:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800846a:	2b02      	cmp	r3, #2
 800846c:	dd10      	ble.n	8008490 <AT_ESP8266_ND+0x2d44>
 800846e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008472:	2b10      	cmp	r3, #16
 8008474:	d00c      	beq.n	8008490 <AT_ESP8266_ND+0x2d44>
 8008476:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800847a:	2b0a      	cmp	r3, #10
 800847c:	d008      	beq.n	8008490 <AT_ESP8266_ND+0x2d44>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 800847e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008482:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	220f      	movs	r2, #15
 800848a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800848e:	e008      	b.n	80084a2 <AT_ESP8266_ND+0x2d56>
										a->_estado=AT_decode;	//Devuelvo el estado
 8008490:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008494:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800849e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 80084a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_ejecucion=0;
 80084b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2200      	movs	r2, #0
 80084be:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
									a->_subpaso=0;
 80084c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
			break;
 80084d2:	e3c4      	b.n	8008c5e <AT_ESP8266_ND+0x3512>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80084d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if( a->_enviaruart==1)
 80084e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d16f      	bne.n	80085d6 <AT_ESP8266_ND+0x2e8a>
						{
						a->_pasos=0;
 80084f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2200      	movs	r2, #0
 8008502:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8008506:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800850a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2201      	movs	r2, #1
 8008512:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 8008516:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800851a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008524:	4620      	mov	r0, r4
 8008526:	f7f7 fe65 	bl	80001f4 <strlen>
 800852a:	4603      	mov	r3, r0
 800852c:	4423      	add	r3, r4
 800852e:	4a7a      	ldr	r2, [pc, #488]	; (8008718 <AT_ESP8266_ND+0x2fcc>)
 8008530:	461c      	mov	r4, r3
 8008532:	4615      	mov	r5, r2
 8008534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008536:	6020      	str	r0, [r4, #0]
 8008538:	6061      	str	r1, [r4, #4]
 800853a:	60a2      	str	r2, [r4, #8]
 800853c:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 800853e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008542:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800854c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008550:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 800855a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800855e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	335c      	adds	r3, #92	; 0x5c
 8008566:	4618      	mov	r0, r3
 8008568:	f7f7 fe44 	bl	80001f4 <strlen>
 800856c:	4603      	mov	r3, r0
 800856e:	461a      	mov	r2, r3
 8008570:	4629      	mov	r1, r5
 8008572:	4620      	mov	r0, r4
 8008574:	f003 fe6b 	bl	800c24e <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008578:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800857c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008586:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800858a:	4618      	mov	r0, r3
 800858c:	f7f7 fe32 	bl	80001f4 <strlen>
 8008590:	4602      	mov	r2, r0
 8008592:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008596:	4619      	mov	r1, r3
 8008598:	4620      	mov	r0, r4
 800859a:	f003 fe58 	bl	800c24e <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 800859e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7f7 fe21 	bl	80001f4 <strlen>
 80085b2:	4603      	mov	r3, r0
 80085b4:	461a      	mov	r2, r3
 80085b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=800;
 80085c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f44f 7248 	mov.w	r2, #800	; 0x320
 80085d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 80085d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80085e4:	1c5a      	adds	r2, r3, #1
 80085e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80085f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008602:	2b00      	cmp	r3, #0
 8008604:	d123      	bne.n	800864e <AT_ESP8266_ND+0x2f02>
 8008606:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800860a:	2b0a      	cmp	r3, #10
 800860c:	d02b      	beq.n	8008666 <AT_ESP8266_ND+0x2f1a>
 800860e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008612:	2b0b      	cmp	r3, #11
 8008614:	d027      	beq.n	8008666 <AT_ESP8266_ND+0x2f1a>
 8008616:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800861a:	2b0c      	cmp	r3, #12
 800861c:	d023      	beq.n	8008666 <AT_ESP8266_ND+0x2f1a>
 800861e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008622:	2b0e      	cmp	r3, #14
 8008624:	d01f      	beq.n	8008666 <AT_ESP8266_ND+0x2f1a>
 8008626:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800862a:	2b0f      	cmp	r3, #15
 800862c:	d01b      	beq.n	8008666 <AT_ESP8266_ND+0x2f1a>
 800862e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008632:	2b10      	cmp	r3, #16
 8008634:	d017      	beq.n	8008666 <AT_ESP8266_ND+0x2f1a>
 8008636:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800863a:	2b15      	cmp	r3, #21
 800863c:	d013      	beq.n	8008666 <AT_ESP8266_ND+0x2f1a>
 800863e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008642:	2b16      	cmp	r3, #22
 8008644:	d00f      	beq.n	8008666 <AT_ESP8266_ND+0x2f1a>
 8008646:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800864a:	2b17      	cmp	r3, #23
 800864c:	d00b      	beq.n	8008666 <AT_ESP8266_ND+0x2f1a>
 800864e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008652:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 800865c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008660:	4293      	cmp	r3, r2
 8008662:	f340 82fe 	ble.w	8008c62 <AT_ESP8266_ND+0x3516>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008666:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800866a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008674:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008678:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800867c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2200      	movs	r2, #0
 8008684:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8008688:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800868c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2200      	movs	r2, #0
 8008694:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8008698:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800869c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
			}
			break;
 80086a8:	e2db      	b.n	8008c62 <AT_ESP8266_ND+0x3516>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 80086aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086ae:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80086b2:	2200      	movs	r2, #0
 80086b4:	601a      	str	r2, [r3, #0]
 80086b6:	2200      	movs	r2, #0
 80086b8:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail))
 80086ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086be:	2b10      	cmp	r3, #16
 80086c0:	d007      	beq.n	80086d2 <AT_ESP8266_ND+0x2f86>
 80086c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086c6:	2b0a      	cmp	r3, #10
 80086c8:	d003      	beq.n	80086d2 <AT_ESP8266_ND+0x2f86>
 80086ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086ce:	2b03      	cmp	r3, #3
 80086d0:	d124      	bne.n	800871c <AT_ESP8266_ND+0x2fd0>
				{
					a->_estado=AT_decode;
 80086d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80086e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 80086e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_ejecucion=0;
 80086f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2200      	movs	r2, #0
 8008700:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
					a->_subpaso=0;
 8008704:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008708:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2200      	movs	r2, #0
 8008710:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008714:	e2a7      	b.n	8008c66 <AT_ESP8266_ND+0x351a>
 8008716:	bf00      	nop
 8008718:	0800d6a4 	.word	0x0800d6a4
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 800871c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008720:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800872a:	2b01      	cmp	r3, #1
 800872c:	f040 8102 	bne.w	8008934 <AT_ESP8266_ND+0x31e8>
 8008730:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008734:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800873e:	2b00      	cmp	r3, #0
 8008740:	f040 80f8 	bne.w	8008934 <AT_ESP8266_ND+0x31e8>
										a->_ejecucion=1;
 8008744:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008748:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2201      	movs	r2, #1
 8008750:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
										a->_estado=24;
 8008754:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008758:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2218      	movs	r2, #24
 8008760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008764:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008768:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2200      	movs	r2, #0
 8008770:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8008774:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008778:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008782:	1c5a      	adds	r2, r3, #1
 8008784:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008788:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_pasos=0;
 8008792:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008796:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2200      	movs	r2, #0
 800879e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 80087a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 2ab8 	strb.w	r2, [r3, #2744]	; 0xab8
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 80087b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80087c0:	4620      	mov	r0, r4
 80087c2:	f7f7 fd17 	bl	80001f4 <strlen>
 80087c6:	4603      	mov	r3, r0
 80087c8:	4423      	add	r3, r4
 80087ca:	4a83      	ldr	r2, [pc, #524]	; (80089d8 <AT_ESP8266_ND+0x328c>)
 80087cc:	461c      	mov	r4, r3
 80087ce:	4613      	mov	r3, r2
 80087d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80087d2:	6020      	str	r0, [r4, #0]
 80087d4:	6061      	str	r1, [r4, #4]
 80087d6:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 80087d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 80087e6:	f107 020c 	add.w	r2, r7, #12
 80087ea:	4611      	mov	r1, r2
 80087ec:	4618      	mov	r0, r3
 80087ee:	f003 fa31 	bl	800bc54 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 80087f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008800:	f107 030c 	add.w	r3, r7, #12
 8008804:	4618      	mov	r0, r3
 8008806:	f7f7 fcf5 	bl	80001f4 <strlen>
 800880a:	4602      	mov	r2, r0
 800880c:	f107 030c 	add.w	r3, r7, #12
 8008810:	4619      	mov	r1, r3
 8008812:	4620      	mov	r0, r4
 8008814:	f003 fd1b 	bl	800c24e <strncat>
										strncat(a->_uart2snd,",",1);
 8008818:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800881c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008826:	4620      	mov	r0, r4
 8008828:	f7f7 fce4 	bl	80001f4 <strlen>
 800882c:	4603      	mov	r3, r0
 800882e:	4423      	add	r3, r4
 8008830:	496a      	ldr	r1, [pc, #424]	; (80089dc <AT_ESP8266_ND+0x3290>)
 8008832:	461a      	mov	r2, r3
 8008834:	460b      	mov	r3, r1
 8008836:	881b      	ldrh	r3, [r3, #0]
 8008838:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 800883a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800883e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8008848:	f107 020c 	add.w	r2, r7, #12
 800884c:	4611      	mov	r1, r2
 800884e:	4618      	mov	r0, r3
 8008850:	f003 fa00 	bl	800bc54 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8008854:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008858:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008862:	f107 030c 	add.w	r3, r7, #12
 8008866:	4618      	mov	r0, r3
 8008868:	f7f7 fcc4 	bl	80001f4 <strlen>
 800886c:	4602      	mov	r2, r0
 800886e:	f107 030c 	add.w	r3, r7, #12
 8008872:	4619      	mov	r1, r3
 8008874:	4620      	mov	r0, r4
 8008876:	f003 fcea 	bl	800c24e <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 800887a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800887e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f603 22b8 	addw	r2, r3, #2744	; 0xab8
 8008888:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800888c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008896:	4619      	mov	r1, r3
 8008898:	4610      	mov	r0, r2
 800889a:	f003 fdb9 	bl	800c410 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 800889e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80088ac:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 80088b0:	2202      	movs	r2, #2
 80088b2:	4618      	mov	r0, r3
 80088b4:	f003 fccb 	bl	800c24e <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 80088b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7f7 fc94 	bl	80001f4 <strlen>
 80088cc:	4603      	mov	r3, r0
 80088ce:	461a      	mov	r2, r3
 80088d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 80088de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f603 24b8 	addw	r4, r3, #2744	; 0xab8
 80088ec:	4620      	mov	r0, r4
 80088ee:	f7f7 fc81 	bl	80001f4 <strlen>
 80088f2:	4603      	mov	r3, r0
 80088f4:	4423      	add	r3, r4
 80088f6:	4a3a      	ldr	r2, [pc, #232]	; (80089e0 <AT_ESP8266_ND+0x3294>)
 80088f8:	461c      	mov	r4, r3
 80088fa:	4613      	mov	r3, r2
 80088fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80088fe:	6020      	str	r0, [r4, #0]
 8008900:	6061      	str	r1, [r4, #4]
 8008902:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8008904:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008908:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 8008912:	1c5a      	adds	r2, r3, #1
 8008914:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008918:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
										a->_estado=900;
 8008922:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008926:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8008930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8008934:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008938:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008942:	1c5a      	adds	r2, r3, #1
 8008944:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008948:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8008952:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008956:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008960:	2b00      	cmp	r3, #0
 8008962:	f040 80b8 	bne.w	8008ad6 <AT_ESP8266_ND+0x338a>
 8008966:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800896a:	2b13      	cmp	r3, #19
 800896c:	f000 80b3 	beq.w	8008ad6 <AT_ESP8266_ND+0x338a>
 8008970:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008974:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f503 62d3 	add.w	r2, r3, #1688	; 0x698
 800897e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008982:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 800898c:	4619      	mov	r1, r3
 800898e:	4610      	mov	r0, r2
 8008990:	f7f7 fc26 	bl	80001e0 <strcmp>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d024      	beq.n	80089e4 <AT_ESP8266_ND+0x3298>
 800899a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d020      	beq.n	80089e4 <AT_ESP8266_ND+0x3298>
 80089a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089a6:	2b14      	cmp	r3, #20
 80089a8:	d01c      	beq.n	80089e4 <AT_ESP8266_ND+0x3298>
 80089aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80089b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80089bc:	4293      	cmp	r3, r2
 80089be:	f340 808a 	ble.w	8008ad6 <AT_ESP8266_ND+0x338a>
 80089c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	f040 8080 	bne.w	8008ad6 <AT_ESP8266_ND+0x338a>
 80089d6:	e005      	b.n	80089e4 <AT_ESP8266_ND+0x3298>
 80089d8:	0800d68c 	.word	0x0800d68c
 80089dc:	0800d6b4 	.word	0x0800d6b4
 80089e0:	0800d698 	.word	0x0800d698
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 80089e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80089f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80089f6:	4293      	cmp	r3, r2
 80089f8:	dd17      	ble.n	8008a2a <AT_ESP8266_ND+0x32de>
 80089fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d10e      	bne.n	8008a2a <AT_ESP8266_ND+0x32de>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8008a0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
 8008a1a:	1c5a      	adds	r2, r3, #1
 8008a1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
								a->_debug_count4++;
 8008a2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8008a38:	1c5a      	adds	r2, r3, #1
 8008a3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_subpaso++;
 8008a48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008a56:	1c5a      	adds	r2, r3, #1
 8008a58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
								a->_enviaruart=1;
 8008a66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8008a76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f503 6093 	add.w	r0, r3, #1176	; 0x498
 8008a84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8008a92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 8008aa0:	2361      	movs	r3, #97	; 0x61
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	f003 f97f 	bl	800bda8 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8008aaa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 8008ab8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008abc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8008ac6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 8008ad6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ada:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ae4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8008ae8:	f040 80bd 	bne.w	8008c66 <AT_ESP8266_ND+0x351a>
 8008aec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008af0:	2b13      	cmp	r3, #19
 8008af2:	d02b      	beq.n	8008b4c <AT_ESP8266_ND+0x3400>
 8008af4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008af8:	2b0b      	cmp	r3, #11
 8008afa:	d027      	beq.n	8008b4c <AT_ESP8266_ND+0x3400>
 8008afc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b00:	2b0c      	cmp	r3, #12
 8008b02:	d023      	beq.n	8008b4c <AT_ESP8266_ND+0x3400>
 8008b04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8008b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b16:	4293      	cmp	r3, r2
 8008b18:	dc18      	bgt.n	8008b4c <AT_ESP8266_ND+0x3400>
 8008b1a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b1e:	2b0a      	cmp	r3, #10
 8008b20:	d014      	beq.n	8008b4c <AT_ESP8266_ND+0x3400>
 8008b22:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b26:	2b10      	cmp	r3, #16
 8008b28:	d010      	beq.n	8008b4c <AT_ESP8266_ND+0x3400>
 8008b2a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b2e:	2b11      	cmp	r3, #17
 8008b30:	d00c      	beq.n	8008b4c <AT_ESP8266_ND+0x3400>
 8008b32:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b36:	2b12      	cmp	r3, #18
 8008b38:	d008      	beq.n	8008b4c <AT_ESP8266_ND+0x3400>
 8008b3a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b3e:	2b16      	cmp	r3, #22
 8008b40:	d004      	beq.n	8008b4c <AT_ESP8266_ND+0x3400>
 8008b42:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b46:	2b19      	cmp	r3, #25
 8008b48:	f040 808d 	bne.w	8008c66 <AT_ESP8266_ND+0x351a>
									a->_debug_count5++;
 8008b4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
									if(a->_ticks > 5000)
 8008b6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8008b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	dd25      	ble.n	8008bcc <AT_ESP8266_ND+0x3480>
										a->_debug_count8++;
 8008b80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8008b8e:	1c5a      	adds	r2, r3, #1
 8008b90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
										a->_subpaso++;
 8008b9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ba2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008bac:	1c5a      	adds	r2, r3, #1
 8008bae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_ticks=0;
 8008bbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8008bcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	dd07      	ble.n	8008bee <AT_ESP8266_ND+0x34a2>
 8008bde:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008be2:	2b10      	cmp	r3, #16
 8008be4:	d003      	beq.n	8008bee <AT_ESP8266_ND+0x34a2>
 8008be6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bea:	2b0a      	cmp	r3, #10
 8008bec:	d108      	bne.n	8008c00 <AT_ESP8266_ND+0x34b4>
										a->_estado=AT_decode;	//Devuelvo el estado
 8008bee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bf2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008bfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8008c00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_ejecucion=0;
 8008c10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
									a->_subpaso=0;
 8008c20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
			break;
 8008c30:	e019      	b.n	8008c66 <AT_ESP8266_ND+0x351a>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8008c32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008c40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8008c44:	e010      	b.n	8008c68 <AT_ESP8266_ND+0x351c>
			break;
 8008c46:	bf00      	nop
 8008c48:	e00e      	b.n	8008c68 <AT_ESP8266_ND+0x351c>
			break;
 8008c4a:	bf00      	nop
 8008c4c:	e00c      	b.n	8008c68 <AT_ESP8266_ND+0x351c>
			break;
 8008c4e:	bf00      	nop
 8008c50:	e00a      	b.n	8008c68 <AT_ESP8266_ND+0x351c>
			break;
 8008c52:	bf00      	nop
 8008c54:	e008      	b.n	8008c68 <AT_ESP8266_ND+0x351c>
			break;
 8008c56:	bf00      	nop
 8008c58:	e006      	b.n	8008c68 <AT_ESP8266_ND+0x351c>
			break;
 8008c5a:	bf00      	nop
 8008c5c:	e004      	b.n	8008c68 <AT_ESP8266_ND+0x351c>
			break;
 8008c5e:	bf00      	nop
 8008c60:	e002      	b.n	8008c68 <AT_ESP8266_ND+0x351c>
			break;
 8008c62:	bf00      	nop
 8008c64:	e000      	b.n	8008c68 <AT_ESP8266_ND+0x351c>
			break;
 8008c66:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8008c68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
		a->_n_orig=0;
 8008c78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

		return (a->_estado);
 8008c88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 8008c96:	4618      	mov	r0, r3
 8008c98:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ca0 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cb2:	f240 328d 	movw	r2, #909	; 0x38d
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	f001 8449 	beq.w	800a54e <WiFi_Conn_ND+0x18ae>
 8008cbc:	f240 328d 	movw	r2, #909	; 0x38d
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	f301 84de 	bgt.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008cc6:	f240 3289 	movw	r2, #905	; 0x389
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	f001 83b6 	beq.w	800a43c <WiFi_Conn_ND+0x179c>
 8008cd0:	f240 3289 	movw	r2, #905	; 0x389
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	f301 84d4 	bgt.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008cda:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8008cde:	f001 82a5 	beq.w	800a22c <WiFi_Conn_ND+0x158c>
 8008ce2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8008ce6:	f301 84cc 	bgt.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008cea:	f240 3229 	movw	r2, #809	; 0x329
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	f301 84c7 	bgt.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008cf4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008cf8:	f280 80a5 	bge.w	8008e46 <WiFi_Conn_ND+0x1a6>
 8008cfc:	f240 22c5 	movw	r2, #709	; 0x2c5
 8008d00:	4293      	cmp	r3, r2
 8008d02:	f000 87d9 	beq.w	8009cb8 <WiFi_Conn_ND+0x1018>
 8008d06:	f240 22c5 	movw	r2, #709	; 0x2c5
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	f301 84b9 	bgt.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008d10:	f240 22c1 	movw	r2, #705	; 0x2c1
 8008d14:	4293      	cmp	r3, r2
 8008d16:	f000 8750 	beq.w	8009bba <WiFi_Conn_ND+0xf1a>
 8008d1a:	f240 22c1 	movw	r2, #705	; 0x2c1
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	f301 84af 	bgt.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008d24:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8008d28:	f000 866b 	beq.w	8009a02 <WiFi_Conn_ND+0xd62>
 8008d2c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8008d30:	f301 84a7 	bgt.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008d34:	f240 2261 	movw	r2, #609	; 0x261
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	f000 85ec 	beq.w	8009916 <WiFi_Conn_ND+0xc76>
 8008d3e:	f240 2261 	movw	r2, #609	; 0x261
 8008d42:	4293      	cmp	r3, r2
 8008d44:	f301 849d 	bgt.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008d48:	f240 225d 	movw	r2, #605	; 0x25d
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	f000 8582 	beq.w	8009856 <WiFi_Conn_ND+0xbb6>
 8008d52:	f240 225d 	movw	r2, #605	; 0x25d
 8008d56:	4293      	cmp	r3, r2
 8008d58:	f301 8493 	bgt.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008d5c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8008d60:	f000 8500 	beq.w	8009764 <WiFi_Conn_ND+0xac4>
 8008d64:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8008d68:	f301 848b 	bgt.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008d6c:	f240 12fd 	movw	r2, #509	; 0x1fd
 8008d70:	4293      	cmp	r3, r2
 8008d72:	f000 8496 	beq.w	80096a2 <WiFi_Conn_ND+0xa02>
 8008d76:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8008d7a:	f281 8482 	bge.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008d7e:	f240 12f9 	movw	r2, #505	; 0x1f9
 8008d82:	4293      	cmp	r3, r2
 8008d84:	f000 844c 	beq.w	8009620 <WiFi_Conn_ND+0x980>
 8008d88:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8008d8c:	f281 8479 	bge.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008d90:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008d94:	f000 83d7 	beq.w	8009546 <WiFi_Conn_ND+0x8a6>
 8008d98:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008d9c:	f301 8471 	bgt.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008da0:	f240 1299 	movw	r2, #409	; 0x199
 8008da4:	4293      	cmp	r3, r2
 8008da6:	f000 8378 	beq.w	800949a <WiFi_Conn_ND+0x7fa>
 8008daa:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8008dae:	f281 8468 	bge.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008db2:	f240 1295 	movw	r2, #405	; 0x195
 8008db6:	4293      	cmp	r3, r2
 8008db8:	f000 8333 	beq.w	8009422 <WiFi_Conn_ND+0x782>
 8008dbc:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8008dc0:	f281 845f 	bge.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008dc4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8008dc8:	f000 82aa 	beq.w	8009320 <WiFi_Conn_ND+0x680>
 8008dcc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8008dd0:	f301 8457 	bgt.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008dd4:	f240 1235 	movw	r2, #309	; 0x135
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	f000 827b 	beq.w	80092d4 <WiFi_Conn_ND+0x634>
 8008dde:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8008de2:	f281 844e 	bge.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008de6:	f240 1231 	movw	r2, #305	; 0x131
 8008dea:	4293      	cmp	r3, r2
 8008dec:	f000 826d 	beq.w	80092ca <WiFi_Conn_ND+0x62a>
 8008df0:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8008df4:	f281 8445 	bge.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008df8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008dfc:	f000 8211 	beq.w	8009222 <WiFi_Conn_ND+0x582>
 8008e00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008e04:	f301 843d 	bgt.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008e08:	2bd1      	cmp	r3, #209	; 0xd1
 8008e0a:	f000 81a5 	beq.w	8009158 <WiFi_Conn_ND+0x4b8>
 8008e0e:	2bd1      	cmp	r3, #209	; 0xd1
 8008e10:	f301 8437 	bgt.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008e14:	2bcd      	cmp	r3, #205	; 0xcd
 8008e16:	f000 8175 	beq.w	8009104 <WiFi_Conn_ND+0x464>
 8008e1a:	2bcd      	cmp	r3, #205	; 0xcd
 8008e1c:	f301 8431 	bgt.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008e20:	2bc8      	cmp	r3, #200	; 0xc8
 8008e22:	f000 80f1 	beq.w	8009008 <WiFi_Conn_ND+0x368>
 8008e26:	2bc8      	cmp	r3, #200	; 0xc8
 8008e28:	f301 842b 	bgt.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008e2c:	2b6d      	cmp	r3, #109	; 0x6d
 8008e2e:	f000 80b3 	beq.w	8008f98 <WiFi_Conn_ND+0x2f8>
 8008e32:	2b6d      	cmp	r3, #109	; 0x6d
 8008e34:	f301 8425 	bgt.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008e38:	2b64      	cmp	r3, #100	; 0x64
 8008e3a:	d021      	beq.n	8008e80 <WiFi_Conn_ND+0x1e0>
 8008e3c:	2b69      	cmp	r3, #105	; 0x69
 8008e3e:	f000 8096 	beq.w	8008f6e <WiFi_Conn_ND+0x2ce>
 8008e42:	f001 bc1e 	b.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008e46:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8008e4a:	2b09      	cmp	r3, #9
 8008e4c:	f201 8419 	bhi.w	800a682 <WiFi_Conn_ND+0x19e2>
 8008e50:	a201      	add	r2, pc, #4	; (adr r2, 8008e58 <WiFi_Conn_ND+0x1b8>)
 8008e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e56:	bf00      	nop
 8008e58:	08009dcf 	.word	0x08009dcf
 8008e5c:	0800a683 	.word	0x0800a683
 8008e60:	0800a683 	.word	0x0800a683
 8008e64:	0800a683 	.word	0x0800a683
 8008e68:	0800a683 	.word	0x0800a683
 8008e6c:	08009e9d 	.word	0x08009e9d
 8008e70:	08009f47 	.word	0x08009f47
 8008e74:	08009ff1 	.word	0x08009ff1
 8008e78:	0800a09b 	.word	0x0800a09b
 8008e7c:	0800a145 	.word	0x0800a145
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e86:	2b64      	cmp	r3, #100	; 0x64
 8008e88:	d046      	beq.n	8008f18 <WiFi_Conn_ND+0x278>
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d041      	beq.n	8008f18 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e9a:	2b1c      	cmp	r3, #28
 8008e9c:	d03c      	beq.n	8008f18 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d037      	beq.n	8008f18 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eae:	2b04      	cmp	r3, #4
 8008eb0:	d032      	beq.n	8008f18 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eb8:	2b13      	cmp	r3, #19
 8008eba:	d02d      	beq.n	8008f18 <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f7fc faaf 	bl	8005420 <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d14e      	bne.n	8008f6a <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f7fc fc3d 	bl	800574c <AT_ESP8266_ND>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d109      	bne.n	8008f00 <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8008ef8:	4619      	mov	r1, r3
 8008efa:	4610      	mov	r0, r2
 8008efc:	f7f8 f928 	bl	8001150 <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	2364      	movs	r3, #100	; 0x64
 8008f10:	68b8      	ldr	r0, [r7, #8]
 8008f12:	f7fb f9e1 	bl	80042d8 <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 8008f16:	e028      	b.n	8008f6a <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d004      	beq.n	8008f2c <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 8008f28:	2b1c      	cmp	r3, #28
 8008f2a:	d103      	bne.n	8008f34 <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	226d      	movs	r2, #109	; 0x6d
 8008f30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d00f      	beq.n	8008f5e <WiFi_Conn_ND+0x2be>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f44:	2b04      	cmp	r3, #4
 8008f46:	d00a      	beq.n	8008f5e <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f4e:	2b0b      	cmp	r3, #11
 8008f50:	d005      	beq.n	8008f5e <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f58:	2b0c      	cmp	r3, #12
 8008f5a:	f041 8363 	bne.w	800a624 <WiFi_Conn_ND+0x1984>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2269      	movs	r2, #105	; 0x69
 8008f62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 8008f66:	f001 bb5d 	b.w	800a624 <WiFi_Conn_ND+0x1984>
 8008f6a:	f001 bb5b 	b.w	800a624 <WiFi_Conn_ND+0x1984>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f7fc fa56 	bl	8005420 <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2264      	movs	r2, #100	; 0x64
 8008f78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 8008f94:	f001 bb75 	b.w	800a682 <WiFi_Conn_ND+0x19e2>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00c      	beq.n	8008fbc <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f7fc fa68 	bl	8005478 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008fae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8008fba:	e00e      	b.n	8008fda <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f7fc fa45 	bl	800544c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	22c8      	movs	r2, #200	; 0xc8
 8008fc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fe0:	2b04      	cmp	r3, #4
 8008fe2:	f041 8321 	bne.w	800a628 <WiFi_Conn_ND+0x1988>
					{
						Cambiar_CWMODE(b);
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f7fc fa1a 	bl	8005420 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2264      	movs	r2, #100	; 0x64
 8008ff0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009004:	f001 bb10 	b.w	800a628 <WiFi_Conn_ND+0x1988>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800900e:	2bc8      	cmp	r3, #200	; 0xc8
 8009010:	d04f      	beq.n	80090b2 <WiFi_Conn_ND+0x412>
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009018:	2b01      	cmp	r3, #1
 800901a:	d04a      	beq.n	80090b2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009022:	2b02      	cmp	r3, #2
 8009024:	d045      	beq.n	80090b2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800902c:	2b03      	cmp	r3, #3
 800902e:	d040      	beq.n	80090b2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009036:	2b04      	cmp	r3, #4
 8009038:	d03b      	beq.n	80090b2 <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009040:	2b0a      	cmp	r3, #10
 8009042:	d036      	beq.n	80090b2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800904a:	2b0b      	cmp	r3, #11
 800904c:	d031      	beq.n	80090b2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009054:	2b0c      	cmp	r3, #12
 8009056:	d02c      	beq.n	80090b2 <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f7fc f9f7 	bl	800544c <ConectarWIFI>
						if(b->_enviaruart==1)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009064:	2b01      	cmp	r3, #1
 8009066:	d124      	bne.n	80090b2 <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f7fc fb6f 	bl	800574c <AT_ESP8266_ND>
 800906e:	4602      	mov	r2, r0
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009084:	2b01      	cmp	r3, #1
 8009086:	d109      	bne.n	800909c <WiFi_Conn_ND+0x3fc>
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009094:	4619      	mov	r1, r3
 8009096:	4610      	mov	r0, r2
 8009098:	f7f8 f85a 	bl	8001150 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 80090a8:	b29a      	uxth	r2, r3
 80090aa:	2364      	movs	r3, #100	; 0x64
 80090ac:	68b8      	ldr	r0, [r7, #8]
 80090ae:	f7fb f913 	bl	80042d8 <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d004      	beq.n	80090c6 <WiFi_Conn_ND+0x426>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c2:	2b0c      	cmp	r3, #12
 80090c4:	d103      	bne.n	80090ce <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	22d1      	movs	r2, #209	; 0xd1
 80090ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)||(b->_estado==at_wifi_disconnect)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d00f      	beq.n	80090f8 <WiFi_Conn_ND+0x458>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090de:	2b03      	cmp	r3, #3
 80090e0:	d00a      	beq.n	80090f8 <WiFi_Conn_ND+0x458>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090e8:	2b20      	cmp	r3, #32
 80090ea:	d005      	beq.n	80090f8 <WiFi_Conn_ND+0x458>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090f2:	2b0a      	cmp	r3, #10
 80090f4:	f041 829a 	bne.w	800a62c <WiFi_Conn_ND+0x198c>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	22cd      	movs	r2, #205	; 0xcd
 80090fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009100:	f001 ba94 	b.w	800a62c <WiFi_Conn_ND+0x198c>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 8009104:	f241 3088 	movw	r0, #5000	; 0x1388
 8009108:	f7f8 ff28 	bl	8001f5c <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	f7fc f99d 	bl	800544c <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	22c8      	movs	r2, #200	; 0xc8
 8009116:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009130:	2b04      	cmp	r3, #4
 8009132:	f041 827d 	bne.w	800a630 <WiFi_Conn_ND+0x1990>
					{
						Cambiar_CWMODE(b);
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f7fc f972 	bl	8005420 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2264      	movs	r2, #100	; 0x64
 8009140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2200      	movs	r2, #0
 8009148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009154:	f001 ba6c 	b.w	800a630 <WiFi_Conn_ND+0x1990>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2200      	movs	r2, #0
 800915c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8009166:	2b01      	cmp	r3, #1
 8009168:	d108      	bne.n	800917c <WiFi_Conn_ND+0x4dc>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f240 3229 	movw	r2, #809	; 0x329
 8009170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2200      	movs	r2, #0
 8009178:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009182:	2b0a      	cmp	r3, #10
 8009184:	d009      	beq.n	800919a <WiFi_Conn_ND+0x4fa>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800918c:	2b0d      	cmp	r3, #13
 800918e:	d004      	beq.n	800919a <WiFi_Conn_ND+0x4fa>
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009196:	2b03      	cmp	r3, #3
 8009198:	d10a      	bne.n	80091b0 <WiFi_Conn_ND+0x510>
				{
					ConectarWIFI(b);
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f7fc f956 	bl	800544c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	22c8      	movs	r2, #200	; 0xc8
 80091a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	d10e      	bne.n	80091d8 <WiFi_Conn_ND+0x538>
					{
						Cambiar_CWMODE(b);
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f7fc f930 	bl	8005420 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2264      	movs	r2, #100	; 0x64
 80091c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d011      	beq.n	8009206 <WiFi_Conn_ND+0x566>
				{//
					CrearServidorTCP(b);
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f7fc f9a0 	bl	8005528 <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f44f 7248 	mov.w	r2, #800	; 0x320
 80091ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 8009202:	f001 ba3e 	b.w	800a682 <WiFi_Conn_ND+0x19e2>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f7fc f936 	bl	8005478 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009212:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800921e:	f001 ba30 	b.w	800a682 <WiFi_Conn_ND+0x19e2>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009228:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800922c:	d03b      	beq.n	80092a6 <WiFi_Conn_ND+0x606>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009234:	2b04      	cmp	r3, #4
 8009236:	d036      	beq.n	80092a6 <WiFi_Conn_ND+0x606>
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800923e:	2b0a      	cmp	r3, #10
 8009240:	d031      	beq.n	80092a6 <WiFi_Conn_ND+0x606>
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009248:	2b0d      	cmp	r3, #13
 800924a:	d02c      	beq.n	80092a6 <WiFi_Conn_ND+0x606>
				{
						DesconectarWIFI(b);
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f7fc f93f 	bl	80054d0 <DesconectarWIFI>
						if(b->_enviaruart==1)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009258:	2b01      	cmp	r3, #1
 800925a:	d124      	bne.n	80092a6 <WiFi_Conn_ND+0x606>
							{
								b->_estado=AT_ESP8266_ND(b);
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f7fc fa75 	bl	800574c <AT_ESP8266_ND>
 8009262:	4602      	mov	r2, r0
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009278:	2b01      	cmp	r3, #1
 800927a:	d109      	bne.n	8009290 <WiFi_Conn_ND+0x5f0>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009288:	4619      	mov	r1, r3
 800928a:	4610      	mov	r0, r2
 800928c:	f7f7 ff60 	bl	8001150 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800929c:	b29a      	uxth	r2, r3
 800929e:	2364      	movs	r3, #100	; 0x64
 80092a0:	68b8      	ldr	r0, [r7, #8]
 80092a2:	f7fb f819 	bl	80042d8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092ac:	2b0a      	cmp	r3, #10
 80092ae:	d005      	beq.n	80092bc <WiFi_Conn_ND+0x61c>
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092b6:	2b0d      	cmp	r3, #13
 80092b8:	f041 81bc 	bne.w	800a634 <WiFi_Conn_ND+0x1994>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f240 1235 	movw	r2, #309	; 0x135
 80092c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 80092c6:	f001 b9b5 	b.w	800a634 <WiFi_Conn_ND+0x1994>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f7fc f892 	bl	80053f4 <NOP>
			}
			break;
 80092d0:	f001 b9d7 	b.w	800a682 <WiFi_Conn_ND+0x19e2>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

				ConectarWIFI(b);
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f7fc f8b5 	bl	800544c <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	22c8      	movs	r2, #200	; 0xc8
 80092e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092f8:	2b04      	cmp	r3, #4
 80092fa:	f041 819d 	bne.w	800a638 <WiFi_Conn_ND+0x1998>
					{
						Cambiar_CWMODE(b);
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f7fc f88e 	bl	8005420 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2264      	movs	r2, #100	; 0x64
 8009308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800931c:	f001 b98c 	b.w	800a638 <WiFi_Conn_ND+0x1998>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009326:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800932a:	d04f      	beq.n	80093cc <WiFi_Conn_ND+0x72c>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009332:	2b04      	cmp	r3, #4
 8009334:	d04a      	beq.n	80093cc <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_ok)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800933c:	2b01      	cmp	r3, #1
 800933e:	d045      	beq.n	80093cc <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_error)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009346:	2b02      	cmp	r3, #2
 8009348:	d040      	beq.n	80093cc <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_multiple_conn_ok)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009350:	2b07      	cmp	r3, #7
 8009352:	d03b      	beq.n	80093cc <WiFi_Conn_ND+0x72c>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800935a:	2b08      	cmp	r3, #8
 800935c:	d036      	beq.n	80093cc <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_multiple_conn_err)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009364:	2b1e      	cmp	r3, #30
 8009366:	d031      	beq.n	80093cc <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800936e:	2b1f      	cmp	r3, #31
 8009370:	d02c      	beq.n	80093cc <WiFi_Conn_ND+0x72c>
				{
						MUX(b);
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f7fc f880 	bl	8005478 <MUX>
						if(b->_enviaruart==1)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800937e:	2b01      	cmp	r3, #1
 8009380:	d124      	bne.n	80093cc <WiFi_Conn_ND+0x72c>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f7fc f9e2 	bl	800574c <AT_ESP8266_ND>
 8009388:	4602      	mov	r2, r0
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d109      	bne.n	80093b6 <WiFi_Conn_ND+0x716>
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 80093ae:	4619      	mov	r1, r3
 80093b0:	4610      	mov	r0, r2
 80093b2:	f7f7 fecd 	bl	8001150 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	2364      	movs	r3, #100	; 0x64
 80093c6:	68b8      	ldr	r0, [r7, #8]
 80093c8:	f7fa ff86 	bl	80042d8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d009      	beq.n	80093ea <WiFi_Conn_ND+0x74a>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093dc:	2b07      	cmp	r3, #7
 80093de:	d004      	beq.n	80093ea <WiFi_Conn_ND+0x74a>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093e6:	2b08      	cmp	r3, #8
 80093e8:	d104      	bne.n	80093f4 <WiFi_Conn_ND+0x754>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f240 1299 	movw	r2, #409	; 0x199
 80093f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err))
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d00a      	beq.n	8009414 <WiFi_Conn_ND+0x774>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009404:	2b1e      	cmp	r3, #30
 8009406:	d005      	beq.n	8009414 <WiFi_Conn_ND+0x774>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800940e:	2b1f      	cmp	r3, #31
 8009410:	f041 8114 	bne.w	800a63c <WiFi_Conn_ND+0x199c>
					{
					b->_estado_conexion=MUX_CONN_ERROR;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f240 1295 	movw	r2, #405	; 0x195
 800941a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				//----Condiciones de cambio de estado
			}
			break;
 800941e:	f001 b90d 	b.w	800a63c <WiFi_Conn_ND+0x199c>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f7fb ffe6 	bl	80053f4 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800942e:	2b04      	cmp	r3, #4
 8009430:	d112      	bne.n	8009458 <WiFi_Conn_ND+0x7b8>
				{
					Cambiar_CWMODE(b);
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f7fb fff4 	bl	8005420 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2264      	movs	r2, #100	; 0x64
 800943c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2200      	movs	r2, #0
 8009444:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800945e:	2b0a      	cmp	r3, #10
 8009460:	d00a      	beq.n	8009478 <WiFi_Conn_ND+0x7d8>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009468:	2b0d      	cmp	r3, #13
 800946a:	d005      	beq.n	8009478 <WiFi_Conn_ND+0x7d8>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009472:	2b03      	cmp	r3, #3
 8009474:	f041 80e4 	bne.w	800a640 <WiFi_Conn_ND+0x19a0>
				{
					ConectarWIFI(b);
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f7fb ffe7 	bl	800544c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	22c8      	movs	r2, #200	; 0xc8
 8009482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2200      	movs	r2, #0
 8009492:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 8009496:	f001 b8d3 	b.w	800a640 <WiFi_Conn_ND+0x19a0>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f7fb ffaa 	bl	80053f4 <NOP>
				b->_n_orig=0; //Borro el vector RX
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	d10e      	bne.n	80094d0 <WiFi_Conn_ND+0x830>
					{
						Cambiar_CWMODE(b);
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f7fb ffb4 	bl	8005420 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2264      	movs	r2, #100	; 0x64
 80094bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094d6:	2b0a      	cmp	r3, #10
 80094d8:	d009      	beq.n	80094ee <WiFi_Conn_ND+0x84e>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094e0:	2b0d      	cmp	r3, #13
 80094e2:	d004      	beq.n	80094ee <WiFi_Conn_ND+0x84e>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ea:	2b03      	cmp	r3, #3
 80094ec:	d10a      	bne.n	8009504 <WiFi_Conn_ND+0x864>
					{
						ConectarWIFI(b);
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f7fb ffac 	bl	800544c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	22c8      	movs	r2, #200	; 0xc8
 80094f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2200      	movs	r2, #0
 8009500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}
					if(b->_NO_IP==0)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f8d3 3d58 	ldr.w	r3, [r3, #3416]	; 0xd58
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10d      	bne.n	800952a <WiFi_Conn_ND+0x88a>
					{
						IPDef(b);
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f7fb ffc8 	bl	80054a4 <IPDef>
						b->_estado_conexion=DEF_IP_EN_CURSO;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800951a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_estado=0;
					}


			}
			break;
 8009526:	f001 b8ac 	b.w	800a682 <WiFi_Conn_ND+0x19e2>
						IPDef(b);
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f7fb ffba 	bl	80054a4 <IPDef>
						b->_estado_conexion=DEF_IP_OK;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8009542:	f001 b89e 	b.w	800a682 <WiFi_Conn_ND+0x19e2>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800954c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009550:	d045      	beq.n	80095de <WiFi_Conn_ND+0x93e>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009558:	2b04      	cmp	r3, #4
 800955a:	d040      	beq.n	80095de <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_ok)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009562:	2b01      	cmp	r3, #1
 8009564:	d03b      	beq.n	80095de <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_error)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800956c:	2b02      	cmp	r3, #2
 800956e:	d036      	beq.n	80095de <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_def_ip_ok)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009576:	2b1b      	cmp	r3, #27
 8009578:	d031      	beq.n	80095de <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009580:	2b21      	cmp	r3, #33	; 0x21
 8009582:	d02c      	beq.n	80095de <WiFi_Conn_ND+0x93e>
				{
						IPDef(b);
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f7fb ff8d 	bl	80054a4 <IPDef>
						if(b->_enviaruart==1)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009590:	2b01      	cmp	r3, #1
 8009592:	d124      	bne.n	80095de <WiFi_Conn_ND+0x93e>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f7fc f8d9 	bl	800574c <AT_ESP8266_ND>
 800959a:	4602      	mov	r2, r0
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d109      	bne.n	80095c8 <WiFi_Conn_ND+0x928>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 80095c0:	4619      	mov	r1, r3
 80095c2:	4610      	mov	r0, r2
 80095c4:	f7f7 fdc4 	bl	8001150 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	2364      	movs	r3, #100	; 0x64
 80095d8:	68b8      	ldr	r0, [r7, #8]
 80095da:	f7fa fe7d 	bl	80042d8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d004      	beq.n	80095f2 <WiFi_Conn_ND+0x952>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ee:	2b1b      	cmp	r3, #27
 80095f0:	d104      	bne.n	80095fc <WiFi_Conn_ND+0x95c>
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f240 12fd 	movw	r2, #509	; 0x1fd
 80095f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009602:	2b02      	cmp	r3, #2
 8009604:	d005      	beq.n	8009612 <WiFi_Conn_ND+0x972>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800960c:	2b21      	cmp	r3, #33	; 0x21
 800960e:	f041 8019 	bne.w	800a644 <WiFi_Conn_ND+0x19a4>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009618:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800961c:	f001 b812 	b.w	800a644 <WiFi_Conn_ND+0x19a4>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f7fb fee7 	bl	80053f4 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800962c:	2b04      	cmp	r3, #4
 800962e:	d004      	beq.n	800963a <WiFi_Conn_ND+0x99a>
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009636:	2b02      	cmp	r3, #2
 8009638:	d112      	bne.n	8009660 <WiFi_Conn_ND+0x9c0>
				{
					Cambiar_CWMODE(b);
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f7fb fef0 	bl	8005420 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2264      	movs	r2, #100	; 0x64
 8009644:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2200      	movs	r2, #0
 800964c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2200      	movs	r2, #0
 8009654:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009666:	2b0a      	cmp	r3, #10
 8009668:	d00a      	beq.n	8009680 <WiFi_Conn_ND+0x9e0>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009670:	2b0d      	cmp	r3, #13
 8009672:	d005      	beq.n	8009680 <WiFi_Conn_ND+0x9e0>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800967a:	2b03      	cmp	r3, #3
 800967c:	f040 87e4 	bne.w	800a648 <WiFi_Conn_ND+0x19a8>
				{
					ConectarWIFI(b);
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f7fb fee3 	bl	800544c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	22c8      	movs	r2, #200	; 0xc8
 800968a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 800969e:	f000 bfd3 	b.w	800a648 <WiFi_Conn_ND+0x19a8>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f7fb fea6 	bl	80053f4 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ae:	2b04      	cmp	r3, #4
 80096b0:	d112      	bne.n	80096d8 <WiFi_Conn_ND+0xa38>
					{
						Cambiar_CWMODE(b);
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f7fb feb4 	bl	8005420 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2264      	movs	r2, #100	; 0x64
 80096bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096de:	2b0a      	cmp	r3, #10
 80096e0:	d009      	beq.n	80096f6 <WiFi_Conn_ND+0xa56>
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096e8:	2b0d      	cmp	r3, #13
 80096ea:	d004      	beq.n	80096f6 <WiFi_Conn_ND+0xa56>
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096f2:	2b03      	cmp	r3, #3
 80096f4:	d10e      	bne.n	8009714 <WiFi_Conn_ND+0xa74>
					{
						ConectarWIFI(b);
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f7fb fea8 	bl	800544c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	22c8      	movs	r2, #200	; 0xc8
 8009700:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2200      	movs	r2, #0
 8009708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2200      	movs	r2, #0
 8009710:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800971a:	2b00      	cmp	r3, #0
 800971c:	d111      	bne.n	8009742 <WiFi_Conn_ND+0xaa2>
					{
						ConectarTCP(b);
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f7fb feec 	bl	80054fc <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f44f 7216 	mov.w	r2, #600	; 0x258
 800972a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2200      	movs	r2, #0
 8009732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2200      	movs	r2, #0
 800973a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
						b->_estado=0;//
						b->_n_orig=0;// //Borro el vector RX

					}
			}
			break;
 800973e:	f000 bfa0 	b.w	800a682 <WiFi_Conn_ND+0x19e2>
						ConectarWIFI(b);//
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f7fb fe82 	bl	800544c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	22c8      	movs	r2, #200	; 0xc8
 800974c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			break;
 8009760:	f000 bf8f 	b.w	800a682 <WiFi_Conn_ND+0x19e2>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800976a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800976e:	d04a      	beq.n	8009806 <WiFi_Conn_ND+0xb66>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009776:	2b02      	cmp	r3, #2
 8009778:	d045      	beq.n	8009806 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_ok)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009780:	2b01      	cmp	r3, #1
 8009782:	d040      	beq.n	8009806 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_wifi_disconnect)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800978a:	2b0a      	cmp	r3, #10
 800978c:	d03b      	beq.n	8009806 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009794:	2b0e      	cmp	r3, #14
 8009796:	d036      	beq.n	8009806 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_conectado)
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800979e:	2b0f      	cmp	r3, #15
 80097a0:	d031      	beq.n	8009806 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097a8:	2b10      	cmp	r3, #16
 80097aa:	d02c      	beq.n	8009806 <WiFi_Conn_ND+0xb66>
				{
					ConectarTCP(b);
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f7fb fea5 	bl	80054fc <ConectarTCP>
						if(b->_enviaruart==1)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d124      	bne.n	8009806 <WiFi_Conn_ND+0xb66>
							{
								b->_estado=AT_ESP8266_ND(b);
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f7fb ffc5 	bl	800574c <AT_ESP8266_ND>
 80097c2:	4602      	mov	r2, r0
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d109      	bne.n	80097f0 <WiFi_Conn_ND+0xb50>
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 80097e8:	4619      	mov	r1, r3
 80097ea:	4610      	mov	r0, r2
 80097ec:	f7f7 fcb0 	bl	8001150 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	2364      	movs	r3, #100	; 0x64
 8009800:	68b8      	ldr	r0, [r7, #8]
 8009802:	f7fa fd69 	bl	80042d8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800980c:	2b01      	cmp	r3, #1
 800980e:	d009      	beq.n	8009824 <WiFi_Conn_ND+0xb84>
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009816:	2b0e      	cmp	r3, #14
 8009818:	d004      	beq.n	8009824 <WiFi_Conn_ND+0xb84>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009820:	2b0f      	cmp	r3, #15
 8009822:	d106      	bne.n	8009832 <WiFi_Conn_ND+0xb92>
					{
					b->_estado_conexion=TCP_CONN_OK;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f240 2261 	movw	r2, #609	; 0x261
 800982a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800982e:	f000 bf0d 	b.w	800a64c <WiFi_Conn_ND+0x19ac>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009838:	2b02      	cmp	r3, #2
 800983a:	d005      	beq.n	8009848 <WiFi_Conn_ND+0xba8>
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009842:	2b10      	cmp	r3, #16
 8009844:	f040 8702 	bne.w	800a64c <WiFi_Conn_ND+0x19ac>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f240 225d 	movw	r2, #605	; 0x25d
 800984e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8009852:	f000 befb 	b.w	800a64c <WiFi_Conn_ND+0x19ac>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f7fb fdcc 	bl	80053f4 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009862:	2b04      	cmp	r3, #4
 8009864:	d112      	bne.n	800988c <WiFi_Conn_ND+0xbec>
				{
					Cambiar_CWMODE(b);
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f7fb fdda 	bl	8005420 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2264      	movs	r2, #100	; 0x64
 8009870:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2200      	movs	r2, #0
 8009878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2200      	movs	r2, #0
 8009880:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_tcp_noip_err)||(b->_estado==at_error)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009892:	2b0a      	cmp	r3, #10
 8009894:	d013      	beq.n	80098be <WiFi_Conn_ND+0xc1e>
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800989c:	2b0d      	cmp	r3, #13
 800989e:	d00e      	beq.n	80098be <WiFi_Conn_ND+0xc1e>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098a6:	2b22      	cmp	r3, #34	; 0x22
 80098a8:	d009      	beq.n	80098be <WiFi_Conn_ND+0xc1e>
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d004      	beq.n	80098be <WiFi_Conn_ND+0xc1e>
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ba:	2b03      	cmp	r3, #3
 80098bc:	d10e      	bne.n	80098dc <WiFi_Conn_ND+0xc3c>
				{
					ConectarWIFI(b);
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f7fb fdc4 	bl	800544c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	22c8      	movs	r2, #200	; 0xc8
 80098c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}

				if((b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098e2:	2b10      	cmp	r3, #16
 80098e4:	d005      	beq.n	80098f2 <WiFi_Conn_ND+0xc52>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ec:	2b0e      	cmp	r3, #14
 80098ee:	f040 86af 	bne.w	800a650 <WiFi_Conn_ND+0x19b0>
				{
					ConectarTCP(b);
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	f7fb fe02 	bl	80054fc <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f44f 7216 	mov.w	r2, #600	; 0x258
 80098fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 8009912:	f000 be9d 	b.w	800a650 <WiFi_Conn_ND+0x19b0>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	f7fb fd6c 	bl	80053f4 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009922:	2b04      	cmp	r3, #4
 8009924:	d112      	bne.n	800994c <WiFi_Conn_ND+0xcac>
					{
						Cambiar_CWMODE(b);
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f7fb fd7a 	bl	8005420 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2264      	movs	r2, #100	; 0x64
 8009930:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2200      	movs	r2, #0
 8009938:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2200      	movs	r2, #0
 8009940:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009952:	2b0a      	cmp	r3, #10
 8009954:	d009      	beq.n	800996a <WiFi_Conn_ND+0xcca>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800995c:	2b0d      	cmp	r3, #13
 800995e:	d004      	beq.n	800996a <WiFi_Conn_ND+0xcca>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009966:	2b03      	cmp	r3, #3
 8009968:	d10e      	bne.n	8009988 <WiFi_Conn_ND+0xce8>
					{
						ConectarWIFI(b);
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f7fb fd6e 	bl	800544c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	22c8      	movs	r2, #200	; 0xc8
 8009974:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2200      	movs	r2, #0
 800997c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2200      	movs	r2, #0
 8009984:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800998e:	2b02      	cmp	r3, #2
 8009990:	d004      	beq.n	800999c <WiFi_Conn_ND+0xcfc>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009998:	2b10      	cmp	r3, #16
 800999a:	d10f      	bne.n	80099bc <WiFi_Conn_ND+0xd1c>
					{
						ConectarTCP(b);
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f7fb fdad 	bl	80054fc <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80099a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099c2:	2b0e      	cmp	r3, #14
 80099c4:	d005      	beq.n	80099d2 <WiFi_Conn_ND+0xd32>
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099cc:	2b0f      	cmp	r3, #15
 80099ce:	f040 8641 	bne.w	800a654 <WiFi_Conn_ND+0x19b4>
					{
						if(b->_automatizacion >= WF_SEND )
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80099d8:	2b02      	cmp	r3, #2
 80099da:	f240 863b 	bls.w	800a654 <WiFi_Conn_ND+0x19b4>
						{
							EnviarDatos(b);
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f7fb fdce 	bl	8005580 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80099ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
						}
					}
			}
			break;
 80099fe:	f000 be29 	b.w	800a654 <WiFi_Conn_ND+0x19b4>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a08:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009a0c:	d054      	beq.n	8009ab8 <WiFi_Conn_ND+0xe18>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	d04f      	beq.n	8009ab8 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_wifi_disconnect)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a1e:	2b0a      	cmp	r3, #10
 8009a20:	d04a      	beq.n	8009ab8 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_desconectado)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a28:	2b10      	cmp	r3, #16
 8009a2a:	d045      	beq.n	8009ab8 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_snd_err)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a32:	2b11      	cmp	r3, #17
 8009a34:	d040      	beq.n	8009ab8 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_ok_to_send)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a3c:	2b14      	cmp	r3, #20
 8009a3e:	d03b      	beq.n	8009ab8 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a46:	2b12      	cmp	r3, #18
 8009a48:	d036      	beq.n	8009ab8 <WiFi_Conn_ND+0xe18>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d907      	bls.n	8009a64 <WiFi_Conn_ND+0xdc4>
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d002      	beq.n	8009a64 <WiFi_Conn_ND+0xdc4>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f7fb fd8e 	bl	8005580 <EnviarDatos>
					}
						if(b->_enviaruart==1)
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d124      	bne.n	8009ab8 <WiFi_Conn_ND+0xe18>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f7fb fe6c 	bl	800574c <AT_ESP8266_ND>
 8009a74:	4602      	mov	r2, r0
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d109      	bne.n	8009aa2 <WiFi_Conn_ND+0xe02>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	4610      	mov	r0, r2
 8009a9e:	f7f7 fb57 	bl	8001150 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	2364      	movs	r3, #100	; 0x64
 8009ab2:	68b8      	ldr	r0, [r7, #8]
 8009ab4:	f7fa fc10 	bl	80042d8 <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009abe:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009ac2:	d145      	bne.n	8009b50 <WiFi_Conn_ND+0xeb0>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d140      	bne.n	8009b50 <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_error)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d03b      	beq.n	8009b50 <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_tcp_noip_err)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ade:	2b22      	cmp	r3, #34	; 0x22
 8009ae0:	d036      	beq.n	8009b50 <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_wifi_disconnect)
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ae8:	2b0a      	cmp	r3, #10
 8009aea:	d031      	beq.n	8009b50 <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_tcp_desconectado)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009af2:	2b10      	cmp	r3, #16
 8009af4:	d02c      	beq.n	8009b50 <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_fail)		//240419
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009afc:	2b03      	cmp	r3, #3
 8009afe:	d027      	beq.n	8009b50 <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_tcp_snd_err)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b06:	2b11      	cmp	r3, #17
 8009b08:	d022      	beq.n	8009b50 <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_tcp_enviado_error))
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b10:	2b12      	cmp	r3, #18
 8009b12:	d01d      	beq.n	8009b50 <WiFi_Conn_ND+0xeb0>
							{
								b->_enviaruart=0;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d109      	bne.n	8009b3a <WiFi_Conn_ND+0xe9a>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009b32:	4619      	mov	r1, r3
 8009b34:	4610      	mov	r0, r2
 8009b36:	f7f7 fb0b 	bl	8001150 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	2364      	movs	r3, #100	; 0x64
 8009b4a:	68b8      	ldr	r0, [r7, #8]
 8009b4c:	f7fa fbc4 	bl	80042d8 <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b56:	2b13      	cmp	r3, #19
 8009b58:	d104      	bne.n	8009b64 <WiFi_Conn_ND+0xec4>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009b60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d01e      	beq.n	8009bac <WiFi_Conn_ND+0xf0c>
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b74:	2b0a      	cmp	r3, #10
 8009b76:	d019      	beq.n	8009bac <WiFi_Conn_ND+0xf0c>
										 ||(b->_estado==at_fail)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	d014      	beq.n	8009bac <WiFi_Conn_ND+0xf0c>
										 ||(b->_estado==at_tcp_noip_err)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b88:	2b22      	cmp	r3, #34	; 0x22
 8009b8a:	d00f      	beq.n	8009bac <WiFi_Conn_ND+0xf0c>
										 ||(b->_estado==at_tcp_desconectado)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b92:	2b10      	cmp	r3, #16
 8009b94:	d00a      	beq.n	8009bac <WiFi_Conn_ND+0xf0c>
										 ||(b->_estado==at_tcp_snd_err)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b9c:	2b11      	cmp	r3, #17
 8009b9e:	d005      	beq.n	8009bac <WiFi_Conn_ND+0xf0c>
										 ||(b->_estado==at_tcp_enviado_error))
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ba6:	2b12      	cmp	r3, #18
 8009ba8:	f040 8556 	bne.w	800a658 <WiFi_Conn_ND+0x19b8>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009bb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 8009bb6:	f000 bd4f 	b.w	800a658 <WiFi_Conn_ND+0x19b8>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f7fb fc1a 	bl	80053f4 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bc6:	2b04      	cmp	r3, #4
 8009bc8:	d112      	bne.n	8009bf0 <WiFi_Conn_ND+0xf50>
				{
					Cambiar_CWMODE(b);
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f7fb fc28 	bl	8005420 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2264      	movs	r2, #100	; 0x64
 8009bd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bf6:	2b0a      	cmp	r3, #10
 8009bf8:	d013      	beq.n	8009c22 <WiFi_Conn_ND+0xf82>
						||(b->_estado==at_deconectar_ok )
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c00:	2b0d      	cmp	r3, #13
 8009c02:	d00e      	beq.n	8009c22 <WiFi_Conn_ND+0xf82>
						||(b->_estado==at_fail)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c0a:	2b03      	cmp	r3, #3
 8009c0c:	d009      	beq.n	8009c22 <WiFi_Conn_ND+0xf82>
						||(b->_estado!=at_error)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	d104      	bne.n	8009c22 <WiFi_Conn_ND+0xf82>
						||(b->_estado!=at_tcp_noip_err)) //Si me desconecto, me vuelvo a conectar 240419
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c1e:	2b22      	cmp	r3, #34	; 0x22
 8009c20:	d00e      	beq.n	8009c40 <WiFi_Conn_ND+0xfa0>
				{
					ConectarWIFI(b);
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f7fb fc12 	bl	800544c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	22c8      	movs	r2, #200	; 0xc8
 8009c2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c46:	2b0c      	cmp	r3, #12
 8009c48:	d10f      	bne.n	8009c6a <WiFi_Conn_ND+0xfca>
				{
					ConectarTCP(b);
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f7fb fc56 	bl	80054fc <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009c56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	d00f      	beq.n	8009c94 <WiFi_Conn_ND+0xff4>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c7a:	2b10      	cmp	r3, #16
 8009c7c:	d00a      	beq.n	8009c94 <WiFi_Conn_ND+0xff4>
										 ||(b->_estado==at_tcp_snd_err)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c84:	2b11      	cmp	r3, #17
 8009c86:	d005      	beq.n	8009c94 <WiFi_Conn_ND+0xff4>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c8e:	2b12      	cmp	r3, #18
 8009c90:	f040 84e4 	bne.w	800a65c <WiFi_Conn_ND+0x19bc>
				{
					ConectarTCP(b);
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f7fb fc31 	bl	80054fc <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009ca0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 8009cb4:	f000 bcd2 	b.w	800a65c <WiFi_Conn_ND+0x19bc>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f7fb fb9b 	bl	80053f4 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cc4:	2b04      	cmp	r3, #4
 8009cc6:	d112      	bne.n	8009cee <WiFi_Conn_ND+0x104e>
					{
						Cambiar_CWMODE(b);
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f7fb fba9 	bl	8005420 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2264      	movs	r2, #100	; 0x64
 8009cd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cf4:	2b0a      	cmp	r3, #10
 8009cf6:	d009      	beq.n	8009d0c <WiFi_Conn_ND+0x106c>
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cfe:	2b0d      	cmp	r3, #13
 8009d00:	d004      	beq.n	8009d0c <WiFi_Conn_ND+0x106c>
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d08:	2b03      	cmp	r3, #3
 8009d0a:	d10e      	bne.n	8009d2a <WiFi_Conn_ND+0x108a>
					{
						ConectarWIFI(b);
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f7fb fb9d 	bl	800544c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	22c8      	movs	r2, #200	; 0xc8
 8009d16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	d00e      	beq.n	8009d52 <WiFi_Conn_ND+0x10b2>
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d3a:	2b0b      	cmp	r3, #11
 8009d3c:	d009      	beq.n	8009d52 <WiFi_Conn_ND+0x10b2>
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d44:	2b0c      	cmp	r3, #12
 8009d46:	d004      	beq.n	8009d52 <WiFi_Conn_ND+0x10b2>
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d4e:	2b10      	cmp	r3, #16
 8009d50:	d10f      	bne.n	8009d72 <WiFi_Conn_ND+0x10d2>
					{
						ConectarTCP(b);
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	f7fb fbd2 	bl	80054fc <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009d5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2200      	movs	r2, #0
 8009d66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 8009d72:	20c8      	movs	r0, #200	; 0xc8
 8009d74:	f7f8 f8f2 	bl	8001f5c <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d916      	bls.n	8009db0 <WiFi_Conn_ND+0x1110>
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d011      	beq.n	8009db0 <WiFi_Conn_ND+0x1110>
					{
							EnviarDatos(b);
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f7fb fbf7 	bl	8005580 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8009d98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 8009dac:	f000 bc69 	b.w	800a682 <WiFi_Conn_ND+0x19e2>
							b->_estado_conexion=TCP_CONN_OK;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f240 2261 	movw	r2, #609	; 0x261
 8009db6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			break;
 8009dca:	f000 bc5a 	b.w	800a682 <WiFi_Conn_ND+0x19e2>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dd4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009dd8:	d045      	beq.n	8009e66 <WiFi_Conn_ND+0x11c6>
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	d040      	beq.n	8009e66 <WiFi_Conn_ND+0x11c6>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dea:	2b0a      	cmp	r3, #10
 8009dec:	d03b      	beq.n	8009e66 <WiFi_Conn_ND+0x11c6>
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009df4:	2b15      	cmp	r3, #21
 8009df6:	d036      	beq.n	8009e66 <WiFi_Conn_ND+0x11c6>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dfe:	2b16      	cmp	r3, #22
 8009e00:	d031      	beq.n	8009e66 <WiFi_Conn_ND+0x11c6>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e08:	2b17      	cmp	r3, #23
 8009e0a:	d02c      	beq.n	8009e66 <WiFi_Conn_ND+0x11c6>
							{
								CrearServidorTCP(b);
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f7fb fb8b 	bl	8005528 <CrearServidorTCP>
									if(b->_enviaruart==1)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d124      	bne.n	8009e66 <WiFi_Conn_ND+0x11c6>
										{
											b->_estado=AT_ESP8266_ND(b);
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f7fb fc95 	bl	800574c <AT_ESP8266_ND>
 8009e22:	4602      	mov	r2, r0
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d109      	bne.n	8009e50 <WiFi_Conn_ND+0x11b0>
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009e48:	4619      	mov	r1, r3
 8009e4a:	4610      	mov	r0, r2
 8009e4c:	f7f7 f980 	bl	8001150 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009e5c:	b29a      	uxth	r2, r3
 8009e5e:	2364      	movs	r3, #100	; 0x64
 8009e60:	68b8      	ldr	r0, [r7, #8]
 8009e62:	f7fa fa39 	bl	80042d8 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e6c:	2b15      	cmp	r3, #21
 8009e6e:	d004      	beq.n	8009e7a <WiFi_Conn_ND+0x11da>
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e76:	2b17      	cmp	r3, #23
 8009e78:	d104      	bne.n	8009e84 <WiFi_Conn_ND+0x11e4>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f240 3229 	movw	r2, #809	; 0x329
 8009e80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e8a:	2b16      	cmp	r3, #22
 8009e8c:	f040 83e8 	bne.w	800a660 <WiFi_Conn_ND+0x19c0>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f240 3225 	movw	r2, #805	; 0x325
 8009e96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 8009e9a:	e3e1      	b.n	800a660 <WiFi_Conn_ND+0x19c0>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f7fb faa9 	bl	80053f4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ea8:	2b04      	cmp	r3, #4
 8009eaa:	d112      	bne.n	8009ed2 <WiFi_Conn_ND+0x1232>
							{
								Cambiar_CWMODE(b);
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f7fb fab7 	bl	8005420 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2264      	movs	r2, #100	; 0x64
 8009eb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ed8:	2b0a      	cmp	r3, #10
 8009eda:	d009      	beq.n	8009ef0 <WiFi_Conn_ND+0x1250>
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ee2:	2b0d      	cmp	r3, #13
 8009ee4:	d004      	beq.n	8009ef0 <WiFi_Conn_ND+0x1250>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eec:	2b03      	cmp	r3, #3
 8009eee:	d10e      	bne.n	8009f0e <WiFi_Conn_ND+0x126e>
							{
								ConectarWIFI(b);
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f7fb faab 	bl	800544c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	22c8      	movs	r2, #200	; 0xc8
 8009efa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	d005      	beq.n	8009f24 <WiFi_Conn_ND+0x1284>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f1e:	2b10      	cmp	r3, #16
 8009f20:	f040 83a0 	bne.w	800a664 <WiFi_Conn_ND+0x19c4>
							{
								ConectarTCP(b);
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f7fb fae9 	bl	80054fc <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009f30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 8009f44:	e38e      	b.n	800a664 <WiFi_Conn_ND+0x19c4>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f7fb fa54 	bl	80053f4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f52:	2b04      	cmp	r3, #4
 8009f54:	d112      	bne.n	8009f7c <WiFi_Conn_ND+0x12dc>
							{
								Cambiar_CWMODE(b);
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f7fb fa62 	bl	8005420 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2264      	movs	r2, #100	; 0x64
 8009f60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f82:	2b0a      	cmp	r3, #10
 8009f84:	d009      	beq.n	8009f9a <WiFi_Conn_ND+0x12fa>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f8c:	2b0d      	cmp	r3, #13
 8009f8e:	d004      	beq.n	8009f9a <WiFi_Conn_ND+0x12fa>
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f96:	2b03      	cmp	r3, #3
 8009f98:	d10e      	bne.n	8009fb8 <WiFi_Conn_ND+0x1318>
							{
								ConectarWIFI(b);
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f7fb fa56 	bl	800544c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	22c8      	movs	r2, #200	; 0xc8
 8009fa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d005      	beq.n	8009fce <WiFi_Conn_ND+0x132e>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fc8:	2b10      	cmp	r3, #16
 8009fca:	f040 834d 	bne.w	800a668 <WiFi_Conn_ND+0x19c8>
							{
								ConectarTCP(b);
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f7fb fa94 	bl	80054fc <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009fda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}
						}
						break;
 8009fee:	e33b      	b.n	800a668 <WiFi_Conn_ND+0x19c8>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f7fb f9ff 	bl	80053f4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ffc:	2b04      	cmp	r3, #4
 8009ffe:	d112      	bne.n	800a026 <WiFi_Conn_ND+0x1386>
							{
								Cambiar_CWMODE(b);
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f7fb fa0d 	bl	8005420 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2264      	movs	r2, #100	; 0x64
 800a00a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2200      	movs	r2, #0
 800a012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a02c:	2b0a      	cmp	r3, #10
 800a02e:	d009      	beq.n	800a044 <WiFi_Conn_ND+0x13a4>
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a036:	2b0d      	cmp	r3, #13
 800a038:	d004      	beq.n	800a044 <WiFi_Conn_ND+0x13a4>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a040:	2b03      	cmp	r3, #3
 800a042:	d10e      	bne.n	800a062 <WiFi_Conn_ND+0x13c2>
							{
								ConectarWIFI(b);
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f7fb fa01 	bl	800544c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	22c8      	movs	r2, #200	; 0xc8
 800a04e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a068:	2b02      	cmp	r3, #2
 800a06a:	d005      	beq.n	800a078 <WiFi_Conn_ND+0x13d8>
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a072:	2b10      	cmp	r3, #16
 800a074:	f040 82fa 	bne.w	800a66c <WiFi_Conn_ND+0x19cc>
							{
								ConectarTCP(b);
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f7fb fa3f 	bl	80054fc <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a084:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2200      	movs	r2, #0
 800a094:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}
						}
						break;
 800a098:	e2e8      	b.n	800a66c <WiFi_Conn_ND+0x19cc>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f7fb f9aa 	bl	80053f4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0a6:	2b04      	cmp	r3, #4
 800a0a8:	d112      	bne.n	800a0d0 <WiFi_Conn_ND+0x1430>
							{
								Cambiar_CWMODE(b);
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	f7fb f9b8 	bl	8005420 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2264      	movs	r2, #100	; 0x64
 800a0b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0d6:	2b0a      	cmp	r3, #10
 800a0d8:	d009      	beq.n	800a0ee <WiFi_Conn_ND+0x144e>
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e0:	2b0d      	cmp	r3, #13
 800a0e2:	d004      	beq.n	800a0ee <WiFi_Conn_ND+0x144e>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ea:	2b03      	cmp	r3, #3
 800a0ec:	d10e      	bne.n	800a10c <WiFi_Conn_ND+0x146c>
							{
								ConectarWIFI(b);
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f7fb f9ac 	bl	800544c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	22c8      	movs	r2, #200	; 0xc8
 800a0f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a112:	2b02      	cmp	r3, #2
 800a114:	d005      	beq.n	800a122 <WiFi_Conn_ND+0x1482>
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a11c:	2b10      	cmp	r3, #16
 800a11e:	f040 82a7 	bne.w	800a670 <WiFi_Conn_ND+0x19d0>
							{
								ConectarTCP(b);
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f7fb f9ea 	bl	80054fc <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a12e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2200      	movs	r2, #0
 800a13e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}
						}
						break;
 800a142:	e295      	b.n	800a670 <WiFi_Conn_ND+0x19d0>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f7fb f955 	bl	80053f4 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a158:	2b04      	cmp	r3, #4
 800a15a:	d112      	bne.n	800a182 <WiFi_Conn_ND+0x14e2>
								{
									Cambiar_CWMODE(b);
 800a15c:	68f8      	ldr	r0, [r7, #12]
 800a15e:	f7fb f95f 	bl	8005420 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2264      	movs	r2, #100	; 0x64
 800a166:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2200      	movs	r2, #0
 800a17e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a188:	2b0a      	cmp	r3, #10
 800a18a:	d009      	beq.n	800a1a0 <WiFi_Conn_ND+0x1500>
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a192:	2b0d      	cmp	r3, #13
 800a194:	d004      	beq.n	800a1a0 <WiFi_Conn_ND+0x1500>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a19c:	2b03      	cmp	r3, #3
 800a19e:	d10e      	bne.n	800a1be <WiFi_Conn_ND+0x151e>
								{
									ConectarWIFI(b);
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f7fb f953 	bl	800544c <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	22c8      	movs	r2, #200	; 0xc8
 800a1aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d004      	beq.n	800a1d2 <WiFi_Conn_ND+0x1532>
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ce:	2b10      	cmp	r3, #16
 800a1d0:	d10f      	bne.n	800a1f2 <WiFi_Conn_ND+0x1552>
								{
									ConectarTCP(b);
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f7fb f992 	bl	80054fc <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a1de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	f040 823b 	bne.w	800a674 <WiFi_Conn_ND+0x19d4>
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800a204:	2b00      	cmp	r3, #0
 800a206:	f000 8235 	beq.w	800a674 <WiFi_Conn_ND+0x19d4>
								{
									EnviarDatosSRVR(b);
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f7fb f9a2 	bl	8005554 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f44f 7261 	mov.w	r2, #900	; 0x384
 800a216:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800a22a:	e223      	b.n	800a674 <WiFi_Conn_ND+0x19d4>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a232:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800a236:	d063      	beq.n	800a300 <WiFi_Conn_ND+0x1660>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a23e:	2b02      	cmp	r3, #2
 800a240:	d05e      	beq.n	800a300 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_wifi_disconnect)&&
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800a248:	2b0a      	cmp	r3, #10
 800a24a:	d059      	beq.n	800a300 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_wifi_connected)&&
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800a252:	2b0b      	cmp	r3, #11
 800a254:	d054      	beq.n	800a300 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_wifi_gotip)&&
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800a25c:	2b0c      	cmp	r3, #12
 800a25e:	d04f      	beq.n	800a300 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_tcp_desconectado)&&
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800a266:	2b10      	cmp	r3, #16
 800a268:	d04a      	beq.n	800a300 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_tcp_snd_err)&&
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800a270:	2b11      	cmp	r3, #17
 800a272:	d045      	beq.n	800a300 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_tcp_enviado_error)&&
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800a27a:	2b12      	cmp	r3, #18
 800a27c:	d040      	beq.n	800a300 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800a284:	2b13      	cmp	r3, #19
 800a286:	d03b      	beq.n	800a300 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800a28e:	2b16      	cmp	r3, #22
 800a290:	d036      	beq.n	800a300 <WiFi_Conn_ND+0x1660>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a298:	2b19      	cmp	r3, #25
 800a29a:	d031      	beq.n	800a300 <WiFi_Conn_ND+0x1660>
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d02c      	beq.n	800a300 <WiFi_Conn_ND+0x1660>
								{
								EnviarDatosSRVR(b);
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f7fb f954 	bl	8005554 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d124      	bne.n	800a300 <WiFi_Conn_ND+0x1660>
										{
											b->_estado=AT_ESP8266_ND(b);
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f7fb fa48 	bl	800574c <AT_ESP8266_ND>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d109      	bne.n	800a2ea <WiFi_Conn_ND+0x164a>
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	4610      	mov	r0, r2
 800a2e6:	f7f6 ff33 	bl	8001150 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	2364      	movs	r3, #100	; 0x64
 800a2fa:	68b8      	ldr	r0, [r7, #8]
 800a2fc:	f7f9 ffec 	bl	80042d8 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a306:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800a30a:	d154      	bne.n	800a3b6 <WiFi_Conn_ND+0x1716>
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a312:	2b01      	cmp	r3, #1
 800a314:	d14f      	bne.n	800a3b6 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_error)&&
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800a31c:	2b02      	cmp	r3, #2
 800a31e:	d04a      	beq.n	800a3b6 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_wifi_disconnect)&&
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800a326:	2b0a      	cmp	r3, #10
 800a328:	d045      	beq.n	800a3b6 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_wifi_connected)&&
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800a330:	2b0b      	cmp	r3, #11
 800a332:	d040      	beq.n	800a3b6 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_wifi_gotip)&&
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800a33a:	2b0c      	cmp	r3, #12
 800a33c:	d03b      	beq.n	800a3b6 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_tcp_desconectado)&&
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800a344:	2b10      	cmp	r3, #16
 800a346:	d036      	beq.n	800a3b6 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_tcp_snd_err)&&
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800a34e:	2b11      	cmp	r3, #17
 800a350:	d031      	beq.n	800a3b6 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_tcp_enviado_error)&&
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800a358:	2b12      	cmp	r3, #18
 800a35a:	d02c      	beq.n	800a3b6 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800a362:	2b13      	cmp	r3, #19
 800a364:	d027      	beq.n	800a3b6 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800a36c:	2b16      	cmp	r3, #22
 800a36e:	d022      	beq.n	800a3b6 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a376:	2b19      	cmp	r3, #25
 800a378:	d01d      	beq.n	800a3b6 <WiFi_Conn_ND+0x1716>
										{
											b->_enviaruart=0;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2200      	movs	r2, #0
 800a37e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d109      	bne.n	800a3a0 <WiFi_Conn_ND+0x1700>
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a398:	4619      	mov	r1, r3
 800a39a:	4610      	mov	r0, r2
 800a39c:	f7f6 fed8 	bl	8001150 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	2364      	movs	r3, #100	; 0x64
 800a3b0:	68b8      	ldr	r0, [r7, #8]
 800a3b2:	f7f9 ff91 	bl	80042d8 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3bc:	2b13      	cmp	r3, #19
 800a3be:	d104      	bne.n	800a3ca <WiFi_Conn_ND+0x172a>
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f240 328d 	movw	r2, #909	; 0x38d
 800a3c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d02d      	beq.n	800a430 <WiFi_Conn_ND+0x1790>
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3da:	2b04      	cmp	r3, #4
 800a3dc:	d028      	beq.n	800a430 <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800a3e4:	2b0a      	cmp	r3, #10
 800a3e6:	d023      	beq.n	800a430 <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ee:	2b0b      	cmp	r3, #11
 800a3f0:	d01e      	beq.n	800a430 <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800a3f8:	2b0c      	cmp	r3, #12
 800a3fa:	d019      	beq.n	800a430 <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a402:	2b10      	cmp	r3, #16
 800a404:	d014      	beq.n	800a430 <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800a40c:	2b11      	cmp	r3, #17
 800a40e:	d00f      	beq.n	800a430 <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a416:	2b12      	cmp	r3, #18
 800a418:	d00a      	beq.n	800a430 <WiFi_Conn_ND+0x1790>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800a420:	2b16      	cmp	r3, #22
 800a422:	d005      	beq.n	800a430 <WiFi_Conn_ND+0x1790>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a42a:	2b19      	cmp	r3, #25
 800a42c:	f040 8124 	bne.w	800a678 <WiFi_Conn_ND+0x19d8>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f240 3289 	movw	r2, #905	; 0x389
 800a436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800a43a:	e11d      	b.n	800a678 <WiFi_Conn_ND+0x19d8>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f7fa ffd9 	bl	80053f4 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a448:	2b04      	cmp	r3, #4
 800a44a:	d009      	beq.n	800a460 <WiFi_Conn_ND+0x17c0>
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a452:	2b0b      	cmp	r3, #11
 800a454:	d004      	beq.n	800a460 <WiFi_Conn_ND+0x17c0>
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a45c:	2b0c      	cmp	r3, #12
 800a45e:	d112      	bne.n	800a486 <WiFi_Conn_ND+0x17e6>
							{
								Cambiar_CWMODE(b);
 800a460:	68f8      	ldr	r0, [r7, #12]
 800a462:	f7fa ffdd 	bl	8005420 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2264      	movs	r2, #100	; 0x64
 800a46a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2200      	movs	r2, #0
 800a472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a48c:	2b0a      	cmp	r3, #10
 800a48e:	d009      	beq.n	800a4a4 <WiFi_Conn_ND+0x1804>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a496:	2b0d      	cmp	r3, #13
 800a498:	d004      	beq.n	800a4a4 <WiFi_Conn_ND+0x1804>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4a0:	2b03      	cmp	r3, #3
 800a4a2:	d10e      	bne.n	800a4c2 <WiFi_Conn_ND+0x1822>
							{
								ConectarWIFI(b);
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f7fa ffd1 	bl	800544c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	22c8      	movs	r2, #200	; 0xc8
 800a4ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4c8:	2b16      	cmp	r3, #22
 800a4ca:	d10c      	bne.n	800a4e6 <WiFi_Conn_ND+0x1846>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f240 3225 	movw	r2, #805	; 0x325
 800a4d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ec:	2b18      	cmp	r3, #24
 800a4ee:	d10c      	bne.n	800a50a <WiFi_Conn_ND+0x186a>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f240 3229 	movw	r2, #809	; 0x329
 800a4f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a510:	2b19      	cmp	r3, #25
 800a512:	d008      	beq.n	800a526 <WiFi_Conn_ND+0x1886>
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a51a:	2b11      	cmp	r3, #17
 800a51c:	d003      	beq.n	800a526 <WiFi_Conn_ND+0x1886>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2212      	movs	r2, #18
 800a522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	f040 80a5 	bne.w	800a67c <WiFi_Conn_ND+0x19dc>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f44f 7261 	mov.w	r2, #900	; 0x384
 800a538:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2200      	movs	r2, #0
 800a540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

							}


						}
						break;
 800a54c:	e096      	b.n	800a67c <WiFi_Conn_ND+0x19dc>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f7fa ff50 	bl	80053f4 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a55a:	2b04      	cmp	r3, #4
 800a55c:	d009      	beq.n	800a572 <WiFi_Conn_ND+0x18d2>
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a564:	2b0b      	cmp	r3, #11
 800a566:	d004      	beq.n	800a572 <WiFi_Conn_ND+0x18d2>
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a56e:	2b0c      	cmp	r3, #12
 800a570:	d112      	bne.n	800a598 <WiFi_Conn_ND+0x18f8>
								{
									Cambiar_CWMODE(b);
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f7fa ff54 	bl	8005420 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2264      	movs	r2, #100	; 0x64
 800a57c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2200      	movs	r2, #0
 800a584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a59e:	2b0a      	cmp	r3, #10
 800a5a0:	d009      	beq.n	800a5b6 <WiFi_Conn_ND+0x1916>
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5a8:	2b0d      	cmp	r3, #13
 800a5aa:	d004      	beq.n	800a5b6 <WiFi_Conn_ND+0x1916>
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5b2:	2b03      	cmp	r3, #3
 800a5b4:	d10e      	bne.n	800a5d4 <WiFi_Conn_ND+0x1934>
								{
									ConectarWIFI(b);
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f7fa ff48 	bl	800544c <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	22c8      	movs	r2, #200	; 0xc8
 800a5c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d004      	beq.n	800a5e8 <WiFi_Conn_ND+0x1948>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d14b      	bne.n	800a680 <WiFi_Conn_ND+0x19e0>
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d046      	beq.n	800a680 <WiFi_Conn_ND+0x19e0>
								{
									EnviarDatosSRVR(b);
 800a5f2:	68f8      	ldr	r0, [r7, #12]
 800a5f4:	f7fa ffae 	bl	8005554 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f44f 7261 	mov.w	r2, #900	; 0x384
 800a5fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2200      	movs	r2, #0
 800a606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
									b->_new_data_rcv=0;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2200      	movs	r2, #0
 800a616:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
									b->_send_data=0;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
								}

						}
						break;
 800a622:	e02d      	b.n	800a680 <WiFi_Conn_ND+0x19e0>
			break;
 800a624:	bf00      	nop
 800a626:	e02c      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
			break;
 800a628:	bf00      	nop
 800a62a:	e02a      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
			break;
 800a62c:	bf00      	nop
 800a62e:	e028      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
			break;
 800a630:	bf00      	nop
 800a632:	e026      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
			break;
 800a634:	bf00      	nop
 800a636:	e024      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
			break;
 800a638:	bf00      	nop
 800a63a:	e022      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
			break;
 800a63c:	bf00      	nop
 800a63e:	e020      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
			break;
 800a640:	bf00      	nop
 800a642:	e01e      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
			break;
 800a644:	bf00      	nop
 800a646:	e01c      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
			break;
 800a648:	bf00      	nop
 800a64a:	e01a      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
			break;
 800a64c:	bf00      	nop
 800a64e:	e018      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
			break;
 800a650:	bf00      	nop
 800a652:	e016      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
			break;
 800a654:	bf00      	nop
 800a656:	e014      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
			break;
 800a658:	bf00      	nop
 800a65a:	e012      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
			break;
 800a65c:	bf00      	nop
 800a65e:	e010      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
						break;
 800a660:	bf00      	nop
 800a662:	e00e      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
						break;
 800a664:	bf00      	nop
 800a666:	e00c      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
						break;
 800a668:	bf00      	nop
 800a66a:	e00a      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
						break;
 800a66c:	bf00      	nop
 800a66e:	e008      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
						break;
 800a670:	bf00      	nop
 800a672:	e006      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
						break;
 800a674:	bf00      	nop
 800a676:	e004      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
						break;
 800a678:	bf00      	nop
 800a67a:	e002      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
						break;
 800a67c:	bf00      	nop
 800a67e:	e000      	b.n	800a682 <WiFi_Conn_ND+0x19e2>
						break;
 800a680:	bf00      	nop

		}
		return(b->_estado_conexion);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800a688:	4618      	mov	r0, r3
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <httpPOST2>:
			return 0;
		}
}

httpPOST2(char * endpoint, char* server_ip, char * port,  uint16_t * vect_data, uint8_t * decimal,int cdad, uint16_t devId, char  * post, char * body, int max_char)
{
 800a690:	b5b0      	push	{r4, r5, r7, lr}
 800a692:	b08c      	sub	sp, #48	; 0x30
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
 800a69c:	603b      	str	r3, [r7, #0]
	post[0]='\0';
 800a69e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800a6a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800a6aa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a6ac:	f7f5 fda2 	bl	80001f4 <strlen>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6b6:	4413      	add	r3, r2
 800a6b8:	4a9d      	ldr	r2, [pc, #628]	; (800a930 <httpPOST2+0x2a0>)
 800a6ba:	6810      	ldr	r0, [r2, #0]
 800a6bc:	6018      	str	r0, [r3, #0]
 800a6be:	8892      	ldrh	r2, [r2, #4]
 800a6c0:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f7f5 fd96 	bl	80001f4 <strlen>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	68f9      	ldr	r1, [r7, #12]
 800a6ce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a6d0:	f001 fdbd 	bl	800c24e <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800a6d4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a6d6:	f7f5 fd8d 	bl	80001f4 <strlen>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	461a      	mov	r2, r3
 800a6de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6e0:	4413      	add	r3, r2
 800a6e2:	4994      	ldr	r1, [pc, #592]	; (800a934 <httpPOST2+0x2a4>)
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	cb03      	ldmia	r3!, {r0, r1}
 800a6ea:	6010      	str	r0, [r2, #0]
 800a6ec:	6051      	str	r1, [r2, #4]
 800a6ee:	8819      	ldrh	r1, [r3, #0]
 800a6f0:	789b      	ldrb	r3, [r3, #2]
 800a6f2:	8111      	strh	r1, [r2, #8]
 800a6f4:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800a6f6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a6f8:	f7f5 fd7c 	bl	80001f4 <strlen>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	461a      	mov	r2, r3
 800a700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a702:	4413      	add	r3, r2
 800a704:	4a8c      	ldr	r2, [pc, #560]	; (800a938 <httpPOST2+0x2a8>)
 800a706:	8811      	ldrh	r1, [r2, #0]
 800a708:	7892      	ldrb	r2, [r2, #2]
 800a70a:	8019      	strh	r1, [r3, #0]
 800a70c:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800a70e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a710:	f7f5 fd70 	bl	80001f4 <strlen>
 800a714:	4603      	mov	r3, r0
 800a716:	461a      	mov	r2, r3
 800a718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a71a:	4413      	add	r3, r2
 800a71c:	4a87      	ldr	r2, [pc, #540]	; (800a93c <httpPOST2+0x2ac>)
 800a71e:	6810      	ldr	r0, [r2, #0]
 800a720:	6018      	str	r0, [r3, #0]
 800a722:	8891      	ldrh	r1, [r2, #4]
 800a724:	7992      	ldrb	r2, [r2, #6]
 800a726:	8099      	strh	r1, [r3, #4]
 800a728:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800a72a:	68b8      	ldr	r0, [r7, #8]
 800a72c:	f7f5 fd62 	bl	80001f4 <strlen>
 800a730:	4603      	mov	r3, r0
 800a732:	461a      	mov	r2, r3
 800a734:	68b9      	ldr	r1, [r7, #8]
 800a736:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a738:	f001 fd89 	bl	800c24e <strncat>
	strncat(post,":",1);
 800a73c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a73e:	f7f5 fd59 	bl	80001f4 <strlen>
 800a742:	4603      	mov	r3, r0
 800a744:	461a      	mov	r2, r3
 800a746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a748:	4413      	add	r3, r2
 800a74a:	497d      	ldr	r1, [pc, #500]	; (800a940 <httpPOST2+0x2b0>)
 800a74c:	461a      	mov	r2, r3
 800a74e:	460b      	mov	r3, r1
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f7f5 fd4d 	bl	80001f4 <strlen>
 800a75a:	4603      	mov	r3, r0
 800a75c:	461a      	mov	r2, r3
 800a75e:	6879      	ldr	r1, [r7, #4]
 800a760:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a762:	f001 fd74 	bl	800c24e <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800a766:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a768:	f7f5 fd44 	bl	80001f4 <strlen>
 800a76c:	4603      	mov	r3, r0
 800a76e:	461a      	mov	r2, r3
 800a770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a772:	4413      	add	r3, r2
 800a774:	4a70      	ldr	r2, [pc, #448]	; (800a938 <httpPOST2+0x2a8>)
 800a776:	8811      	ldrh	r1, [r2, #0]
 800a778:	7892      	ldrb	r2, [r2, #2]
 800a77a:	8019      	strh	r1, [r3, #0]
 800a77c:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800a77e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a780:	f7f5 fd38 	bl	80001f4 <strlen>
 800a784:	4603      	mov	r3, r0
 800a786:	461a      	mov	r2, r3
 800a788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a78a:	4413      	add	r3, r2
 800a78c:	4a6d      	ldr	r2, [pc, #436]	; (800a944 <httpPOST2+0x2b4>)
 800a78e:	461d      	mov	r5, r3
 800a790:	4614      	mov	r4, r2
 800a792:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a794:	6028      	str	r0, [r5, #0]
 800a796:	6069      	str	r1, [r5, #4]
 800a798:	60aa      	str	r2, [r5, #8]
 800a79a:	60eb      	str	r3, [r5, #12]
 800a79c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800a79e:	6128      	str	r0, [r5, #16]
 800a7a0:	6169      	str	r1, [r5, #20]
 800a7a2:	61aa      	str	r2, [r5, #24]
 800a7a4:	8823      	ldrh	r3, [r4, #0]
 800a7a6:	78a2      	ldrb	r2, [r4, #2]
 800a7a8:	83ab      	strh	r3, [r5, #28]
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800a7ae:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a7b0:	f7f5 fd20 	bl	80001f4 <strlen>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7ba:	4413      	add	r3, r2
 800a7bc:	4a5e      	ldr	r2, [pc, #376]	; (800a938 <httpPOST2+0x2a8>)
 800a7be:	8811      	ldrh	r1, [r2, #0]
 800a7c0:	7892      	ldrb	r2, [r2, #2]
 800a7c2:	8019      	strh	r1, [r3, #0]
 800a7c4:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800a7c6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a7c8:	f7f5 fd14 	bl	80001f4 <strlen>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7d2:	4413      	add	r3, r2
 800a7d4:	4a5c      	ldr	r2, [pc, #368]	; (800a948 <httpPOST2+0x2b8>)
 800a7d6:	461c      	mov	r4, r3
 800a7d8:	4615      	mov	r5, r2
 800a7da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7dc:	6020      	str	r0, [r4, #0]
 800a7de:	6061      	str	r1, [r4, #4]
 800a7e0:	60a2      	str	r2, [r4, #8]
 800a7e2:	60e3      	str	r3, [r4, #12]

	char _devId[8];
	_devId[0]='\0';
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	INTOA(devId, _devId);
 800a7ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a7ee:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a7f2:	4611      	mov	r1, r2
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f001 fa2d 	bl	800bc54 <INTOA>
	char d[8];
	d[0]='\0';
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	773b      	strb	r3, [r7, #28]
	for (int i=0; i < cdad;i++)
 800a7fe:	2300      	movs	r3, #0
 800a800:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a802:	e037      	b.n	800a874 <httpPOST2+0x1e4>
	{
		FTOA(vect_data[i],d,decimal[i]);
 800a804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a806:	005b      	lsls	r3, r3, #1
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	4413      	add	r3, r2
 800a80c:	881b      	ldrh	r3, [r3, #0]
 800a80e:	4618      	mov	r0, r3
 800a810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a812:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a814:	4413      	add	r3, r2
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	461a      	mov	r2, r3
 800a81a:	f107 031c 	add.w	r3, r7, #28
 800a81e:	4619      	mov	r1, r3
 800a820:	f001 fa4c 	bl	800bcbc <FTOA>
		strncat(body,data[i],strlen(data[i]));
 800a824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a826:	4613      	mov	r3, r2
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	4413      	add	r3, r2
 800a82c:	005b      	lsls	r3, r3, #1
 800a82e:	4a47      	ldr	r2, [pc, #284]	; (800a94c <httpPOST2+0x2bc>)
 800a830:	189c      	adds	r4, r3, r2
 800a832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a834:	4613      	mov	r3, r2
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	4413      	add	r3, r2
 800a83a:	005b      	lsls	r3, r3, #1
 800a83c:	4a43      	ldr	r2, [pc, #268]	; (800a94c <httpPOST2+0x2bc>)
 800a83e:	4413      	add	r3, r2
 800a840:	4618      	mov	r0, r3
 800a842:	f7f5 fcd7 	bl	80001f4 <strlen>
 800a846:	4603      	mov	r3, r0
 800a848:	461a      	mov	r2, r3
 800a84a:	4621      	mov	r1, r4
 800a84c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a84e:	f001 fcfe 	bl	800c24e <strncat>
		strncat(body,d,strlen(d));
 800a852:	f107 031c 	add.w	r3, r7, #28
 800a856:	4618      	mov	r0, r3
 800a858:	f7f5 fccc 	bl	80001f4 <strlen>
 800a85c:	4602      	mov	r2, r0
 800a85e:	f107 031c 	add.w	r3, r7, #28
 800a862:	4619      	mov	r1, r3
 800a864:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a866:	f001 fcf2 	bl	800c24e <strncat>
		d[0]='\0';
 800a86a:	2300      	movs	r3, #0
 800a86c:	773b      	strb	r3, [r7, #28]
	for (int i=0; i < cdad;i++)
 800a86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a870:	3301      	adds	r3, #1
 800a872:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a878:	429a      	cmp	r2, r3
 800a87a:	dbc3      	blt.n	800a804 <httpPOST2+0x174>
	}
	// Conversión de datos recibido por ModBUS

	strncat(body,deviceId,strlen(deviceId));
 800a87c:	4834      	ldr	r0, [pc, #208]	; (800a950 <httpPOST2+0x2c0>)
 800a87e:	f7f5 fcb9 	bl	80001f4 <strlen>
 800a882:	4603      	mov	r3, r0
 800a884:	461a      	mov	r2, r3
 800a886:	4932      	ldr	r1, [pc, #200]	; (800a950 <httpPOST2+0x2c0>)
 800a888:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a88a:	f001 fce0 	bl	800c24e <strncat>
	strncat(body,_devId,strlen(_devId));
 800a88e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a892:	4618      	mov	r0, r3
 800a894:	f7f5 fcae 	bl	80001f4 <strlen>
 800a898:	4602      	mov	r2, r0
 800a89a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a89e:	4619      	mov	r1, r3
 800a8a0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a8a2:	f001 fcd4 	bl	800c24e <strncat>

	strncat(body,"}",strlen("}"));
 800a8a6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a8a8:	f7f5 fca4 	bl	80001f4 <strlen>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8b2:	4413      	add	r3, r2
 800a8b4:	4927      	ldr	r1, [pc, #156]	; (800a954 <httpPOST2+0x2c4>)
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	881b      	ldrh	r3, [r3, #0]
 800a8bc:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800a8be:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a8c0:	f7f5 fc98 	bl	80001f4 <strlen>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	f107 0314 	add.w	r3, r7, #20
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	4610      	mov	r0, r2
 800a8ce:	f001 f9c1 	bl	800bc54 <INTOA>
	strncat(post,length,strlen(length));
 800a8d2:	f107 0314 	add.w	r3, r7, #20
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7f5 fc8c 	bl	80001f4 <strlen>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	f107 0314 	add.w	r3, r7, #20
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a8e6:	f001 fcb2 	bl	800c24e <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800a8ea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a8ec:	f7f5 fc82 	bl	80001f4 <strlen>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8f6:	4413      	add	r3, r2
 800a8f8:	4a17      	ldr	r2, [pc, #92]	; (800a958 <httpPOST2+0x2c8>)
 800a8fa:	6810      	ldr	r0, [r2, #0]
 800a8fc:	6018      	str	r0, [r3, #0]
 800a8fe:	7912      	ldrb	r2, [r2, #4]
 800a900:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800a902:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a904:	f7f5 fc76 	bl	80001f4 <strlen>
 800a908:	4602      	mov	r2, r0
 800a90a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d20a      	bcs.n	800a926 <httpPOST2+0x296>
	{
		strncat(post,body,strlen(body));
 800a910:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a912:	f7f5 fc6f 	bl	80001f4 <strlen>
 800a916:	4603      	mov	r3, r0
 800a918:	461a      	mov	r2, r3
 800a91a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a91c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a91e:	f001 fc96 	bl	800c24e <strncat>
		return 1 ;
 800a922:	2301      	movs	r3, #1
 800a924:	e000      	b.n	800a928 <httpPOST2+0x298>
	}
		else
		{
			return 0;
 800a926:	2300      	movs	r3, #0
		}
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3730      	adds	r7, #48	; 0x30
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bdb0      	pop	{r4, r5, r7, pc}
 800a930:	0800d6cc 	.word	0x0800d6cc
 800a934:	0800d6d4 	.word	0x0800d6d4
 800a938:	0800d6e0 	.word	0x0800d6e0
 800a93c:	0800d6e4 	.word	0x0800d6e4
 800a940:	0800d6ec 	.word	0x0800d6ec
 800a944:	0800d6f0 	.word	0x0800d6f0
 800a948:	0800d710 	.word	0x0800d710
 800a94c:	20000090 	.word	0x20000090
 800a950:	20000130 	.word	0x20000130
 800a954:	0800d720 	.word	0x0800d720
 800a958:	0800d724 	.word	0x0800d724

0800a95c <LoRa_Send>:
#include "RYLR896.h"
#include "string.h"
#include "STR_Chelo.h"

int LoRa_Send(struct LoRa *a, UART_HandleTypeDef * SERIAL)
{
 800a95c:	b5b0      	push	{r4, r5, r7, lr}
 800a95e:	b086      	sub	sp, #24
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]

	char items[4];

	if(a->txitems > 241)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800a96c:	2bf1      	cmp	r3, #241	; 0xf1
 800a96e:	dd01      	ble.n	800a974 <LoRa_Send+0x18>
	{
		return ERROR_BUFFER_SIZE;
 800a970:	2301      	movs	r3, #1
 800a972:	e099      	b.n	800aaa8 <LoRa_Send+0x14c>
	}
	else
	{

		items[0]='\0';
 800a974:	2300      	movs	r3, #0
 800a976:	723b      	strb	r3, [r7, #8]
		itoa(a->txitems, items,10);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800a97e:	f107 0108 	add.w	r1, r7, #8
 800a982:	220a      	movs	r2, #10
 800a984:	4618      	mov	r0, r3
 800a986:	f001 fa76 	bl	800be76 <itoa>
		a->txbuff2SND[0]='\0'; 													//Borro el vector
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		strncat(a->txbuff2SND,"AT+SEND=",strlen("AT+SEND="));					//AT+SEND=
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800a998:	4620      	mov	r0, r4
 800a99a:	f7f5 fc2b 	bl	80001f4 <strlen>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	4423      	add	r3, r4
 800a9a2:	4943      	ldr	r1, [pc, #268]	; (800aab0 <LoRa_Send+0x154>)
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	cb03      	ldmia	r3!, {r0, r1}
 800a9aa:	6010      	str	r0, [r2, #0]
 800a9ac:	6051      	str	r1, [r2, #4]
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	7213      	strb	r3, [r2, #8]
		strncat(a->txbuff2SND,a->dest_address,strlen(a->dest_address));			//AT+SEND=1
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f103 0516 	add.w	r5, r3, #22
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	3316      	adds	r3, #22
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7f5 fc16 	bl	80001f4 <strlen>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	4629      	mov	r1, r5
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	f001 fc3d 	bl	800c24e <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f7f5 fc0a 	bl	80001f4 <strlen>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	4423      	add	r3, r4
 800a9e4:	4933      	ldr	r1, [pc, #204]	; (800aab4 <LoRa_Send+0x158>)
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	881b      	ldrh	r3, [r3, #0]
 800a9ec:	8013      	strh	r3, [r2, #0]
		strncat(a->txbuff2SND,items,strlen(items));								//AT+SEND=1,4
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800a9f4:	f107 0308 	add.w	r3, r7, #8
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7f5 fbfb 	bl	80001f4 <strlen>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	f107 0308 	add.w	r3, r7, #8
 800aa04:	4619      	mov	r1, r3
 800aa06:	4620      	mov	r0, r4
 800aa08:	f001 fc21 	bl	800c24e <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,4,
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800aa12:	4620      	mov	r0, r4
 800aa14:	f7f5 fbee 	bl	80001f4 <strlen>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	4423      	add	r3, r4
 800aa1c:	4925      	ldr	r1, [pc, #148]	; (800aab4 <LoRa_Send+0x158>)
 800aa1e:	461a      	mov	r2, r3
 800aa20:	460b      	mov	r3, r1
 800aa22:	881b      	ldrh	r3, [r3, #0]
 800aa24:	8013      	strh	r3, [r2, #0]

		int la=strlen(a->txbuff2SND);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7f5 fbe1 	bl	80001f4 <strlen>
 800aa32:	4603      	mov	r3, r0
 800aa34:	617b      	str	r3, [r7, #20]
		int lb=la+a->txitems;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800aa3c:	697a      	ldr	r2, [r7, #20]
 800aa3e:	4413      	add	r3, r2
 800aa40:	60fb      	str	r3, [r7, #12]
		int lc=0;
 800aa42:	2300      	movs	r3, #0
 800aa44:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800aa46:	e012      	b.n	800aa6e <LoRa_Send+0x112>
		{
			a->txbuff2SND[la]=a->txbuff[lc];
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 800aa52:	7819      	ldrb	r1, [r3, #0]
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	4413      	add	r3, r2
 800aa5a:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800aa5e:	460a      	mov	r2, r1
 800aa60:	701a      	strb	r2, [r3, #0]
			la++;
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	3301      	adds	r3, #1
 800aa66:	617b      	str	r3, [r7, #20]
			lc++;
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800aa6e:	697a      	ldr	r2, [r7, #20]
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	dbe8      	blt.n	800aa48 <LoRa_Send+0xec>
		}
		a->txbuff2SND[la++]='\r';
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	1c5a      	adds	r2, r3, #1
 800aa7a:	617a      	str	r2, [r7, #20]
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	4413      	add	r3, r2
 800aa80:	220d      	movs	r2, #13
 800aa82:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		a->txbuff2SND[la++]='\n';
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	1c5a      	adds	r2, r3, #1
 800aa8a:	617a      	str	r2, [r7, #20]
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	4413      	add	r3, r2
 800aa90:	220a      	movs	r2, #10
 800aa92:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		HAL_UART_Transmit_IT(SERIAL, a->txbuff2SND, la);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800aa9c:	697a      	ldr	r2, [r7, #20]
 800aa9e:	b292      	uxth	r2, r2
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6838      	ldr	r0, [r7, #0]
 800aaa4:	f7f9 fcaa 	bl	80043fc <HAL_UART_Transmit_IT>
	}

}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3718      	adds	r7, #24
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bdb0      	pop	{r4, r5, r7, pc}
 800aab0:	0800d72c 	.word	0x0800d72c
 800aab4:	0800d738 	.word	0x0800d738

0800aab8 <LoRa_reset_sndTIMER>:
		a->tmr_dly_en=1;
		a->tmr_dlyCNT=0;
 }

void LoRa_reset_sndTIMER(struct LoRa *a,int msec)
 {
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
	 	a->tmr_dly_ON=0;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
		a->tmr_dly=msec;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	683a      	ldr	r2, [r7, #0]
 800aace:	f8c3 27f0 	str.w	r2, [r3, #2032]	; 0x7f0
		a->tmr_dly_en=0;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2200      	movs	r2, #0
 800aad6:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		a->tmr_dlyCNT=0;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	f8c3 27f4 	str.w	r2, [r3, #2036]	; 0x7f4
 }
 800aae2:	bf00      	nop
 800aae4:	370c      	adds	r7, #12
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr
	...

0800aaf0 <LoRa_decode>:
		break;
	}
}

void LoRa_decode(struct LoRa *b)
 {
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b086      	sub	sp, #24
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
	switch (Lora_idSTR(b))
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 fa25 	bl	800af48 <Lora_idSTR>
 800aafe:	4603      	mov	r3, r0
 800ab00:	2b10      	cmp	r3, #16
 800ab02:	f200 820c 	bhi.w	800af1e <LoRa_decode+0x42e>
 800ab06:	a201      	add	r2, pc, #4	; (adr r2, 800ab0c <LoRa_decode+0x1c>)
 800ab08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab0c:	0800ab51 	.word	0x0800ab51
 800ab10:	0800ac29 	.word	0x0800ac29
 800ab14:	0800ae5d 	.word	0x0800ae5d
 800ab18:	0800ae67 	.word	0x0800ae67
 800ab1c:	0800ae71 	.word	0x0800ae71
 800ab20:	0800ae7b 	.word	0x0800ae7b
 800ab24:	0800ae85 	.word	0x0800ae85
 800ab28:	0800ae8f 	.word	0x0800ae8f
 800ab2c:	0800ae99 	.word	0x0800ae99
 800ab30:	0800aea3 	.word	0x0800aea3
 800ab34:	0800aead 	.word	0x0800aead
 800ab38:	0800aeed 	.word	0x0800aeed
 800ab3c:	0800aef7 	.word	0x0800aef7
 800ab40:	0800af0b 	.word	0x0800af0b
 800ab44:	0800af01 	.word	0x0800af01
 800ab48:	0800ae53 	.word	0x0800ae53
 800ab4c:	0800af15 	.word	0x0800af15
	{
		case _OK:
		{
			switch(b->estado)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 800ab56:	3b01      	subs	r3, #1
 800ab58:	2b13      	cmp	r3, #19
 800ab5a:	d860      	bhi.n	800ac1e <LoRa_decode+0x12e>
 800ab5c:	a201      	add	r2, pc, #4	; (adr r2, 800ab64 <LoRa_decode+0x74>)
 800ab5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab62:	bf00      	nop
 800ab64:	0800abb5 	.word	0x0800abb5
 800ab68:	0800ac1f 	.word	0x0800ac1f
 800ab6c:	0800ac1f 	.word	0x0800ac1f
 800ab70:	0800ac1f 	.word	0x0800ac1f
 800ab74:	0800ac1f 	.word	0x0800ac1f
 800ab78:	0800ac1f 	.word	0x0800ac1f
 800ab7c:	0800abbf 	.word	0x0800abbf
 800ab80:	0800abc9 	.word	0x0800abc9
 800ab84:	0800ac1f 	.word	0x0800ac1f
 800ab88:	0800abd3 	.word	0x0800abd3
 800ab8c:	0800ac1f 	.word	0x0800ac1f
 800ab90:	0800abdd 	.word	0x0800abdd
 800ab94:	0800ac1f 	.word	0x0800ac1f
 800ab98:	0800abe7 	.word	0x0800abe7
 800ab9c:	0800ac1f 	.word	0x0800ac1f
 800aba0:	0800abf1 	.word	0x0800abf1
 800aba4:	0800ac1f 	.word	0x0800ac1f
 800aba8:	0800abfb 	.word	0x0800abfb
 800abac:	0800ac1f 	.word	0x0800ac1f
 800abb0:	0800ac05 	.word	0x0800ac05
			{
				case _AT_SENT:
					b->estado=_IDLE;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800abbc:	e02f      	b.n	800ac1e <LoRa_decode+0x12e>
				case _MODE_SENT:
					b->estado=_MODE_OK;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2206      	movs	r2, #6
 800abc2:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800abc6:	e02a      	b.n	800ac1e <LoRa_decode+0x12e>
				case _PARAMETER_SENT:
					b->estado=_PARAMETER_OK;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2209      	movs	r2, #9
 800abcc:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800abd0:	e025      	b.n	800ac1e <LoRa_decode+0x12e>
				case _BAND_SENT:
					b->estado=_BAND_OK;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	220b      	movs	r2, #11
 800abd6:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800abda:	e020      	b.n	800ac1e <LoRa_decode+0x12e>
				case _ADDR_SENT:
					b->estado=_ADDR_OK;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	220d      	movs	r2, #13
 800abe0:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800abe4:	e01b      	b.n	800ac1e <LoRa_decode+0x12e>
				case _NETWORK_SENT:
					b->estado=_NETWORK_OK;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	220f      	movs	r2, #15
 800abea:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800abee:	e016      	b.n	800ac1e <LoRa_decode+0x12e>
				case _CPIN_SENT:
					b->estado=_CPIN_OK;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2211      	movs	r2, #17
 800abf4:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800abf8:	e011      	b.n	800ac1e <LoRa_decode+0x12e>
				case _CRFOP_SENT:
					b->estado=_CRFOP_OK;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2213      	movs	r2, #19
 800abfe:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800ac02:	e00c      	b.n	800ac1e <LoRa_decode+0x12e>
				case _SENT:
					{
						b->estado=_SENT_OK;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2215      	movs	r2, #21
 800ac08:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
						b->rxbuff[0]='\0';
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
						ITM0_Write("\r\nLora _SENT_OK\r\n",strlen("\r\nLora _SENT_OK\r\n"));
 800ac14:	2111      	movs	r1, #17
 800ac16:	48a8      	ldr	r0, [pc, #672]	; (800aeb8 <LoRa_decode+0x3c8>)
 800ac18:	f7f6 fa9a 	bl	8001150 <ITM0_Write>
					}
					break;
 800ac1c:	bf00      	nop

			}

			ITM0_Write("\r\nLora _OK\r\n",strlen("\r\nLora _OK\r\n"));
 800ac1e:	210c      	movs	r1, #12
 800ac20:	48a6      	ldr	r0, [pc, #664]	; (800aebc <LoRa_decode+0x3cc>)
 800ac22:	f7f6 fa95 	bl	8001150 <ITM0_Write>
						//Clean rxbuff_hld
		}
			break;
 800ac26:	e17f      	b.n	800af28 <LoRa_decode+0x438>
		case _RCV:
		{
			ITM0_Write("\r\nLora _RCV\r\n",strlen("\r\nLora _RCV\r\n"));
 800ac28:	210d      	movs	r1, #13
 800ac2a:	48a5      	ldr	r0, [pc, #660]	; (800aec0 <LoRa_decode+0x3d0>)
 800ac2c:	f7f6 fa90 	bl	8001150 <ITM0_Write>
				b->estado=_DATO_RECIBIDO;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	221a      	movs	r2, #26
 800ac34:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
				b->_data_available=1;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
					int i=0;
 800ac40:	2300      	movs	r3, #0
 800ac42:	617b      	str	r3, [r7, #20]
					int j=0;
 800ac44:	2300      	movs	r3, #0
 800ac46:	613b      	str	r3, [r7, #16]
					int lngt=0;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	60fb      	str	r3, [r7, #12]
					while (b->rxbuff[i] != '=')
 800ac4c:	e002      	b.n	800ac54 <LoRa_decode+0x164>
					{ i++;}
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	3301      	adds	r3, #1
 800ac52:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i] != '=')
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	4413      	add	r3, r2
 800ac5a:	3356      	adds	r3, #86	; 0x56
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	2b3d      	cmp	r3, #61	; 0x3d
 800ac60:	d1f5      	bne.n	800ac4e <LoRa_decode+0x15e>
					i++;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	3301      	adds	r3, #1
 800ac66:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800ac68:	e017      	b.n	800ac9a <LoRa_decode+0x1aa>
					{
						b->rxaddress[j]=b->rxbuff[i];			//Save the address
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	4413      	add	r3, r2
 800ac70:	3356      	adds	r3, #86	; 0x56
 800ac72:	7819      	ldrb	r1, [r3, #0]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	4413      	add	r3, r2
 800ac7a:	3306      	adds	r3, #6
 800ac7c:	460a      	mov	r2, r1
 800ac7e:	701a      	strb	r2, [r3, #0]
						i++;
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	3301      	adds	r3, #1
 800ac84:	617b      	str	r3, [r7, #20]
						j++;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	613b      	str	r3, [r7, #16]
						if (j > 6)
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	2b06      	cmp	r3, #6
 800ac90:	dd03      	ble.n	800ac9a <LoRa_decode+0x1aa>
						{
							Lora_rx_del(b);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 fbca 	bl	800b42c <Lora_rx_del>
							break;
 800ac98:	e006      	b.n	800aca8 <LoRa_decode+0x1b8>
					while (b->rxbuff[i]!= ',')
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	4413      	add	r3, r2
 800aca0:	3356      	adds	r3, #86	; 0x56
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	2b2c      	cmp	r3, #44	; 0x2c
 800aca6:	d1e0      	bne.n	800ac6a <LoRa_decode+0x17a>
						}
					}
					b->rxaddress[j]='\0';
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	4413      	add	r3, r2
 800acae:	3306      	adds	r3, #6
 800acb0:	2200      	movs	r2, #0
 800acb2:	701a      	strb	r2, [r3, #0]
					j=0;
 800acb4:	2300      	movs	r3, #0
 800acb6:	613b      	str	r3, [r7, #16]
					i++;
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	3301      	adds	r3, #1
 800acbc:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800acbe:	e017      	b.n	800acf0 <LoRa_decode+0x200>
					{
						b->rx_items[j]=b->rxbuff[i];			//Save the qty of data
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	4413      	add	r3, r2
 800acc6:	3356      	adds	r3, #86	; 0x56
 800acc8:	7819      	ldrb	r1, [r3, #0]
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	4413      	add	r3, r2
 800acd0:	330c      	adds	r3, #12
 800acd2:	460a      	mov	r2, r1
 800acd4:	701a      	strb	r2, [r3, #0]
						i++;
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	3301      	adds	r3, #1
 800acda:	617b      	str	r3, [r7, #20]
						j++;
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	3301      	adds	r3, #1
 800ace0:	613b      	str	r3, [r7, #16]
						if (j > 4)
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	2b04      	cmp	r3, #4
 800ace6:	dd03      	ble.n	800acf0 <LoRa_decode+0x200>
						{
							Lora_rx_del(b);
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 fb9f 	bl	800b42c <Lora_rx_del>
							break;
 800acee:	e006      	b.n	800acfe <LoRa_decode+0x20e>
					while (b->rxbuff[i]!= ',')
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	4413      	add	r3, r2
 800acf6:	3356      	adds	r3, #86	; 0x56
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	2b2c      	cmp	r3, #44	; 0x2c
 800acfc:	d1e0      	bne.n	800acc0 <LoRa_decode+0x1d0>
						}
					}
					b->rx_items[j]='\0';
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	4413      	add	r3, r2
 800ad04:	330c      	adds	r3, #12
 800ad06:	2200      	movs	r2, #0
 800ad08:	701a      	strb	r2, [r3, #0]
					j=0;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	613b      	str	r3, [r7, #16]
					i++;
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	3301      	adds	r3, #1
 800ad12:	617b      	str	r3, [r7, #20]
					lngt=atoi(b->rx_items,10);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	330c      	adds	r3, #12
 800ad18:	210a      	movs	r1, #10
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f001 f88f 	bl	800be3e <atoi>
 800ad20:	60f8      	str	r0, [r7, #12]
					//lngt=lngt+i;
					//while(lngt>i)   //Ahota busco leer lo datos recibid y luego verificar si ok
					while (b->rxbuff[i]!= ',')
 800ad22:	e019      	b.n	800ad58 <LoRa_decode+0x268>
					{
						b->dataRCV[j]=b->rxbuff[i];			//Save the data
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	4413      	add	r3, r2
 800ad2a:	3356      	adds	r3, #86	; 0x56
 800ad2c:	7819      	ldrb	r1, [r3, #0]
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	4413      	add	r3, r2
 800ad34:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800ad38:	460a      	mov	r2, r1
 800ad3a:	701a      	strb	r2, [r3, #0]
						j++;
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	613b      	str	r3, [r7, #16]
						i++;
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	3301      	adds	r3, #1
 800ad46:	617b      	str	r3, [r7, #20]
						if (j > lngt)
 800ad48:	693a      	ldr	r2, [r7, #16]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	dd03      	ble.n	800ad58 <LoRa_decode+0x268>
						{
							Lora_rx_del(b);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 fb6b 	bl	800b42c <Lora_rx_del>
							break;
 800ad56:	e006      	b.n	800ad66 <LoRa_decode+0x276>
					while (b->rxbuff[i]!= ',')
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	3356      	adds	r3, #86	; 0x56
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	2b2c      	cmp	r3, #44	; 0x2c
 800ad64:	d1de      	bne.n	800ad24 <LoRa_decode+0x234>
						}
					}
					b->_n_dataRCV=j;							//Save amount of data received
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	693a      	ldr	r2, [r7, #16]
 800ad6a:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
					j=0;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	613b      	str	r3, [r7, #16]
					i++;
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	3301      	adds	r3, #1
 800ad76:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800ad78:	e017      	b.n	800adaa <LoRa_decode+0x2ba>
					{
						b->rx_convert[j]=b->rxbuff[i];			//save RSSI
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	4413      	add	r3, r2
 800ad80:	3356      	adds	r3, #86	; 0x56
 800ad82:	7819      	ldrb	r1, [r3, #0]
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	4413      	add	r3, r2
 800ad8a:	3310      	adds	r3, #16
 800ad8c:	460a      	mov	r2, r1
 800ad8e:	701a      	strb	r2, [r3, #0]
						i++;
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	3301      	adds	r3, #1
 800ad94:	617b      	str	r3, [r7, #20]
						j++;
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	3301      	adds	r3, #1
 800ad9a:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	2b05      	cmp	r3, #5
 800ada0:	dd03      	ble.n	800adaa <LoRa_decode+0x2ba>
						{
							Lora_rx_del(b);
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 fb42 	bl	800b42c <Lora_rx_del>
							break;
 800ada8:	e006      	b.n	800adb8 <LoRa_decode+0x2c8>
					while (b->rxbuff[i]!= ',')
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	4413      	add	r3, r2
 800adb0:	3356      	adds	r3, #86	; 0x56
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	2b2c      	cmp	r3, #44	; 0x2c
 800adb6:	d1e0      	bne.n	800ad7a <LoRa_decode+0x28a>
						}
					}
					b->rxRSSI=atoi(b->rx_convert,10);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	3310      	adds	r3, #16
 800adbc:	210a      	movs	r1, #10
 800adbe:	4618      	mov	r0, r3
 800adc0:	f001 f83d 	bl	800be3e <atoi>
 800adc4:	4602      	mov	r2, r0
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
					b->rx_convert[j]='\0';
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	4413      	add	r3, r2
 800add2:	3310      	adds	r3, #16
 800add4:	2200      	movs	r2, #0
 800add6:	701a      	strb	r2, [r3, #0]
					j=0;
 800add8:	2300      	movs	r3, #0
 800adda:	613b      	str	r3, [r7, #16]
					i++;
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	3301      	adds	r3, #1
 800ade0:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= '\r')
 800ade2:	e017      	b.n	800ae14 <LoRa_decode+0x324>
					{
						b->rx_convert[j]=b->rxbuff[i];			// Save SNR
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	4413      	add	r3, r2
 800adea:	3356      	adds	r3, #86	; 0x56
 800adec:	7819      	ldrb	r1, [r3, #0]
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	4413      	add	r3, r2
 800adf4:	3310      	adds	r3, #16
 800adf6:	460a      	mov	r2, r1
 800adf8:	701a      	strb	r2, [r3, #0]
						i++;
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	3301      	adds	r3, #1
 800adfe:	617b      	str	r3, [r7, #20]
						j++;
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	3301      	adds	r3, #1
 800ae04:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	2b05      	cmp	r3, #5
 800ae0a:	dd03      	ble.n	800ae14 <LoRa_decode+0x324>
						{
							Lora_rx_del(b);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 fb0d 	bl	800b42c <Lora_rx_del>
							break;
 800ae12:	e006      	b.n	800ae22 <LoRa_decode+0x332>
					while (b->rxbuff[i]!= '\r')
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	4413      	add	r3, r2
 800ae1a:	3356      	adds	r3, #86	; 0x56
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	2b0d      	cmp	r3, #13
 800ae20:	d1e0      	bne.n	800ade4 <LoRa_decode+0x2f4>
						}
					}

					b->rx_convert[j]='\0';
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	4413      	add	r3, r2
 800ae28:	3310      	adds	r3, #16
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	701a      	strb	r2, [r3, #0]
					b->rxSNR=atoi(b->rx_convert,10);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	3310      	adds	r3, #16
 800ae32:	210a      	movs	r1, #10
 800ae34:	4618      	mov	r0, r3
 800ae36:	f001 f802 	bl	800be3e <atoi>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
					b->rx_convert[0]='\0';
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	741a      	strb	r2, [r3, #16]


			    //Timer de enviar data cuando antes se recibe
				//LoRa_set_sndTIMER(b, 3000);
				b->rxbuff[0]='\0';
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		}
			break;
 800ae50:	e06a      	b.n	800af28 <LoRa_decode+0x438>
		case _ERR:
			ITM0_Write("\r\nLora _ERR\r\n",strlen("\r\nLora _ERR\r\n"));
 800ae52:	210d      	movs	r1, #13
 800ae54:	481b      	ldr	r0, [pc, #108]	; (800aec4 <LoRa_decode+0x3d4>)
 800ae56:	f7f6 f97b 	bl	8001150 <ITM0_Write>
			break;
 800ae5a:	e065      	b.n	800af28 <LoRa_decode+0x438>
		case _RESET:
			ITM0_Write("\r\nLora _RESET\r\n",strlen("\r\nLora _RESET\r\n"));
 800ae5c:	210f      	movs	r1, #15
 800ae5e:	481a      	ldr	r0, [pc, #104]	; (800aec8 <LoRa_decode+0x3d8>)
 800ae60:	f7f6 f976 	bl	8001150 <ITM0_Write>
			break;
 800ae64:	e060      	b.n	800af28 <LoRa_decode+0x438>
		case _READY:
			ITM0_Write("\r\nLora _READY\r\n",strlen("\r\nLora _READY\r\n"));
 800ae66:	210f      	movs	r1, #15
 800ae68:	4818      	ldr	r0, [pc, #96]	; (800aecc <LoRa_decode+0x3dc>)
 800ae6a:	f7f6 f971 	bl	8001150 <ITM0_Write>
			break;
 800ae6e:	e05b      	b.n	800af28 <LoRa_decode+0x438>
		case _MODE:
			ITM0_Write("\r\nLora _MODE\r\n",strlen("\r\nLora _MODE\r\n"));
 800ae70:	210e      	movs	r1, #14
 800ae72:	4817      	ldr	r0, [pc, #92]	; (800aed0 <LoRa_decode+0x3e0>)
 800ae74:	f7f6 f96c 	bl	8001150 <ITM0_Write>
			break;
 800ae78:	e056      	b.n	800af28 <LoRa_decode+0x438>
		case _IPR:
			ITM0_Write("\r\nLora _IPR\r\n",strlen("\r\nLora _IPR\r\n"));
 800ae7a:	210d      	movs	r1, #13
 800ae7c:	4815      	ldr	r0, [pc, #84]	; (800aed4 <LoRa_decode+0x3e4>)
 800ae7e:	f7f6 f967 	bl	8001150 <ITM0_Write>
			break;
 800ae82:	e051      	b.n	800af28 <LoRa_decode+0x438>
		case _PARAMETER:
			ITM0_Write("\r\nLora _PARAMETER\r\n",strlen("\r\nLora _PARAMETER\r\n"));
 800ae84:	2113      	movs	r1, #19
 800ae86:	4814      	ldr	r0, [pc, #80]	; (800aed8 <LoRa_decode+0x3e8>)
 800ae88:	f7f6 f962 	bl	8001150 <ITM0_Write>
			break;
 800ae8c:	e04c      	b.n	800af28 <LoRa_decode+0x438>
		case _BAND:
			ITM0_Write("\r\nLora _BAND\r\n",strlen("\r\nLora _BAND\r\n"));
 800ae8e:	210e      	movs	r1, #14
 800ae90:	4812      	ldr	r0, [pc, #72]	; (800aedc <LoRa_decode+0x3ec>)
 800ae92:	f7f6 f95d 	bl	8001150 <ITM0_Write>
			break;
 800ae96:	e047      	b.n	800af28 <LoRa_decode+0x438>
		case _ADDRESS:
			ITM0_Write("\r\nLora _ADDRESS\r\n",strlen("\r\nLora _ADDRESS\r\n"));
 800ae98:	2111      	movs	r1, #17
 800ae9a:	4811      	ldr	r0, [pc, #68]	; (800aee0 <LoRa_decode+0x3f0>)
 800ae9c:	f7f6 f958 	bl	8001150 <ITM0_Write>
			break;
 800aea0:	e042      	b.n	800af28 <LoRa_decode+0x438>
		case _NETWORK:
			ITM0_Write("\r\nLora _NETWORK\r\n",strlen("\r\nLora _NETWORK\r\n"));
 800aea2:	2111      	movs	r1, #17
 800aea4:	480f      	ldr	r0, [pc, #60]	; (800aee4 <LoRa_decode+0x3f4>)
 800aea6:	f7f6 f953 	bl	8001150 <ITM0_Write>
			break;
 800aeaa:	e03d      	b.n	800af28 <LoRa_decode+0x438>
		case _CPIN:
			ITM0_Write("\r\nLora _CPIN\r\n",strlen("\r\nLora _CPIN\r\n"));
 800aeac:	210e      	movs	r1, #14
 800aeae:	480e      	ldr	r0, [pc, #56]	; (800aee8 <LoRa_decode+0x3f8>)
 800aeb0:	f7f6 f94e 	bl	8001150 <ITM0_Write>
			break;
 800aeb4:	e038      	b.n	800af28 <LoRa_decode+0x438>
 800aeb6:	bf00      	nop
 800aeb8:	0800d768 	.word	0x0800d768
 800aebc:	0800d77c 	.word	0x0800d77c
 800aec0:	0800d78c 	.word	0x0800d78c
 800aec4:	0800d79c 	.word	0x0800d79c
 800aec8:	0800d7ac 	.word	0x0800d7ac
 800aecc:	0800d7bc 	.word	0x0800d7bc
 800aed0:	0800d7cc 	.word	0x0800d7cc
 800aed4:	0800d7dc 	.word	0x0800d7dc
 800aed8:	0800d7ec 	.word	0x0800d7ec
 800aedc:	0800d800 	.word	0x0800d800
 800aee0:	0800d810 	.word	0x0800d810
 800aee4:	0800d824 	.word	0x0800d824
 800aee8:	0800d838 	.word	0x0800d838
		case _CRFOP:
			ITM0_Write("\r\nLora _CRFOP\r\n",strlen("\r\nLora _CRFOP\r\n"));
 800aeec:	210f      	movs	r1, #15
 800aeee:	4810      	ldr	r0, [pc, #64]	; (800af30 <LoRa_decode+0x440>)
 800aef0:	f7f6 f92e 	bl	8001150 <ITM0_Write>
			break;
 800aef4:	e018      	b.n	800af28 <LoRa_decode+0x438>
		case _SEND:
			ITM0_Write("\r\nLora _SEND\r\n",strlen("\r\nLora _SEND\r\n"));
 800aef6:	210e      	movs	r1, #14
 800aef8:	480e      	ldr	r0, [pc, #56]	; (800af34 <LoRa_decode+0x444>)
 800aefa:	f7f6 f929 	bl	8001150 <ITM0_Write>
			break;
 800aefe:	e013      	b.n	800af28 <LoRa_decode+0x438>
		case _UID:
			ITM0_Write("\r\nLora _UID\r\n",strlen("\r\nLora _UID\r\n"));
 800af00:	210d      	movs	r1, #13
 800af02:	480d      	ldr	r0, [pc, #52]	; (800af38 <LoRa_decode+0x448>)
 800af04:	f7f6 f924 	bl	8001150 <ITM0_Write>
			break;
 800af08:	e00e      	b.n	800af28 <LoRa_decode+0x438>
		case _VER:
			ITM0_Write("\r\nLora _VER\r\n",strlen("\r\nLora _VER\r\n"));
 800af0a:	210d      	movs	r1, #13
 800af0c:	480b      	ldr	r0, [pc, #44]	; (800af3c <LoRa_decode+0x44c>)
 800af0e:	f7f6 f91f 	bl	8001150 <ITM0_Write>
			break;
 800af12:	e009      	b.n	800af28 <LoRa_decode+0x438>
		case _ERR_RCV_OF:
			ITM0_Write("\r\nLora _ERR_RCV_OF\r\n",strlen("\r\nLora _ERR_RCV_OF\r\n"));
 800af14:	2114      	movs	r1, #20
 800af16:	480a      	ldr	r0, [pc, #40]	; (800af40 <LoRa_decode+0x450>)
 800af18:	f7f6 f91a 	bl	8001150 <ITM0_Write>
			break;
 800af1c:	e004      	b.n	800af28 <LoRa_decode+0x438>
		default:
			ITM0_Write("\r\nLora default\r\n",strlen("\r\nLora default\r\n"));
 800af1e:	2110      	movs	r1, #16
 800af20:	4808      	ldr	r0, [pc, #32]	; (800af44 <LoRa_decode+0x454>)
 800af22:	f7f6 f915 	bl	8001150 <ITM0_Write>
			break;
 800af26:	bf00      	nop
	}
 }
 800af28:	bf00      	nop
 800af2a:	3718      	adds	r7, #24
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	0800d848 	.word	0x0800d848
 800af34:	0800d858 	.word	0x0800d858
 800af38:	0800d868 	.word	0x0800d868
 800af3c:	0800d878 	.word	0x0800d878
 800af40:	0800d888 	.word	0x0800d888
 800af44:	0800d8a0 	.word	0x0800d8a0

0800af48 <Lora_idSTR>:
int Lora_idSTR(struct LoRa *a)
{		int f,g,h,i;
 800af48:	b580      	push	{r7, lr}
 800af4a:	b090      	sub	sp, #64	; 0x40
 800af4c:	af06      	add	r7, sp, #24
 800af4e:	6078      	str	r0, [r7, #4]
		if(a->rxitems > 270) return _ERR_RCV_OF;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 800af56:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800af5a:	dd01      	ble.n	800af60 <Lora_idSTR+0x18>
 800af5c:	2310      	movs	r3, #16
 800af5e:	e257      	b.n	800b410 <Lora_idSTR+0x4c8>
		char data[10];
		int ndata=0;
 800af60:	2300      	movs	r3, #0
 800af62:	60fb      	str	r3, [r7, #12]
		i=strlen("+OK=");
 800af64:	2304      	movs	r3, #4
 800af66:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+OK=",&i,data,&ndata,&g,&h,512, 0)==1) return _OK ;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800af74:	f107 021c 	add.w	r2, r7, #28
 800af78:	2300      	movs	r3, #0
 800af7a:	9305      	str	r3, [sp, #20]
 800af7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af80:	9304      	str	r3, [sp, #16]
 800af82:	f107 0320 	add.w	r3, r7, #32
 800af86:	9303      	str	r3, [sp, #12]
 800af88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af8c:	9302      	str	r3, [sp, #8]
 800af8e:	f107 030c 	add.w	r3, r7, #12
 800af92:	9301      	str	r3, [sp, #4]
 800af94:	f107 0310 	add.w	r3, r7, #16
 800af98:	9300      	str	r3, [sp, #0]
 800af9a:	4613      	mov	r3, r2
 800af9c:	4ab7      	ldr	r2, [pc, #732]	; (800b27c <Lora_idSTR+0x334>)
 800af9e:	f000 fb11 	bl	800b5c4 <FT_String_ND>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d101      	bne.n	800afac <Lora_idSTR+0x64>
 800afa8:	2300      	movs	r3, #0
 800afaa:	e231      	b.n	800b410 <Lora_idSTR+0x4c8>
		i=strlen("+RCV=");
 800afac:	2305      	movs	r3, #5
 800afae:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RCV=",&i,data,&ndata,&g,&h,512, 0)==1) return _RCV ;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800afbc:	f107 021c 	add.w	r2, r7, #28
 800afc0:	2300      	movs	r3, #0
 800afc2:	9305      	str	r3, [sp, #20]
 800afc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afc8:	9304      	str	r3, [sp, #16]
 800afca:	f107 0320 	add.w	r3, r7, #32
 800afce:	9303      	str	r3, [sp, #12]
 800afd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afd4:	9302      	str	r3, [sp, #8]
 800afd6:	f107 030c 	add.w	r3, r7, #12
 800afda:	9301      	str	r3, [sp, #4]
 800afdc:	f107 0310 	add.w	r3, r7, #16
 800afe0:	9300      	str	r3, [sp, #0]
 800afe2:	4613      	mov	r3, r2
 800afe4:	4aa6      	ldr	r2, [pc, #664]	; (800b280 <Lora_idSTR+0x338>)
 800afe6:	f000 faed 	bl	800b5c4 <FT_String_ND>
 800afea:	4603      	mov	r3, r0
 800afec:	2b01      	cmp	r3, #1
 800afee:	d101      	bne.n	800aff4 <Lora_idSTR+0xac>
 800aff0:	2301      	movs	r3, #1
 800aff2:	e20d      	b.n	800b410 <Lora_idSTR+0x4c8>
		i=strlen("+ERR=");
 800aff4:	2305      	movs	r3, #5
 800aff6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ERR=",&i,data,&ndata,&g,&h,512, 0)==1) return _ERR ;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b004:	f107 021c 	add.w	r2, r7, #28
 800b008:	2300      	movs	r3, #0
 800b00a:	9305      	str	r3, [sp, #20]
 800b00c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b010:	9304      	str	r3, [sp, #16]
 800b012:	f107 0320 	add.w	r3, r7, #32
 800b016:	9303      	str	r3, [sp, #12]
 800b018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b01c:	9302      	str	r3, [sp, #8]
 800b01e:	f107 030c 	add.w	r3, r7, #12
 800b022:	9301      	str	r3, [sp, #4]
 800b024:	f107 0310 	add.w	r3, r7, #16
 800b028:	9300      	str	r3, [sp, #0]
 800b02a:	4613      	mov	r3, r2
 800b02c:	4a95      	ldr	r2, [pc, #596]	; (800b284 <Lora_idSTR+0x33c>)
 800b02e:	f000 fac9 	bl	800b5c4 <FT_String_ND>
 800b032:	4603      	mov	r3, r0
 800b034:	2b01      	cmp	r3, #1
 800b036:	d101      	bne.n	800b03c <Lora_idSTR+0xf4>
 800b038:	230f      	movs	r3, #15
 800b03a:	e1e9      	b.n	800b410 <Lora_idSTR+0x4c8>
		i=strlen("+RESET");
 800b03c:	2306      	movs	r3, #6
 800b03e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RESET",&i,data,&ndata,&g,&h,512, 0)==1)return _RESET;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b04c:	f107 021c 	add.w	r2, r7, #28
 800b050:	2300      	movs	r3, #0
 800b052:	9305      	str	r3, [sp, #20]
 800b054:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b058:	9304      	str	r3, [sp, #16]
 800b05a:	f107 0320 	add.w	r3, r7, #32
 800b05e:	9303      	str	r3, [sp, #12]
 800b060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b064:	9302      	str	r3, [sp, #8]
 800b066:	f107 030c 	add.w	r3, r7, #12
 800b06a:	9301      	str	r3, [sp, #4]
 800b06c:	f107 0310 	add.w	r3, r7, #16
 800b070:	9300      	str	r3, [sp, #0]
 800b072:	4613      	mov	r3, r2
 800b074:	4a84      	ldr	r2, [pc, #528]	; (800b288 <Lora_idSTR+0x340>)
 800b076:	f000 faa5 	bl	800b5c4 <FT_String_ND>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d101      	bne.n	800b084 <Lora_idSTR+0x13c>
 800b080:	2302      	movs	r3, #2
 800b082:	e1c5      	b.n	800b410 <Lora_idSTR+0x4c8>
		i=strlen("+READY");
 800b084:	2306      	movs	r3, #6
 800b086:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+READY",&i,data,&ndata,&g,&h,512, 0)==1) return _READY ;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b094:	f107 021c 	add.w	r2, r7, #28
 800b098:	2300      	movs	r3, #0
 800b09a:	9305      	str	r3, [sp, #20]
 800b09c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0a0:	9304      	str	r3, [sp, #16]
 800b0a2:	f107 0320 	add.w	r3, r7, #32
 800b0a6:	9303      	str	r3, [sp, #12]
 800b0a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0ac:	9302      	str	r3, [sp, #8]
 800b0ae:	f107 030c 	add.w	r3, r7, #12
 800b0b2:	9301      	str	r3, [sp, #4]
 800b0b4:	f107 0310 	add.w	r3, r7, #16
 800b0b8:	9300      	str	r3, [sp, #0]
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	4a73      	ldr	r2, [pc, #460]	; (800b28c <Lora_idSTR+0x344>)
 800b0be:	f000 fa81 	bl	800b5c4 <FT_String_ND>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d101      	bne.n	800b0cc <Lora_idSTR+0x184>
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	e1a1      	b.n	800b410 <Lora_idSTR+0x4c8>
		i=strlen("+MODE=");
 800b0cc:	2306      	movs	r3, #6
 800b0ce:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+MODE=",&i,data,&ndata,&g,&h,512, 0)==1) return _MODE ;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b0dc:	f107 021c 	add.w	r2, r7, #28
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	9305      	str	r3, [sp, #20]
 800b0e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0e8:	9304      	str	r3, [sp, #16]
 800b0ea:	f107 0320 	add.w	r3, r7, #32
 800b0ee:	9303      	str	r3, [sp, #12]
 800b0f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0f4:	9302      	str	r3, [sp, #8]
 800b0f6:	f107 030c 	add.w	r3, r7, #12
 800b0fa:	9301      	str	r3, [sp, #4]
 800b0fc:	f107 0310 	add.w	r3, r7, #16
 800b100:	9300      	str	r3, [sp, #0]
 800b102:	4613      	mov	r3, r2
 800b104:	4a62      	ldr	r2, [pc, #392]	; (800b290 <Lora_idSTR+0x348>)
 800b106:	f000 fa5d 	bl	800b5c4 <FT_String_ND>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d101      	bne.n	800b114 <Lora_idSTR+0x1cc>
 800b110:	2304      	movs	r3, #4
 800b112:	e17d      	b.n	800b410 <Lora_idSTR+0x4c8>
		i=strlen("+IPR=");
 800b114:	2305      	movs	r3, #5
 800b116:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+IPR=",&i,data,&ndata,&g,&h,512, 0)==1) return _IPR ;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b124:	f107 021c 	add.w	r2, r7, #28
 800b128:	2300      	movs	r3, #0
 800b12a:	9305      	str	r3, [sp, #20]
 800b12c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b130:	9304      	str	r3, [sp, #16]
 800b132:	f107 0320 	add.w	r3, r7, #32
 800b136:	9303      	str	r3, [sp, #12]
 800b138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b13c:	9302      	str	r3, [sp, #8]
 800b13e:	f107 030c 	add.w	r3, r7, #12
 800b142:	9301      	str	r3, [sp, #4]
 800b144:	f107 0310 	add.w	r3, r7, #16
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	4613      	mov	r3, r2
 800b14c:	4a51      	ldr	r2, [pc, #324]	; (800b294 <Lora_idSTR+0x34c>)
 800b14e:	f000 fa39 	bl	800b5c4 <FT_String_ND>
 800b152:	4603      	mov	r3, r0
 800b154:	2b01      	cmp	r3, #1
 800b156:	d101      	bne.n	800b15c <Lora_idSTR+0x214>
 800b158:	2305      	movs	r3, #5
 800b15a:	e159      	b.n	800b410 <Lora_idSTR+0x4c8>
		i=strlen("+PARAMETER=");
 800b15c:	230b      	movs	r3, #11
 800b15e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+PARAMETER=",&i,data,&ndata,&g,&h,512, 0)==1) return _PARAMETER ;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b16c:	f107 021c 	add.w	r2, r7, #28
 800b170:	2300      	movs	r3, #0
 800b172:	9305      	str	r3, [sp, #20]
 800b174:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b178:	9304      	str	r3, [sp, #16]
 800b17a:	f107 0320 	add.w	r3, r7, #32
 800b17e:	9303      	str	r3, [sp, #12]
 800b180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b184:	9302      	str	r3, [sp, #8]
 800b186:	f107 030c 	add.w	r3, r7, #12
 800b18a:	9301      	str	r3, [sp, #4]
 800b18c:	f107 0310 	add.w	r3, r7, #16
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	4613      	mov	r3, r2
 800b194:	4a40      	ldr	r2, [pc, #256]	; (800b298 <Lora_idSTR+0x350>)
 800b196:	f000 fa15 	bl	800b5c4 <FT_String_ND>
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d101      	bne.n	800b1a4 <Lora_idSTR+0x25c>
 800b1a0:	2306      	movs	r3, #6
 800b1a2:	e135      	b.n	800b410 <Lora_idSTR+0x4c8>
		i=strlen("+BAND=");
 800b1a4:	2306      	movs	r3, #6
 800b1a6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+BAND=",&i,data,&ndata,&g,&h,512, 0)==1) return _BAND ;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b1b4:	f107 021c 	add.w	r2, r7, #28
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	9305      	str	r3, [sp, #20]
 800b1bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1c0:	9304      	str	r3, [sp, #16]
 800b1c2:	f107 0320 	add.w	r3, r7, #32
 800b1c6:	9303      	str	r3, [sp, #12]
 800b1c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1cc:	9302      	str	r3, [sp, #8]
 800b1ce:	f107 030c 	add.w	r3, r7, #12
 800b1d2:	9301      	str	r3, [sp, #4]
 800b1d4:	f107 0310 	add.w	r3, r7, #16
 800b1d8:	9300      	str	r3, [sp, #0]
 800b1da:	4613      	mov	r3, r2
 800b1dc:	4a2f      	ldr	r2, [pc, #188]	; (800b29c <Lora_idSTR+0x354>)
 800b1de:	f000 f9f1 	bl	800b5c4 <FT_String_ND>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d101      	bne.n	800b1ec <Lora_idSTR+0x2a4>
 800b1e8:	2307      	movs	r3, #7
 800b1ea:	e111      	b.n	800b410 <Lora_idSTR+0x4c8>
		i=strlen("+ADDRESS=");
 800b1ec:	2309      	movs	r3, #9
 800b1ee:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ADDRESS=",&i,data,&ndata,&g,&h,512, 0)==1) return _ADDRESS ;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b1fc:	f107 021c 	add.w	r2, r7, #28
 800b200:	2300      	movs	r3, #0
 800b202:	9305      	str	r3, [sp, #20]
 800b204:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b208:	9304      	str	r3, [sp, #16]
 800b20a:	f107 0320 	add.w	r3, r7, #32
 800b20e:	9303      	str	r3, [sp, #12]
 800b210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b214:	9302      	str	r3, [sp, #8]
 800b216:	f107 030c 	add.w	r3, r7, #12
 800b21a:	9301      	str	r3, [sp, #4]
 800b21c:	f107 0310 	add.w	r3, r7, #16
 800b220:	9300      	str	r3, [sp, #0]
 800b222:	4613      	mov	r3, r2
 800b224:	4a1e      	ldr	r2, [pc, #120]	; (800b2a0 <Lora_idSTR+0x358>)
 800b226:	f000 f9cd 	bl	800b5c4 <FT_String_ND>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d101      	bne.n	800b234 <Lora_idSTR+0x2ec>
 800b230:	2308      	movs	r3, #8
 800b232:	e0ed      	b.n	800b410 <Lora_idSTR+0x4c8>
		i=strlen("+NETWORK=");
 800b234:	2309      	movs	r3, #9
 800b236:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+NETWORK=",&i,data,&ndata,&g,&h,512, 0)==1) return _NETWORK ;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b244:	f107 021c 	add.w	r2, r7, #28
 800b248:	2300      	movs	r3, #0
 800b24a:	9305      	str	r3, [sp, #20]
 800b24c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b250:	9304      	str	r3, [sp, #16]
 800b252:	f107 0320 	add.w	r3, r7, #32
 800b256:	9303      	str	r3, [sp, #12]
 800b258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b25c:	9302      	str	r3, [sp, #8]
 800b25e:	f107 030c 	add.w	r3, r7, #12
 800b262:	9301      	str	r3, [sp, #4]
 800b264:	f107 0310 	add.w	r3, r7, #16
 800b268:	9300      	str	r3, [sp, #0]
 800b26a:	4613      	mov	r3, r2
 800b26c:	4a0d      	ldr	r2, [pc, #52]	; (800b2a4 <Lora_idSTR+0x35c>)
 800b26e:	f000 f9a9 	bl	800b5c4 <FT_String_ND>
 800b272:	4603      	mov	r3, r0
 800b274:	2b01      	cmp	r3, #1
 800b276:	d117      	bne.n	800b2a8 <Lora_idSTR+0x360>
 800b278:	2309      	movs	r3, #9
 800b27a:	e0c9      	b.n	800b410 <Lora_idSTR+0x4c8>
 800b27c:	0800d8b4 	.word	0x0800d8b4
 800b280:	0800d8bc 	.word	0x0800d8bc
 800b284:	0800d8c4 	.word	0x0800d8c4
 800b288:	0800d8cc 	.word	0x0800d8cc
 800b28c:	0800d8d4 	.word	0x0800d8d4
 800b290:	0800d8dc 	.word	0x0800d8dc
 800b294:	0800d8e4 	.word	0x0800d8e4
 800b298:	0800d8ec 	.word	0x0800d8ec
 800b29c:	0800d8f8 	.word	0x0800d8f8
 800b2a0:	0800d900 	.word	0x0800d900
 800b2a4:	0800d90c 	.word	0x0800d90c
		i=strlen("+CPIN=");
 800b2a8:	2306      	movs	r3, #6
 800b2aa:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CPIN=",&i,data,&ndata,&g,&h,512, 0)==1) return _CPIN ;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b2b8:	f107 021c 	add.w	r2, r7, #28
 800b2bc:	2300      	movs	r3, #0
 800b2be:	9305      	str	r3, [sp, #20]
 800b2c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2c4:	9304      	str	r3, [sp, #16]
 800b2c6:	f107 0320 	add.w	r3, r7, #32
 800b2ca:	9303      	str	r3, [sp, #12]
 800b2cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2d0:	9302      	str	r3, [sp, #8]
 800b2d2:	f107 030c 	add.w	r3, r7, #12
 800b2d6:	9301      	str	r3, [sp, #4]
 800b2d8:	f107 0310 	add.w	r3, r7, #16
 800b2dc:	9300      	str	r3, [sp, #0]
 800b2de:	4613      	mov	r3, r2
 800b2e0:	4a4d      	ldr	r2, [pc, #308]	; (800b418 <Lora_idSTR+0x4d0>)
 800b2e2:	f000 f96f 	bl	800b5c4 <FT_String_ND>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d101      	bne.n	800b2f0 <Lora_idSTR+0x3a8>
 800b2ec:	230a      	movs	r3, #10
 800b2ee:	e08f      	b.n	800b410 <Lora_idSTR+0x4c8>
		i=strlen("+CRFOP=");
 800b2f0:	2307      	movs	r3, #7
 800b2f2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CRFOP=",&i,data,&ndata,&g,&h,512, 0)==1) return _CRFOP ;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b300:	f107 021c 	add.w	r2, r7, #28
 800b304:	2300      	movs	r3, #0
 800b306:	9305      	str	r3, [sp, #20]
 800b308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b30c:	9304      	str	r3, [sp, #16]
 800b30e:	f107 0320 	add.w	r3, r7, #32
 800b312:	9303      	str	r3, [sp, #12]
 800b314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b318:	9302      	str	r3, [sp, #8]
 800b31a:	f107 030c 	add.w	r3, r7, #12
 800b31e:	9301      	str	r3, [sp, #4]
 800b320:	f107 0310 	add.w	r3, r7, #16
 800b324:	9300      	str	r3, [sp, #0]
 800b326:	4613      	mov	r3, r2
 800b328:	4a3c      	ldr	r2, [pc, #240]	; (800b41c <Lora_idSTR+0x4d4>)
 800b32a:	f000 f94b 	bl	800b5c4 <FT_String_ND>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b01      	cmp	r3, #1
 800b332:	d101      	bne.n	800b338 <Lora_idSTR+0x3f0>
 800b334:	230b      	movs	r3, #11
 800b336:	e06b      	b.n	800b410 <Lora_idSTR+0x4c8>
		i=strlen("+SEND=");
 800b338:	2306      	movs	r3, #6
 800b33a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+SEND=",&i,data,&ndata,&g,&h,512, 0)==1) return _SEND ;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b348:	f107 021c 	add.w	r2, r7, #28
 800b34c:	2300      	movs	r3, #0
 800b34e:	9305      	str	r3, [sp, #20]
 800b350:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b354:	9304      	str	r3, [sp, #16]
 800b356:	f107 0320 	add.w	r3, r7, #32
 800b35a:	9303      	str	r3, [sp, #12]
 800b35c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b360:	9302      	str	r3, [sp, #8]
 800b362:	f107 030c 	add.w	r3, r7, #12
 800b366:	9301      	str	r3, [sp, #4]
 800b368:	f107 0310 	add.w	r3, r7, #16
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	4613      	mov	r3, r2
 800b370:	4a2b      	ldr	r2, [pc, #172]	; (800b420 <Lora_idSTR+0x4d8>)
 800b372:	f000 f927 	bl	800b5c4 <FT_String_ND>
 800b376:	4603      	mov	r3, r0
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d101      	bne.n	800b380 <Lora_idSTR+0x438>
 800b37c:	230c      	movs	r3, #12
 800b37e:	e047      	b.n	800b410 <Lora_idSTR+0x4c8>
		i=strlen("+UID=");
 800b380:	2305      	movs	r3, #5
 800b382:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+UID=",&i,data,&ndata,&g,&h,512, 0)==1) return _UID ;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b390:	f107 021c 	add.w	r2, r7, #28
 800b394:	2300      	movs	r3, #0
 800b396:	9305      	str	r3, [sp, #20]
 800b398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b39c:	9304      	str	r3, [sp, #16]
 800b39e:	f107 0320 	add.w	r3, r7, #32
 800b3a2:	9303      	str	r3, [sp, #12]
 800b3a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3a8:	9302      	str	r3, [sp, #8]
 800b3aa:	f107 030c 	add.w	r3, r7, #12
 800b3ae:	9301      	str	r3, [sp, #4]
 800b3b0:	f107 0310 	add.w	r3, r7, #16
 800b3b4:	9300      	str	r3, [sp, #0]
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	4a1a      	ldr	r2, [pc, #104]	; (800b424 <Lora_idSTR+0x4dc>)
 800b3ba:	f000 f903 	bl	800b5c4 <FT_String_ND>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d101      	bne.n	800b3c8 <Lora_idSTR+0x480>
 800b3c4:	230e      	movs	r3, #14
 800b3c6:	e023      	b.n	800b410 <Lora_idSTR+0x4c8>
		i=strlen("+VER=");
 800b3c8:	2305      	movs	r3, #5
 800b3ca:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+VER=",&i,data,&ndata,&g,&h,512, 0)==1) return _VER ;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800b3d8:	f107 021c 	add.w	r2, r7, #28
 800b3dc:	2300      	movs	r3, #0
 800b3de:	9305      	str	r3, [sp, #20]
 800b3e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3e4:	9304      	str	r3, [sp, #16]
 800b3e6:	f107 0320 	add.w	r3, r7, #32
 800b3ea:	9303      	str	r3, [sp, #12]
 800b3ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3f0:	9302      	str	r3, [sp, #8]
 800b3f2:	f107 030c 	add.w	r3, r7, #12
 800b3f6:	9301      	str	r3, [sp, #4]
 800b3f8:	f107 0310 	add.w	r3, r7, #16
 800b3fc:	9300      	str	r3, [sp, #0]
 800b3fe:	4613      	mov	r3, r2
 800b400:	4a09      	ldr	r2, [pc, #36]	; (800b428 <Lora_idSTR+0x4e0>)
 800b402:	f000 f8df 	bl	800b5c4 <FT_String_ND>
 800b406:	4603      	mov	r3, r0
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d101      	bne.n	800b410 <Lora_idSTR+0x4c8>
 800b40c:	230d      	movs	r3, #13
 800b40e:	e7ff      	b.n	800b410 <Lora_idSTR+0x4c8>
}
 800b410:	4618      	mov	r0, r3
 800b412:	3728      	adds	r7, #40	; 0x28
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	0800d918 	.word	0x0800d918
 800b41c:	0800d920 	.word	0x0800d920
 800b420:	0800d928 	.word	0x0800d928
 800b424:	0800d930 	.word	0x0800d930
 800b428:	0800d938 	.word	0x0800d938

0800b42c <Lora_rx_del>:
void Lora_rx_del(struct LoRa *a)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
	a->rxbuff[0]='\0';
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	a->rx_items[0]='\0';
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	731a      	strb	r2, [r3, #12]
	//a->dataRCV[0]='\0';
	a->rxRSSI=0;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
	a->rxSNR=0;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
}
 800b452:	bf00      	nop
 800b454:	370c      	adds	r7, #12
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr
	...

0800b460 <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	711a      	strb	r2, [r3, #4]
	m->_timeout=500;						//Timeout para la recepción de respuesta.
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b47a:	80da      	strh	r2, [r3, #6]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2201      	movs	r2, #1
 800b480:	729a      	strb	r2, [r3, #10]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2220      	movs	r2, #32
 800b486:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
	m->_Coils=0xF0F0AF5A;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	4a1c      	ldr	r2, [pc, #112]	; (800b500 <ModBUS_Config+0xa0>)
 800b48e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2201      	movs	r2, #1
 800b496:	72da      	strb	r2, [r3, #11]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2220      	movs	r2, #32
 800b49c:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
	m->_Inputs=0xA5FA0F0F;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4a18      	ldr	r2, [pc, #96]	; (800b504 <ModBUS_Config+0xa4>)
 800b4a4:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	731a      	strb	r2, [r3, #12]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2210      	movs	r2, #16
 800b4b2:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	735a      	strb	r2, [r3, #13]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2210      	movs	r2, #16
 800b4c0:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	739a      	strb	r2, [r3, #14]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2220      	movs	r2, #32
 800b4ce:	f883 2638 	strb.w	r2, [r3, #1592]	; 0x638

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	73da      	strb	r2, [r3, #15]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	741a      	strb	r2, [r3, #16]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2220      	movs	r2, #32
 800b4e2:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	745a      	strb	r2, [r3, #17]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2220      	movs	r2, #32
 800b4f0:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
}
 800b4f4:	bf00      	nop
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr
 800b500:	f0f0af5a 	.word	0xf0f0af5a
 800b504:	a5fa0f0f 	.word	0xa5fa0f0f

0800b508 <ModBUS_F03_Assign>:
		return(0);
	}
}

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t address, uint16_t data)
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	460b      	mov	r3, r1
 800b512:	70fb      	strb	r3, [r7, #3]
 800b514:	4613      	mov	r3, r2
 800b516:	803b      	strh	r3, [r7, #0]

	uint8_t c=0;
 800b518:	2300      	movs	r3, #0
 800b51a:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800b522:	78fa      	ldrb	r2, [r7, #3]
 800b524:	429a      	cmp	r2, r3
 800b526:	d901      	bls.n	800b52c <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800b528:	2301      	movs	r3, #1
 800b52a:	e016      	b.n	800b55a <ModBUS_F03_Assign+0x52>
	}
	else
	{
		address=address*2;
 800b52c:	78fb      	ldrb	r3, [r7, #3]
 800b52e:	005b      	lsls	r3, r3, #1
 800b530:	70fb      	strb	r3, [r7, #3]
		m2->_Holding_Registers[(address)+1]=data;
 800b532:	78fb      	ldrb	r3, [r7, #3]
 800b534:	3301      	adds	r3, #1
 800b536:	883a      	ldrh	r2, [r7, #0]
 800b538:	b2d1      	uxtb	r1, r2
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	4413      	add	r3, r2
 800b53e:	460a      	mov	r2, r1
 800b540:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
		c=data>>8;
 800b544:	883b      	ldrh	r3, [r7, #0]
 800b546:	0a1b      	lsrs	r3, r3, #8
 800b548:	b29b      	uxth	r3, r3
 800b54a:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(address)]=c;
 800b54c:	78fb      	ldrb	r3, [r7, #3]
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	4413      	add	r3, r2
 800b552:	7bfa      	ldrb	r2, [r7, #15]
 800b554:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

		return(0);
 800b558:	2300      	movs	r3, #0
	}
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3714      	adds	r7, #20
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr

0800b566 <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t address)
{
 800b566:	b480      	push	{r7}
 800b568:	b085      	sub	sp, #20
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
 800b56e:	460b      	mov	r3, r1
 800b570:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800b572:	2300      	movs	r3, #0
 800b574:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800b576:	2300      	movs	r3, #0
 800b578:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800b580:	78fa      	ldrb	r2, [r7, #3]
 800b582:	429a      	cmp	r2, r3
 800b584:	d901      	bls.n	800b58a <ModBUS_F03_Read+0x24>
	{
		return(1);
 800b586:	2301      	movs	r3, #1
 800b588:	e016      	b.n	800b5b8 <ModBUS_F03_Read+0x52>
	}
	else
	{
		address=address*2;
 800b58a:	78fb      	ldrb	r3, [r7, #3]
 800b58c:	005b      	lsls	r3, r3, #1
 800b58e:	70fb      	strb	r3, [r7, #3]
		n=m2->_Holding_Registers[(address)];
 800b590:	78fb      	ldrb	r3, [r7, #3]
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	4413      	add	r3, r2
 800b596:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800b59a:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800b59c:	89fb      	ldrh	r3, [r7, #14]
 800b59e:	021b      	lsls	r3, r3, #8
 800b5a0:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(address)+1];
 800b5a2:	78fb      	ldrb	r3, [r7, #3]
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	4413      	add	r3, r2
 800b5aa:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800b5ae:	b29a      	uxth	r2, r3
 800b5b0:	89fb      	ldrh	r3, [r7, #14]
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	81fb      	strh	r3, [r7, #14]
		return(n);
 800b5b6:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3714      	adds	r7, #20
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int of, int tf)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b090      	sub	sp, #64	; 0x40
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	607a      	str	r2, [r7, #4]
 800b5d0:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b5da:	2300      	movs	r3, #0
 800b5dc:	637b      	str	r3, [r7, #52]	; 0x34
 800b5de:	2300      	movs	r3, #0
 800b5e0:	633b      	str	r3, [r7, #48]	; 0x30
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	61fb      	str	r3, [r7, #28]
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	61bb      	str	r3, [r7, #24]
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	627b      	str	r3, [r7, #36]	; 0x24
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	617b      	str	r3, [r7, #20]
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	623b      	str	r3, [r7, #32]
 800b5fe:	2300      	movs	r3, #0
 800b600:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	61fb      	str	r3, [r7, #28]
	lngb=*bn;
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	61bb      	str	r3, [r7, #24]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800b60e:	69fa      	ldr	r2, [r7, #28]
 800b610:	69bb      	ldr	r3, [r7, #24]
 800b612:	429a      	cmp	r2, r3
 800b614:	f2c0 8315 	blt.w	800bc42 <FT_String_ND+0x67e>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800b618:	2300      	movs	r3, #0
 800b61a:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800b61c:	e00c      	b.n	800b638 <FT_String_ND+0x74>
							{
								n++;
 800b61e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b620:	3301      	adds	r3, #1
 800b622:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800b624:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	441a      	add	r2, r3
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	3301      	adds	r3, #1
 800b62e:	429a      	cmp	r2, r3
 800b630:	dd02      	ble.n	800b638 <FT_String_ND+0x74>
								{
									estado=0;
 800b632:	2300      	movs	r3, #0
 800b634:	623b      	str	r3, [r7, #32]
									break;
 800b636:	e009      	b.n	800b64c <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800b638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b63a:	68fa      	ldr	r2, [r7, #12]
 800b63c:	4413      	add	r3, r2
 800b63e:	781a      	ldrb	r2, [r3, #0]
 800b640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b642:	6879      	ldr	r1, [r7, #4]
 800b644:	440b      	add	r3, r1
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d1e8      	bne.n	800b61e <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800b64c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b64e:	3301      	adds	r3, #1
 800b650:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800b652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b654:	3301      	adds	r3, #1
 800b656:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800b658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d108      	bne.n	800b672 <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800b660:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	1ad3      	subs	r3, r2, r3
 800b666:	1c5a      	adds	r2, r3, #1
 800b668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b66a:	601a      	str	r2, [r3, #0]
									estado=1;
 800b66c:	2301      	movs	r3, #1
 800b66e:	623b      	str	r3, [r7, #32]
									break;
 800b670:	e010      	b.n	800b694 <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800b672:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b674:	69bb      	ldr	r3, [r7, #24]
 800b676:	429a      	cmp	r2, r3
 800b678:	dd02      	ble.n	800b680 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800b67a:	2300      	movs	r3, #0
 800b67c:	623b      	str	r3, [r7, #32]
									 break;
 800b67e:	e009      	b.n	800b694 <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800b680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	4413      	add	r3, r2
 800b686:	781a      	ldrb	r2, [r3, #0]
 800b688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68a:	6879      	ldr	r1, [r7, #4]
 800b68c:	440b      	add	r3, r1
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	429a      	cmp	r2, r3
 800b692:	d0db      	beq.n	800b64c <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800b694:	69bb      	ldr	r3, [r7, #24]
 800b696:	1e5a      	subs	r2, r3, #1
 800b698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b69a:	4413      	add	r3, r2
 800b69c:	69fa      	ldr	r2, [r7, #28]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	dd02      	ble.n	800b6a8 <FT_String_ND+0xe4>
 800b6a2:	6a3b      	ldr	r3, [r7, #32]
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d1b7      	bne.n	800b618 <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800b6a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d101      	bne.n	800b6b2 <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800b6ae:	6a3b      	ldr	r3, [r7, #32]
 800b6b0:	e2c8      	b.n	800bc44 <FT_String_ND+0x680>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800b6b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d12c      	bne.n	800b712 <FT_String_ND+0x14e>
 800b6b8:	6a3b      	ldr	r3, [r7, #32]
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d129      	bne.n	800b712 <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800b6be:	e014      	b.n	800b6ea <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800b6c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	69bb      	ldr	r3, [r7, #24]
 800b6c6:	441a      	add	r2, r3
 800b6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ca:	4413      	add	r3, r2
 800b6cc:	3b01      	subs	r3, #1
 800b6ce:	68fa      	ldr	r2, [r7, #12]
 800b6d0:	441a      	add	r2, r3
 800b6d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6d4:	6819      	ldr	r1, [r3, #0]
 800b6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6d8:	440b      	add	r3, r1
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	68f9      	ldr	r1, [r7, #12]
 800b6de:	440b      	add	r3, r1
 800b6e0:	7812      	ldrb	r2, [r2, #0]
 800b6e2:	701a      	strb	r2, [r3, #0]
										n3++;
 800b6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800b6ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6ec:	681a      	ldr	r2, [r3, #0]
 800b6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f0:	441a      	add	r2, r3
 800b6f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6f4:	4413      	add	r3, r2
 800b6f6:	69fa      	ldr	r2, [r7, #28]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	dae1      	bge.n	800b6c0 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800b6fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b702:	4413      	add	r3, r2
 800b704:	1e5a      	subs	r2, r3, #1
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	601a      	str	r2, [r3, #0]
							estado=3;
 800b70a:	2303      	movs	r3, #3
 800b70c:	623b      	str	r3, [r7, #32]
							return(estado);
 800b70e:	6a3b      	ldr	r3, [r7, #32]
 800b710:	e298      	b.n	800bc44 <FT_String_ND+0x680>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800b712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b714:	2b02      	cmp	r3, #2
 800b716:	f040 80be 	bne.w	800b896 <FT_String_ND+0x2d2>
 800b71a:	6a3b      	ldr	r3, [r7, #32]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	f040 80ba 	bne.w	800b896 <FT_String_ND+0x2d2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800b722:	e012      	b.n	800b74a <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800b724:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	1ad2      	subs	r2, r2, r3
 800b72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72c:	4413      	add	r3, r2
 800b72e:	461a      	mov	r2, r3
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	441a      	add	r2, r3
 800b734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b736:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b738:	440b      	add	r3, r1
 800b73a:	7812      	ldrb	r2, [r2, #0]
 800b73c:	701a      	strb	r2, [r3, #0]
								n4++;
 800b73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b740:	3301      	adds	r3, #1
 800b742:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800b744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b748:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800b74a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	1ad2      	subs	r2, r2, r3
 800b750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b752:	4413      	add	r3, r2
 800b754:	69fa      	ldr	r2, [r7, #28]
 800b756:	429a      	cmp	r2, r3
 800b758:	dae4      	bge.n	800b724 <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800b75a:	499d      	ldr	r1, [pc, #628]	; (800b9d0 <FT_String_ND+0x40c>)
 800b75c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b75e:	f000 fd89 	bl	800c274 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800b762:	499c      	ldr	r1, [pc, #624]	; (800b9d4 <FT_String_ND+0x410>)
 800b764:	2000      	movs	r0, #0
 800b766:	f000 fd85 	bl	800c274 <strtok>
 800b76a:	4603      	mov	r3, r0
 800b76c:	4618      	mov	r0, r3
 800b76e:	f000 fb66 	bl	800be3e <atoi>
 800b772:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800b774:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b776:	3b01      	subs	r3, #1
 800b778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b77a:	429a      	cmp	r2, r3
 800b77c:	db02      	blt.n	800b784 <FT_String_ND+0x1c0>
							{
								lngd=of-1;
 800b77e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b780:	3b01      	subs	r3, #1
 800b782:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800b784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b786:	3306      	adds	r3, #6
 800b788:	222c      	movs	r2, #44	; 0x2c
 800b78a:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800b78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78e:	2b09      	cmp	r3, #9
 800b790:	dc0d      	bgt.n	800b7ae <FT_String_ND+0x1ea>
											{
												c[8]=':';
 800b792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b794:	3308      	adds	r3, #8
 800b796:	223a      	movs	r2, #58	; 0x3a
 800b798:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800b79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79c:	3309      	adds	r3, #9
 800b79e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7a0:	4413      	add	r3, r2
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800b7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a8:	3309      	adds	r3, #9
 800b7aa:	627b      	str	r3, [r7, #36]	; 0x24
 800b7ac:	e021      	b.n	800b7f2 <FT_String_ND+0x22e>
											}
											else{
														if (lngd< 100)
 800b7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b0:	2b63      	cmp	r3, #99	; 0x63
 800b7b2:	dc0d      	bgt.n	800b7d0 <FT_String_ND+0x20c>
														{
															c[9]=':';
 800b7b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7b6:	3309      	adds	r3, #9
 800b7b8:	223a      	movs	r2, #58	; 0x3a
 800b7ba:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800b7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7be:	330a      	adds	r3, #10
 800b7c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7c2:	4413      	add	r3, r2
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800b7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ca:	330a      	adds	r3, #10
 800b7cc:	627b      	str	r3, [r7, #36]	; 0x24
 800b7ce:	e010      	b.n	800b7f2 <FT_String_ND+0x22e>
														}
														else
														{
														if (lngd < 1000)
 800b7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b7d6:	da0c      	bge.n	800b7f2 <FT_String_ND+0x22e>
														{
															c[10]=':';
 800b7d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7da:	330a      	adds	r3, #10
 800b7dc:	223a      	movs	r2, #58	; 0x3a
 800b7de:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800b7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e2:	330b      	adds	r3, #11
 800b7e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7e6:	4413      	add	r3, r2
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800b7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ee:	330b      	adds	r3, #11
 800b7f0:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800b7f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7f6:	601a      	str	r2, [r3, #0]
							n4=0;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800b7fc:	e016      	b.n	800b82c <FT_String_ND+0x268>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800b7fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	1ad2      	subs	r2, r2, r3
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b806:	441a      	add	r2, r3
 800b808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80a:	4413      	add	r3, r2
 800b80c:	461a      	mov	r2, r3
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	441a      	add	r2, r3
 800b812:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b814:	69bb      	ldr	r3, [r7, #24]
 800b816:	1ac9      	subs	r1, r1, r3
 800b818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81a:	440b      	add	r3, r1
 800b81c:	4619      	mov	r1, r3
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	440b      	add	r3, r1
 800b822:	7812      	ldrb	r2, [r2, #0]
 800b824:	701a      	strb	r2, [r3, #0]
								n4++;
 800b826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b828:	3301      	adds	r3, #1
 800b82a:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800b82c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	1ad2      	subs	r2, r2, r3
 800b832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b834:	441a      	add	r2, r3
 800b836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b838:	4413      	add	r3, r2
 800b83a:	69fa      	ldr	r2, [r7, #28]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	dade      	bge.n	800b7fe <FT_String_ND+0x23a>
							}
							*an=n+n4-lngb-1;
 800b840:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b844:	441a      	add	r2, r3
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	1e5a      	subs	r2, r3, #1
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800b850:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	1ad2      	subs	r2, r2, r3
 800b856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b858:	441a      	add	r2, r3
 800b85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b85c:	4413      	add	r3, r2
 800b85e:	461a      	mov	r2, r3
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	4413      	add	r3, r2
 800b864:	2200      	movs	r2, #0
 800b866:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800b868:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	1ad2      	subs	r2, r2, r3
 800b86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b870:	4413      	add	r3, r2
 800b872:	461a      	mov	r2, r3
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	4413      	add	r3, r2
 800b878:	2200      	movs	r2, #0
 800b87a:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800b87c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	1ad2      	subs	r2, r2, r3
 800b882:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b886:	440b      	add	r3, r1
 800b888:	429a      	cmp	r2, r3
 800b88a:	d102      	bne.n	800b892 <FT_String_ND+0x2ce>
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2200      	movs	r2, #0
 800b890:	701a      	strb	r2, [r3, #0]
							estado=3;
 800b892:	2303      	movs	r3, #3
 800b894:	623b      	str	r3, [r7, #32]

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800b896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b898:	2b03      	cmp	r3, #3
 800b89a:	d146      	bne.n	800b92a <FT_String_ND+0x366>
 800b89c:	6a3b      	ldr	r3, [r7, #32]
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d143      	bne.n	800b92a <FT_String_ND+0x366>
						{
						n3=0;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800b8a6:	e00e      	b.n	800b8c6 <FT_String_ND+0x302>
									{
										c[n3]=a[*ubicacion+n3-1];
 800b8a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ae:	4413      	add	r3, r2
 800b8b0:	3b01      	subs	r3, #1
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	441a      	add	r2, r3
 800b8b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b8ba:	440b      	add	r3, r1
 800b8bc:	7812      	ldrb	r2, [r2, #0]
 800b8be:	701a      	strb	r2, [r3, #0]
										n3++;
 800b8c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800b8c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	dbec      	blt.n	800b8a8 <FT_String_ND+0x2e4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800b8d2:	e014      	b.n	800b8fe <FT_String_ND+0x33a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800b8d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	441a      	add	r2, r3
 800b8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8de:	4413      	add	r3, r2
 800b8e0:	3b01      	subs	r3, #1
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	441a      	add	r2, r3
 800b8e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8e8:	6819      	ldr	r1, [r3, #0]
 800b8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ec:	440b      	add	r3, r1
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	68f9      	ldr	r1, [r7, #12]
 800b8f2:	440b      	add	r3, r1
 800b8f4:	7812      	ldrb	r2, [r2, #0]
 800b8f6:	701a      	strb	r2, [r3, #0]
										n5++;
 800b8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800b8fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	441a      	add	r2, r3
 800b906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b908:	441a      	add	r2, r3
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	429a      	cmp	r2, r3
 800b910:	dde0      	ble.n	800b8d4 <FT_String_ND+0x310>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800b912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b918:	4413      	add	r3, r2
 800b91a:	1e5a      	subs	r2, r3, #1
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800b920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b924:	601a      	str	r2, [r3, #0]
							estado=3;
 800b926:	2303      	movs	r3, #3
 800b928:	623b      	str	r3, [r7, #32]
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800b92a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b92c:	2b04      	cmp	r3, #4
 800b92e:	f040 80bd 	bne.w	800baac <FT_String_ND+0x4e8>
 800b932:	6a3b      	ldr	r3, [r7, #32]
 800b934:	2b01      	cmp	r3, #1
 800b936:	f040 80b9 	bne.w	800baac <FT_String_ND+0x4e8>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800b93a:	e012      	b.n	800b962 <FT_String_ND+0x39e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800b93c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	1ad2      	subs	r2, r2, r3
 800b942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b944:	4413      	add	r3, r2
 800b946:	461a      	mov	r2, r3
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	441a      	add	r2, r3
 800b94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b950:	440b      	add	r3, r1
 800b952:	7812      	ldrb	r2, [r2, #0]
 800b954:	701a      	strb	r2, [r3, #0]
								n4++;
 800b956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b958:	3301      	adds	r3, #1
 800b95a:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XX:
 800b95c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b95e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b960:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800b962:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b964:	69bb      	ldr	r3, [r7, #24]
 800b966:	1ad2      	subs	r2, r2, r3
 800b968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96a:	4413      	add	r3, r2
 800b96c:	69fa      	ldr	r2, [r7, #28]
 800b96e:	429a      	cmp	r2, r3
 800b970:	dae4      	bge.n	800b93c <FT_String_ND+0x378>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800b972:	4917      	ldr	r1, [pc, #92]	; (800b9d0 <FT_String_ND+0x40c>)
 800b974:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b976:	f000 fc7d 	bl	800c274 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800b97a:	4916      	ldr	r1, [pc, #88]	; (800b9d4 <FT_String_ND+0x410>)
 800b97c:	2000      	movs	r0, #0
 800b97e:	f000 fc79 	bl	800c274 <strtok>
 800b982:	4603      	mov	r3, r0
 800b984:	4618      	mov	r0, r3
 800b986:	f000 fa5a 	bl	800be3e <atoi>
 800b98a:	62b8      	str	r0, [r7, #40]	; 0x28

							if(lngd>=of-1)//if(lngd>=of-1)
 800b98c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b98e:	3b01      	subs	r3, #1
 800b990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b992:	429a      	cmp	r2, r3
 800b994:	db02      	blt.n	800b99c <FT_String_ND+0x3d8>
							{
								lngd=of-1;
 800b996:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b998:	3b01      	subs	r3, #1
 800b99a:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800b99c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b99e:	3306      	adds	r3, #6
 800b9a0:	222c      	movs	r2, #44	; 0x2c
 800b9a2:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800b9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a6:	2b09      	cmp	r3, #9
 800b9a8:	dc07      	bgt.n	800b9ba <FT_String_ND+0x3f6>
											{
												c[8]=':';
 800b9aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9ac:	3308      	adds	r3, #8
 800b9ae:	223a      	movs	r2, #58	; 0x3a
 800b9b0:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800b9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b4:	3309      	adds	r3, #9
 800b9b6:	627b      	str	r3, [r7, #36]	; 0x24
 800b9b8:	e019      	b.n	800b9ee <FT_String_ND+0x42a>
											}
											else{
														if (lngd< 100)
 800b9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9bc:	2b63      	cmp	r3, #99	; 0x63
 800b9be:	dc0b      	bgt.n	800b9d8 <FT_String_ND+0x414>
														{
															c[9]=':';
 800b9c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9c2:	3309      	adds	r3, #9
 800b9c4:	223a      	movs	r2, #58	; 0x3a
 800b9c6:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800b9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ca:	330a      	adds	r3, #10
 800b9cc:	627b      	str	r3, [r7, #36]	; 0x24
 800b9ce:	e00e      	b.n	800b9ee <FT_String_ND+0x42a>
 800b9d0:	0800d940 	.word	0x0800d940
 800b9d4:	0800d944 	.word	0x0800d944
														}
														else
														{
														if (lngd < 1000)
 800b9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b9de:	da06      	bge.n	800b9ee <FT_String_ND+0x42a>
														{
															c[10]=':';
 800b9e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9e2:	330a      	adds	r3, #10
 800b9e4:	223a      	movs	r2, #58	; 0x3a
 800b9e6:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800b9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ea:	330b      	adds	r3, #11
 800b9ec:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800b9ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9f2:	601a      	str	r2, [r3, #0]
							n4=0;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800b9f8:	e016      	b.n	800ba28 <FT_String_ND+0x464>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800b9fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b9fc:	69bb      	ldr	r3, [r7, #24]
 800b9fe:	1ad2      	subs	r2, r2, r3
 800ba00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba02:	441a      	add	r2, r3
 800ba04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba06:	4413      	add	r3, r2
 800ba08:	461a      	mov	r2, r3
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	441a      	add	r2, r3
 800ba0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba10:	69bb      	ldr	r3, [r7, #24]
 800ba12:	1ac9      	subs	r1, r1, r3
 800ba14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba16:	440b      	add	r3, r1
 800ba18:	4619      	mov	r1, r3
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	440b      	add	r3, r1
 800ba1e:	7812      	ldrb	r2, [r2, #0]
 800ba20:	701a      	strb	r2, [r3, #0]
								n4++;
 800ba22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba24:	3301      	adds	r3, #1
 800ba26:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ba28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	1ad2      	subs	r2, r2, r3
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba30:	441a      	add	r2, r3
 800ba32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba34:	4413      	add	r3, r2
 800ba36:	69fa      	ldr	r2, [r7, #28]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	dade      	bge.n	800b9fa <FT_String_ND+0x436>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800ba3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba40:	441a      	add	r2, r3
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	1ad3      	subs	r3, r2, r3
 800ba46:	1e5a      	subs	r2, r3, #1
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	601a      	str	r2, [r3, #0]
							n5=0;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ba50:	e00f      	b.n	800ba72 <FT_String_ND+0x4ae>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800ba52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba56:	1ad2      	subs	r2, r2, r3
 800ba58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5a:	4413      	add	r3, r2
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba60:	441a      	add	r2, r3
 800ba62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba64:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ba66:	440b      	add	r3, r1
 800ba68:	7812      	ldrb	r2, [r2, #0]
 800ba6a:	701a      	strb	r2, [r3, #0]
								n5++;
 800ba6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba6e:	3301      	adds	r3, #1
 800ba70:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ba72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba76:	1ad2      	subs	r2, r2, r3
 800ba78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7a:	441a      	add	r2, r3
 800ba7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	dbe6      	blt.n	800ba52 <FT_String_ND+0x48e>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800ba84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba88:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800ba8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba90:	441a      	add	r2, r3
 800ba92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba94:	1ad2      	subs	r2, r2, r3
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	69fa      	ldr	r2, [r7, #28]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d102      	bne.n	800baa8 <FT_String_ND+0x4e4>
							{
								estado=4;
 800baa2:	2304      	movs	r3, #4
 800baa4:	623b      	str	r3, [r7, #32]
 800baa6:	e001      	b.n	800baac <FT_String_ND+0x4e8>

							}
							else
							{
								estado=5;
 800baa8:	2305      	movs	r3, #5
 800baaa:	623b      	str	r3, [r7, #32]
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800baac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800baae:	2b05      	cmp	r3, #5
 800bab0:	f040 80c5 	bne.w	800bc3e <FT_String_ND+0x67a>
 800bab4:	6a3b      	ldr	r3, [r7, #32]
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	f040 80c1 	bne.w	800bc3e <FT_String_ND+0x67a>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800babc:	e012      	b.n	800bae4 <FT_String_ND+0x520>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800babe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bac0:	69bb      	ldr	r3, [r7, #24]
 800bac2:	1ad2      	subs	r2, r2, r3
 800bac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac6:	4413      	add	r3, r2
 800bac8:	461a      	mov	r2, r3
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	441a      	add	r2, r3
 800bace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bad2:	440b      	add	r3, r1
 800bad4:	7812      	ldrb	r2, [r2, #0]
 800bad6:	701a      	strb	r2, [r3, #0]
								n4++;
 800bad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bada:	3301      	adds	r3, #1
 800badc:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800bade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bae2:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800bae4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	1ad2      	subs	r2, r2, r3
 800baea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baec:	4413      	add	r3, r2
 800baee:	69fa      	ldr	r2, [r7, #28]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	dae4      	bge.n	800babe <FT_String_ND+0x4fa>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800baf4:	4955      	ldr	r1, [pc, #340]	; (800bc4c <FT_String_ND+0x688>)
 800baf6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800baf8:	f000 fbbc 	bl	800c274 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800bafc:	4954      	ldr	r1, [pc, #336]	; (800bc50 <FT_String_ND+0x68c>)
 800bafe:	2000      	movs	r0, #0
 800bb00:	f000 fbb8 	bl	800c274 <strtok>
 800bb04:	4603      	mov	r3, r0
 800bb06:	4618      	mov	r0, r3
 800bb08:	f000 f999 	bl	800be3e <atoi>
 800bb0c:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800bb0e:	4950      	ldr	r1, [pc, #320]	; (800bc50 <FT_String_ND+0x68c>)
 800bb10:	2000      	movs	r0, #0
 800bb12:	f000 fbaf 	bl	800c274 <strtok>
 800bb16:	4603      	mov	r3, r0
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f000 f990 	bl	800be3e <atoi>
 800bb1e:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800bb20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb22:	3b01      	subs	r3, #1
 800bb24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb26:	429a      	cmp	r2, r3
 800bb28:	db02      	blt.n	800bb30 <FT_String_ND+0x56c>
							{
								lngd=of-1;
 800bb2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb2c:	3b01      	subs	r3, #1
 800bb2e:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800bb30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb32:	3306      	adds	r3, #6
 800bb34:	222c      	movs	r2, #44	; 0x2c
 800bb36:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800bb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3a:	2b09      	cmp	r3, #9
 800bb3c:	dc07      	bgt.n	800bb4e <FT_String_ND+0x58a>
											{
												c[10]=':';
 800bb3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb40:	330a      	adds	r3, #10
 800bb42:	223a      	movs	r2, #58	; 0x3a
 800bb44:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800bb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb48:	330b      	adds	r3, #11
 800bb4a:	627b      	str	r3, [r7, #36]	; 0x24
 800bb4c:	e015      	b.n	800bb7a <FT_String_ND+0x5b6>
											}
											else{
														if (lngd< 100)
 800bb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb50:	2b63      	cmp	r3, #99	; 0x63
 800bb52:	dc07      	bgt.n	800bb64 <FT_String_ND+0x5a0>
														{
															c[11]=':';
 800bb54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb56:	330b      	adds	r3, #11
 800bb58:	223a      	movs	r2, #58	; 0x3a
 800bb5a:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800bb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5e:	330c      	adds	r3, #12
 800bb60:	627b      	str	r3, [r7, #36]	; 0x24
 800bb62:	e00a      	b.n	800bb7a <FT_String_ND+0x5b6>
														}
														else
														{
														if (lngd < 1000)
 800bb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb6a:	da06      	bge.n	800bb7a <FT_String_ND+0x5b6>
														{
															c[12]=':';
 800bb6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb6e:	330c      	adds	r3, #12
 800bb70:	223a      	movs	r2, #58	; 0x3a
 800bb72:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800bb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb76:	330d      	adds	r3, #13
 800bb78:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800bb7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb7e:	601a      	str	r2, [r3, #0]
							n4=0;
 800bb80:	2300      	movs	r3, #0
 800bb82:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800bb84:	e016      	b.n	800bbb4 <FT_String_ND+0x5f0>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800bb86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb88:	69bb      	ldr	r3, [r7, #24]
 800bb8a:	1ad2      	subs	r2, r2, r3
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8e:	441a      	add	r2, r3
 800bb90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb92:	4413      	add	r3, r2
 800bb94:	461a      	mov	r2, r3
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	441a      	add	r2, r3
 800bb9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb9c:	69bb      	ldr	r3, [r7, #24]
 800bb9e:	1ac9      	subs	r1, r1, r3
 800bba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba2:	440b      	add	r3, r1
 800bba4:	4619      	mov	r1, r3
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	440b      	add	r3, r1
 800bbaa:	7812      	ldrb	r2, [r2, #0]
 800bbac:	701a      	strb	r2, [r3, #0]
								n4++;
 800bbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800bbb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	1ad2      	subs	r2, r2, r3
 800bbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbbc:	441a      	add	r2, r3
 800bbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc0:	4413      	add	r3, r2
 800bbc2:	69fa      	ldr	r2, [r7, #28]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	dade      	bge.n	800bb86 <FT_String_ND+0x5c2>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800bbc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbcc:	441a      	add	r2, r3
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	1ad3      	subs	r3, r2, r3
 800bbd2:	1e5a      	subs	r2, r3, #1
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	601a      	str	r2, [r3, #0]
							n5=0;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800bbdc:	e00f      	b.n	800bbfe <FT_String_ND+0x63a>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800bbde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe2:	1ad2      	subs	r2, r2, r3
 800bbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe6:	4413      	add	r3, r2
 800bbe8:	461a      	mov	r2, r3
 800bbea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbec:	441a      	add	r2, r3
 800bbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bbf2:	440b      	add	r3, r1
 800bbf4:	7812      	ldrb	r2, [r2, #0]
 800bbf6:	701a      	strb	r2, [r3, #0]
								n5++;
 800bbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800bbfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc02:	1ad2      	subs	r2, r2, r3
 800bc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc06:	441a      	add	r2, r3
 800bc08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	dbe6      	blt.n	800bbde <FT_String_ND+0x61a>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800bc10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc14:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800bc16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1c:	441a      	add	r2, r3
 800bc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc20:	1ad2      	subs	r2, r2, r3
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4413      	add	r3, r2
 800bc28:	69fa      	ldr	r2, [r7, #28]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d105      	bne.n	800bc3a <FT_String_ND+0x676>
							{
								estado=4;
 800bc2e:	2304      	movs	r3, #4
 800bc30:	623b      	str	r3, [r7, #32]
								*idcom=cliente;
 800bc32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc34:	693a      	ldr	r2, [r7, #16]
 800bc36:	601a      	str	r2, [r3, #0]
 800bc38:	e001      	b.n	800bc3e <FT_String_ND+0x67a>
							}
							else
							{
								estado=5;
 800bc3a:	2305      	movs	r3, #5
 800bc3c:	623b      	str	r3, [r7, #32]
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800bc3e:	6a3b      	ldr	r3, [r7, #32]
 800bc40:	e000      	b.n	800bc44 <FT_String_ND+0x680>
					}
			}
			else
			{
				return(2);
 800bc42:	2302      	movs	r3, #2
			}
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3740      	adds	r7, #64	; 0x40
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	0800d940 	.word	0x0800d940
 800bc50:	0800d944 	.word	0x0800d944

0800bc54 <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b088      	sub	sp, #32
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800bc5e:	2330      	movs	r3, #48	; 0x30
 800bc60:	60bb      	str	r3, [r7, #8]
 800bc62:	f107 030c 	add.w	r3, r7, #12
 800bc66:	2200      	movs	r2, #0
 800bc68:	601a      	str	r2, [r3, #0]
 800bc6a:	605a      	str	r2, [r3, #4]
 800bc6c:	609a      	str	r2, [r3, #8]
 800bc6e:	60da      	str	r2, [r3, #12]
int i=0;	
 800bc70:	2300      	movs	r3, #0
 800bc72:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800bc74:	f107 0308 	add.w	r3, r7, #8
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	490f      	ldr	r1, [pc, #60]	; (800bcb8 <INTOA+0x64>)
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f000 fa7b 	bl	800c178 <siprintf>
		while(i<=strlen(origbuff))
 800bc82:	e00b      	b.n	800bc9c <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	1c5a      	adds	r2, r3, #1
 800bc88:	603a      	str	r2, [r7, #0]
 800bc8a:	f107 0108 	add.w	r1, r7, #8
 800bc8e:	69fa      	ldr	r2, [r7, #28]
 800bc90:	440a      	add	r2, r1
 800bc92:	7812      	ldrb	r2, [r2, #0]
 800bc94:	701a      	strb	r2, [r3, #0]
		i++;
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	3301      	adds	r3, #1
 800bc9a:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800bc9c:	f107 0308 	add.w	r3, r7, #8
 800bca0:	4618      	mov	r0, r3
 800bca2:	f7f4 faa7 	bl	80001f4 <strlen>
 800bca6:	4602      	mov	r2, r0
 800bca8:	69fb      	ldr	r3, [r7, #28]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d2ea      	bcs.n	800bc84 <INTOA+0x30>
		}
		return(i);
 800bcae:	69fb      	ldr	r3, [r7, #28]
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3720      	adds	r7, #32
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	0800d948 	.word	0x0800d948

0800bcbc <FTOA>:

int FTOA( int a,  unsigned char *v1, int comma)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b08c      	sub	sp, #48	; 0x30
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
//char origbuff[20]="0";
char origbuff[20];
origbuff[0]='\0';
 800bcc8:	2300      	movs	r3, #0
 800bcca:	753b      	strb	r3, [r7, #20]

int i=0;
 800bccc:	2300      	movs	r3, #0
 800bcce:	62fb      	str	r3, [r7, #44]	; 0x2c
int b=0;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	62bb      	str	r3, [r7, #40]	; 0x28

		sprintf(origbuff,"%i",a); 	//Paso el entreo a cadena de caracteres
 800bcd4:	f107 0314 	add.w	r3, r7, #20
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	4932      	ldr	r1, [pc, #200]	; (800bda4 <FTOA+0xe8>)
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f000 fa4b 	bl	800c178 <siprintf>
		b=strlen(origbuff);
 800bce2:	f107 0314 	add.w	r3, r7, #20
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7f4 fa84 	bl	80001f4 <strlen>
 800bcec:	4603      	mov	r3, r0
 800bcee:	62bb      	str	r3, [r7, #40]	; 0x28
		if(comma<b)					//Si la posición de la coma es menor a la posición de los caracteres ejemplo int= 2 comma=0 resultado = 0,02
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	da25      	bge.n	800bd44 <FTOA+0x88>
		{
			while(i<=((b)+1))
 800bcf8:	e01d      	b.n	800bd36 <FTOA+0x7a>
			{
				if((i==(b-comma))&&(comma<(b))&&(comma!=0))
 800bcfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	1ad3      	subs	r3, r2, r3
 800bd00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d10b      	bne.n	800bd1e <FTOA+0x62>
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	da07      	bge.n	800bd1e <FTOA+0x62>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d004      	beq.n	800bd1e <FTOA+0x62>
				{
					*v1++='.';
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	1c5a      	adds	r2, r3, #1
 800bd18:	60ba      	str	r2, [r7, #8]
 800bd1a:	222e      	movs	r2, #46	; 0x2e
 800bd1c:	701a      	strb	r2, [r3, #0]
				}
				*v1++=(unsigned char)origbuff[i];
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	1c5a      	adds	r2, r3, #1
 800bd22:	60ba      	str	r2, [r7, #8]
 800bd24:	f107 0114 	add.w	r1, r7, #20
 800bd28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd2a:	440a      	add	r2, r1
 800bd2c:	7812      	ldrb	r2, [r2, #0]
 800bd2e:	701a      	strb	r2, [r3, #0]
				i++;
 800bd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd32:	3301      	adds	r3, #1
 800bd34:	62fb      	str	r3, [r7, #44]	; 0x2c
			while(i<=((b)+1))
 800bd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd38:	3301      	adds	r3, #1
 800bd3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	dddc      	ble.n	800bcfa <FTOA+0x3e>
			}
			//*v1++='\0';
			return(i);
 800bd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd42:	e02a      	b.n	800bd9a <FTOA+0xde>
		  }
		else
		{
			if(b==1)
 800bd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d10f      	bne.n	800bd6a <FTOA+0xae>
			{
				v1[0]='0';
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	2230      	movs	r2, #48	; 0x30
 800bd4e:	701a      	strb	r2, [r3, #0]
				v1[1]='.';
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	3301      	adds	r3, #1
 800bd54:	222e      	movs	r2, #46	; 0x2e
 800bd56:	701a      	strb	r2, [r3, #0]
				v1[2]=origbuff[0];
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	3302      	adds	r3, #2
 800bd5c:	7d3a      	ldrb	r2, [r7, #20]
 800bd5e:	701a      	strb	r2, [r3, #0]
				v1[3]='\0';
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	3303      	adds	r3, #3
 800bd64:	2200      	movs	r2, #0
 800bd66:	701a      	strb	r2, [r3, #0]
 800bd68:	e016      	b.n	800bd98 <FTOA+0xdc>
			}
			else
			{
				if(b==0)
 800bd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d113      	bne.n	800bd98 <FTOA+0xdc>
				{
					*v1++='0';
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	1c5a      	adds	r2, r3, #1
 800bd74:	60ba      	str	r2, [r7, #8]
 800bd76:	2230      	movs	r2, #48	; 0x30
 800bd78:	701a      	strb	r2, [r3, #0]
					*v1++='.';
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	1c5a      	adds	r2, r3, #1
 800bd7e:	60ba      	str	r2, [r7, #8]
 800bd80:	222e      	movs	r2, #46	; 0x2e
 800bd82:	701a      	strb	r2, [r3, #0]
					*v1++='0';
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	1c5a      	adds	r2, r3, #1
 800bd88:	60ba      	str	r2, [r7, #8]
 800bd8a:	2230      	movs	r2, #48	; 0x30
 800bd8c:	701a      	strb	r2, [r3, #0]
					*v1++='\0';
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	1c5a      	adds	r2, r3, #1
 800bd92:	60ba      	str	r2, [r7, #8]
 800bd94:	2200      	movs	r2, #0
 800bd96:	701a      	strb	r2, [r3, #0]
				}
			}

		}

		return(0);
 800bd98:	2300      	movs	r3, #0
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3730      	adds	r7, #48	; 0x30
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	0800d948 	.word	0x0800d948

0800bda8 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b088      	sub	sp, #32
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
 800bdb4:	603b      	str	r3, [r7, #0]
int x =0;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800bdba:	2300      	movs	r3, #0
 800bdbc:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800bdbe:	f107 0310 	add.w	r3, r7, #16
 800bdc2:	617b      	str	r3, [r7, #20]
if (c==0) x=strlen(b);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d105      	bne.n	800bdd6 <CopiaVector+0x2e>
 800bdca:	68b8      	ldr	r0, [r7, #8]
 800bdcc:	f7f4 fa12 	bl	80001f4 <strlen>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	61bb      	str	r3, [r7, #24]
 800bdd4:	e02e      	b.n	800be34 <CopiaVector+0x8c>
else
	{
		x=c;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	61bb      	str	r3, [r7, #24]
		if (x>1024)// OJO SOLO HTTP if (x>128) (x>512)
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bde0:	dd01      	ble.n	800bde6 <CopiaVector+0x3e>
			{
				return(1);
 800bde2:	2301      	movs	r3, #1
 800bde4:	e027      	b.n	800be36 <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800bde6:	2300      	movs	r3, #0
 800bde8:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800bdea:	e00a      	b.n	800be02 <CopiaVector+0x5a>
				{
					*a++=*b++;
 800bdec:	68ba      	ldr	r2, [r7, #8]
 800bdee:	1c53      	adds	r3, r2, #1
 800bdf0:	60bb      	str	r3, [r7, #8]
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	1c59      	adds	r1, r3, #1
 800bdf6:	60f9      	str	r1, [r7, #12]
 800bdf8:	7812      	ldrb	r2, [r2, #0]
 800bdfa:	701a      	strb	r2, [r3, #0]
					p++;
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	3301      	adds	r3, #1
 800be00:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800be02:	69fa      	ldr	r2, [r7, #28]
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	429a      	cmp	r2, r3
 800be08:	dbf0      	blt.n	800bdec <CopiaVector+0x44>
				}
				if (d==1)
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d111      	bne.n	800be34 <CopiaVector+0x8c>
				{
				  p=c;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800be14:	e008      	b.n	800be28 <CopiaVector+0x80>
				  {
					  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	1c5a      	adds	r2, r3, #1
 800be1a:	60fa      	str	r2, [r7, #12]
 800be1c:	697a      	ldr	r2, [r7, #20]
 800be1e:	7812      	ldrb	r2, [r2, #0]
 800be20:	701a      	strb	r2, [r3, #0]
					  p++;
 800be22:	69fb      	ldr	r3, [r7, #28]
 800be24:	3301      	adds	r3, #1
 800be26:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	daf2      	bge.n	800be16 <CopiaVector+0x6e>
				  }
				return (0);
 800be30:	2300      	movs	r3, #0
 800be32:	e000      	b.n	800be36 <CopiaVector+0x8e>
				}
			}
	}
return (1);
 800be34:	2301      	movs	r3, #1
}
 800be36:	4618      	mov	r0, r3
 800be38:	3720      	adds	r7, #32
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <atoi>:
 800be3e:	220a      	movs	r2, #10
 800be40:	2100      	movs	r1, #0
 800be42:	f000 b89d 	b.w	800bf80 <strtol>

0800be46 <__itoa>:
 800be46:	1e93      	subs	r3, r2, #2
 800be48:	2b22      	cmp	r3, #34	; 0x22
 800be4a:	b510      	push	{r4, lr}
 800be4c:	460c      	mov	r4, r1
 800be4e:	d904      	bls.n	800be5a <__itoa+0x14>
 800be50:	2300      	movs	r3, #0
 800be52:	700b      	strb	r3, [r1, #0]
 800be54:	461c      	mov	r4, r3
 800be56:	4620      	mov	r0, r4
 800be58:	bd10      	pop	{r4, pc}
 800be5a:	2a0a      	cmp	r2, #10
 800be5c:	d109      	bne.n	800be72 <__itoa+0x2c>
 800be5e:	2800      	cmp	r0, #0
 800be60:	da07      	bge.n	800be72 <__itoa+0x2c>
 800be62:	232d      	movs	r3, #45	; 0x2d
 800be64:	700b      	strb	r3, [r1, #0]
 800be66:	4240      	negs	r0, r0
 800be68:	2101      	movs	r1, #1
 800be6a:	4421      	add	r1, r4
 800be6c:	f000 f892 	bl	800bf94 <__utoa>
 800be70:	e7f1      	b.n	800be56 <__itoa+0x10>
 800be72:	2100      	movs	r1, #0
 800be74:	e7f9      	b.n	800be6a <__itoa+0x24>

0800be76 <itoa>:
 800be76:	f7ff bfe6 	b.w	800be46 <__itoa>
	...

0800be7c <_strtol_l.constprop.0>:
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be82:	d001      	beq.n	800be88 <_strtol_l.constprop.0+0xc>
 800be84:	2b24      	cmp	r3, #36	; 0x24
 800be86:	d906      	bls.n	800be96 <_strtol_l.constprop.0+0x1a>
 800be88:	f000 fa96 	bl	800c3b8 <__errno>
 800be8c:	2316      	movs	r3, #22
 800be8e:	6003      	str	r3, [r0, #0]
 800be90:	2000      	movs	r0, #0
 800be92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be96:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bf7c <_strtol_l.constprop.0+0x100>
 800be9a:	460d      	mov	r5, r1
 800be9c:	462e      	mov	r6, r5
 800be9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bea2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800bea6:	f017 0708 	ands.w	r7, r7, #8
 800beaa:	d1f7      	bne.n	800be9c <_strtol_l.constprop.0+0x20>
 800beac:	2c2d      	cmp	r4, #45	; 0x2d
 800beae:	d132      	bne.n	800bf16 <_strtol_l.constprop.0+0x9a>
 800beb0:	782c      	ldrb	r4, [r5, #0]
 800beb2:	2701      	movs	r7, #1
 800beb4:	1cb5      	adds	r5, r6, #2
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d05b      	beq.n	800bf72 <_strtol_l.constprop.0+0xf6>
 800beba:	2b10      	cmp	r3, #16
 800bebc:	d109      	bne.n	800bed2 <_strtol_l.constprop.0+0x56>
 800bebe:	2c30      	cmp	r4, #48	; 0x30
 800bec0:	d107      	bne.n	800bed2 <_strtol_l.constprop.0+0x56>
 800bec2:	782c      	ldrb	r4, [r5, #0]
 800bec4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bec8:	2c58      	cmp	r4, #88	; 0x58
 800beca:	d14d      	bne.n	800bf68 <_strtol_l.constprop.0+0xec>
 800becc:	786c      	ldrb	r4, [r5, #1]
 800bece:	2310      	movs	r3, #16
 800bed0:	3502      	adds	r5, #2
 800bed2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bed6:	f108 38ff 	add.w	r8, r8, #4294967295
 800beda:	f04f 0e00 	mov.w	lr, #0
 800bede:	fbb8 f9f3 	udiv	r9, r8, r3
 800bee2:	4676      	mov	r6, lr
 800bee4:	fb03 8a19 	mls	sl, r3, r9, r8
 800bee8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800beec:	f1bc 0f09 	cmp.w	ip, #9
 800bef0:	d816      	bhi.n	800bf20 <_strtol_l.constprop.0+0xa4>
 800bef2:	4664      	mov	r4, ip
 800bef4:	42a3      	cmp	r3, r4
 800bef6:	dd24      	ble.n	800bf42 <_strtol_l.constprop.0+0xc6>
 800bef8:	f1be 3fff 	cmp.w	lr, #4294967295
 800befc:	d008      	beq.n	800bf10 <_strtol_l.constprop.0+0x94>
 800befe:	45b1      	cmp	r9, r6
 800bf00:	d31c      	bcc.n	800bf3c <_strtol_l.constprop.0+0xc0>
 800bf02:	d101      	bne.n	800bf08 <_strtol_l.constprop.0+0x8c>
 800bf04:	45a2      	cmp	sl, r4
 800bf06:	db19      	blt.n	800bf3c <_strtol_l.constprop.0+0xc0>
 800bf08:	fb06 4603 	mla	r6, r6, r3, r4
 800bf0c:	f04f 0e01 	mov.w	lr, #1
 800bf10:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf14:	e7e8      	b.n	800bee8 <_strtol_l.constprop.0+0x6c>
 800bf16:	2c2b      	cmp	r4, #43	; 0x2b
 800bf18:	bf04      	itt	eq
 800bf1a:	782c      	ldrbeq	r4, [r5, #0]
 800bf1c:	1cb5      	addeq	r5, r6, #2
 800bf1e:	e7ca      	b.n	800beb6 <_strtol_l.constprop.0+0x3a>
 800bf20:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bf24:	f1bc 0f19 	cmp.w	ip, #25
 800bf28:	d801      	bhi.n	800bf2e <_strtol_l.constprop.0+0xb2>
 800bf2a:	3c37      	subs	r4, #55	; 0x37
 800bf2c:	e7e2      	b.n	800bef4 <_strtol_l.constprop.0+0x78>
 800bf2e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bf32:	f1bc 0f19 	cmp.w	ip, #25
 800bf36:	d804      	bhi.n	800bf42 <_strtol_l.constprop.0+0xc6>
 800bf38:	3c57      	subs	r4, #87	; 0x57
 800bf3a:	e7db      	b.n	800bef4 <_strtol_l.constprop.0+0x78>
 800bf3c:	f04f 3eff 	mov.w	lr, #4294967295
 800bf40:	e7e6      	b.n	800bf10 <_strtol_l.constprop.0+0x94>
 800bf42:	f1be 3fff 	cmp.w	lr, #4294967295
 800bf46:	d105      	bne.n	800bf54 <_strtol_l.constprop.0+0xd8>
 800bf48:	2322      	movs	r3, #34	; 0x22
 800bf4a:	6003      	str	r3, [r0, #0]
 800bf4c:	4646      	mov	r6, r8
 800bf4e:	b942      	cbnz	r2, 800bf62 <_strtol_l.constprop.0+0xe6>
 800bf50:	4630      	mov	r0, r6
 800bf52:	e79e      	b.n	800be92 <_strtol_l.constprop.0+0x16>
 800bf54:	b107      	cbz	r7, 800bf58 <_strtol_l.constprop.0+0xdc>
 800bf56:	4276      	negs	r6, r6
 800bf58:	2a00      	cmp	r2, #0
 800bf5a:	d0f9      	beq.n	800bf50 <_strtol_l.constprop.0+0xd4>
 800bf5c:	f1be 0f00 	cmp.w	lr, #0
 800bf60:	d000      	beq.n	800bf64 <_strtol_l.constprop.0+0xe8>
 800bf62:	1e69      	subs	r1, r5, #1
 800bf64:	6011      	str	r1, [r2, #0]
 800bf66:	e7f3      	b.n	800bf50 <_strtol_l.constprop.0+0xd4>
 800bf68:	2430      	movs	r4, #48	; 0x30
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d1b1      	bne.n	800bed2 <_strtol_l.constprop.0+0x56>
 800bf6e:	2308      	movs	r3, #8
 800bf70:	e7af      	b.n	800bed2 <_strtol_l.constprop.0+0x56>
 800bf72:	2c30      	cmp	r4, #48	; 0x30
 800bf74:	d0a5      	beq.n	800bec2 <_strtol_l.constprop.0+0x46>
 800bf76:	230a      	movs	r3, #10
 800bf78:	e7ab      	b.n	800bed2 <_strtol_l.constprop.0+0x56>
 800bf7a:	bf00      	nop
 800bf7c:	0800d98a 	.word	0x0800d98a

0800bf80 <strtol>:
 800bf80:	4613      	mov	r3, r2
 800bf82:	460a      	mov	r2, r1
 800bf84:	4601      	mov	r1, r0
 800bf86:	4802      	ldr	r0, [pc, #8]	; (800bf90 <strtol+0x10>)
 800bf88:	6800      	ldr	r0, [r0, #0]
 800bf8a:	f7ff bf77 	b.w	800be7c <_strtol_l.constprop.0>
 800bf8e:	bf00      	nop
 800bf90:	20000194 	.word	0x20000194

0800bf94 <__utoa>:
 800bf94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf96:	4c1f      	ldr	r4, [pc, #124]	; (800c014 <__utoa+0x80>)
 800bf98:	b08b      	sub	sp, #44	; 0x2c
 800bf9a:	4605      	mov	r5, r0
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	466e      	mov	r6, sp
 800bfa0:	f104 0c20 	add.w	ip, r4, #32
 800bfa4:	6820      	ldr	r0, [r4, #0]
 800bfa6:	6861      	ldr	r1, [r4, #4]
 800bfa8:	4637      	mov	r7, r6
 800bfaa:	c703      	stmia	r7!, {r0, r1}
 800bfac:	3408      	adds	r4, #8
 800bfae:	4564      	cmp	r4, ip
 800bfb0:	463e      	mov	r6, r7
 800bfb2:	d1f7      	bne.n	800bfa4 <__utoa+0x10>
 800bfb4:	7921      	ldrb	r1, [r4, #4]
 800bfb6:	7139      	strb	r1, [r7, #4]
 800bfb8:	1e91      	subs	r1, r2, #2
 800bfba:	6820      	ldr	r0, [r4, #0]
 800bfbc:	6038      	str	r0, [r7, #0]
 800bfbe:	2922      	cmp	r1, #34	; 0x22
 800bfc0:	f04f 0100 	mov.w	r1, #0
 800bfc4:	d904      	bls.n	800bfd0 <__utoa+0x3c>
 800bfc6:	7019      	strb	r1, [r3, #0]
 800bfc8:	460b      	mov	r3, r1
 800bfca:	4618      	mov	r0, r3
 800bfcc:	b00b      	add	sp, #44	; 0x2c
 800bfce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfd0:	1e58      	subs	r0, r3, #1
 800bfd2:	4684      	mov	ip, r0
 800bfd4:	fbb5 f7f2 	udiv	r7, r5, r2
 800bfd8:	fb02 5617 	mls	r6, r2, r7, r5
 800bfdc:	3628      	adds	r6, #40	; 0x28
 800bfde:	446e      	add	r6, sp
 800bfe0:	460c      	mov	r4, r1
 800bfe2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800bfe6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800bfea:	462e      	mov	r6, r5
 800bfec:	42b2      	cmp	r2, r6
 800bfee:	f101 0101 	add.w	r1, r1, #1
 800bff2:	463d      	mov	r5, r7
 800bff4:	d9ee      	bls.n	800bfd4 <__utoa+0x40>
 800bff6:	2200      	movs	r2, #0
 800bff8:	545a      	strb	r2, [r3, r1]
 800bffa:	1919      	adds	r1, r3, r4
 800bffc:	1aa5      	subs	r5, r4, r2
 800bffe:	42aa      	cmp	r2, r5
 800c000:	dae3      	bge.n	800bfca <__utoa+0x36>
 800c002:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c006:	780e      	ldrb	r6, [r1, #0]
 800c008:	7006      	strb	r6, [r0, #0]
 800c00a:	3201      	adds	r2, #1
 800c00c:	f801 5901 	strb.w	r5, [r1], #-1
 800c010:	e7f4      	b.n	800bffc <__utoa+0x68>
 800c012:	bf00      	nop
 800c014:	0800d964 	.word	0x0800d964

0800c018 <std>:
 800c018:	2300      	movs	r3, #0
 800c01a:	b510      	push	{r4, lr}
 800c01c:	4604      	mov	r4, r0
 800c01e:	e9c0 3300 	strd	r3, r3, [r0]
 800c022:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c026:	6083      	str	r3, [r0, #8]
 800c028:	8181      	strh	r1, [r0, #12]
 800c02a:	6643      	str	r3, [r0, #100]	; 0x64
 800c02c:	81c2      	strh	r2, [r0, #14]
 800c02e:	6183      	str	r3, [r0, #24]
 800c030:	4619      	mov	r1, r3
 800c032:	2208      	movs	r2, #8
 800c034:	305c      	adds	r0, #92	; 0x5c
 800c036:	f000 f902 	bl	800c23e <memset>
 800c03a:	4b05      	ldr	r3, [pc, #20]	; (800c050 <std+0x38>)
 800c03c:	6263      	str	r3, [r4, #36]	; 0x24
 800c03e:	4b05      	ldr	r3, [pc, #20]	; (800c054 <std+0x3c>)
 800c040:	62a3      	str	r3, [r4, #40]	; 0x28
 800c042:	4b05      	ldr	r3, [pc, #20]	; (800c058 <std+0x40>)
 800c044:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c046:	4b05      	ldr	r3, [pc, #20]	; (800c05c <std+0x44>)
 800c048:	6224      	str	r4, [r4, #32]
 800c04a:	6323      	str	r3, [r4, #48]	; 0x30
 800c04c:	bd10      	pop	{r4, pc}
 800c04e:	bf00      	nop
 800c050:	0800c1b9 	.word	0x0800c1b9
 800c054:	0800c1db 	.word	0x0800c1db
 800c058:	0800c213 	.word	0x0800c213
 800c05c:	0800c237 	.word	0x0800c237

0800c060 <stdio_exit_handler>:
 800c060:	4a02      	ldr	r2, [pc, #8]	; (800c06c <stdio_exit_handler+0xc>)
 800c062:	4903      	ldr	r1, [pc, #12]	; (800c070 <stdio_exit_handler+0x10>)
 800c064:	4803      	ldr	r0, [pc, #12]	; (800c074 <stdio_exit_handler+0x14>)
 800c066:	f000 b869 	b.w	800c13c <_fwalk_sglue>
 800c06a:	bf00      	nop
 800c06c:	2000013c 	.word	0x2000013c
 800c070:	0800cd39 	.word	0x0800cd39
 800c074:	20000148 	.word	0x20000148

0800c078 <cleanup_stdio>:
 800c078:	6841      	ldr	r1, [r0, #4]
 800c07a:	4b0c      	ldr	r3, [pc, #48]	; (800c0ac <cleanup_stdio+0x34>)
 800c07c:	4299      	cmp	r1, r3
 800c07e:	b510      	push	{r4, lr}
 800c080:	4604      	mov	r4, r0
 800c082:	d001      	beq.n	800c088 <cleanup_stdio+0x10>
 800c084:	f000 fe58 	bl	800cd38 <_fflush_r>
 800c088:	68a1      	ldr	r1, [r4, #8]
 800c08a:	4b09      	ldr	r3, [pc, #36]	; (800c0b0 <cleanup_stdio+0x38>)
 800c08c:	4299      	cmp	r1, r3
 800c08e:	d002      	beq.n	800c096 <cleanup_stdio+0x1e>
 800c090:	4620      	mov	r0, r4
 800c092:	f000 fe51 	bl	800cd38 <_fflush_r>
 800c096:	68e1      	ldr	r1, [r4, #12]
 800c098:	4b06      	ldr	r3, [pc, #24]	; (800c0b4 <cleanup_stdio+0x3c>)
 800c09a:	4299      	cmp	r1, r3
 800c09c:	d004      	beq.n	800c0a8 <cleanup_stdio+0x30>
 800c09e:	4620      	mov	r0, r4
 800c0a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0a4:	f000 be48 	b.w	800cd38 <_fflush_r>
 800c0a8:	bd10      	pop	{r4, pc}
 800c0aa:	bf00      	nop
 800c0ac:	20002d58 	.word	0x20002d58
 800c0b0:	20002dc0 	.word	0x20002dc0
 800c0b4:	20002e28 	.word	0x20002e28

0800c0b8 <global_stdio_init.part.0>:
 800c0b8:	b510      	push	{r4, lr}
 800c0ba:	4b0b      	ldr	r3, [pc, #44]	; (800c0e8 <global_stdio_init.part.0+0x30>)
 800c0bc:	4c0b      	ldr	r4, [pc, #44]	; (800c0ec <global_stdio_init.part.0+0x34>)
 800c0be:	4a0c      	ldr	r2, [pc, #48]	; (800c0f0 <global_stdio_init.part.0+0x38>)
 800c0c0:	601a      	str	r2, [r3, #0]
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	2104      	movs	r1, #4
 800c0c8:	f7ff ffa6 	bl	800c018 <std>
 800c0cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	2109      	movs	r1, #9
 800c0d4:	f7ff ffa0 	bl	800c018 <std>
 800c0d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c0dc:	2202      	movs	r2, #2
 800c0de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0e2:	2112      	movs	r1, #18
 800c0e4:	f7ff bf98 	b.w	800c018 <std>
 800c0e8:	20002e90 	.word	0x20002e90
 800c0ec:	20002d58 	.word	0x20002d58
 800c0f0:	0800c061 	.word	0x0800c061

0800c0f4 <__sfp_lock_acquire>:
 800c0f4:	4801      	ldr	r0, [pc, #4]	; (800c0fc <__sfp_lock_acquire+0x8>)
 800c0f6:	f000 b989 	b.w	800c40c <__retarget_lock_acquire_recursive>
 800c0fa:	bf00      	nop
 800c0fc:	20002e99 	.word	0x20002e99

0800c100 <__sfp_lock_release>:
 800c100:	4801      	ldr	r0, [pc, #4]	; (800c108 <__sfp_lock_release+0x8>)
 800c102:	f000 b984 	b.w	800c40e <__retarget_lock_release_recursive>
 800c106:	bf00      	nop
 800c108:	20002e99 	.word	0x20002e99

0800c10c <__sinit>:
 800c10c:	b510      	push	{r4, lr}
 800c10e:	4604      	mov	r4, r0
 800c110:	f7ff fff0 	bl	800c0f4 <__sfp_lock_acquire>
 800c114:	6a23      	ldr	r3, [r4, #32]
 800c116:	b11b      	cbz	r3, 800c120 <__sinit+0x14>
 800c118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c11c:	f7ff bff0 	b.w	800c100 <__sfp_lock_release>
 800c120:	4b04      	ldr	r3, [pc, #16]	; (800c134 <__sinit+0x28>)
 800c122:	6223      	str	r3, [r4, #32]
 800c124:	4b04      	ldr	r3, [pc, #16]	; (800c138 <__sinit+0x2c>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d1f5      	bne.n	800c118 <__sinit+0xc>
 800c12c:	f7ff ffc4 	bl	800c0b8 <global_stdio_init.part.0>
 800c130:	e7f2      	b.n	800c118 <__sinit+0xc>
 800c132:	bf00      	nop
 800c134:	0800c079 	.word	0x0800c079
 800c138:	20002e90 	.word	0x20002e90

0800c13c <_fwalk_sglue>:
 800c13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c140:	4607      	mov	r7, r0
 800c142:	4688      	mov	r8, r1
 800c144:	4614      	mov	r4, r2
 800c146:	2600      	movs	r6, #0
 800c148:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c14c:	f1b9 0901 	subs.w	r9, r9, #1
 800c150:	d505      	bpl.n	800c15e <_fwalk_sglue+0x22>
 800c152:	6824      	ldr	r4, [r4, #0]
 800c154:	2c00      	cmp	r4, #0
 800c156:	d1f7      	bne.n	800c148 <_fwalk_sglue+0xc>
 800c158:	4630      	mov	r0, r6
 800c15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c15e:	89ab      	ldrh	r3, [r5, #12]
 800c160:	2b01      	cmp	r3, #1
 800c162:	d907      	bls.n	800c174 <_fwalk_sglue+0x38>
 800c164:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c168:	3301      	adds	r3, #1
 800c16a:	d003      	beq.n	800c174 <_fwalk_sglue+0x38>
 800c16c:	4629      	mov	r1, r5
 800c16e:	4638      	mov	r0, r7
 800c170:	47c0      	blx	r8
 800c172:	4306      	orrs	r6, r0
 800c174:	3568      	adds	r5, #104	; 0x68
 800c176:	e7e9      	b.n	800c14c <_fwalk_sglue+0x10>

0800c178 <siprintf>:
 800c178:	b40e      	push	{r1, r2, r3}
 800c17a:	b500      	push	{lr}
 800c17c:	b09c      	sub	sp, #112	; 0x70
 800c17e:	ab1d      	add	r3, sp, #116	; 0x74
 800c180:	9002      	str	r0, [sp, #8]
 800c182:	9006      	str	r0, [sp, #24]
 800c184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c188:	4809      	ldr	r0, [pc, #36]	; (800c1b0 <siprintf+0x38>)
 800c18a:	9107      	str	r1, [sp, #28]
 800c18c:	9104      	str	r1, [sp, #16]
 800c18e:	4909      	ldr	r1, [pc, #36]	; (800c1b4 <siprintf+0x3c>)
 800c190:	f853 2b04 	ldr.w	r2, [r3], #4
 800c194:	9105      	str	r1, [sp, #20]
 800c196:	6800      	ldr	r0, [r0, #0]
 800c198:	9301      	str	r3, [sp, #4]
 800c19a:	a902      	add	r1, sp, #8
 800c19c:	f000 fab8 	bl	800c710 <_svfiprintf_r>
 800c1a0:	9b02      	ldr	r3, [sp, #8]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	701a      	strb	r2, [r3, #0]
 800c1a6:	b01c      	add	sp, #112	; 0x70
 800c1a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1ac:	b003      	add	sp, #12
 800c1ae:	4770      	bx	lr
 800c1b0:	20000194 	.word	0x20000194
 800c1b4:	ffff0208 	.word	0xffff0208

0800c1b8 <__sread>:
 800c1b8:	b510      	push	{r4, lr}
 800c1ba:	460c      	mov	r4, r1
 800c1bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1c0:	f000 f8d6 	bl	800c370 <_read_r>
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	bfab      	itete	ge
 800c1c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1ca:	89a3      	ldrhlt	r3, [r4, #12]
 800c1cc:	181b      	addge	r3, r3, r0
 800c1ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1d2:	bfac      	ite	ge
 800c1d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1d6:	81a3      	strhlt	r3, [r4, #12]
 800c1d8:	bd10      	pop	{r4, pc}

0800c1da <__swrite>:
 800c1da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1de:	461f      	mov	r7, r3
 800c1e0:	898b      	ldrh	r3, [r1, #12]
 800c1e2:	05db      	lsls	r3, r3, #23
 800c1e4:	4605      	mov	r5, r0
 800c1e6:	460c      	mov	r4, r1
 800c1e8:	4616      	mov	r6, r2
 800c1ea:	d505      	bpl.n	800c1f8 <__swrite+0x1e>
 800c1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1f0:	2302      	movs	r3, #2
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f000 f8aa 	bl	800c34c <_lseek_r>
 800c1f8:	89a3      	ldrh	r3, [r4, #12]
 800c1fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c202:	81a3      	strh	r3, [r4, #12]
 800c204:	4632      	mov	r2, r6
 800c206:	463b      	mov	r3, r7
 800c208:	4628      	mov	r0, r5
 800c20a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c20e:	f000 b8c1 	b.w	800c394 <_write_r>

0800c212 <__sseek>:
 800c212:	b510      	push	{r4, lr}
 800c214:	460c      	mov	r4, r1
 800c216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c21a:	f000 f897 	bl	800c34c <_lseek_r>
 800c21e:	1c43      	adds	r3, r0, #1
 800c220:	89a3      	ldrh	r3, [r4, #12]
 800c222:	bf15      	itete	ne
 800c224:	6560      	strne	r0, [r4, #84]	; 0x54
 800c226:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c22a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c22e:	81a3      	strheq	r3, [r4, #12]
 800c230:	bf18      	it	ne
 800c232:	81a3      	strhne	r3, [r4, #12]
 800c234:	bd10      	pop	{r4, pc}

0800c236 <__sclose>:
 800c236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c23a:	f000 b877 	b.w	800c32c <_close_r>

0800c23e <memset>:
 800c23e:	4402      	add	r2, r0
 800c240:	4603      	mov	r3, r0
 800c242:	4293      	cmp	r3, r2
 800c244:	d100      	bne.n	800c248 <memset+0xa>
 800c246:	4770      	bx	lr
 800c248:	f803 1b01 	strb.w	r1, [r3], #1
 800c24c:	e7f9      	b.n	800c242 <memset+0x4>

0800c24e <strncat>:
 800c24e:	b530      	push	{r4, r5, lr}
 800c250:	4604      	mov	r4, r0
 800c252:	7825      	ldrb	r5, [r4, #0]
 800c254:	4623      	mov	r3, r4
 800c256:	3401      	adds	r4, #1
 800c258:	2d00      	cmp	r5, #0
 800c25a:	d1fa      	bne.n	800c252 <strncat+0x4>
 800c25c:	3a01      	subs	r2, #1
 800c25e:	d304      	bcc.n	800c26a <strncat+0x1c>
 800c260:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c264:	f803 4b01 	strb.w	r4, [r3], #1
 800c268:	b904      	cbnz	r4, 800c26c <strncat+0x1e>
 800c26a:	bd30      	pop	{r4, r5, pc}
 800c26c:	2a00      	cmp	r2, #0
 800c26e:	d1f5      	bne.n	800c25c <strncat+0xe>
 800c270:	701a      	strb	r2, [r3, #0]
 800c272:	e7f3      	b.n	800c25c <strncat+0xe>

0800c274 <strtok>:
 800c274:	4b16      	ldr	r3, [pc, #88]	; (800c2d0 <strtok+0x5c>)
 800c276:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c278:	681e      	ldr	r6, [r3, #0]
 800c27a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800c27c:	4605      	mov	r5, r0
 800c27e:	b9fc      	cbnz	r4, 800c2c0 <strtok+0x4c>
 800c280:	2050      	movs	r0, #80	; 0x50
 800c282:	9101      	str	r1, [sp, #4]
 800c284:	f000 f936 	bl	800c4f4 <malloc>
 800c288:	9901      	ldr	r1, [sp, #4]
 800c28a:	6470      	str	r0, [r6, #68]	; 0x44
 800c28c:	4602      	mov	r2, r0
 800c28e:	b920      	cbnz	r0, 800c29a <strtok+0x26>
 800c290:	4b10      	ldr	r3, [pc, #64]	; (800c2d4 <strtok+0x60>)
 800c292:	4811      	ldr	r0, [pc, #68]	; (800c2d8 <strtok+0x64>)
 800c294:	215b      	movs	r1, #91	; 0x5b
 800c296:	f000 f8c3 	bl	800c420 <__assert_func>
 800c29a:	e9c0 4400 	strd	r4, r4, [r0]
 800c29e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c2a2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c2a6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c2aa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c2ae:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c2b2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c2b6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c2ba:	6184      	str	r4, [r0, #24]
 800c2bc:	7704      	strb	r4, [r0, #28]
 800c2be:	6244      	str	r4, [r0, #36]	; 0x24
 800c2c0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	4628      	mov	r0, r5
 800c2c6:	b002      	add	sp, #8
 800c2c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c2cc:	f000 b806 	b.w	800c2dc <__strtok_r>
 800c2d0:	20000194 	.word	0x20000194
 800c2d4:	0800da8a 	.word	0x0800da8a
 800c2d8:	0800daa1 	.word	0x0800daa1

0800c2dc <__strtok_r>:
 800c2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2de:	b908      	cbnz	r0, 800c2e4 <__strtok_r+0x8>
 800c2e0:	6810      	ldr	r0, [r2, #0]
 800c2e2:	b188      	cbz	r0, 800c308 <__strtok_r+0x2c>
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c2ec:	460f      	mov	r7, r1
 800c2ee:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c2f2:	b91e      	cbnz	r6, 800c2fc <__strtok_r+0x20>
 800c2f4:	b965      	cbnz	r5, 800c310 <__strtok_r+0x34>
 800c2f6:	6015      	str	r5, [r2, #0]
 800c2f8:	4628      	mov	r0, r5
 800c2fa:	e005      	b.n	800c308 <__strtok_r+0x2c>
 800c2fc:	42b5      	cmp	r5, r6
 800c2fe:	d1f6      	bne.n	800c2ee <__strtok_r+0x12>
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1f0      	bne.n	800c2e6 <__strtok_r+0xa>
 800c304:	6014      	str	r4, [r2, #0]
 800c306:	7003      	strb	r3, [r0, #0]
 800c308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c30a:	461c      	mov	r4, r3
 800c30c:	e00c      	b.n	800c328 <__strtok_r+0x4c>
 800c30e:	b915      	cbnz	r5, 800c316 <__strtok_r+0x3a>
 800c310:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c314:	460e      	mov	r6, r1
 800c316:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c31a:	42ab      	cmp	r3, r5
 800c31c:	d1f7      	bne.n	800c30e <__strtok_r+0x32>
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d0f3      	beq.n	800c30a <__strtok_r+0x2e>
 800c322:	2300      	movs	r3, #0
 800c324:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c328:	6014      	str	r4, [r2, #0]
 800c32a:	e7ed      	b.n	800c308 <__strtok_r+0x2c>

0800c32c <_close_r>:
 800c32c:	b538      	push	{r3, r4, r5, lr}
 800c32e:	4d06      	ldr	r5, [pc, #24]	; (800c348 <_close_r+0x1c>)
 800c330:	2300      	movs	r3, #0
 800c332:	4604      	mov	r4, r0
 800c334:	4608      	mov	r0, r1
 800c336:	602b      	str	r3, [r5, #0]
 800c338:	f7f5 fcf7 	bl	8001d2a <_close>
 800c33c:	1c43      	adds	r3, r0, #1
 800c33e:	d102      	bne.n	800c346 <_close_r+0x1a>
 800c340:	682b      	ldr	r3, [r5, #0]
 800c342:	b103      	cbz	r3, 800c346 <_close_r+0x1a>
 800c344:	6023      	str	r3, [r4, #0]
 800c346:	bd38      	pop	{r3, r4, r5, pc}
 800c348:	20002e94 	.word	0x20002e94

0800c34c <_lseek_r>:
 800c34c:	b538      	push	{r3, r4, r5, lr}
 800c34e:	4d07      	ldr	r5, [pc, #28]	; (800c36c <_lseek_r+0x20>)
 800c350:	4604      	mov	r4, r0
 800c352:	4608      	mov	r0, r1
 800c354:	4611      	mov	r1, r2
 800c356:	2200      	movs	r2, #0
 800c358:	602a      	str	r2, [r5, #0]
 800c35a:	461a      	mov	r2, r3
 800c35c:	f7f5 fd0c 	bl	8001d78 <_lseek>
 800c360:	1c43      	adds	r3, r0, #1
 800c362:	d102      	bne.n	800c36a <_lseek_r+0x1e>
 800c364:	682b      	ldr	r3, [r5, #0]
 800c366:	b103      	cbz	r3, 800c36a <_lseek_r+0x1e>
 800c368:	6023      	str	r3, [r4, #0]
 800c36a:	bd38      	pop	{r3, r4, r5, pc}
 800c36c:	20002e94 	.word	0x20002e94

0800c370 <_read_r>:
 800c370:	b538      	push	{r3, r4, r5, lr}
 800c372:	4d07      	ldr	r5, [pc, #28]	; (800c390 <_read_r+0x20>)
 800c374:	4604      	mov	r4, r0
 800c376:	4608      	mov	r0, r1
 800c378:	4611      	mov	r1, r2
 800c37a:	2200      	movs	r2, #0
 800c37c:	602a      	str	r2, [r5, #0]
 800c37e:	461a      	mov	r2, r3
 800c380:	f7f5 fc9a 	bl	8001cb8 <_read>
 800c384:	1c43      	adds	r3, r0, #1
 800c386:	d102      	bne.n	800c38e <_read_r+0x1e>
 800c388:	682b      	ldr	r3, [r5, #0]
 800c38a:	b103      	cbz	r3, 800c38e <_read_r+0x1e>
 800c38c:	6023      	str	r3, [r4, #0]
 800c38e:	bd38      	pop	{r3, r4, r5, pc}
 800c390:	20002e94 	.word	0x20002e94

0800c394 <_write_r>:
 800c394:	b538      	push	{r3, r4, r5, lr}
 800c396:	4d07      	ldr	r5, [pc, #28]	; (800c3b4 <_write_r+0x20>)
 800c398:	4604      	mov	r4, r0
 800c39a:	4608      	mov	r0, r1
 800c39c:	4611      	mov	r1, r2
 800c39e:	2200      	movs	r2, #0
 800c3a0:	602a      	str	r2, [r5, #0]
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	f7f5 fca5 	bl	8001cf2 <_write>
 800c3a8:	1c43      	adds	r3, r0, #1
 800c3aa:	d102      	bne.n	800c3b2 <_write_r+0x1e>
 800c3ac:	682b      	ldr	r3, [r5, #0]
 800c3ae:	b103      	cbz	r3, 800c3b2 <_write_r+0x1e>
 800c3b0:	6023      	str	r3, [r4, #0]
 800c3b2:	bd38      	pop	{r3, r4, r5, pc}
 800c3b4:	20002e94 	.word	0x20002e94

0800c3b8 <__errno>:
 800c3b8:	4b01      	ldr	r3, [pc, #4]	; (800c3c0 <__errno+0x8>)
 800c3ba:	6818      	ldr	r0, [r3, #0]
 800c3bc:	4770      	bx	lr
 800c3be:	bf00      	nop
 800c3c0:	20000194 	.word	0x20000194

0800c3c4 <__libc_init_array>:
 800c3c4:	b570      	push	{r4, r5, r6, lr}
 800c3c6:	4d0d      	ldr	r5, [pc, #52]	; (800c3fc <__libc_init_array+0x38>)
 800c3c8:	4c0d      	ldr	r4, [pc, #52]	; (800c400 <__libc_init_array+0x3c>)
 800c3ca:	1b64      	subs	r4, r4, r5
 800c3cc:	10a4      	asrs	r4, r4, #2
 800c3ce:	2600      	movs	r6, #0
 800c3d0:	42a6      	cmp	r6, r4
 800c3d2:	d109      	bne.n	800c3e8 <__libc_init_array+0x24>
 800c3d4:	4d0b      	ldr	r5, [pc, #44]	; (800c404 <__libc_init_array+0x40>)
 800c3d6:	4c0c      	ldr	r4, [pc, #48]	; (800c408 <__libc_init_array+0x44>)
 800c3d8:	f001 f800 	bl	800d3dc <_init>
 800c3dc:	1b64      	subs	r4, r4, r5
 800c3de:	10a4      	asrs	r4, r4, #2
 800c3e0:	2600      	movs	r6, #0
 800c3e2:	42a6      	cmp	r6, r4
 800c3e4:	d105      	bne.n	800c3f2 <__libc_init_array+0x2e>
 800c3e6:	bd70      	pop	{r4, r5, r6, pc}
 800c3e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3ec:	4798      	blx	r3
 800c3ee:	3601      	adds	r6, #1
 800c3f0:	e7ee      	b.n	800c3d0 <__libc_init_array+0xc>
 800c3f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3f6:	4798      	blx	r3
 800c3f8:	3601      	adds	r6, #1
 800c3fa:	e7f2      	b.n	800c3e2 <__libc_init_array+0x1e>
 800c3fc:	0800db74 	.word	0x0800db74
 800c400:	0800db74 	.word	0x0800db74
 800c404:	0800db74 	.word	0x0800db74
 800c408:	0800db78 	.word	0x0800db78

0800c40c <__retarget_lock_acquire_recursive>:
 800c40c:	4770      	bx	lr

0800c40e <__retarget_lock_release_recursive>:
 800c40e:	4770      	bx	lr

0800c410 <strcpy>:
 800c410:	4603      	mov	r3, r0
 800c412:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c416:	f803 2b01 	strb.w	r2, [r3], #1
 800c41a:	2a00      	cmp	r2, #0
 800c41c:	d1f9      	bne.n	800c412 <strcpy+0x2>
 800c41e:	4770      	bx	lr

0800c420 <__assert_func>:
 800c420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c422:	4614      	mov	r4, r2
 800c424:	461a      	mov	r2, r3
 800c426:	4b09      	ldr	r3, [pc, #36]	; (800c44c <__assert_func+0x2c>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4605      	mov	r5, r0
 800c42c:	68d8      	ldr	r0, [r3, #12]
 800c42e:	b14c      	cbz	r4, 800c444 <__assert_func+0x24>
 800c430:	4b07      	ldr	r3, [pc, #28]	; (800c450 <__assert_func+0x30>)
 800c432:	9100      	str	r1, [sp, #0]
 800c434:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c438:	4906      	ldr	r1, [pc, #24]	; (800c454 <__assert_func+0x34>)
 800c43a:	462b      	mov	r3, r5
 800c43c:	f000 fca4 	bl	800cd88 <fiprintf>
 800c440:	f000 fcec 	bl	800ce1c <abort>
 800c444:	4b04      	ldr	r3, [pc, #16]	; (800c458 <__assert_func+0x38>)
 800c446:	461c      	mov	r4, r3
 800c448:	e7f3      	b.n	800c432 <__assert_func+0x12>
 800c44a:	bf00      	nop
 800c44c:	20000194 	.word	0x20000194
 800c450:	0800dafb 	.word	0x0800dafb
 800c454:	0800db08 	.word	0x0800db08
 800c458:	0800db36 	.word	0x0800db36

0800c45c <_free_r>:
 800c45c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c45e:	2900      	cmp	r1, #0
 800c460:	d044      	beq.n	800c4ec <_free_r+0x90>
 800c462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c466:	9001      	str	r0, [sp, #4]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	f1a1 0404 	sub.w	r4, r1, #4
 800c46e:	bfb8      	it	lt
 800c470:	18e4      	addlt	r4, r4, r3
 800c472:	f000 f8e7 	bl	800c644 <__malloc_lock>
 800c476:	4a1e      	ldr	r2, [pc, #120]	; (800c4f0 <_free_r+0x94>)
 800c478:	9801      	ldr	r0, [sp, #4]
 800c47a:	6813      	ldr	r3, [r2, #0]
 800c47c:	b933      	cbnz	r3, 800c48c <_free_r+0x30>
 800c47e:	6063      	str	r3, [r4, #4]
 800c480:	6014      	str	r4, [r2, #0]
 800c482:	b003      	add	sp, #12
 800c484:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c488:	f000 b8e2 	b.w	800c650 <__malloc_unlock>
 800c48c:	42a3      	cmp	r3, r4
 800c48e:	d908      	bls.n	800c4a2 <_free_r+0x46>
 800c490:	6825      	ldr	r5, [r4, #0]
 800c492:	1961      	adds	r1, r4, r5
 800c494:	428b      	cmp	r3, r1
 800c496:	bf01      	itttt	eq
 800c498:	6819      	ldreq	r1, [r3, #0]
 800c49a:	685b      	ldreq	r3, [r3, #4]
 800c49c:	1949      	addeq	r1, r1, r5
 800c49e:	6021      	streq	r1, [r4, #0]
 800c4a0:	e7ed      	b.n	800c47e <_free_r+0x22>
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	b10b      	cbz	r3, 800c4ac <_free_r+0x50>
 800c4a8:	42a3      	cmp	r3, r4
 800c4aa:	d9fa      	bls.n	800c4a2 <_free_r+0x46>
 800c4ac:	6811      	ldr	r1, [r2, #0]
 800c4ae:	1855      	adds	r5, r2, r1
 800c4b0:	42a5      	cmp	r5, r4
 800c4b2:	d10b      	bne.n	800c4cc <_free_r+0x70>
 800c4b4:	6824      	ldr	r4, [r4, #0]
 800c4b6:	4421      	add	r1, r4
 800c4b8:	1854      	adds	r4, r2, r1
 800c4ba:	42a3      	cmp	r3, r4
 800c4bc:	6011      	str	r1, [r2, #0]
 800c4be:	d1e0      	bne.n	800c482 <_free_r+0x26>
 800c4c0:	681c      	ldr	r4, [r3, #0]
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	6053      	str	r3, [r2, #4]
 800c4c6:	440c      	add	r4, r1
 800c4c8:	6014      	str	r4, [r2, #0]
 800c4ca:	e7da      	b.n	800c482 <_free_r+0x26>
 800c4cc:	d902      	bls.n	800c4d4 <_free_r+0x78>
 800c4ce:	230c      	movs	r3, #12
 800c4d0:	6003      	str	r3, [r0, #0]
 800c4d2:	e7d6      	b.n	800c482 <_free_r+0x26>
 800c4d4:	6825      	ldr	r5, [r4, #0]
 800c4d6:	1961      	adds	r1, r4, r5
 800c4d8:	428b      	cmp	r3, r1
 800c4da:	bf04      	itt	eq
 800c4dc:	6819      	ldreq	r1, [r3, #0]
 800c4de:	685b      	ldreq	r3, [r3, #4]
 800c4e0:	6063      	str	r3, [r4, #4]
 800c4e2:	bf04      	itt	eq
 800c4e4:	1949      	addeq	r1, r1, r5
 800c4e6:	6021      	streq	r1, [r4, #0]
 800c4e8:	6054      	str	r4, [r2, #4]
 800c4ea:	e7ca      	b.n	800c482 <_free_r+0x26>
 800c4ec:	b003      	add	sp, #12
 800c4ee:	bd30      	pop	{r4, r5, pc}
 800c4f0:	20002e9c 	.word	0x20002e9c

0800c4f4 <malloc>:
 800c4f4:	4b02      	ldr	r3, [pc, #8]	; (800c500 <malloc+0xc>)
 800c4f6:	4601      	mov	r1, r0
 800c4f8:	6818      	ldr	r0, [r3, #0]
 800c4fa:	f000 b823 	b.w	800c544 <_malloc_r>
 800c4fe:	bf00      	nop
 800c500:	20000194 	.word	0x20000194

0800c504 <sbrk_aligned>:
 800c504:	b570      	push	{r4, r5, r6, lr}
 800c506:	4e0e      	ldr	r6, [pc, #56]	; (800c540 <sbrk_aligned+0x3c>)
 800c508:	460c      	mov	r4, r1
 800c50a:	6831      	ldr	r1, [r6, #0]
 800c50c:	4605      	mov	r5, r0
 800c50e:	b911      	cbnz	r1, 800c516 <sbrk_aligned+0x12>
 800c510:	f000 fc66 	bl	800cde0 <_sbrk_r>
 800c514:	6030      	str	r0, [r6, #0]
 800c516:	4621      	mov	r1, r4
 800c518:	4628      	mov	r0, r5
 800c51a:	f000 fc61 	bl	800cde0 <_sbrk_r>
 800c51e:	1c43      	adds	r3, r0, #1
 800c520:	d00a      	beq.n	800c538 <sbrk_aligned+0x34>
 800c522:	1cc4      	adds	r4, r0, #3
 800c524:	f024 0403 	bic.w	r4, r4, #3
 800c528:	42a0      	cmp	r0, r4
 800c52a:	d007      	beq.n	800c53c <sbrk_aligned+0x38>
 800c52c:	1a21      	subs	r1, r4, r0
 800c52e:	4628      	mov	r0, r5
 800c530:	f000 fc56 	bl	800cde0 <_sbrk_r>
 800c534:	3001      	adds	r0, #1
 800c536:	d101      	bne.n	800c53c <sbrk_aligned+0x38>
 800c538:	f04f 34ff 	mov.w	r4, #4294967295
 800c53c:	4620      	mov	r0, r4
 800c53e:	bd70      	pop	{r4, r5, r6, pc}
 800c540:	20002ea0 	.word	0x20002ea0

0800c544 <_malloc_r>:
 800c544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c548:	1ccd      	adds	r5, r1, #3
 800c54a:	f025 0503 	bic.w	r5, r5, #3
 800c54e:	3508      	adds	r5, #8
 800c550:	2d0c      	cmp	r5, #12
 800c552:	bf38      	it	cc
 800c554:	250c      	movcc	r5, #12
 800c556:	2d00      	cmp	r5, #0
 800c558:	4607      	mov	r7, r0
 800c55a:	db01      	blt.n	800c560 <_malloc_r+0x1c>
 800c55c:	42a9      	cmp	r1, r5
 800c55e:	d905      	bls.n	800c56c <_malloc_r+0x28>
 800c560:	230c      	movs	r3, #12
 800c562:	603b      	str	r3, [r7, #0]
 800c564:	2600      	movs	r6, #0
 800c566:	4630      	mov	r0, r6
 800c568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c56c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c640 <_malloc_r+0xfc>
 800c570:	f000 f868 	bl	800c644 <__malloc_lock>
 800c574:	f8d8 3000 	ldr.w	r3, [r8]
 800c578:	461c      	mov	r4, r3
 800c57a:	bb5c      	cbnz	r4, 800c5d4 <_malloc_r+0x90>
 800c57c:	4629      	mov	r1, r5
 800c57e:	4638      	mov	r0, r7
 800c580:	f7ff ffc0 	bl	800c504 <sbrk_aligned>
 800c584:	1c43      	adds	r3, r0, #1
 800c586:	4604      	mov	r4, r0
 800c588:	d155      	bne.n	800c636 <_malloc_r+0xf2>
 800c58a:	f8d8 4000 	ldr.w	r4, [r8]
 800c58e:	4626      	mov	r6, r4
 800c590:	2e00      	cmp	r6, #0
 800c592:	d145      	bne.n	800c620 <_malloc_r+0xdc>
 800c594:	2c00      	cmp	r4, #0
 800c596:	d048      	beq.n	800c62a <_malloc_r+0xe6>
 800c598:	6823      	ldr	r3, [r4, #0]
 800c59a:	4631      	mov	r1, r6
 800c59c:	4638      	mov	r0, r7
 800c59e:	eb04 0903 	add.w	r9, r4, r3
 800c5a2:	f000 fc1d 	bl	800cde0 <_sbrk_r>
 800c5a6:	4581      	cmp	r9, r0
 800c5a8:	d13f      	bne.n	800c62a <_malloc_r+0xe6>
 800c5aa:	6821      	ldr	r1, [r4, #0]
 800c5ac:	1a6d      	subs	r5, r5, r1
 800c5ae:	4629      	mov	r1, r5
 800c5b0:	4638      	mov	r0, r7
 800c5b2:	f7ff ffa7 	bl	800c504 <sbrk_aligned>
 800c5b6:	3001      	adds	r0, #1
 800c5b8:	d037      	beq.n	800c62a <_malloc_r+0xe6>
 800c5ba:	6823      	ldr	r3, [r4, #0]
 800c5bc:	442b      	add	r3, r5
 800c5be:	6023      	str	r3, [r4, #0]
 800c5c0:	f8d8 3000 	ldr.w	r3, [r8]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d038      	beq.n	800c63a <_malloc_r+0xf6>
 800c5c8:	685a      	ldr	r2, [r3, #4]
 800c5ca:	42a2      	cmp	r2, r4
 800c5cc:	d12b      	bne.n	800c626 <_malloc_r+0xe2>
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	605a      	str	r2, [r3, #4]
 800c5d2:	e00f      	b.n	800c5f4 <_malloc_r+0xb0>
 800c5d4:	6822      	ldr	r2, [r4, #0]
 800c5d6:	1b52      	subs	r2, r2, r5
 800c5d8:	d41f      	bmi.n	800c61a <_malloc_r+0xd6>
 800c5da:	2a0b      	cmp	r2, #11
 800c5dc:	d917      	bls.n	800c60e <_malloc_r+0xca>
 800c5de:	1961      	adds	r1, r4, r5
 800c5e0:	42a3      	cmp	r3, r4
 800c5e2:	6025      	str	r5, [r4, #0]
 800c5e4:	bf18      	it	ne
 800c5e6:	6059      	strne	r1, [r3, #4]
 800c5e8:	6863      	ldr	r3, [r4, #4]
 800c5ea:	bf08      	it	eq
 800c5ec:	f8c8 1000 	streq.w	r1, [r8]
 800c5f0:	5162      	str	r2, [r4, r5]
 800c5f2:	604b      	str	r3, [r1, #4]
 800c5f4:	4638      	mov	r0, r7
 800c5f6:	f104 060b 	add.w	r6, r4, #11
 800c5fa:	f000 f829 	bl	800c650 <__malloc_unlock>
 800c5fe:	f026 0607 	bic.w	r6, r6, #7
 800c602:	1d23      	adds	r3, r4, #4
 800c604:	1af2      	subs	r2, r6, r3
 800c606:	d0ae      	beq.n	800c566 <_malloc_r+0x22>
 800c608:	1b9b      	subs	r3, r3, r6
 800c60a:	50a3      	str	r3, [r4, r2]
 800c60c:	e7ab      	b.n	800c566 <_malloc_r+0x22>
 800c60e:	42a3      	cmp	r3, r4
 800c610:	6862      	ldr	r2, [r4, #4]
 800c612:	d1dd      	bne.n	800c5d0 <_malloc_r+0x8c>
 800c614:	f8c8 2000 	str.w	r2, [r8]
 800c618:	e7ec      	b.n	800c5f4 <_malloc_r+0xb0>
 800c61a:	4623      	mov	r3, r4
 800c61c:	6864      	ldr	r4, [r4, #4]
 800c61e:	e7ac      	b.n	800c57a <_malloc_r+0x36>
 800c620:	4634      	mov	r4, r6
 800c622:	6876      	ldr	r6, [r6, #4]
 800c624:	e7b4      	b.n	800c590 <_malloc_r+0x4c>
 800c626:	4613      	mov	r3, r2
 800c628:	e7cc      	b.n	800c5c4 <_malloc_r+0x80>
 800c62a:	230c      	movs	r3, #12
 800c62c:	603b      	str	r3, [r7, #0]
 800c62e:	4638      	mov	r0, r7
 800c630:	f000 f80e 	bl	800c650 <__malloc_unlock>
 800c634:	e797      	b.n	800c566 <_malloc_r+0x22>
 800c636:	6025      	str	r5, [r4, #0]
 800c638:	e7dc      	b.n	800c5f4 <_malloc_r+0xb0>
 800c63a:	605b      	str	r3, [r3, #4]
 800c63c:	deff      	udf	#255	; 0xff
 800c63e:	bf00      	nop
 800c640:	20002e9c 	.word	0x20002e9c

0800c644 <__malloc_lock>:
 800c644:	4801      	ldr	r0, [pc, #4]	; (800c64c <__malloc_lock+0x8>)
 800c646:	f7ff bee1 	b.w	800c40c <__retarget_lock_acquire_recursive>
 800c64a:	bf00      	nop
 800c64c:	20002e98 	.word	0x20002e98

0800c650 <__malloc_unlock>:
 800c650:	4801      	ldr	r0, [pc, #4]	; (800c658 <__malloc_unlock+0x8>)
 800c652:	f7ff bedc 	b.w	800c40e <__retarget_lock_release_recursive>
 800c656:	bf00      	nop
 800c658:	20002e98 	.word	0x20002e98

0800c65c <__ssputs_r>:
 800c65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c660:	688e      	ldr	r6, [r1, #8]
 800c662:	461f      	mov	r7, r3
 800c664:	42be      	cmp	r6, r7
 800c666:	680b      	ldr	r3, [r1, #0]
 800c668:	4682      	mov	sl, r0
 800c66a:	460c      	mov	r4, r1
 800c66c:	4690      	mov	r8, r2
 800c66e:	d82c      	bhi.n	800c6ca <__ssputs_r+0x6e>
 800c670:	898a      	ldrh	r2, [r1, #12]
 800c672:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c676:	d026      	beq.n	800c6c6 <__ssputs_r+0x6a>
 800c678:	6965      	ldr	r5, [r4, #20]
 800c67a:	6909      	ldr	r1, [r1, #16]
 800c67c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c680:	eba3 0901 	sub.w	r9, r3, r1
 800c684:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c688:	1c7b      	adds	r3, r7, #1
 800c68a:	444b      	add	r3, r9
 800c68c:	106d      	asrs	r5, r5, #1
 800c68e:	429d      	cmp	r5, r3
 800c690:	bf38      	it	cc
 800c692:	461d      	movcc	r5, r3
 800c694:	0553      	lsls	r3, r2, #21
 800c696:	d527      	bpl.n	800c6e8 <__ssputs_r+0x8c>
 800c698:	4629      	mov	r1, r5
 800c69a:	f7ff ff53 	bl	800c544 <_malloc_r>
 800c69e:	4606      	mov	r6, r0
 800c6a0:	b360      	cbz	r0, 800c6fc <__ssputs_r+0xa0>
 800c6a2:	6921      	ldr	r1, [r4, #16]
 800c6a4:	464a      	mov	r2, r9
 800c6a6:	f000 fbab 	bl	800ce00 <memcpy>
 800c6aa:	89a3      	ldrh	r3, [r4, #12]
 800c6ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c6b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6b4:	81a3      	strh	r3, [r4, #12]
 800c6b6:	6126      	str	r6, [r4, #16]
 800c6b8:	6165      	str	r5, [r4, #20]
 800c6ba:	444e      	add	r6, r9
 800c6bc:	eba5 0509 	sub.w	r5, r5, r9
 800c6c0:	6026      	str	r6, [r4, #0]
 800c6c2:	60a5      	str	r5, [r4, #8]
 800c6c4:	463e      	mov	r6, r7
 800c6c6:	42be      	cmp	r6, r7
 800c6c8:	d900      	bls.n	800c6cc <__ssputs_r+0x70>
 800c6ca:	463e      	mov	r6, r7
 800c6cc:	6820      	ldr	r0, [r4, #0]
 800c6ce:	4632      	mov	r2, r6
 800c6d0:	4641      	mov	r1, r8
 800c6d2:	f000 fb6b 	bl	800cdac <memmove>
 800c6d6:	68a3      	ldr	r3, [r4, #8]
 800c6d8:	1b9b      	subs	r3, r3, r6
 800c6da:	60a3      	str	r3, [r4, #8]
 800c6dc:	6823      	ldr	r3, [r4, #0]
 800c6de:	4433      	add	r3, r6
 800c6e0:	6023      	str	r3, [r4, #0]
 800c6e2:	2000      	movs	r0, #0
 800c6e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6e8:	462a      	mov	r2, r5
 800c6ea:	f000 fb9e 	bl	800ce2a <_realloc_r>
 800c6ee:	4606      	mov	r6, r0
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	d1e0      	bne.n	800c6b6 <__ssputs_r+0x5a>
 800c6f4:	6921      	ldr	r1, [r4, #16]
 800c6f6:	4650      	mov	r0, sl
 800c6f8:	f7ff feb0 	bl	800c45c <_free_r>
 800c6fc:	230c      	movs	r3, #12
 800c6fe:	f8ca 3000 	str.w	r3, [sl]
 800c702:	89a3      	ldrh	r3, [r4, #12]
 800c704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c708:	81a3      	strh	r3, [r4, #12]
 800c70a:	f04f 30ff 	mov.w	r0, #4294967295
 800c70e:	e7e9      	b.n	800c6e4 <__ssputs_r+0x88>

0800c710 <_svfiprintf_r>:
 800c710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c714:	4698      	mov	r8, r3
 800c716:	898b      	ldrh	r3, [r1, #12]
 800c718:	061b      	lsls	r3, r3, #24
 800c71a:	b09d      	sub	sp, #116	; 0x74
 800c71c:	4607      	mov	r7, r0
 800c71e:	460d      	mov	r5, r1
 800c720:	4614      	mov	r4, r2
 800c722:	d50e      	bpl.n	800c742 <_svfiprintf_r+0x32>
 800c724:	690b      	ldr	r3, [r1, #16]
 800c726:	b963      	cbnz	r3, 800c742 <_svfiprintf_r+0x32>
 800c728:	2140      	movs	r1, #64	; 0x40
 800c72a:	f7ff ff0b 	bl	800c544 <_malloc_r>
 800c72e:	6028      	str	r0, [r5, #0]
 800c730:	6128      	str	r0, [r5, #16]
 800c732:	b920      	cbnz	r0, 800c73e <_svfiprintf_r+0x2e>
 800c734:	230c      	movs	r3, #12
 800c736:	603b      	str	r3, [r7, #0]
 800c738:	f04f 30ff 	mov.w	r0, #4294967295
 800c73c:	e0d0      	b.n	800c8e0 <_svfiprintf_r+0x1d0>
 800c73e:	2340      	movs	r3, #64	; 0x40
 800c740:	616b      	str	r3, [r5, #20]
 800c742:	2300      	movs	r3, #0
 800c744:	9309      	str	r3, [sp, #36]	; 0x24
 800c746:	2320      	movs	r3, #32
 800c748:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c74c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c750:	2330      	movs	r3, #48	; 0x30
 800c752:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c8f8 <_svfiprintf_r+0x1e8>
 800c756:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c75a:	f04f 0901 	mov.w	r9, #1
 800c75e:	4623      	mov	r3, r4
 800c760:	469a      	mov	sl, r3
 800c762:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c766:	b10a      	cbz	r2, 800c76c <_svfiprintf_r+0x5c>
 800c768:	2a25      	cmp	r2, #37	; 0x25
 800c76a:	d1f9      	bne.n	800c760 <_svfiprintf_r+0x50>
 800c76c:	ebba 0b04 	subs.w	fp, sl, r4
 800c770:	d00b      	beq.n	800c78a <_svfiprintf_r+0x7a>
 800c772:	465b      	mov	r3, fp
 800c774:	4622      	mov	r2, r4
 800c776:	4629      	mov	r1, r5
 800c778:	4638      	mov	r0, r7
 800c77a:	f7ff ff6f 	bl	800c65c <__ssputs_r>
 800c77e:	3001      	adds	r0, #1
 800c780:	f000 80a9 	beq.w	800c8d6 <_svfiprintf_r+0x1c6>
 800c784:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c786:	445a      	add	r2, fp
 800c788:	9209      	str	r2, [sp, #36]	; 0x24
 800c78a:	f89a 3000 	ldrb.w	r3, [sl]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	f000 80a1 	beq.w	800c8d6 <_svfiprintf_r+0x1c6>
 800c794:	2300      	movs	r3, #0
 800c796:	f04f 32ff 	mov.w	r2, #4294967295
 800c79a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c79e:	f10a 0a01 	add.w	sl, sl, #1
 800c7a2:	9304      	str	r3, [sp, #16]
 800c7a4:	9307      	str	r3, [sp, #28]
 800c7a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7aa:	931a      	str	r3, [sp, #104]	; 0x68
 800c7ac:	4654      	mov	r4, sl
 800c7ae:	2205      	movs	r2, #5
 800c7b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7b4:	4850      	ldr	r0, [pc, #320]	; (800c8f8 <_svfiprintf_r+0x1e8>)
 800c7b6:	f7f3 fd2b 	bl	8000210 <memchr>
 800c7ba:	9a04      	ldr	r2, [sp, #16]
 800c7bc:	b9d8      	cbnz	r0, 800c7f6 <_svfiprintf_r+0xe6>
 800c7be:	06d0      	lsls	r0, r2, #27
 800c7c0:	bf44      	itt	mi
 800c7c2:	2320      	movmi	r3, #32
 800c7c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7c8:	0711      	lsls	r1, r2, #28
 800c7ca:	bf44      	itt	mi
 800c7cc:	232b      	movmi	r3, #43	; 0x2b
 800c7ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c7d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c7d8:	d015      	beq.n	800c806 <_svfiprintf_r+0xf6>
 800c7da:	9a07      	ldr	r2, [sp, #28]
 800c7dc:	4654      	mov	r4, sl
 800c7de:	2000      	movs	r0, #0
 800c7e0:	f04f 0c0a 	mov.w	ip, #10
 800c7e4:	4621      	mov	r1, r4
 800c7e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7ea:	3b30      	subs	r3, #48	; 0x30
 800c7ec:	2b09      	cmp	r3, #9
 800c7ee:	d94d      	bls.n	800c88c <_svfiprintf_r+0x17c>
 800c7f0:	b1b0      	cbz	r0, 800c820 <_svfiprintf_r+0x110>
 800c7f2:	9207      	str	r2, [sp, #28]
 800c7f4:	e014      	b.n	800c820 <_svfiprintf_r+0x110>
 800c7f6:	eba0 0308 	sub.w	r3, r0, r8
 800c7fa:	fa09 f303 	lsl.w	r3, r9, r3
 800c7fe:	4313      	orrs	r3, r2
 800c800:	9304      	str	r3, [sp, #16]
 800c802:	46a2      	mov	sl, r4
 800c804:	e7d2      	b.n	800c7ac <_svfiprintf_r+0x9c>
 800c806:	9b03      	ldr	r3, [sp, #12]
 800c808:	1d19      	adds	r1, r3, #4
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	9103      	str	r1, [sp, #12]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	bfbb      	ittet	lt
 800c812:	425b      	neglt	r3, r3
 800c814:	f042 0202 	orrlt.w	r2, r2, #2
 800c818:	9307      	strge	r3, [sp, #28]
 800c81a:	9307      	strlt	r3, [sp, #28]
 800c81c:	bfb8      	it	lt
 800c81e:	9204      	strlt	r2, [sp, #16]
 800c820:	7823      	ldrb	r3, [r4, #0]
 800c822:	2b2e      	cmp	r3, #46	; 0x2e
 800c824:	d10c      	bne.n	800c840 <_svfiprintf_r+0x130>
 800c826:	7863      	ldrb	r3, [r4, #1]
 800c828:	2b2a      	cmp	r3, #42	; 0x2a
 800c82a:	d134      	bne.n	800c896 <_svfiprintf_r+0x186>
 800c82c:	9b03      	ldr	r3, [sp, #12]
 800c82e:	1d1a      	adds	r2, r3, #4
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	9203      	str	r2, [sp, #12]
 800c834:	2b00      	cmp	r3, #0
 800c836:	bfb8      	it	lt
 800c838:	f04f 33ff 	movlt.w	r3, #4294967295
 800c83c:	3402      	adds	r4, #2
 800c83e:	9305      	str	r3, [sp, #20]
 800c840:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c908 <_svfiprintf_r+0x1f8>
 800c844:	7821      	ldrb	r1, [r4, #0]
 800c846:	2203      	movs	r2, #3
 800c848:	4650      	mov	r0, sl
 800c84a:	f7f3 fce1 	bl	8000210 <memchr>
 800c84e:	b138      	cbz	r0, 800c860 <_svfiprintf_r+0x150>
 800c850:	9b04      	ldr	r3, [sp, #16]
 800c852:	eba0 000a 	sub.w	r0, r0, sl
 800c856:	2240      	movs	r2, #64	; 0x40
 800c858:	4082      	lsls	r2, r0
 800c85a:	4313      	orrs	r3, r2
 800c85c:	3401      	adds	r4, #1
 800c85e:	9304      	str	r3, [sp, #16]
 800c860:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c864:	4825      	ldr	r0, [pc, #148]	; (800c8fc <_svfiprintf_r+0x1ec>)
 800c866:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c86a:	2206      	movs	r2, #6
 800c86c:	f7f3 fcd0 	bl	8000210 <memchr>
 800c870:	2800      	cmp	r0, #0
 800c872:	d038      	beq.n	800c8e6 <_svfiprintf_r+0x1d6>
 800c874:	4b22      	ldr	r3, [pc, #136]	; (800c900 <_svfiprintf_r+0x1f0>)
 800c876:	bb1b      	cbnz	r3, 800c8c0 <_svfiprintf_r+0x1b0>
 800c878:	9b03      	ldr	r3, [sp, #12]
 800c87a:	3307      	adds	r3, #7
 800c87c:	f023 0307 	bic.w	r3, r3, #7
 800c880:	3308      	adds	r3, #8
 800c882:	9303      	str	r3, [sp, #12]
 800c884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c886:	4433      	add	r3, r6
 800c888:	9309      	str	r3, [sp, #36]	; 0x24
 800c88a:	e768      	b.n	800c75e <_svfiprintf_r+0x4e>
 800c88c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c890:	460c      	mov	r4, r1
 800c892:	2001      	movs	r0, #1
 800c894:	e7a6      	b.n	800c7e4 <_svfiprintf_r+0xd4>
 800c896:	2300      	movs	r3, #0
 800c898:	3401      	adds	r4, #1
 800c89a:	9305      	str	r3, [sp, #20]
 800c89c:	4619      	mov	r1, r3
 800c89e:	f04f 0c0a 	mov.w	ip, #10
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8a8:	3a30      	subs	r2, #48	; 0x30
 800c8aa:	2a09      	cmp	r2, #9
 800c8ac:	d903      	bls.n	800c8b6 <_svfiprintf_r+0x1a6>
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d0c6      	beq.n	800c840 <_svfiprintf_r+0x130>
 800c8b2:	9105      	str	r1, [sp, #20]
 800c8b4:	e7c4      	b.n	800c840 <_svfiprintf_r+0x130>
 800c8b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8ba:	4604      	mov	r4, r0
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e7f0      	b.n	800c8a2 <_svfiprintf_r+0x192>
 800c8c0:	ab03      	add	r3, sp, #12
 800c8c2:	9300      	str	r3, [sp, #0]
 800c8c4:	462a      	mov	r2, r5
 800c8c6:	4b0f      	ldr	r3, [pc, #60]	; (800c904 <_svfiprintf_r+0x1f4>)
 800c8c8:	a904      	add	r1, sp, #16
 800c8ca:	4638      	mov	r0, r7
 800c8cc:	f3af 8000 	nop.w
 800c8d0:	1c42      	adds	r2, r0, #1
 800c8d2:	4606      	mov	r6, r0
 800c8d4:	d1d6      	bne.n	800c884 <_svfiprintf_r+0x174>
 800c8d6:	89ab      	ldrh	r3, [r5, #12]
 800c8d8:	065b      	lsls	r3, r3, #25
 800c8da:	f53f af2d 	bmi.w	800c738 <_svfiprintf_r+0x28>
 800c8de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8e0:	b01d      	add	sp, #116	; 0x74
 800c8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8e6:	ab03      	add	r3, sp, #12
 800c8e8:	9300      	str	r3, [sp, #0]
 800c8ea:	462a      	mov	r2, r5
 800c8ec:	4b05      	ldr	r3, [pc, #20]	; (800c904 <_svfiprintf_r+0x1f4>)
 800c8ee:	a904      	add	r1, sp, #16
 800c8f0:	4638      	mov	r0, r7
 800c8f2:	f000 f879 	bl	800c9e8 <_printf_i>
 800c8f6:	e7eb      	b.n	800c8d0 <_svfiprintf_r+0x1c0>
 800c8f8:	0800db37 	.word	0x0800db37
 800c8fc:	0800db41 	.word	0x0800db41
 800c900:	00000000 	.word	0x00000000
 800c904:	0800c65d 	.word	0x0800c65d
 800c908:	0800db3d 	.word	0x0800db3d

0800c90c <_printf_common>:
 800c90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c910:	4616      	mov	r6, r2
 800c912:	4699      	mov	r9, r3
 800c914:	688a      	ldr	r2, [r1, #8]
 800c916:	690b      	ldr	r3, [r1, #16]
 800c918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c91c:	4293      	cmp	r3, r2
 800c91e:	bfb8      	it	lt
 800c920:	4613      	movlt	r3, r2
 800c922:	6033      	str	r3, [r6, #0]
 800c924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c928:	4607      	mov	r7, r0
 800c92a:	460c      	mov	r4, r1
 800c92c:	b10a      	cbz	r2, 800c932 <_printf_common+0x26>
 800c92e:	3301      	adds	r3, #1
 800c930:	6033      	str	r3, [r6, #0]
 800c932:	6823      	ldr	r3, [r4, #0]
 800c934:	0699      	lsls	r1, r3, #26
 800c936:	bf42      	ittt	mi
 800c938:	6833      	ldrmi	r3, [r6, #0]
 800c93a:	3302      	addmi	r3, #2
 800c93c:	6033      	strmi	r3, [r6, #0]
 800c93e:	6825      	ldr	r5, [r4, #0]
 800c940:	f015 0506 	ands.w	r5, r5, #6
 800c944:	d106      	bne.n	800c954 <_printf_common+0x48>
 800c946:	f104 0a19 	add.w	sl, r4, #25
 800c94a:	68e3      	ldr	r3, [r4, #12]
 800c94c:	6832      	ldr	r2, [r6, #0]
 800c94e:	1a9b      	subs	r3, r3, r2
 800c950:	42ab      	cmp	r3, r5
 800c952:	dc26      	bgt.n	800c9a2 <_printf_common+0x96>
 800c954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c958:	1e13      	subs	r3, r2, #0
 800c95a:	6822      	ldr	r2, [r4, #0]
 800c95c:	bf18      	it	ne
 800c95e:	2301      	movne	r3, #1
 800c960:	0692      	lsls	r2, r2, #26
 800c962:	d42b      	bmi.n	800c9bc <_printf_common+0xb0>
 800c964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c968:	4649      	mov	r1, r9
 800c96a:	4638      	mov	r0, r7
 800c96c:	47c0      	blx	r8
 800c96e:	3001      	adds	r0, #1
 800c970:	d01e      	beq.n	800c9b0 <_printf_common+0xa4>
 800c972:	6823      	ldr	r3, [r4, #0]
 800c974:	6922      	ldr	r2, [r4, #16]
 800c976:	f003 0306 	and.w	r3, r3, #6
 800c97a:	2b04      	cmp	r3, #4
 800c97c:	bf02      	ittt	eq
 800c97e:	68e5      	ldreq	r5, [r4, #12]
 800c980:	6833      	ldreq	r3, [r6, #0]
 800c982:	1aed      	subeq	r5, r5, r3
 800c984:	68a3      	ldr	r3, [r4, #8]
 800c986:	bf0c      	ite	eq
 800c988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c98c:	2500      	movne	r5, #0
 800c98e:	4293      	cmp	r3, r2
 800c990:	bfc4      	itt	gt
 800c992:	1a9b      	subgt	r3, r3, r2
 800c994:	18ed      	addgt	r5, r5, r3
 800c996:	2600      	movs	r6, #0
 800c998:	341a      	adds	r4, #26
 800c99a:	42b5      	cmp	r5, r6
 800c99c:	d11a      	bne.n	800c9d4 <_printf_common+0xc8>
 800c99e:	2000      	movs	r0, #0
 800c9a0:	e008      	b.n	800c9b4 <_printf_common+0xa8>
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	4652      	mov	r2, sl
 800c9a6:	4649      	mov	r1, r9
 800c9a8:	4638      	mov	r0, r7
 800c9aa:	47c0      	blx	r8
 800c9ac:	3001      	adds	r0, #1
 800c9ae:	d103      	bne.n	800c9b8 <_printf_common+0xac>
 800c9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9b8:	3501      	adds	r5, #1
 800c9ba:	e7c6      	b.n	800c94a <_printf_common+0x3e>
 800c9bc:	18e1      	adds	r1, r4, r3
 800c9be:	1c5a      	adds	r2, r3, #1
 800c9c0:	2030      	movs	r0, #48	; 0x30
 800c9c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c9c6:	4422      	add	r2, r4
 800c9c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c9cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c9d0:	3302      	adds	r3, #2
 800c9d2:	e7c7      	b.n	800c964 <_printf_common+0x58>
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	4622      	mov	r2, r4
 800c9d8:	4649      	mov	r1, r9
 800c9da:	4638      	mov	r0, r7
 800c9dc:	47c0      	blx	r8
 800c9de:	3001      	adds	r0, #1
 800c9e0:	d0e6      	beq.n	800c9b0 <_printf_common+0xa4>
 800c9e2:	3601      	adds	r6, #1
 800c9e4:	e7d9      	b.n	800c99a <_printf_common+0x8e>
	...

0800c9e8 <_printf_i>:
 800c9e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9ec:	7e0f      	ldrb	r7, [r1, #24]
 800c9ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c9f0:	2f78      	cmp	r7, #120	; 0x78
 800c9f2:	4691      	mov	r9, r2
 800c9f4:	4680      	mov	r8, r0
 800c9f6:	460c      	mov	r4, r1
 800c9f8:	469a      	mov	sl, r3
 800c9fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c9fe:	d807      	bhi.n	800ca10 <_printf_i+0x28>
 800ca00:	2f62      	cmp	r7, #98	; 0x62
 800ca02:	d80a      	bhi.n	800ca1a <_printf_i+0x32>
 800ca04:	2f00      	cmp	r7, #0
 800ca06:	f000 80d4 	beq.w	800cbb2 <_printf_i+0x1ca>
 800ca0a:	2f58      	cmp	r7, #88	; 0x58
 800ca0c:	f000 80c0 	beq.w	800cb90 <_printf_i+0x1a8>
 800ca10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca18:	e03a      	b.n	800ca90 <_printf_i+0xa8>
 800ca1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca1e:	2b15      	cmp	r3, #21
 800ca20:	d8f6      	bhi.n	800ca10 <_printf_i+0x28>
 800ca22:	a101      	add	r1, pc, #4	; (adr r1, 800ca28 <_printf_i+0x40>)
 800ca24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca28:	0800ca81 	.word	0x0800ca81
 800ca2c:	0800ca95 	.word	0x0800ca95
 800ca30:	0800ca11 	.word	0x0800ca11
 800ca34:	0800ca11 	.word	0x0800ca11
 800ca38:	0800ca11 	.word	0x0800ca11
 800ca3c:	0800ca11 	.word	0x0800ca11
 800ca40:	0800ca95 	.word	0x0800ca95
 800ca44:	0800ca11 	.word	0x0800ca11
 800ca48:	0800ca11 	.word	0x0800ca11
 800ca4c:	0800ca11 	.word	0x0800ca11
 800ca50:	0800ca11 	.word	0x0800ca11
 800ca54:	0800cb99 	.word	0x0800cb99
 800ca58:	0800cac1 	.word	0x0800cac1
 800ca5c:	0800cb53 	.word	0x0800cb53
 800ca60:	0800ca11 	.word	0x0800ca11
 800ca64:	0800ca11 	.word	0x0800ca11
 800ca68:	0800cbbb 	.word	0x0800cbbb
 800ca6c:	0800ca11 	.word	0x0800ca11
 800ca70:	0800cac1 	.word	0x0800cac1
 800ca74:	0800ca11 	.word	0x0800ca11
 800ca78:	0800ca11 	.word	0x0800ca11
 800ca7c:	0800cb5b 	.word	0x0800cb5b
 800ca80:	682b      	ldr	r3, [r5, #0]
 800ca82:	1d1a      	adds	r2, r3, #4
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	602a      	str	r2, [r5, #0]
 800ca88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca90:	2301      	movs	r3, #1
 800ca92:	e09f      	b.n	800cbd4 <_printf_i+0x1ec>
 800ca94:	6820      	ldr	r0, [r4, #0]
 800ca96:	682b      	ldr	r3, [r5, #0]
 800ca98:	0607      	lsls	r7, r0, #24
 800ca9a:	f103 0104 	add.w	r1, r3, #4
 800ca9e:	6029      	str	r1, [r5, #0]
 800caa0:	d501      	bpl.n	800caa6 <_printf_i+0xbe>
 800caa2:	681e      	ldr	r6, [r3, #0]
 800caa4:	e003      	b.n	800caae <_printf_i+0xc6>
 800caa6:	0646      	lsls	r6, r0, #25
 800caa8:	d5fb      	bpl.n	800caa2 <_printf_i+0xba>
 800caaa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800caae:	2e00      	cmp	r6, #0
 800cab0:	da03      	bge.n	800caba <_printf_i+0xd2>
 800cab2:	232d      	movs	r3, #45	; 0x2d
 800cab4:	4276      	negs	r6, r6
 800cab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caba:	485a      	ldr	r0, [pc, #360]	; (800cc24 <_printf_i+0x23c>)
 800cabc:	230a      	movs	r3, #10
 800cabe:	e012      	b.n	800cae6 <_printf_i+0xfe>
 800cac0:	682b      	ldr	r3, [r5, #0]
 800cac2:	6820      	ldr	r0, [r4, #0]
 800cac4:	1d19      	adds	r1, r3, #4
 800cac6:	6029      	str	r1, [r5, #0]
 800cac8:	0605      	lsls	r5, r0, #24
 800caca:	d501      	bpl.n	800cad0 <_printf_i+0xe8>
 800cacc:	681e      	ldr	r6, [r3, #0]
 800cace:	e002      	b.n	800cad6 <_printf_i+0xee>
 800cad0:	0641      	lsls	r1, r0, #25
 800cad2:	d5fb      	bpl.n	800cacc <_printf_i+0xe4>
 800cad4:	881e      	ldrh	r6, [r3, #0]
 800cad6:	4853      	ldr	r0, [pc, #332]	; (800cc24 <_printf_i+0x23c>)
 800cad8:	2f6f      	cmp	r7, #111	; 0x6f
 800cada:	bf0c      	ite	eq
 800cadc:	2308      	moveq	r3, #8
 800cade:	230a      	movne	r3, #10
 800cae0:	2100      	movs	r1, #0
 800cae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cae6:	6865      	ldr	r5, [r4, #4]
 800cae8:	60a5      	str	r5, [r4, #8]
 800caea:	2d00      	cmp	r5, #0
 800caec:	bfa2      	ittt	ge
 800caee:	6821      	ldrge	r1, [r4, #0]
 800caf0:	f021 0104 	bicge.w	r1, r1, #4
 800caf4:	6021      	strge	r1, [r4, #0]
 800caf6:	b90e      	cbnz	r6, 800cafc <_printf_i+0x114>
 800caf8:	2d00      	cmp	r5, #0
 800cafa:	d04b      	beq.n	800cb94 <_printf_i+0x1ac>
 800cafc:	4615      	mov	r5, r2
 800cafe:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb02:	fb03 6711 	mls	r7, r3, r1, r6
 800cb06:	5dc7      	ldrb	r7, [r0, r7]
 800cb08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb0c:	4637      	mov	r7, r6
 800cb0e:	42bb      	cmp	r3, r7
 800cb10:	460e      	mov	r6, r1
 800cb12:	d9f4      	bls.n	800cafe <_printf_i+0x116>
 800cb14:	2b08      	cmp	r3, #8
 800cb16:	d10b      	bne.n	800cb30 <_printf_i+0x148>
 800cb18:	6823      	ldr	r3, [r4, #0]
 800cb1a:	07de      	lsls	r6, r3, #31
 800cb1c:	d508      	bpl.n	800cb30 <_printf_i+0x148>
 800cb1e:	6923      	ldr	r3, [r4, #16]
 800cb20:	6861      	ldr	r1, [r4, #4]
 800cb22:	4299      	cmp	r1, r3
 800cb24:	bfde      	ittt	le
 800cb26:	2330      	movle	r3, #48	; 0x30
 800cb28:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb30:	1b52      	subs	r2, r2, r5
 800cb32:	6122      	str	r2, [r4, #16]
 800cb34:	f8cd a000 	str.w	sl, [sp]
 800cb38:	464b      	mov	r3, r9
 800cb3a:	aa03      	add	r2, sp, #12
 800cb3c:	4621      	mov	r1, r4
 800cb3e:	4640      	mov	r0, r8
 800cb40:	f7ff fee4 	bl	800c90c <_printf_common>
 800cb44:	3001      	adds	r0, #1
 800cb46:	d14a      	bne.n	800cbde <_printf_i+0x1f6>
 800cb48:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4c:	b004      	add	sp, #16
 800cb4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb52:	6823      	ldr	r3, [r4, #0]
 800cb54:	f043 0320 	orr.w	r3, r3, #32
 800cb58:	6023      	str	r3, [r4, #0]
 800cb5a:	4833      	ldr	r0, [pc, #204]	; (800cc28 <_printf_i+0x240>)
 800cb5c:	2778      	movs	r7, #120	; 0x78
 800cb5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cb62:	6823      	ldr	r3, [r4, #0]
 800cb64:	6829      	ldr	r1, [r5, #0]
 800cb66:	061f      	lsls	r7, r3, #24
 800cb68:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb6c:	d402      	bmi.n	800cb74 <_printf_i+0x18c>
 800cb6e:	065f      	lsls	r7, r3, #25
 800cb70:	bf48      	it	mi
 800cb72:	b2b6      	uxthmi	r6, r6
 800cb74:	07df      	lsls	r7, r3, #31
 800cb76:	bf48      	it	mi
 800cb78:	f043 0320 	orrmi.w	r3, r3, #32
 800cb7c:	6029      	str	r1, [r5, #0]
 800cb7e:	bf48      	it	mi
 800cb80:	6023      	strmi	r3, [r4, #0]
 800cb82:	b91e      	cbnz	r6, 800cb8c <_printf_i+0x1a4>
 800cb84:	6823      	ldr	r3, [r4, #0]
 800cb86:	f023 0320 	bic.w	r3, r3, #32
 800cb8a:	6023      	str	r3, [r4, #0]
 800cb8c:	2310      	movs	r3, #16
 800cb8e:	e7a7      	b.n	800cae0 <_printf_i+0xf8>
 800cb90:	4824      	ldr	r0, [pc, #144]	; (800cc24 <_printf_i+0x23c>)
 800cb92:	e7e4      	b.n	800cb5e <_printf_i+0x176>
 800cb94:	4615      	mov	r5, r2
 800cb96:	e7bd      	b.n	800cb14 <_printf_i+0x12c>
 800cb98:	682b      	ldr	r3, [r5, #0]
 800cb9a:	6826      	ldr	r6, [r4, #0]
 800cb9c:	6961      	ldr	r1, [r4, #20]
 800cb9e:	1d18      	adds	r0, r3, #4
 800cba0:	6028      	str	r0, [r5, #0]
 800cba2:	0635      	lsls	r5, r6, #24
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	d501      	bpl.n	800cbac <_printf_i+0x1c4>
 800cba8:	6019      	str	r1, [r3, #0]
 800cbaa:	e002      	b.n	800cbb2 <_printf_i+0x1ca>
 800cbac:	0670      	lsls	r0, r6, #25
 800cbae:	d5fb      	bpl.n	800cba8 <_printf_i+0x1c0>
 800cbb0:	8019      	strh	r1, [r3, #0]
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	6123      	str	r3, [r4, #16]
 800cbb6:	4615      	mov	r5, r2
 800cbb8:	e7bc      	b.n	800cb34 <_printf_i+0x14c>
 800cbba:	682b      	ldr	r3, [r5, #0]
 800cbbc:	1d1a      	adds	r2, r3, #4
 800cbbe:	602a      	str	r2, [r5, #0]
 800cbc0:	681d      	ldr	r5, [r3, #0]
 800cbc2:	6862      	ldr	r2, [r4, #4]
 800cbc4:	2100      	movs	r1, #0
 800cbc6:	4628      	mov	r0, r5
 800cbc8:	f7f3 fb22 	bl	8000210 <memchr>
 800cbcc:	b108      	cbz	r0, 800cbd2 <_printf_i+0x1ea>
 800cbce:	1b40      	subs	r0, r0, r5
 800cbd0:	6060      	str	r0, [r4, #4]
 800cbd2:	6863      	ldr	r3, [r4, #4]
 800cbd4:	6123      	str	r3, [r4, #16]
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbdc:	e7aa      	b.n	800cb34 <_printf_i+0x14c>
 800cbde:	6923      	ldr	r3, [r4, #16]
 800cbe0:	462a      	mov	r2, r5
 800cbe2:	4649      	mov	r1, r9
 800cbe4:	4640      	mov	r0, r8
 800cbe6:	47d0      	blx	sl
 800cbe8:	3001      	adds	r0, #1
 800cbea:	d0ad      	beq.n	800cb48 <_printf_i+0x160>
 800cbec:	6823      	ldr	r3, [r4, #0]
 800cbee:	079b      	lsls	r3, r3, #30
 800cbf0:	d413      	bmi.n	800cc1a <_printf_i+0x232>
 800cbf2:	68e0      	ldr	r0, [r4, #12]
 800cbf4:	9b03      	ldr	r3, [sp, #12]
 800cbf6:	4298      	cmp	r0, r3
 800cbf8:	bfb8      	it	lt
 800cbfa:	4618      	movlt	r0, r3
 800cbfc:	e7a6      	b.n	800cb4c <_printf_i+0x164>
 800cbfe:	2301      	movs	r3, #1
 800cc00:	4632      	mov	r2, r6
 800cc02:	4649      	mov	r1, r9
 800cc04:	4640      	mov	r0, r8
 800cc06:	47d0      	blx	sl
 800cc08:	3001      	adds	r0, #1
 800cc0a:	d09d      	beq.n	800cb48 <_printf_i+0x160>
 800cc0c:	3501      	adds	r5, #1
 800cc0e:	68e3      	ldr	r3, [r4, #12]
 800cc10:	9903      	ldr	r1, [sp, #12]
 800cc12:	1a5b      	subs	r3, r3, r1
 800cc14:	42ab      	cmp	r3, r5
 800cc16:	dcf2      	bgt.n	800cbfe <_printf_i+0x216>
 800cc18:	e7eb      	b.n	800cbf2 <_printf_i+0x20a>
 800cc1a:	2500      	movs	r5, #0
 800cc1c:	f104 0619 	add.w	r6, r4, #25
 800cc20:	e7f5      	b.n	800cc0e <_printf_i+0x226>
 800cc22:	bf00      	nop
 800cc24:	0800db48 	.word	0x0800db48
 800cc28:	0800db59 	.word	0x0800db59

0800cc2c <__sflush_r>:
 800cc2c:	898a      	ldrh	r2, [r1, #12]
 800cc2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc32:	4605      	mov	r5, r0
 800cc34:	0710      	lsls	r0, r2, #28
 800cc36:	460c      	mov	r4, r1
 800cc38:	d458      	bmi.n	800ccec <__sflush_r+0xc0>
 800cc3a:	684b      	ldr	r3, [r1, #4]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	dc05      	bgt.n	800cc4c <__sflush_r+0x20>
 800cc40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	dc02      	bgt.n	800cc4c <__sflush_r+0x20>
 800cc46:	2000      	movs	r0, #0
 800cc48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc4e:	2e00      	cmp	r6, #0
 800cc50:	d0f9      	beq.n	800cc46 <__sflush_r+0x1a>
 800cc52:	2300      	movs	r3, #0
 800cc54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc58:	682f      	ldr	r7, [r5, #0]
 800cc5a:	6a21      	ldr	r1, [r4, #32]
 800cc5c:	602b      	str	r3, [r5, #0]
 800cc5e:	d032      	beq.n	800ccc6 <__sflush_r+0x9a>
 800cc60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc62:	89a3      	ldrh	r3, [r4, #12]
 800cc64:	075a      	lsls	r2, r3, #29
 800cc66:	d505      	bpl.n	800cc74 <__sflush_r+0x48>
 800cc68:	6863      	ldr	r3, [r4, #4]
 800cc6a:	1ac0      	subs	r0, r0, r3
 800cc6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc6e:	b10b      	cbz	r3, 800cc74 <__sflush_r+0x48>
 800cc70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc72:	1ac0      	subs	r0, r0, r3
 800cc74:	2300      	movs	r3, #0
 800cc76:	4602      	mov	r2, r0
 800cc78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc7a:	6a21      	ldr	r1, [r4, #32]
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	47b0      	blx	r6
 800cc80:	1c43      	adds	r3, r0, #1
 800cc82:	89a3      	ldrh	r3, [r4, #12]
 800cc84:	d106      	bne.n	800cc94 <__sflush_r+0x68>
 800cc86:	6829      	ldr	r1, [r5, #0]
 800cc88:	291d      	cmp	r1, #29
 800cc8a:	d82b      	bhi.n	800cce4 <__sflush_r+0xb8>
 800cc8c:	4a29      	ldr	r2, [pc, #164]	; (800cd34 <__sflush_r+0x108>)
 800cc8e:	410a      	asrs	r2, r1
 800cc90:	07d6      	lsls	r6, r2, #31
 800cc92:	d427      	bmi.n	800cce4 <__sflush_r+0xb8>
 800cc94:	2200      	movs	r2, #0
 800cc96:	6062      	str	r2, [r4, #4]
 800cc98:	04d9      	lsls	r1, r3, #19
 800cc9a:	6922      	ldr	r2, [r4, #16]
 800cc9c:	6022      	str	r2, [r4, #0]
 800cc9e:	d504      	bpl.n	800ccaa <__sflush_r+0x7e>
 800cca0:	1c42      	adds	r2, r0, #1
 800cca2:	d101      	bne.n	800cca8 <__sflush_r+0x7c>
 800cca4:	682b      	ldr	r3, [r5, #0]
 800cca6:	b903      	cbnz	r3, 800ccaa <__sflush_r+0x7e>
 800cca8:	6560      	str	r0, [r4, #84]	; 0x54
 800ccaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccac:	602f      	str	r7, [r5, #0]
 800ccae:	2900      	cmp	r1, #0
 800ccb0:	d0c9      	beq.n	800cc46 <__sflush_r+0x1a>
 800ccb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccb6:	4299      	cmp	r1, r3
 800ccb8:	d002      	beq.n	800ccc0 <__sflush_r+0x94>
 800ccba:	4628      	mov	r0, r5
 800ccbc:	f7ff fbce 	bl	800c45c <_free_r>
 800ccc0:	2000      	movs	r0, #0
 800ccc2:	6360      	str	r0, [r4, #52]	; 0x34
 800ccc4:	e7c0      	b.n	800cc48 <__sflush_r+0x1c>
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	4628      	mov	r0, r5
 800ccca:	47b0      	blx	r6
 800cccc:	1c41      	adds	r1, r0, #1
 800ccce:	d1c8      	bne.n	800cc62 <__sflush_r+0x36>
 800ccd0:	682b      	ldr	r3, [r5, #0]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d0c5      	beq.n	800cc62 <__sflush_r+0x36>
 800ccd6:	2b1d      	cmp	r3, #29
 800ccd8:	d001      	beq.n	800ccde <__sflush_r+0xb2>
 800ccda:	2b16      	cmp	r3, #22
 800ccdc:	d101      	bne.n	800cce2 <__sflush_r+0xb6>
 800ccde:	602f      	str	r7, [r5, #0]
 800cce0:	e7b1      	b.n	800cc46 <__sflush_r+0x1a>
 800cce2:	89a3      	ldrh	r3, [r4, #12]
 800cce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cce8:	81a3      	strh	r3, [r4, #12]
 800ccea:	e7ad      	b.n	800cc48 <__sflush_r+0x1c>
 800ccec:	690f      	ldr	r7, [r1, #16]
 800ccee:	2f00      	cmp	r7, #0
 800ccf0:	d0a9      	beq.n	800cc46 <__sflush_r+0x1a>
 800ccf2:	0793      	lsls	r3, r2, #30
 800ccf4:	680e      	ldr	r6, [r1, #0]
 800ccf6:	bf08      	it	eq
 800ccf8:	694b      	ldreq	r3, [r1, #20]
 800ccfa:	600f      	str	r7, [r1, #0]
 800ccfc:	bf18      	it	ne
 800ccfe:	2300      	movne	r3, #0
 800cd00:	eba6 0807 	sub.w	r8, r6, r7
 800cd04:	608b      	str	r3, [r1, #8]
 800cd06:	f1b8 0f00 	cmp.w	r8, #0
 800cd0a:	dd9c      	ble.n	800cc46 <__sflush_r+0x1a>
 800cd0c:	6a21      	ldr	r1, [r4, #32]
 800cd0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd10:	4643      	mov	r3, r8
 800cd12:	463a      	mov	r2, r7
 800cd14:	4628      	mov	r0, r5
 800cd16:	47b0      	blx	r6
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	dc06      	bgt.n	800cd2a <__sflush_r+0xfe>
 800cd1c:	89a3      	ldrh	r3, [r4, #12]
 800cd1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd22:	81a3      	strh	r3, [r4, #12]
 800cd24:	f04f 30ff 	mov.w	r0, #4294967295
 800cd28:	e78e      	b.n	800cc48 <__sflush_r+0x1c>
 800cd2a:	4407      	add	r7, r0
 800cd2c:	eba8 0800 	sub.w	r8, r8, r0
 800cd30:	e7e9      	b.n	800cd06 <__sflush_r+0xda>
 800cd32:	bf00      	nop
 800cd34:	dfbffffe 	.word	0xdfbffffe

0800cd38 <_fflush_r>:
 800cd38:	b538      	push	{r3, r4, r5, lr}
 800cd3a:	690b      	ldr	r3, [r1, #16]
 800cd3c:	4605      	mov	r5, r0
 800cd3e:	460c      	mov	r4, r1
 800cd40:	b913      	cbnz	r3, 800cd48 <_fflush_r+0x10>
 800cd42:	2500      	movs	r5, #0
 800cd44:	4628      	mov	r0, r5
 800cd46:	bd38      	pop	{r3, r4, r5, pc}
 800cd48:	b118      	cbz	r0, 800cd52 <_fflush_r+0x1a>
 800cd4a:	6a03      	ldr	r3, [r0, #32]
 800cd4c:	b90b      	cbnz	r3, 800cd52 <_fflush_r+0x1a>
 800cd4e:	f7ff f9dd 	bl	800c10c <__sinit>
 800cd52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d0f3      	beq.n	800cd42 <_fflush_r+0xa>
 800cd5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd5c:	07d0      	lsls	r0, r2, #31
 800cd5e:	d404      	bmi.n	800cd6a <_fflush_r+0x32>
 800cd60:	0599      	lsls	r1, r3, #22
 800cd62:	d402      	bmi.n	800cd6a <_fflush_r+0x32>
 800cd64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd66:	f7ff fb51 	bl	800c40c <__retarget_lock_acquire_recursive>
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	4621      	mov	r1, r4
 800cd6e:	f7ff ff5d 	bl	800cc2c <__sflush_r>
 800cd72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd74:	07da      	lsls	r2, r3, #31
 800cd76:	4605      	mov	r5, r0
 800cd78:	d4e4      	bmi.n	800cd44 <_fflush_r+0xc>
 800cd7a:	89a3      	ldrh	r3, [r4, #12]
 800cd7c:	059b      	lsls	r3, r3, #22
 800cd7e:	d4e1      	bmi.n	800cd44 <_fflush_r+0xc>
 800cd80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd82:	f7ff fb44 	bl	800c40e <__retarget_lock_release_recursive>
 800cd86:	e7dd      	b.n	800cd44 <_fflush_r+0xc>

0800cd88 <fiprintf>:
 800cd88:	b40e      	push	{r1, r2, r3}
 800cd8a:	b503      	push	{r0, r1, lr}
 800cd8c:	4601      	mov	r1, r0
 800cd8e:	ab03      	add	r3, sp, #12
 800cd90:	4805      	ldr	r0, [pc, #20]	; (800cda8 <fiprintf+0x20>)
 800cd92:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd96:	6800      	ldr	r0, [r0, #0]
 800cd98:	9301      	str	r3, [sp, #4]
 800cd9a:	f000 f89f 	bl	800cedc <_vfiprintf_r>
 800cd9e:	b002      	add	sp, #8
 800cda0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cda4:	b003      	add	sp, #12
 800cda6:	4770      	bx	lr
 800cda8:	20000194 	.word	0x20000194

0800cdac <memmove>:
 800cdac:	4288      	cmp	r0, r1
 800cdae:	b510      	push	{r4, lr}
 800cdb0:	eb01 0402 	add.w	r4, r1, r2
 800cdb4:	d902      	bls.n	800cdbc <memmove+0x10>
 800cdb6:	4284      	cmp	r4, r0
 800cdb8:	4623      	mov	r3, r4
 800cdba:	d807      	bhi.n	800cdcc <memmove+0x20>
 800cdbc:	1e43      	subs	r3, r0, #1
 800cdbe:	42a1      	cmp	r1, r4
 800cdc0:	d008      	beq.n	800cdd4 <memmove+0x28>
 800cdc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cdca:	e7f8      	b.n	800cdbe <memmove+0x12>
 800cdcc:	4402      	add	r2, r0
 800cdce:	4601      	mov	r1, r0
 800cdd0:	428a      	cmp	r2, r1
 800cdd2:	d100      	bne.n	800cdd6 <memmove+0x2a>
 800cdd4:	bd10      	pop	{r4, pc}
 800cdd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cdda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cdde:	e7f7      	b.n	800cdd0 <memmove+0x24>

0800cde0 <_sbrk_r>:
 800cde0:	b538      	push	{r3, r4, r5, lr}
 800cde2:	4d06      	ldr	r5, [pc, #24]	; (800cdfc <_sbrk_r+0x1c>)
 800cde4:	2300      	movs	r3, #0
 800cde6:	4604      	mov	r4, r0
 800cde8:	4608      	mov	r0, r1
 800cdea:	602b      	str	r3, [r5, #0]
 800cdec:	f7f4 ffd2 	bl	8001d94 <_sbrk>
 800cdf0:	1c43      	adds	r3, r0, #1
 800cdf2:	d102      	bne.n	800cdfa <_sbrk_r+0x1a>
 800cdf4:	682b      	ldr	r3, [r5, #0]
 800cdf6:	b103      	cbz	r3, 800cdfa <_sbrk_r+0x1a>
 800cdf8:	6023      	str	r3, [r4, #0]
 800cdfa:	bd38      	pop	{r3, r4, r5, pc}
 800cdfc:	20002e94 	.word	0x20002e94

0800ce00 <memcpy>:
 800ce00:	440a      	add	r2, r1
 800ce02:	4291      	cmp	r1, r2
 800ce04:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce08:	d100      	bne.n	800ce0c <memcpy+0xc>
 800ce0a:	4770      	bx	lr
 800ce0c:	b510      	push	{r4, lr}
 800ce0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce16:	4291      	cmp	r1, r2
 800ce18:	d1f9      	bne.n	800ce0e <memcpy+0xe>
 800ce1a:	bd10      	pop	{r4, pc}

0800ce1c <abort>:
 800ce1c:	b508      	push	{r3, lr}
 800ce1e:	2006      	movs	r0, #6
 800ce20:	f000 fa34 	bl	800d28c <raise>
 800ce24:	2001      	movs	r0, #1
 800ce26:	f7f4 ff3d 	bl	8001ca4 <_exit>

0800ce2a <_realloc_r>:
 800ce2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce2e:	4680      	mov	r8, r0
 800ce30:	4614      	mov	r4, r2
 800ce32:	460e      	mov	r6, r1
 800ce34:	b921      	cbnz	r1, 800ce40 <_realloc_r+0x16>
 800ce36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce3a:	4611      	mov	r1, r2
 800ce3c:	f7ff bb82 	b.w	800c544 <_malloc_r>
 800ce40:	b92a      	cbnz	r2, 800ce4e <_realloc_r+0x24>
 800ce42:	f7ff fb0b 	bl	800c45c <_free_r>
 800ce46:	4625      	mov	r5, r4
 800ce48:	4628      	mov	r0, r5
 800ce4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce4e:	f000 fa39 	bl	800d2c4 <_malloc_usable_size_r>
 800ce52:	4284      	cmp	r4, r0
 800ce54:	4607      	mov	r7, r0
 800ce56:	d802      	bhi.n	800ce5e <_realloc_r+0x34>
 800ce58:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce5c:	d812      	bhi.n	800ce84 <_realloc_r+0x5a>
 800ce5e:	4621      	mov	r1, r4
 800ce60:	4640      	mov	r0, r8
 800ce62:	f7ff fb6f 	bl	800c544 <_malloc_r>
 800ce66:	4605      	mov	r5, r0
 800ce68:	2800      	cmp	r0, #0
 800ce6a:	d0ed      	beq.n	800ce48 <_realloc_r+0x1e>
 800ce6c:	42bc      	cmp	r4, r7
 800ce6e:	4622      	mov	r2, r4
 800ce70:	4631      	mov	r1, r6
 800ce72:	bf28      	it	cs
 800ce74:	463a      	movcs	r2, r7
 800ce76:	f7ff ffc3 	bl	800ce00 <memcpy>
 800ce7a:	4631      	mov	r1, r6
 800ce7c:	4640      	mov	r0, r8
 800ce7e:	f7ff faed 	bl	800c45c <_free_r>
 800ce82:	e7e1      	b.n	800ce48 <_realloc_r+0x1e>
 800ce84:	4635      	mov	r5, r6
 800ce86:	e7df      	b.n	800ce48 <_realloc_r+0x1e>

0800ce88 <__sfputc_r>:
 800ce88:	6893      	ldr	r3, [r2, #8]
 800ce8a:	3b01      	subs	r3, #1
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	b410      	push	{r4}
 800ce90:	6093      	str	r3, [r2, #8]
 800ce92:	da08      	bge.n	800cea6 <__sfputc_r+0x1e>
 800ce94:	6994      	ldr	r4, [r2, #24]
 800ce96:	42a3      	cmp	r3, r4
 800ce98:	db01      	blt.n	800ce9e <__sfputc_r+0x16>
 800ce9a:	290a      	cmp	r1, #10
 800ce9c:	d103      	bne.n	800cea6 <__sfputc_r+0x1e>
 800ce9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cea2:	f000 b935 	b.w	800d110 <__swbuf_r>
 800cea6:	6813      	ldr	r3, [r2, #0]
 800cea8:	1c58      	adds	r0, r3, #1
 800ceaa:	6010      	str	r0, [r2, #0]
 800ceac:	7019      	strb	r1, [r3, #0]
 800ceae:	4608      	mov	r0, r1
 800ceb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ceb4:	4770      	bx	lr

0800ceb6 <__sfputs_r>:
 800ceb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb8:	4606      	mov	r6, r0
 800ceba:	460f      	mov	r7, r1
 800cebc:	4614      	mov	r4, r2
 800cebe:	18d5      	adds	r5, r2, r3
 800cec0:	42ac      	cmp	r4, r5
 800cec2:	d101      	bne.n	800cec8 <__sfputs_r+0x12>
 800cec4:	2000      	movs	r0, #0
 800cec6:	e007      	b.n	800ced8 <__sfputs_r+0x22>
 800cec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cecc:	463a      	mov	r2, r7
 800cece:	4630      	mov	r0, r6
 800ced0:	f7ff ffda 	bl	800ce88 <__sfputc_r>
 800ced4:	1c43      	adds	r3, r0, #1
 800ced6:	d1f3      	bne.n	800cec0 <__sfputs_r+0xa>
 800ced8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cedc <_vfiprintf_r>:
 800cedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee0:	460d      	mov	r5, r1
 800cee2:	b09d      	sub	sp, #116	; 0x74
 800cee4:	4614      	mov	r4, r2
 800cee6:	4698      	mov	r8, r3
 800cee8:	4606      	mov	r6, r0
 800ceea:	b118      	cbz	r0, 800cef4 <_vfiprintf_r+0x18>
 800ceec:	6a03      	ldr	r3, [r0, #32]
 800ceee:	b90b      	cbnz	r3, 800cef4 <_vfiprintf_r+0x18>
 800cef0:	f7ff f90c 	bl	800c10c <__sinit>
 800cef4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cef6:	07d9      	lsls	r1, r3, #31
 800cef8:	d405      	bmi.n	800cf06 <_vfiprintf_r+0x2a>
 800cefa:	89ab      	ldrh	r3, [r5, #12]
 800cefc:	059a      	lsls	r2, r3, #22
 800cefe:	d402      	bmi.n	800cf06 <_vfiprintf_r+0x2a>
 800cf00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf02:	f7ff fa83 	bl	800c40c <__retarget_lock_acquire_recursive>
 800cf06:	89ab      	ldrh	r3, [r5, #12]
 800cf08:	071b      	lsls	r3, r3, #28
 800cf0a:	d501      	bpl.n	800cf10 <_vfiprintf_r+0x34>
 800cf0c:	692b      	ldr	r3, [r5, #16]
 800cf0e:	b99b      	cbnz	r3, 800cf38 <_vfiprintf_r+0x5c>
 800cf10:	4629      	mov	r1, r5
 800cf12:	4630      	mov	r0, r6
 800cf14:	f000 f93a 	bl	800d18c <__swsetup_r>
 800cf18:	b170      	cbz	r0, 800cf38 <_vfiprintf_r+0x5c>
 800cf1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf1c:	07dc      	lsls	r4, r3, #31
 800cf1e:	d504      	bpl.n	800cf2a <_vfiprintf_r+0x4e>
 800cf20:	f04f 30ff 	mov.w	r0, #4294967295
 800cf24:	b01d      	add	sp, #116	; 0x74
 800cf26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf2a:	89ab      	ldrh	r3, [r5, #12]
 800cf2c:	0598      	lsls	r0, r3, #22
 800cf2e:	d4f7      	bmi.n	800cf20 <_vfiprintf_r+0x44>
 800cf30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf32:	f7ff fa6c 	bl	800c40e <__retarget_lock_release_recursive>
 800cf36:	e7f3      	b.n	800cf20 <_vfiprintf_r+0x44>
 800cf38:	2300      	movs	r3, #0
 800cf3a:	9309      	str	r3, [sp, #36]	; 0x24
 800cf3c:	2320      	movs	r3, #32
 800cf3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf42:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf46:	2330      	movs	r3, #48	; 0x30
 800cf48:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d0fc <_vfiprintf_r+0x220>
 800cf4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf50:	f04f 0901 	mov.w	r9, #1
 800cf54:	4623      	mov	r3, r4
 800cf56:	469a      	mov	sl, r3
 800cf58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf5c:	b10a      	cbz	r2, 800cf62 <_vfiprintf_r+0x86>
 800cf5e:	2a25      	cmp	r2, #37	; 0x25
 800cf60:	d1f9      	bne.n	800cf56 <_vfiprintf_r+0x7a>
 800cf62:	ebba 0b04 	subs.w	fp, sl, r4
 800cf66:	d00b      	beq.n	800cf80 <_vfiprintf_r+0xa4>
 800cf68:	465b      	mov	r3, fp
 800cf6a:	4622      	mov	r2, r4
 800cf6c:	4629      	mov	r1, r5
 800cf6e:	4630      	mov	r0, r6
 800cf70:	f7ff ffa1 	bl	800ceb6 <__sfputs_r>
 800cf74:	3001      	adds	r0, #1
 800cf76:	f000 80a9 	beq.w	800d0cc <_vfiprintf_r+0x1f0>
 800cf7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf7c:	445a      	add	r2, fp
 800cf7e:	9209      	str	r2, [sp, #36]	; 0x24
 800cf80:	f89a 3000 	ldrb.w	r3, [sl]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	f000 80a1 	beq.w	800d0cc <_vfiprintf_r+0x1f0>
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	f04f 32ff 	mov.w	r2, #4294967295
 800cf90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf94:	f10a 0a01 	add.w	sl, sl, #1
 800cf98:	9304      	str	r3, [sp, #16]
 800cf9a:	9307      	str	r3, [sp, #28]
 800cf9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfa0:	931a      	str	r3, [sp, #104]	; 0x68
 800cfa2:	4654      	mov	r4, sl
 800cfa4:	2205      	movs	r2, #5
 800cfa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfaa:	4854      	ldr	r0, [pc, #336]	; (800d0fc <_vfiprintf_r+0x220>)
 800cfac:	f7f3 f930 	bl	8000210 <memchr>
 800cfb0:	9a04      	ldr	r2, [sp, #16]
 800cfb2:	b9d8      	cbnz	r0, 800cfec <_vfiprintf_r+0x110>
 800cfb4:	06d1      	lsls	r1, r2, #27
 800cfb6:	bf44      	itt	mi
 800cfb8:	2320      	movmi	r3, #32
 800cfba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfbe:	0713      	lsls	r3, r2, #28
 800cfc0:	bf44      	itt	mi
 800cfc2:	232b      	movmi	r3, #43	; 0x2b
 800cfc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfc8:	f89a 3000 	ldrb.w	r3, [sl]
 800cfcc:	2b2a      	cmp	r3, #42	; 0x2a
 800cfce:	d015      	beq.n	800cffc <_vfiprintf_r+0x120>
 800cfd0:	9a07      	ldr	r2, [sp, #28]
 800cfd2:	4654      	mov	r4, sl
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	f04f 0c0a 	mov.w	ip, #10
 800cfda:	4621      	mov	r1, r4
 800cfdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfe0:	3b30      	subs	r3, #48	; 0x30
 800cfe2:	2b09      	cmp	r3, #9
 800cfe4:	d94d      	bls.n	800d082 <_vfiprintf_r+0x1a6>
 800cfe6:	b1b0      	cbz	r0, 800d016 <_vfiprintf_r+0x13a>
 800cfe8:	9207      	str	r2, [sp, #28]
 800cfea:	e014      	b.n	800d016 <_vfiprintf_r+0x13a>
 800cfec:	eba0 0308 	sub.w	r3, r0, r8
 800cff0:	fa09 f303 	lsl.w	r3, r9, r3
 800cff4:	4313      	orrs	r3, r2
 800cff6:	9304      	str	r3, [sp, #16]
 800cff8:	46a2      	mov	sl, r4
 800cffa:	e7d2      	b.n	800cfa2 <_vfiprintf_r+0xc6>
 800cffc:	9b03      	ldr	r3, [sp, #12]
 800cffe:	1d19      	adds	r1, r3, #4
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	9103      	str	r1, [sp, #12]
 800d004:	2b00      	cmp	r3, #0
 800d006:	bfbb      	ittet	lt
 800d008:	425b      	neglt	r3, r3
 800d00a:	f042 0202 	orrlt.w	r2, r2, #2
 800d00e:	9307      	strge	r3, [sp, #28]
 800d010:	9307      	strlt	r3, [sp, #28]
 800d012:	bfb8      	it	lt
 800d014:	9204      	strlt	r2, [sp, #16]
 800d016:	7823      	ldrb	r3, [r4, #0]
 800d018:	2b2e      	cmp	r3, #46	; 0x2e
 800d01a:	d10c      	bne.n	800d036 <_vfiprintf_r+0x15a>
 800d01c:	7863      	ldrb	r3, [r4, #1]
 800d01e:	2b2a      	cmp	r3, #42	; 0x2a
 800d020:	d134      	bne.n	800d08c <_vfiprintf_r+0x1b0>
 800d022:	9b03      	ldr	r3, [sp, #12]
 800d024:	1d1a      	adds	r2, r3, #4
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	9203      	str	r2, [sp, #12]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	bfb8      	it	lt
 800d02e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d032:	3402      	adds	r4, #2
 800d034:	9305      	str	r3, [sp, #20]
 800d036:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d10c <_vfiprintf_r+0x230>
 800d03a:	7821      	ldrb	r1, [r4, #0]
 800d03c:	2203      	movs	r2, #3
 800d03e:	4650      	mov	r0, sl
 800d040:	f7f3 f8e6 	bl	8000210 <memchr>
 800d044:	b138      	cbz	r0, 800d056 <_vfiprintf_r+0x17a>
 800d046:	9b04      	ldr	r3, [sp, #16]
 800d048:	eba0 000a 	sub.w	r0, r0, sl
 800d04c:	2240      	movs	r2, #64	; 0x40
 800d04e:	4082      	lsls	r2, r0
 800d050:	4313      	orrs	r3, r2
 800d052:	3401      	adds	r4, #1
 800d054:	9304      	str	r3, [sp, #16]
 800d056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d05a:	4829      	ldr	r0, [pc, #164]	; (800d100 <_vfiprintf_r+0x224>)
 800d05c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d060:	2206      	movs	r2, #6
 800d062:	f7f3 f8d5 	bl	8000210 <memchr>
 800d066:	2800      	cmp	r0, #0
 800d068:	d03f      	beq.n	800d0ea <_vfiprintf_r+0x20e>
 800d06a:	4b26      	ldr	r3, [pc, #152]	; (800d104 <_vfiprintf_r+0x228>)
 800d06c:	bb1b      	cbnz	r3, 800d0b6 <_vfiprintf_r+0x1da>
 800d06e:	9b03      	ldr	r3, [sp, #12]
 800d070:	3307      	adds	r3, #7
 800d072:	f023 0307 	bic.w	r3, r3, #7
 800d076:	3308      	adds	r3, #8
 800d078:	9303      	str	r3, [sp, #12]
 800d07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d07c:	443b      	add	r3, r7
 800d07e:	9309      	str	r3, [sp, #36]	; 0x24
 800d080:	e768      	b.n	800cf54 <_vfiprintf_r+0x78>
 800d082:	fb0c 3202 	mla	r2, ip, r2, r3
 800d086:	460c      	mov	r4, r1
 800d088:	2001      	movs	r0, #1
 800d08a:	e7a6      	b.n	800cfda <_vfiprintf_r+0xfe>
 800d08c:	2300      	movs	r3, #0
 800d08e:	3401      	adds	r4, #1
 800d090:	9305      	str	r3, [sp, #20]
 800d092:	4619      	mov	r1, r3
 800d094:	f04f 0c0a 	mov.w	ip, #10
 800d098:	4620      	mov	r0, r4
 800d09a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d09e:	3a30      	subs	r2, #48	; 0x30
 800d0a0:	2a09      	cmp	r2, #9
 800d0a2:	d903      	bls.n	800d0ac <_vfiprintf_r+0x1d0>
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d0c6      	beq.n	800d036 <_vfiprintf_r+0x15a>
 800d0a8:	9105      	str	r1, [sp, #20]
 800d0aa:	e7c4      	b.n	800d036 <_vfiprintf_r+0x15a>
 800d0ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0b0:	4604      	mov	r4, r0
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	e7f0      	b.n	800d098 <_vfiprintf_r+0x1bc>
 800d0b6:	ab03      	add	r3, sp, #12
 800d0b8:	9300      	str	r3, [sp, #0]
 800d0ba:	462a      	mov	r2, r5
 800d0bc:	4b12      	ldr	r3, [pc, #72]	; (800d108 <_vfiprintf_r+0x22c>)
 800d0be:	a904      	add	r1, sp, #16
 800d0c0:	4630      	mov	r0, r6
 800d0c2:	f3af 8000 	nop.w
 800d0c6:	4607      	mov	r7, r0
 800d0c8:	1c78      	adds	r0, r7, #1
 800d0ca:	d1d6      	bne.n	800d07a <_vfiprintf_r+0x19e>
 800d0cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0ce:	07d9      	lsls	r1, r3, #31
 800d0d0:	d405      	bmi.n	800d0de <_vfiprintf_r+0x202>
 800d0d2:	89ab      	ldrh	r3, [r5, #12]
 800d0d4:	059a      	lsls	r2, r3, #22
 800d0d6:	d402      	bmi.n	800d0de <_vfiprintf_r+0x202>
 800d0d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0da:	f7ff f998 	bl	800c40e <__retarget_lock_release_recursive>
 800d0de:	89ab      	ldrh	r3, [r5, #12]
 800d0e0:	065b      	lsls	r3, r3, #25
 800d0e2:	f53f af1d 	bmi.w	800cf20 <_vfiprintf_r+0x44>
 800d0e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0e8:	e71c      	b.n	800cf24 <_vfiprintf_r+0x48>
 800d0ea:	ab03      	add	r3, sp, #12
 800d0ec:	9300      	str	r3, [sp, #0]
 800d0ee:	462a      	mov	r2, r5
 800d0f0:	4b05      	ldr	r3, [pc, #20]	; (800d108 <_vfiprintf_r+0x22c>)
 800d0f2:	a904      	add	r1, sp, #16
 800d0f4:	4630      	mov	r0, r6
 800d0f6:	f7ff fc77 	bl	800c9e8 <_printf_i>
 800d0fa:	e7e4      	b.n	800d0c6 <_vfiprintf_r+0x1ea>
 800d0fc:	0800db37 	.word	0x0800db37
 800d100:	0800db41 	.word	0x0800db41
 800d104:	00000000 	.word	0x00000000
 800d108:	0800ceb7 	.word	0x0800ceb7
 800d10c:	0800db3d 	.word	0x0800db3d

0800d110 <__swbuf_r>:
 800d110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d112:	460e      	mov	r6, r1
 800d114:	4614      	mov	r4, r2
 800d116:	4605      	mov	r5, r0
 800d118:	b118      	cbz	r0, 800d122 <__swbuf_r+0x12>
 800d11a:	6a03      	ldr	r3, [r0, #32]
 800d11c:	b90b      	cbnz	r3, 800d122 <__swbuf_r+0x12>
 800d11e:	f7fe fff5 	bl	800c10c <__sinit>
 800d122:	69a3      	ldr	r3, [r4, #24]
 800d124:	60a3      	str	r3, [r4, #8]
 800d126:	89a3      	ldrh	r3, [r4, #12]
 800d128:	071a      	lsls	r2, r3, #28
 800d12a:	d525      	bpl.n	800d178 <__swbuf_r+0x68>
 800d12c:	6923      	ldr	r3, [r4, #16]
 800d12e:	b31b      	cbz	r3, 800d178 <__swbuf_r+0x68>
 800d130:	6823      	ldr	r3, [r4, #0]
 800d132:	6922      	ldr	r2, [r4, #16]
 800d134:	1a98      	subs	r0, r3, r2
 800d136:	6963      	ldr	r3, [r4, #20]
 800d138:	b2f6      	uxtb	r6, r6
 800d13a:	4283      	cmp	r3, r0
 800d13c:	4637      	mov	r7, r6
 800d13e:	dc04      	bgt.n	800d14a <__swbuf_r+0x3a>
 800d140:	4621      	mov	r1, r4
 800d142:	4628      	mov	r0, r5
 800d144:	f7ff fdf8 	bl	800cd38 <_fflush_r>
 800d148:	b9e0      	cbnz	r0, 800d184 <__swbuf_r+0x74>
 800d14a:	68a3      	ldr	r3, [r4, #8]
 800d14c:	3b01      	subs	r3, #1
 800d14e:	60a3      	str	r3, [r4, #8]
 800d150:	6823      	ldr	r3, [r4, #0]
 800d152:	1c5a      	adds	r2, r3, #1
 800d154:	6022      	str	r2, [r4, #0]
 800d156:	701e      	strb	r6, [r3, #0]
 800d158:	6962      	ldr	r2, [r4, #20]
 800d15a:	1c43      	adds	r3, r0, #1
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d004      	beq.n	800d16a <__swbuf_r+0x5a>
 800d160:	89a3      	ldrh	r3, [r4, #12]
 800d162:	07db      	lsls	r3, r3, #31
 800d164:	d506      	bpl.n	800d174 <__swbuf_r+0x64>
 800d166:	2e0a      	cmp	r6, #10
 800d168:	d104      	bne.n	800d174 <__swbuf_r+0x64>
 800d16a:	4621      	mov	r1, r4
 800d16c:	4628      	mov	r0, r5
 800d16e:	f7ff fde3 	bl	800cd38 <_fflush_r>
 800d172:	b938      	cbnz	r0, 800d184 <__swbuf_r+0x74>
 800d174:	4638      	mov	r0, r7
 800d176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d178:	4621      	mov	r1, r4
 800d17a:	4628      	mov	r0, r5
 800d17c:	f000 f806 	bl	800d18c <__swsetup_r>
 800d180:	2800      	cmp	r0, #0
 800d182:	d0d5      	beq.n	800d130 <__swbuf_r+0x20>
 800d184:	f04f 37ff 	mov.w	r7, #4294967295
 800d188:	e7f4      	b.n	800d174 <__swbuf_r+0x64>
	...

0800d18c <__swsetup_r>:
 800d18c:	b538      	push	{r3, r4, r5, lr}
 800d18e:	4b2a      	ldr	r3, [pc, #168]	; (800d238 <__swsetup_r+0xac>)
 800d190:	4605      	mov	r5, r0
 800d192:	6818      	ldr	r0, [r3, #0]
 800d194:	460c      	mov	r4, r1
 800d196:	b118      	cbz	r0, 800d1a0 <__swsetup_r+0x14>
 800d198:	6a03      	ldr	r3, [r0, #32]
 800d19a:	b90b      	cbnz	r3, 800d1a0 <__swsetup_r+0x14>
 800d19c:	f7fe ffb6 	bl	800c10c <__sinit>
 800d1a0:	89a3      	ldrh	r3, [r4, #12]
 800d1a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d1a6:	0718      	lsls	r0, r3, #28
 800d1a8:	d422      	bmi.n	800d1f0 <__swsetup_r+0x64>
 800d1aa:	06d9      	lsls	r1, r3, #27
 800d1ac:	d407      	bmi.n	800d1be <__swsetup_r+0x32>
 800d1ae:	2309      	movs	r3, #9
 800d1b0:	602b      	str	r3, [r5, #0]
 800d1b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d1b6:	81a3      	strh	r3, [r4, #12]
 800d1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d1bc:	e034      	b.n	800d228 <__swsetup_r+0x9c>
 800d1be:	0758      	lsls	r0, r3, #29
 800d1c0:	d512      	bpl.n	800d1e8 <__swsetup_r+0x5c>
 800d1c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1c4:	b141      	cbz	r1, 800d1d8 <__swsetup_r+0x4c>
 800d1c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1ca:	4299      	cmp	r1, r3
 800d1cc:	d002      	beq.n	800d1d4 <__swsetup_r+0x48>
 800d1ce:	4628      	mov	r0, r5
 800d1d0:	f7ff f944 	bl	800c45c <_free_r>
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	6363      	str	r3, [r4, #52]	; 0x34
 800d1d8:	89a3      	ldrh	r3, [r4, #12]
 800d1da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d1de:	81a3      	strh	r3, [r4, #12]
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	6063      	str	r3, [r4, #4]
 800d1e4:	6923      	ldr	r3, [r4, #16]
 800d1e6:	6023      	str	r3, [r4, #0]
 800d1e8:	89a3      	ldrh	r3, [r4, #12]
 800d1ea:	f043 0308 	orr.w	r3, r3, #8
 800d1ee:	81a3      	strh	r3, [r4, #12]
 800d1f0:	6923      	ldr	r3, [r4, #16]
 800d1f2:	b94b      	cbnz	r3, 800d208 <__swsetup_r+0x7c>
 800d1f4:	89a3      	ldrh	r3, [r4, #12]
 800d1f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d1fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1fe:	d003      	beq.n	800d208 <__swsetup_r+0x7c>
 800d200:	4621      	mov	r1, r4
 800d202:	4628      	mov	r0, r5
 800d204:	f000 f88c 	bl	800d320 <__smakebuf_r>
 800d208:	89a0      	ldrh	r0, [r4, #12]
 800d20a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d20e:	f010 0301 	ands.w	r3, r0, #1
 800d212:	d00a      	beq.n	800d22a <__swsetup_r+0x9e>
 800d214:	2300      	movs	r3, #0
 800d216:	60a3      	str	r3, [r4, #8]
 800d218:	6963      	ldr	r3, [r4, #20]
 800d21a:	425b      	negs	r3, r3
 800d21c:	61a3      	str	r3, [r4, #24]
 800d21e:	6923      	ldr	r3, [r4, #16]
 800d220:	b943      	cbnz	r3, 800d234 <__swsetup_r+0xa8>
 800d222:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d226:	d1c4      	bne.n	800d1b2 <__swsetup_r+0x26>
 800d228:	bd38      	pop	{r3, r4, r5, pc}
 800d22a:	0781      	lsls	r1, r0, #30
 800d22c:	bf58      	it	pl
 800d22e:	6963      	ldrpl	r3, [r4, #20]
 800d230:	60a3      	str	r3, [r4, #8]
 800d232:	e7f4      	b.n	800d21e <__swsetup_r+0x92>
 800d234:	2000      	movs	r0, #0
 800d236:	e7f7      	b.n	800d228 <__swsetup_r+0x9c>
 800d238:	20000194 	.word	0x20000194

0800d23c <_raise_r>:
 800d23c:	291f      	cmp	r1, #31
 800d23e:	b538      	push	{r3, r4, r5, lr}
 800d240:	4604      	mov	r4, r0
 800d242:	460d      	mov	r5, r1
 800d244:	d904      	bls.n	800d250 <_raise_r+0x14>
 800d246:	2316      	movs	r3, #22
 800d248:	6003      	str	r3, [r0, #0]
 800d24a:	f04f 30ff 	mov.w	r0, #4294967295
 800d24e:	bd38      	pop	{r3, r4, r5, pc}
 800d250:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d252:	b112      	cbz	r2, 800d25a <_raise_r+0x1e>
 800d254:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d258:	b94b      	cbnz	r3, 800d26e <_raise_r+0x32>
 800d25a:	4620      	mov	r0, r4
 800d25c:	f000 f830 	bl	800d2c0 <_getpid_r>
 800d260:	462a      	mov	r2, r5
 800d262:	4601      	mov	r1, r0
 800d264:	4620      	mov	r0, r4
 800d266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d26a:	f000 b817 	b.w	800d29c <_kill_r>
 800d26e:	2b01      	cmp	r3, #1
 800d270:	d00a      	beq.n	800d288 <_raise_r+0x4c>
 800d272:	1c59      	adds	r1, r3, #1
 800d274:	d103      	bne.n	800d27e <_raise_r+0x42>
 800d276:	2316      	movs	r3, #22
 800d278:	6003      	str	r3, [r0, #0]
 800d27a:	2001      	movs	r0, #1
 800d27c:	e7e7      	b.n	800d24e <_raise_r+0x12>
 800d27e:	2400      	movs	r4, #0
 800d280:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d284:	4628      	mov	r0, r5
 800d286:	4798      	blx	r3
 800d288:	2000      	movs	r0, #0
 800d28a:	e7e0      	b.n	800d24e <_raise_r+0x12>

0800d28c <raise>:
 800d28c:	4b02      	ldr	r3, [pc, #8]	; (800d298 <raise+0xc>)
 800d28e:	4601      	mov	r1, r0
 800d290:	6818      	ldr	r0, [r3, #0]
 800d292:	f7ff bfd3 	b.w	800d23c <_raise_r>
 800d296:	bf00      	nop
 800d298:	20000194 	.word	0x20000194

0800d29c <_kill_r>:
 800d29c:	b538      	push	{r3, r4, r5, lr}
 800d29e:	4d07      	ldr	r5, [pc, #28]	; (800d2bc <_kill_r+0x20>)
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	4604      	mov	r4, r0
 800d2a4:	4608      	mov	r0, r1
 800d2a6:	4611      	mov	r1, r2
 800d2a8:	602b      	str	r3, [r5, #0]
 800d2aa:	f7f4 fceb 	bl	8001c84 <_kill>
 800d2ae:	1c43      	adds	r3, r0, #1
 800d2b0:	d102      	bne.n	800d2b8 <_kill_r+0x1c>
 800d2b2:	682b      	ldr	r3, [r5, #0]
 800d2b4:	b103      	cbz	r3, 800d2b8 <_kill_r+0x1c>
 800d2b6:	6023      	str	r3, [r4, #0]
 800d2b8:	bd38      	pop	{r3, r4, r5, pc}
 800d2ba:	bf00      	nop
 800d2bc:	20002e94 	.word	0x20002e94

0800d2c0 <_getpid_r>:
 800d2c0:	f7f4 bcd8 	b.w	8001c74 <_getpid>

0800d2c4 <_malloc_usable_size_r>:
 800d2c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2c8:	1f18      	subs	r0, r3, #4
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	bfbc      	itt	lt
 800d2ce:	580b      	ldrlt	r3, [r1, r0]
 800d2d0:	18c0      	addlt	r0, r0, r3
 800d2d2:	4770      	bx	lr

0800d2d4 <__swhatbuf_r>:
 800d2d4:	b570      	push	{r4, r5, r6, lr}
 800d2d6:	460c      	mov	r4, r1
 800d2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2dc:	2900      	cmp	r1, #0
 800d2de:	b096      	sub	sp, #88	; 0x58
 800d2e0:	4615      	mov	r5, r2
 800d2e2:	461e      	mov	r6, r3
 800d2e4:	da0d      	bge.n	800d302 <__swhatbuf_r+0x2e>
 800d2e6:	89a3      	ldrh	r3, [r4, #12]
 800d2e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d2ec:	f04f 0100 	mov.w	r1, #0
 800d2f0:	bf0c      	ite	eq
 800d2f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d2f6:	2340      	movne	r3, #64	; 0x40
 800d2f8:	2000      	movs	r0, #0
 800d2fa:	6031      	str	r1, [r6, #0]
 800d2fc:	602b      	str	r3, [r5, #0]
 800d2fe:	b016      	add	sp, #88	; 0x58
 800d300:	bd70      	pop	{r4, r5, r6, pc}
 800d302:	466a      	mov	r2, sp
 800d304:	f000 f848 	bl	800d398 <_fstat_r>
 800d308:	2800      	cmp	r0, #0
 800d30a:	dbec      	blt.n	800d2e6 <__swhatbuf_r+0x12>
 800d30c:	9901      	ldr	r1, [sp, #4]
 800d30e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d312:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d316:	4259      	negs	r1, r3
 800d318:	4159      	adcs	r1, r3
 800d31a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d31e:	e7eb      	b.n	800d2f8 <__swhatbuf_r+0x24>

0800d320 <__smakebuf_r>:
 800d320:	898b      	ldrh	r3, [r1, #12]
 800d322:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d324:	079d      	lsls	r5, r3, #30
 800d326:	4606      	mov	r6, r0
 800d328:	460c      	mov	r4, r1
 800d32a:	d507      	bpl.n	800d33c <__smakebuf_r+0x1c>
 800d32c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d330:	6023      	str	r3, [r4, #0]
 800d332:	6123      	str	r3, [r4, #16]
 800d334:	2301      	movs	r3, #1
 800d336:	6163      	str	r3, [r4, #20]
 800d338:	b002      	add	sp, #8
 800d33a:	bd70      	pop	{r4, r5, r6, pc}
 800d33c:	ab01      	add	r3, sp, #4
 800d33e:	466a      	mov	r2, sp
 800d340:	f7ff ffc8 	bl	800d2d4 <__swhatbuf_r>
 800d344:	9900      	ldr	r1, [sp, #0]
 800d346:	4605      	mov	r5, r0
 800d348:	4630      	mov	r0, r6
 800d34a:	f7ff f8fb 	bl	800c544 <_malloc_r>
 800d34e:	b948      	cbnz	r0, 800d364 <__smakebuf_r+0x44>
 800d350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d354:	059a      	lsls	r2, r3, #22
 800d356:	d4ef      	bmi.n	800d338 <__smakebuf_r+0x18>
 800d358:	f023 0303 	bic.w	r3, r3, #3
 800d35c:	f043 0302 	orr.w	r3, r3, #2
 800d360:	81a3      	strh	r3, [r4, #12]
 800d362:	e7e3      	b.n	800d32c <__smakebuf_r+0xc>
 800d364:	89a3      	ldrh	r3, [r4, #12]
 800d366:	6020      	str	r0, [r4, #0]
 800d368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d36c:	81a3      	strh	r3, [r4, #12]
 800d36e:	9b00      	ldr	r3, [sp, #0]
 800d370:	6163      	str	r3, [r4, #20]
 800d372:	9b01      	ldr	r3, [sp, #4]
 800d374:	6120      	str	r0, [r4, #16]
 800d376:	b15b      	cbz	r3, 800d390 <__smakebuf_r+0x70>
 800d378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d37c:	4630      	mov	r0, r6
 800d37e:	f000 f81d 	bl	800d3bc <_isatty_r>
 800d382:	b128      	cbz	r0, 800d390 <__smakebuf_r+0x70>
 800d384:	89a3      	ldrh	r3, [r4, #12]
 800d386:	f023 0303 	bic.w	r3, r3, #3
 800d38a:	f043 0301 	orr.w	r3, r3, #1
 800d38e:	81a3      	strh	r3, [r4, #12]
 800d390:	89a3      	ldrh	r3, [r4, #12]
 800d392:	431d      	orrs	r5, r3
 800d394:	81a5      	strh	r5, [r4, #12]
 800d396:	e7cf      	b.n	800d338 <__smakebuf_r+0x18>

0800d398 <_fstat_r>:
 800d398:	b538      	push	{r3, r4, r5, lr}
 800d39a:	4d07      	ldr	r5, [pc, #28]	; (800d3b8 <_fstat_r+0x20>)
 800d39c:	2300      	movs	r3, #0
 800d39e:	4604      	mov	r4, r0
 800d3a0:	4608      	mov	r0, r1
 800d3a2:	4611      	mov	r1, r2
 800d3a4:	602b      	str	r3, [r5, #0]
 800d3a6:	f7f4 fccc 	bl	8001d42 <_fstat>
 800d3aa:	1c43      	adds	r3, r0, #1
 800d3ac:	d102      	bne.n	800d3b4 <_fstat_r+0x1c>
 800d3ae:	682b      	ldr	r3, [r5, #0]
 800d3b0:	b103      	cbz	r3, 800d3b4 <_fstat_r+0x1c>
 800d3b2:	6023      	str	r3, [r4, #0]
 800d3b4:	bd38      	pop	{r3, r4, r5, pc}
 800d3b6:	bf00      	nop
 800d3b8:	20002e94 	.word	0x20002e94

0800d3bc <_isatty_r>:
 800d3bc:	b538      	push	{r3, r4, r5, lr}
 800d3be:	4d06      	ldr	r5, [pc, #24]	; (800d3d8 <_isatty_r+0x1c>)
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	4604      	mov	r4, r0
 800d3c4:	4608      	mov	r0, r1
 800d3c6:	602b      	str	r3, [r5, #0]
 800d3c8:	f7f4 fccb 	bl	8001d62 <_isatty>
 800d3cc:	1c43      	adds	r3, r0, #1
 800d3ce:	d102      	bne.n	800d3d6 <_isatty_r+0x1a>
 800d3d0:	682b      	ldr	r3, [r5, #0]
 800d3d2:	b103      	cbz	r3, 800d3d6 <_isatty_r+0x1a>
 800d3d4:	6023      	str	r3, [r4, #0]
 800d3d6:	bd38      	pop	{r3, r4, r5, pc}
 800d3d8:	20002e94 	.word	0x20002e94

0800d3dc <_init>:
 800d3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3de:	bf00      	nop
 800d3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3e2:	bc08      	pop	{r3}
 800d3e4:	469e      	mov	lr, r3
 800d3e6:	4770      	bx	lr

0800d3e8 <_fini>:
 800d3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ea:	bf00      	nop
 800d3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ee:	bc08      	pop	{r3}
 800d3f0:	469e      	mov	lr, r3
 800d3f2:	4770      	bx	lr
