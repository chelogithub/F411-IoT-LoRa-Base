
F411-IoT-LoRa-Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000105cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b0c  0801076c  0801076c  0002076c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011278  08011278  00030178  2**0
                  CONTENTS
  4 .ARM          00000008  08011278  08011278  00021278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011280  08011280  00030178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011280  08011280  00021280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011284  08011284  00021284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  08011288  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000403c  20000178  08011400  00030178  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041b4  08011400  000341b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015afd  00000000  00000000  000301eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030ac  00000000  00000000  00045ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  00048d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e41  00000000  00000000  00049f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001888c  00000000  00000000  0004ad71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018133  00000000  00000000  000635fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093b4e  00000000  00000000  0007b730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005684  00000000  00000000  0010f280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00114904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000178 	.word	0x20000178
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010754 	.word	0x08010754

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000017c 	.word	0x2000017c
 80001dc:	08010754 	.word	0x08010754

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000698:	b0a6      	sub	sp, #152	; 0x98
 800069a:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5100 Environment-------------------------//

	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069c:	4bcf      	ldr	r3, [pc, #828]	; (80009dc <main+0x348>)
 800069e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a2:	22c0      	movs	r2, #192	; 0xc0
 80006a4:	771a      	strb	r2, [r3, #28]
		ETH.GAR[1]=168;
 80006a6:	4bcd      	ldr	r3, [pc, #820]	; (80009dc <main+0x348>)
 80006a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ac:	22a8      	movs	r2, #168	; 0xa8
 80006ae:	775a      	strb	r2, [r3, #29]
		ETH.GAR[2]=0;
 80006b0:	4bca      	ldr	r3, [pc, #808]	; (80009dc <main+0x348>)
 80006b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b6:	2200      	movs	r2, #0
 80006b8:	779a      	strb	r2, [r3, #30]
		ETH.GAR[3]=1;
 80006ba:	4bc8      	ldr	r3, [pc, #800]	; (80009dc <main+0x348>)
 80006bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c0:	2201      	movs	r2, #1
 80006c2:	77da      	strb	r2, [r3, #31]
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006c4:	4bc5      	ldr	r3, [pc, #788]	; (80009dc <main+0x348>)
 80006c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ca:	22ff      	movs	r2, #255	; 0xff
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]
		ETH.SUBR[1]=255;
 80006d0:	4bc2      	ldr	r3, [pc, #776]	; (80009dc <main+0x348>)
 80006d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d6:	22ff      	movs	r2, #255	; 0xff
 80006d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		ETH.SUBR[2]=255;
 80006dc:	4bbf      	ldr	r3, [pc, #764]	; (80009dc <main+0x348>)
 80006de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e2:	22ff      	movs	r2, #255	; 0xff
 80006e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ETH.SUBR[3]=0;
 80006e8:	4bbc      	ldr	r3, [pc, #752]	; (80009dc <main+0x348>)
 80006ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006f4:	4bb9      	ldr	r3, [pc, #740]	; (80009dc <main+0x348>)
 80006f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.SHAR[1]=0x08;
 8000700:	4bb6      	ldr	r3, [pc, #728]	; (80009dc <main+0x348>)
 8000702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000706:	2208      	movs	r2, #8
 8000708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.SHAR[2]=0xDC;
 800070c:	4bb3      	ldr	r3, [pc, #716]	; (80009dc <main+0x348>)
 800070e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000712:	22dc      	movs	r2, #220	; 0xdc
 8000714:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.SHAR[3]=0x00;
 8000718:	4bb0      	ldr	r3, [pc, #704]	; (80009dc <main+0x348>)
 800071a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		ETH.SHAR[4]=0x00;
 8000724:	4bad      	ldr	r3, [pc, #692]	; (80009dc <main+0x348>)
 8000726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SHAR[5]=0x01;
 8000730:	4baa      	ldr	r3, [pc, #680]	; (80009dc <main+0x348>)
 8000732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000736:	2201      	movs	r2, #1
 8000738:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 800073c:	4ba7      	ldr	r3, [pc, #668]	; (80009dc <main+0x348>)
 800073e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000742:	22c0      	movs	r2, #192	; 0xc0
 8000744:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SIPR[1]=168;
 8000748:	4ba4      	ldr	r3, [pc, #656]	; (80009dc <main+0x348>)
 800074a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074e:	22a8      	movs	r2, #168	; 0xa8
 8000750:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		ETH.SIPR[2]=0;
 8000754:	4ba1      	ldr	r3, [pc, #644]	; (80009dc <main+0x348>)
 8000756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800075a:	2200      	movs	r2, #0
 800075c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SIPR[3]=6,//ETH.SIPR[3]=34,
 8000760:	4b9e      	ldr	r3, [pc, #632]	; (80009dc <main+0x348>)
 8000762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000766:	2206      	movs	r2, #6
 8000768:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	//  Socket RX memory
		ETH.RMSR=0x55;
 800076c:	4b9b      	ldr	r3, [pc, #620]	; (80009dc <main+0x348>)
 800076e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000772:	2255      	movs	r2, #85	; 0x55
 8000774:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	//  Socket TX memory


		ETH.TMSR=0x55;
 8000778:	4b98      	ldr	r3, [pc, #608]	; (80009dc <main+0x348>)
 800077a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077e:	2255      	movs	r2, #85	; 0x55
 8000780:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	//  S0 Port Number
		ETH.S0_PORT[0]=0x01;
 8000784:	4b95      	ldr	r3, [pc, #596]	; (80009dc <main+0x348>)
 8000786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800078a:	2201      	movs	r2, #1
 800078c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		ETH.S0_PORT[1]=0xF6;
 8000790:	4b92      	ldr	r3, [pc, #584]	; (80009dc <main+0x348>)
 8000792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000796:	22f6      	movs	r2, #246	; 0xf6
 8000798:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//	S0 Client IP ADDRESS
		ETH.S0_DIPR[0]=192;
 800079c:	4b8f      	ldr	r3, [pc, #572]	; (80009dc <main+0x348>)
 800079e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a2:	22c0      	movs	r2, #192	; 0xc0
 80007a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		ETH.S0_DIPR[1]=168;
 80007a8:	4b8c      	ldr	r3, [pc, #560]	; (80009dc <main+0x348>)
 80007aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ae:	22a8      	movs	r2, #168	; 0xa8
 80007b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		ETH.S0_DIPR[2]=0;
 80007b4:	4b89      	ldr	r3, [pc, #548]	; (80009dc <main+0x348>)
 80007b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		ETH.S0_DIPR[3]=3;
 80007c0:	4b86      	ldr	r3, [pc, #536]	; (80009dc <main+0x348>)
 80007c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c6:	2203      	movs	r2, #3
 80007c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	//	S0 Client IP ADDRESS
		ETH.S0_DPORT[0]=0x01;
 80007cc:	4b83      	ldr	r3, [pc, #524]	; (80009dc <main+0x348>)
 80007ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d2:	2201      	movs	r2, #1
 80007d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		ETH.S0_DPORT[1]=0xF6;
 80007d8:	4b80      	ldr	r3, [pc, #512]	; (80009dc <main+0x348>)
 80007da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007de:	22f6      	movs	r2, #246	; 0xf6
 80007e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		ETH.gS0_RX_BASE = 0x6000;
 80007e4:	4b7d      	ldr	r3, [pc, #500]	; (80009dc <main+0x348>)
 80007e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ea:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80007ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		ETH.gS0_RX_MASK = 0x07FF;
 80007f2:	4b7a      	ldr	r3, [pc, #488]	; (80009dc <main+0x348>)
 80007f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		ETH.gS1_RX_BASE = 0x6800;
 8000800:	4b76      	ldr	r3, [pc, #472]	; (80009dc <main+0x348>)
 8000802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000806:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 800080a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		ETH.gS1_RX_MASK = 0x07FF;
 800080e:	4b73      	ldr	r3, [pc, #460]	; (80009dc <main+0x348>)
 8000810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000814:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000818:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		ETH.gS2_RX_BASE = 0x7000;
 800081c:	4b6f      	ldr	r3, [pc, #444]	; (80009dc <main+0x348>)
 800081e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000822:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000826:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		ETH.gS2_RX_MASK = 0x07FF;
 800082a:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <main+0x348>)
 800082c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000830:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000834:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS3_RX_BASE = 0x7800;
 8000838:	4b68      	ldr	r3, [pc, #416]	; (80009dc <main+0x348>)
 800083a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800083e:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000842:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS3_RX_MASK = 0x07FF;
 8000846:	4b65      	ldr	r3, [pc, #404]	; (80009dc <main+0x348>)
 8000848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800084c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000850:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS0_TX_BASE = 0x4000;
 8000854:	4b61      	ldr	r3, [pc, #388]	; (80009dc <main+0x348>)
 8000856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800085a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS0_TX_MASK = 0x07FF;
 8000862:	4b5e      	ldr	r3, [pc, #376]	; (80009dc <main+0x348>)
 8000864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000868:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800086c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS1_TX_BASE = 0x4800;
 8000870:	4b5a      	ldr	r3, [pc, #360]	; (80009dc <main+0x348>)
 8000872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000876:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800087a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS1_TX_MASK = 0x07FF;
 800087e:	4b57      	ldr	r3, [pc, #348]	; (80009dc <main+0x348>)
 8000880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000884:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000888:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS2_TX_BASE = 0x5000;
 800088c:	4b53      	ldr	r3, [pc, #332]	; (80009dc <main+0x348>)
 800088e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000892:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000896:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS2_TX_MASK = 0x07FF;
 800089a:	4b50      	ldr	r3, [pc, #320]	; (80009dc <main+0x348>)
 800089c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS3_TX_BASE = 0x5800;
 80008a8:	4b4c      	ldr	r3, [pc, #304]	; (80009dc <main+0x348>)
 80008aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ae:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS3_TX_MASK = 0x07FF;
 80008b6:	4b49      	ldr	r3, [pc, #292]	; (80009dc <main+0x348>)
 80008b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008bc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		ETH.S0_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c4:	4b45      	ldr	r3, [pc, #276]	; (80009dc <main+0x348>)
 80008c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	  //----------------------- LoRa ------------------------//

	  //----------------------- LoRa ------------------------//

	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008d0:	4843      	ldr	r0, [pc, #268]	; (80009e0 <main+0x34c>)
 80008d2:	f006 f803 	bl	80068dc <Inicializar>
 	  	wf.RESET_PORT=GPIOA;
 80008d6:	4b42      	ldr	r3, [pc, #264]	; (80009e0 <main+0x34c>)
 80008d8:	4a42      	ldr	r2, [pc, #264]	; (80009e4 <main+0x350>)
 80008da:	601a      	str	r2, [r3, #0]
 	  	wf.RESET_PORT=GPIO_PIN_8;
 80008dc:	4b40      	ldr	r3, [pc, #256]	; (80009e0 <main+0x34c>)
 80008de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008e2:	601a      	str	r2, [r3, #0]
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008e4:	4940      	ldr	r1, [pc, #256]	; (80009e8 <main+0x354>)
 80008e6:	4841      	ldr	r0, [pc, #260]	; (80009ec <main+0x358>)
 80008e8:	f00e ff4e 	bl	800f788 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 80008ec:	4940      	ldr	r1, [pc, #256]	; (80009f0 <main+0x35c>)
 80008ee:	4841      	ldr	r0, [pc, #260]	; (80009f4 <main+0x360>)
 80008f0:	f00e ff4a 	bl	800f788 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 80008f4:	4940      	ldr	r1, [pc, #256]	; (80009f8 <main+0x364>)
 80008f6:	4841      	ldr	r0, [pc, #260]	; (80009fc <main+0x368>)
 80008f8:	f00e ff46 	bl	800f788 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 80008fc:	4940      	ldr	r1, [pc, #256]	; (8000a00 <main+0x36c>)
 80008fe:	4841      	ldr	r0, [pc, #260]	; (8000a04 <main+0x370>)
 8000900:	f00e ff42 	bl	800f788 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 8000904:	4940      	ldr	r1, [pc, #256]	; (8000a08 <main+0x374>)
 8000906:	4841      	ldr	r0, [pc, #260]	; (8000a0c <main+0x378>)
 8000908:	f00e ff3e 	bl	800f788 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 800090c:	4940      	ldr	r1, [pc, #256]	; (8000a10 <main+0x37c>)
 800090e:	4841      	ldr	r0, [pc, #260]	; (8000a14 <main+0x380>)
 8000910:	f00e ff3a 	bl	800f788 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 8000914:	4940      	ldr	r1, [pc, #256]	; (8000a18 <main+0x384>)
 8000916:	4841      	ldr	r0, [pc, #260]	; (8000a1c <main+0x388>)
 8000918:	f00e ff36 	bl	800f788 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 800091c:	4940      	ldr	r1, [pc, #256]	; (8000a20 <main+0x38c>)
 800091e:	4841      	ldr	r0, [pc, #260]	; (8000a24 <main+0x390>)
 8000920:	f00e ff32 	bl	800f788 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 8000924:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <main+0x34c>)
 8000926:	2200      	movs	r2, #0
 8000928:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800092c:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <main+0x34c>)
 800092e:	2200      	movs	r2, #0
 8000930:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
		wf._data2SND[1]=0x00;
 8000934:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <main+0x34c>)
 8000936:	2200      	movs	r2, #0
 8000938:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
		wf._data2SND[2]=0x00;
 800093c:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <main+0x34c>)
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
		wf._data2SND[3]=0x00;
 8000944:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <main+0x34c>)
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		wf._data2SND[4]=0x00;
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <main+0x34c>)
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[5]=0x06;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <main+0x34c>)
 8000956:	2206      	movs	r2, #6
 8000958:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[6]=0x01;
 800095c:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <main+0x34c>)
 800095e:	2201      	movs	r2, #1
 8000960:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[7]=0x03;
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <main+0x34c>)
 8000966:	2203      	movs	r2, #3
 8000968:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <main+0x34c>)
 800096e:	2200      	movs	r2, #0
 8000970:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[9]=0x00;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <main+0x34c>)
 8000976:	2200      	movs	r2, #0
 8000978:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[10]=0x00;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <main+0x34c>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[11]=0x0A;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <main+0x34c>)
 8000986:	220a      	movs	r2, #10
 8000988:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[12]=0x00;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <main+0x34c>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[13]=0x33;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <main+0x34c>)
 8000996:	2233      	movs	r2, #51	; 0x33
 8000998:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[14]=0x34;
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <main+0x34c>)
 800099e:	2234      	movs	r2, #52	; 0x34
 80009a0:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[15]=0x35;
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <main+0x34c>)
 80009a6:	2235      	movs	r2, #53	; 0x35
 80009a8:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._n_D2SND=12;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <main+0x34c>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <main+0x34c>)
 80009b6:	2264      	movs	r2, #100	; 0x64
 80009b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <main+0x34c>)
 80009be:	2202      	movs	r2, #2
 80009c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._NO_IP=1;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <main+0x34c>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	f8c3 2d4c 	str.w	r2, [r3, #3404]	; 0xd4c
		wf._DBG_EN=1;
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <main+0x34c>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
		//wf._send_data=1;
		// ----------- INICIO - Seteo de módulo Ethernet W5100 ----------- //
	    // Conectado a SPI2
		// PIN NSS - PortB 12
		spi_no_debug=1;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <main+0x394>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	701a      	strb	r2, [r3, #0]
 80009da:	e027      	b.n	8000a2c <main+0x398>
 80009dc:	20002954 	.word	0x20002954
 80009e0:	20000b58 	.word	0x20000b58
 80009e4:	40020000 	.word	0x40020000
 80009e8:	20000024 	.word	0x20000024
 80009ec:	20000b5e 	.word	0x20000b5e
 80009f0:	2000002c 	.word	0x2000002c
 80009f4:	20000b7e 	.word	0x20000b7e
 80009f8:	20000038 	.word	0x20000038
 80009fc:	20000b8e 	.word	0x20000b8e
 8000a00:	20000048 	.word	0x20000048
 8000a04:	20000b9e 	.word	0x20000b9e
 8000a08:	20000050 	.word	0x20000050
 8000a0c:	20000ba4 	.word	0x20000ba4
 8000a10:	20000060 	.word	0x20000060
 8000a14:	20000bba 	.word	0x20000bba
 8000a18:	20000070 	.word	0x20000070
 8000a1c:	20000bca 	.word	0x20000bca
 8000a20:	20000080 	.word	0x20000080
 8000a24:	20000bb4 	.word	0x20000bb4
 8000a28:	20003a04 	.word	0x20003a04
		ETH.NSS_PORT=GPIOA;
 8000a2c:	4b4d      	ldr	r3, [pc, #308]	; (8000b64 <main+0x4d0>)
 8000a2e:	4a4e      	ldr	r2, [pc, #312]	; (8000b68 <main+0x4d4>)
 8000a30:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 8000a32:	4b4c      	ldr	r3, [pc, #304]	; (8000b64 <main+0x4d0>)
 8000a34:	2210      	movs	r2, #16
 8000a36:	811a      	strh	r2, [r3, #8]
		ETH.SPI= &hspi1;
 8000a38:	4b4a      	ldr	r3, [pc, #296]	; (8000b64 <main+0x4d0>)
 8000a3a:	4a4c      	ldr	r2, [pc, #304]	; (8000b6c <main+0x4d8>)
 8000a3c:	601a      	str	r2, [r3, #0]

	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a3e:	484c      	ldr	r0, [pc, #304]	; (8000b70 <main+0x4dc>)
 8000a40:	f00c f840 	bl	800cac4 <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a44:	4b4a      	ldr	r3, [pc, #296]	; (8000b70 <main+0x4dc>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	711a      	strb	r2, [r3, #4]
		ModBUS_Config(&mb_wf);	//WIFI como servidor TCP, recibe comadno ModBUS
 8000a4a:	484a      	ldr	r0, [pc, #296]	; (8000b74 <main+0x4e0>)
 8000a4c:	f00c f83a 	bl	800cac4 <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a50:	4b48      	ldr	r3, [pc, #288]	; (8000b74 <main+0x4e0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	711a      	strb	r2, [r3, #4]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a56:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a5a:	2103      	movs	r1, #3
 8000a5c:	4845      	ldr	r0, [pc, #276]	; (8000b74 <main+0x4e0>)
 8000a5e:	f00c f8d4 	bl	800cc0a <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a62:	f002 f8d3 	bl	8002c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a66:	f000 fb4f 	bl	8001108 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000a6a:	4b43      	ldr	r3, [pc, #268]	; (8000b78 <main+0x4e4>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a43      	ldr	r2, [pc, #268]	; (8000b7c <main+0x4e8>)
 8000a70:	fba2 2303 	umull	r2, r3, r2, r3
 8000a74:	099b      	lsrs	r3, r3, #6
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fdc2 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7c:	f000 fd56 	bl	800152c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a80:	f000 fbaa 	bl	80011d8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a84:	f000 fcd4 	bl	8001430 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a88:	f000 fcfc 	bl	8001484 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000a8c:	f000 fd24 	bl	80014d8 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000a90:	f000 fbd8 	bl	8001244 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a94:	f000 fc50 	bl	8001338 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	4832      	ldr	r0, [pc, #200]	; (8000b68 <main+0x4d4>)
 8000a9e:	f002 fd89 	bl	80035b4 <HAL_GPIO_WritePin>
  ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000aa2:	210e      	movs	r1, #14
 8000aa4:	4836      	ldr	r0, [pc, #216]	; (8000b80 <main+0x4ec>)
 8000aa6:	f000 fdd3 	bl	8001650 <ITM0_Write>
     ESP8266_HW_Reset();	//WRNNG Hardcoded	  //Reseteo el modulo desde el pin de RESET
 8000aaa:	f001 fcc3 	bl	8002434 <ESP8266_HW_Reset>
     if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000aae:	4b35      	ldr	r3, [pc, #212]	; (8000b84 <main+0x4f0>)
 8000ab0:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d003      	beq.n	8000ac0 <main+0x42c>
 8000ab8:	2113      	movs	r1, #19
 8000aba:	4833      	ldr	r0, [pc, #204]	; (8000b88 <main+0x4f4>)
 8000abc:	f000 fdc8 	bl	8001650 <ITM0_Write>
     //HAL_TIM_Base_Start(&htim6); //Timer como base de tiempo
     HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4932      	ldr	r1, [pc, #200]	; (8000b8c <main+0x4f8>)
 8000ac4:	4832      	ldr	r0, [pc, #200]	; (8000b90 <main+0x4fc>)
 8000ac6:	f004 fe9e 	bl	8005806 <HAL_UART_Receive_IT>
     HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1);
 8000aca:	2201      	movs	r2, #1
 8000acc:	4931      	ldr	r1, [pc, #196]	; (8000b94 <main+0x500>)
 8000ace:	4832      	ldr	r0, [pc, #200]	; (8000b98 <main+0x504>)
 8000ad0:	f004 fe99 	bl	8005806 <HAL_UART_Receive_IT>
     if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5100 \r\n",strlen("\r\n SET-UP W5100 \r\n"));
 8000ad4:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <main+0x508>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <main+0x450>
 8000adc:	2112      	movs	r1, #18
 8000ade:	4830      	ldr	r0, [pc, #192]	; (8000ba0 <main+0x50c>)
 8000ae0:	f000 fdb6 	bl	8001650 <ITM0_Write>

   	 ETH.operacion=SPI_WRITE;
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <main+0x4d0>)
 8000ae6:	22f0      	movs	r2, #240	; 0xf0
 8000ae8:	729a      	strb	r2, [r3, #10]
   	 ETH.TX[1]= 0;
 8000aea:	4b1e      	ldr	r3, [pc, #120]	; (8000b64 <main+0x4d0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	755a      	strb	r2, [r3, #21]
   	 ETH.TX[2]= 1;
 8000af0:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <main+0x4d0>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	759a      	strb	r2, [r3, #22]
   	 ETH.TX[3]= 192;
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <main+0x4d0>)
 8000af8:	22c0      	movs	r2, #192	; 0xc0
 8000afa:	75da      	strb	r2, [r3, #23]
   	 //ETH-DISABLE   eth_init(&ETH);

   	 //ETH-DISABLE eth_socket_init(&ETH,0);

   	 //ETH-DISABLE SPI_READ_EN=1;
   ETH.operacion=SPI_READ;
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <main+0x4d0>)
 8000afe:	220f      	movs	r2, #15
 8000b00:	729a      	strb	r2, [r3, #10]
   ETH.TX[1]= 0;
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <main+0x4d0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	755a      	strb	r2, [r3, #21]
   ETH.TX[2]= 1;
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <main+0x4d0>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	759a      	strb	r2, [r3, #22]
   ETH.TX[3]= 0;
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <main+0x4d0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	75da      	strb	r2, [r3, #23]

     if(ESP8266_HW_Init(&huart1)==1)
 8000b14:	481e      	ldr	r0, [pc, #120]	; (8000b90 <main+0x4fc>)
 8000b16:	f001 fcb5 	bl	8002484 <ESP8266_HW_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d10c      	bne.n	8000b3a <main+0x4a6>
     {
   	  ESP_HW_Init=1;
 8000b20:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <main+0x510>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]
   	  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <main+0x4f0>)
 8000b28:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d049      	beq.n	8000bc4 <main+0x530>
 8000b30:	2113      	movs	r1, #19
 8000b32:	481d      	ldr	r0, [pc, #116]	; (8000ba8 <main+0x514>)
 8000b34:	f000 fd8c 	bl	8001650 <ITM0_Write>
 8000b38:	e044      	b.n	8000bc4 <main+0x530>
     }
     else
     {
   	  ESP8266_HW_Reset(); //WRNNG Hardcoded
 8000b3a:	f001 fc7b 	bl	8002434 <ESP8266_HW_Reset>
   	  if(ESP8266_HW_Init(&huart1)==1)
 8000b3e:	4814      	ldr	r0, [pc, #80]	; (8000b90 <main+0x4fc>)
 8000b40:	f001 fca0 	bl	8002484 <ESP8266_HW_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d130      	bne.n	8000bac <main+0x518>
   	  {
   		  ESP_HW_Init=1;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <main+0x510>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <main+0x4f0>)
 8000b52:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d034      	beq.n	8000bc4 <main+0x530>
 8000b5a:	2113      	movs	r1, #19
 8000b5c:	4812      	ldr	r0, [pc, #72]	; (8000ba8 <main+0x514>)
 8000b5e:	f000 fd77 	bl	8001650 <ITM0_Write>
 8000b62:	e02f      	b.n	8000bc4 <main+0x530>
 8000b64:	20002954 	.word	0x20002954
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	20000194 	.word	0x20000194
 8000b70:	200018ac 	.word	0x200018ac
 8000b74:	20001efc 	.word	0x20001efc
 8000b78:	20000084 	.word	0x20000084
 8000b7c:	10624dd3 	.word	0x10624dd3
 8000b80:	0801076c 	.word	0x0801076c
 8000b84:	20000b58 	.word	0x20000b58
 8000b88:	0801077c 	.word	0x0801077c
 8000b8c:	2000401c 	.word	0x2000401c
 8000b90:	2000027c 	.word	0x2000027c
 8000b94:	20004020 	.word	0x20004020
 8000b98:	200002c0 	.word	0x200002c0
 8000b9c:	2000294c 	.word	0x2000294c
 8000ba0:	08010790 	.word	0x08010790
 8000ba4:	20003a07 	.word	0x20003a07
 8000ba8:	080107a4 	.word	0x080107a4
   	  }
   	  else
   	  {
   		  ESP_HW_Init=0;
 8000bac:	4bac      	ldr	r3, [pc, #688]	; (8000e60 <main+0x7cc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000bb2:	4bac      	ldr	r3, [pc, #688]	; (8000e64 <main+0x7d0>)
 8000bb4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d003      	beq.n	8000bc4 <main+0x530>
 8000bbc:	2115      	movs	r1, #21
 8000bbe:	48aa      	ldr	r0, [pc, #680]	; (8000e68 <main+0x7d4>)
 8000bc0:	f000 fd46 	bl	8001650 <ITM0_Write>
   	  }
     }

     HAL_Delay(1000);
 8000bc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc8:	f002 f892 	bl	8002cf0 <HAL_Delay>





	  	  if (ESP_HW_Init==1)
 8000bcc:	4ba4      	ldr	r3, [pc, #656]	; (8000e60 <main+0x7cc>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	f040 80cf 	bne.w	8000d74 <main+0x6e0>
	  	  {
	  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(lr._data_available))
 8000bd6:	4ba5      	ldr	r3, [pc, #660]	; (8000e6c <main+0x7d8>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	f040 80ca 	bne.w	8000d74 <main+0x6e0>
 8000be0:	4ba0      	ldr	r3, [pc, #640]	; (8000e64 <main+0x7d0>)
 8000be2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 80c4 	bne.w	8000d74 <main+0x6e0>
 8000bec:	4b9d      	ldr	r3, [pc, #628]	; (8000e64 <main+0x7d0>)
 8000bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bf2:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000bf6:	f340 80bd 	ble.w	8000d74 <main+0x6e0>
 8000bfa:	4b9d      	ldr	r3, [pc, #628]	; (8000e70 <main+0x7dc>)
 8000bfc:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f000 80b7 	beq.w	8000d74 <main+0x6e0>
	  			{	lr._data_available=0;
 8000c06:	4b9a      	ldr	r3, [pc, #616]	; (8000e70 <main+0x7dc>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
	  				wf_snd_flag_ticks=0;
 8000c0e:	4b99      	ldr	r3, [pc, #612]	; (8000e74 <main+0x7e0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
	  				WF_SND_FLAG=0;
 8000c14:	4b95      	ldr	r3, [pc, #596]	; (8000e6c <main+0x7d8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
	  				/*ModBUS_F03_Request(&mb_wf, 0 , 10);
	  				ModBUS(&mb_wf);							// Create ModBUS info to be sent
	  				CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
	  				wf._n_D2SND=mb_wf._n_MBUS_2SND;*/

	  				if( httpPOST(	ENDPOINT, SERVER_IP,PORT,
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4896      	ldr	r0, [pc, #600]	; (8000e78 <main+0x7e4>)
 8000c1e:	f00c f822 	bl	800cc66 <ModBUS_F03_Read>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4698      	mov	r8, r3
 8000c26:	2101      	movs	r1, #1
 8000c28:	4893      	ldr	r0, [pc, #588]	; (8000e78 <main+0x7e4>)
 8000c2a:	f00c f81c 	bl	800cc66 <ModBUS_F03_Read>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c32:	2102      	movs	r1, #2
 8000c34:	4890      	ldr	r0, [pc, #576]	; (8000e78 <main+0x7e4>)
 8000c36:	f00c f816 	bl	800cc66 <ModBUS_F03_Read>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c3e:	2103      	movs	r1, #3
 8000c40:	488d      	ldr	r0, [pc, #564]	; (8000e78 <main+0x7e4>)
 8000c42:	f00c f810 	bl	800cc66 <ModBUS_F03_Read>
 8000c46:	4603      	mov	r3, r0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
 8000c4a:	2104      	movs	r1, #4
 8000c4c:	488a      	ldr	r0, [pc, #552]	; (8000e78 <main+0x7e4>)
 8000c4e:	f00c f80a 	bl	800cc66 <ModBUS_F03_Read>
 8000c52:	4603      	mov	r3, r0
 8000c54:	623b      	str	r3, [r7, #32]
 8000c56:	2105      	movs	r1, #5
 8000c58:	4887      	ldr	r0, [pc, #540]	; (8000e78 <main+0x7e4>)
 8000c5a:	f00c f804 	bl	800cc66 <ModBUS_F03_Read>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	61fb      	str	r3, [r7, #28]
 8000c62:	2106      	movs	r1, #6
 8000c64:	4884      	ldr	r0, [pc, #528]	; (8000e78 <main+0x7e4>)
 8000c66:	f00b fffe 	bl	800cc66 <ModBUS_F03_Read>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	61bb      	str	r3, [r7, #24]
 8000c6e:	2107      	movs	r1, #7
 8000c70:	4881      	ldr	r0, [pc, #516]	; (8000e78 <main+0x7e4>)
 8000c72:	f00b fff8 	bl	800cc66 <ModBUS_F03_Read>
 8000c76:	4603      	mov	r3, r0
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	2108      	movs	r1, #8
 8000c7c:	487e      	ldr	r0, [pc, #504]	; (8000e78 <main+0x7e4>)
 8000c7e:	f00b fff2 	bl	800cc66 <ModBUS_F03_Read>
 8000c82:	4603      	mov	r3, r0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	2109      	movs	r1, #9
 8000c88:	487b      	ldr	r0, [pc, #492]	; (8000e78 <main+0x7e4>)
 8000c8a:	f00b ffec 	bl	800cc66 <ModBUS_F03_Read>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	210a      	movs	r1, #10
 8000c94:	4878      	ldr	r0, [pc, #480]	; (8000e78 <main+0x7e4>)
 8000c96:	f00b ffe6 	bl	800cc66 <ModBUS_F03_Read>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	210b      	movs	r1, #11
 8000ca0:	4875      	ldr	r0, [pc, #468]	; (8000e78 <main+0x7e4>)
 8000ca2:	f00b ffe0 	bl	800cc66 <ModBUS_F03_Read>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	210c      	movs	r1, #12
 8000cac:	4872      	ldr	r0, [pc, #456]	; (8000e78 <main+0x7e4>)
 8000cae:	f00b ffda 	bl	800cc66 <ModBUS_F03_Read>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461e      	mov	r6, r3
 8000cb6:	210d      	movs	r1, #13
 8000cb8:	486f      	ldr	r0, [pc, #444]	; (8000e78 <main+0x7e4>)
 8000cba:	f00b ffd4 	bl	800cc66 <ModBUS_F03_Read>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	461d      	mov	r5, r3
 8000cc2:	210e      	movs	r1, #14
 8000cc4:	486c      	ldr	r0, [pc, #432]	; (8000e78 <main+0x7e4>)
 8000cc6:	f00b ffce 	bl	800cc66 <ModBUS_F03_Read>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461c      	mov	r4, r3
 8000cce:	210f      	movs	r1, #15
 8000cd0:	4869      	ldr	r0, [pc, #420]	; (8000e78 <main+0x7e4>)
 8000cd2:	f00b ffc8 	bl	800cc66 <ModBUS_F03_Read>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	461a      	mov	r2, r3
 8000cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cde:	9312      	str	r3, [sp, #72]	; 0x48
 8000ce0:	4b66      	ldr	r3, [pc, #408]	; (8000e7c <main+0x7e8>)
 8000ce2:	9311      	str	r3, [sp, #68]	; 0x44
 8000ce4:	4b66      	ldr	r3, [pc, #408]	; (8000e80 <main+0x7ec>)
 8000ce6:	9310      	str	r3, [sp, #64]	; 0x40
 8000ce8:	2301      	movs	r3, #1
 8000cea:	930f      	str	r3, [sp, #60]	; 0x3c
 8000cec:	920e      	str	r2, [sp, #56]	; 0x38
 8000cee:	940d      	str	r4, [sp, #52]	; 0x34
 8000cf0:	950c      	str	r5, [sp, #48]	; 0x30
 8000cf2:	960b      	str	r6, [sp, #44]	; 0x2c
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	920a      	str	r2, [sp, #40]	; 0x28
 8000cf8:	68ba      	ldr	r2, [r7, #8]
 8000cfa:	9209      	str	r2, [sp, #36]	; 0x24
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	9208      	str	r2, [sp, #32]
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	9207      	str	r2, [sp, #28]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	9206      	str	r2, [sp, #24]
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	9205      	str	r2, [sp, #20]
 8000d0c:	69fa      	ldr	r2, [r7, #28]
 8000d0e:	9204      	str	r2, [sp, #16]
 8000d10:	6a3a      	ldr	r2, [r7, #32]
 8000d12:	9203      	str	r2, [sp, #12]
 8000d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d16:	9202      	str	r2, [sp, #8]
 8000d18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d1a:	9201      	str	r2, [sp, #4]
 8000d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	4643      	mov	r3, r8
 8000d22:	4a58      	ldr	r2, [pc, #352]	; (8000e84 <main+0x7f0>)
 8000d24:	4958      	ldr	r1, [pc, #352]	; (8000e88 <main+0x7f4>)
 8000d26:	4859      	ldr	r0, [pc, #356]	; (8000e8c <main+0x7f8>)
 8000d28:	f00a fdc0 	bl	800b8ac <httpPOST>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d020      	beq.n	8000d74 <main+0x6e0>
									ModBUS_F03_Read(&mb_eth,14),
									ModBUS_F03_Read(&mb_eth,15),TEST_1,//ModBUS_F03_Read(&mb_eth,9),TEPELCO,
	  								post, body, 512))

	  				{
	  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000d32:	4853      	ldr	r0, [pc, #332]	; (8000e80 <main+0x7ec>)
 8000d34:	f7ff fa5e 	bl	80001f4 <strlen>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	2341      	movs	r3, #65	; 0x41
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2300      	movs	r3, #0
 8000d42:	494f      	ldr	r1, [pc, #316]	; (8000e80 <main+0x7ec>)
 8000d44:	4852      	ldr	r0, [pc, #328]	; (8000e90 <main+0x7fc>)
 8000d46:	f00e f9eb 	bl	800f120 <CopiaVector>
	  							wf._n_D2SND=strlen(post);
 8000d4a:	484d      	ldr	r0, [pc, #308]	; (8000e80 <main+0x7ec>)
 8000d4c:	f7ff fa52 	bl	80001f4 <strlen>
 8000d50:	4603      	mov	r3, r0
 8000d52:	461a      	mov	r2, r3
 8000d54:	4b43      	ldr	r3, [pc, #268]	; (8000e64 <main+0x7d0>)
 8000d56:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
	  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000d5a:	4b42      	ldr	r3, [pc, #264]	; (8000e64 <main+0x7d0>)
 8000d5c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d807      	bhi.n	8000d74 <main+0x6e0>
	  							{
	  								EnviarDatos(&wf);
 8000d64:	483f      	ldr	r0, [pc, #252]	; (8000e64 <main+0x7d0>)
 8000d66:	f005 fda3 	bl	80068b0 <EnviarDatos>
	  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000d6a:	4b3e      	ldr	r3, [pc, #248]	; (8000e64 <main+0x7d0>)
 8000d6c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000d70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  				}
	  			}
	  	  }
	  /**************[ FIN PIDO ENVIAR DATOS ]**************/

	  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000d74:	4b47      	ldr	r3, [pc, #284]	; (8000e94 <main+0x800>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d004      	beq.n	8000d86 <main+0x6f2>
 8000d7c:	4b46      	ldr	r3, [pc, #280]	; (8000e98 <main+0x804>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	f040 80aa 	bne.w	8000eda <main+0x846>
	  		{
	  			if(FLAG_UART1==1)
 8000d86:	4b43      	ldr	r3, [pc, #268]	; (8000e94 <main+0x800>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d11c      	bne.n	8000dc8 <main+0x734>
	  				{
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000d8e:	4b43      	ldr	r3, [pc, #268]	; (8000e9c <main+0x808>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	4b43      	ldr	r3, [pc, #268]	; (8000ea0 <main+0x80c>)
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2301      	movs	r3, #1
 8000d98:	4942      	ldr	r1, [pc, #264]	; (8000ea4 <main+0x810>)
 8000d9a:	4843      	ldr	r0, [pc, #268]	; (8000ea8 <main+0x814>)
 8000d9c:	f00e f9c0 	bl	800f120 <CopiaVector>
	  					FLAG_UART1=0;
 8000da0:	4b3c      	ldr	r3, [pc, #240]	; (8000e94 <main+0x800>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]

	  						if (error_rxdata==3)
 8000da6:	4b41      	ldr	r3, [pc, #260]	; (8000eac <main+0x818>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d102      	bne.n	8000db4 <main+0x720>
	  						{
	  							error_rxdata=0;
 8000dae:	4b3f      	ldr	r3, [pc, #252]	; (8000eac <main+0x818>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
	  						}
	  						if (error_rxdata==1)
 8000db4:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <main+0x818>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d105      	bne.n	8000dc8 <main+0x734>
	  						{
	  							error_rxdata=5;
 8000dbc:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <main+0x818>)
 8000dbe:	2205      	movs	r2, #5
 8000dc0:	701a      	strb	r2, [r3, #0]
	  							error_rxdata=0;
 8000dc2:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <main+0x818>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
	  						}
	  				}
	  			if(FLAG_TIMEOUT==1)
 8000dc8:	4b33      	ldr	r3, [pc, #204]	; (8000e98 <main+0x804>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d102      	bne.n	8000dd6 <main+0x742>
	  					{
	  						FLAG_TIMEOUT=0;
 8000dd0:	4b31      	ldr	r3, [pc, #196]	; (8000e98 <main+0x804>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
	  					}

	  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000dd6:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <main+0x7cc>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d17d      	bne.n	8000eda <main+0x846>
	  				{
	  					/*************** Copio y proceso info recibida ***************/
	  					wf._n_orig=UART_RX_items;
 8000dde:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <main+0x808>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a20      	ldr	r2, [pc, #128]	; (8000e64 <main+0x7d0>)
 8000de4:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000de8:	4b2c      	ldr	r3, [pc, #176]	; (8000e9c <main+0x808>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <main+0x80c>)
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2301      	movs	r3, #1
 8000df2:	492c      	ldr	r1, [pc, #176]	; (8000ea4 <main+0x810>)
 8000df4:	482c      	ldr	r0, [pc, #176]	; (8000ea8 <main+0x814>)
 8000df6:	f00e f993 	bl	800f120 <CopiaVector>
	  					resultado=AT_ESP8266_ND(&wf);
 8000dfa:	481a      	ldr	r0, [pc, #104]	; (8000e64 <main+0x7d0>)
 8000dfc:	f005 fe3e 	bl	8006a7c <AT_ESP8266_ND>
 8000e00:	4603      	mov	r3, r0
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <main+0x81c>)
 8000e06:	701a      	strb	r2, [r3, #0]

	  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

	  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <main+0x7d0>)
 8000e0a:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d163      	bne.n	8000eda <main+0x846>
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <main+0x7d0>)
 8000e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e18:	2b63      	cmp	r3, #99	; 0x63
 8000e1a:	d15e      	bne.n	8000eda <main+0x846>
	  					{

	  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <main+0x7d0>)
 8000e1e:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8000e22:	2341      	movs	r3, #65	; 0x41
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2300      	movs	r3, #0
 8000e28:	4922      	ldr	r1, [pc, #136]	; (8000eb4 <main+0x820>)
 8000e2a:	4823      	ldr	r0, [pc, #140]	; (8000eb8 <main+0x824>)
 8000e2c:	f00e f978 	bl	800f120 <CopiaVector>
	  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <main+0x7d0>)
 8000e32:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8000e36:	4a21      	ldr	r2, [pc, #132]	; (8000ebc <main+0x828>)
 8000e38:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

	  						ModBUS(&mb_wf);
 8000e3c:	481f      	ldr	r0, [pc, #124]	; (8000ebc <main+0x828>)
 8000e3e:	f00b ff97 	bl	800cd70 <ModBUS>

	  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000e42:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <main+0x828>)
 8000e44:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000e48:	2341      	movs	r3, #65	; 0x41
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	491c      	ldr	r1, [pc, #112]	; (8000ec0 <main+0x82c>)
 8000e50:	480f      	ldr	r0, [pc, #60]	; (8000e90 <main+0x7fc>)
 8000e52:	f00e f965 	bl	800f120 <CopiaVector>
	  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000e56:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <main+0x828>)
 8000e58:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000e5c:	e032      	b.n	8000ec4 <main+0x830>
 8000e5e:	bf00      	nop
 8000e60:	20003a07 	.word	0x20003a07
 8000e64:	20000b58 	.word	0x20000b58
 8000e68:	080107b8 	.word	0x080107b8
 8000e6c:	2000294d 	.word	0x2000294d
 8000e70:	20000350 	.word	0x20000350
 8000e74:	20002950 	.word	0x20002950
 8000e78:	200018ac 	.word	0x200018ac
 8000e7c:	2000274c 	.word	0x2000274c
 8000e80:	2000254c 	.word	0x2000254c
 8000e84:	2000001c 	.word	0x2000001c
 8000e88:	2000000c 	.word	0x2000000c
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000dec 	.word	0x20000dec
 8000e94:	20003a0c 	.word	0x20003a0c
 8000e98:	20003a0b 	.word	0x20003a0b
 8000e9c:	20004028 	.word	0x20004028
 8000ea0:	20004018 	.word	0x20004018
 8000ea4:	20003e18 	.word	0x20003e18
 8000ea8:	200011ec 	.word	0x200011ec
 8000eac:	20003a0f 	.word	0x20003a0f
 8000eb0:	20003a0e 	.word	0x20003a0e
 8000eb4:	20000bec 	.word	0x20000bec
 8000eb8:	20001f0e 	.word	0x20001f0e
 8000ebc:	20001efc 	.word	0x20001efc
 8000ec0:	20002114 	.word	0x20002114
 8000ec4:	4a7c      	ldr	r2, [pc, #496]	; (80010b8 <main+0xa24>)
 8000ec6:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
	  						wf._new_data_rcv=0;//
 8000eca:	4b7b      	ldr	r3, [pc, #492]	; (80010b8 <main+0xa24>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	  						wf._send_data=1;
 8000ed2:	4b79      	ldr	r3, [pc, #484]	; (80010b8 <main+0xa24>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
	  						}
	  					}

	  		}
// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT
	  		if((FLAG_UART2 == 1)||(lr.tmr_dly_ON==1))  //Evento de dato recibido LoRA debo verificar que es
 8000eda:	4b78      	ldr	r3, [pc, #480]	; (80010bc <main+0xa28>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d005      	beq.n	8000eee <main+0x85a>
 8000ee2:	4b77      	ldr	r3, [pc, #476]	; (80010c0 <main+0xa2c>)
 8000ee4:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	f040 80b2 	bne.w	8001052 <main+0x9be>
	  		{
	  			if(FLAG_UART2==1)
 8000eee:	4b73      	ldr	r3, [pc, #460]	; (80010bc <main+0xa28>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d160      	bne.n	8000fb8 <main+0x924>
	  				{
	  				FLAG_UART2=0;
 8000ef6:	4b71      	ldr	r3, [pc, #452]	; (80010bc <main+0xa28>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
	  				LoRa_decode(&lr);
 8000efc:	4870      	ldr	r0, [pc, #448]	; (80010c0 <main+0xa2c>)
 8000efe:	f00b f929 	bl	800c154 <LoRa_decode>
	  				if(lr._data_available)
 8000f02:	4b6f      	ldr	r3, [pc, #444]	; (80010c0 <main+0xa2c>)
 8000f04:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d055      	beq.n	8000fb8 <main+0x924>
	  				{
	  					CopiaVector(lr.dataRCV_hld,lr.dataRCV,lr._n_dataRCV,1,"D");
 8000f0c:	4b6c      	ldr	r3, [pc, #432]	; (80010c0 <main+0xa2c>)
 8000f0e:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	; 0x4d8
 8000f12:	4b6c      	ldr	r3, [pc, #432]	; (80010c4 <main+0xa30>)
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2301      	movs	r3, #1
 8000f18:	496b      	ldr	r1, [pc, #428]	; (80010c8 <main+0xa34>)
 8000f1a:	486c      	ldr	r0, [pc, #432]	; (80010cc <main+0xa38>)
 8000f1c:	f00e f900 	bl	800f120 <CopiaVector>
	  					}
	  					ModBUS_F03_Assign(&mb_eth,0,atoi(num,10));
						*/

	  					char num[6];
	  					int i=0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	647b      	str	r3, [r7, #68]	; 0x44
	  					int n=0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	643b      	str	r3, [r7, #64]	; 0x40
	  					int lnn=0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63bb      	str	r3, [r7, #56]	; 0x38
	  					lnn=strlen(lr.dataRCV_hld);
 8000f2c:	4867      	ldr	r0, [pc, #412]	; (80010cc <main+0xa38>)
 8000f2e:	f7ff f961 	bl	80001f4 <strlen>
 8000f32:	4603      	mov	r3, r0
 8000f34:	63bb      	str	r3, [r7, #56]	; 0x38
	  					while(i < lnn-1)
 8000f36:	e03a      	b.n	8000fae <main+0x91a>
	  					{
							if( i!=0) i++;
 8000f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d002      	beq.n	8000f44 <main+0x8b0>
 8000f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f40:	3301      	adds	r3, #1
 8000f42:	647b      	str	r3, [r7, #68]	; 0x44
							int j=0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	63fb      	str	r3, [r7, #60]	; 0x3c
								while(lr.dataRCV_hld[i] != ';')
 8000f48:	e011      	b.n	8000f6e <main+0x8da>
								{
									num[j]=lr.dataRCV_hld[i];
 8000f4a:	4a5d      	ldr	r2, [pc, #372]	; (80010c0 <main+0xa2c>)
 8000f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f4e:	4413      	add	r3, r2
 8000f50:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000f54:	7819      	ldrb	r1, [r3, #0]
 8000f56:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f5c:	4413      	add	r3, r2
 8000f5e:	460a      	mov	r2, r1
 8000f60:	701a      	strb	r2, [r3, #0]
									j++;
 8000f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f64:	3301      	adds	r3, #1
 8000f66:	63fb      	str	r3, [r7, #60]	; 0x3c
									i++;
 8000f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	647b      	str	r3, [r7, #68]	; 0x44
								while(lr.dataRCV_hld[i] != ';')
 8000f6e:	4a54      	ldr	r2, [pc, #336]	; (80010c0 <main+0xa2c>)
 8000f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f72:	4413      	add	r3, r2
 8000f74:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b3b      	cmp	r3, #59	; 0x3b
 8000f7c:	d1e5      	bne.n	8000f4a <main+0x8b6>
								}
							num[j]='\0';
 8000f7e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f84:	4413      	add	r3, r2
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
							ModBUS_F03_Assign(&mb_eth,n,atoi(num,10));
 8000f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f8c:	b2dc      	uxtb	r4, r3
 8000f8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f92:	210a      	movs	r1, #10
 8000f94:	4618      	mov	r0, r3
 8000f96:	f00e f90e 	bl	800f1b6 <atoi>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4621      	mov	r1, r4
 8000fa2:	484b      	ldr	r0, [pc, #300]	; (80010d0 <main+0xa3c>)
 8000fa4:	f00b fe31 	bl	800cc0a <ModBUS_F03_Assign>
							n++;												//Incremento posición  a almacenar
 8000fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000faa:	3301      	adds	r3, #1
 8000fac:	643b      	str	r3, [r7, #64]	; 0x40
	  					while(i < lnn-1)
 8000fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	dbbf      	blt.n	8000f38 <main+0x8a4>


	  				}
	  				}

	  			if(lr.tmr_dly_ON==1)
 8000fb8:	4b41      	ldr	r3, [pc, #260]	; (80010c0 <main+0xa2c>)
 8000fba:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d147      	bne.n	8001052 <main+0x9be>
	  				{
	  					lr.tmr_dly_ON=0;
 8000fc2:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <main+0xa2c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
	  					LoRa_reset_sndTIMER(&lr,3000);
 8000fca:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000fce:	483c      	ldr	r0, [pc, #240]	; (80010c0 <main+0xa2c>)
 8000fd0:	f00b f8a4 	bl	800c11c <LoRa_reset_sndTIMER>
						lr.dest_address[0]='\0';
 8000fd4:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <main+0xa2c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	759a      	strb	r2, [r3, #22]
						lr.txbuff[0]='\0';
 8000fda:	4b39      	ldr	r3, [pc, #228]	; (80010c0 <main+0xa2c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
			  			strncat(lr.dest_address,"1",1);
 8000fe2:	483c      	ldr	r0, [pc, #240]	; (80010d4 <main+0xa40>)
 8000fe4:	f7ff f906 	bl	80001f4 <strlen>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b39      	ldr	r3, [pc, #228]	; (80010d4 <main+0xa40>)
 8000fee:	4413      	add	r3, r2
 8000ff0:	4939      	ldr	r1, [pc, #228]	; (80010d8 <main+0xa44>)
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	8013      	strh	r3, [r2, #0]
			  			strncat(lr.txbuff,"prueba de envio de mensaje de texto",strlen("prueba de envio de mensaje de texto"));
 8000ffa:	4838      	ldr	r0, [pc, #224]	; (80010dc <main+0xa48>)
 8000ffc:	f7ff f8fa 	bl	80001f4 <strlen>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	4b35      	ldr	r3, [pc, #212]	; (80010dc <main+0xa48>)
 8001006:	4413      	add	r3, r2
 8001008:	4a35      	ldr	r2, [pc, #212]	; (80010e0 <main+0xa4c>)
 800100a:	4614      	mov	r4, r2
 800100c:	469c      	mov	ip, r3
 800100e:	f104 0e20 	add.w	lr, r4, #32
 8001012:	4665      	mov	r5, ip
 8001014:	4626      	mov	r6, r4
 8001016:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001018:	6028      	str	r0, [r5, #0]
 800101a:	6069      	str	r1, [r5, #4]
 800101c:	60aa      	str	r2, [r5, #8]
 800101e:	60eb      	str	r3, [r5, #12]
 8001020:	3410      	adds	r4, #16
 8001022:	f10c 0c10 	add.w	ip, ip, #16
 8001026:	4574      	cmp	r4, lr
 8001028:	d1f3      	bne.n	8001012 <main+0x97e>
 800102a:	4663      	mov	r3, ip
 800102c:	4622      	mov	r2, r4
 800102e:	6810      	ldr	r0, [r2, #0]
 8001030:	6018      	str	r0, [r3, #0]
			  			lr.txitems=strlen("prueba de envio de mensaje de texto");
 8001032:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <main+0xa2c>)
 8001034:	2223      	movs	r2, #35	; 0x23
 8001036:	f8c3 27e0 	str.w	r2, [r3, #2016]	; 0x7e0
		  				lr.estado=_SENT;										//
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <main+0xa2c>)
 800103c:	2214      	movs	r2, #20
 800103e:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
			  			error=LoRa_Send(&lr,&huart2);
 8001042:	4928      	ldr	r1, [pc, #160]	; (80010e4 <main+0xa50>)
 8001044:	481e      	ldr	r0, [pc, #120]	; (80010c0 <main+0xa2c>)
 8001046:	f00a ffbb 	bl	800bfc0 <LoRa_Send>
 800104a:	4603      	mov	r3, r0
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <main+0xa54>)
 8001050:	701a      	strb	r2, [r3, #0]
	  				}
	  		}

	  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8001052:	4b26      	ldr	r3, [pc, #152]	; (80010ec <main+0xa58>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d108      	bne.n	800106c <main+0x9d8>
	  			{
	  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 800105a:	2201      	movs	r2, #1
 800105c:	4924      	ldr	r1, [pc, #144]	; (80010f0 <main+0xa5c>)
 800105e:	4816      	ldr	r0, [pc, #88]	; (80010b8 <main+0xa24>)
 8001060:	f008 ffa4 	bl	8009fac <WiFi_Conn_ND>
 8001064:	4603      	mov	r3, r0
 8001066:	b2da      	uxtb	r2, r3
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <main+0xa60>)
 800106a:	701a      	strb	r2, [r3, #0]
	  			}
	  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <main+0xa64>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	f47f adab 	bne.w	8000bcc <main+0x538>
	  			{
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 7180 	mov.w	r1, #256	; 0x100
 800107c:	481f      	ldr	r0, [pc, #124]	; (80010fc <main+0xa68>)
 800107e:	f002 fa99 	bl	80035b4 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8001082:	2115      	movs	r1, #21
 8001084:	481e      	ldr	r0, [pc, #120]	; (8001100 <main+0xa6c>)
 8001086:	f000 fae3 	bl	8001650 <ITM0_Write>
	  				HAL_Delay(2000);//210419
 800108a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800108e:	f001 fe2f 	bl	8002cf0 <HAL_Delay>
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001098:	4818      	ldr	r0, [pc, #96]	; (80010fc <main+0xa68>)
 800109a:	f002 fa8b 	bl	80035b4 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP WAIT 5s AFT RST\r\n",strlen("\r\n ESP WAIT 5s AFT RST\r\n"));
 800109e:	2118      	movs	r1, #24
 80010a0:	4818      	ldr	r0, [pc, #96]	; (8001104 <main+0xa70>)
 80010a2:	f000 fad5 	bl	8001650 <ITM0_Write>
	  				HAL_Delay(5000);//210419
 80010a6:	f241 3088 	movw	r0, #5000	; 0x1388
 80010aa:	f001 fe21 	bl	8002cf0 <HAL_Delay>
	  				esp_restart=0;
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <main+0xa64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
	  	  if (ESP_HW_Init==1)
 80010b4:	e58a      	b.n	8000bcc <main+0x538>
 80010b6:	bf00      	nop
 80010b8:	20000b58 	.word	0x20000b58
 80010bc:	20003a0d 	.word	0x20003a0d
 80010c0:	20000350 	.word	0x20000350
 80010c4:	080107d0 	.word	0x080107d0
 80010c8:	20000526 	.word	0x20000526
 80010cc:	200006a6 	.word	0x200006a6
 80010d0:	200018ac 	.word	0x200018ac
 80010d4:	20000366 	.word	0x20000366
 80010d8:	080107d4 	.word	0x080107d4
 80010dc:	2000082c 	.word	0x2000082c
 80010e0:	080107d8 	.word	0x080107d8
 80010e4:	200002c0 	.word	0x200002c0
 80010e8:	20000b54 	.word	0x20000b54
 80010ec:	20003a07 	.word	0x20003a07
 80010f0:	2000027c 	.word	0x2000027c
 80010f4:	20003a11 	.word	0x20003a11
 80010f8:	20003a10 	.word	0x20003a10
 80010fc:	40020000 	.word	0x40020000
 8001100:	080107fc 	.word	0x080107fc
 8001104:	08010814 	.word	0x08010814

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b094      	sub	sp, #80	; 0x50
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 0320 	add.w	r3, r7, #32
 8001112:	2230      	movs	r2, #48	; 0x30
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f00e fa4d 	bl	800f5b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <SystemClock_Config+0xc8>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	4a26      	ldr	r2, [pc, #152]	; (80011d0 <SystemClock_Config+0xc8>)
 8001136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113a:	6413      	str	r3, [r2, #64]	; 0x40
 800113c:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <SystemClock_Config+0xc8>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <SystemClock_Config+0xcc>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a20      	ldr	r2, [pc, #128]	; (80011d4 <SystemClock_Config+0xcc>)
 8001152:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <SystemClock_Config+0xcc>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001164:	2301      	movs	r3, #1
 8001166:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001168:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116e:	2302      	movs	r3, #2
 8001170:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001172:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001176:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001178:	230c      	movs	r3, #12
 800117a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800117c:	2360      	movs	r3, #96	; 0x60
 800117e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001180:	2302      	movs	r3, #2
 8001182:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001184:	2304      	movs	r3, #4
 8001186:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001188:	f107 0320 	add.w	r3, r7, #32
 800118c:	4618      	mov	r0, r3
 800118e:	f002 fa45 	bl	800361c <HAL_RCC_OscConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001198:	f001 fa24 	bl	80025e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119c:	230f      	movs	r3, #15
 800119e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a0:	2302      	movs	r3, #2
 80011a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	2103      	movs	r1, #3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 fca7 	bl	8003b0c <HAL_RCC_ClockConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011c4:	f001 fa0e 	bl	80025e4 <Error_Handler>
  }
}
 80011c8:	bf00      	nop
 80011ca:	3750      	adds	r7, #80	; 0x50
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40007000 	.word	0x40007000

080011d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_SPI1_Init+0x64>)
 80011de:	4a18      	ldr	r2, [pc, #96]	; (8001240 <MX_SPI1_Init+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_SPI1_Init+0x64>)
 80011e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_SPI1_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <MX_SPI1_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_SPI1_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_SPI1_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_SPI1_Init+0x64>)
 8001204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001208:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_SPI1_Init+0x64>)
 800120c:	2210      	movs	r2, #16
 800120e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <MX_SPI1_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_SPI1_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <MX_SPI1_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_SPI1_Init+0x64>)
 8001224:	220a      	movs	r2, #10
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_SPI1_Init+0x64>)
 800122a:	f002 fe4f 	bl	8003ecc <HAL_SPI_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001234:	f001 f9d6 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000194 	.word	0x20000194
 8001240:	40013000 	.word	0x40013000

08001244 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08e      	sub	sp, #56	; 0x38
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001258:	f107 0320 	add.w	r3, r7, #32
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
 8001270:	615a      	str	r2, [r3, #20]
 8001272:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001274:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <MX_TIM2_Init+0xf0>)
 8001276:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800127a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 800127c:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <MX_TIM2_Init+0xf0>)
 800127e:	2264      	movs	r2, #100	; 0x64
 8001280:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001282:	4b2c      	ldr	r3, [pc, #176]	; (8001334 <MX_TIM2_Init+0xf0>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001288:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <MX_TIM2_Init+0xf0>)
 800128a:	2264      	movs	r2, #100	; 0x64
 800128c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128e:	4b29      	ldr	r3, [pc, #164]	; (8001334 <MX_TIM2_Init+0xf0>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001294:	4b27      	ldr	r3, [pc, #156]	; (8001334 <MX_TIM2_Init+0xf0>)
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800129a:	4826      	ldr	r0, [pc, #152]	; (8001334 <MX_TIM2_Init+0xf0>)
 800129c:	f003 f90c 	bl	80044b8 <HAL_TIM_Base_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80012a6:	f001 f99d 	bl	80025e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012b4:	4619      	mov	r1, r3
 80012b6:	481f      	ldr	r0, [pc, #124]	; (8001334 <MX_TIM2_Init+0xf0>)
 80012b8:	f003 fd14 	bl	8004ce4 <HAL_TIM_ConfigClockSource>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80012c2:	f001 f98f 	bl	80025e4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80012c6:	481b      	ldr	r0, [pc, #108]	; (8001334 <MX_TIM2_Init+0xf0>)
 80012c8:	f003 f945 	bl	8004556 <HAL_TIM_OC_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80012d2:	f001 f987 	bl	80025e4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80012d6:	2108      	movs	r1, #8
 80012d8:	4816      	ldr	r0, [pc, #88]	; (8001334 <MX_TIM2_Init+0xf0>)
 80012da:	f003 fb45 	bl	8004968 <HAL_TIM_OnePulse_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80012e4:	f001 f97e 	bl	80025e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	4619      	mov	r1, r3
 80012f6:	480f      	ldr	r0, [pc, #60]	; (8001334 <MX_TIM2_Init+0xf0>)
 80012f8:	f004 f8b0 	bl	800545c <HAL_TIMEx_MasterConfigSynchronization>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8001302:	f001 f96f 	bl	80025e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8001306:	2320      	movs	r3, #32
 8001308:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2200      	movs	r2, #0
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_TIM2_Init+0xf0>)
 800131e:	f003 fc85 	bl	8004c2c <HAL_TIM_OC_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001328:	f001 f95c 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	3738      	adds	r7, #56	; 0x38
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200001ec 	.word	0x200001ec

08001338 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	; 0x38
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	f107 0320 	add.w	r3, r7, #32
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
 8001364:	615a      	str	r2, [r3, #20]
 8001366:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001368:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <MX_TIM3_Init+0xf0>)
 800136a:	4a30      	ldr	r2, [pc, #192]	; (800142c <MX_TIM3_Init+0xf4>)
 800136c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 800136e:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <MX_TIM3_Init+0xf0>)
 8001370:	2264      	movs	r2, #100	; 0x64
 8001372:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001374:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <MX_TIM3_Init+0xf0>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 800137a:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <MX_TIM3_Init+0xf0>)
 800137c:	2296      	movs	r2, #150	; 0x96
 800137e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001380:	4b29      	ldr	r3, [pc, #164]	; (8001428 <MX_TIM3_Init+0xf0>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001386:	4b28      	ldr	r3, [pc, #160]	; (8001428 <MX_TIM3_Init+0xf0>)
 8001388:	2280      	movs	r2, #128	; 0x80
 800138a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800138c:	4826      	ldr	r0, [pc, #152]	; (8001428 <MX_TIM3_Init+0xf0>)
 800138e:	f003 f893 	bl	80044b8 <HAL_TIM_Base_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001398:	f001 f924 	bl	80025e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a6:	4619      	mov	r1, r3
 80013a8:	481f      	ldr	r0, [pc, #124]	; (8001428 <MX_TIM3_Init+0xf0>)
 80013aa:	f003 fc9b 	bl	8004ce4 <HAL_TIM_ConfigClockSource>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80013b4:	f001 f916 	bl	80025e4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80013b8:	481b      	ldr	r0, [pc, #108]	; (8001428 <MX_TIM3_Init+0xf0>)
 80013ba:	f003 f8cc 	bl	8004556 <HAL_TIM_OC_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80013c4:	f001 f90e 	bl	80025e4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80013c8:	2108      	movs	r1, #8
 80013ca:	4817      	ldr	r0, [pc, #92]	; (8001428 <MX_TIM3_Init+0xf0>)
 80013cc:	f003 facc 	bl	8004968 <HAL_TIM_OnePulse_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 80013d6:	f001 f905 	bl	80025e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013e2:	f107 0320 	add.w	r3, r7, #32
 80013e6:	4619      	mov	r1, r3
 80013e8:	480f      	ldr	r0, [pc, #60]	; (8001428 <MX_TIM3_Init+0xf0>)
 80013ea:	f004 f837 	bl	800545c <HAL_TIMEx_MasterConfigSynchronization>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 80013f4:	f001 f8f6 	bl	80025e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 80013f8:	2320      	movs	r3, #32
 80013fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2200      	movs	r2, #0
 800140c:	4619      	mov	r1, r3
 800140e:	4806      	ldr	r0, [pc, #24]	; (8001428 <MX_TIM3_Init+0xf0>)
 8001410:	f003 fc0c 	bl	8004c2c <HAL_TIM_OC_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800141a:	f001 f8e3 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	3738      	adds	r7, #56	; 0x38
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000234 	.word	0x20000234
 800142c:	40000400 	.word	0x40000400

08001430 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_USART1_UART_Init+0x4c>)
 8001436:	4a12      	ldr	r2, [pc, #72]	; (8001480 <MX_USART1_UART_Init+0x50>)
 8001438:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <MX_USART1_UART_Init+0x4c>)
 800143c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001440:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_USART1_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_USART1_UART_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_USART1_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_USART1_UART_Init+0x4c>)
 8001456:	220c      	movs	r2, #12
 8001458:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_USART1_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_USART1_UART_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_USART1_UART_Init+0x4c>)
 8001468:	f004 f87a 	bl	8005560 <HAL_UART_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001472:	f001 f8b7 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000027c 	.word	0x2000027c
 8001480:	40011000 	.word	0x40011000

08001484 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_USART2_UART_Init+0x4c>)
 800148a:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <MX_USART2_UART_Init+0x50>)
 800148c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <MX_USART2_UART_Init+0x4c>)
 8001490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001494:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_USART2_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_USART2_UART_Init+0x4c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <MX_USART2_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_USART2_UART_Init+0x4c>)
 80014aa:	220c      	movs	r2, #12
 80014ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <MX_USART2_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_USART2_UART_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_USART2_UART_Init+0x4c>)
 80014bc:	f004 f850 	bl	8005560 <HAL_UART_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014c6:	f001 f88d 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200002c0 	.word	0x200002c0
 80014d4:	40004400 	.word	0x40004400

080014d8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_USART6_UART_Init+0x4c>)
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <MX_USART6_UART_Init+0x50>)
 80014e0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <MX_USART6_UART_Init+0x4c>)
 80014e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_USART6_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <MX_USART6_UART_Init+0x4c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <MX_USART6_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_USART6_UART_Init+0x4c>)
 80014fe:	220c      	movs	r2, #12
 8001500:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <MX_USART6_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_USART6_UART_Init+0x4c>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_USART6_UART_Init+0x4c>)
 8001510:	f004 f826 	bl	8005560 <HAL_UART_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800151a:	f001 f863 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000304 	.word	0x20000304
 8001528:	40011400 	.word	0x40011400

0800152c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	; 0x28
 8001530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	4b3f      	ldr	r3, [pc, #252]	; (8001644 <MX_GPIO_Init+0x118>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a3e      	ldr	r2, [pc, #248]	; (8001644 <MX_GPIO_Init+0x118>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b3c      	ldr	r3, [pc, #240]	; (8001644 <MX_GPIO_Init+0x118>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b38      	ldr	r3, [pc, #224]	; (8001644 <MX_GPIO_Init+0x118>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a37      	ldr	r2, [pc, #220]	; (8001644 <MX_GPIO_Init+0x118>)
 8001568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b35      	ldr	r3, [pc, #212]	; (8001644 <MX_GPIO_Init+0x118>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	4b31      	ldr	r3, [pc, #196]	; (8001644 <MX_GPIO_Init+0x118>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a30      	ldr	r2, [pc, #192]	; (8001644 <MX_GPIO_Init+0x118>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <MX_GPIO_Init+0x118>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <MX_GPIO_Init+0x118>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a29      	ldr	r2, [pc, #164]	; (8001644 <MX_GPIO_Init+0x118>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b27      	ldr	r3, [pc, #156]	; (8001644 <MX_GPIO_Init+0x118>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b8:	4823      	ldr	r0, [pc, #140]	; (8001648 <MX_GPIO_Init+0x11c>)
 80015ba:	f001 fffb 	bl	80035b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|WIFI_EN_Pin, GPIO_PIN_SET);
 80015be:	2201      	movs	r2, #1
 80015c0:	f44f 7188 	mov.w	r1, #272	; 0x110
 80015c4:	4821      	ldr	r0, [pc, #132]	; (800164c <MX_GPIO_Init+0x120>)
 80015c6:	f001 fff5 	bl	80035b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 80015ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	4819      	ldr	r0, [pc, #100]	; (8001648 <MX_GPIO_Init+0x11c>)
 80015e4:	f001 fd7e 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_BTN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin;
 80015e8:	2301      	movs	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_BTN_GPIO_Port, &GPIO_InitStruct);
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4619      	mov	r1, r3
 80015fa:	4814      	ldr	r0, [pc, #80]	; (800164c <MX_GPIO_Init+0x120>)
 80015fc:	f001 fd72 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8001600:	2310      	movs	r3, #16
 8001602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001604:	2301      	movs	r3, #1
 8001606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160c:	2303      	movs	r3, #3
 800160e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4619      	mov	r1, r3
 8001616:	480d      	ldr	r0, [pc, #52]	; (800164c <MX_GPIO_Init+0x120>)
 8001618:	f001 fd64 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_EN_Pin */
  GPIO_InitStruct.Pin = WIFI_EN_Pin;
 800161c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001622:	2301      	movs	r3, #1
 8001624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_EN_GPIO_Port, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_GPIO_Init+0x120>)
 8001636:	f001 fd55 	bl	80030e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800163a:	bf00      	nop
 800163c:	3728      	adds	r7, #40	; 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	40020800 	.word	0x40020800
 800164c:	40020000 	.word	0x40020000

08001650 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	e009      	b.n	8001674 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe ffeb 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	3301      	adds	r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	dbf1      	blt.n	8001660 <ITM0_Write+0x10>
  }
  return len;
 800167c:	683b      	ldr	r3, [r7, #0]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 800168e:	4b68      	ldr	r3, [pc, #416]	; (8001830 <SysTick_Handler+0x1a8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	3301      	adds	r3, #1
 8001694:	4a66      	ldr	r2, [pc, #408]	; (8001830 <SysTick_Handler+0x1a8>)
 8001696:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 8001698:	4b66      	ldr	r3, [pc, #408]	; (8001834 <SysTick_Handler+0x1ac>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	3301      	adds	r3, #1
 800169e:	4a65      	ldr	r2, [pc, #404]	; (8001834 <SysTick_Handler+0x1ac>)
 80016a0:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 80016a2:	4b65      	ldr	r3, [pc, #404]	; (8001838 <SysTick_Handler+0x1b0>)
 80016a4:	7a1b      	ldrb	r3, [r3, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d004      	beq.n	80016b4 <SysTick_Handler+0x2c>
 80016aa:	4b64      	ldr	r3, [pc, #400]	; (800183c <SysTick_Handler+0x1b4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	4a62      	ldr	r2, [pc, #392]	; (800183c <SysTick_Handler+0x1b4>)
 80016b2:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 80016b4:	4b60      	ldr	r3, [pc, #384]	; (8001838 <SysTick_Handler+0x1b0>)
 80016b6:	7a1b      	ldrb	r3, [r3, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00c      	beq.n	80016d6 <SysTick_Handler+0x4e>
 80016bc:	4b5e      	ldr	r3, [pc, #376]	; (8001838 <SysTick_Handler+0x1b0>)
 80016be:	88db      	ldrh	r3, [r3, #6]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b5e      	ldr	r3, [pc, #376]	; (800183c <SysTick_Handler+0x1b4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	da05      	bge.n	80016d6 <SysTick_Handler+0x4e>
		{
			mb_eth._w_answer=0;
 80016ca:	4b5b      	ldr	r3, [pc, #364]	; (8001838 <SysTick_Handler+0x1b0>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	721a      	strb	r2, [r3, #8]
			MB_TOUT_ticks=0;
 80016d0:	4b5a      	ldr	r3, [pc, #360]	; (800183c <SysTick_Handler+0x1b4>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
		}

// ENVIO DATOS LoRa ---------------------------------------------------------------//

	if(lr.tmr_dly_en==1)
 80016d6:	4b5a      	ldr	r3, [pc, #360]	; (8001840 <SysTick_Handler+0x1b8>)
 80016d8:	f893 37ed 	ldrb.w	r3, [r3, #2029]	; 0x7ed
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d116      	bne.n	800170e <SysTick_Handler+0x86>
	{
		lr.tmr_dlyCNT++;
 80016e0:	4b57      	ldr	r3, [pc, #348]	; (8001840 <SysTick_Handler+0x1b8>)
 80016e2:	f8d3 37f4 	ldr.w	r3, [r3, #2036]	; 0x7f4
 80016e6:	3301      	adds	r3, #1
 80016e8:	4a55      	ldr	r2, [pc, #340]	; (8001840 <SysTick_Handler+0x1b8>)
 80016ea:	f8c2 37f4 	str.w	r3, [r2, #2036]	; 0x7f4
		if(lr.tmr_dlyCNT > lr.tmr_dly)
 80016ee:	4b54      	ldr	r3, [pc, #336]	; (8001840 <SysTick_Handler+0x1b8>)
 80016f0:	f8d3 27f4 	ldr.w	r2, [r3, #2036]	; 0x7f4
 80016f4:	4b52      	ldr	r3, [pc, #328]	; (8001840 <SysTick_Handler+0x1b8>)
 80016f6:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dd07      	ble.n	800170e <SysTick_Handler+0x86>
		{
			lr.tmr_dly_ON=1;
 80016fe:	4b50      	ldr	r3, [pc, #320]	; (8001840 <SysTick_Handler+0x1b8>)
 8001700:	2201      	movs	r2, #1
 8001702:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
			lr.tmr_dly_en=0;
 8001706:	4b4e      	ldr	r3, [pc, #312]	; (8001840 <SysTick_Handler+0x1b8>)
 8001708:	2200      	movs	r2, #0
 800170a:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		}
	}
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 800170e:	4b4d      	ldr	r3, [pc, #308]	; (8001844 <SysTick_Handler+0x1bc>)
 8001710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001714:	f240 2261 	movw	r2, #609	; 0x261
 8001718:	4293      	cmp	r3, r2
 800171a:	d005      	beq.n	8001728 <SysTick_Handler+0xa0>
 800171c:	4b49      	ldr	r3, [pc, #292]	; (8001844 <SysTick_Handler+0x1bc>)
 800171e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001722:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001726:	d109      	bne.n	800173c <SysTick_Handler+0xb4>
 8001728:	4b46      	ldr	r3, [pc, #280]	; (8001844 <SysTick_Handler+0x1bc>)
 800172a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800172e:	2b00      	cmp	r3, #0
 8001730:	d104      	bne.n	800173c <SysTick_Handler+0xb4>
 8001732:	4b45      	ldr	r3, [pc, #276]	; (8001848 <SysTick_Handler+0x1c0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	4a43      	ldr	r2, [pc, #268]	; (8001848 <SysTick_Handler+0x1c0>)
 800173a:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 2000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;
 800173c:	4b42      	ldr	r3, [pc, #264]	; (8001848 <SysTick_Handler+0x1c0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001744:	db0c      	blt.n	8001760 <SysTick_Handler+0xd8>
 8001746:	4b3f      	ldr	r3, [pc, #252]	; (8001844 <SysTick_Handler+0x1bc>)
 8001748:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 800174c:	2b01      	cmp	r3, #1
 800174e:	d007      	beq.n	8001760 <SysTick_Handler+0xd8>
 8001750:	4b3c      	ldr	r3, [pc, #240]	; (8001844 <SysTick_Handler+0x1bc>)
 8001752:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001756:	2b00      	cmp	r3, #0
 8001758:	d102      	bne.n	8001760 <SysTick_Handler+0xd8>
 800175a:	4b3c      	ldr	r3, [pc, #240]	; (800184c <SysTick_Handler+0x1c4>)
 800175c:	2201      	movs	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S0_status == 0)
 8001760:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <SysTick_Handler+0x1c8>)
 8001762:	7b9b      	ldrb	r3, [r3, #14]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10e      	bne.n	8001786 <SysTick_Handler+0xfe>
	{
		ETH.ETH_WDG++;
 8001768:	4b39      	ldr	r3, [pc, #228]	; (8001850 <SysTick_Handler+0x1c8>)
 800176a:	899b      	ldrh	r3, [r3, #12]
 800176c:	3301      	adds	r3, #1
 800176e:	b29a      	uxth	r2, r3
 8001770:	4b37      	ldr	r3, [pc, #220]	; (8001850 <SysTick_Handler+0x1c8>)
 8001772:	819a      	strh	r2, [r3, #12]
		if (ETH.ETH_WDG>=64000)
 8001774:	4b36      	ldr	r3, [pc, #216]	; (8001850 <SysTick_Handler+0x1c8>)
 8001776:	899b      	ldrh	r3, [r3, #12]
 8001778:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 800177c:	d303      	bcc.n	8001786 <SysTick_Handler+0xfe>
		{
			ETH.ETH_WDG=64000;
 800177e:	4b34      	ldr	r3, [pc, #208]	; (8001850 <SysTick_Handler+0x1c8>)
 8001780:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001784:	819a      	strh	r2, [r3, #12]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 8001786:	4b2a      	ldr	r3, [pc, #168]	; (8001830 <SysTick_Handler+0x1a8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	f040 8420 	bne.w	8001fd0 <SysTick_Handler+0x948>
  {
	  dbgn++;
 8001790:	4b30      	ldr	r3, [pc, #192]	; (8001854 <SysTick_Handler+0x1cc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	4a2f      	ldr	r2, [pc, #188]	; (8001854 <SysTick_Handler+0x1cc>)
 8001798:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 800179a:	4b25      	ldr	r3, [pc, #148]	; (8001830 <SysTick_Handler+0x1a8>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 80017a0:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <SysTick_Handler+0x1d0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	4a2c      	ldr	r2, [pc, #176]	; (8001858 <SysTick_Handler+0x1d0>)
 80017a8:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 80017aa:	4b2c      	ldr	r3, [pc, #176]	; (800185c <SysTick_Handler+0x1d4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80017b2:	d102      	bne.n	80017ba <SysTick_Handler+0x132>
 80017b4:	4b29      	ldr	r3, [pc, #164]	; (800185c <SysTick_Handler+0x1d4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 80017ba:	4b29      	ldr	r3, [pc, #164]	; (8001860 <SysTick_Handler+0x1d8>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d104      	bne.n	80017cc <SysTick_Handler+0x144>
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <SysTick_Handler+0x1d4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	4a24      	ldr	r2, [pc, #144]	; (800185c <SysTick_Handler+0x1d4>)
 80017ca:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 80017cc:	4b23      	ldr	r3, [pc, #140]	; (800185c <SysTick_Handler+0x1d4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b64      	cmp	r3, #100	; 0x64
 80017d2:	d102      	bne.n	80017da <SysTick_Handler+0x152>
 80017d4:	4b22      	ldr	r3, [pc, #136]	; (8001860 <SysTick_Handler+0x1d8>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 80017da:	4b21      	ldr	r3, [pc, #132]	; (8001860 <SysTick_Handler+0x1d8>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d104      	bne.n	80017ec <SysTick_Handler+0x164>
 80017e2:	4b1e      	ldr	r3, [pc, #120]	; (800185c <SysTick_Handler+0x1d4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	4a1c      	ldr	r2, [pc, #112]	; (800185c <SysTick_Handler+0x1d4>)
 80017ea:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <SysTick_Handler+0x1d4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <SysTick_Handler+0x172>
 80017f4:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <SysTick_Handler+0x1d8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]


	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80017fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017fe:	4819      	ldr	r0, [pc, #100]	; (8001864 <SysTick_Handler+0x1dc>)
 8001800:	f001 fef1 	bl	80035e6 <HAL_GPIO_TogglePin>
	  if(spi_no_debug)
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <SysTick_Handler+0x1e0>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 83d1 	beq.w	8001fb0 <SysTick_Handler+0x928>
	  	  {
	  if(SPI_READ_EN)
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <SysTick_Handler+0x1e4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 83d0 	beq.w	8001fb8 <SysTick_Handler+0x930>
	  {
	     ETH.S0_status=eth_rd_SOCKET_STAT(&ETH,0);
 8001818:	2100      	movs	r1, #0
 800181a:	480d      	ldr	r0, [pc, #52]	; (8001850 <SysTick_Handler+0x1c8>)
 800181c:	f00c ff16 	bl	800e64c <eth_rd_SOCKET_STAT>
 8001820:	4603      	mov	r3, r0
 8001822:	461a      	mov	r2, r3
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <SysTick_Handler+0x1c8>)
 8001826:	739a      	strb	r2, [r3, #14]

		  switch(ETH.S0_status)	//Check Socket status
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <SysTick_Handler+0x1c8>)
 800182a:	7b9b      	ldrb	r3, [r3, #14]
 800182c:	e020      	b.n	8001870 <SysTick_Handler+0x1e8>
 800182e:	bf00      	nop
 8001830:	20000348 	.word	0x20000348
 8001834:	20004030 	.word	0x20004030
 8001838:	200018ac 	.word	0x200018ac
 800183c:	20004038 	.word	0x20004038
 8001840:	20000350 	.word	0x20000350
 8001844:	20000b58 	.word	0x20000b58
 8001848:	20002950 	.word	0x20002950
 800184c:	2000294d 	.word	0x2000294d
 8001850:	20002954 	.word	0x20002954
 8001854:	2000405c 	.word	0x2000405c
 8001858:	2000034c 	.word	0x2000034c
 800185c:	20004034 	.word	0x20004034
 8001860:	20003a12 	.word	0x20003a12
 8001864:	40020800 	.word	0x40020800
 8001868:	20003a04 	.word	0x20003a04
 800186c:	20003a14 	.word	0x20003a14
 8001870:	2b5f      	cmp	r3, #95	; 0x5f
 8001872:	f200 83a6 	bhi.w	8001fc2 <SysTick_Handler+0x93a>
 8001876:	a201      	add	r2, pc, #4	; (adr r2, 800187c <SysTick_Handler+0x1f4>)
 8001878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187c:	080019fd 	.word	0x080019fd
 8001880:	08001fc3 	.word	0x08001fc3
 8001884:	08001fc3 	.word	0x08001fc3
 8001888:	08001fc3 	.word	0x08001fc3
 800188c:	08001fc3 	.word	0x08001fc3
 8001890:	08001fc3 	.word	0x08001fc3
 8001894:	08001fc3 	.word	0x08001fc3
 8001898:	08001fc3 	.word	0x08001fc3
 800189c:	08001fc3 	.word	0x08001fc3
 80018a0:	08001fc3 	.word	0x08001fc3
 80018a4:	08001fc3 	.word	0x08001fc3
 80018a8:	08001fc3 	.word	0x08001fc3
 80018ac:	08001fc3 	.word	0x08001fc3
 80018b0:	08001fc3 	.word	0x08001fc3
 80018b4:	08001fc3 	.word	0x08001fc3
 80018b8:	08001fc3 	.word	0x08001fc3
 80018bc:	08001fc3 	.word	0x08001fc3
 80018c0:	08001fc3 	.word	0x08001fc3
 80018c4:	08001fc3 	.word	0x08001fc3
 80018c8:	08001a35 	.word	0x08001a35
 80018cc:	08001a87 	.word	0x08001a87
 80018d0:	08001a9f 	.word	0x08001a9f
 80018d4:	08001ab7 	.word	0x08001ab7
 80018d8:	08001acf 	.word	0x08001acf
 80018dc:	08001e2b 	.word	0x08001e2b
 80018e0:	08001fc3 	.word	0x08001fc3
 80018e4:	08001e43 	.word	0x08001e43
 80018e8:	08001e5b 	.word	0x08001e5b
 80018ec:	08001e99 	.word	0x08001e99
 80018f0:	08001ed7 	.word	0x08001ed7
 80018f4:	08001fc3 	.word	0x08001fc3
 80018f8:	08001fc3 	.word	0x08001fc3
 80018fc:	08001fc3 	.word	0x08001fc3
 8001900:	08001fc3 	.word	0x08001fc3
 8001904:	08001eef 	.word	0x08001eef
 8001908:	08001fc3 	.word	0x08001fc3
 800190c:	08001fc3 	.word	0x08001fc3
 8001910:	08001fc3 	.word	0x08001fc3
 8001914:	08001fc3 	.word	0x08001fc3
 8001918:	08001fc3 	.word	0x08001fc3
 800191c:	08001fc3 	.word	0x08001fc3
 8001920:	08001fc3 	.word	0x08001fc3
 8001924:	08001fc3 	.word	0x08001fc3
 8001928:	08001fc3 	.word	0x08001fc3
 800192c:	08001fc3 	.word	0x08001fc3
 8001930:	08001fc3 	.word	0x08001fc3
 8001934:	08001fc3 	.word	0x08001fc3
 8001938:	08001fc3 	.word	0x08001fc3
 800193c:	08001fc3 	.word	0x08001fc3
 8001940:	08001fc3 	.word	0x08001fc3
 8001944:	08001f69 	.word	0x08001f69
 8001948:	08001fc3 	.word	0x08001fc3
 800194c:	08001fc3 	.word	0x08001fc3
 8001950:	08001fc3 	.word	0x08001fc3
 8001954:	08001fc3 	.word	0x08001fc3
 8001958:	08001fc3 	.word	0x08001fc3
 800195c:	08001fc3 	.word	0x08001fc3
 8001960:	08001fc3 	.word	0x08001fc3
 8001964:	08001fc3 	.word	0x08001fc3
 8001968:	08001fc3 	.word	0x08001fc3
 800196c:	08001fc3 	.word	0x08001fc3
 8001970:	08001fc3 	.word	0x08001fc3
 8001974:	08001fc3 	.word	0x08001fc3
 8001978:	08001fc3 	.word	0x08001fc3
 800197c:	08001fc3 	.word	0x08001fc3
 8001980:	08001fc3 	.word	0x08001fc3
 8001984:	08001f81 	.word	0x08001f81
 8001988:	08001fc3 	.word	0x08001fc3
 800198c:	08001fc3 	.word	0x08001fc3
 8001990:	08001fc3 	.word	0x08001fc3
 8001994:	08001fc3 	.word	0x08001fc3
 8001998:	08001fc3 	.word	0x08001fc3
 800199c:	08001fc3 	.word	0x08001fc3
 80019a0:	08001fc3 	.word	0x08001fc3
 80019a4:	08001fc3 	.word	0x08001fc3
 80019a8:	08001fc3 	.word	0x08001fc3
 80019ac:	08001fc3 	.word	0x08001fc3
 80019b0:	08001fc3 	.word	0x08001fc3
 80019b4:	08001fc3 	.word	0x08001fc3
 80019b8:	08001fc3 	.word	0x08001fc3
 80019bc:	08001fc3 	.word	0x08001fc3
 80019c0:	08001fc3 	.word	0x08001fc3
 80019c4:	08001fc3 	.word	0x08001fc3
 80019c8:	08001fc3 	.word	0x08001fc3
 80019cc:	08001fc3 	.word	0x08001fc3
 80019d0:	08001fc3 	.word	0x08001fc3
 80019d4:	08001fc3 	.word	0x08001fc3
 80019d8:	08001fc3 	.word	0x08001fc3
 80019dc:	08001fc3 	.word	0x08001fc3
 80019e0:	08001fc3 	.word	0x08001fc3
 80019e4:	08001fc3 	.word	0x08001fc3
 80019e8:	08001fc3 	.word	0x08001fc3
 80019ec:	08001fc3 	.word	0x08001fc3
 80019f0:	08001fc3 	.word	0x08001fc3
 80019f4:	08001fc3 	.word	0x08001fc3
 80019f8:	08001f99 	.word	0x08001f99
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 80019fc:	4b82      	ldr	r3, [pc, #520]	; (8001c08 <SysTick_Handler+0x580>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <SysTick_Handler+0x384>
 8001a04:	2113      	movs	r1, #19
 8001a06:	4881      	ldr	r0, [pc, #516]	; (8001c0c <SysTick_Handler+0x584>)
 8001a08:	f7ff fe22 	bl	8001650 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH, 0 ,OPEN );
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	2100      	movs	r1, #0
 8001a10:	487f      	ldr	r0, [pc, #508]	; (8001c10 <SysTick_Handler+0x588>)
 8001a12:	f00c fce9 	bl	800e3e8 <eth_wr_SOCKET_CMD>
					 // Si no tengo intento de ARP por 5 segundos vuelvo a inicializar
					 if(ETH.ETH_WDG>=5000)
 8001a16:	4b7e      	ldr	r3, [pc, #504]	; (8001c10 <SysTick_Handler+0x588>)
 8001a18:	899b      	ldrh	r3, [r3, #12]
 8001a1a:	f241 3287 	movw	r2, #4999	; 0x1387
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	f240 82cc 	bls.w	8001fbc <SysTick_Handler+0x934>
					 {
						 eth_init(&ETH);
 8001a24:	487a      	ldr	r0, [pc, #488]	; (8001c10 <SysTick_Handler+0x588>)
 8001a26:	f00c fd1b 	bl	800e460 <eth_init>

						 eth_socket_init(&ETH,0);
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4878      	ldr	r0, [pc, #480]	; (8001c10 <SysTick_Handler+0x588>)
 8001a2e:	f00c fd91 	bl	800e554 <eth_socket_init>
					 }

				 }
			 break;
 8001a32:	e2c3      	b.n	8001fbc <SysTick_Handler+0x934>
			 case  SOCK_INIT :
				 {
					 if(ETH.S0_ENserver == 1)
 8001a34:	4b76      	ldr	r3, [pc, #472]	; (8001c10 <SysTick_Handler+0x588>)
 8001a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d110      	bne.n	8001a64 <SysTick_Handler+0x3dc>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 8001a42:	4b71      	ldr	r3, [pc, #452]	; (8001c08 <SysTick_Handler+0x580>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <SysTick_Handler+0x3ca>
 8001a4a:	2111      	movs	r1, #17
 8001a4c:	4871      	ldr	r0, [pc, #452]	; (8001c14 <SysTick_Handler+0x58c>)
 8001a4e:	f7ff fdff 	bl	8001650 <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, 0, LISTEN );
 8001a52:	2202      	movs	r2, #2
 8001a54:	2100      	movs	r1, #0
 8001a56:	486e      	ldr	r0, [pc, #440]	; (8001c10 <SysTick_Handler+0x588>)
 8001a58:	f00c fcc6 	bl	800e3e8 <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 8001a5c:	4b6c      	ldr	r3, [pc, #432]	; (8001c10 <SysTick_Handler+0x588>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	819a      	strh	r2, [r3, #12]
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 8001a62:	e2ae      	b.n	8001fc2 <SysTick_Handler+0x93a>
						 	eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
 8001a64:	2204      	movs	r2, #4
 8001a66:	2100      	movs	r1, #0
 8001a68:	4869      	ldr	r0, [pc, #420]	; (8001c10 <SysTick_Handler+0x588>)
 8001a6a:	f00c fcbd 	bl	800e3e8 <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
 8001a6e:	4b66      	ldr	r3, [pc, #408]	; (8001c08 <SysTick_Handler+0x580>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <SysTick_Handler+0x3f6>
 8001a76:	2115      	movs	r1, #21
 8001a78:	4867      	ldr	r0, [pc, #412]	; (8001c18 <SysTick_Handler+0x590>)
 8001a7a:	f7ff fde9 	bl	8001650 <ITM0_Write>
						 	ETH.ETH_WDG=0;
 8001a7e:	4b64      	ldr	r3, [pc, #400]	; (8001c10 <SysTick_Handler+0x588>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	819a      	strh	r2, [r3, #12]
			 break;
 8001a84:	e29d      	b.n	8001fc2 <SysTick_Handler+0x93a>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 8001a86:	4b60      	ldr	r3, [pc, #384]	; (8001c08 <SysTick_Handler+0x580>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <SysTick_Handler+0x40e>
 8001a8e:	2113      	movs	r1, #19
 8001a90:	4862      	ldr	r0, [pc, #392]	; (8001c1c <SysTick_Handler+0x594>)
 8001a92:	f7ff fddd 	bl	8001650 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a96:	4b5e      	ldr	r3, [pc, #376]	; (8001c10 <SysTick_Handler+0x588>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001a9c:	e291      	b.n	8001fc2 <SysTick_Handler+0x93a>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 8001a9e:	4b5a      	ldr	r3, [pc, #360]	; (8001c08 <SysTick_Handler+0x580>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <SysTick_Handler+0x426>
 8001aa6:	2114      	movs	r1, #20
 8001aa8:	485d      	ldr	r0, [pc, #372]	; (8001c20 <SysTick_Handler+0x598>)
 8001aaa:	f7ff fdd1 	bl	8001650 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001aae:	4b58      	ldr	r3, [pc, #352]	; (8001c10 <SysTick_Handler+0x588>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ab4:	e285      	b.n	8001fc2 <SysTick_Handler+0x93a>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 8001ab6:	4b54      	ldr	r3, [pc, #336]	; (8001c08 <SysTick_Handler+0x580>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <SysTick_Handler+0x43e>
 8001abe:	2114      	movs	r1, #20
 8001ac0:	4858      	ldr	r0, [pc, #352]	; (8001c24 <SysTick_Handler+0x59c>)
 8001ac2:	f7ff fdc5 	bl	8001650 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001ac6:	4b52      	ldr	r3, [pc, #328]	; (8001c10 <SysTick_Handler+0x588>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001acc:	e279      	b.n	8001fc2 <SysTick_Handler+0x93a>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 8001ace:	4b4e      	ldr	r3, [pc, #312]	; (8001c08 <SysTick_Handler+0x580>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <SysTick_Handler+0x456>
 8001ad6:	2118      	movs	r1, #24
 8001ad8:	4853      	ldr	r0, [pc, #332]	; (8001c28 <SysTick_Handler+0x5a0>)
 8001ada:	f7ff fdb9 	bl	8001650 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001ade:	4b4c      	ldr	r3, [pc, #304]	; (8001c10 <SysTick_Handler+0x588>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	819a      	strh	r2, [r3, #12]

					if (ETH.S0_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 8001ae4:	4b4a      	ldr	r3, [pc, #296]	; (8001c10 <SysTick_Handler+0x588>)
 8001ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	f040 80b0 	bne.w	8001c54 <SysTick_Handler+0x5cc>
					{

							S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001af4:	2302      	movs	r3, #2
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	4b4c      	ldr	r3, [pc, #304]	; (8001c2c <SysTick_Handler+0x5a4>)
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	230f      	movs	r3, #15
 8001afe:	2226      	movs	r2, #38	; 0x26
 8001b00:	2104      	movs	r1, #4
 8001b02:	4843      	ldr	r0, [pc, #268]	; (8001c10 <SysTick_Handler+0x588>)
 8001b04:	f00c fb45 	bl	800e192 <SPI_ETH_REG>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4b48      	ldr	r3, [pc, #288]	; (8001c30 <SysTick_Handler+0x5a8>)
 8001b0e:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001b10:	4b47      	ldr	r3, [pc, #284]	; (8001c30 <SysTick_Handler+0x5a8>)
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 8253 	beq.w	8001fc0 <SysTick_Handler+0x938>
							{
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001b1a:	4b45      	ldr	r3, [pc, #276]	; (8001c30 <SysTick_Handler+0x5a8>)
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	4a45      	ldr	r2, [pc, #276]	; (8001c34 <SysTick_Handler+0x5ac>)
 8001b20:	2100      	movs	r1, #0
 8001b22:	483b      	ldr	r0, [pc, #236]	; (8001c10 <SysTick_Handler+0x588>)
 8001b24:	f00c fdcc 	bl	800e6c0 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001b28:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <SysTick_Handler+0x5ac>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001b32:	4837      	ldr	r0, [pc, #220]	; (8001c10 <SysTick_Handler+0x588>)
 8001b34:	f00c fba5 	bl	800e282 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001b38:	2240      	movs	r2, #64	; 0x40
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4834      	ldr	r0, [pc, #208]	; (8001c10 <SysTick_Handler+0x588>)
 8001b3e:	f00c fc53 	bl	800e3e8 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001b42:	bf00      	nop
 8001b44:	2100      	movs	r1, #0
 8001b46:	4832      	ldr	r0, [pc, #200]	; (8001c10 <SysTick_Handler+0x588>)
 8001b48:	f00c fd9d 	bl	800e686 <eth_rd_SOCKET_CMD>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f8      	bne.n	8001b44 <SysTick_Handler+0x4bc>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001b52:	4b37      	ldr	r3, [pc, #220]	; (8001c30 <SysTick_Handler+0x5a8>)
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	2300      	movs	r3, #0
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	4936      	ldr	r1, [pc, #216]	; (8001c38 <SysTick_Handler+0x5b0>)
 8001b60:	4836      	ldr	r0, [pc, #216]	; (8001c3c <SysTick_Handler+0x5b4>)
 8001b62:	f00d fadd 	bl	800f120 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001b66:	4b32      	ldr	r3, [pc, #200]	; (8001c30 <SysTick_Handler+0x5a8>)
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <SysTick_Handler+0x5b8>)
 8001b6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}					//Flag data received
 8001b72:	4b2f      	ldr	r3, [pc, #188]	; (8001c30 <SysTick_Handler+0x5a8>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <SysTick_Handler+0x4f8>
 8001b7a:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <SysTick_Handler+0x588>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	749a      	strb	r2, [r3, #18]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001b80:	4b2f      	ldr	r3, [pc, #188]	; (8001c40 <SysTick_Handler+0x5b8>)
 8001b82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001b86:	4619      	mov	r1, r3
 8001b88:	482c      	ldr	r0, [pc, #176]	; (8001c3c <SysTick_Handler+0x5b4>)
 8001b8a:	f00a ffef 	bl	800cb6c <ModBUS_Check>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00d      	beq.n	8001bb0 <SysTick_Handler+0x528>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001b94:	482a      	ldr	r0, [pc, #168]	; (8001c40 <SysTick_Handler+0x5b8>)
 8001b96:	f00b f8eb 	bl	800cd70 <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 8001b9a:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <SysTick_Handler+0x5b8>)
 8001b9c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	4927      	ldr	r1, [pc, #156]	; (8001c44 <SysTick_Handler+0x5bc>)
 8001ba8:	4823      	ldr	r0, [pc, #140]	; (8001c38 <SysTick_Handler+0x5b0>)
 8001baa:	f00d fab9 	bl	800f120 <CopiaVector>
 8001bae:	e007      	b.n	8001bc0 <SysTick_Handler+0x538>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <SysTick_Handler+0x580>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <SysTick_Handler+0x538>
 8001bb8:	2111      	movs	r1, #17
 8001bba:	4823      	ldr	r0, [pc, #140]	; (8001c48 <SysTick_Handler+0x5c0>)
 8001bbc:	f7ff fd48 	bl	8001650 <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001bc0:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <SysTick_Handler+0x5b8>)
 8001bc2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <SysTick_Handler+0x5c4>)
 8001bca:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001bcc:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <SysTick_Handler+0x5c4>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	4a1f      	ldr	r2, [pc, #124]	; (8001c50 <SysTick_Handler+0x5c8>)
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	480e      	ldr	r0, [pc, #56]	; (8001c10 <SysTick_Handler+0x588>)
 8001bd6:	f00c fe43 	bl	800e860 <eth_wr_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001bda:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <SysTick_Handler+0x5c8>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	f240 4124 	movw	r1, #1060	; 0x424
 8001be4:	480a      	ldr	r0, [pc, #40]	; (8001c10 <SysTick_Handler+0x588>)
 8001be6:	f00c fb4c 	bl	800e282 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001bea:	2220      	movs	r2, #32
 8001bec:	2100      	movs	r1, #0
 8001bee:	4808      	ldr	r0, [pc, #32]	; (8001c10 <SysTick_Handler+0x588>)
 8001bf0:	f00c fbfa 	bl	800e3e8 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001bf4:	bf00      	nop
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4805      	ldr	r0, [pc, #20]	; (8001c10 <SysTick_Handler+0x588>)
 8001bfa:	f00c fd44 	bl	800e686 <eth_rd_SOCKET_CMD>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f8      	bne.n	8001bf6 <SysTick_Handler+0x56e>

							}
						}
					}
				 }
			 break;
 8001c04:	e1dc      	b.n	8001fc0 <SysTick_Handler+0x938>
 8001c06:	bf00      	nop
 8001c08:	2000294c 	.word	0x2000294c
 8001c0c:	08010830 	.word	0x08010830
 8001c10:	20002954 	.word	0x20002954
 8001c14:	08010844 	.word	0x08010844
 8001c18:	08010858 	.word	0x08010858
 8001c1c:	08010870 	.word	0x08010870
 8001c20:	08010884 	.word	0x08010884
 8001c24:	0801089c 	.word	0x0801089c
 8001c28:	080108b4 	.word	0x080108b4
 8001c2c:	200039c4 	.word	0x200039c4
 8001c30:	200039bc 	.word	0x200039bc
 8001c34:	200039c0 	.word	0x200039c0
 8001c38:	20002970 	.word	0x20002970
 8001c3c:	200018be 	.word	0x200018be
 8001c40:	200018ac 	.word	0x200018ac
 8001c44:	20001ac4 	.word	0x20001ac4
 8001c48:	080108d0 	.word	0x080108d0
 8001c4c:	200039c2 	.word	0x200039c2
 8001c50:	200039be 	.word	0x200039be
						if (mb_eth._w_answer==0)
 8001c54:	4bac      	ldr	r3, [pc, #688]	; (8001f08 <SysTick_Handler+0x880>)
 8001c56:	7a1b      	ldrb	r3, [r3, #8]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d167      	bne.n	8001d2c <SysTick_Handler+0x6a4>
							ETH.data[0]=0x00;
 8001c5c:	4bab      	ldr	r3, [pc, #684]	; (8001f0c <SysTick_Handler+0x884>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	771a      	strb	r2, [r3, #28]
							ETH.data[1]=0x00;
 8001c62:	4baa      	ldr	r3, [pc, #680]	; (8001f0c <SysTick_Handler+0x884>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	775a      	strb	r2, [r3, #29]
							ETH.data[2]=0x00;
 8001c68:	4ba8      	ldr	r3, [pc, #672]	; (8001f0c <SysTick_Handler+0x884>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	779a      	strb	r2, [r3, #30]
							ETH.data[3]=0x00;
 8001c6e:	4ba7      	ldr	r3, [pc, #668]	; (8001f0c <SysTick_Handler+0x884>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	77da      	strb	r2, [r3, #31]
							ETH.data[4]=0x00;
 8001c74:	4ba5      	ldr	r3, [pc, #660]	; (8001f0c <SysTick_Handler+0x884>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2020 	strb.w	r2, [r3, #32]
							ETH.data[5]=0x06;
 8001c7c:	4ba3      	ldr	r3, [pc, #652]	; (8001f0c <SysTick_Handler+0x884>)
 8001c7e:	2206      	movs	r2, #6
 8001c80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
							ETH.data[6]=0x01;
 8001c84:	4ba1      	ldr	r3, [pc, #644]	; (8001f0c <SysTick_Handler+0x884>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
							ETH.data[7]=0x03;
 8001c8c:	4b9f      	ldr	r3, [pc, #636]	; (8001f0c <SysTick_Handler+0x884>)
 8001c8e:	2203      	movs	r2, #3
 8001c90:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							ETH.data[8]=0x00;
 8001c94:	4b9d      	ldr	r3, [pc, #628]	; (8001f0c <SysTick_Handler+0x884>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[9]=0x00;
 8001c9c:	4b9b      	ldr	r3, [pc, #620]	; (8001f0c <SysTick_Handler+0x884>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[10]=0x00;
 8001ca4:	4b99      	ldr	r3, [pc, #612]	; (8001f0c <SysTick_Handler+0x884>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[11]=0x0A;
 8001cac:	4b97      	ldr	r3, [pc, #604]	; (8001f0c <SysTick_Handler+0x884>)
 8001cae:	220a      	movs	r2, #10
 8001cb0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							send_size=12;
 8001cb4:	4b96      	ldr	r3, [pc, #600]	; (8001f10 <SysTick_Handler+0x888>)
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 8001cba:	220f      	movs	r2, #15
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4892      	ldr	r0, [pc, #584]	; (8001f08 <SysTick_Handler+0x880>)
 8001cc0:	f00a ffff 	bl	800ccc2 <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	220c      	movs	r2, #12
 8001ccc:	4991      	ldr	r1, [pc, #580]	; (8001f14 <SysTick_Handler+0x88c>)
 8001cce:	4892      	ldr	r0, [pc, #584]	; (8001f18 <SysTick_Handler+0x890>)
 8001cd0:	f00d fa26 	bl	800f120 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001cd4:	4b8e      	ldr	r3, [pc, #568]	; (8001f10 <SysTick_Handler+0x888>)
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	4a90      	ldr	r2, [pc, #576]	; (8001f1c <SysTick_Handler+0x894>)
 8001cda:	2100      	movs	r1, #0
 8001cdc:	488b      	ldr	r0, [pc, #556]	; (8001f0c <SysTick_Handler+0x884>)
 8001cde:	f00c fdbf 	bl	800e860 <eth_wr_SOCKET_DATA>
							SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001ce2:	4b8e      	ldr	r3, [pc, #568]	; (8001f1c <SysTick_Handler+0x894>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f240 4124 	movw	r1, #1060	; 0x424
 8001cec:	4887      	ldr	r0, [pc, #540]	; (8001f0c <SysTick_Handler+0x884>)
 8001cee:	f00c fac8 	bl	800e282 <SPI_ETH_WR_REG_16>
							eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4885      	ldr	r0, [pc, #532]	; (8001f0c <SysTick_Handler+0x884>)
 8001cf8:	f00c fb76 	bl	800e3e8 <eth_wr_SOCKET_CMD>
							while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001cfc:	bf00      	nop
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4882      	ldr	r0, [pc, #520]	; (8001f0c <SysTick_Handler+0x884>)
 8001d02:	f00c fcc0 	bl	800e686 <eth_rd_SOCKET_CMD>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f8      	bne.n	8001cfe <SysTick_Handler+0x676>
							mb_eth._w_answer=1;	// Waiting answer flag
 8001d0c:	4b7e      	ldr	r3, [pc, #504]	; (8001f08 <SysTick_Handler+0x880>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	721a      	strb	r2, [r3, #8]
							MB_TOUT_ticks=0;	// restart counting
 8001d12:	4b83      	ldr	r3, [pc, #524]	; (8001f20 <SysTick_Handler+0x898>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001d18:	4b82      	ldr	r3, [pc, #520]	; (8001f24 <SysTick_Handler+0x89c>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 814f 	beq.w	8001fc0 <SysTick_Handler+0x938>
 8001d22:	2117      	movs	r1, #23
 8001d24:	4880      	ldr	r0, [pc, #512]	; (8001f28 <SysTick_Handler+0x8a0>)
 8001d26:	f7ff fc93 	bl	8001650 <ITM0_Write>
			 break;
 8001d2a:	e149      	b.n	8001fc0 <SysTick_Handler+0x938>
						S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	9301      	str	r3, [sp, #4]
 8001d30:	4b7e      	ldr	r3, [pc, #504]	; (8001f2c <SysTick_Handler+0x8a4>)
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	230f      	movs	r3, #15
 8001d36:	2226      	movs	r2, #38	; 0x26
 8001d38:	2104      	movs	r1, #4
 8001d3a:	4874      	ldr	r0, [pc, #464]	; (8001f0c <SysTick_Handler+0x884>)
 8001d3c:	f00c fa29 	bl	800e192 <SPI_ETH_REG>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
 8001d44:	4b7a      	ldr	r3, [pc, #488]	; (8001f30 <SysTick_Handler+0x8a8>)
 8001d46:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001d48:	4b79      	ldr	r3, [pc, #484]	; (8001f30 <SysTick_Handler+0x8a8>)
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 8137 	beq.w	8001fc0 <SysTick_Handler+0x938>
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001d52:	4b77      	ldr	r3, [pc, #476]	; (8001f30 <SysTick_Handler+0x8a8>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	4a77      	ldr	r2, [pc, #476]	; (8001f34 <SysTick_Handler+0x8ac>)
 8001d58:	2100      	movs	r1, #0
 8001d5a:	486c      	ldr	r0, [pc, #432]	; (8001f0c <SysTick_Handler+0x884>)
 8001d5c:	f00c fcb0 	bl	800e6c0 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001d60:	4b74      	ldr	r3, [pc, #464]	; (8001f34 <SysTick_Handler+0x8ac>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001d6a:	4868      	ldr	r0, [pc, #416]	; (8001f0c <SysTick_Handler+0x884>)
 8001d6c:	f00c fa89 	bl	800e282 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001d70:	2240      	movs	r2, #64	; 0x40
 8001d72:	2100      	movs	r1, #0
 8001d74:	4865      	ldr	r0, [pc, #404]	; (8001f0c <SysTick_Handler+0x884>)
 8001d76:	f00c fb37 	bl	800e3e8 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001d7a:	bf00      	nop
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4863      	ldr	r0, [pc, #396]	; (8001f0c <SysTick_Handler+0x884>)
 8001d80:	f00c fc81 	bl	800e686 <eth_rd_SOCKET_CMD>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f8      	bne.n	8001d7c <SysTick_Handler+0x6f4>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001d8a:	4b69      	ldr	r3, [pc, #420]	; (8001f30 <SysTick_Handler+0x8a8>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2300      	movs	r3, #0
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	2300      	movs	r3, #0
 8001d96:	4960      	ldr	r1, [pc, #384]	; (8001f18 <SysTick_Handler+0x890>)
 8001d98:	4867      	ldr	r0, [pc, #412]	; (8001f38 <SysTick_Handler+0x8b0>)
 8001d9a:	f00d f9c1 	bl	800f120 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001d9e:	4b64      	ldr	r3, [pc, #400]	; (8001f30 <SysTick_Handler+0x8a8>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	4b58      	ldr	r3, [pc, #352]	; (8001f08 <SysTick_Handler+0x880>)
 8001da6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}
 8001daa:	4b61      	ldr	r3, [pc, #388]	; (8001f30 <SysTick_Handler+0x8a8>)
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d002      	beq.n	8001db8 <SysTick_Handler+0x730>
 8001db2:	4b56      	ldr	r3, [pc, #344]	; (8001f0c <SysTick_Handler+0x884>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	749a      	strb	r2, [r3, #18]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001db8:	4b53      	ldr	r3, [pc, #332]	; (8001f08 <SysTick_Handler+0x880>)
 8001dba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	485d      	ldr	r0, [pc, #372]	; (8001f38 <SysTick_Handler+0x8b0>)
 8001dc2:	f00a fed3 	bl	800cb6c <ModBUS_Check>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d024      	beq.n	8001e16 <SysTick_Handler+0x78e>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001dcc:	4b4e      	ldr	r3, [pc, #312]	; (8001f08 <SysTick_Handler+0x880>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	721a      	strb	r2, [r3, #8]
										MB_TOUT_ticks=0;
 8001dd2:	4b53      	ldr	r3, [pc, #332]	; (8001f20 <SysTick_Handler+0x898>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001dd8:	484b      	ldr	r0, [pc, #300]	; (8001f08 <SysTick_Handler+0x880>)
 8001dda:	f00a ffc9 	bl	800cd70 <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001dde:	4b4a      	ldr	r3, [pc, #296]	; (8001f08 <SysTick_Handler+0x880>)
 8001de0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001de4:	2300      	movs	r3, #0
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	2300      	movs	r3, #0
 8001dea:	4953      	ldr	r1, [pc, #332]	; (8001f38 <SysTick_Handler+0x8b0>)
 8001dec:	4853      	ldr	r0, [pc, #332]	; (8001f3c <SysTick_Handler+0x8b4>)
 8001dee:	f00d f997 	bl	800f120 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001df2:	2300      	movs	r3, #0
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2300      	movs	r3, #0
 8001df8:	2240      	movs	r2, #64	; 0x40
 8001dfa:	4951      	ldr	r1, [pc, #324]	; (8001f40 <SysTick_Handler+0x8b8>)
 8001dfc:	4851      	ldr	r0, [pc, #324]	; (8001f44 <SysTick_Handler+0x8bc>)
 8001dfe:	f00d f98f 	bl	800f120 <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));
 8001e02:	4b48      	ldr	r3, [pc, #288]	; (8001f24 <SysTick_Handler+0x89c>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 80da 	beq.w	8001fc0 <SysTick_Handler+0x938>
 8001e0c:	2117      	movs	r1, #23
 8001e0e:	484e      	ldr	r0, [pc, #312]	; (8001f48 <SysTick_Handler+0x8c0>)
 8001e10:	f7ff fc1e 	bl	8001650 <ITM0_Write>
			 break;
 8001e14:	e0d4      	b.n	8001fc0 <SysTick_Handler+0x938>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001e16:	4b43      	ldr	r3, [pc, #268]	; (8001f24 <SysTick_Handler+0x89c>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 80d0 	beq.w	8001fc0 <SysTick_Handler+0x938>
 8001e20:	2111      	movs	r1, #17
 8001e22:	484a      	ldr	r0, [pc, #296]	; (8001f4c <SysTick_Handler+0x8c4>)
 8001e24:	f7ff fc14 	bl	8001650 <ITM0_Write>
			 break;
 8001e28:	e0ca      	b.n	8001fc0 <SysTick_Handler+0x938>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001e2a:	4b3e      	ldr	r3, [pc, #248]	; (8001f24 <SysTick_Handler+0x89c>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <SysTick_Handler+0x7b2>
 8001e32:	2115      	movs	r1, #21
 8001e34:	4846      	ldr	r0, [pc, #280]	; (8001f50 <SysTick_Handler+0x8c8>)
 8001e36:	f7ff fc0b 	bl	8001650 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e3a:	4b34      	ldr	r3, [pc, #208]	; (8001f0c <SysTick_Handler+0x884>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e40:	e0bf      	b.n	8001fc2 <SysTick_Handler+0x93a>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001e42:	4b38      	ldr	r3, [pc, #224]	; (8001f24 <SysTick_Handler+0x89c>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <SysTick_Handler+0x7ca>
 8001e4a:	2114      	movs	r1, #20
 8001e4c:	4841      	ldr	r0, [pc, #260]	; (8001f54 <SysTick_Handler+0x8cc>)
 8001e4e:	f7ff fbff 	bl	8001650 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e52:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <SysTick_Handler+0x884>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e58:	e0b3      	b.n	8001fc2 <SysTick_Handler+0x93a>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001e5a:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <SysTick_Handler+0x89c>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <SysTick_Handler+0x7e2>
 8001e62:	2116      	movs	r1, #22
 8001e64:	483c      	ldr	r0, [pc, #240]	; (8001f58 <SysTick_Handler+0x8d0>)
 8001e66:	f7ff fbf3 	bl	8001650 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0, DISCON );
 8001e6a:	2208      	movs	r2, #8
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4827      	ldr	r0, [pc, #156]	; (8001f0c <SysTick_Handler+0x884>)
 8001e70:	f00c faba 	bl	800e3e8 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001e74:	bf00      	nop
 8001e76:	2301      	movs	r3, #1
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	4b2c      	ldr	r3, [pc, #176]	; (8001f2c <SysTick_Handler+0x8a4>)
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	230f      	movs	r3, #15
 8001e80:	2201      	movs	r2, #1
 8001e82:	2104      	movs	r1, #4
 8001e84:	4821      	ldr	r0, [pc, #132]	; (8001f0c <SysTick_Handler+0x884>)
 8001e86:	f00c f984 	bl	800e192 <SPI_ETH_REG>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f2      	bne.n	8001e76 <SysTick_Handler+0x7ee>
					{}
					ETH.ETH_WDG=0;
 8001e90:	4b1e      	ldr	r3, [pc, #120]	; (8001f0c <SysTick_Handler+0x884>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e96:	e094      	b.n	8001fc2 <SysTick_Handler+0x93a>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001e98:	4b22      	ldr	r3, [pc, #136]	; (8001f24 <SysTick_Handler+0x89c>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <SysTick_Handler+0x820>
 8001ea0:	2117      	movs	r1, #23
 8001ea2:	482e      	ldr	r0, [pc, #184]	; (8001f5c <SysTick_Handler+0x8d4>)
 8001ea4:	f7ff fbd4 	bl	8001650 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0,DISCON );
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4817      	ldr	r0, [pc, #92]	; (8001f0c <SysTick_Handler+0x884>)
 8001eae:	f00c fa9b 	bl	800e3e8 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001eb2:	bf00      	nop
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <SysTick_Handler+0x8a4>)
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	230f      	movs	r3, #15
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	2104      	movs	r1, #4
 8001ec2:	4812      	ldr	r0, [pc, #72]	; (8001f0c <SysTick_Handler+0x884>)
 8001ec4:	f00c f965 	bl	800e192 <SPI_ETH_REG>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f2      	bne.n	8001eb4 <SysTick_Handler+0x82c>
					{}
					ETH.ETH_WDG=0;
 8001ece:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <SysTick_Handler+0x884>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ed4:	e075      	b.n	8001fc2 <SysTick_Handler+0x93a>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 8001ed6:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <SysTick_Handler+0x89c>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <SysTick_Handler+0x85e>
 8001ede:	2115      	movs	r1, #21
 8001ee0:	481f      	ldr	r0, [pc, #124]	; (8001f60 <SysTick_Handler+0x8d8>)
 8001ee2:	f7ff fbb5 	bl	8001650 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <SysTick_Handler+0x884>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001eec:	e069      	b.n	8001fc2 <SysTick_Handler+0x93a>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));
 8001eee:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <SysTick_Handler+0x89c>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <SysTick_Handler+0x876>
 8001ef6:	2110      	movs	r1, #16
 8001ef8:	481a      	ldr	r0, [pc, #104]	; (8001f64 <SysTick_Handler+0x8dc>)
 8001efa:	f7ff fba9 	bl	8001650 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001efe:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <SysTick_Handler+0x884>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001f04:	e05d      	b.n	8001fc2 <SysTick_Handler+0x93a>
 8001f06:	bf00      	nop
 8001f08:	200018ac 	.word	0x200018ac
 8001f0c:	20002954 	.word	0x20002954
 8001f10:	200039c2 	.word	0x200039c2
 8001f14:	20001ac4 	.word	0x20001ac4
 8001f18:	20002970 	.word	0x20002970
 8001f1c:	200039be 	.word	0x200039be
 8001f20:	20004038 	.word	0x20004038
 8001f24:	2000294c 	.word	0x2000294c
 8001f28:	080108e0 	.word	0x080108e0
 8001f2c:	200039c4 	.word	0x200039c4
 8001f30:	200039bc 	.word	0x200039bc
 8001f34:	200039c0 	.word	0x200039c0
 8001f38:	200018be 	.word	0x200018be
 8001f3c:	20003170 	.word	0x20003170
 8001f40:	20001cd0 	.word	0x20001cd0
 8001f44:	20002320 	.word	0x20002320
 8001f48:	080108f4 	.word	0x080108f4
 8001f4c:	080108d0 	.word	0x080108d0
 8001f50:	08010908 	.word	0x08010908
 8001f54:	08010920 	.word	0x08010920
 8001f58:	08010938 	.word	0x08010938
 8001f5c:	08010950 	.word	0x08010950
 8001f60:	08010968 	.word	0x08010968
 8001f64:	08010980 	.word	0x08010980
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));
 8001f68:	4b62      	ldr	r3, [pc, #392]	; (80020f4 <SysTick_Handler+0xa6c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <SysTick_Handler+0x8f0>
 8001f70:	2112      	movs	r1, #18
 8001f72:	4861      	ldr	r0, [pc, #388]	; (80020f8 <SysTick_Handler+0xa70>)
 8001f74:	f7ff fb6c 	bl	8001650 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001f78:	4b60      	ldr	r3, [pc, #384]	; (80020fc <SysTick_Handler+0xa74>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001f7e:	e020      	b.n	8001fc2 <SysTick_Handler+0x93a>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));
 8001f80:	4b5c      	ldr	r3, [pc, #368]	; (80020f4 <SysTick_Handler+0xa6c>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <SysTick_Handler+0x908>
 8001f88:	2113      	movs	r1, #19
 8001f8a:	485d      	ldr	r0, [pc, #372]	; (8002100 <SysTick_Handler+0xa78>)
 8001f8c:	f7ff fb60 	bl	8001650 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001f90:	4b5a      	ldr	r3, [pc, #360]	; (80020fc <SysTick_Handler+0xa74>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001f96:	e014      	b.n	8001fc2 <SysTick_Handler+0x93a>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));
 8001f98:	4b56      	ldr	r3, [pc, #344]	; (80020f4 <SysTick_Handler+0xa6c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <SysTick_Handler+0x920>
 8001fa0:	2111      	movs	r1, #17
 8001fa2:	4858      	ldr	r0, [pc, #352]	; (8002104 <SysTick_Handler+0xa7c>)
 8001fa4:	f7ff fb54 	bl	8001650 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001fa8:	4b54      	ldr	r3, [pc, #336]	; (80020fc <SysTick_Handler+0xa74>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001fae:	e008      	b.n	8001fc2 <SysTick_Handler+0x93a>
	  }
	  }else
	  	  {
		  //ETH.operacion=SPI_READ;
		  //ETH.TX[3]=0x00;
		  SPI_ETH(&ETH);
 8001fb0:	4852      	ldr	r0, [pc, #328]	; (80020fc <SysTick_Handler+0xa74>)
 8001fb2:	f00c f8c7 	bl	800e144 <SPI_ETH>
 8001fb6:	e004      	b.n	8001fc2 <SysTick_Handler+0x93a>
			 default:
 8001fb8:	bf00      	nop
 8001fba:	e002      	b.n	8001fc2 <SysTick_Handler+0x93a>
			 break;
 8001fbc:	bf00      	nop
 8001fbe:	e000      	b.n	8001fc2 <SysTick_Handler+0x93a>
			 break;
 8001fc0:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001fc2:	4b51      	ldr	r3, [pc, #324]	; (8002108 <SysTick_Handler+0xa80>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d102      	bne.n	8001fd0 <SysTick_Handler+0x948>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001fca:	4b4f      	ldr	r3, [pc, #316]	; (8002108 <SysTick_Handler+0xa80>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 8001fd0:	4b4e      	ldr	r3, [pc, #312]	; (800210c <SysTick_Handler+0xa84>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d104      	bne.n	8001fe2 <SysTick_Handler+0x95a>
 8001fd8:	4b4d      	ldr	r3, [pc, #308]	; (8002110 <SysTick_Handler+0xa88>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	4a4c      	ldr	r2, [pc, #304]	; (8002110 <SysTick_Handler+0xa88>)
 8001fe0:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001fe2:	4b4b      	ldr	r3, [pc, #300]	; (8002110 <SysTick_Handler+0xa88>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	dd0f      	ble.n	800200a <SysTick_Handler+0x982>
	{
		USART1_ticks=0;
 8001fea:	4b49      	ldr	r3, [pc, #292]	; (8002110 <SysTick_Handler+0xa88>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 8001ff0:	4b48      	ldr	r3, [pc, #288]	; (8002114 <SysTick_Handler+0xa8c>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 8001ff6:	4b45      	ldr	r3, [pc, #276]	; (800210c <SysTick_Handler+0xa84>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 8001ffc:	4b46      	ldr	r3, [pc, #280]	; (8002118 <SysTick_Handler+0xa90>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a46      	ldr	r2, [pc, #280]	; (800211c <SysTick_Handler+0xa94>)
 8002002:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 8002004:	4b44      	ldr	r3, [pc, #272]	; (8002118 <SysTick_Handler+0xa90>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800200a:	f000 fe51 	bl	8002cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 800200e:	4b44      	ldr	r3, [pc, #272]	; (8002120 <SysTick_Handler+0xa98>)
 8002010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002014:	2b04      	cmp	r3, #4
 8002016:	d105      	bne.n	8002024 <SysTick_Handler+0x99c>
	{
		ticks++;
 8002018:	4b42      	ldr	r3, [pc, #264]	; (8002124 <SysTick_Handler+0xa9c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	3301      	adds	r3, #1
 800201e:	4a41      	ldr	r2, [pc, #260]	; (8002124 <SysTick_Handler+0xa9c>)
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	e002      	b.n	800202a <SysTick_Handler+0x9a2>
	}
	else
	{
		ticks=0;
 8002024:	4b3f      	ldr	r3, [pc, #252]	; (8002124 <SysTick_Handler+0xa9c>)
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
	}

if(wf._ejecucion==1)
 800202a:	4b3d      	ldr	r3, [pc, #244]	; (8002120 <SysTick_Handler+0xa98>)
 800202c:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8002030:	2b01      	cmp	r3, #1
 8002032:	d158      	bne.n	80020e6 <SysTick_Handler+0xa5e>
	{
		if (FLAG_TIMEOUT!=1)
 8002034:	4b3c      	ldr	r3, [pc, #240]	; (8002128 <SysTick_Handler+0xaa0>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d017      	beq.n	800206c <SysTick_Handler+0x9e4>
		{
			if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 800203c:	4b38      	ldr	r3, [pc, #224]	; (8002120 <SysTick_Handler+0xa98>)
 800203e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8002042:	2b02      	cmp	r3, #2
 8002044:	d006      	beq.n	8002054 <SysTick_Handler+0x9cc>
 8002046:	4b36      	ldr	r3, [pc, #216]	; (8002120 <SysTick_Handler+0xa98>)
 8002048:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800204c:	3301      	adds	r3, #1
 800204e:	4a34      	ldr	r2, [pc, #208]	; (8002120 <SysTick_Handler+0xa98>)
 8002050:	f8c2 3cb4 	str.w	r3, [r2, #3252]	; 0xcb4
			if(wf._instruccion==2) wf._ticks2++;
 8002054:	4b32      	ldr	r3, [pc, #200]	; (8002120 <SysTick_Handler+0xa98>)
 8002056:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800205a:	2b02      	cmp	r3, #2
 800205c:	d106      	bne.n	800206c <SysTick_Handler+0x9e4>
 800205e:	4b30      	ldr	r3, [pc, #192]	; (8002120 <SysTick_Handler+0xa98>)
 8002060:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8002064:	3301      	adds	r3, #1
 8002066:	4a2e      	ldr	r2, [pc, #184]	; (8002120 <SysTick_Handler+0xa98>)
 8002068:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
		}


		if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 800206c:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <SysTick_Handler+0xa98>)
 800206e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8002072:	2b02      	cmp	r3, #2
 8002074:	d018      	beq.n	80020a8 <SysTick_Handler+0xa20>
 8002076:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <SysTick_Handler+0xa98>)
 8002078:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800207c:	f241 527c 	movw	r2, #5500	; 0x157c
 8002080:	4293      	cmp	r3, r2
 8002082:	dd11      	ble.n	80020a8 <SysTick_Handler+0xa20>
		{
			FLAG_TIMEOUT=1;
 8002084:	4b28      	ldr	r3, [pc, #160]	; (8002128 <SysTick_Handler+0xaa0>)
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 800208a:	4b28      	ldr	r3, [pc, #160]	; (800212c <SysTick_Handler+0xaa4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f242 020c 	movw	r2, #8204	; 0x200c
 8002094:	4293      	cmp	r3, r2
 8002096:	d107      	bne.n	80020a8 <SysTick_Handler+0xa20>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8002098:	2201      	movs	r2, #1
 800209a:	4925      	ldr	r1, [pc, #148]	; (8002130 <SysTick_Handler+0xaa8>)
 800209c:	4823      	ldr	r0, [pc, #140]	; (800212c <SysTick_Handler+0xaa4>)
 800209e:	f003 fbb2 	bl	8005806 <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 80020a2:	4b24      	ldr	r3, [pc, #144]	; (8002134 <SysTick_Handler+0xaac>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
			}
			//wf._ticks=0;
		}
		if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 80020a8:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <SysTick_Handler+0xa98>)
 80020aa:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d11d      	bne.n	80020ee <SysTick_Handler+0xa66>
 80020b2:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <SysTick_Handler+0xa98>)
 80020b4:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80020b8:	f245 0214 	movw	r2, #20500	; 0x5014
 80020bc:	4293      	cmp	r3, r2
 80020be:	dd16      	ble.n	80020ee <SysTick_Handler+0xa66>
		{
			FLAG_TIMEOUT=1;
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <SysTick_Handler+0xaa0>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 80020c6:	4b19      	ldr	r3, [pc, #100]	; (800212c <SysTick_Handler+0xaa4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f242 020c 	movw	r2, #8204	; 0x200c
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d10c      	bne.n	80020ee <SysTick_Handler+0xa66>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 80020d4:	2201      	movs	r2, #1
 80020d6:	4916      	ldr	r1, [pc, #88]	; (8002130 <SysTick_Handler+0xaa8>)
 80020d8:	4814      	ldr	r0, [pc, #80]	; (800212c <SysTick_Handler+0xaa4>)
 80020da:	f003 fb94 	bl	8005806 <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <SysTick_Handler+0xaac>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
	else
	{
		wf._ticks=0;
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 80020e4:	e003      	b.n	80020ee <SysTick_Handler+0xa66>
		wf._ticks=0;
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <SysTick_Handler+0xa98>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	2000294c 	.word	0x2000294c
 80020f8:	08010994 	.word	0x08010994
 80020fc:	20002954 	.word	0x20002954
 8002100:	080109a8 	.word	0x080109a8
 8002104:	080109bc 	.word	0x080109bc
 8002108:	2000034c 	.word	0x2000034c
 800210c:	20003a0a 	.word	0x20003a0a
 8002110:	20004048 	.word	0x20004048
 8002114:	2000404c 	.word	0x2000404c
 8002118:	20004044 	.word	0x20004044
 800211c:	20004050 	.word	0x20004050
 8002120:	20000b58 	.word	0x20000b58
 8002124:	2000403c 	.word	0x2000403c
 8002128:	20003a0b 	.word	0x20003a0b
 800212c:	2000027c 	.word	0x2000027c
 8002130:	2000401c 	.word	0x2000401c
 8002134:	20003a08 	.word	0x20003a08

08002138 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a22      	ldr	r2, [pc, #136]	; (80021d0 <HAL_UART_ErrorCallback+0x98>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d11c      	bne.n	8002184 <HAL_UART_ErrorCallback+0x4c>
	{
		 volatile int aore=0;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 8002152:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <HAL_UART_ErrorCallback+0x9c>)
 8002154:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8002158:	3301      	adds	r3, #1
 800215a:	4a1e      	ldr	r2, [pc, #120]	; (80021d4 <HAL_UART_ErrorCallback+0x9c>)
 800215c:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	613b      	str	r3, [r7, #16]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f003 fa42 	bl	80055fa <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 8002176:	f7ff f95b 	bl	8001430 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 800217a:	2201      	movs	r2, #1
 800217c:	4916      	ldr	r1, [pc, #88]	; (80021d8 <HAL_UART_ErrorCallback+0xa0>)
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f003 fb41 	bl	8005806 <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a14      	ldr	r2, [pc, #80]	; (80021dc <HAL_UART_ErrorCallback+0xa4>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d11c      	bne.n	80021c8 <HAL_UART_ErrorCallback+0x90>
	{
		 volatile int aore=0;
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 8002196:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <HAL_UART_ErrorCallback+0x9c>)
 8002198:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 800219c:	3301      	adds	r3, #1
 800219e:	4a0d      	ldr	r2, [pc, #52]	; (80021d4 <HAL_UART_ErrorCallback+0x9c>)
 80021a0:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	60bb      	str	r3, [r7, #8]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f003 fa20 	bl	80055fa <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 80021ba:	f7ff f963 	bl	8001484 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 80021be:	2201      	movs	r2, #1
 80021c0:	4905      	ldr	r1, [pc, #20]	; (80021d8 <HAL_UART_ErrorCallback+0xa0>)
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f003 fb1f 	bl	8005806 <HAL_UART_Receive_IT>
	}
}
 80021c8:	bf00      	nop
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40011000 	.word	0x40011000
 80021d4:	20000b58 	.word	0x20000b58
 80021d8:	2000401c 	.word	0x2000401c
 80021dc:	40004400 	.word	0x40004400

080021e0 <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a2c      	ldr	r2, [pc, #176]	; (80022a0 <HAL_UART_RxCpltCallback+0xc0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d123      	bne.n	800223a <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 80021f2:	4b2c      	ldr	r3, [pc, #176]	; (80022a4 <HAL_UART_RxCpltCallback+0xc4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a2c      	ldr	r2, [pc, #176]	; (80022a8 <HAL_UART_RxCpltCallback+0xc8>)
 80021f8:	7811      	ldrb	r1, [r2, #0]
 80021fa:	4a2c      	ldr	r2, [pc, #176]	; (80022ac <HAL_UART_RxCpltCallback+0xcc>)
 80021fc:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 80021fe:	4b29      	ldr	r3, [pc, #164]	; (80022a4 <HAL_UART_RxCpltCallback+0xc4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	3301      	adds	r3, #1
 8002204:	4a27      	ldr	r2, [pc, #156]	; (80022a4 <HAL_UART_RxCpltCallback+0xc4>)
 8002206:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 8002208:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <HAL_UART_RxCpltCallback+0xc4>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002210:	db03      	blt.n	800221a <HAL_UART_RxCpltCallback+0x3a>
 8002212:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <HAL_UART_RxCpltCallback+0xc4>)
 8002214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002218:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 800221a:	2100      	movs	r1, #0
 800221c:	4824      	ldr	r0, [pc, #144]	; (80022b0 <HAL_UART_RxCpltCallback+0xd0>)
 800221e:	f002 f9f3 	bl	8004608 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 8002222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002226:	2201      	movs	r2, #1
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 800222a:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <HAL_UART_RxCpltCallback+0xd4>)
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 8002230:	2201      	movs	r2, #1
 8002232:	491d      	ldr	r1, [pc, #116]	; (80022a8 <HAL_UART_RxCpltCallback+0xc8>)
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f003 fae6 	bl	8005806 <HAL_UART_Receive_IT>
		 }
// LoRa USART2 TIMER3
	if(INTSERIE->Instance==USART2)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a1e      	ldr	r2, [pc, #120]	; (80022b8 <HAL_UART_RxCpltCallback+0xd8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d128      	bne.n	8002296 <HAL_UART_RxCpltCallback+0xb6>
		 {
			UART2_RX_vect[UART2_RX_pos]=UART2_RX_byte[0];
 8002244:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_UART_RxCpltCallback+0xdc>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_UART_RxCpltCallback+0xe0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	b2d1      	uxtb	r1, r2
 800224e:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <HAL_UART_RxCpltCallback+0xe4>)
 8002250:	54d1      	strb	r1, [r2, r3]
			UART2_RX_pos++;
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_UART_RxCpltCallback+0xe0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	3301      	adds	r3, #1
 8002258:	4a19      	ldr	r2, [pc, #100]	; (80022c0 <HAL_UART_RxCpltCallback+0xe0>)
 800225a:	6013      	str	r3, [r2, #0]
			if(UART2_RX_pos>=512) UART2_RX_pos=512;
 800225c:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <HAL_UART_RxCpltCallback+0xe0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002264:	db03      	blt.n	800226e <HAL_UART_RxCpltCallback+0x8e>
 8002266:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <HAL_UART_RxCpltCallback+0xe0>)
 8002268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800226c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 800226e:	2201      	movs	r2, #1
 8002270:	2102      	movs	r1, #2
 8002272:	4815      	ldr	r0, [pc, #84]	; (80022c8 <HAL_UART_RxCpltCallback+0xe8>)
 8002274:	f001 f99e 	bl	80035b4 <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8002278:	2100      	movs	r1, #0
 800227a:	4814      	ldr	r0, [pc, #80]	; (80022cc <HAL_UART_RxCpltCallback+0xec>)
 800227c:	f002 f9c4 	bl	8004608 <HAL_TIM_OC_Start_IT>
			TIM3->CNT=1;
 8002280:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <HAL_UART_RxCpltCallback+0xf0>)
 8002282:	2201      	movs	r2, #1
 8002284:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART2_TMR=1;	//Habilito Timeout de software
 8002286:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <HAL_UART_RxCpltCallback+0xf4>)
 8002288:	2201      	movs	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART2_RX_byte,1);
 800228c:	2201      	movs	r2, #1
 800228e:	490b      	ldr	r1, [pc, #44]	; (80022bc <HAL_UART_RxCpltCallback+0xdc>)
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f003 fab8 	bl	8005806 <HAL_UART_Receive_IT>
		 }
 }
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40011000 	.word	0x40011000
 80022a4:	20004054 	.word	0x20004054
 80022a8:	2000401c 	.word	0x2000401c
 80022ac:	20003a18 	.word	0x20003a18
 80022b0:	200001ec 	.word	0x200001ec
 80022b4:	20003a08 	.word	0x20003a08
 80022b8:	40004400 	.word	0x40004400
 80022bc:	20004020 	.word	0x20004020
 80022c0:	20004058 	.word	0x20004058
 80022c4:	20003c18 	.word	0x20003c18
 80022c8:	40020000 	.word	0x40020000
 80022cc:	20000234 	.word	0x20000234
 80022d0:	40000400 	.word	0x40000400
 80022d4:	20003a09 	.word	0x20003a09

080022d8 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af02      	add	r7, sp, #8
 80022de:	6078      	str	r0, [r7, #4]
// WiFi	USART 1 TIMER2
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e8:	d12d      	bne.n	8002346 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 80022ea:	2100      	movs	r1, #0
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f002 fa89 	bl	8004804 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 80022f2:	4b39      	ldr	r3, [pc, #228]	; (80023d8 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 80022f8:	4b38      	ldr	r3, [pc, #224]	; (80023dc <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 80022fe:	4b38      	ldr	r3, [pc, #224]	; (80023e0 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a38      	ldr	r2, [pc, #224]	; (80023e4 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002304:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 8002306:	4b36      	ldr	r3, [pc, #216]	; (80023e0 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 800230c:	4b36      	ldr	r3, [pc, #216]	; (80023e8 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 8002314:	4b33      	ldr	r3, [pc, #204]	; (80023e4 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b34      	ldr	r3, [pc, #208]	; (80023ec <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	2301      	movs	r3, #1
 800231e:	4932      	ldr	r1, [pc, #200]	; (80023e8 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8002320:	4833      	ldr	r0, [pc, #204]	; (80023f0 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8002322:	f00c fefd 	bl	800f120 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8002326:	2201      	movs	r2, #1
 8002328:	4932      	ldr	r1, [pc, #200]	; (80023f4 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 800232a:	4833      	ldr	r0, [pc, #204]	; (80023f8 <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 800232c:	f003 fa6b 	bl	8005806 <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 8002330:	4b32      	ldr	r3, [pc, #200]	; (80023fc <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8002332:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8002336:	2b01      	cmp	r3, #1
 8002338:	d105      	bne.n	8002346 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 800233a:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4619      	mov	r1, r3
 8002340:	482b      	ldr	r0, [pc, #172]	; (80023f0 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8002342:	f7ff f985 	bl	8001650 <ITM0_Write>
				 }
		}
		// LoRa USART2 TIMER3
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM3)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a2d      	ldr	r2, [pc, #180]	; (8002400 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d13f      	bne.n	80023d0 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8002350:	2100      	movs	r1, #0
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f002 fa56 	bl	8004804 <HAL_TIM_OC_Stop_IT>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8002358:	2200      	movs	r2, #0
 800235a:	2102      	movs	r1, #2
 800235c:	4829      	ldr	r0, [pc, #164]	; (8002404 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 800235e:	f001 f929 	bl	80035b4 <HAL_GPIO_WritePin>
				 FLAG_UART2=1;
 8002362:	4b29      	ldr	r3, [pc, #164]	; (8002408 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8002364:	2201      	movs	r2, #1
 8002366:	701a      	strb	r2, [r3, #0]
				 EN_UART2_TMR=0;
 8002368:	4b28      	ldr	r3, [pc, #160]	; (800240c <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
				 UART2_RX_items=UART2_RX_pos;
 800236e:	4b28      	ldr	r3, [pc, #160]	; (8002410 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a28      	ldr	r2, [pc, #160]	; (8002414 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8002374:	6013      	str	r3, [r2, #0]
				 UART2_RX_pos=0;
 8002376:	4b26      	ldr	r3, [pc, #152]	; (8002410 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
				 //UART2_RX_vect[UART2_RX_items]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
				 UART2_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 800237c:	4b26      	ldr	r3, [pc, #152]	; (8002418 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(lr.rxbuff,UART2_RX_vect,UART2_RX_items,1,CMP_VECT);
 8002384:	4b23      	ldr	r3, [pc, #140]	; (8002414 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b18      	ldr	r3, [pc, #96]	; (80023ec <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	2301      	movs	r3, #1
 800238e:	4922      	ldr	r1, [pc, #136]	; (8002418 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8002390:	4822      	ldr	r0, [pc, #136]	; (800241c <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8002392:	f00c fec5 	bl	800f120 <CopiaVector>
				 lr.rxitems=UART2_RX_items;
 8002396:	4b1f      	ldr	r3, [pc, #124]	; (8002414 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a21      	ldr	r2, [pc, #132]	; (8002420 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 800239c:	f8c2 37dc 	str.w	r3, [r2, #2012]	; 0x7dc
				 HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 80023a0:	2201      	movs	r2, #1
 80023a2:	4920      	ldr	r1, [pc, #128]	; (8002424 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 80023a4:	4820      	ldr	r0, [pc, #128]	; (8002428 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 80023a6:	f003 fa2e 	bl	8005806 <HAL_UART_Receive_IT>
				// ITM0_Write("\r\nRecepcion LoRa \r\n",strlen("Recepcion LoRa \r\n"));
				 if (wf._DBG_EN==1)
 80023aa:	4b14      	ldr	r3, [pc, #80]	; (80023fc <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 80023ac:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d10d      	bne.n	80023d0 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
				 {
					 ITM0_Write("\r\nData LoRa recibida = ",strlen("\r\nData LoRa recibida = "));
 80023b4:	2117      	movs	r1, #23
 80023b6:	481d      	ldr	r0, [pc, #116]	; (800242c <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 80023b8:	f7ff f94a 	bl	8001650 <ITM0_Write>
					 ITM0_Write((uint8_t *)UART2_RX_vect,UART2_RX_items);
 80023bc:	4b15      	ldr	r3, [pc, #84]	; (8002414 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4619      	mov	r1, r3
 80023c2:	4815      	ldr	r0, [pc, #84]	; (8002418 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 80023c4:	f7ff f944 	bl	8001650 <ITM0_Write>
					 ITM0_Write("\r\n",strlen("\r\n"));
 80023c8:	2102      	movs	r1, #2
 80023ca:	4819      	ldr	r0, [pc, #100]	; (8002430 <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 80023cc:	f7ff f940 	bl	8001650 <ITM0_Write>
				 }
		}
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20003a0c 	.word	0x20003a0c
 80023dc:	20003a08 	.word	0x20003a08
 80023e0:	20004054 	.word	0x20004054
 80023e4:	20004028 	.word	0x20004028
 80023e8:	20003a18 	.word	0x20003a18
 80023ec:	20004018 	.word	0x20004018
 80023f0:	20003e18 	.word	0x20003e18
 80023f4:	2000401c 	.word	0x2000401c
 80023f8:	2000027c 	.word	0x2000027c
 80023fc:	20000b58 	.word	0x20000b58
 8002400:	40000400 	.word	0x40000400
 8002404:	40020000 	.word	0x40020000
 8002408:	20003a0d 	.word	0x20003a0d
 800240c:	20003a09 	.word	0x20003a09
 8002410:	20004058 	.word	0x20004058
 8002414:	2000402c 	.word	0x2000402c
 8002418:	20003c18 	.word	0x20003c18
 800241c:	200003a6 	.word	0x200003a6
 8002420:	20000350 	.word	0x20000350
 8002424:	20004020 	.word	0x20004020
 8002428:	200002c0 	.word	0x200002c0
 800242c:	080109d0 	.word	0x080109d0
 8002430:	080109e8 	.word	0x080109e8

08002434 <ESP8266_HW_Reset>:

void ESP8266_HW_Reset(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
	  ESP_REinit=0;
 8002438:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <ESP8266_HW_Reset+0x40>)
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800243e:	2200      	movs	r2, #0
 8002440:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002444:	480c      	ldr	r0, [pc, #48]	; (8002478 <ESP8266_HW_Reset+0x44>)
 8002446:	f001 f8b5 	bl	80035b4 <HAL_GPIO_WritePin>
	  ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 800244a:	2115      	movs	r1, #21
 800244c:	480b      	ldr	r0, [pc, #44]	; (800247c <ESP8266_HW_Reset+0x48>)
 800244e:	f7ff f8ff 	bl	8001650 <ITM0_Write>
	  HAL_Delay(2000);											//Tiempo de reset del módulo
 8002452:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002456:	f000 fc4b 	bl	8002cf0 <HAL_Delay>
	  ITM0_Write("\r\n ESP ResetT\r\n",strlen("\r\n ESP ResetT\r\n"));
 800245a:	210f      	movs	r1, #15
 800245c:	4808      	ldr	r0, [pc, #32]	; (8002480 <ESP8266_HW_Reset+0x4c>)
 800245e:	f7ff f8f7 	bl	8001650 <ITM0_Write>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//Habilito módulo
 8002462:	2201      	movs	r2, #1
 8002464:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002468:	4803      	ldr	r0, [pc, #12]	; (8002478 <ESP8266_HW_Reset+0x44>)
 800246a:	f001 f8a3 	bl	80035b4 <HAL_GPIO_WritePin>
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20003a05 	.word	0x20003a05
 8002478:	40020000 	.word	0x40020000
 800247c:	080107fc 	.word	0x080107fc
 8002480:	080109ec 	.word	0x080109ec

08002484 <ESP8266_HW_Init>:
uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af06      	add	r7, sp, #24
 800248a:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 800248c:	2364      	movs	r3, #100	; 0x64
 800248e:	220c      	movs	r2, #12
 8002490:	4945      	ldr	r1, [pc, #276]	; (80025a8 <ESP8266_HW_Init+0x124>)
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f003 f8e0 	bl	8005658 <HAL_UART_Transmit>
		  HAL_Delay(500);
 8002498:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800249c:	f000 fc28 	bl	8002cf0 <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 80024a0:	4b42      	ldr	r3, [pc, #264]	; (80025ac <ESP8266_HW_Init+0x128>)
 80024a2:	2205      	movs	r2, #5
 80024a4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		  wf._n_orig=UART_RX_items;
 80024a8:	4b41      	ldr	r3, [pc, #260]	; (80025b0 <ESP8266_HW_Init+0x12c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a3f      	ldr	r2, [pc, #252]	; (80025ac <ESP8266_HW_Init+0x128>)
 80024ae:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 80024b2:	e00e      	b.n	80024d2 <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 80024b4:	4b3e      	ldr	r3, [pc, #248]	; (80025b0 <ESP8266_HW_Init+0x12c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a3c      	ldr	r2, [pc, #240]	; (80025ac <ESP8266_HW_Init+0x128>)
 80024ba:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  	  if (ESP_ticks>=5000)
 80024be:	4b3d      	ldr	r3, [pc, #244]	; (80025b4 <ESP8266_HW_Init+0x130>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f241 3287 	movw	r2, #4999	; 0x1387
 80024c6:	4293      	cmp	r3, r2
 80024c8:	dd03      	ble.n	80024d2 <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 80024ca:	4b3b      	ldr	r3, [pc, #236]	; (80025b8 <ESP8266_HW_Init+0x134>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]
			  		 break;
 80024d0:	e014      	b.n	80024fc <ESP8266_HW_Init+0x78>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 80024d2:	4b3a      	ldr	r3, [pc, #232]	; (80025bc <ESP8266_HW_Init+0x138>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	9205      	str	r2, [sp, #20]
 80024d8:	9304      	str	r3, [sp, #16]
 80024da:	4b39      	ldr	r3, [pc, #228]	; (80025c0 <ESP8266_HW_Init+0x13c>)
 80024dc:	9303      	str	r3, [sp, #12]
 80024de:	4b39      	ldr	r3, [pc, #228]	; (80025c4 <ESP8266_HW_Init+0x140>)
 80024e0:	9302      	str	r3, [sp, #8]
 80024e2:	4b39      	ldr	r3, [pc, #228]	; (80025c8 <ESP8266_HW_Init+0x144>)
 80024e4:	9301      	str	r3, [sp, #4]
 80024e6:	4b39      	ldr	r3, [pc, #228]	; (80025cc <ESP8266_HW_Init+0x148>)
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	4b39      	ldr	r3, [pc, #228]	; (80025d0 <ESP8266_HW_Init+0x14c>)
 80024ec:	4a39      	ldr	r2, [pc, #228]	; (80025d4 <ESP8266_HW_Init+0x150>)
 80024ee:	493a      	ldr	r1, [pc, #232]	; (80025d8 <ESP8266_HW_Init+0x154>)
 80024f0:	483a      	ldr	r0, [pc, #232]	; (80025dc <ESP8266_HW_Init+0x158>)
 80024f2:	f00c fa99 	bl	800ea28 <FT_String_ND>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d1db      	bne.n	80024b4 <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 80024fc:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <ESP8266_HW_Init+0x134>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d12b      	bne.n	800255c <ESP8266_HW_Init+0xd8>
		  {
			  wf._n_fcomp=strlen("ready");
 8002504:	4b29      	ldr	r3, [pc, #164]	; (80025ac <ESP8266_HW_Init+0x128>)
 8002506:	2205      	movs	r2, #5
 8002508:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			  wf._n_orig=UART_RX_items;
 800250c:	4b28      	ldr	r3, [pc, #160]	; (80025b0 <ESP8266_HW_Init+0x12c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a26      	ldr	r2, [pc, #152]	; (80025ac <ESP8266_HW_Init+0x128>)
 8002512:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 8002516:	e00a      	b.n	800252e <ESP8266_HW_Init+0xaa>
			  {
				  wf._n_orig=UART_RX_items;
 8002518:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <ESP8266_HW_Init+0x12c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a23      	ldr	r2, [pc, #140]	; (80025ac <ESP8266_HW_Init+0x128>)
 800251e:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
				  if (ESP_ticks>=5000)
 8002522:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <ESP8266_HW_Init+0x130>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f241 3287 	movw	r2, #4999	; 0x1387
 800252a:	4293      	cmp	r3, r2
 800252c:	dc15      	bgt.n	800255a <ESP8266_HW_Init+0xd6>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 800252e:	4b23      	ldr	r3, [pc, #140]	; (80025bc <ESP8266_HW_Init+0x138>)
 8002530:	2200      	movs	r2, #0
 8002532:	9205      	str	r2, [sp, #20]
 8002534:	9304      	str	r3, [sp, #16]
 8002536:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <ESP8266_HW_Init+0x13c>)
 8002538:	9303      	str	r3, [sp, #12]
 800253a:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <ESP8266_HW_Init+0x140>)
 800253c:	9302      	str	r3, [sp, #8]
 800253e:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <ESP8266_HW_Init+0x144>)
 8002540:	9301      	str	r3, [sp, #4]
 8002542:	4b22      	ldr	r3, [pc, #136]	; (80025cc <ESP8266_HW_Init+0x148>)
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <ESP8266_HW_Init+0x14c>)
 8002548:	4a22      	ldr	r2, [pc, #136]	; (80025d4 <ESP8266_HW_Init+0x150>)
 800254a:	4923      	ldr	r1, [pc, #140]	; (80025d8 <ESP8266_HW_Init+0x154>)
 800254c:	4823      	ldr	r0, [pc, #140]	; (80025dc <ESP8266_HW_Init+0x158>)
 800254e:	f00c fa6b 	bl	800ea28 <FT_String_ND>
 8002552:	4603      	mov	r3, r0
 8002554:	2b01      	cmp	r3, #1
 8002556:	d1df      	bne.n	8002518 <ESP8266_HW_Init+0x94>
 8002558:	e000      	b.n	800255c <ESP8266_HW_Init+0xd8>
					 {
					 break;
 800255a:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 800255c:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <ESP8266_HW_Init+0x130>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f241 3287 	movw	r2, #4999	; 0x1387
 8002564:	4293      	cmp	r3, r2
 8002566:	dc06      	bgt.n	8002576 <ESP8266_HW_Init+0xf2>
		  {
			  ESP_REinit=10;
 8002568:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <ESP8266_HW_Init+0x15c>)
 800256a:	220a      	movs	r2, #10
 800256c:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800256e:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <ESP8266_HW_Init+0x130>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	e008      	b.n	8002588 <ESP8266_HW_Init+0x104>
		  }
		  else
		  {
			  ESP_REinit++;
 8002576:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <ESP8266_HW_Init+0x15c>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	3301      	adds	r3, #1
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <ESP8266_HW_Init+0x15c>)
 8002580:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 8002582:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <ESP8266_HW_Init+0x130>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 8002588:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <ESP8266_HW_Init+0x15c>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b05      	cmp	r3, #5
 800258e:	f67f af7d 	bls.w	800248c <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 8002592:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <ESP8266_HW_Init+0x15c>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b0a      	cmp	r3, #10
 8002598:	d101      	bne.n	800259e <ESP8266_HW_Init+0x11a>
	  {
		  return(1);
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <ESP8266_HW_Init+0x11c>
	  }
	  else
	  {
		  return(0);
 800259e:	2300      	movs	r3, #0
	  }
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	080109fc 	.word	0x080109fc
 80025ac:	20000b58 	.word	0x20000b58
 80025b0:	20004028 	.word	0x20004028
 80025b4:	20004030 	.word	0x20004030
 80025b8:	20003a06 	.word	0x20003a06
 80025bc:	200018a0 	.word	0x200018a0
 80025c0:	200015ec 	.word	0x200015ec
 80025c4:	20004040 	.word	0x20004040
 80025c8:	20001838 	.word	0x20001838
 80025cc:	200013ec 	.word	0x200013ec
 80025d0:	20001844 	.word	0x20001844
 80025d4:	08010a0c 	.word	0x08010a0c
 80025d8:	20001830 	.word	0x20001830
 80025dc:	20003e18 	.word	0x20003e18
 80025e0:	20003a05 	.word	0x20003a05

080025e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025e8:	b672      	cpsid	i
}
 80025ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025ec:	e7fe      	b.n	80025ec <Error_Handler+0x8>
	...

080025f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <HAL_MspInit+0x4c>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	4a0f      	ldr	r2, [pc, #60]	; (800263c <HAL_MspInit+0x4c>)
 8002600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002604:	6453      	str	r3, [r2, #68]	; 0x44
 8002606:	4b0d      	ldr	r3, [pc, #52]	; (800263c <HAL_MspInit+0x4c>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260e:	607b      	str	r3, [r7, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	603b      	str	r3, [r7, #0]
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_MspInit+0x4c>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	4a08      	ldr	r2, [pc, #32]	; (800263c <HAL_MspInit+0x4c>)
 800261c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002620:	6413      	str	r3, [r2, #64]	; 0x40
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_MspInit+0x4c>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800

08002640 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a19      	ldr	r2, [pc, #100]	; (80026c4 <HAL_SPI_MspInit+0x84>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d12b      	bne.n	80026ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <HAL_SPI_MspInit+0x88>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	4a17      	ldr	r2, [pc, #92]	; (80026c8 <HAL_SPI_MspInit+0x88>)
 800266c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002670:	6453      	str	r3, [r2, #68]	; 0x44
 8002672:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <HAL_SPI_MspInit+0x88>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <HAL_SPI_MspInit+0x88>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	4a10      	ldr	r2, [pc, #64]	; (80026c8 <HAL_SPI_MspInit+0x88>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6313      	str	r3, [r2, #48]	; 0x30
 800268e:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <HAL_SPI_MspInit+0x88>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800269a:	23e0      	movs	r3, #224	; 0xe0
 800269c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	2302      	movs	r3, #2
 80026a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a6:	2303      	movs	r3, #3
 80026a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026aa:	2305      	movs	r3, #5
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	4619      	mov	r1, r3
 80026b4:	4805      	ldr	r0, [pc, #20]	; (80026cc <HAL_SPI_MspInit+0x8c>)
 80026b6:	f000 fd15 	bl	80030e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026ba:	bf00      	nop
 80026bc:	3728      	adds	r7, #40	; 0x28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40013000 	.word	0x40013000
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40020000 	.word	0x40020000

080026d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e0:	d116      	bne.n	8002710 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <HAL_TIM_Base_MspInit+0x80>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a19      	ldr	r2, [pc, #100]	; (8002750 <HAL_TIM_Base_MspInit+0x80>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
 80026f2:	4b17      	ldr	r3, [pc, #92]	; (8002750 <HAL_TIM_Base_MspInit+0x80>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026fe:	2200      	movs	r2, #0
 8002700:	2100      	movs	r1, #0
 8002702:	201c      	movs	r0, #28
 8002704:	f000 fc17 	bl	8002f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002708:	201c      	movs	r0, #28
 800270a:	f000 fc30 	bl	8002f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800270e:	e01a      	b.n	8002746 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a0f      	ldr	r2, [pc, #60]	; (8002754 <HAL_TIM_Base_MspInit+0x84>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d115      	bne.n	8002746 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <HAL_TIM_Base_MspInit+0x80>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	4a0b      	ldr	r2, [pc, #44]	; (8002750 <HAL_TIM_Base_MspInit+0x80>)
 8002724:	f043 0302 	orr.w	r3, r3, #2
 8002728:	6413      	str	r3, [r2, #64]	; 0x40
 800272a:	4b09      	ldr	r3, [pc, #36]	; (8002750 <HAL_TIM_Base_MspInit+0x80>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	2100      	movs	r1, #0
 800273a:	201d      	movs	r0, #29
 800273c:	f000 fbfb 	bl	8002f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002740:	201d      	movs	r0, #29
 8002742:	f000 fc14 	bl	8002f6e <HAL_NVIC_EnableIRQ>
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800
 8002754:	40000400 	.word	0x40000400

08002758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08e      	sub	sp, #56	; 0x38
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a54      	ldr	r2, [pc, #336]	; (80028c8 <HAL_UART_MspInit+0x170>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d135      	bne.n	80027e6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	623b      	str	r3, [r7, #32]
 800277e:	4b53      	ldr	r3, [pc, #332]	; (80028cc <HAL_UART_MspInit+0x174>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	4a52      	ldr	r2, [pc, #328]	; (80028cc <HAL_UART_MspInit+0x174>)
 8002784:	f043 0310 	orr.w	r3, r3, #16
 8002788:	6453      	str	r3, [r2, #68]	; 0x44
 800278a:	4b50      	ldr	r3, [pc, #320]	; (80028cc <HAL_UART_MspInit+0x174>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	f003 0310 	and.w	r3, r3, #16
 8002792:	623b      	str	r3, [r7, #32]
 8002794:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
 800279a:	4b4c      	ldr	r3, [pc, #304]	; (80028cc <HAL_UART_MspInit+0x174>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a4b      	ldr	r2, [pc, #300]	; (80028cc <HAL_UART_MspInit+0x174>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b49      	ldr	r3, [pc, #292]	; (80028cc <HAL_UART_MspInit+0x174>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	61fb      	str	r3, [r7, #28]
 80027b0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_WF_Pin|USART1_RX_WF_Pin;
 80027b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b8:	2302      	movs	r3, #2
 80027ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c0:	2303      	movs	r3, #3
 80027c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027c4:	2307      	movs	r3, #7
 80027c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027cc:	4619      	mov	r1, r3
 80027ce:	4840      	ldr	r0, [pc, #256]	; (80028d0 <HAL_UART_MspInit+0x178>)
 80027d0:	f000 fc88 	bl	80030e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027d4:	2200      	movs	r2, #0
 80027d6:	2100      	movs	r1, #0
 80027d8:	2025      	movs	r0, #37	; 0x25
 80027da:	f000 fbac 	bl	8002f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027de:	2025      	movs	r0, #37	; 0x25
 80027e0:	f000 fbc5 	bl	8002f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80027e4:	e06b      	b.n	80028be <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a3a      	ldr	r2, [pc, #232]	; (80028d4 <HAL_UART_MspInit+0x17c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d134      	bne.n	800285a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027f0:	2300      	movs	r3, #0
 80027f2:	61bb      	str	r3, [r7, #24]
 80027f4:	4b35      	ldr	r3, [pc, #212]	; (80028cc <HAL_UART_MspInit+0x174>)
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	4a34      	ldr	r2, [pc, #208]	; (80028cc <HAL_UART_MspInit+0x174>)
 80027fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002800:	4b32      	ldr	r3, [pc, #200]	; (80028cc <HAL_UART_MspInit+0x174>)
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	4b2e      	ldr	r3, [pc, #184]	; (80028cc <HAL_UART_MspInit+0x174>)
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	4a2d      	ldr	r2, [pc, #180]	; (80028cc <HAL_UART_MspInit+0x174>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6313      	str	r3, [r2, #48]	; 0x30
 800281c:	4b2b      	ldr	r3, [pc, #172]	; (80028cc <HAL_UART_MspInit+0x174>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART2_TX_LR_Pin|USART2_RX_LR_Pin;
 8002828:	230c      	movs	r3, #12
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282c:	2302      	movs	r3, #2
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002834:	2303      	movs	r3, #3
 8002836:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002838:	2307      	movs	r3, #7
 800283a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002840:	4619      	mov	r1, r3
 8002842:	4823      	ldr	r0, [pc, #140]	; (80028d0 <HAL_UART_MspInit+0x178>)
 8002844:	f000 fc4e 	bl	80030e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002848:	2200      	movs	r2, #0
 800284a:	2100      	movs	r1, #0
 800284c:	2026      	movs	r0, #38	; 0x26
 800284e:	f000 fb72 	bl	8002f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002852:	2026      	movs	r0, #38	; 0x26
 8002854:	f000 fb8b 	bl	8002f6e <HAL_NVIC_EnableIRQ>
}
 8002858:	e031      	b.n	80028be <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1e      	ldr	r2, [pc, #120]	; (80028d8 <HAL_UART_MspInit+0x180>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d12c      	bne.n	80028be <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002864:	2300      	movs	r3, #0
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	4b18      	ldr	r3, [pc, #96]	; (80028cc <HAL_UART_MspInit+0x174>)
 800286a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286c:	4a17      	ldr	r2, [pc, #92]	; (80028cc <HAL_UART_MspInit+0x174>)
 800286e:	f043 0320 	orr.w	r3, r3, #32
 8002872:	6453      	str	r3, [r2, #68]	; 0x44
 8002874:	4b15      	ldr	r3, [pc, #84]	; (80028cc <HAL_UART_MspInit+0x174>)
 8002876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <HAL_UART_MspInit+0x174>)
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	4a10      	ldr	r2, [pc, #64]	; (80028cc <HAL_UART_MspInit+0x174>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6313      	str	r3, [r2, #48]	; 0x30
 8002890:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <HAL_UART_MspInit+0x174>)
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800289c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a2:	2302      	movs	r3, #2
 80028a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028aa:	2303      	movs	r3, #3
 80028ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80028ae:	2308      	movs	r3, #8
 80028b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b6:	4619      	mov	r1, r3
 80028b8:	4805      	ldr	r0, [pc, #20]	; (80028d0 <HAL_UART_MspInit+0x178>)
 80028ba:	f000 fc13 	bl	80030e4 <HAL_GPIO_Init>
}
 80028be:	bf00      	nop
 80028c0:	3738      	adds	r7, #56	; 0x38
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40011000 	.word	0x40011000
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40020000 	.word	0x40020000
 80028d4:	40004400 	.word	0x40004400
 80028d8:	40011400 	.word	0x40011400

080028dc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a1c      	ldr	r2, [pc, #112]	; (800295c <HAL_UART_MspDeInit+0x80>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d10e      	bne.n	800290c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80028ee:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <HAL_UART_MspDeInit+0x84>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	4a1b      	ldr	r2, [pc, #108]	; (8002960 <HAL_UART_MspDeInit+0x84>)
 80028f4:	f023 0310 	bic.w	r3, r3, #16
 80028f8:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART1_TX_WF_Pin|USART1_RX_WF_Pin);
 80028fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80028fe:	4819      	ldr	r0, [pc, #100]	; (8002964 <HAL_UART_MspDeInit+0x88>)
 8002900:	f000 fd74 	bl	80033ec <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002904:	2025      	movs	r0, #37	; 0x25
 8002906:	f000 fb40 	bl	8002f8a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 800290a:	e022      	b.n	8002952 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a15      	ldr	r2, [pc, #84]	; (8002968 <HAL_UART_MspDeInit+0x8c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d10d      	bne.n	8002932 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <HAL_UART_MspDeInit+0x84>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	4a11      	ldr	r2, [pc, #68]	; (8002960 <HAL_UART_MspDeInit+0x84>)
 800291c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002920:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART2_TX_LR_Pin|USART2_RX_LR_Pin);
 8002922:	210c      	movs	r1, #12
 8002924:	480f      	ldr	r0, [pc, #60]	; (8002964 <HAL_UART_MspDeInit+0x88>)
 8002926:	f000 fd61 	bl	80033ec <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800292a:	2026      	movs	r0, #38	; 0x26
 800292c:	f000 fb2d 	bl	8002f8a <HAL_NVIC_DisableIRQ>
}
 8002930:	e00f      	b.n	8002952 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART6)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a0d      	ldr	r2, [pc, #52]	; (800296c <HAL_UART_MspDeInit+0x90>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d10a      	bne.n	8002952 <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART6_CLK_DISABLE();
 800293c:	4b08      	ldr	r3, [pc, #32]	; (8002960 <HAL_UART_MspDeInit+0x84>)
 800293e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002940:	4a07      	ldr	r2, [pc, #28]	; (8002960 <HAL_UART_MspDeInit+0x84>)
 8002942:	f023 0320 	bic.w	r3, r3, #32
 8002946:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8002948:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800294c:	4805      	ldr	r0, [pc, #20]	; (8002964 <HAL_UART_MspDeInit+0x88>)
 800294e:	f000 fd4d 	bl	80033ec <HAL_GPIO_DeInit>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40011000 	.word	0x40011000
 8002960:	40023800 	.word	0x40023800
 8002964:	40020000 	.word	0x40020000
 8002968:	40004400 	.word	0x40004400
 800296c:	40011400 	.word	0x40011400

08002970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002974:	e7fe      	b.n	8002974 <NMI_Handler+0x4>

08002976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800297a:	e7fe      	b.n	800297a <HardFault_Handler+0x4>

0800297c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002980:	e7fe      	b.n	8002980 <MemManage_Handler+0x4>

08002982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002986:	e7fe      	b.n	8002986 <BusFault_Handler+0x4>

08002988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800298c:	e7fe      	b.n	800298c <UsageFault_Handler+0x4>

0800298e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029aa:	b480      	push	{r7}
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029bc:	4802      	ldr	r0, [pc, #8]	; (80029c8 <TIM2_IRQHandler+0x10>)
 80029be:	f002 f82d 	bl	8004a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200001ec 	.word	0x200001ec

080029cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029d0:	4802      	ldr	r0, [pc, #8]	; (80029dc <TIM3_IRQHandler+0x10>)
 80029d2:	f002 f823 	bl	8004a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000234 	.word	0x20000234

080029e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <USART1_IRQHandler+0x10>)
 80029e6:	f002 ff3f 	bl	8005868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	2000027c 	.word	0x2000027c

080029f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029f8:	4802      	ldr	r0, [pc, #8]	; (8002a04 <USART2_IRQHandler+0x10>)
 80029fa:	f002 ff35 	bl	8005868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200002c0 	.word	0x200002c0

08002a08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
	return 1;
 8002a0c:	2301      	movs	r3, #1
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <_kill>:

int _kill(int pid, int sig)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a22:	f00c fe85 	bl	800f730 <__errno>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2216      	movs	r2, #22
 8002a2a:	601a      	str	r2, [r3, #0]
	return -1;
 8002a2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <_exit>:

void _exit (int status)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a40:	f04f 31ff 	mov.w	r1, #4294967295
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff ffe7 	bl	8002a18 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a4a:	e7fe      	b.n	8002a4a <_exit+0x12>

08002a4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	e00a      	b.n	8002a74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a5e:	f3af 8000 	nop.w
 8002a62:	4601      	mov	r1, r0
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	60ba      	str	r2, [r7, #8]
 8002a6a:	b2ca      	uxtb	r2, r1
 8002a6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	3301      	adds	r3, #1
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	dbf0      	blt.n	8002a5e <_read+0x12>
	}

return len;
 8002a7c:	687b      	ldr	r3, [r7, #4]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b086      	sub	sp, #24
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	e009      	b.n	8002aac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	60ba      	str	r2, [r7, #8]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	dbf1      	blt.n	8002a98 <_write+0x12>
	}
	return len;
 8002ab4:	687b      	ldr	r3, [r7, #4]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <_close>:

int _close(int file)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
	return -1;
 8002ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ae6:	605a      	str	r2, [r3, #4]
	return 0;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <_isatty>:

int _isatty(int file)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
	return 1;
 8002afe:	2301      	movs	r3, #1
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
	return 0;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b30:	4a14      	ldr	r2, [pc, #80]	; (8002b84 <_sbrk+0x5c>)
 8002b32:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <_sbrk+0x60>)
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b3c:	4b13      	ldr	r3, [pc, #76]	; (8002b8c <_sbrk+0x64>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d102      	bne.n	8002b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b44:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <_sbrk+0x64>)
 8002b46:	4a12      	ldr	r2, [pc, #72]	; (8002b90 <_sbrk+0x68>)
 8002b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b4a:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <_sbrk+0x64>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d207      	bcs.n	8002b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b58:	f00c fdea 	bl	800f730 <__errno>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	220c      	movs	r2, #12
 8002b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295
 8002b66:	e009      	b.n	8002b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b68:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <_sbrk+0x64>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b6e:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <_sbrk+0x64>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4413      	add	r3, r2
 8002b76:	4a05      	ldr	r2, [pc, #20]	; (8002b8c <_sbrk+0x64>)
 8002b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20020000 	.word	0x20020000
 8002b88:	00000400 	.word	0x00000400
 8002b8c:	20004060 	.word	0x20004060
 8002b90:	200041b8 	.word	0x200041b8

08002b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <SystemInit+0x20>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9e:	4a05      	ldr	r2, [pc, #20]	; (8002bb4 <SystemInit+0x20>)
 8002ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bbc:	480d      	ldr	r0, [pc, #52]	; (8002bf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bbe:	490e      	ldr	r1, [pc, #56]	; (8002bf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bc0:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc4:	e002      	b.n	8002bcc <LoopCopyDataInit>

08002bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bca:	3304      	adds	r3, #4

08002bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd0:	d3f9      	bcc.n	8002bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bd2:	4a0b      	ldr	r2, [pc, #44]	; (8002c00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bd4:	4c0b      	ldr	r4, [pc, #44]	; (8002c04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd8:	e001      	b.n	8002bde <LoopFillZerobss>

08002bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bdc:	3204      	adds	r2, #4

08002bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be0:	d3fb      	bcc.n	8002bda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002be2:	f7ff ffd7 	bl	8002b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002be6:	f00c fda9 	bl	800f73c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bea:	f7fd fd53 	bl	8000694 <main>
  bx  lr    
 8002bee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf8:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8002bfc:	08011288 	.word	0x08011288
  ldr r2, =_sbss
 8002c00:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8002c04:	200041b4 	.word	0x200041b4

08002c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c08:	e7fe      	b.n	8002c08 <ADC_IRQHandler>
	...

08002c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c10:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <HAL_Init+0x40>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0d      	ldr	r2, [pc, #52]	; (8002c4c <HAL_Init+0x40>)
 8002c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_Init+0x40>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <HAL_Init+0x40>)
 8002c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c28:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <HAL_Init+0x40>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a07      	ldr	r2, [pc, #28]	; (8002c4c <HAL_Init+0x40>)
 8002c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c34:	2003      	movs	r0, #3
 8002c36:	f000 f973 	bl	8002f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c3a:	200f      	movs	r0, #15
 8002c3c:	f000 f808 	bl	8002c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c40:	f7ff fcd6 	bl	80025f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023c00 	.word	0x40023c00

08002c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c58:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_InitTick+0x54>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <HAL_InitTick+0x58>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	4619      	mov	r1, r3
 8002c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f999 	bl	8002fa6 <HAL_SYSTICK_Config>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00e      	b.n	8002c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b0f      	cmp	r3, #15
 8002c82:	d80a      	bhi.n	8002c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c84:	2200      	movs	r2, #0
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	f000 f953 	bl	8002f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c90:	4a06      	ldr	r2, [pc, #24]	; (8002cac <HAL_InitTick+0x5c>)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e000      	b.n	8002c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000084 	.word	0x20000084
 8002ca8:	2000008c 	.word	0x2000008c
 8002cac:	20000088 	.word	0x20000088

08002cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <HAL_IncTick+0x20>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <HAL_IncTick+0x24>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	4a04      	ldr	r2, [pc, #16]	; (8002cd4 <HAL_IncTick+0x24>)
 8002cc2:	6013      	str	r3, [r2, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	2000008c 	.word	0x2000008c
 8002cd4:	20004064 	.word	0x20004064

08002cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return uwTick;
 8002cdc:	4b03      	ldr	r3, [pc, #12]	; (8002cec <HAL_GetTick+0x14>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	20004064 	.word	0x20004064

08002cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cf8:	f7ff ffee 	bl	8002cd8 <HAL_GetTick>
 8002cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d005      	beq.n	8002d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <HAL_Delay+0x44>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4413      	add	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d16:	bf00      	nop
 8002d18:	f7ff ffde 	bl	8002cd8 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d8f7      	bhi.n	8002d18 <HAL_Delay+0x28>
  {
  }
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	2000008c 	.word	0x2000008c

08002d38 <__NVIC_SetPriorityGrouping>:
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d54:	4013      	ands	r3, r2
 8002d56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6a:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	60d3      	str	r3, [r2, #12]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <__NVIC_GetPriorityGrouping>:
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d84:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <__NVIC_GetPriorityGrouping+0x18>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	f003 0307 	and.w	r3, r3, #7
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <__NVIC_EnableIRQ>:
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	db0b      	blt.n	8002dc6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	f003 021f 	and.w	r2, r3, #31
 8002db4:	4907      	ldr	r1, [pc, #28]	; (8002dd4 <__NVIC_EnableIRQ+0x38>)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	e000e100 	.word	0xe000e100

08002dd8 <__NVIC_DisableIRQ>:
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	db12      	blt.n	8002e10 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	f003 021f 	and.w	r2, r3, #31
 8002df0:	490a      	ldr	r1, [pc, #40]	; (8002e1c <__NVIC_DisableIRQ+0x44>)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	2001      	movs	r0, #1
 8002dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dfe:	3320      	adds	r3, #32
 8002e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e04:	f3bf 8f4f 	dsb	sy
}
 8002e08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e0a:	f3bf 8f6f 	isb	sy
}
 8002e0e:	bf00      	nop
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	e000e100 	.word	0xe000e100

08002e20 <__NVIC_SetPriority>:
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	6039      	str	r1, [r7, #0]
 8002e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	db0a      	blt.n	8002e4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	490c      	ldr	r1, [pc, #48]	; (8002e6c <__NVIC_SetPriority+0x4c>)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	0112      	lsls	r2, r2, #4
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	440b      	add	r3, r1
 8002e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e48:	e00a      	b.n	8002e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4908      	ldr	r1, [pc, #32]	; (8002e70 <__NVIC_SetPriority+0x50>)
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	3b04      	subs	r3, #4
 8002e58:	0112      	lsls	r2, r2, #4
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	761a      	strb	r2, [r3, #24]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000e100 	.word	0xe000e100
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <NVIC_EncodePriority>:
{
 8002e74:	b480      	push	{r7}
 8002e76:	b089      	sub	sp, #36	; 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f1c3 0307 	rsb	r3, r3, #7
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	bf28      	it	cs
 8002e92:	2304      	movcs	r3, #4
 8002e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3304      	adds	r3, #4
 8002e9a:	2b06      	cmp	r3, #6
 8002e9c:	d902      	bls.n	8002ea4 <NVIC_EncodePriority+0x30>
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3b03      	subs	r3, #3
 8002ea2:	e000      	b.n	8002ea6 <NVIC_EncodePriority+0x32>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec6:	43d9      	mvns	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	4313      	orrs	r3, r2
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3724      	adds	r7, #36	; 0x24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <SysTick_Config>:
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eec:	d301      	bcc.n	8002ef2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e00f      	b.n	8002f12 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ef2:	4a0a      	ldr	r2, [pc, #40]	; (8002f1c <SysTick_Config+0x40>)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002efa:	210f      	movs	r1, #15
 8002efc:	f04f 30ff 	mov.w	r0, #4294967295
 8002f00:	f7ff ff8e 	bl	8002e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <SysTick_Config+0x40>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f0a:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <SysTick_Config+0x40>)
 8002f0c:	2207      	movs	r2, #7
 8002f0e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	e000e010 	.word	0xe000e010

08002f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff ff05 	bl	8002d38 <__NVIC_SetPriorityGrouping>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b086      	sub	sp, #24
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f48:	f7ff ff1a 	bl	8002d80 <__NVIC_GetPriorityGrouping>
 8002f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	6978      	ldr	r0, [r7, #20]
 8002f54:	f7ff ff8e 	bl	8002e74 <NVIC_EncodePriority>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff5d 	bl	8002e20 <__NVIC_SetPriority>
}
 8002f66:	bf00      	nop
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	4603      	mov	r3, r0
 8002f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ff0d 	bl	8002d9c <__NVIC_EnableIRQ>
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	4603      	mov	r3, r0
 8002f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ff1d 	bl	8002dd8 <__NVIC_DisableIRQ>
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b082      	sub	sp, #8
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff ff94 	bl	8002edc <SysTick_Config>
 8002fb4:	4603      	mov	r3, r0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b084      	sub	sp, #16
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fcc:	f7ff fe84 	bl	8002cd8 <HAL_GetTick>
 8002fd0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d008      	beq.n	8002ff0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2280      	movs	r2, #128	; 0x80
 8002fe2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e052      	b.n	8003096 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0216 	bic.w	r2, r2, #22
 8002ffe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695a      	ldr	r2, [r3, #20]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800300e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	2b00      	cmp	r3, #0
 8003016:	d103      	bne.n	8003020 <HAL_DMA_Abort+0x62>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301c:	2b00      	cmp	r3, #0
 800301e:	d007      	beq.n	8003030 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0208 	bic.w	r2, r2, #8
 800302e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003040:	e013      	b.n	800306a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003042:	f7ff fe49 	bl	8002cd8 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b05      	cmp	r3, #5
 800304e:	d90c      	bls.n	800306a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2203      	movs	r2, #3
 800305a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e015      	b.n	8003096 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1e4      	bne.n	8003042 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307c:	223f      	movs	r2, #63	; 0x3f
 800307e:	409a      	lsls	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d004      	beq.n	80030bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2280      	movs	r2, #128	; 0x80
 80030b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e00c      	b.n	80030d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2205      	movs	r2, #5
 80030c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0201 	bic.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	e159      	b.n	80033b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003100:	2201      	movs	r2, #1
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	429a      	cmp	r2, r3
 800311a:	f040 8148 	bne.w	80033ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d005      	beq.n	8003136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003132:	2b02      	cmp	r3, #2
 8003134:	d130      	bne.n	8003198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	2203      	movs	r2, #3
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800316c:	2201      	movs	r2, #1
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f003 0201 	and.w	r2, r3, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d017      	beq.n	80031d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	2203      	movs	r2, #3
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d123      	bne.n	8003228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	08da      	lsrs	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3208      	adds	r2, #8
 80031e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	220f      	movs	r2, #15
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4313      	orrs	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	08da      	lsrs	r2, r3, #3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3208      	adds	r2, #8
 8003222:	69b9      	ldr	r1, [r7, #24]
 8003224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	2203      	movs	r2, #3
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 0203 	and.w	r2, r3, #3
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80a2 	beq.w	80033ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	4b57      	ldr	r3, [pc, #348]	; (80033cc <HAL_GPIO_Init+0x2e8>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	4a56      	ldr	r2, [pc, #344]	; (80033cc <HAL_GPIO_Init+0x2e8>)
 8003274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003278:	6453      	str	r3, [r2, #68]	; 0x44
 800327a:	4b54      	ldr	r3, [pc, #336]	; (80033cc <HAL_GPIO_Init+0x2e8>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003286:	4a52      	ldr	r2, [pc, #328]	; (80033d0 <HAL_GPIO_Init+0x2ec>)
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	089b      	lsrs	r3, r3, #2
 800328c:	3302      	adds	r3, #2
 800328e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	220f      	movs	r2, #15
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a49      	ldr	r2, [pc, #292]	; (80033d4 <HAL_GPIO_Init+0x2f0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d019      	beq.n	80032e6 <HAL_GPIO_Init+0x202>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a48      	ldr	r2, [pc, #288]	; (80033d8 <HAL_GPIO_Init+0x2f4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <HAL_GPIO_Init+0x1fe>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a47      	ldr	r2, [pc, #284]	; (80033dc <HAL_GPIO_Init+0x2f8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00d      	beq.n	80032de <HAL_GPIO_Init+0x1fa>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a46      	ldr	r2, [pc, #280]	; (80033e0 <HAL_GPIO_Init+0x2fc>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <HAL_GPIO_Init+0x1f6>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a45      	ldr	r2, [pc, #276]	; (80033e4 <HAL_GPIO_Init+0x300>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d101      	bne.n	80032d6 <HAL_GPIO_Init+0x1f2>
 80032d2:	2304      	movs	r3, #4
 80032d4:	e008      	b.n	80032e8 <HAL_GPIO_Init+0x204>
 80032d6:	2307      	movs	r3, #7
 80032d8:	e006      	b.n	80032e8 <HAL_GPIO_Init+0x204>
 80032da:	2303      	movs	r3, #3
 80032dc:	e004      	b.n	80032e8 <HAL_GPIO_Init+0x204>
 80032de:	2302      	movs	r3, #2
 80032e0:	e002      	b.n	80032e8 <HAL_GPIO_Init+0x204>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <HAL_GPIO_Init+0x204>
 80032e6:	2300      	movs	r3, #0
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	f002 0203 	and.w	r2, r2, #3
 80032ee:	0092      	lsls	r2, r2, #2
 80032f0:	4093      	lsls	r3, r2
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032f8:	4935      	ldr	r1, [pc, #212]	; (80033d0 <HAL_GPIO_Init+0x2ec>)
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	089b      	lsrs	r3, r3, #2
 80032fe:	3302      	adds	r3, #2
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003306:	4b38      	ldr	r3, [pc, #224]	; (80033e8 <HAL_GPIO_Init+0x304>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	43db      	mvns	r3, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4013      	ands	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800332a:	4a2f      	ldr	r2, [pc, #188]	; (80033e8 <HAL_GPIO_Init+0x304>)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003330:	4b2d      	ldr	r3, [pc, #180]	; (80033e8 <HAL_GPIO_Init+0x304>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003354:	4a24      	ldr	r2, [pc, #144]	; (80033e8 <HAL_GPIO_Init+0x304>)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800335a:	4b23      	ldr	r3, [pc, #140]	; (80033e8 <HAL_GPIO_Init+0x304>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	43db      	mvns	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800337e:	4a1a      	ldr	r2, [pc, #104]	; (80033e8 <HAL_GPIO_Init+0x304>)
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003384:	4b18      	ldr	r3, [pc, #96]	; (80033e8 <HAL_GPIO_Init+0x304>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033a8:	4a0f      	ldr	r2, [pc, #60]	; (80033e8 <HAL_GPIO_Init+0x304>)
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3301      	adds	r3, #1
 80033b2:	61fb      	str	r3, [r7, #28]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2b0f      	cmp	r3, #15
 80033b8:	f67f aea2 	bls.w	8003100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033bc:	bf00      	nop
 80033be:	bf00      	nop
 80033c0:	3724      	adds	r7, #36	; 0x24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40013800 	.word	0x40013800
 80033d4:	40020000 	.word	0x40020000
 80033d8:	40020400 	.word	0x40020400
 80033dc:	40020800 	.word	0x40020800
 80033e0:	40020c00 	.word	0x40020c00
 80033e4:	40021000 	.word	0x40021000
 80033e8:	40013c00 	.word	0x40013c00

080033ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80033fe:	2300      	movs	r3, #0
 8003400:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	e0bb      	b.n	8003580 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003408:	2201      	movs	r2, #1
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4013      	ands	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	429a      	cmp	r2, r3
 8003420:	f040 80ab 	bne.w	800357a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003424:	4a5c      	ldr	r2, [pc, #368]	; (8003598 <HAL_GPIO_DeInit+0x1ac>)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	089b      	lsrs	r3, r3, #2
 800342a:	3302      	adds	r3, #2
 800342c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003430:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	220f      	movs	r2, #15
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	4013      	ands	r3, r2
 8003444:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a54      	ldr	r2, [pc, #336]	; (800359c <HAL_GPIO_DeInit+0x1b0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d019      	beq.n	8003482 <HAL_GPIO_DeInit+0x96>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a53      	ldr	r2, [pc, #332]	; (80035a0 <HAL_GPIO_DeInit+0x1b4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d013      	beq.n	800347e <HAL_GPIO_DeInit+0x92>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a52      	ldr	r2, [pc, #328]	; (80035a4 <HAL_GPIO_DeInit+0x1b8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00d      	beq.n	800347a <HAL_GPIO_DeInit+0x8e>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a51      	ldr	r2, [pc, #324]	; (80035a8 <HAL_GPIO_DeInit+0x1bc>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d007      	beq.n	8003476 <HAL_GPIO_DeInit+0x8a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a50      	ldr	r2, [pc, #320]	; (80035ac <HAL_GPIO_DeInit+0x1c0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d101      	bne.n	8003472 <HAL_GPIO_DeInit+0x86>
 800346e:	2304      	movs	r3, #4
 8003470:	e008      	b.n	8003484 <HAL_GPIO_DeInit+0x98>
 8003472:	2307      	movs	r3, #7
 8003474:	e006      	b.n	8003484 <HAL_GPIO_DeInit+0x98>
 8003476:	2303      	movs	r3, #3
 8003478:	e004      	b.n	8003484 <HAL_GPIO_DeInit+0x98>
 800347a:	2302      	movs	r3, #2
 800347c:	e002      	b.n	8003484 <HAL_GPIO_DeInit+0x98>
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <HAL_GPIO_DeInit+0x98>
 8003482:	2300      	movs	r3, #0
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	f002 0203 	and.w	r2, r2, #3
 800348a:	0092      	lsls	r2, r2, #2
 800348c:	4093      	lsls	r3, r2
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	429a      	cmp	r2, r3
 8003492:	d132      	bne.n	80034fa <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003494:	4b46      	ldr	r3, [pc, #280]	; (80035b0 <HAL_GPIO_DeInit+0x1c4>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	43db      	mvns	r3, r3
 800349c:	4944      	ldr	r1, [pc, #272]	; (80035b0 <HAL_GPIO_DeInit+0x1c4>)
 800349e:	4013      	ands	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80034a2:	4b43      	ldr	r3, [pc, #268]	; (80035b0 <HAL_GPIO_DeInit+0x1c4>)
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	4941      	ldr	r1, [pc, #260]	; (80035b0 <HAL_GPIO_DeInit+0x1c4>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80034b0:	4b3f      	ldr	r3, [pc, #252]	; (80035b0 <HAL_GPIO_DeInit+0x1c4>)
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	43db      	mvns	r3, r3
 80034b8:	493d      	ldr	r1, [pc, #244]	; (80035b0 <HAL_GPIO_DeInit+0x1c4>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80034be:	4b3c      	ldr	r3, [pc, #240]	; (80035b0 <HAL_GPIO_DeInit+0x1c4>)
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	493a      	ldr	r1, [pc, #232]	; (80035b0 <HAL_GPIO_DeInit+0x1c4>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	220f      	movs	r2, #15
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80034dc:	4a2e      	ldr	r2, [pc, #184]	; (8003598 <HAL_GPIO_DeInit+0x1ac>)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	3302      	adds	r3, #2
 80034e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	43da      	mvns	r2, r3
 80034ec:	482a      	ldr	r0, [pc, #168]	; (8003598 <HAL_GPIO_DeInit+0x1ac>)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	089b      	lsrs	r3, r3, #2
 80034f2:	400a      	ands	r2, r1
 80034f4:	3302      	adds	r3, #2
 80034f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	2103      	movs	r1, #3
 8003504:	fa01 f303 	lsl.w	r3, r1, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	401a      	ands	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	08da      	lsrs	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3208      	adds	r2, #8
 8003518:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	220f      	movs	r2, #15
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	08d2      	lsrs	r2, r2, #3
 8003530:	4019      	ands	r1, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3208      	adds	r2, #8
 8003536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	2103      	movs	r1, #3
 8003544:	fa01 f303 	lsl.w	r3, r1, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	401a      	ands	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	2101      	movs	r1, #1
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	fa01 f303 	lsl.w	r3, r1, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	401a      	ands	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	2103      	movs	r1, #3
 800356e:	fa01 f303 	lsl.w	r3, r1, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	401a      	ands	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	3301      	adds	r3, #1
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2b0f      	cmp	r3, #15
 8003584:	f67f af40 	bls.w	8003408 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003588:	bf00      	nop
 800358a:	bf00      	nop
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40013800 	.word	0x40013800
 800359c:	40020000 	.word	0x40020000
 80035a0:	40020400 	.word	0x40020400
 80035a4:	40020800 	.word	0x40020800
 80035a8:	40020c00 	.word	0x40020c00
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40013c00 	.word	0x40013c00

080035b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	460b      	mov	r3, r1
 80035be:	807b      	strh	r3, [r7, #2]
 80035c0:	4613      	mov	r3, r2
 80035c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035c4:	787b      	ldrb	r3, [r7, #1]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035ca:	887a      	ldrh	r2, [r7, #2]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035d0:	e003      	b.n	80035da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035d2:	887b      	ldrh	r3, [r7, #2]
 80035d4:	041a      	lsls	r2, r3, #16
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	619a      	str	r2, [r3, #24]
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b085      	sub	sp, #20
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	460b      	mov	r3, r1
 80035f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035f8:	887a      	ldrh	r2, [r7, #2]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4013      	ands	r3, r2
 80035fe:	041a      	lsls	r2, r3, #16
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	43d9      	mvns	r1, r3
 8003604:	887b      	ldrh	r3, [r7, #2]
 8003606:	400b      	ands	r3, r1
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	619a      	str	r2, [r3, #24]
}
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
	...

0800361c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e267      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d075      	beq.n	8003726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800363a:	4b88      	ldr	r3, [pc, #544]	; (800385c <HAL_RCC_OscConfig+0x240>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
 8003642:	2b04      	cmp	r3, #4
 8003644:	d00c      	beq.n	8003660 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003646:	4b85      	ldr	r3, [pc, #532]	; (800385c <HAL_RCC_OscConfig+0x240>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800364e:	2b08      	cmp	r3, #8
 8003650:	d112      	bne.n	8003678 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003652:	4b82      	ldr	r3, [pc, #520]	; (800385c <HAL_RCC_OscConfig+0x240>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800365a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800365e:	d10b      	bne.n	8003678 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003660:	4b7e      	ldr	r3, [pc, #504]	; (800385c <HAL_RCC_OscConfig+0x240>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d05b      	beq.n	8003724 <HAL_RCC_OscConfig+0x108>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d157      	bne.n	8003724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e242      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003680:	d106      	bne.n	8003690 <HAL_RCC_OscConfig+0x74>
 8003682:	4b76      	ldr	r3, [pc, #472]	; (800385c <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a75      	ldr	r2, [pc, #468]	; (800385c <HAL_RCC_OscConfig+0x240>)
 8003688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	e01d      	b.n	80036cc <HAL_RCC_OscConfig+0xb0>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003698:	d10c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x98>
 800369a:	4b70      	ldr	r3, [pc, #448]	; (800385c <HAL_RCC_OscConfig+0x240>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a6f      	ldr	r2, [pc, #444]	; (800385c <HAL_RCC_OscConfig+0x240>)
 80036a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	4b6d      	ldr	r3, [pc, #436]	; (800385c <HAL_RCC_OscConfig+0x240>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a6c      	ldr	r2, [pc, #432]	; (800385c <HAL_RCC_OscConfig+0x240>)
 80036ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	e00b      	b.n	80036cc <HAL_RCC_OscConfig+0xb0>
 80036b4:	4b69      	ldr	r3, [pc, #420]	; (800385c <HAL_RCC_OscConfig+0x240>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a68      	ldr	r2, [pc, #416]	; (800385c <HAL_RCC_OscConfig+0x240>)
 80036ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	4b66      	ldr	r3, [pc, #408]	; (800385c <HAL_RCC_OscConfig+0x240>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a65      	ldr	r2, [pc, #404]	; (800385c <HAL_RCC_OscConfig+0x240>)
 80036c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d013      	beq.n	80036fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d4:	f7ff fb00 	bl	8002cd8 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036dc:	f7ff fafc 	bl	8002cd8 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b64      	cmp	r3, #100	; 0x64
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e207      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ee:	4b5b      	ldr	r3, [pc, #364]	; (800385c <HAL_RCC_OscConfig+0x240>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0xc0>
 80036fa:	e014      	b.n	8003726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7ff faec 	bl	8002cd8 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003704:	f7ff fae8 	bl	8002cd8 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	; 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e1f3      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003716:	4b51      	ldr	r3, [pc, #324]	; (800385c <HAL_RCC_OscConfig+0x240>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0xe8>
 8003722:	e000      	b.n	8003726 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d063      	beq.n	80037fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003732:	4b4a      	ldr	r3, [pc, #296]	; (800385c <HAL_RCC_OscConfig+0x240>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00b      	beq.n	8003756 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800373e:	4b47      	ldr	r3, [pc, #284]	; (800385c <HAL_RCC_OscConfig+0x240>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003746:	2b08      	cmp	r3, #8
 8003748:	d11c      	bne.n	8003784 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800374a:	4b44      	ldr	r3, [pc, #272]	; (800385c <HAL_RCC_OscConfig+0x240>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d116      	bne.n	8003784 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003756:	4b41      	ldr	r3, [pc, #260]	; (800385c <HAL_RCC_OscConfig+0x240>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d005      	beq.n	800376e <HAL_RCC_OscConfig+0x152>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d001      	beq.n	800376e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e1c7      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376e:	4b3b      	ldr	r3, [pc, #236]	; (800385c <HAL_RCC_OscConfig+0x240>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4937      	ldr	r1, [pc, #220]	; (800385c <HAL_RCC_OscConfig+0x240>)
 800377e:	4313      	orrs	r3, r2
 8003780:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003782:	e03a      	b.n	80037fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d020      	beq.n	80037ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800378c:	4b34      	ldr	r3, [pc, #208]	; (8003860 <HAL_RCC_OscConfig+0x244>)
 800378e:	2201      	movs	r2, #1
 8003790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003792:	f7ff faa1 	bl	8002cd8 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800379a:	f7ff fa9d 	bl	8002cd8 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e1a8      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ac:	4b2b      	ldr	r3, [pc, #172]	; (800385c <HAL_RCC_OscConfig+0x240>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b8:	4b28      	ldr	r3, [pc, #160]	; (800385c <HAL_RCC_OscConfig+0x240>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4925      	ldr	r1, [pc, #148]	; (800385c <HAL_RCC_OscConfig+0x240>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	600b      	str	r3, [r1, #0]
 80037cc:	e015      	b.n	80037fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ce:	4b24      	ldr	r3, [pc, #144]	; (8003860 <HAL_RCC_OscConfig+0x244>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7ff fa80 	bl	8002cd8 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037dc:	f7ff fa7c 	bl	8002cd8 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e187      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ee:	4b1b      	ldr	r3, [pc, #108]	; (800385c <HAL_RCC_OscConfig+0x240>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d036      	beq.n	8003874 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d016      	beq.n	800383c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800380e:	4b15      	ldr	r3, [pc, #84]	; (8003864 <HAL_RCC_OscConfig+0x248>)
 8003810:	2201      	movs	r2, #1
 8003812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003814:	f7ff fa60 	bl	8002cd8 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800381c:	f7ff fa5c 	bl	8002cd8 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e167      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800382e:	4b0b      	ldr	r3, [pc, #44]	; (800385c <HAL_RCC_OscConfig+0x240>)
 8003830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f0      	beq.n	800381c <HAL_RCC_OscConfig+0x200>
 800383a:	e01b      	b.n	8003874 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800383c:	4b09      	ldr	r3, [pc, #36]	; (8003864 <HAL_RCC_OscConfig+0x248>)
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003842:	f7ff fa49 	bl	8002cd8 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003848:	e00e      	b.n	8003868 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800384a:	f7ff fa45 	bl	8002cd8 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d907      	bls.n	8003868 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e150      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
 800385c:	40023800 	.word	0x40023800
 8003860:	42470000 	.word	0x42470000
 8003864:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003868:	4b88      	ldr	r3, [pc, #544]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 800386a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1ea      	bne.n	800384a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 8097 	beq.w	80039b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003882:	2300      	movs	r3, #0
 8003884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003886:	4b81      	ldr	r3, [pc, #516]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10f      	bne.n	80038b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	4b7d      	ldr	r3, [pc, #500]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	4a7c      	ldr	r2, [pc, #496]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 800389c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a0:	6413      	str	r3, [r2, #64]	; 0x40
 80038a2:	4b7a      	ldr	r3, [pc, #488]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ae:	2301      	movs	r3, #1
 80038b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b2:	4b77      	ldr	r3, [pc, #476]	; (8003a90 <HAL_RCC_OscConfig+0x474>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d118      	bne.n	80038f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038be:	4b74      	ldr	r3, [pc, #464]	; (8003a90 <HAL_RCC_OscConfig+0x474>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a73      	ldr	r2, [pc, #460]	; (8003a90 <HAL_RCC_OscConfig+0x474>)
 80038c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ca:	f7ff fa05 	bl	8002cd8 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d2:	f7ff fa01 	bl	8002cd8 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e10c      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e4:	4b6a      	ldr	r3, [pc, #424]	; (8003a90 <HAL_RCC_OscConfig+0x474>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0f0      	beq.n	80038d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d106      	bne.n	8003906 <HAL_RCC_OscConfig+0x2ea>
 80038f8:	4b64      	ldr	r3, [pc, #400]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 80038fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fc:	4a63      	ldr	r2, [pc, #396]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	6713      	str	r3, [r2, #112]	; 0x70
 8003904:	e01c      	b.n	8003940 <HAL_RCC_OscConfig+0x324>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2b05      	cmp	r3, #5
 800390c:	d10c      	bne.n	8003928 <HAL_RCC_OscConfig+0x30c>
 800390e:	4b5f      	ldr	r3, [pc, #380]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003912:	4a5e      	ldr	r2, [pc, #376]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003914:	f043 0304 	orr.w	r3, r3, #4
 8003918:	6713      	str	r3, [r2, #112]	; 0x70
 800391a:	4b5c      	ldr	r3, [pc, #368]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391e:	4a5b      	ldr	r2, [pc, #364]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	6713      	str	r3, [r2, #112]	; 0x70
 8003926:	e00b      	b.n	8003940 <HAL_RCC_OscConfig+0x324>
 8003928:	4b58      	ldr	r3, [pc, #352]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 800392a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392c:	4a57      	ldr	r2, [pc, #348]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 800392e:	f023 0301 	bic.w	r3, r3, #1
 8003932:	6713      	str	r3, [r2, #112]	; 0x70
 8003934:	4b55      	ldr	r3, [pc, #340]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003938:	4a54      	ldr	r2, [pc, #336]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 800393a:	f023 0304 	bic.w	r3, r3, #4
 800393e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d015      	beq.n	8003974 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003948:	f7ff f9c6 	bl	8002cd8 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394e:	e00a      	b.n	8003966 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003950:	f7ff f9c2 	bl	8002cd8 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f241 3288 	movw	r2, #5000	; 0x1388
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e0cb      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003966:	4b49      	ldr	r3, [pc, #292]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0ee      	beq.n	8003950 <HAL_RCC_OscConfig+0x334>
 8003972:	e014      	b.n	800399e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003974:	f7ff f9b0 	bl	8002cd8 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800397a:	e00a      	b.n	8003992 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800397c:	f7ff f9ac 	bl	8002cd8 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f241 3288 	movw	r2, #5000	; 0x1388
 800398a:	4293      	cmp	r3, r2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e0b5      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003992:	4b3e      	ldr	r3, [pc, #248]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1ee      	bne.n	800397c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800399e:	7dfb      	ldrb	r3, [r7, #23]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d105      	bne.n	80039b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a4:	4b39      	ldr	r3, [pc, #228]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	4a38      	ldr	r2, [pc, #224]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 80039aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80a1 	beq.w	8003afc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039ba:	4b34      	ldr	r3, [pc, #208]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d05c      	beq.n	8003a80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d141      	bne.n	8003a52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ce:	4b31      	ldr	r3, [pc, #196]	; (8003a94 <HAL_RCC_OscConfig+0x478>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d4:	f7ff f980 	bl	8002cd8 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039dc:	f7ff f97c 	bl	8002cd8 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e087      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ee:	4b27      	ldr	r3, [pc, #156]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69da      	ldr	r2, [r3, #28]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	019b      	lsls	r3, r3, #6
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	085b      	lsrs	r3, r3, #1
 8003a12:	3b01      	subs	r3, #1
 8003a14:	041b      	lsls	r3, r3, #16
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	061b      	lsls	r3, r3, #24
 8003a1e:	491b      	ldr	r1, [pc, #108]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a24:	4b1b      	ldr	r3, [pc, #108]	; (8003a94 <HAL_RCC_OscConfig+0x478>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2a:	f7ff f955 	bl	8002cd8 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a32:	f7ff f951 	bl	8002cd8 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e05c      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a44:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x416>
 8003a50:	e054      	b.n	8003afc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a52:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <HAL_RCC_OscConfig+0x478>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7ff f93e 	bl	8002cd8 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a60:	f7ff f93a 	bl	8002cd8 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e045      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a72:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x444>
 8003a7e:	e03d      	b.n	8003afc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d107      	bne.n	8003a98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e038      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	40007000 	.word	0x40007000
 8003a94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a98:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <HAL_RCC_OscConfig+0x4ec>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d028      	beq.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d121      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d11a      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ac8:	4013      	ands	r3, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ace:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d111      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	085b      	lsrs	r3, r3, #1
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d107      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40023800 	.word	0x40023800

08003b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0cc      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b20:	4b68      	ldr	r3, [pc, #416]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d90c      	bls.n	8003b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2e:	4b65      	ldr	r3, [pc, #404]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b63      	ldr	r3, [pc, #396]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0b8      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d020      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b60:	4b59      	ldr	r3, [pc, #356]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4a58      	ldr	r2, [pc, #352]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b78:	4b53      	ldr	r3, [pc, #332]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	4a52      	ldr	r2, [pc, #328]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b84:	4b50      	ldr	r3, [pc, #320]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	494d      	ldr	r1, [pc, #308]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d044      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003baa:	4b47      	ldr	r3, [pc, #284]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d119      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e07f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d003      	beq.n	8003bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d107      	bne.n	8003bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bca:	4b3f      	ldr	r3, [pc, #252]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e06f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bda:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e067      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bea:	4b37      	ldr	r3, [pc, #220]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f023 0203 	bic.w	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4934      	ldr	r1, [pc, #208]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bfc:	f7ff f86c 	bl	8002cd8 <HAL_GetTick>
 8003c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c02:	e00a      	b.n	8003c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c04:	f7ff f868 	bl	8002cd8 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e04f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1a:	4b2b      	ldr	r3, [pc, #172]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 020c 	and.w	r2, r3, #12
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d1eb      	bne.n	8003c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c2c:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d20c      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3a:	4b22      	ldr	r3, [pc, #136]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	4b20      	ldr	r3, [pc, #128]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e032      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c60:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4916      	ldr	r1, [pc, #88]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c7e:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	490e      	ldr	r1, [pc, #56]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c92:	f000 f821 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003c96:	4602      	mov	r2, r0
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	490a      	ldr	r1, [pc, #40]	; (8003ccc <HAL_RCC_ClockConfig+0x1c0>)
 8003ca4:	5ccb      	ldrb	r3, [r1, r3]
 8003ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8003caa:	4a09      	ldr	r2, [pc, #36]	; (8003cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cae:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fe ffcc 	bl	8002c50 <HAL_InitTick>

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40023c00 	.word	0x40023c00
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	08011058 	.word	0x08011058
 8003cd0:	20000084 	.word	0x20000084
 8003cd4:	20000088 	.word	0x20000088

08003cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cdc:	b090      	sub	sp, #64	; 0x40
 8003cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce8:	2300      	movs	r3, #0
 8003cea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cf0:	4b59      	ldr	r3, [pc, #356]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d00d      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x40>
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	f200 80a1 	bhi.w	8003e44 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <HAL_RCC_GetSysClockFreq+0x34>
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d003      	beq.n	8003d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d0a:	e09b      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d0c:	4b53      	ldr	r3, [pc, #332]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x184>)
 8003d0e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d10:	e09b      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d12:	4b53      	ldr	r3, [pc, #332]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d16:	e098      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d18:	4b4f      	ldr	r3, [pc, #316]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d20:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d22:	4b4d      	ldr	r3, [pc, #308]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d028      	beq.n	8003d80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d2e:	4b4a      	ldr	r3, [pc, #296]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	099b      	lsrs	r3, r3, #6
 8003d34:	2200      	movs	r2, #0
 8003d36:	623b      	str	r3, [r7, #32]
 8003d38:	627a      	str	r2, [r7, #36]	; 0x24
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d40:	2100      	movs	r1, #0
 8003d42:	4b47      	ldr	r3, [pc, #284]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d44:	fb03 f201 	mul.w	r2, r3, r1
 8003d48:	2300      	movs	r3, #0
 8003d4a:	fb00 f303 	mul.w	r3, r0, r3
 8003d4e:	4413      	add	r3, r2
 8003d50:	4a43      	ldr	r2, [pc, #268]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d52:	fba0 1202 	umull	r1, r2, r0, r2
 8003d56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d58:	460a      	mov	r2, r1
 8003d5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d5e:	4413      	add	r3, r2
 8003d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d64:	2200      	movs	r2, #0
 8003d66:	61bb      	str	r3, [r7, #24]
 8003d68:	61fa      	str	r2, [r7, #28]
 8003d6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d72:	f7fc fa9d 	bl	80002b0 <__aeabi_uldivmod>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d7e:	e053      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d80:	4b35      	ldr	r3, [pc, #212]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	099b      	lsrs	r3, r3, #6
 8003d86:	2200      	movs	r2, #0
 8003d88:	613b      	str	r3, [r7, #16]
 8003d8a:	617a      	str	r2, [r7, #20]
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d92:	f04f 0b00 	mov.w	fp, #0
 8003d96:	4652      	mov	r2, sl
 8003d98:	465b      	mov	r3, fp
 8003d9a:	f04f 0000 	mov.w	r0, #0
 8003d9e:	f04f 0100 	mov.w	r1, #0
 8003da2:	0159      	lsls	r1, r3, #5
 8003da4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003da8:	0150      	lsls	r0, r2, #5
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	ebb2 080a 	subs.w	r8, r2, sl
 8003db2:	eb63 090b 	sbc.w	r9, r3, fp
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003dc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003dc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003dca:	ebb2 0408 	subs.w	r4, r2, r8
 8003dce:	eb63 0509 	sbc.w	r5, r3, r9
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	00eb      	lsls	r3, r5, #3
 8003ddc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003de0:	00e2      	lsls	r2, r4, #3
 8003de2:	4614      	mov	r4, r2
 8003de4:	461d      	mov	r5, r3
 8003de6:	eb14 030a 	adds.w	r3, r4, sl
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	eb45 030b 	adc.w	r3, r5, fp
 8003df0:	607b      	str	r3, [r7, #4]
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dfe:	4629      	mov	r1, r5
 8003e00:	028b      	lsls	r3, r1, #10
 8003e02:	4621      	mov	r1, r4
 8003e04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e08:	4621      	mov	r1, r4
 8003e0a:	028a      	lsls	r2, r1, #10
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e12:	2200      	movs	r2, #0
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	60fa      	str	r2, [r7, #12]
 8003e18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e1c:	f7fc fa48 	bl	80002b0 <__aeabi_uldivmod>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4613      	mov	r3, r2
 8003e26:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	0c1b      	lsrs	r3, r3, #16
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	3301      	adds	r3, #1
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003e38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e42:	e002      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e44:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x184>)
 8003e46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3740      	adds	r7, #64	; 0x40
 8003e50:	46bd      	mov	sp, r7
 8003e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e56:	bf00      	nop
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	00f42400 	.word	0x00f42400
 8003e60:	017d7840 	.word	0x017d7840

08003e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e68:	4b03      	ldr	r3, [pc, #12]	; (8003e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	20000084 	.word	0x20000084

08003e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e80:	f7ff fff0 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003e84:	4602      	mov	r2, r0
 8003e86:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	0a9b      	lsrs	r3, r3, #10
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	4903      	ldr	r1, [pc, #12]	; (8003ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e92:	5ccb      	ldrb	r3, [r1, r3]
 8003e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	08011068 	.word	0x08011068

08003ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ea8:	f7ff ffdc 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003eac:	4602      	mov	r2, r0
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	0b5b      	lsrs	r3, r3, #13
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	4903      	ldr	r1, [pc, #12]	; (8003ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eba:	5ccb      	ldrb	r3, [r1, r3]
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	08011068 	.word	0x08011068

08003ecc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e07b      	b.n	8003fd6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d108      	bne.n	8003ef8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eee:	d009      	beq.n	8003f04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	61da      	str	r2, [r3, #28]
 8003ef6:	e005      	b.n	8003f04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fe fb8e 	bl	8002640 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f88:	ea42 0103 	orr.w	r1, r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	f003 0104 	and.w	r1, r3, #4
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	f003 0210 	and.w	r2, r3, #16
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69da      	ldr	r2, [r3, #28]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b08c      	sub	sp, #48	; 0x30
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fec:	2301      	movs	r3, #1
 8003fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_SPI_TransmitReceive+0x26>
 8004000:	2302      	movs	r3, #2
 8004002:	e18a      	b.n	800431a <HAL_SPI_TransmitReceive+0x33c>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800400c:	f7fe fe64 	bl	8002cd8 <HAL_GetTick>
 8004010:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004018:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004022:	887b      	ldrh	r3, [r7, #2]
 8004024:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004026:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800402a:	2b01      	cmp	r3, #1
 800402c:	d00f      	beq.n	800404e <HAL_SPI_TransmitReceive+0x70>
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004034:	d107      	bne.n	8004046 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d103      	bne.n	8004046 <HAL_SPI_TransmitReceive+0x68>
 800403e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004042:	2b04      	cmp	r3, #4
 8004044:	d003      	beq.n	800404e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004046:	2302      	movs	r3, #2
 8004048:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800404c:	e15b      	b.n	8004306 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_SPI_TransmitReceive+0x82>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_SPI_TransmitReceive+0x82>
 800405a:	887b      	ldrh	r3, [r7, #2]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d103      	bne.n	8004068 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004066:	e14e      	b.n	8004306 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b04      	cmp	r3, #4
 8004072:	d003      	beq.n	800407c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2205      	movs	r2, #5
 8004078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	887a      	ldrh	r2, [r7, #2]
 800408c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	887a      	ldrh	r2, [r7, #2]
 8004092:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	887a      	ldrh	r2, [r7, #2]
 800409e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	887a      	ldrh	r2, [r7, #2]
 80040a4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040bc:	2b40      	cmp	r3, #64	; 0x40
 80040be:	d007      	beq.n	80040d0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d8:	d178      	bne.n	80041cc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <HAL_SPI_TransmitReceive+0x10a>
 80040e2:	8b7b      	ldrh	r3, [r7, #26]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d166      	bne.n	80041b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	881a      	ldrh	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	1c9a      	adds	r2, r3, #2
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800410c:	e053      	b.n	80041b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b02      	cmp	r3, #2
 800411a:	d11b      	bne.n	8004154 <HAL_SPI_TransmitReceive+0x176>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d016      	beq.n	8004154 <HAL_SPI_TransmitReceive+0x176>
 8004126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004128:	2b01      	cmp	r3, #1
 800412a:	d113      	bne.n	8004154 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004130:	881a      	ldrh	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	1c9a      	adds	r2, r3, #2
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b01      	cmp	r3, #1
 8004160:	d119      	bne.n	8004196 <HAL_SPI_TransmitReceive+0x1b8>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004166:	b29b      	uxth	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d014      	beq.n	8004196 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	b292      	uxth	r2, r2
 8004178:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	1c9a      	adds	r2, r3, #2
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004188:	b29b      	uxth	r3, r3
 800418a:	3b01      	subs	r3, #1
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004192:	2301      	movs	r3, #1
 8004194:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004196:	f7fe fd9f 	bl	8002cd8 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d807      	bhi.n	80041b6 <HAL_SPI_TransmitReceive+0x1d8>
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ac:	d003      	beq.n	80041b6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80041b4:	e0a7      	b.n	8004306 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1a6      	bne.n	800410e <HAL_SPI_TransmitReceive+0x130>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1a1      	bne.n	800410e <HAL_SPI_TransmitReceive+0x130>
 80041ca:	e07c      	b.n	80042c6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_SPI_TransmitReceive+0x1fc>
 80041d4:	8b7b      	ldrh	r3, [r7, #26]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d16b      	bne.n	80042b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	330c      	adds	r3, #12
 80041e4:	7812      	ldrb	r2, [r2, #0]
 80041e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004200:	e057      	b.n	80042b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b02      	cmp	r3, #2
 800420e:	d11c      	bne.n	800424a <HAL_SPI_TransmitReceive+0x26c>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d017      	beq.n	800424a <HAL_SPI_TransmitReceive+0x26c>
 800421a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421c:	2b01      	cmp	r3, #1
 800421e:	d114      	bne.n	800424a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	330c      	adds	r3, #12
 800422a:	7812      	ldrb	r2, [r2, #0]
 800422c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b01      	cmp	r3, #1
 8004256:	d119      	bne.n	800428c <HAL_SPI_TransmitReceive+0x2ae>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d014      	beq.n	800428c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800427e:	b29b      	uxth	r3, r3
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004288:	2301      	movs	r3, #1
 800428a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800428c:	f7fe fd24 	bl	8002cd8 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004298:	429a      	cmp	r2, r3
 800429a:	d803      	bhi.n	80042a4 <HAL_SPI_TransmitReceive+0x2c6>
 800429c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a2:	d102      	bne.n	80042aa <HAL_SPI_TransmitReceive+0x2cc>
 80042a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d103      	bne.n	80042b2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80042b0:	e029      	b.n	8004306 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1a2      	bne.n	8004202 <HAL_SPI_TransmitReceive+0x224>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d19d      	bne.n	8004202 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f8b2 	bl	8004434 <SPI_EndRxTxTransaction>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d006      	beq.n	80042e4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80042e2:	e010      	b.n	8004306 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10b      	bne.n	8004304 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	e000      	b.n	8004306 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004304:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004316:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800431a:	4618      	mov	r0, r3
 800431c:	3730      	adds	r7, #48	; 0x30
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	4613      	mov	r3, r2
 8004332:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004334:	f7fe fcd0 	bl	8002cd8 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	4413      	add	r3, r2
 8004342:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004344:	f7fe fcc8 	bl	8002cd8 <HAL_GetTick>
 8004348:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800434a:	4b39      	ldr	r3, [pc, #228]	; (8004430 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	015b      	lsls	r3, r3, #5
 8004350:	0d1b      	lsrs	r3, r3, #20
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	fb02 f303 	mul.w	r3, r2, r3
 8004358:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800435a:	e054      	b.n	8004406 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004362:	d050      	beq.n	8004406 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004364:	f7fe fcb8 	bl	8002cd8 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	69fa      	ldr	r2, [r7, #28]
 8004370:	429a      	cmp	r2, r3
 8004372:	d902      	bls.n	800437a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d13d      	bne.n	80043f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004388:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004392:	d111      	bne.n	80043b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800439c:	d004      	beq.n	80043a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a6:	d107      	bne.n	80043b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c0:	d10f      	bne.n	80043e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e017      	b.n	8004426 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	3b01      	subs	r3, #1
 8004404:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4013      	ands	r3, r2
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	429a      	cmp	r2, r3
 8004414:	bf0c      	ite	eq
 8004416:	2301      	moveq	r3, #1
 8004418:	2300      	movne	r3, #0
 800441a:	b2db      	uxtb	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	429a      	cmp	r2, r3
 8004422:	d19b      	bne.n	800435c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20000084 	.word	0x20000084

08004434 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004440:	4b1b      	ldr	r3, [pc, #108]	; (80044b0 <SPI_EndRxTxTransaction+0x7c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1b      	ldr	r2, [pc, #108]	; (80044b4 <SPI_EndRxTxTransaction+0x80>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	0d5b      	lsrs	r3, r3, #21
 800444c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004450:	fb02 f303 	mul.w	r3, r2, r3
 8004454:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800445e:	d112      	bne.n	8004486 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2200      	movs	r2, #0
 8004468:	2180      	movs	r1, #128	; 0x80
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f7ff ff5a 	bl	8004324 <SPI_WaitFlagStateUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d016      	beq.n	80044a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447a:	f043 0220 	orr.w	r2, r3, #32
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e00f      	b.n	80044a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00a      	beq.n	80044a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	3b01      	subs	r3, #1
 8004490:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449c:	2b80      	cmp	r3, #128	; 0x80
 800449e:	d0f2      	beq.n	8004486 <SPI_EndRxTxTransaction+0x52>
 80044a0:	e000      	b.n	80044a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80044a2:	bf00      	nop
  }

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20000084 	.word	0x20000084
 80044b4:	165e9f81 	.word	0x165e9f81

080044b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e041      	b.n	800454e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d106      	bne.n	80044e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7fe f8f6 	bl	80026d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3304      	adds	r3, #4
 80044f4:	4619      	mov	r1, r3
 80044f6:	4610      	mov	r0, r2
 80044f8:	f000 fce4 	bl	8004ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b082      	sub	sp, #8
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e041      	b.n	80045ec <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d106      	bne.n	8004582 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f839 	bl	80045f4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2202      	movs	r2, #2
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3304      	adds	r3, #4
 8004592:	4619      	mov	r1, r3
 8004594:	4610      	mov	r0, r2
 8004596:	f000 fc95 	bl	8004ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d109      	bne.n	8004630 <HAL_TIM_OC_Start_IT+0x28>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b01      	cmp	r3, #1
 8004626:	bf14      	ite	ne
 8004628:	2301      	movne	r3, #1
 800462a:	2300      	moveq	r3, #0
 800462c:	b2db      	uxtb	r3, r3
 800462e:	e022      	b.n	8004676 <HAL_TIM_OC_Start_IT+0x6e>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b04      	cmp	r3, #4
 8004634:	d109      	bne.n	800464a <HAL_TIM_OC_Start_IT+0x42>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b01      	cmp	r3, #1
 8004640:	bf14      	ite	ne
 8004642:	2301      	movne	r3, #1
 8004644:	2300      	moveq	r3, #0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	e015      	b.n	8004676 <HAL_TIM_OC_Start_IT+0x6e>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b08      	cmp	r3, #8
 800464e:	d109      	bne.n	8004664 <HAL_TIM_OC_Start_IT+0x5c>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b01      	cmp	r3, #1
 800465a:	bf14      	ite	ne
 800465c:	2301      	movne	r3, #1
 800465e:	2300      	moveq	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	e008      	b.n	8004676 <HAL_TIM_OC_Start_IT+0x6e>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b01      	cmp	r3, #1
 800466e:	bf14      	ite	ne
 8004670:	2301      	movne	r3, #1
 8004672:	2300      	moveq	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e0b3      	b.n	80047e6 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d104      	bne.n	800468e <HAL_TIM_OC_Start_IT+0x86>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800468c:	e013      	b.n	80046b6 <HAL_TIM_OC_Start_IT+0xae>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b04      	cmp	r3, #4
 8004692:	d104      	bne.n	800469e <HAL_TIM_OC_Start_IT+0x96>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800469c:	e00b      	b.n	80046b6 <HAL_TIM_OC_Start_IT+0xae>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d104      	bne.n	80046ae <HAL_TIM_OC_Start_IT+0xa6>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046ac:	e003      	b.n	80046b6 <HAL_TIM_OC_Start_IT+0xae>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2202      	movs	r2, #2
 80046b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b0c      	cmp	r3, #12
 80046ba:	d841      	bhi.n	8004740 <HAL_TIM_OC_Start_IT+0x138>
 80046bc:	a201      	add	r2, pc, #4	; (adr r2, 80046c4 <HAL_TIM_OC_Start_IT+0xbc>)
 80046be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c2:	bf00      	nop
 80046c4:	080046f9 	.word	0x080046f9
 80046c8:	08004741 	.word	0x08004741
 80046cc:	08004741 	.word	0x08004741
 80046d0:	08004741 	.word	0x08004741
 80046d4:	0800470b 	.word	0x0800470b
 80046d8:	08004741 	.word	0x08004741
 80046dc:	08004741 	.word	0x08004741
 80046e0:	08004741 	.word	0x08004741
 80046e4:	0800471d 	.word	0x0800471d
 80046e8:	08004741 	.word	0x08004741
 80046ec:	08004741 	.word	0x08004741
 80046f0:	08004741 	.word	0x08004741
 80046f4:	0800472f 	.word	0x0800472f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0202 	orr.w	r2, r2, #2
 8004706:	60da      	str	r2, [r3, #12]
      break;
 8004708:	e01d      	b.n	8004746 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0204 	orr.w	r2, r2, #4
 8004718:	60da      	str	r2, [r3, #12]
      break;
 800471a:	e014      	b.n	8004746 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0208 	orr.w	r2, r2, #8
 800472a:	60da      	str	r2, [r3, #12]
      break;
 800472c:	e00b      	b.n	8004746 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f042 0210 	orr.w	r2, r2, #16
 800473c:	60da      	str	r2, [r3, #12]
      break;
 800473e:	e002      	b.n	8004746 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
      break;
 8004744:	bf00      	nop
  }

  if (status == HAL_OK)
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d14b      	bne.n	80047e4 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2201      	movs	r2, #1
 8004752:	6839      	ldr	r1, [r7, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f000 fe5b 	bl	8005410 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a24      	ldr	r2, [pc, #144]	; (80047f0 <HAL_TIM_OC_Start_IT+0x1e8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d107      	bne.n	8004774 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004772:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1d      	ldr	r2, [pc, #116]	; (80047f0 <HAL_TIM_OC_Start_IT+0x1e8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d018      	beq.n	80047b0 <HAL_TIM_OC_Start_IT+0x1a8>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004786:	d013      	beq.n	80047b0 <HAL_TIM_OC_Start_IT+0x1a8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a19      	ldr	r2, [pc, #100]	; (80047f4 <HAL_TIM_OC_Start_IT+0x1ec>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00e      	beq.n	80047b0 <HAL_TIM_OC_Start_IT+0x1a8>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a18      	ldr	r2, [pc, #96]	; (80047f8 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d009      	beq.n	80047b0 <HAL_TIM_OC_Start_IT+0x1a8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a16      	ldr	r2, [pc, #88]	; (80047fc <HAL_TIM_OC_Start_IT+0x1f4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d004      	beq.n	80047b0 <HAL_TIM_OC_Start_IT+0x1a8>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a15      	ldr	r2, [pc, #84]	; (8004800 <HAL_TIM_OC_Start_IT+0x1f8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d111      	bne.n	80047d4 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b06      	cmp	r3, #6
 80047c0:	d010      	beq.n	80047e4 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f042 0201 	orr.w	r2, r2, #1
 80047d0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d2:	e007      	b.n	80047e4 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40010000 	.word	0x40010000
 80047f4:	40000400 	.word	0x40000400
 80047f8:	40000800 	.word	0x40000800
 80047fc:	40000c00 	.word	0x40000c00
 8004800:	40014000 	.word	0x40014000

08004804 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b0c      	cmp	r3, #12
 8004816:	d841      	bhi.n	800489c <HAL_TIM_OC_Stop_IT+0x98>
 8004818:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <HAL_TIM_OC_Stop_IT+0x1c>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	08004855 	.word	0x08004855
 8004824:	0800489d 	.word	0x0800489d
 8004828:	0800489d 	.word	0x0800489d
 800482c:	0800489d 	.word	0x0800489d
 8004830:	08004867 	.word	0x08004867
 8004834:	0800489d 	.word	0x0800489d
 8004838:	0800489d 	.word	0x0800489d
 800483c:	0800489d 	.word	0x0800489d
 8004840:	08004879 	.word	0x08004879
 8004844:	0800489d 	.word	0x0800489d
 8004848:	0800489d 	.word	0x0800489d
 800484c:	0800489d 	.word	0x0800489d
 8004850:	0800488b 	.word	0x0800488b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0202 	bic.w	r2, r2, #2
 8004862:	60da      	str	r2, [r3, #12]
      break;
 8004864:	e01d      	b.n	80048a2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0204 	bic.w	r2, r2, #4
 8004874:	60da      	str	r2, [r3, #12]
      break;
 8004876:	e014      	b.n	80048a2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0208 	bic.w	r2, r2, #8
 8004886:	60da      	str	r2, [r3, #12]
      break;
 8004888:	e00b      	b.n	80048a2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0210 	bic.w	r2, r2, #16
 8004898:	60da      	str	r2, [r3, #12]
      break;
 800489a:	e002      	b.n	80048a2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
      break;
 80048a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d157      	bne.n	8004958 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2200      	movs	r2, #0
 80048ae:	6839      	ldr	r1, [r7, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fdad 	bl	8005410 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a2a      	ldr	r2, [pc, #168]	; (8004964 <HAL_TIM_OC_Stop_IT+0x160>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d117      	bne.n	80048f0 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6a1a      	ldr	r2, [r3, #32]
 80048c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10f      	bne.n	80048f0 <HAL_TIM_OC_Stop_IT+0xec>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6a1a      	ldr	r2, [r3, #32]
 80048d6:	f240 4344 	movw	r3, #1092	; 0x444
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d107      	bne.n	80048f0 <HAL_TIM_OC_Stop_IT+0xec>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048ee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6a1a      	ldr	r2, [r3, #32]
 80048f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80048fa:	4013      	ands	r3, r2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10f      	bne.n	8004920 <HAL_TIM_OC_Stop_IT+0x11c>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6a1a      	ldr	r2, [r3, #32]
 8004906:	f240 4344 	movw	r3, #1092	; 0x444
 800490a:	4013      	ands	r3, r2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d107      	bne.n	8004920 <HAL_TIM_OC_Stop_IT+0x11c>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0201 	bic.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d104      	bne.n	8004930 <HAL_TIM_OC_Stop_IT+0x12c>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800492e:	e013      	b.n	8004958 <HAL_TIM_OC_Stop_IT+0x154>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b04      	cmp	r3, #4
 8004934:	d104      	bne.n	8004940 <HAL_TIM_OC_Stop_IT+0x13c>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800493e:	e00b      	b.n	8004958 <HAL_TIM_OC_Stop_IT+0x154>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b08      	cmp	r3, #8
 8004944:	d104      	bne.n	8004950 <HAL_TIM_OC_Stop_IT+0x14c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800494e:	e003      	b.n	8004958 <HAL_TIM_OC_Stop_IT+0x154>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004958:	7bfb      	ldrb	r3, [r7, #15]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40010000 	.word	0x40010000

08004968 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e041      	b.n	8004a00 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d106      	bne.n	8004996 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f839 	bl	8004a08 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2202      	movs	r2, #2
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3304      	adds	r3, #4
 80049a6:	4619      	mov	r1, r3
 80049a8:	4610      	mov	r0, r2
 80049aa:	f000 fa8b 	bl	8004ec4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0208 	bic.w	r2, r2, #8
 80049bc:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6819      	ldr	r1, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d122      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d11b      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0202 	mvn.w	r2, #2
 8004a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fa11 	bl	8004e86 <HAL_TIM_IC_CaptureCallback>
 8004a64:	e005      	b.n	8004a72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7fd fc36 	bl	80022d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fa14 	bl	8004e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d122      	bne.n	8004acc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d11b      	bne.n	8004acc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0204 	mvn.w	r2, #4
 8004a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f9e7 	bl	8004e86 <HAL_TIM_IC_CaptureCallback>
 8004ab8:	e005      	b.n	8004ac6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7fd fc0c 	bl	80022d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f9ea 	bl	8004e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d122      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d11b      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0208 	mvn.w	r2, #8
 8004af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2204      	movs	r2, #4
 8004af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f9bd 	bl	8004e86 <HAL_TIM_IC_CaptureCallback>
 8004b0c:	e005      	b.n	8004b1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fd fbe2 	bl	80022d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f9c0 	bl	8004e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0310 	and.w	r3, r3, #16
 8004b2a:	2b10      	cmp	r3, #16
 8004b2c:	d122      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0310 	and.w	r3, r3, #16
 8004b38:	2b10      	cmp	r3, #16
 8004b3a:	d11b      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f06f 0210 	mvn.w	r2, #16
 8004b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2208      	movs	r2, #8
 8004b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f993 	bl	8004e86 <HAL_TIM_IC_CaptureCallback>
 8004b60:	e005      	b.n	8004b6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fd fbb8 	bl	80022d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f996 	bl	8004e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d10e      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d107      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0201 	mvn.w	r2, #1
 8004b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f969 	bl	8004e72 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004baa:	2b80      	cmp	r3, #128	; 0x80
 8004bac:	d10e      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb8:	2b80      	cmp	r3, #128	; 0x80
 8004bba:	d107      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fcc0 	bl	800554c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd6:	2b40      	cmp	r3, #64	; 0x40
 8004bd8:	d10e      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be4:	2b40      	cmp	r3, #64	; 0x40
 8004be6:	d107      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f95b 	bl	8004eae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0320 	and.w	r3, r3, #32
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	d10e      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b20      	cmp	r3, #32
 8004c12:	d107      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0220 	mvn.w	r2, #32
 8004c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fc8a 	bl	8005538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c24:	bf00      	nop
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d101      	bne.n	8004c4a <HAL_TIM_OC_ConfigChannel+0x1e>
 8004c46:	2302      	movs	r3, #2
 8004c48:	e048      	b.n	8004cdc <HAL_TIM_OC_ConfigChannel+0xb0>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b0c      	cmp	r3, #12
 8004c56:	d839      	bhi.n	8004ccc <HAL_TIM_OC_ConfigChannel+0xa0>
 8004c58:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5e:	bf00      	nop
 8004c60:	08004c95 	.word	0x08004c95
 8004c64:	08004ccd 	.word	0x08004ccd
 8004c68:	08004ccd 	.word	0x08004ccd
 8004c6c:	08004ccd 	.word	0x08004ccd
 8004c70:	08004ca3 	.word	0x08004ca3
 8004c74:	08004ccd 	.word	0x08004ccd
 8004c78:	08004ccd 	.word	0x08004ccd
 8004c7c:	08004ccd 	.word	0x08004ccd
 8004c80:	08004cb1 	.word	0x08004cb1
 8004c84:	08004ccd 	.word	0x08004ccd
 8004c88:	08004ccd 	.word	0x08004ccd
 8004c8c:	08004ccd 	.word	0x08004ccd
 8004c90:	08004cbf 	.word	0x08004cbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 f992 	bl	8004fc4 <TIM_OC1_SetConfig>
      break;
 8004ca0:	e017      	b.n	8004cd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68b9      	ldr	r1, [r7, #8]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 f9f1 	bl	8005090 <TIM_OC2_SetConfig>
      break;
 8004cae:	e010      	b.n	8004cd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fa56 	bl	8005168 <TIM_OC3_SetConfig>
      break;
 8004cbc:	e009      	b.n	8004cd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fab9 	bl	800523c <TIM_OC4_SetConfig>
      break;
 8004cca:	e002      	b.n	8004cd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	75fb      	strb	r3, [r7, #23]
      break;
 8004cd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_TIM_ConfigClockSource+0x1c>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e0b4      	b.n	8004e6a <HAL_TIM_ConfigClockSource+0x186>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d38:	d03e      	beq.n	8004db8 <HAL_TIM_ConfigClockSource+0xd4>
 8004d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d3e:	f200 8087 	bhi.w	8004e50 <HAL_TIM_ConfigClockSource+0x16c>
 8004d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d46:	f000 8086 	beq.w	8004e56 <HAL_TIM_ConfigClockSource+0x172>
 8004d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d4e:	d87f      	bhi.n	8004e50 <HAL_TIM_ConfigClockSource+0x16c>
 8004d50:	2b70      	cmp	r3, #112	; 0x70
 8004d52:	d01a      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0xa6>
 8004d54:	2b70      	cmp	r3, #112	; 0x70
 8004d56:	d87b      	bhi.n	8004e50 <HAL_TIM_ConfigClockSource+0x16c>
 8004d58:	2b60      	cmp	r3, #96	; 0x60
 8004d5a:	d050      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x11a>
 8004d5c:	2b60      	cmp	r3, #96	; 0x60
 8004d5e:	d877      	bhi.n	8004e50 <HAL_TIM_ConfigClockSource+0x16c>
 8004d60:	2b50      	cmp	r3, #80	; 0x50
 8004d62:	d03c      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0xfa>
 8004d64:	2b50      	cmp	r3, #80	; 0x50
 8004d66:	d873      	bhi.n	8004e50 <HAL_TIM_ConfigClockSource+0x16c>
 8004d68:	2b40      	cmp	r3, #64	; 0x40
 8004d6a:	d058      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0x13a>
 8004d6c:	2b40      	cmp	r3, #64	; 0x40
 8004d6e:	d86f      	bhi.n	8004e50 <HAL_TIM_ConfigClockSource+0x16c>
 8004d70:	2b30      	cmp	r3, #48	; 0x30
 8004d72:	d064      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0x15a>
 8004d74:	2b30      	cmp	r3, #48	; 0x30
 8004d76:	d86b      	bhi.n	8004e50 <HAL_TIM_ConfigClockSource+0x16c>
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	d060      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0x15a>
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	d867      	bhi.n	8004e50 <HAL_TIM_ConfigClockSource+0x16c>
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d05c      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0x15a>
 8004d84:	2b10      	cmp	r3, #16
 8004d86:	d05a      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0x15a>
 8004d88:	e062      	b.n	8004e50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	6899      	ldr	r1, [r3, #8]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f000 fb19 	bl	80053d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	609a      	str	r2, [r3, #8]
      break;
 8004db6:	e04f      	b.n	8004e58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6818      	ldr	r0, [r3, #0]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	6899      	ldr	r1, [r3, #8]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f000 fb02 	bl	80053d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dda:	609a      	str	r2, [r3, #8]
      break;
 8004ddc:	e03c      	b.n	8004e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	6859      	ldr	r1, [r3, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	461a      	mov	r2, r3
 8004dec:	f000 fa76 	bl	80052dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2150      	movs	r1, #80	; 0x50
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 facf 	bl	800539a <TIM_ITRx_SetConfig>
      break;
 8004dfc:	e02c      	b.n	8004e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	6859      	ldr	r1, [r3, #4]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f000 fa95 	bl	800533a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2160      	movs	r1, #96	; 0x60
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fabf 	bl	800539a <TIM_ITRx_SetConfig>
      break;
 8004e1c:	e01c      	b.n	8004e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	6859      	ldr	r1, [r3, #4]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f000 fa56 	bl	80052dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2140      	movs	r1, #64	; 0x40
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 faaf 	bl	800539a <TIM_ITRx_SetConfig>
      break;
 8004e3c:	e00c      	b.n	8004e58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4619      	mov	r1, r3
 8004e48:	4610      	mov	r0, r2
 8004e4a:	f000 faa6 	bl	800539a <TIM_ITRx_SetConfig>
      break;
 8004e4e:	e003      	b.n	8004e58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	73fb      	strb	r3, [r7, #15]
      break;
 8004e54:	e000      	b.n	8004e58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b083      	sub	sp, #12
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ea2:	bf00      	nop
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
	...

08004ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a34      	ldr	r2, [pc, #208]	; (8004fa8 <TIM_Base_SetConfig+0xe4>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00f      	beq.n	8004efc <TIM_Base_SetConfig+0x38>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee2:	d00b      	beq.n	8004efc <TIM_Base_SetConfig+0x38>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a31      	ldr	r2, [pc, #196]	; (8004fac <TIM_Base_SetConfig+0xe8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d007      	beq.n	8004efc <TIM_Base_SetConfig+0x38>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a30      	ldr	r2, [pc, #192]	; (8004fb0 <TIM_Base_SetConfig+0xec>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d003      	beq.n	8004efc <TIM_Base_SetConfig+0x38>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a2f      	ldr	r2, [pc, #188]	; (8004fb4 <TIM_Base_SetConfig+0xf0>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d108      	bne.n	8004f0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a25      	ldr	r2, [pc, #148]	; (8004fa8 <TIM_Base_SetConfig+0xe4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d01b      	beq.n	8004f4e <TIM_Base_SetConfig+0x8a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1c:	d017      	beq.n	8004f4e <TIM_Base_SetConfig+0x8a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a22      	ldr	r2, [pc, #136]	; (8004fac <TIM_Base_SetConfig+0xe8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d013      	beq.n	8004f4e <TIM_Base_SetConfig+0x8a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a21      	ldr	r2, [pc, #132]	; (8004fb0 <TIM_Base_SetConfig+0xec>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00f      	beq.n	8004f4e <TIM_Base_SetConfig+0x8a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a20      	ldr	r2, [pc, #128]	; (8004fb4 <TIM_Base_SetConfig+0xf0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d00b      	beq.n	8004f4e <TIM_Base_SetConfig+0x8a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a1f      	ldr	r2, [pc, #124]	; (8004fb8 <TIM_Base_SetConfig+0xf4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d007      	beq.n	8004f4e <TIM_Base_SetConfig+0x8a>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a1e      	ldr	r2, [pc, #120]	; (8004fbc <TIM_Base_SetConfig+0xf8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d003      	beq.n	8004f4e <TIM_Base_SetConfig+0x8a>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a1d      	ldr	r2, [pc, #116]	; (8004fc0 <TIM_Base_SetConfig+0xfc>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d108      	bne.n	8004f60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a08      	ldr	r2, [pc, #32]	; (8004fa8 <TIM_Base_SetConfig+0xe4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d103      	bne.n	8004f94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	615a      	str	r2, [r3, #20]
}
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40010000 	.word	0x40010000
 8004fac:	40000400 	.word	0x40000400
 8004fb0:	40000800 	.word	0x40000800
 8004fb4:	40000c00 	.word	0x40000c00
 8004fb8:	40014000 	.word	0x40014000
 8004fbc:	40014400 	.word	0x40014400
 8004fc0:	40014800 	.word	0x40014800

08004fc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	f023 0201 	bic.w	r2, r3, #1
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 0303 	bic.w	r3, r3, #3
 8004ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f023 0302 	bic.w	r3, r3, #2
 800500c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a1c      	ldr	r2, [pc, #112]	; (800508c <TIM_OC1_SetConfig+0xc8>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d10c      	bne.n	800503a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f023 0308 	bic.w	r3, r3, #8
 8005026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f023 0304 	bic.w	r3, r3, #4
 8005038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a13      	ldr	r2, [pc, #76]	; (800508c <TIM_OC1_SetConfig+0xc8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d111      	bne.n	8005066 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	4313      	orrs	r3, r2
 8005064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	621a      	str	r2, [r3, #32]
}
 8005080:	bf00      	nop
 8005082:	371c      	adds	r7, #28
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	40010000 	.word	0x40010000

08005090 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	f023 0210 	bic.w	r2, r3, #16
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	021b      	lsls	r3, r3, #8
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f023 0320 	bic.w	r3, r3, #32
 80050da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a1e      	ldr	r2, [pc, #120]	; (8005164 <TIM_OC2_SetConfig+0xd4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d10d      	bne.n	800510c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800510a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a15      	ldr	r2, [pc, #84]	; (8005164 <TIM_OC2_SetConfig+0xd4>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d113      	bne.n	800513c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800511a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	621a      	str	r2, [r3, #32]
}
 8005156:	bf00      	nop
 8005158:	371c      	adds	r7, #28
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40010000 	.word	0x40010000

08005168 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0303 	bic.w	r3, r3, #3
 800519e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	021b      	lsls	r3, r3, #8
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a1d      	ldr	r2, [pc, #116]	; (8005238 <TIM_OC3_SetConfig+0xd0>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d10d      	bne.n	80051e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a14      	ldr	r2, [pc, #80]	; (8005238 <TIM_OC3_SetConfig+0xd0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d113      	bne.n	8005212 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	4313      	orrs	r3, r2
 8005204:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	621a      	str	r2, [r3, #32]
}
 800522c:	bf00      	nop
 800522e:	371c      	adds	r7, #28
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	40010000 	.word	0x40010000

0800523c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800526a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	021b      	lsls	r3, r3, #8
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005286:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	031b      	lsls	r3, r3, #12
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	4313      	orrs	r3, r2
 8005292:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a10      	ldr	r2, [pc, #64]	; (80052d8 <TIM_OC4_SetConfig+0x9c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d109      	bne.n	80052b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	019b      	lsls	r3, r3, #6
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	621a      	str	r2, [r3, #32]
}
 80052ca:	bf00      	nop
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	40010000 	.word	0x40010000

080052dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	f023 0201 	bic.w	r2, r3, #1
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f023 030a 	bic.w	r3, r3, #10
 8005318:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4313      	orrs	r3, r2
 8005320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	621a      	str	r2, [r3, #32]
}
 800532e:	bf00      	nop
 8005330:	371c      	adds	r7, #28
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800533a:	b480      	push	{r7}
 800533c:	b087      	sub	sp, #28
 800533e:	af00      	add	r7, sp, #0
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	f023 0210 	bic.w	r2, r3, #16
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005364:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	031b      	lsls	r3, r3, #12
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	4313      	orrs	r3, r2
 800536e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005376:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	621a      	str	r2, [r3, #32]
}
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800539a:	b480      	push	{r7}
 800539c:	b085      	sub	sp, #20
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	f043 0307 	orr.w	r3, r3, #7
 80053bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	609a      	str	r2, [r3, #8]
}
 80053c4:	bf00      	nop
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
 80053dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	021a      	lsls	r2, r3, #8
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	431a      	orrs	r2, r3
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	609a      	str	r2, [r3, #8]
}
 8005404:	bf00      	nop
 8005406:	371c      	adds	r7, #28
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f003 031f 	and.w	r3, r3, #31
 8005422:	2201      	movs	r2, #1
 8005424:	fa02 f303 	lsl.w	r3, r2, r3
 8005428:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6a1a      	ldr	r2, [r3, #32]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	43db      	mvns	r3, r3
 8005432:	401a      	ands	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a1a      	ldr	r2, [r3, #32]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f003 031f 	and.w	r3, r3, #31
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	fa01 f303 	lsl.w	r3, r1, r3
 8005448:	431a      	orrs	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	621a      	str	r2, [r3, #32]
}
 800544e:	bf00      	nop
 8005450:	371c      	adds	r7, #28
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800546c:	2b01      	cmp	r3, #1
 800546e:	d101      	bne.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005470:	2302      	movs	r3, #2
 8005472:	e050      	b.n	8005516 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a1c      	ldr	r2, [pc, #112]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d018      	beq.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c0:	d013      	beq.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a18      	ldr	r2, [pc, #96]	; (8005528 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00e      	beq.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a16      	ldr	r2, [pc, #88]	; (800552c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d009      	beq.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a15      	ldr	r2, [pc, #84]	; (8005530 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d004      	beq.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a13      	ldr	r2, [pc, #76]	; (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d10c      	bne.n	8005504 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40010000 	.word	0x40010000
 8005528:	40000400 	.word	0x40000400
 800552c:	40000800 	.word	0x40000800
 8005530:	40000c00 	.word	0x40000c00
 8005534:	40014000 	.word	0x40014000

08005538 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e03f      	b.n	80055f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d106      	bne.n	800558c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7fd f8e6 	bl	8002758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2224      	movs	r2, #36	; 0x24
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fe49 	bl	800623c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691a      	ldr	r2, [r3, #16]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	695a      	ldr	r2, [r3, #20]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b082      	sub	sp, #8
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e021      	b.n	8005650 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2224      	movs	r2, #36	; 0x24
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005622:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7fd f959 	bl	80028dc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08a      	sub	sp, #40	; 0x28
 800565c:	af02      	add	r7, sp, #8
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	4613      	mov	r3, r2
 8005666:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b20      	cmp	r3, #32
 8005676:	d17c      	bne.n	8005772 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <HAL_UART_Transmit+0x2c>
 800567e:	88fb      	ldrh	r3, [r7, #6]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e075      	b.n	8005774 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800568e:	2b01      	cmp	r3, #1
 8005690:	d101      	bne.n	8005696 <HAL_UART_Transmit+0x3e>
 8005692:	2302      	movs	r3, #2
 8005694:	e06e      	b.n	8005774 <HAL_UART_Transmit+0x11c>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2221      	movs	r2, #33	; 0x21
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056ac:	f7fd fb14 	bl	8002cd8 <HAL_GetTick>
 80056b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	88fa      	ldrh	r2, [r7, #6]
 80056b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	88fa      	ldrh	r2, [r7, #6]
 80056bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c6:	d108      	bne.n	80056da <HAL_UART_Transmit+0x82>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d104      	bne.n	80056da <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80056d0:	2300      	movs	r3, #0
 80056d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	61bb      	str	r3, [r7, #24]
 80056d8:	e003      	b.n	80056e2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80056ea:	e02a      	b.n	8005742 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	2200      	movs	r2, #0
 80056f4:	2180      	movs	r1, #128	; 0x80
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 fb5a 	bl	8005db0 <UART_WaitOnFlagUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e036      	b.n	8005774 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10b      	bne.n	8005724 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800571a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	3302      	adds	r3, #2
 8005720:	61bb      	str	r3, [r7, #24]
 8005722:	e007      	b.n	8005734 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	781a      	ldrb	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	3301      	adds	r3, #1
 8005732:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005738:	b29b      	uxth	r3, r3
 800573a:	3b01      	subs	r3, #1
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005746:	b29b      	uxth	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1cf      	bne.n	80056ec <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2200      	movs	r2, #0
 8005754:	2140      	movs	r1, #64	; 0x40
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 fb2a 	bl	8005db0 <UART_WaitOnFlagUntilTimeout>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e006      	b.n	8005774 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2220      	movs	r2, #32
 800576a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	e000      	b.n	8005774 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005772:	2302      	movs	r3, #2
  }
}
 8005774:	4618      	mov	r0, r3
 8005776:	3720      	adds	r7, #32
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	4613      	mov	r3, r2
 8005788:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b20      	cmp	r3, #32
 8005794:	d130      	bne.n	80057f8 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <HAL_UART_Transmit_IT+0x26>
 800579c:	88fb      	ldrh	r3, [r7, #6]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e029      	b.n	80057fa <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_UART_Transmit_IT+0x38>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e022      	b.n	80057fa <HAL_UART_Transmit_IT+0x7e>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	88fa      	ldrh	r2, [r7, #6]
 80057c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	88fa      	ldrh	r2, [r7, #6]
 80057cc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2221      	movs	r2, #33	; 0x21
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057f2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	e000      	b.n	80057fa <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80057f8:	2302      	movs	r3, #2
  }
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b084      	sub	sp, #16
 800580a:	af00      	add	r7, sp, #0
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	4613      	mov	r3, r2
 8005812:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b20      	cmp	r3, #32
 800581e:	d11d      	bne.n	800585c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <HAL_UART_Receive_IT+0x26>
 8005826:	88fb      	ldrh	r3, [r7, #6]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e016      	b.n	800585e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005836:	2b01      	cmp	r3, #1
 8005838:	d101      	bne.n	800583e <HAL_UART_Receive_IT+0x38>
 800583a:	2302      	movs	r3, #2
 800583c:	e00f      	b.n	800585e <HAL_UART_Receive_IT+0x58>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800584c:	88fb      	ldrh	r3, [r7, #6]
 800584e:	461a      	mov	r2, r3
 8005850:	68b9      	ldr	r1, [r7, #8]
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 fb1a 	bl	8005e8c <UART_Start_Receive_IT>
 8005858:	4603      	mov	r3, r0
 800585a:	e000      	b.n	800585e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800585c:	2302      	movs	r3, #2
  }
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b0ba      	sub	sp, #232	; 0xe8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800588e:	2300      	movs	r3, #0
 8005890:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005894:	2300      	movs	r3, #0
 8005896:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800589a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800589e:	f003 030f 	and.w	r3, r3, #15
 80058a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80058a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10f      	bne.n	80058ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b2:	f003 0320 	and.w	r3, r3, #32
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d009      	beq.n	80058ce <HAL_UART_IRQHandler+0x66>
 80058ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 fbfd 	bl	80060c6 <UART_Receive_IT>
      return;
 80058cc:	e256      	b.n	8005d7c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 80de 	beq.w	8005a94 <HAL_UART_IRQHandler+0x22c>
 80058d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d106      	bne.n	80058f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 80d1 	beq.w	8005a94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00b      	beq.n	8005916 <HAL_UART_IRQHandler+0xae>
 80058fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005906:	2b00      	cmp	r3, #0
 8005908:	d005      	beq.n	8005916 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	f043 0201 	orr.w	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00b      	beq.n	800593a <HAL_UART_IRQHandler+0xd2>
 8005922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d005      	beq.n	800593a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	f043 0202 	orr.w	r2, r3, #2
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800593a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00b      	beq.n	800595e <HAL_UART_IRQHandler+0xf6>
 8005946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d005      	beq.n	800595e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	f043 0204 	orr.w	r2, r3, #4
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800595e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b00      	cmp	r3, #0
 8005968:	d011      	beq.n	800598e <HAL_UART_IRQHandler+0x126>
 800596a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	d105      	bne.n	8005982 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d005      	beq.n	800598e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	f043 0208 	orr.w	r2, r3, #8
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 81ed 	beq.w	8005d72 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d008      	beq.n	80059b6 <HAL_UART_IRQHandler+0x14e>
 80059a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fb88 	bl	80060c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c0:	2b40      	cmp	r3, #64	; 0x40
 80059c2:	bf0c      	ite	eq
 80059c4:	2301      	moveq	r3, #1
 80059c6:	2300      	movne	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	f003 0308 	and.w	r3, r3, #8
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d103      	bne.n	80059e2 <HAL_UART_IRQHandler+0x17a>
 80059da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d04f      	beq.n	8005a82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fa90 	bl	8005f08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d141      	bne.n	8005a7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3314      	adds	r3, #20
 80059fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3314      	adds	r3, #20
 8005a1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1d9      	bne.n	80059f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d013      	beq.n	8005a72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4e:	4a7d      	ldr	r2, [pc, #500]	; (8005c44 <HAL_UART_IRQHandler+0x3dc>)
 8005a50:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fd fb21 	bl	800309e <HAL_DMA_Abort_IT>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d016      	beq.n	8005a90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a70:	e00e      	b.n	8005a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7fc fb60 	bl	8002138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a78:	e00a      	b.n	8005a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fc fb5c 	bl	8002138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a80:	e006      	b.n	8005a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7fc fb58 	bl	8002138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a8e:	e170      	b.n	8005d72 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a90:	bf00      	nop
    return;
 8005a92:	e16e      	b.n	8005d72 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	f040 814a 	bne.w	8005d32 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa2:	f003 0310 	and.w	r3, r3, #16
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 8143 	beq.w	8005d32 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab0:	f003 0310 	and.w	r3, r3, #16
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 813c 	beq.w	8005d32 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005aba:	2300      	movs	r3, #0
 8005abc:	60bb      	str	r3, [r7, #8]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	60bb      	str	r3, [r7, #8]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	60bb      	str	r3, [r7, #8]
 8005ace:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ada:	2b40      	cmp	r3, #64	; 0x40
 8005adc:	f040 80b4 	bne.w	8005c48 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005aec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 8140 	beq.w	8005d76 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005afa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005afe:	429a      	cmp	r2, r3
 8005b00:	f080 8139 	bcs.w	8005d76 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b0a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b16:	f000 8088 	beq.w	8005c2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	330c      	adds	r3, #12
 8005b20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	330c      	adds	r3, #12
 8005b42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b56:	e841 2300 	strex	r3, r2, [r1]
 8005b5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1d9      	bne.n	8005b1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3314      	adds	r3, #20
 8005b6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b70:	e853 3f00 	ldrex	r3, [r3]
 8005b74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b78:	f023 0301 	bic.w	r3, r3, #1
 8005b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3314      	adds	r3, #20
 8005b86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e1      	bne.n	8005b66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3314      	adds	r3, #20
 8005ba8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3314      	adds	r3, #20
 8005bc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005bc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005bc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005bcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e3      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	330c      	adds	r3, #12
 8005bee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf2:	e853 3f00 	ldrex	r3, [r3]
 8005bf6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bfa:	f023 0310 	bic.w	r3, r3, #16
 8005bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	330c      	adds	r3, #12
 8005c08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c14:	e841 2300 	strex	r3, r2, [r1]
 8005c18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1e3      	bne.n	8005be8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fd f9ca 	bl	8002fbe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	4619      	mov	r1, r3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f8ac 	bl	8005d98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c40:	e099      	b.n	8005d76 <HAL_UART_IRQHandler+0x50e>
 8005c42:	bf00      	nop
 8005c44:	08005fcf 	.word	0x08005fcf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 808b 	beq.w	8005d7a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 8086 	beq.w	8005d7a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	330c      	adds	r3, #12
 8005c74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c78:	e853 3f00 	ldrex	r3, [r3]
 8005c7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	330c      	adds	r3, #12
 8005c8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c92:	647a      	str	r2, [r7, #68]	; 0x44
 8005c94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e3      	bne.n	8005c6e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3314      	adds	r3, #20
 8005cac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	e853 3f00 	ldrex	r3, [r3]
 8005cb4:	623b      	str	r3, [r7, #32]
   return(result);
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	f023 0301 	bic.w	r3, r3, #1
 8005cbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3314      	adds	r3, #20
 8005cc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005cca:	633a      	str	r2, [r7, #48]	; 0x30
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd2:	e841 2300 	strex	r3, r2, [r1]
 8005cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1e3      	bne.n	8005ca6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0310 	bic.w	r3, r3, #16
 8005d02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	330c      	adds	r3, #12
 8005d0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d10:	61fa      	str	r2, [r7, #28]
 8005d12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d14:	69b9      	ldr	r1, [r7, #24]
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	e841 2300 	strex	r3, r2, [r1]
 8005d1c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1e3      	bne.n	8005cec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d28:	4619      	mov	r1, r3
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f834 	bl	8005d98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d30:	e023      	b.n	8005d7a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d009      	beq.n	8005d52 <HAL_UART_IRQHandler+0x4ea>
 8005d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f953 	bl	8005ff6 <UART_Transmit_IT>
    return;
 8005d50:	e014      	b.n	8005d7c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00e      	beq.n	8005d7c <HAL_UART_IRQHandler+0x514>
 8005d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d008      	beq.n	8005d7c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f993 	bl	8006096 <UART_EndTransmit_IT>
    return;
 8005d70:	e004      	b.n	8005d7c <HAL_UART_IRQHandler+0x514>
    return;
 8005d72:	bf00      	nop
 8005d74:	e002      	b.n	8005d7c <HAL_UART_IRQHandler+0x514>
      return;
 8005d76:	bf00      	nop
 8005d78:	e000      	b.n	8005d7c <HAL_UART_IRQHandler+0x514>
      return;
 8005d7a:	bf00      	nop
  }
}
 8005d7c:	37e8      	adds	r7, #232	; 0xe8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop

08005d84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b090      	sub	sp, #64	; 0x40
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	603b      	str	r3, [r7, #0]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dc0:	e050      	b.n	8005e64 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc8:	d04c      	beq.n	8005e64 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d007      	beq.n	8005de0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dd0:	f7fc ff82 	bl	8002cd8 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d241      	bcs.n	8005e64 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	330c      	adds	r3, #12
 8005de6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dea:	e853 3f00 	ldrex	r3, [r3]
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	330c      	adds	r3, #12
 8005dfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e00:	637a      	str	r2, [r7, #52]	; 0x34
 8005e02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e08:	e841 2300 	strex	r3, r2, [r1]
 8005e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1e5      	bne.n	8005de0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	3314      	adds	r3, #20
 8005e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	e853 3f00 	ldrex	r3, [r3]
 8005e22:	613b      	str	r3, [r7, #16]
   return(result);
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	f023 0301 	bic.w	r3, r3, #1
 8005e2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	3314      	adds	r3, #20
 8005e32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e34:	623a      	str	r2, [r7, #32]
 8005e36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e38:	69f9      	ldr	r1, [r7, #28]
 8005e3a:	6a3a      	ldr	r2, [r7, #32]
 8005e3c:	e841 2300 	strex	r3, r2, [r1]
 8005e40:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1e5      	bne.n	8005e14 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2220      	movs	r2, #32
 8005e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e00f      	b.n	8005e84 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	bf0c      	ite	eq
 8005e74:	2301      	moveq	r3, #1
 8005e76:	2300      	movne	r3, #0
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	79fb      	ldrb	r3, [r7, #7]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d09f      	beq.n	8005dc2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3740      	adds	r7, #64	; 0x40
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	4613      	mov	r3, r2
 8005e98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	88fa      	ldrh	r2, [r7, #6]
 8005ea4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	88fa      	ldrh	r2, [r7, #6]
 8005eaa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2222      	movs	r2, #34	; 0x22
 8005eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d007      	beq.n	8005eda <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ed8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	695a      	ldr	r2, [r3, #20]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f042 0201 	orr.w	r2, r2, #1
 8005ee8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f042 0220 	orr.w	r2, r2, #32
 8005ef8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b095      	sub	sp, #84	; 0x54
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	330c      	adds	r3, #12
 8005f16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	330c      	adds	r3, #12
 8005f2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f30:	643a      	str	r2, [r7, #64]	; 0x40
 8005f32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f38:	e841 2300 	strex	r3, r2, [r1]
 8005f3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e5      	bne.n	8005f10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3314      	adds	r3, #20
 8005f4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	e853 3f00 	ldrex	r3, [r3]
 8005f52:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	f023 0301 	bic.w	r3, r3, #1
 8005f5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3314      	adds	r3, #20
 8005f62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f6c:	e841 2300 	strex	r3, r2, [r1]
 8005f70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1e5      	bne.n	8005f44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d119      	bne.n	8005fb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	330c      	adds	r3, #12
 8005f86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	e853 3f00 	ldrex	r3, [r3]
 8005f8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f023 0310 	bic.w	r3, r3, #16
 8005f96:	647b      	str	r3, [r7, #68]	; 0x44
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fa0:	61ba      	str	r2, [r7, #24]
 8005fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa4:	6979      	ldr	r1, [r7, #20]
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	e841 2300 	strex	r3, r2, [r1]
 8005fac:	613b      	str	r3, [r7, #16]
   return(result);
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1e5      	bne.n	8005f80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005fc2:	bf00      	nop
 8005fc4:	3754      	adds	r7, #84	; 0x54
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f7fc f8a5 	bl	8002138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fee:	bf00      	nop
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b085      	sub	sp, #20
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b21      	cmp	r3, #33	; 0x21
 8006008:	d13e      	bne.n	8006088 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006012:	d114      	bne.n	800603e <UART_Transmit_IT+0x48>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d110      	bne.n	800603e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006030:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	1c9a      	adds	r2, r3, #2
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	621a      	str	r2, [r3, #32]
 800603c:	e008      	b.n	8006050 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	1c59      	adds	r1, r3, #1
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6211      	str	r1, [r2, #32]
 8006048:	781a      	ldrb	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	b29b      	uxth	r3, r3
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	4619      	mov	r1, r3
 800605e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10f      	bne.n	8006084 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006072:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006082:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006084:	2300      	movs	r3, #0
 8006086:	e000      	b.n	800608a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006088:	2302      	movs	r3, #2
  }
}
 800608a:	4618      	mov	r0, r3
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b082      	sub	sp, #8
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff fe64 	bl	8005d84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b08c      	sub	sp, #48	; 0x30
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b22      	cmp	r3, #34	; 0x22
 80060d8:	f040 80ab 	bne.w	8006232 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e4:	d117      	bne.n	8006116 <UART_Receive_IT+0x50>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d113      	bne.n	8006116 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060ee:	2300      	movs	r3, #0
 80060f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006104:	b29a      	uxth	r2, r3
 8006106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006108:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610e:	1c9a      	adds	r2, r3, #2
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	629a      	str	r2, [r3, #40]	; 0x28
 8006114:	e026      	b.n	8006164 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800611c:	2300      	movs	r3, #0
 800611e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006128:	d007      	beq.n	800613a <UART_Receive_IT+0x74>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10a      	bne.n	8006148 <UART_Receive_IT+0x82>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d106      	bne.n	8006148 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	b2da      	uxtb	r2, r3
 8006142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006144:	701a      	strb	r2, [r3, #0]
 8006146:	e008      	b.n	800615a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	b2db      	uxtb	r3, r3
 8006150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006154:	b2da      	uxtb	r2, r3
 8006156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006158:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006168:	b29b      	uxth	r3, r3
 800616a:	3b01      	subs	r3, #1
 800616c:	b29b      	uxth	r3, r3
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	4619      	mov	r1, r3
 8006172:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006174:	2b00      	cmp	r3, #0
 8006176:	d15a      	bne.n	800622e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0220 	bic.w	r2, r2, #32
 8006186:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68da      	ldr	r2, [r3, #12]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006196:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	695a      	ldr	r2, [r3, #20]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0201 	bic.w	r2, r2, #1
 80061a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d135      	bne.n	8006224 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	330c      	adds	r3, #12
 80061c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	e853 3f00 	ldrex	r3, [r3]
 80061cc:	613b      	str	r3, [r7, #16]
   return(result);
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f023 0310 	bic.w	r3, r3, #16
 80061d4:	627b      	str	r3, [r7, #36]	; 0x24
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	330c      	adds	r3, #12
 80061dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061de:	623a      	str	r2, [r7, #32]
 80061e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e2:	69f9      	ldr	r1, [r7, #28]
 80061e4:	6a3a      	ldr	r2, [r7, #32]
 80061e6:	e841 2300 	strex	r3, r2, [r1]
 80061ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1e5      	bne.n	80061be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b10      	cmp	r3, #16
 80061fe:	d10a      	bne.n	8006216 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006200:	2300      	movs	r3, #0
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60fb      	str	r3, [r7, #12]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff fdbb 	bl	8005d98 <HAL_UARTEx_RxEventCallback>
 8006222:	e002      	b.n	800622a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7fb ffdb 	bl	80021e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	e002      	b.n	8006234 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	e000      	b.n	8006234 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006232:	2302      	movs	r3, #2
  }
}
 8006234:	4618      	mov	r0, r3
 8006236:	3730      	adds	r7, #48	; 0x30
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800623c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006240:	b0c0      	sub	sp, #256	; 0x100
 8006242:	af00      	add	r7, sp, #0
 8006244:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006258:	68d9      	ldr	r1, [r3, #12]
 800625a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	ea40 0301 	orr.w	r3, r0, r1
 8006264:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626a:	689a      	ldr	r2, [r3, #8]
 800626c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	431a      	orrs	r2, r3
 8006274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	431a      	orrs	r2, r3
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	4313      	orrs	r3, r2
 8006284:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006294:	f021 010c 	bic.w	r1, r1, #12
 8006298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062a2:	430b      	orrs	r3, r1
 80062a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b6:	6999      	ldr	r1, [r3, #24]
 80062b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	ea40 0301 	orr.w	r3, r0, r1
 80062c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	4b8f      	ldr	r3, [pc, #572]	; (8006508 <UART_SetConfig+0x2cc>)
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d005      	beq.n	80062dc <UART_SetConfig+0xa0>
 80062d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	4b8d      	ldr	r3, [pc, #564]	; (800650c <UART_SetConfig+0x2d0>)
 80062d8:	429a      	cmp	r2, r3
 80062da:	d104      	bne.n	80062e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062dc:	f7fd fde2 	bl	8003ea4 <HAL_RCC_GetPCLK2Freq>
 80062e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062e4:	e003      	b.n	80062ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062e6:	f7fd fdc9 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
 80062ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062f8:	f040 810c 	bne.w	8006514 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006300:	2200      	movs	r2, #0
 8006302:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006306:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800630a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800630e:	4622      	mov	r2, r4
 8006310:	462b      	mov	r3, r5
 8006312:	1891      	adds	r1, r2, r2
 8006314:	65b9      	str	r1, [r7, #88]	; 0x58
 8006316:	415b      	adcs	r3, r3
 8006318:	65fb      	str	r3, [r7, #92]	; 0x5c
 800631a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800631e:	4621      	mov	r1, r4
 8006320:	eb12 0801 	adds.w	r8, r2, r1
 8006324:	4629      	mov	r1, r5
 8006326:	eb43 0901 	adc.w	r9, r3, r1
 800632a:	f04f 0200 	mov.w	r2, #0
 800632e:	f04f 0300 	mov.w	r3, #0
 8006332:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006336:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800633a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800633e:	4690      	mov	r8, r2
 8006340:	4699      	mov	r9, r3
 8006342:	4623      	mov	r3, r4
 8006344:	eb18 0303 	adds.w	r3, r8, r3
 8006348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800634c:	462b      	mov	r3, r5
 800634e:	eb49 0303 	adc.w	r3, r9, r3
 8006352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006362:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006366:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800636a:	460b      	mov	r3, r1
 800636c:	18db      	adds	r3, r3, r3
 800636e:	653b      	str	r3, [r7, #80]	; 0x50
 8006370:	4613      	mov	r3, r2
 8006372:	eb42 0303 	adc.w	r3, r2, r3
 8006376:	657b      	str	r3, [r7, #84]	; 0x54
 8006378:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800637c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006380:	f7f9 ff96 	bl	80002b0 <__aeabi_uldivmod>
 8006384:	4602      	mov	r2, r0
 8006386:	460b      	mov	r3, r1
 8006388:	4b61      	ldr	r3, [pc, #388]	; (8006510 <UART_SetConfig+0x2d4>)
 800638a:	fba3 2302 	umull	r2, r3, r3, r2
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	011c      	lsls	r4, r3, #4
 8006392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006396:	2200      	movs	r2, #0
 8006398:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800639c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80063a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80063a4:	4642      	mov	r2, r8
 80063a6:	464b      	mov	r3, r9
 80063a8:	1891      	adds	r1, r2, r2
 80063aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80063ac:	415b      	adcs	r3, r3
 80063ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063b4:	4641      	mov	r1, r8
 80063b6:	eb12 0a01 	adds.w	sl, r2, r1
 80063ba:	4649      	mov	r1, r9
 80063bc:	eb43 0b01 	adc.w	fp, r3, r1
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	f04f 0300 	mov.w	r3, #0
 80063c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063d4:	4692      	mov	sl, r2
 80063d6:	469b      	mov	fp, r3
 80063d8:	4643      	mov	r3, r8
 80063da:	eb1a 0303 	adds.w	r3, sl, r3
 80063de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063e2:	464b      	mov	r3, r9
 80063e4:	eb4b 0303 	adc.w	r3, fp, r3
 80063e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006400:	460b      	mov	r3, r1
 8006402:	18db      	adds	r3, r3, r3
 8006404:	643b      	str	r3, [r7, #64]	; 0x40
 8006406:	4613      	mov	r3, r2
 8006408:	eb42 0303 	adc.w	r3, r2, r3
 800640c:	647b      	str	r3, [r7, #68]	; 0x44
 800640e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006412:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006416:	f7f9 ff4b 	bl	80002b0 <__aeabi_uldivmod>
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	4611      	mov	r1, r2
 8006420:	4b3b      	ldr	r3, [pc, #236]	; (8006510 <UART_SetConfig+0x2d4>)
 8006422:	fba3 2301 	umull	r2, r3, r3, r1
 8006426:	095b      	lsrs	r3, r3, #5
 8006428:	2264      	movs	r2, #100	; 0x64
 800642a:	fb02 f303 	mul.w	r3, r2, r3
 800642e:	1acb      	subs	r3, r1, r3
 8006430:	00db      	lsls	r3, r3, #3
 8006432:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006436:	4b36      	ldr	r3, [pc, #216]	; (8006510 <UART_SetConfig+0x2d4>)
 8006438:	fba3 2302 	umull	r2, r3, r3, r2
 800643c:	095b      	lsrs	r3, r3, #5
 800643e:	005b      	lsls	r3, r3, #1
 8006440:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006444:	441c      	add	r4, r3
 8006446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800644a:	2200      	movs	r2, #0
 800644c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006450:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006454:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006458:	4642      	mov	r2, r8
 800645a:	464b      	mov	r3, r9
 800645c:	1891      	adds	r1, r2, r2
 800645e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006460:	415b      	adcs	r3, r3
 8006462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006464:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006468:	4641      	mov	r1, r8
 800646a:	1851      	adds	r1, r2, r1
 800646c:	6339      	str	r1, [r7, #48]	; 0x30
 800646e:	4649      	mov	r1, r9
 8006470:	414b      	adcs	r3, r1
 8006472:	637b      	str	r3, [r7, #52]	; 0x34
 8006474:	f04f 0200 	mov.w	r2, #0
 8006478:	f04f 0300 	mov.w	r3, #0
 800647c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006480:	4659      	mov	r1, fp
 8006482:	00cb      	lsls	r3, r1, #3
 8006484:	4651      	mov	r1, sl
 8006486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800648a:	4651      	mov	r1, sl
 800648c:	00ca      	lsls	r2, r1, #3
 800648e:	4610      	mov	r0, r2
 8006490:	4619      	mov	r1, r3
 8006492:	4603      	mov	r3, r0
 8006494:	4642      	mov	r2, r8
 8006496:	189b      	adds	r3, r3, r2
 8006498:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800649c:	464b      	mov	r3, r9
 800649e:	460a      	mov	r2, r1
 80064a0:	eb42 0303 	adc.w	r3, r2, r3
 80064a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80064b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80064bc:	460b      	mov	r3, r1
 80064be:	18db      	adds	r3, r3, r3
 80064c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80064c2:	4613      	mov	r3, r2
 80064c4:	eb42 0303 	adc.w	r3, r2, r3
 80064c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80064d2:	f7f9 feed 	bl	80002b0 <__aeabi_uldivmod>
 80064d6:	4602      	mov	r2, r0
 80064d8:	460b      	mov	r3, r1
 80064da:	4b0d      	ldr	r3, [pc, #52]	; (8006510 <UART_SetConfig+0x2d4>)
 80064dc:	fba3 1302 	umull	r1, r3, r3, r2
 80064e0:	095b      	lsrs	r3, r3, #5
 80064e2:	2164      	movs	r1, #100	; 0x64
 80064e4:	fb01 f303 	mul.w	r3, r1, r3
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	3332      	adds	r3, #50	; 0x32
 80064ee:	4a08      	ldr	r2, [pc, #32]	; (8006510 <UART_SetConfig+0x2d4>)
 80064f0:	fba2 2303 	umull	r2, r3, r2, r3
 80064f4:	095b      	lsrs	r3, r3, #5
 80064f6:	f003 0207 	and.w	r2, r3, #7
 80064fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4422      	add	r2, r4
 8006502:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006504:	e106      	b.n	8006714 <UART_SetConfig+0x4d8>
 8006506:	bf00      	nop
 8006508:	40011000 	.word	0x40011000
 800650c:	40011400 	.word	0x40011400
 8006510:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006518:	2200      	movs	r2, #0
 800651a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800651e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006522:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006526:	4642      	mov	r2, r8
 8006528:	464b      	mov	r3, r9
 800652a:	1891      	adds	r1, r2, r2
 800652c:	6239      	str	r1, [r7, #32]
 800652e:	415b      	adcs	r3, r3
 8006530:	627b      	str	r3, [r7, #36]	; 0x24
 8006532:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006536:	4641      	mov	r1, r8
 8006538:	1854      	adds	r4, r2, r1
 800653a:	4649      	mov	r1, r9
 800653c:	eb43 0501 	adc.w	r5, r3, r1
 8006540:	f04f 0200 	mov.w	r2, #0
 8006544:	f04f 0300 	mov.w	r3, #0
 8006548:	00eb      	lsls	r3, r5, #3
 800654a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800654e:	00e2      	lsls	r2, r4, #3
 8006550:	4614      	mov	r4, r2
 8006552:	461d      	mov	r5, r3
 8006554:	4643      	mov	r3, r8
 8006556:	18e3      	adds	r3, r4, r3
 8006558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800655c:	464b      	mov	r3, r9
 800655e:	eb45 0303 	adc.w	r3, r5, r3
 8006562:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006572:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006576:	f04f 0200 	mov.w	r2, #0
 800657a:	f04f 0300 	mov.w	r3, #0
 800657e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006582:	4629      	mov	r1, r5
 8006584:	008b      	lsls	r3, r1, #2
 8006586:	4621      	mov	r1, r4
 8006588:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800658c:	4621      	mov	r1, r4
 800658e:	008a      	lsls	r2, r1, #2
 8006590:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006594:	f7f9 fe8c 	bl	80002b0 <__aeabi_uldivmod>
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	4b60      	ldr	r3, [pc, #384]	; (8006720 <UART_SetConfig+0x4e4>)
 800659e:	fba3 2302 	umull	r2, r3, r3, r2
 80065a2:	095b      	lsrs	r3, r3, #5
 80065a4:	011c      	lsls	r4, r3, #4
 80065a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065aa:	2200      	movs	r2, #0
 80065ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80065b8:	4642      	mov	r2, r8
 80065ba:	464b      	mov	r3, r9
 80065bc:	1891      	adds	r1, r2, r2
 80065be:	61b9      	str	r1, [r7, #24]
 80065c0:	415b      	adcs	r3, r3
 80065c2:	61fb      	str	r3, [r7, #28]
 80065c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065c8:	4641      	mov	r1, r8
 80065ca:	1851      	adds	r1, r2, r1
 80065cc:	6139      	str	r1, [r7, #16]
 80065ce:	4649      	mov	r1, r9
 80065d0:	414b      	adcs	r3, r1
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	f04f 0200 	mov.w	r2, #0
 80065d8:	f04f 0300 	mov.w	r3, #0
 80065dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065e0:	4659      	mov	r1, fp
 80065e2:	00cb      	lsls	r3, r1, #3
 80065e4:	4651      	mov	r1, sl
 80065e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065ea:	4651      	mov	r1, sl
 80065ec:	00ca      	lsls	r2, r1, #3
 80065ee:	4610      	mov	r0, r2
 80065f0:	4619      	mov	r1, r3
 80065f2:	4603      	mov	r3, r0
 80065f4:	4642      	mov	r2, r8
 80065f6:	189b      	adds	r3, r3, r2
 80065f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065fc:	464b      	mov	r3, r9
 80065fe:	460a      	mov	r2, r1
 8006600:	eb42 0303 	adc.w	r3, r2, r3
 8006604:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	67bb      	str	r3, [r7, #120]	; 0x78
 8006612:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006614:	f04f 0200 	mov.w	r2, #0
 8006618:	f04f 0300 	mov.w	r3, #0
 800661c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006620:	4649      	mov	r1, r9
 8006622:	008b      	lsls	r3, r1, #2
 8006624:	4641      	mov	r1, r8
 8006626:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800662a:	4641      	mov	r1, r8
 800662c:	008a      	lsls	r2, r1, #2
 800662e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006632:	f7f9 fe3d 	bl	80002b0 <__aeabi_uldivmod>
 8006636:	4602      	mov	r2, r0
 8006638:	460b      	mov	r3, r1
 800663a:	4611      	mov	r1, r2
 800663c:	4b38      	ldr	r3, [pc, #224]	; (8006720 <UART_SetConfig+0x4e4>)
 800663e:	fba3 2301 	umull	r2, r3, r3, r1
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	2264      	movs	r2, #100	; 0x64
 8006646:	fb02 f303 	mul.w	r3, r2, r3
 800664a:	1acb      	subs	r3, r1, r3
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	3332      	adds	r3, #50	; 0x32
 8006650:	4a33      	ldr	r2, [pc, #204]	; (8006720 <UART_SetConfig+0x4e4>)
 8006652:	fba2 2303 	umull	r2, r3, r2, r3
 8006656:	095b      	lsrs	r3, r3, #5
 8006658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800665c:	441c      	add	r4, r3
 800665e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006662:	2200      	movs	r2, #0
 8006664:	673b      	str	r3, [r7, #112]	; 0x70
 8006666:	677a      	str	r2, [r7, #116]	; 0x74
 8006668:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800666c:	4642      	mov	r2, r8
 800666e:	464b      	mov	r3, r9
 8006670:	1891      	adds	r1, r2, r2
 8006672:	60b9      	str	r1, [r7, #8]
 8006674:	415b      	adcs	r3, r3
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800667c:	4641      	mov	r1, r8
 800667e:	1851      	adds	r1, r2, r1
 8006680:	6039      	str	r1, [r7, #0]
 8006682:	4649      	mov	r1, r9
 8006684:	414b      	adcs	r3, r1
 8006686:	607b      	str	r3, [r7, #4]
 8006688:	f04f 0200 	mov.w	r2, #0
 800668c:	f04f 0300 	mov.w	r3, #0
 8006690:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006694:	4659      	mov	r1, fp
 8006696:	00cb      	lsls	r3, r1, #3
 8006698:	4651      	mov	r1, sl
 800669a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800669e:	4651      	mov	r1, sl
 80066a0:	00ca      	lsls	r2, r1, #3
 80066a2:	4610      	mov	r0, r2
 80066a4:	4619      	mov	r1, r3
 80066a6:	4603      	mov	r3, r0
 80066a8:	4642      	mov	r2, r8
 80066aa:	189b      	adds	r3, r3, r2
 80066ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80066ae:	464b      	mov	r3, r9
 80066b0:	460a      	mov	r2, r1
 80066b2:	eb42 0303 	adc.w	r3, r2, r3
 80066b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	663b      	str	r3, [r7, #96]	; 0x60
 80066c2:	667a      	str	r2, [r7, #100]	; 0x64
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80066d0:	4649      	mov	r1, r9
 80066d2:	008b      	lsls	r3, r1, #2
 80066d4:	4641      	mov	r1, r8
 80066d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066da:	4641      	mov	r1, r8
 80066dc:	008a      	lsls	r2, r1, #2
 80066de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066e2:	f7f9 fde5 	bl	80002b0 <__aeabi_uldivmod>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	4b0d      	ldr	r3, [pc, #52]	; (8006720 <UART_SetConfig+0x4e4>)
 80066ec:	fba3 1302 	umull	r1, r3, r3, r2
 80066f0:	095b      	lsrs	r3, r3, #5
 80066f2:	2164      	movs	r1, #100	; 0x64
 80066f4:	fb01 f303 	mul.w	r3, r1, r3
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	011b      	lsls	r3, r3, #4
 80066fc:	3332      	adds	r3, #50	; 0x32
 80066fe:	4a08      	ldr	r2, [pc, #32]	; (8006720 <UART_SetConfig+0x4e4>)
 8006700:	fba2 2303 	umull	r2, r3, r2, r3
 8006704:	095b      	lsrs	r3, r3, #5
 8006706:	f003 020f 	and.w	r2, r3, #15
 800670a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4422      	add	r2, r4
 8006712:	609a      	str	r2, [r3, #8]
}
 8006714:	bf00      	nop
 8006716:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800671a:	46bd      	mov	sp, r7
 800671c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006720:	51eb851f 	.word	0x51eb851f

08006724 <NOP>:
    HAL_Delay(2000);											//Tiempo de reset del módulo
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
}
void NOP(struct WIFI *a)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=0;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2202      	movs	r2, #2
 8006788:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <MUX>:
void MUX(struct WIFI *a)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2204      	movs	r2, #4
 80067b4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <IPDef>:
void IPDef(struct WIFI *a)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2205      	movs	r2, #5
 80067e0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2206      	movs	r2, #6
 8006838:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2208      	movs	r2, #8
 8006864:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2209      	movs	r2, #9
 8006890:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2207      	movs	r2, #7
 80068bc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <Inicializar>:
void Inicializar(struct WIFI *a)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
a->_data2SND[64]='\0';			//Data a enviar por TCP
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2a94 	strb.w	r2, [r3, #2708]	; 0xa94
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_instruccion=0;				//Funcion que se desea realizar
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_ejecucion=0;				//Funcion en ejecucion	
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 2af4 	strb.w	r2, [r3, #2804]	; 0xaf4
a->_ticks=0;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
a->_ticks2=0;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_debug=0;					//utilizada par fines de debugging
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug_str=0;				//utilizada par fines de debugging
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_debug_pos=0;				//utilizada par fines de debugging
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_chrs=0;				//utilizada par fines de debugging
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_rx_ok=0;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_rx_no_ok=0;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_SEND_OK=0;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_CLOSED=0;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_debug_WF_DISCONNECT=0;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_FAIL=0;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_CONNECT=0;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count=0;				//Cuento la catidad de ipds	
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
a->_debug_count_old=0;			//Cuento la catidad de ipds
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
a->_debug_count2=0;				//SEND OK para enviar datos
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count4=0;				//SEDN OK recibido directo
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count5=0;				//Cuento la catidad de ipds	
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count6=0;				//Cuento la catidad de ipds	
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count7=0;				//Cuento la catidad de ipds
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count8=0;				//Cuento la catidad de ipds
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count9=0;				//Cuento la catidad de ipds
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count10=0;			//Cuento la catidad de ipds
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_subpaso=0;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
a->_overflowVector=512;			//Maximo tamaño del vector al procesar un +IPD
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a6a:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
}
 8006a6e:	bf00      	nop
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
	...

08006a7c <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 8006a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a7e:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006a82:	af06      	add	r7, sp, #24
 8006a84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a8c:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8006a94:	2300      	movs	r3, #0
 8006a96:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 8006aac:	2320      	movs	r3, #32
 8006aae:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 8006ab2:	2322      	movs	r3, #34	; 0x22
 8006ab4:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 8006ab8:	4b7c      	ldr	r3, [pc, #496]	; (8006cac <AT_ESP8266_ND+0x230>)
 8006aba:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 8006abe:	4a7c      	ldr	r2, [pc, #496]	; (8006cb0 <AT_ESP8266_ND+0x234>)
 8006ac0:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8006ac4:	6812      	ldr	r2, [r2, #0]
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	8019      	strh	r1, [r3, #0]
 8006aca:	3302      	adds	r3, #2
 8006acc:	0c12      	lsrs	r2, r2, #16
 8006ace:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 8006ad0:	f642 4322 	movw	r3, #11298	; 0x2c22
 8006ad4:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 8006ad8:	f640 230d 	movw	r3, #2573	; 0xa0d
 8006adc:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 8006aec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006af0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 8006afc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7f9 fb72 	bl	80001f4 <strlen>
 8006b10:	4603      	mov	r3, r0
 8006b12:	461a      	mov	r2, r3
 8006b14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 8006b22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 8006b32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7f9 fb57 	bl	80001f4 <strlen>
 8006b46:	4603      	mov	r3, r0
 8006b48:	461a      	mov	r2, r3
 8006b4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 8006b58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2206      	movs	r2, #6
 8006b64:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006b68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006b76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006b84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006b92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ba0:	603b      	str	r3, [r7, #0]
 8006ba2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ba6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006baa:	6812      	ldr	r2, [r2, #0]
 8006bac:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006bb0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006bb4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006bb8:	6809      	ldr	r1, [r1, #0]
 8006bba:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006bbe:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006bc2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006bc6:	6800      	ldr	r0, [r0, #0]
 8006bc8:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006bcc:	2300      	movs	r3, #0
 8006bce:	9305      	str	r3, [sp, #20]
 8006bd0:	9004      	str	r0, [sp, #16]
 8006bd2:	9103      	str	r1, [sp, #12]
 8006bd4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006bd8:	9102      	str	r1, [sp, #8]
 8006bda:	9201      	str	r2, [sp, #4]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	4633      	mov	r3, r6
 8006be2:	4a34      	ldr	r2, [pc, #208]	; (8006cb4 <AT_ESP8266_ND+0x238>)
 8006be4:	4629      	mov	r1, r5
 8006be6:	4620      	mov	r0, r4
 8006be8:	f007 ff1e 	bl	800ea28 <FT_String_ND>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	f040 8140 	bne.w	8006e74 <AT_ESP8266_ND+0x3f8>
	 {

	 	a->_n_fcomp=strlen("\r\n+IPD");
 8006bf4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bf8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2206      	movs	r2, #6
 8006c00:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 	//a->_estado_data=0;

	 	if(a->_TCP_Local_Server_EN==0)
 8006c04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d150      	bne.n	8006cb8 <AT_ESP8266_ND+0x23c>
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATA);
 8006c16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006c24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006c32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006c40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006c4e:	603b      	str	r3, [r7, #0]
 8006c50:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006c54:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006c58:	6812      	ldr	r2, [r2, #0]
 8006c5a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006c5e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006c62:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006c66:	6809      	ldr	r1, [r1, #0]
 8006c68:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006c6c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006c70:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006c74:	6800      	ldr	r0, [r0, #0]
 8006c76:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006c7a:	2304      	movs	r3, #4
 8006c7c:	9305      	str	r3, [sp, #20]
 8006c7e:	9004      	str	r0, [sp, #16]
 8006c80:	9103      	str	r1, [sp, #12]
 8006c82:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006c86:	9102      	str	r1, [sp, #8]
 8006c88:	9201      	str	r2, [sp, #4]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	4633      	mov	r3, r6
 8006c90:	4a08      	ldr	r2, [pc, #32]	; (8006cb4 <AT_ESP8266_ND+0x238>)
 8006c92:	4629      	mov	r1, r5
 8006c94:	4620      	mov	r0, r4
 8006c96:	f007 fec7 	bl	800ea28 <FT_String_ND>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ca0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
 8006caa:	e04f      	b.n	8006d4c <AT_ESP8266_ND+0x2d0>
 8006cac:	00222c22 	.word	0x00222c22
 8006cb0:	08010c14 	.word	0x08010c14
 8006cb4:	08010a3c 	.word	0x08010a3c
	 	}
	 	else
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATASRVR);
 8006cb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006cc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006cd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006ce2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ce6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006cf0:	603b      	str	r3, [r7, #0]
 8006cf2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006cf6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006cfa:	6812      	ldr	r2, [r2, #0]
 8006cfc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006d00:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d04:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d08:	6809      	ldr	r1, [r1, #0]
 8006d0a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006d0e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006d12:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006d16:	6800      	ldr	r0, [r0, #0]
 8006d18:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006d1c:	2305      	movs	r3, #5
 8006d1e:	9305      	str	r3, [sp, #20]
 8006d20:	9004      	str	r0, [sp, #16]
 8006d22:	9103      	str	r1, [sp, #12]
 8006d24:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d28:	9102      	str	r1, [sp, #8]
 8006d2a:	9201      	str	r2, [sp, #4]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	4633      	mov	r3, r6
 8006d32:	4ad2      	ldr	r2, [pc, #840]	; (800707c <AT_ESP8266_ND+0x600>)
 8006d34:	4629      	mov	r1, r5
 8006d36:	4620      	mov	r0, r4
 8006d38:	f007 fe76 	bl	800ea28 <FT_String_ND>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	 	}

	 	if(a->_estado_data==4)
 8006d4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	d15a      	bne.n	8006e14 <AT_ESP8266_ND+0x398>
	 	{
	 		a->_estado_rcv_data=99;
 8006d5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2263      	movs	r2, #99	; 0x63
 8006d6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=a->_n_tok;
 8006d6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006d7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006d8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8006d98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006da6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006daa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006db4:	2341      	movs	r3, #65	; 0x41
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	2300      	movs	r3, #0
 8006dba:	f008 f9b1 	bl	800f120 <CopiaVector>
	 		CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8006dbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8006dcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006dda:	2341      	movs	r3, #65	; 0x41
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	2300      	movs	r3, #0
 8006de0:	2205      	movs	r2, #5
 8006de2:	f008 f99d 	bl	800f120 <CopiaVector>

	 		a->_debug_rx_ok++;
 8006de6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
	 		a->_new_data_rcv=1;
 8006e04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 	}
	 	if(a->_estado_data==5)
 8006e14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006e22:	2b05      	cmp	r3, #5
 8006e24:	d126      	bne.n	8006e74 <AT_ESP8266_ND+0x3f8>
	 	{
	 		a->_estado_rcv_data=55;
 8006e26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2237      	movs	r2, #55	; 0x37
 8006e32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=0;
 8006e36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		a->_debug_rx_no_ok++;
 8006e46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f8d3 3cd4 	ldr.w	r3, [r3, #3284]	; 0xcd4
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
	 		a->_new_data_rcv=1;
 8006e64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8006e74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2204      	movs	r2, #4
 8006e80:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006e84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006e92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006ea0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ea4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006eae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ebc:	603b      	str	r3, [r7, #0]
 8006ebe:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ec2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006ec6:	6812      	ldr	r2, [r2, #0]
 8006ec8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006ecc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006ed0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ed4:	6809      	ldr	r1, [r1, #0]
 8006ed6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006eda:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006ede:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006ee2:	6800      	ldr	r0, [r0, #0]
 8006ee4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006ee8:	2300      	movs	r3, #0
 8006eea:	9305      	str	r3, [sp, #20]
 8006eec:	9004      	str	r0, [sp, #16]
 8006eee:	9103      	str	r1, [sp, #12]
 8006ef0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ef4:	9102      	str	r1, [sp, #8]
 8006ef6:	9201      	str	r2, [sp, #4]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	4633      	mov	r3, r6
 8006efe:	4a60      	ldr	r2, [pc, #384]	; (8007080 <AT_ESP8266_ND+0x604>)
 8006f00:	4629      	mov	r1, r5
 8006f02:	4620      	mov	r0, r4
 8006f04:	f007 fd90 	bl	800ea28 <FT_String_ND>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	f040 83b4 	bne.w	8007678 <AT_ESP8266_ND+0xbfc>
	{

		AT_decode=at_ok;
 8006f10:	2301      	movs	r3, #1
 8006f12:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND");
 8006f16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2206      	movs	r2, #6
 8006f22:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Transmision ok
 8006f26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006f34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006f42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006f50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006f5e:	603b      	str	r3, [r7, #0]
 8006f60:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f64:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f68:	6812      	ldr	r2, [r2, #0]
 8006f6a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006f6e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f72:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f76:	6809      	ldr	r1, [r1, #0]
 8006f78:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006f7c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006f80:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006f84:	6800      	ldr	r0, [r0, #0]
 8006f86:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	9305      	str	r3, [sp, #20]
 8006f8e:	9004      	str	r0, [sp, #16]
 8006f90:	9103      	str	r1, [sp, #12]
 8006f92:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f96:	9102      	str	r1, [sp, #8]
 8006f98:	9201      	str	r2, [sp, #4]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	4633      	mov	r3, r6
 8006fa0:	4a38      	ldr	r2, [pc, #224]	; (8007084 <AT_ESP8266_ND+0x608>)
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f007 fd3f 	bl	800ea28 <FT_String_ND>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d113      	bne.n	8006fd8 <AT_ESP8266_ND+0x55c>
			 {
			 AT_decode=at_tcp_enviado_ok;
 8006fb0:	2313      	movs	r3, #19
 8006fb2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 8006fb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 8006fd4:	f001 bae1 	b.w	800859a <AT_ESP8266_ND+0x1b1e>
			 }
		 else
		 {
		//------------------CONFIRMO CIERRE DE  CONEXION------------------//
		a->_n_fcomp=strlen("AT+CWQAP");
 8006fd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2208      	movs	r2, #8
 8006fe4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006fe8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006ff6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ffa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007004:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007008:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007012:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007016:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007020:	603b      	str	r3, [r7, #0]
 8007022:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007026:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800702a:	6812      	ldr	r2, [r2, #0]
 800702c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007030:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007034:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007038:	6809      	ldr	r1, [r1, #0]
 800703a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800703e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007042:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007046:	6800      	ldr	r0, [r0, #0]
 8007048:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800704c:	2300      	movs	r3, #0
 800704e:	9305      	str	r3, [sp, #20]
 8007050:	9004      	str	r0, [sp, #16]
 8007052:	9103      	str	r1, [sp, #12]
 8007054:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007058:	9102      	str	r1, [sp, #8]
 800705a:	9201      	str	r2, [sp, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	4633      	mov	r3, r6
 8007062:	4a09      	ldr	r2, [pc, #36]	; (8007088 <AT_ESP8266_ND+0x60c>)
 8007064:	4629      	mov	r1, r5
 8007066:	4620      	mov	r0, r4
 8007068:	f007 fcde 	bl	800ea28 <FT_String_ND>
 800706c:	4603      	mov	r3, r0
 800706e:	2b01      	cmp	r3, #1
 8007070:	d10c      	bne.n	800708c <AT_ESP8266_ND+0x610>
			{
			AT_decode=at_deconectar_ok;
 8007072:	230d      	movs	r3, #13
 8007074:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007078:	f001 ba8f 	b.w	800859a <AT_ESP8266_ND+0x1b1e>
 800707c:	08010a3c 	.word	0x08010a3c
 8007080:	08010a44 	.word	0x08010a44
 8007084:	08010a4c 	.word	0x08010a4c
 8007088:	08010a54 	.word	0x08010a54
			}
		else
		{
		//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
		a->_n_fcomp=strlen("AT+CWMODE=");
 800708c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007090:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	220a      	movs	r2, #10
 8007098:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 800709c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80070aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80070b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80070c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80070d4:	603b      	str	r3, [r7, #0]
 80070d6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80070da:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80070de:	6812      	ldr	r2, [r2, #0]
 80070e0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80070e4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80070e8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80070ec:	6809      	ldr	r1, [r1, #0]
 80070ee:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80070f2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80070f6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80070fa:	6800      	ldr	r0, [r0, #0]
 80070fc:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007100:	2300      	movs	r3, #0
 8007102:	9305      	str	r3, [sp, #20]
 8007104:	9004      	str	r0, [sp, #16]
 8007106:	9103      	str	r1, [sp, #12]
 8007108:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800710c:	9102      	str	r1, [sp, #8]
 800710e:	9201      	str	r2, [sp, #4]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	4633      	mov	r3, r6
 8007116:	4aaa      	ldr	r2, [pc, #680]	; (80073c0 <AT_ESP8266_ND+0x944>)
 8007118:	4629      	mov	r1, r5
 800711a:	4620      	mov	r0, r4
 800711c:	f007 fc84 	bl	800ea28 <FT_String_ND>
 8007120:	4603      	mov	r3, r0
 8007122:	2b01      	cmp	r3, #1
 8007124:	d104      	bne.n	8007130 <AT_ESP8266_ND+0x6b4>
			{
				AT_decode=at_cambiar_modo_ok;
 8007126:	231c      	movs	r3, #28
 8007128:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800712c:	f001 ba35 	b.w	800859a <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
		a->_n_fcomp=strlen("no change\r\nOK\r\n");
 8007130:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007134:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	220f      	movs	r2, #15
 800713c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007140:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007144:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800714e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007152:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800715c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007160:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800716a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800716e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007178:	603b      	str	r3, [r7, #0]
 800717a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800717e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007182:	6812      	ldr	r2, [r2, #0]
 8007184:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007188:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800718c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007190:	6809      	ldr	r1, [r1, #0]
 8007192:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007196:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800719a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800719e:	6800      	ldr	r0, [r0, #0]
 80071a0:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80071a4:	2300      	movs	r3, #0
 80071a6:	9305      	str	r3, [sp, #20]
 80071a8:	9004      	str	r0, [sp, #16]
 80071aa:	9103      	str	r1, [sp, #12]
 80071ac:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80071b0:	9102      	str	r1, [sp, #8]
 80071b2:	9201      	str	r2, [sp, #4]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	4633      	mov	r3, r6
 80071ba:	4a82      	ldr	r2, [pc, #520]	; (80073c4 <AT_ESP8266_ND+0x948>)
 80071bc:	4629      	mov	r1, r5
 80071be:	4620      	mov	r0, r4
 80071c0:	f007 fc32 	bl	800ea28 <FT_String_ND>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d104      	bne.n	80071d4 <AT_ESP8266_ND+0x758>
			{
				AT_decode=at_tcp_srvr_ok_noch;
 80071ca:	2317      	movs	r3, #23
 80071cc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80071d0:	f001 b9e3 	b.w	800859a <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------OK PARA ENVIAR------------------//
		a->_n_fcomp=strlen("\r\n>");
 80071d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2203      	movs	r2, #3
 80071e0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 80071e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80071f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007200:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007204:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800720e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007212:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800721c:	603b      	str	r3, [r7, #0]
 800721e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007222:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007226:	6812      	ldr	r2, [r2, #0]
 8007228:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800722c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007230:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007234:	6809      	ldr	r1, [r1, #0]
 8007236:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800723a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800723e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007242:	6800      	ldr	r0, [r0, #0]
 8007244:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007248:	2300      	movs	r3, #0
 800724a:	9305      	str	r3, [sp, #20]
 800724c:	9004      	str	r0, [sp, #16]
 800724e:	9103      	str	r1, [sp, #12]
 8007250:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007254:	9102      	str	r1, [sp, #8]
 8007256:	9201      	str	r2, [sp, #4]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	4633      	mov	r3, r6
 800725e:	4a5a      	ldr	r2, [pc, #360]	; (80073c8 <AT_ESP8266_ND+0x94c>)
 8007260:	4629      	mov	r1, r5
 8007262:	4620      	mov	r0, r4
 8007264:	f007 fbe0 	bl	800ea28 <FT_String_ND>
 8007268:	4603      	mov	r3, r0
 800726a:	2b01      	cmp	r3, #1
 800726c:	d104      	bne.n	8007278 <AT_ESP8266_ND+0x7fc>
			{
				AT_decode=at_tcp_ok_to_send;
 800726e:	2314      	movs	r3, #20
 8007270:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007274:	f001 b991 	b.w	800859a <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------OK SERVIDOR------------------//
		a->_n_fcomp=strlen("AT+CIPSERVER");
 8007278:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800727c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	220c      	movs	r2, #12
 8007284:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007288:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800728c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007296:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800729a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80072a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80072b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80072c0:	603b      	str	r3, [r7, #0]
 80072c2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80072c6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80072ca:	6812      	ldr	r2, [r2, #0]
 80072cc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80072d0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80072d4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80072d8:	6809      	ldr	r1, [r1, #0]
 80072da:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80072de:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80072e2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80072e6:	6800      	ldr	r0, [r0, #0]
 80072e8:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80072ec:	2300      	movs	r3, #0
 80072ee:	9305      	str	r3, [sp, #20]
 80072f0:	9004      	str	r0, [sp, #16]
 80072f2:	9103      	str	r1, [sp, #12]
 80072f4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80072f8:	9102      	str	r1, [sp, #8]
 80072fa:	9201      	str	r2, [sp, #4]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	4633      	mov	r3, r6
 8007302:	4a32      	ldr	r2, [pc, #200]	; (80073cc <AT_ESP8266_ND+0x950>)
 8007304:	4629      	mov	r1, r5
 8007306:	4620      	mov	r0, r4
 8007308:	f007 fb8e 	bl	800ea28 <FT_String_ND>
 800730c:	4603      	mov	r3, r0
 800730e:	2b01      	cmp	r3, #1
 8007310:	d104      	bne.n	800731c <AT_ESP8266_ND+0x8a0>
		{
			AT_decode=at_tcp_srvr_ok;
 8007312:	2315      	movs	r3, #21
 8007314:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007318:	f001 b93f 	b.w	800859a <AT_ESP8266_ND+0x1b1e>
		}
		else
		{
		//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
		a->_n_fcomp=strlen("AT+CIPCLOSE");
 800731c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007320:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	220b      	movs	r2, #11
 8007328:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800732c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007330:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800733a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800733e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007348:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800734c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007356:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800735a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007364:	603b      	str	r3, [r7, #0]
 8007366:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800736a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800736e:	6812      	ldr	r2, [r2, #0]
 8007370:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007374:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007378:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800737c:	6809      	ldr	r1, [r1, #0]
 800737e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007382:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007386:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800738a:	6800      	ldr	r0, [r0, #0]
 800738c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007390:	2300      	movs	r3, #0
 8007392:	9305      	str	r3, [sp, #20]
 8007394:	9004      	str	r0, [sp, #16]
 8007396:	9103      	str	r1, [sp, #12]
 8007398:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800739c:	9102      	str	r1, [sp, #8]
 800739e:	9201      	str	r2, [sp, #4]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	4633      	mov	r3, r6
 80073a6:	4a0a      	ldr	r2, [pc, #40]	; (80073d0 <AT_ESP8266_ND+0x954>)
 80073a8:	4629      	mov	r1, r5
 80073aa:	4620      	mov	r0, r4
 80073ac:	f007 fb3c 	bl	800ea28 <FT_String_ND>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d10e      	bne.n	80073d4 <AT_ESP8266_ND+0x958>
			{
				AT_decode=at_tcp_closed_ok;
 80073b6:	2309      	movs	r3, #9
 80073b8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80073bc:	f001 b8ed 	b.w	800859a <AT_ESP8266_ND+0x1b1e>
 80073c0:	08010a60 	.word	0x08010a60
 80073c4:	08010a6c 	.word	0x08010a6c
 80073c8:	08010a7c 	.word	0x08010a7c
 80073cc:	08010a80 	.word	0x08010a80
 80073d0:	08010a90 	.word	0x08010a90
			}
		else
		{
		//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=1");
 80073d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	220b      	movs	r2, #11
 80073e0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80073e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80073f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007400:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007404:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800740e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007412:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800741c:	603b      	str	r3, [r7, #0]
 800741e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007422:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007426:	6812      	ldr	r2, [r2, #0]
 8007428:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800742c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007430:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007434:	6809      	ldr	r1, [r1, #0]
 8007436:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800743a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800743e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007442:	6800      	ldr	r0, [r0, #0]
 8007444:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007448:	2300      	movs	r3, #0
 800744a:	9305      	str	r3, [sp, #20]
 800744c:	9004      	str	r0, [sp, #16]
 800744e:	9103      	str	r1, [sp, #12]
 8007450:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007454:	9102      	str	r1, [sp, #8]
 8007456:	9201      	str	r2, [sp, #4]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	9300      	str	r3, [sp, #0]
 800745c:	4633      	mov	r3, r6
 800745e:	4a82      	ldr	r2, [pc, #520]	; (8007668 <AT_ESP8266_ND+0xbec>)
 8007460:	4629      	mov	r1, r5
 8007462:	4620      	mov	r0, r4
 8007464:	f007 fae0 	bl	800ea28 <FT_String_ND>
 8007468:	4603      	mov	r3, r0
 800746a:	2b01      	cmp	r3, #1
 800746c:	d104      	bne.n	8007478 <AT_ESP8266_ND+0x9fc>
			{
				AT_decode=at_multiple_conn_ok;
 800746e:	2307      	movs	r3, #7
 8007470:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007474:	f001 b891 	b.w	800859a <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=0");
 8007478:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800747c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	220b      	movs	r2, #11
 8007484:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007488:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800748c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007496:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800749a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80074a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80074b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80074c0:	603b      	str	r3, [r7, #0]
 80074c2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80074c6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80074ca:	6812      	ldr	r2, [r2, #0]
 80074cc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80074d0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80074d4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80074d8:	6809      	ldr	r1, [r1, #0]
 80074da:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80074de:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80074e2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80074e6:	6800      	ldr	r0, [r0, #0]
 80074e8:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80074ec:	2300      	movs	r3, #0
 80074ee:	9305      	str	r3, [sp, #20]
 80074f0:	9004      	str	r0, [sp, #16]
 80074f2:	9103      	str	r1, [sp, #12]
 80074f4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80074f8:	9102      	str	r1, [sp, #8]
 80074fa:	9201      	str	r2, [sp, #4]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	4633      	mov	r3, r6
 8007502:	4a5a      	ldr	r2, [pc, #360]	; (800766c <AT_ESP8266_ND+0xbf0>)
 8007504:	4629      	mov	r1, r5
 8007506:	4620      	mov	r0, r4
 8007508:	f007 fa8e 	bl	800ea28 <FT_String_ND>
 800750c:	4603      	mov	r3, r0
 800750e:	2b01      	cmp	r3, #1
 8007510:	d104      	bne.n	800751c <AT_ESP8266_ND+0xaa0>
			{
				AT_decode=at_no_multiple_conn_ok;
 8007512:	2308      	movs	r3, #8
 8007514:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007518:	f001 b83f 	b.w	800859a <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------DEFIIR IP OK------------------//
		a->_n_fcomp=strlen("AT+CIPSTA=");
 800751c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007520:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	220a      	movs	r2, #10
 8007528:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800752c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007530:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800753a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800753e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007548:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800754c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007556:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800755a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007564:	603b      	str	r3, [r7, #0]
 8007566:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800756a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800756e:	6812      	ldr	r2, [r2, #0]
 8007570:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007574:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007578:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800757c:	6809      	ldr	r1, [r1, #0]
 800757e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007582:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007586:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800758a:	6800      	ldr	r0, [r0, #0]
 800758c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007590:	2300      	movs	r3, #0
 8007592:	9305      	str	r3, [sp, #20]
 8007594:	9004      	str	r0, [sp, #16]
 8007596:	9103      	str	r1, [sp, #12]
 8007598:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800759c:	9102      	str	r1, [sp, #8]
 800759e:	9201      	str	r2, [sp, #4]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	4633      	mov	r3, r6
 80075a6:	4a32      	ldr	r2, [pc, #200]	; (8007670 <AT_ESP8266_ND+0xbf4>)
 80075a8:	4629      	mov	r1, r5
 80075aa:	4620      	mov	r0, r4
 80075ac:	f007 fa3c 	bl	800ea28 <FT_String_ND>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d104      	bne.n	80075c0 <AT_ESP8266_ND+0xb44>
			{
				AT_decode=at_def_ip_ok;
 80075b6:	231b      	movs	r3, #27
 80075b8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80075bc:	f000 bfed 	b.w	800859a <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------TCP CONECTADO------------------//
		a->_n_fcomp=strlen("CONNECT");
 80075c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2207      	movs	r2, #7
 80075cc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 80075d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80075de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80075ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80075fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007608:	603b      	str	r3, [r7, #0]
 800760a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800760e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007612:	6812      	ldr	r2, [r2, #0]
 8007614:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007618:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800761c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007620:	6809      	ldr	r1, [r1, #0]
 8007622:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007626:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800762a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800762e:	6800      	ldr	r0, [r0, #0]
 8007630:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007634:	2300      	movs	r3, #0
 8007636:	9305      	str	r3, [sp, #20]
 8007638:	9004      	str	r0, [sp, #16]
 800763a:	9103      	str	r1, [sp, #12]
 800763c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007640:	9102      	str	r1, [sp, #8]
 8007642:	9201      	str	r2, [sp, #4]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	4633      	mov	r3, r6
 800764a:	4a0a      	ldr	r2, [pc, #40]	; (8007674 <AT_ESP8266_ND+0xbf8>)
 800764c:	4629      	mov	r1, r5
 800764e:	4620      	mov	r0, r4
 8007650:	f007 f9ea 	bl	800ea28 <FT_String_ND>
 8007654:	4603      	mov	r3, r0
 8007656:	2b01      	cmp	r3, #1
 8007658:	f040 879f 	bne.w	800859a <AT_ESP8266_ND+0x1b1e>
			{
			AT_decode=at_tcp_conectado;
 800765c:	230f      	movs	r3, #15
 800765e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007662:	f000 bf9a 	b.w	800859a <AT_ESP8266_ND+0x1b1e>
 8007666:	bf00      	nop
 8007668:	08010a9c 	.word	0x08010a9c
 800766c:	08010aa8 	.word	0x08010aa8
 8007670:	08010ab4 	.word	0x08010ab4
 8007674:	08010ac0 	.word	0x08010ac0
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\n");
 8007678:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800767c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2207      	movs	r2, #7
 8007684:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007688:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800768c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007696:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800769a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80076a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80076b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80076c0:	603b      	str	r3, [r7, #0]
 80076c2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80076c6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80076ca:	6812      	ldr	r2, [r2, #0]
 80076cc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80076d0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80076d4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80076d8:	6809      	ldr	r1, [r1, #0]
 80076da:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80076de:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80076e2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80076e6:	6800      	ldr	r0, [r0, #0]
 80076e8:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80076ec:	2300      	movs	r3, #0
 80076ee:	9305      	str	r3, [sp, #20]
 80076f0:	9004      	str	r0, [sp, #16]
 80076f2:	9103      	str	r1, [sp, #12]
 80076f4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80076f8:	9102      	str	r1, [sp, #8]
 80076fa:	9201      	str	r2, [sp, #4]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	4633      	mov	r3, r6
 8007702:	4aaa      	ldr	r2, [pc, #680]	; (80079ac <AT_ESP8266_ND+0xf30>)
 8007704:	4629      	mov	r1, r5
 8007706:	4620      	mov	r0, r4
 8007708:	f007 f98e 	bl	800ea28 <FT_String_ND>
 800770c:	4603      	mov	r3, r0
 800770e:	2b01      	cmp	r3, #1
 8007710:	f040 839d 	bne.w	8007e4e <AT_ESP8266_ND+0x13d2>
		{
				AT_decode=at_error;
 8007714:	2302      	movs	r3, #2
 8007716:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("CLOSED\r\n");
 800771a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800771e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2208      	movs	r2, #8
 8007726:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Intentando conectar con servidor TCP caido
 800772a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800772e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007738:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800773c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007746:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800774a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007754:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007758:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007762:	603b      	str	r3, [r7, #0]
 8007764:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007768:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800776c:	6812      	ldr	r2, [r2, #0]
 800776e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007772:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007776:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800777a:	6809      	ldr	r1, [r1, #0]
 800777c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007780:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007784:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007788:	6800      	ldr	r0, [r0, #0]
 800778a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800778e:	2300      	movs	r3, #0
 8007790:	9305      	str	r3, [sp, #20]
 8007792:	9004      	str	r0, [sp, #16]
 8007794:	9103      	str	r1, [sp, #12]
 8007796:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800779a:	9102      	str	r1, [sp, #8]
 800779c:	9201      	str	r2, [sp, #4]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	4633      	mov	r3, r6
 80077a4:	4a82      	ldr	r2, [pc, #520]	; (80079b0 <AT_ESP8266_ND+0xf34>)
 80077a6:	4629      	mov	r1, r5
 80077a8:	4620      	mov	r0, r4
 80077aa:	f007 f93d 	bl	800ea28 <FT_String_ND>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d104      	bne.n	80077be <AT_ESP8266_ND+0xd42>
				{
						AT_decode=at_tcp_conn_err;
 80077b4:	2306      	movs	r3, #6
 80077b6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80077ba:	f000 beee 	b.w	800859a <AT_ESP8266_ND+0x1b1e>
				}
				 else
				 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 80077be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2215      	movs	r2, #21
 80077ca:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 80077ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80077dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80077ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80077f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007806:	603b      	str	r3, [r7, #0]
 8007808:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800780c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007810:	6812      	ldr	r2, [r2, #0]
 8007812:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007816:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800781a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800781e:	6809      	ldr	r1, [r1, #0]
 8007820:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007824:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007828:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800782c:	6800      	ldr	r0, [r0, #0]
 800782e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007832:	2300      	movs	r3, #0
 8007834:	9305      	str	r3, [sp, #20]
 8007836:	9004      	str	r0, [sp, #16]
 8007838:	9103      	str	r1, [sp, #12]
 800783a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800783e:	9102      	str	r1, [sp, #8]
 8007840:	9201      	str	r2, [sp, #4]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	4633      	mov	r3, r6
 8007848:	4a5a      	ldr	r2, [pc, #360]	; (80079b4 <AT_ESP8266_ND+0xf38>)
 800784a:	4629      	mov	r1, r5
 800784c:	4620      	mov	r0, r4
 800784e:	f007 f8eb 	bl	800ea28 <FT_String_ND>
 8007852:	4603      	mov	r3, r0
 8007854:	2b01      	cmp	r3, #1
 8007856:	d104      	bne.n	8007862 <AT_ESP8266_ND+0xde6>
				{
					 	AT_decode=at_tcp_alrdy_cnntd_err;
 8007858:	230e      	movs	r3, #14
 800785a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800785e:	f000 be9c 	b.w	800859a <AT_ESP8266_ND+0x1b1e>
				}
				else
				{
				//------------------OK PARA ENVIAR------------------//
				a->_n_fcomp=strlen("AT+CIPSERVER");
 8007862:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007866:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	220c      	movs	r2, #12
 800786e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007872:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007876:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007880:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007884:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800788e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007892:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800789c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80078b0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80078b4:	6812      	ldr	r2, [r2, #0]
 80078b6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80078ba:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80078be:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80078c2:	6809      	ldr	r1, [r1, #0]
 80078c4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80078c8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80078cc:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80078d0:	6800      	ldr	r0, [r0, #0]
 80078d2:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80078d6:	2300      	movs	r3, #0
 80078d8:	9305      	str	r3, [sp, #20]
 80078da:	9004      	str	r0, [sp, #16]
 80078dc:	9103      	str	r1, [sp, #12]
 80078de:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80078e2:	9102      	str	r1, [sp, #8]
 80078e4:	9201      	str	r2, [sp, #4]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	4633      	mov	r3, r6
 80078ec:	4a32      	ldr	r2, [pc, #200]	; (80079b8 <AT_ESP8266_ND+0xf3c>)
 80078ee:	4629      	mov	r1, r5
 80078f0:	4620      	mov	r0, r4
 80078f2:	f007 f899 	bl	800ea28 <FT_String_ND>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d104      	bne.n	8007906 <AT_ESP8266_ND+0xe8a>
				{
					AT_decode=at_tcp_srvr_err;
 80078fc:	2316      	movs	r3, #22
 80078fe:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007902:	f000 be4a 	b.w	800859a <AT_ESP8266_ND+0x1b1e>
				}
				else
				{
				//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
				a->_n_fcomp=strlen("AT+CIPCLOSE");
 8007906:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800790a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	220b      	movs	r2, #11
 8007912:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8007916:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800791a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007924:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007928:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007932:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007936:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007940:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007944:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800794e:	603b      	str	r3, [r7, #0]
 8007950:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007954:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007958:	6812      	ldr	r2, [r2, #0]
 800795a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800795e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007962:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007966:	6809      	ldr	r1, [r1, #0]
 8007968:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800796c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007970:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007974:	6800      	ldr	r0, [r0, #0]
 8007976:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800797a:	2300      	movs	r3, #0
 800797c:	9305      	str	r3, [sp, #20]
 800797e:	9004      	str	r0, [sp, #16]
 8007980:	9103      	str	r1, [sp, #12]
 8007982:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007986:	9102      	str	r1, [sp, #8]
 8007988:	9201      	str	r2, [sp, #4]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	9300      	str	r3, [sp, #0]
 800798e:	4633      	mov	r3, r6
 8007990:	4a0a      	ldr	r2, [pc, #40]	; (80079bc <AT_ESP8266_ND+0xf40>)
 8007992:	4629      	mov	r1, r5
 8007994:	4620      	mov	r0, r4
 8007996:	f007 f847 	bl	800ea28 <FT_String_ND>
 800799a:	4603      	mov	r3, r0
 800799c:	2b01      	cmp	r3, #1
 800799e:	d10f      	bne.n	80079c0 <AT_ESP8266_ND+0xf44>
					{
						AT_decode=at_tcp_close_err;
 80079a0:	231a      	movs	r3, #26
 80079a2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80079a6:	f000 bdf8 	b.w	800859a <AT_ESP8266_ND+0x1b1e>
 80079aa:	bf00      	nop
 80079ac:	08010ac8 	.word	0x08010ac8
 80079b0:	08010ad0 	.word	0x08010ad0
 80079b4:	08010adc 	.word	0x08010adc
 80079b8:	08010a80 	.word	0x08010a80
 80079bc:	08010a90 	.word	0x08010a90
					}
				else
				{
				//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
				a->_n_fcomp=strlen("link is not valid");
 80079c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2211      	movs	r2, #17
 80079cc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 80079d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80079de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80079ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80079fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007a08:	603b      	str	r3, [r7, #0]
 8007a0a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a0e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007a12:	6812      	ldr	r2, [r2, #0]
 8007a14:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007a18:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007a1c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a20:	6809      	ldr	r1, [r1, #0]
 8007a22:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007a26:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007a2a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007a2e:	6800      	ldr	r0, [r0, #0]
 8007a30:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007a34:	2300      	movs	r3, #0
 8007a36:	9305      	str	r3, [sp, #20]
 8007a38:	9004      	str	r0, [sp, #16]
 8007a3a:	9103      	str	r1, [sp, #12]
 8007a3c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a40:	9102      	str	r1, [sp, #8]
 8007a42:	9201      	str	r2, [sp, #4]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	4633      	mov	r3, r6
 8007a4a:	4aaa      	ldr	r2, [pc, #680]	; (8007cf4 <AT_ESP8266_ND+0x1278>)
 8007a4c:	4629      	mov	r1, r5
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f006 ffea 	bl	800ea28 <FT_String_ND>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d104      	bne.n	8007a64 <AT_ESP8266_ND+0xfe8>
					{
						AT_decode=at_tcp_snd_err;
 8007a5a:	2311      	movs	r3, #17
 8007a5c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007a60:	f000 bd9b 	b.w	800859a <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 8007a64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	220a      	movs	r2, #10
 8007a70:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8007a74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007a82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007a90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007a9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007aa2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007aac:	603b      	str	r3, [r7, #0]
 8007aae:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007ab2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ab6:	6812      	ldr	r2, [r2, #0]
 8007ab8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007abc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007ac0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007ac4:	6809      	ldr	r1, [r1, #0]
 8007ac6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007aca:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007ace:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007ad2:	6800      	ldr	r0, [r0, #0]
 8007ad4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007ad8:	2300      	movs	r3, #0
 8007ada:	9305      	str	r3, [sp, #20]
 8007adc:	9004      	str	r0, [sp, #16]
 8007ade:	9103      	str	r1, [sp, #12]
 8007ae0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007ae4:	9102      	str	r1, [sp, #8]
 8007ae6:	9201      	str	r2, [sp, #4]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	4633      	mov	r3, r6
 8007aee:	4a82      	ldr	r2, [pc, #520]	; (8007cf8 <AT_ESP8266_ND+0x127c>)
 8007af0:	4629      	mov	r1, r5
 8007af2:	4620      	mov	r0, r4
 8007af4:	f006 ff98 	bl	800ea28 <FT_String_ND>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d104      	bne.n	8007b08 <AT_ESP8266_ND+0x108c>
					{
						AT_decode=at_cambiar_modo_err;
 8007afe:	231d      	movs	r3, #29
 8007b00:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007b04:	f000 bd49 	b.w	800859a <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007b08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	220b      	movs	r2, #11
 8007b14:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007b18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007b26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007b34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007b42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007b50:	603b      	str	r3, [r7, #0]
 8007b52:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b56:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b5a:	6812      	ldr	r2, [r2, #0]
 8007b5c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007b60:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b64:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b68:	6809      	ldr	r1, [r1, #0]
 8007b6a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007b6e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007b72:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007b76:	6800      	ldr	r0, [r0, #0]
 8007b78:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	9305      	str	r3, [sp, #20]
 8007b80:	9004      	str	r0, [sp, #16]
 8007b82:	9103      	str	r1, [sp, #12]
 8007b84:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b88:	9102      	str	r1, [sp, #8]
 8007b8a:	9201      	str	r2, [sp, #4]
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	4633      	mov	r3, r6
 8007b92:	4a5a      	ldr	r2, [pc, #360]	; (8007cfc <AT_ESP8266_ND+0x1280>)
 8007b94:	4629      	mov	r1, r5
 8007b96:	4620      	mov	r0, r4
 8007b98:	f006 ff46 	bl	800ea28 <FT_String_ND>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d104      	bne.n	8007bac <AT_ESP8266_ND+0x1130>
					{
						AT_decode=at_multiple_conn_err;
 8007ba2:	231e      	movs	r3, #30
 8007ba4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007ba8:	f000 bcf7 	b.w	800859a <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=0");
 8007bac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	220b      	movs	r2, #11
 8007bb8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007bbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007bca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007bd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007be6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007bf4:	603b      	str	r3, [r7, #0]
 8007bf6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007bfa:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007bfe:	6812      	ldr	r2, [r2, #0]
 8007c00:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007c04:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c08:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c0c:	6809      	ldr	r1, [r1, #0]
 8007c0e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007c12:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007c16:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007c1a:	6800      	ldr	r0, [r0, #0]
 8007c1c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007c20:	2300      	movs	r3, #0
 8007c22:	9305      	str	r3, [sp, #20]
 8007c24:	9004      	str	r0, [sp, #16]
 8007c26:	9103      	str	r1, [sp, #12]
 8007c28:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007c2c:	9102      	str	r1, [sp, #8]
 8007c2e:	9201      	str	r2, [sp, #4]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	4633      	mov	r3, r6
 8007c36:	4a32      	ldr	r2, [pc, #200]	; (8007d00 <AT_ESP8266_ND+0x1284>)
 8007c38:	4629      	mov	r1, r5
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f006 fef4 	bl	800ea28 <FT_String_ND>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d104      	bne.n	8007c50 <AT_ESP8266_ND+0x11d4>
					{
						AT_decode=at_no_multiple_conn_err;
 8007c46:	231f      	movs	r3, #31
 8007c48:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007c4c:	f000 bca5 	b.w	800859a <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CWJAP");
 8007c50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2208      	movs	r2, #8
 8007c5c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007c60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007c6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007c7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007c8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007c98:	603b      	str	r3, [r7, #0]
 8007c9a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c9e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ca2:	6812      	ldr	r2, [r2, #0]
 8007ca4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ca8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007cac:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007cb0:	6809      	ldr	r1, [r1, #0]
 8007cb2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007cb6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007cba:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007cbe:	6800      	ldr	r0, [r0, #0]
 8007cc0:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	9305      	str	r3, [sp, #20]
 8007cc8:	9004      	str	r0, [sp, #16]
 8007cca:	9103      	str	r1, [sp, #12]
 8007ccc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007cd0:	9102      	str	r1, [sp, #8]
 8007cd2:	9201      	str	r2, [sp, #4]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	4633      	mov	r3, r6
 8007cda:	4a0a      	ldr	r2, [pc, #40]	; (8007d04 <AT_ESP8266_ND+0x1288>)
 8007cdc:	4629      	mov	r1, r5
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f006 fea2 	bl	800ea28 <FT_String_ND>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d10e      	bne.n	8007d08 <AT_ESP8266_ND+0x128c>
					{
						AT_decode=at_conn_wifi_err;
 8007cea:	2320      	movs	r3, #32
 8007cec:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007cf0:	f000 bc53 	b.w	800859a <AT_ESP8266_ND+0x1b1e>
 8007cf4:	08010af4 	.word	0x08010af4
 8007cf8:	08010a60 	.word	0x08010a60
 8007cfc:	08010a9c 	.word	0x08010a9c
 8007d00:	08010aa8 	.word	0x08010aa8
 8007d04:	08010b08 	.word	0x08010b08
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CIPSTA=");
 8007d08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	220a      	movs	r2, #10
 8007d14:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007d18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007d26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007d34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007d42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007d50:	603b      	str	r3, [r7, #0]
 8007d52:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d56:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d5a:	6812      	ldr	r2, [r2, #0]
 8007d5c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007d60:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007d64:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007d68:	6809      	ldr	r1, [r1, #0]
 8007d6a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007d6e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007d72:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007d76:	6800      	ldr	r0, [r0, #0]
 8007d78:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	9305      	str	r3, [sp, #20]
 8007d80:	9004      	str	r0, [sp, #16]
 8007d82:	9103      	str	r1, [sp, #12]
 8007d84:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007d88:	9102      	str	r1, [sp, #8]
 8007d8a:	9201      	str	r2, [sp, #4]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	4633      	mov	r3, r6
 8007d92:	4ab7      	ldr	r2, [pc, #732]	; (8008070 <AT_ESP8266_ND+0x15f4>)
 8007d94:	4629      	mov	r1, r5
 8007d96:	4620      	mov	r0, r4
 8007d98:	f006 fe46 	bl	800ea28 <FT_String_ND>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d103      	bne.n	8007daa <AT_ESP8266_ND+0x132e>
					{
						AT_decode=at_def_ip_err;
 8007da2:	2321      	movs	r3, #33	; 0x21
 8007da4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007da8:	e3f7      	b.n	800859a <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("no ip");
 8007daa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2205      	movs	r2, #5
 8007db6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007dba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007dc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007dd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007de4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007de8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007df2:	603b      	str	r3, [r7, #0]
 8007df4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007df8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007dfc:	6812      	ldr	r2, [r2, #0]
 8007dfe:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007e02:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007e06:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007e0a:	6809      	ldr	r1, [r1, #0]
 8007e0c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007e10:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007e14:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007e18:	6800      	ldr	r0, [r0, #0]
 8007e1a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007e1e:	2300      	movs	r3, #0
 8007e20:	9305      	str	r3, [sp, #20]
 8007e22:	9004      	str	r0, [sp, #16]
 8007e24:	9103      	str	r1, [sp, #12]
 8007e26:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007e2a:	9102      	str	r1, [sp, #8]
 8007e2c:	9201      	str	r2, [sp, #4]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	4633      	mov	r3, r6
 8007e34:	4a8f      	ldr	r2, [pc, #572]	; (8008074 <AT_ESP8266_ND+0x15f8>)
 8007e36:	4629      	mov	r1, r5
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f006 fdf5 	bl	800ea28 <FT_String_ND>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	f040 83aa 	bne.w	800859a <AT_ESP8266_ND+0x1b1e>
					{
						AT_decode=at_tcp_noip_err;  //PROCESAR
 8007e46:	2322      	movs	r3, #34	; 0x22
 8007e48:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007e4c:	e3a5      	b.n	800859a <AT_ESP8266_ND+0x1b1e>
		else
		{
			 //--------------------------------------------------------------------------------------------------------------//
			 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
			 //--------------------------------------------------------------------------------------------------------------//
			a->_n_fcomp=strlen("WIFI DISCONNECT");
 8007e4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	220f      	movs	r2, #15
 8007e5a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 8007e5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007e6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007e7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007e88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007e96:	603b      	str	r3, [r7, #0]
 8007e98:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007e9c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ea0:	6812      	ldr	r2, [r2, #0]
 8007ea2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ea6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007eaa:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007eae:	6809      	ldr	r1, [r1, #0]
 8007eb0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007eb4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007eb8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007ebc:	6800      	ldr	r0, [r0, #0]
 8007ebe:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	9305      	str	r3, [sp, #20]
 8007ec6:	9004      	str	r0, [sp, #16]
 8007ec8:	9103      	str	r1, [sp, #12]
 8007eca:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007ece:	9102      	str	r1, [sp, #8]
 8007ed0:	9201      	str	r2, [sp, #4]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	4633      	mov	r3, r6
 8007ed8:	4a67      	ldr	r2, [pc, #412]	; (8008078 <AT_ESP8266_ND+0x15fc>)
 8007eda:	4629      	mov	r1, r5
 8007edc:	4620      	mov	r0, r4
 8007ede:	f006 fda3 	bl	800ea28 <FT_String_ND>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d112      	bne.n	8007f0e <AT_ESP8266_ND+0x1492>
				{
					 AT_decode=at_wifi_disconnect;
 8007ee8:	230a      	movs	r3, #10
 8007eea:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					 a->_debug_WF_DISCONNECT++;
 8007eee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ef2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007efc:	1c5a      	adds	r2, r3, #1
 8007efe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 8007f0c:	e345      	b.n	800859a <AT_ESP8266_ND+0x1b1e>
				}
			else
			{
			//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
			a->_n_fcomp=strlen(",CLOSED\r\n");
 8007f0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2209      	movs	r2, #9
 8007f1a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007f1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007f2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007f3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007f48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007f56:	603b      	str	r3, [r7, #0]
 8007f58:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007f5c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007f60:	6812      	ldr	r2, [r2, #0]
 8007f62:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007f66:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007f6a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007f6e:	6809      	ldr	r1, [r1, #0]
 8007f70:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007f74:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007f78:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007f7c:	6800      	ldr	r0, [r0, #0]
 8007f7e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007f82:	2300      	movs	r3, #0
 8007f84:	9305      	str	r3, [sp, #20]
 8007f86:	9004      	str	r0, [sp, #16]
 8007f88:	9103      	str	r1, [sp, #12]
 8007f8a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007f8e:	9102      	str	r1, [sp, #8]
 8007f90:	9201      	str	r2, [sp, #4]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	4633      	mov	r3, r6
 8007f98:	4a38      	ldr	r2, [pc, #224]	; (800807c <AT_ESP8266_ND+0x1600>)
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f006 fd43 	bl	800ea28 <FT_String_ND>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d112      	bne.n	8007fce <AT_ESP8266_ND+0x1552>
				{
					AT_decode=at_tcp_client_desc;
 8007fa8:	2319      	movs	r3, #25
 8007faa:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					a->_debug_CLOSED++;
 8007fae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 8007fbc:	1c5a      	adds	r2, r3, #1
 8007fbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
 8007fcc:	e2e5      	b.n	800859a <AT_ESP8266_ND+0x1b1e>
			//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
			// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
			// primero ve el SEND OKse queda en el estado 705 por error al     //
			//  enviar														  //
			//-----------------------------------------------------------------//
			a->_n_fcomp=strlen("CLOSED\r\n");
 8007fce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2208      	movs	r2, #8
 8007fda:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007fde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fe2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007fec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ff0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007ffa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ffe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8008008:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800800c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008016:	603b      	str	r3, [r7, #0]
 8008018:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800801c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008020:	6812      	ldr	r2, [r2, #0]
 8008022:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8008026:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800802a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800802e:	6809      	ldr	r1, [r1, #0]
 8008030:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8008034:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008038:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800803c:	6800      	ldr	r0, [r0, #0]
 800803e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8008042:	2300      	movs	r3, #0
 8008044:	9305      	str	r3, [sp, #20]
 8008046:	9004      	str	r0, [sp, #16]
 8008048:	9103      	str	r1, [sp, #12]
 800804a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800804e:	9102      	str	r1, [sp, #8]
 8008050:	9201      	str	r2, [sp, #4]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	4633      	mov	r3, r6
 8008058:	4a09      	ldr	r2, [pc, #36]	; (8008080 <AT_ESP8266_ND+0x1604>)
 800805a:	4629      	mov	r1, r5
 800805c:	4620      	mov	r0, r4
 800805e:	f006 fce3 	bl	800ea28 <FT_String_ND>
 8008062:	4603      	mov	r3, r0
 8008064:	2b01      	cmp	r3, #1
 8008066:	d10d      	bne.n	8008084 <AT_ESP8266_ND+0x1608>
				{
					AT_decode=at_tcp_desconectado;
 8008068:	2310      	movs	r3, #16
 800806a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800806e:	e294      	b.n	800859a <AT_ESP8266_ND+0x1b1e>
 8008070:	08010ab4 	.word	0x08010ab4
 8008074:	08010b14 	.word	0x08010b14
 8008078:	08010b1c 	.word	0x08010b1c
 800807c:	08010b2c 	.word	0x08010b2c
 8008080:	08010ad0 	.word	0x08010ad0
				}
			else
			{

			//------------------ENVIADO = RECIBIDO ------------------//
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8008084:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008088:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8008092:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008096:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80080a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f203 4694 	addw	r6, r3, #1172	; 0x494
 80080ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f603 4cdc 	addw	ip, r3, #3292	; 0xcdc
 80080bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80080ca:	603b      	str	r3, [r7, #0]
 80080cc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80080d0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80080d4:	6812      	ldr	r2, [r2, #0]
 80080d6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80080da:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80080de:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80080e2:	6809      	ldr	r1, [r1, #0]
 80080e4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80080e8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80080ec:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80080f0:	6800      	ldr	r0, [r0, #0]
 80080f2:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80080f6:	2300      	movs	r3, #0
 80080f8:	9305      	str	r3, [sp, #20]
 80080fa:	9004      	str	r0, [sp, #16]
 80080fc:	9103      	str	r1, [sp, #12]
 80080fe:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008102:	9102      	str	r1, [sp, #8]
 8008104:	9201      	str	r2, [sp, #4]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	4663      	mov	r3, ip
 800810c:	4632      	mov	r2, r6
 800810e:	4629      	mov	r1, r5
 8008110:	4620      	mov	r0, r4
 8008112:	f006 fc89 	bl	800ea28 <FT_String_ND>
 8008116:	4603      	mov	r3, r0
 8008118:	2b01      	cmp	r3, #1
 800811a:	d112      	bne.n	8008142 <AT_ESP8266_ND+0x16c6>
				 {
				 	if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 800811c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008120:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 8235 	beq.w	800859a <AT_ESP8266_ND+0x1b1e>
				 		{
				 		//AT_decode=10;
				 		a->_n_orig=0;
 8008130:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008134:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2200      	movs	r2, #0
 800813c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
 8008140:	e22b      	b.n	800859a <AT_ESP8266_ND+0x1b1e>
				 		}
				 	}
			else
			{
			//------------------PAQUETE ENVIADO EN FALLA--------------//
			a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8008142:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008146:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	220d      	movs	r2, #13
 800814e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 8008152:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008156:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8008160:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008164:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800816e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008172:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800817c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008180:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800818a:	603b      	str	r3, [r7, #0]
 800818c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008190:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008194:	6812      	ldr	r2, [r2, #0]
 8008196:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800819a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800819e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80081a2:	6809      	ldr	r1, [r1, #0]
 80081a4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80081a8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80081ac:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80081b0:	6800      	ldr	r0, [r0, #0]
 80081b2:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80081b6:	2300      	movs	r3, #0
 80081b8:	9305      	str	r3, [sp, #20]
 80081ba:	9004      	str	r0, [sp, #16]
 80081bc:	9103      	str	r1, [sp, #12]
 80081be:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80081c2:	9102      	str	r1, [sp, #8]
 80081c4:	9201      	str	r2, [sp, #4]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	4633      	mov	r3, r6
 80081cc:	4ac5      	ldr	r2, [pc, #788]	; (80084e4 <AT_ESP8266_ND+0x1a68>)
 80081ce:	4629      	mov	r1, r5
 80081d0:	4620      	mov	r0, r4
 80081d2:	f006 fc29 	bl	800ea28 <FT_String_ND>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d112      	bne.n	8008202 <AT_ESP8266_ND+0x1786>
			 	{
			 	 AT_decode=at_tcp_enviado_error;
 80081dc:	2312      	movs	r3, #18
 80081de:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 	 a->_debug_FAIL++;
 80081e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 80081f0:	1c5a      	adds	r2, r3, #1
 80081f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 8008200:	e1cb      	b.n	800859a <AT_ESP8266_ND+0x1b1e>



			//------------------OBTENCI�N DE IP------------------//
			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8008202:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008206:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	220d      	movs	r2, #13
 800820e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Obtiene IP
 8008212:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008216:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8008220:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008224:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800822e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008232:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800823c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008240:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800824a:	603b      	str	r3, [r7, #0]
 800824c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008250:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008254:	6812      	ldr	r2, [r2, #0]
 8008256:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800825a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800825e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008262:	6809      	ldr	r1, [r1, #0]
 8008264:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8008268:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800826c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008270:	6800      	ldr	r0, [r0, #0]
 8008272:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8008276:	2300      	movs	r3, #0
 8008278:	9305      	str	r3, [sp, #20]
 800827a:	9004      	str	r0, [sp, #16]
 800827c:	9103      	str	r1, [sp, #12]
 800827e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008282:	9102      	str	r1, [sp, #8]
 8008284:	9201      	str	r2, [sp, #4]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	4633      	mov	r3, r6
 800828c:	4a96      	ldr	r2, [pc, #600]	; (80084e8 <AT_ESP8266_ND+0x1a6c>)
 800828e:	4629      	mov	r1, r5
 8008290:	4620      	mov	r0, r4
 8008292:	f006 fbc9 	bl	800ea28 <FT_String_ND>
 8008296:	4603      	mov	r3, r0
 8008298:	2b01      	cmp	r3, #1
 800829a:	d112      	bne.n	80082c2 <AT_ESP8266_ND+0x1846>
				{
					a->_debug_WF_GOTIP++;
 800829c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 80082aa:	1c5a      	adds	r2, r3, #1
 80082ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
					AT_decode=at_wifi_gotip;
 80082ba:	230c      	movs	r3, #12
 80082bc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80082c0:	e16b      	b.n	800859a <AT_ESP8266_ND+0x1b1e>
				}
			else
			{
				//------------------WIFI CONECTADA------------------//
			a->_n_fcomp=strlen("WIFI CONNECTED");
 80082c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	220e      	movs	r2, #14
 80082ce:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//WIFI CONECTADA
 80082d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80082e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80082ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80082fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008300:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800830a:	603b      	str	r3, [r7, #0]
 800830c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008310:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008314:	6812      	ldr	r2, [r2, #0]
 8008316:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800831a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800831e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008322:	6809      	ldr	r1, [r1, #0]
 8008324:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8008328:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800832c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008330:	6800      	ldr	r0, [r0, #0]
 8008332:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8008336:	2300      	movs	r3, #0
 8008338:	9305      	str	r3, [sp, #20]
 800833a:	9004      	str	r0, [sp, #16]
 800833c:	9103      	str	r1, [sp, #12]
 800833e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008342:	9102      	str	r1, [sp, #8]
 8008344:	9201      	str	r2, [sp, #4]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	4633      	mov	r3, r6
 800834c:	4a67      	ldr	r2, [pc, #412]	; (80084ec <AT_ESP8266_ND+0x1a70>)
 800834e:	4629      	mov	r1, r5
 8008350:	4620      	mov	r0, r4
 8008352:	f006 fb69 	bl	800ea28 <FT_String_ND>
 8008356:	4603      	mov	r3, r0
 8008358:	2b01      	cmp	r3, #1
 800835a:	d112      	bne.n	8008382 <AT_ESP8266_ND+0x1906>
				{
					a->_debug_WF_CNNCTD++;
 800835c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008360:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008370:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
						 AT_decode=at_wifi_connected;
 800837a:	230b      	movs	r3, #11
 800837c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8008380:	e10b      	b.n	800859a <AT_ESP8266_ND+0x1b1e>
				}
			else
			{

			//------------------CLIENTE TCP CONECTADO------------------//
			a->_n_fcomp=strlen(",CONNECT\r\n");
 8008382:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008386:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	220a      	movs	r2, #10
 800838e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8008392:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008396:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80083a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80083ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80083bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80083ca:	603b      	str	r3, [r7, #0]
 80083cc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80083d0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80083d4:	6812      	ldr	r2, [r2, #0]
 80083d6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80083da:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80083de:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80083e2:	6809      	ldr	r1, [r1, #0]
 80083e4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80083e8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80083ec:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80083f0:	6800      	ldr	r0, [r0, #0]
 80083f2:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80083f6:	2300      	movs	r3, #0
 80083f8:	9305      	str	r3, [sp, #20]
 80083fa:	9004      	str	r0, [sp, #16]
 80083fc:	9103      	str	r1, [sp, #12]
 80083fe:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008402:	9102      	str	r1, [sp, #8]
 8008404:	9201      	str	r2, [sp, #4]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	4633      	mov	r3, r6
 800840c:	4a38      	ldr	r2, [pc, #224]	; (80084f0 <AT_ESP8266_ND+0x1a74>)
 800840e:	4629      	mov	r1, r5
 8008410:	4620      	mov	r0, r4
 8008412:	f006 fb09 	bl	800ea28 <FT_String_ND>
 8008416:	4603      	mov	r3, r0
 8008418:	2b01      	cmp	r3, #1
 800841a:	d112      	bne.n	8008442 <AT_ESP8266_ND+0x19c6>
				  {
					  AT_decode=at_tcp_client_conectado;
 800841c:	2318      	movs	r3, #24
 800841e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					  a->_debug_CONNECT++;
 8008422:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008426:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8008430:	1c5a      	adds	r2, r3, #1
 8008432:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008436:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
 8008440:	e0ab      	b.n	800859a <AT_ESP8266_ND+0x1b1e>
				  }
			else
			{

			//------------------FALLA------------------//
			a->_n_fcomp=strlen("\r\nFAIL\r\n");
 8008442:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008446:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2208      	movs	r2, #8
 800844e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8008452:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008456:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8008460:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008464:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800846e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008472:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800847c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008480:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800848a:	603b      	str	r3, [r7, #0]
 800848c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008490:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008494:	6812      	ldr	r2, [r2, #0]
 8008496:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800849a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800849e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80084a2:	6809      	ldr	r1, [r1, #0]
 80084a4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80084a8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80084ac:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80084b0:	6800      	ldr	r0, [r0, #0]
 80084b2:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80084b6:	2300      	movs	r3, #0
 80084b8:	9305      	str	r3, [sp, #20]
 80084ba:	9004      	str	r0, [sp, #16]
 80084bc:	9103      	str	r1, [sp, #12]
 80084be:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80084c2:	9102      	str	r1, [sp, #8]
 80084c4:	9201      	str	r2, [sp, #4]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	4633      	mov	r3, r6
 80084cc:	4a09      	ldr	r2, [pc, #36]	; (80084f4 <AT_ESP8266_ND+0x1a78>)
 80084ce:	4629      	mov	r1, r5
 80084d0:	4620      	mov	r0, r4
 80084d2:	f006 faa9 	bl	800ea28 <FT_String_ND>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d10d      	bne.n	80084f8 <AT_ESP8266_ND+0x1a7c>
				{
					AT_decode=at_fail;
 80084dc:	2303      	movs	r3, #3
 80084de:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80084e2:	e05a      	b.n	800859a <AT_ESP8266_ND+0x1b1e>
 80084e4:	08010b38 	.word	0x08010b38
 80084e8:	08010b48 	.word	0x08010b48
 80084ec:	08010b58 	.word	0x08010b58
 80084f0:	08010b68 	.word	0x08010b68
 80084f4:	08010b74 	.word	0x08010b74
				}
			else
			{
			//------------------busy processing------------------//
				a->_n_fcomp=strlen("busy p...");
 80084f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2209      	movs	r2, #9
 8008504:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8008508:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800850c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8008516:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800851a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8008524:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008528:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8008532:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008536:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008540:	603b      	str	r3, [r7, #0]
 8008542:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008546:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800854a:	6812      	ldr	r2, [r2, #0]
 800854c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8008550:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008554:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008558:	6809      	ldr	r1, [r1, #0]
 800855a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800855e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008562:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008566:	6800      	ldr	r0, [r0, #0]
 8008568:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800856c:	2300      	movs	r3, #0
 800856e:	9305      	str	r3, [sp, #20]
 8008570:	9004      	str	r0, [sp, #16]
 8008572:	9103      	str	r1, [sp, #12]
 8008574:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008578:	9102      	str	r1, [sp, #8]
 800857a:	9201      	str	r2, [sp, #4]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	4633      	mov	r3, r6
 8008582:	4a78      	ldr	r2, [pc, #480]	; (8008764 <AT_ESP8266_ND+0x1ce8>)
 8008584:	4629      	mov	r1, r5
 8008586:	4620      	mov	r0, r4
 8008588:	f006 fa4e 	bl	800ea28 <FT_String_ND>
 800858c:	4603      	mov	r3, r0
 800858e:	2b01      	cmp	r3, #1
 8008590:	d103      	bne.n	800859a <AT_ESP8266_ND+0x1b1e>
					{
					AT_decode=at_busy_p;
 8008592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008596:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}}}}}}}}}}
	}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 800859a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800859e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80085a8:	3b01      	subs	r3, #1
 80085aa:	2b08      	cmp	r3, #8
 80085ac:	f201 84c7 	bhi.w	8009f3e <AT_ESP8266_ND+0x34c2>
 80085b0:	a201      	add	r2, pc, #4	; (adr r2, 80085b8 <AT_ESP8266_ND+0x1b3c>)
 80085b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b6:	bf00      	nop
 80085b8:	080085dd 	.word	0x080085dd
 80085bc:	0800876d 	.word	0x0800876d
 80085c0:	080089ef 	.word	0x080089ef
 80085c4:	08008b6d 	.word	0x08008b6d
 80085c8:	08008d45 	.word	0x08008d45
 80085cc:	08009019 	.word	0x08009019
 80085d0:	080092d1 	.word	0x080092d1
 80085d4:	080097e9 	.word	0x080097e9
 80085d8:	080099bf 	.word	0x080099bf
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80085dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 80085ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d14f      	bne.n	800869e <AT_ESP8266_ND+0x1c22>
 80085fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008602:	2b01      	cmp	r3, #1
 8008604:	d04b      	beq.n	800869e <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_error)
 8008606:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800860a:	2b02      	cmp	r3, #2
 800860c:	d047      	beq.n	800869e <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_restart)
 800860e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008612:	2b04      	cmp	r3, #4
 8008614:	d043      	beq.n	800869e <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_tcp_enviado_ok))
 8008616:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800861a:	2b13      	cmp	r3, #19
 800861c:	d03f      	beq.n	800869e <AT_ESP8266_ND+0x1c22>
						{
						a->_pasos=0;
 800861e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008622:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2200      	movs	r2, #0
 800862a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800862e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008632:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2201      	movs	r2, #1
 800863a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 800863e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008642:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800864c:	4620      	mov	r0, r4
 800864e:	f7f7 fdd1 	bl	80001f4 <strlen>
 8008652:	4603      	mov	r3, r0
 8008654:	4423      	add	r3, r4
 8008656:	4a44      	ldr	r2, [pc, #272]	; (8008768 <AT_ESP8266_ND+0x1cec>)
 8008658:	461c      	mov	r4, r3
 800865a:	4613      	mov	r3, r2
 800865c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800865e:	6020      	str	r0, [r4, #0]
 8008660:	6061      	str	r1, [r4, #4]
 8008662:	60a2      	str	r2, [r4, #8]
 8008664:	881b      	ldrh	r3, [r3, #0]
 8008666:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008668:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800866c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008676:	4618      	mov	r0, r3
 8008678:	f7f7 fdbc 	bl	80001f4 <strlen>
 800867c:	4603      	mov	r3, r0
 800867e:	461a      	mov	r2, r3
 8008680:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008684:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=100;
 800868e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008692:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2264      	movs	r2, #100	; 0x64
 800869a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 800869e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80086ac:	1c5a      	adds	r2, r3, #1
 80086ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 80086bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d11b      	bne.n	8008706 <AT_ESP8266_ND+0x1c8a>
 80086ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d023      	beq.n	800871e <AT_ESP8266_ND+0x1ca2>
 80086d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086da:	2b1c      	cmp	r3, #28
 80086dc:	d01f      	beq.n	800871e <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_error)
 80086de:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d01b      	beq.n	800871e <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_restart)
 80086e6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086ea:	2b04      	cmp	r3, #4
 80086ec:	d017      	beq.n	800871e <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_wifi_connected)
 80086ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086f2:	2b0b      	cmp	r3, #11
 80086f4:	d013      	beq.n	800871e <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_wifi_gotip)
 80086f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086fa:	2b0c      	cmp	r3, #12
 80086fc:	d00f      	beq.n	800871e <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_tcp_enviado_ok)))
 80086fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008702:	2b13      	cmp	r3, #19
 8008704:	d00b      	beq.n	800871e <AT_ESP8266_ND+0x1ca2>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 8008706:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800870a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008714:	f241 3288 	movw	r2, #5000	; 0x1388
 8008718:	4293      	cmp	r3, r2
 800871a:	f341 841a 	ble.w	8009f52 <AT_ESP8266_ND+0x34d6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800871e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008722:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800872c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008730:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008734:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2200      	movs	r2, #0
 800873c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008740:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008744:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2200      	movs	r2, #0
 800874c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008750:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008754:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2200      	movs	r2, #0
 800875c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}

			}
			break;
 8008760:	f001 bbf7 	b.w	8009f52 <AT_ESP8266_ND+0x34d6>
 8008764:	08010b80 	.word	0x08010b80
 8008768:	08010b8c 	.word	0x08010b8c
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800876c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008770:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 800877c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008780:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800878a:	2b01      	cmp	r3, #1
 800878c:	f040 80c8 	bne.w	8008920 <AT_ESP8266_ND+0x1ea4>
 8008790:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008794:	2b01      	cmp	r3, #1
 8008796:	f000 80c3 	beq.w	8008920 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_error)
 800879a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800879e:	2b02      	cmp	r3, #2
 80087a0:	f000 80be 	beq.w	8008920 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_fail)
 80087a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087a8:	2b03      	cmp	r3, #3
 80087aa:	f000 80b9 	beq.w	8008920 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_restart)
 80087ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087b2:	2b04      	cmp	r3, #4
 80087b4:	f000 80b4 	beq.w	8008920 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_disconnect)
 80087b8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087bc:	2b0a      	cmp	r3, #10
 80087be:	f000 80af 	beq.w	8008920 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_connected)
 80087c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087c6:	2b0b      	cmp	r3, #11
 80087c8:	f000 80aa 	beq.w	8008920 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_gotip))
 80087cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087d0:	2b0c      	cmp	r3, #12
 80087d2:	f000 80a5 	beq.w	8008920 <AT_ESP8266_ND+0x1ea4>
						{
						a->_pasos=0;
 80087d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80087e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 80087f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008804:	4620      	mov	r0, r4
 8008806:	f7f7 fcf5 	bl	80001f4 <strlen>
 800880a:	4603      	mov	r3, r0
 800880c:	4423      	add	r3, r4
 800880e:	49d5      	ldr	r1, [pc, #852]	; (8008b64 <AT_ESP8266_ND+0x20e8>)
 8008810:	461a      	mov	r2, r3
 8008812:	460b      	mov	r3, r1
 8008814:	cb03      	ldmia	r3!, {r0, r1}
 8008816:	6010      	str	r0, [r2, #0]
 8008818:	6051      	str	r1, [r2, #4]
 800881a:	881b      	ldrh	r3, [r3, #0]
 800881c:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 800881e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008822:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800882c:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008830:	2201      	movs	r2, #1
 8008832:	4618      	mov	r0, r3
 8008834:	f006 fec7 	bl	800f5c6 <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 8008838:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800883c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008846:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800884a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	1d9d      	adds	r5, r3, #6
 8008852:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008856:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3306      	adds	r3, #6
 800885e:	4618      	mov	r0, r3
 8008860:	f7f7 fcc8 	bl	80001f4 <strlen>
 8008864:	4603      	mov	r3, r0
 8008866:	461a      	mov	r2, r3
 8008868:	4629      	mov	r1, r5
 800886a:	4620      	mov	r0, r4
 800886c:	f006 feab 	bl	800f5c6 <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 8008870:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008874:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800887e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008882:	4618      	mov	r0, r3
 8008884:	f7f7 fcb6 	bl	80001f4 <strlen>
 8008888:	4602      	mov	r2, r0
 800888a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800888e:	4619      	mov	r1, r3
 8008890:	4620      	mov	r0, r4
 8008892:	f006 fe98 	bl	800f5c6 <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 8008896:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800889a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80088a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80088b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3326      	adds	r3, #38	; 0x26
 80088be:	4618      	mov	r0, r3
 80088c0:	f7f7 fc98 	bl	80001f4 <strlen>
 80088c4:	4603      	mov	r3, r0
 80088c6:	461a      	mov	r2, r3
 80088c8:	4629      	mov	r1, r5
 80088ca:	4620      	mov	r0, r4
 80088cc:	f006 fe7b 	bl	800f5c6 <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 80088d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80088de:	f507 7109 	add.w	r1, r7, #548	; 0x224
 80088e2:	2203      	movs	r2, #3
 80088e4:	4618      	mov	r0, r3
 80088e6:	f006 fe6e 	bl	800f5c6 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 80088ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7f7 fc7b 	bl	80001f4 <strlen>
 80088fe:	4603      	mov	r3, r0
 8008900:	461a      	mov	r2, r3
 8008902:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008906:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=200;
 8008910:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008914:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	22c8      	movs	r2, #200	; 0xc8
 800891c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 8008920:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008924:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800892e:	1c5a      	adds	r2, r3, #1
 8008930:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008934:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 800893e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008942:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800894c:	2b00      	cmp	r3, #0
 800894e:	d11b      	bne.n	8008988 <AT_ESP8266_ND+0x1f0c>
 8008950:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008954:	2b01      	cmp	r3, #1
 8008956:	d023      	beq.n	80089a0 <AT_ESP8266_ND+0x1f24>
 8008958:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800895c:	2b02      	cmp	r3, #2
 800895e:	d01f      	beq.n	80089a0 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_fail)
 8008960:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008964:	2b03      	cmp	r3, #3
 8008966:	d01b      	beq.n	80089a0 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_restart)
 8008968:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800896c:	2b04      	cmp	r3, #4
 800896e:	d017      	beq.n	80089a0 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_disconnect)
 8008970:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008974:	2b0a      	cmp	r3, #10
 8008976:	d013      	beq.n	80089a0 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_connected)
 8008978:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800897c:	2b0b      	cmp	r3, #11
 800897e:	d00f      	beq.n	80089a0 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_gotip)))
 8008980:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008984:	2b0c      	cmp	r3, #12
 8008986:	d00b      	beq.n	80089a0 <AT_ESP8266_ND+0x1f24>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 8008988:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800898c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8008996:	f644 6220 	movw	r2, #20000	; 0x4e20
 800899a:	4293      	cmp	r3, r2
 800899c:	f341 82db 	ble.w	8009f56 <AT_ESP8266_ND+0x34da>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80089a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80089ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 80089b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089b6:	2b0a      	cmp	r3, #10
 80089b8:	d00f      	beq.n	80089da <AT_ESP8266_ND+0x1f5e>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 80089ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							a->_ejecucion=0;
 80089ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 80089da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 80089ea:	f001 bab4 	b.w	8009f56 <AT_ESP8266_ND+0x34da>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80089ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 80089fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d14d      	bne.n	8008aac <AT_ESP8266_ND+0x2030>
 8008a10:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a14:	2b04      	cmp	r3, #4
 8008a16:	d049      	beq.n	8008aac <AT_ESP8266_ND+0x2030>
 8008a18:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a1c:	2b0a      	cmp	r3, #10
 8008a1e:	d045      	beq.n	8008aac <AT_ESP8266_ND+0x2030>
 8008a20:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a24:	2b0d      	cmp	r3, #13
 8008a26:	d041      	beq.n	8008aac <AT_ESP8266_ND+0x2030>
						{
						a->_pasos=0;
 8008a28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008a38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",strlen("AT+CWQAP\r\n"));
 8008a48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008a56:	4620      	mov	r0, r4
 8008a58:	f7f7 fbcc 	bl	80001f4 <strlen>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	4423      	add	r3, r4
 8008a60:	4941      	ldr	r1, [pc, #260]	; (8008b68 <AT_ESP8266_ND+0x20ec>)
 8008a62:	461a      	mov	r2, r3
 8008a64:	460b      	mov	r3, r1
 8008a66:	cb03      	ldmia	r3!, {r0, r1}
 8008a68:	6010      	str	r0, [r2, #0]
 8008a6a:	6051      	str	r1, [r2, #4]
 8008a6c:	8819      	ldrh	r1, [r3, #0]
 8008a6e:	789b      	ldrb	r3, [r3, #2]
 8008a70:	8111      	strh	r1, [r2, #8]
 8008a72:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008a74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7f7 fbb6 	bl	80001f4 <strlen>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 8008a9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008aa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008aac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ab0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008aba:	1c5a      	adds	r2, r3, #1
 8008abc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ac0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008aca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ace:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d113      	bne.n	8008b04 <AT_ESP8266_ND+0x2088>
 8008adc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ae0:	2b0a      	cmp	r3, #10
 8008ae2:	d01b      	beq.n	8008b1c <AT_ESP8266_ND+0x20a0>
 8008ae4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ae8:	2b0b      	cmp	r3, #11
 8008aea:	d017      	beq.n	8008b1c <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_wifi_gotip)
 8008aec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008af0:	2b0c      	cmp	r3, #12
 8008af2:	d013      	beq.n	8008b1c <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_restart	)
 8008af4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008af8:	2b04      	cmp	r3, #4
 8008afa:	d00f      	beq.n	8008b1c <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_deconectar_ok )))
 8008afc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b00:	2b0d      	cmp	r3, #13
 8008b02:	d00b      	beq.n	8008b1c <AT_ESP8266_ND+0x20a0>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008b04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b16:	4293      	cmp	r3, r2
 8008b18:	f341 821f 	ble.w	8009f5a <AT_ESP8266_ND+0x34de>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008b1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008b2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008b2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008b3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008b4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008b5e:	f001 b9fc 	b.w	8009f5a <AT_ESP8266_ND+0x34de>
 8008b62:	bf00      	nop
 8008b64:	08010b9c 	.word	0x08010b9c
 8008b68:	08010ba8 	.word	0x08010ba8
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008b6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 8008b7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d16b      	bne.n	8008c66 <AT_ESP8266_ND+0x21ea>
 8008b8e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b92:	2b04      	cmp	r3, #4
 8008b94:	d067      	beq.n	8008c66 <AT_ESP8266_ND+0x21ea>
									   &&(AT_decode!=at_ok)
 8008b96:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d063      	beq.n	8008c66 <AT_ESP8266_ND+0x21ea>
									   &&(AT_decode!=at_error))
 8008b9e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d05f      	beq.n	8008c66 <AT_ESP8266_ND+0x21ea>
						{
						a->_pasos=0;
 8008ba6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008baa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008bb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 8008bc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d115      	bne.n	8008c04 <AT_ESP8266_ND+0x2188>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 8008bd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008be6:	4620      	mov	r0, r4
 8008be8:	f7f7 fb04 	bl	80001f4 <strlen>
 8008bec:	4603      	mov	r3, r0
 8008bee:	4423      	add	r3, r4
 8008bf0:	4a52      	ldr	r2, [pc, #328]	; (8008d3c <AT_ESP8266_ND+0x22c0>)
 8008bf2:	461c      	mov	r4, r3
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008bf8:	6020      	str	r0, [r4, #0]
 8008bfa:	6061      	str	r1, [r4, #4]
 8008bfc:	60a2      	str	r2, [r4, #8]
 8008bfe:	881b      	ldrh	r3, [r3, #0]
 8008c00:	81a3      	strh	r3, [r4, #12]
 8008c02:	e014      	b.n	8008c2e <AT_ESP8266_ND+0x21b2>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 8008c04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008c12:	4620      	mov	r0, r4
 8008c14:	f7f7 faee 	bl	80001f4 <strlen>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	4423      	add	r3, r4
 8008c1c:	4a48      	ldr	r2, [pc, #288]	; (8008d40 <AT_ESP8266_ND+0x22c4>)
 8008c1e:	461c      	mov	r4, r3
 8008c20:	4613      	mov	r3, r2
 8008c22:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008c24:	6020      	str	r0, [r4, #0]
 8008c26:	6061      	str	r1, [r4, #4]
 8008c28:	60a2      	str	r2, [r4, #8]
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008c2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7f7 fad9 	bl	80001f4 <strlen>
 8008c42:	4603      	mov	r3, r0
 8008c44:	461a      	mov	r2, r3
 8008c46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 8008c54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008c62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008c66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008c74:	1c5a      	adds	r2, r3, #1
 8008c76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008c84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d123      	bne.n	8008cde <AT_ESP8266_ND+0x2262>
 8008c96:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d02b      	beq.n	8008cf6 <AT_ESP8266_ND+0x227a>
 8008c9e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ca2:	2b0b      	cmp	r3, #11
 8008ca4:	d027      	beq.n	8008cf6 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_wifi_gotip)
 8008ca6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008caa:	2b0c      	cmp	r3, #12
 8008cac:	d023      	beq.n	8008cf6 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_restart)
 8008cae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cb2:	2b04      	cmp	r3, #4
 8008cb4:	d01f      	beq.n	8008cf6 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_error)
 8008cb6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d01b      	beq.n	8008cf6 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_multiple_conn_ok)
 8008cbe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cc2:	2b07      	cmp	r3, #7
 8008cc4:	d017      	beq.n	8008cf6 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_no_multiple_conn_ok)
 8008cc6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cca:	2b08      	cmp	r3, #8
 8008ccc:	d013      	beq.n	8008cf6 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_multiple_conn_err)
 8008cce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cd2:	2b1e      	cmp	r3, #30
 8008cd4:	d00f      	beq.n	8008cf6 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_no_multiple_conn_err)))
 8008cd6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cda:	2b1f      	cmp	r3, #31
 8008cdc:	d00b      	beq.n	8008cf6 <AT_ESP8266_ND+0x227a>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008cde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ce2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	f341 8134 	ble.w	8009f5e <AT_ESP8266_ND+0x34e2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008cf6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008d04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008d08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008d18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008d28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008d38:	f001 b911 	b.w	8009f5e <AT_ESP8266_ND+0x34e2>
 8008d3c:	08010bb4 	.word	0x08010bb4
 8008d40:	08010bc4 	.word	0x08010bc4
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008d44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 8008d54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	f040 80f3 	bne.w	8008f4e <AT_ESP8266_ND+0x24d2>
 8008d68:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d6c:	2b04      	cmp	r3, #4
 8008d6e:	f000 80ee 	beq.w	8008f4e <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_ok)
 8008d72:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	f000 80e9 	beq.w	8008f4e <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_error)
 8008d7c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	f000 80e4 	beq.w	8008f4e <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_def_ip_err)
 8008d86:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d8a:	2b21      	cmp	r3, #33	; 0x21
 8008d8c:	f000 80df 	beq.w	8008f4e <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_def_ip_ok))
 8008d90:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d94:	2b1b      	cmp	r3, #27
 8008d96:	f000 80da 	beq.w	8008f4e <AT_ESP8266_ND+0x24d2>
						{
						a->_pasos=0;
 8008d9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008daa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2201      	movs	r2, #1
 8008db6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 8008dba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008dc8:	4620      	mov	r0, r4
 8008dca:	f7f7 fa13 	bl	80001f4 <strlen>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	4423      	add	r3, r4
 8008dd2:	4990      	ldr	r1, [pc, #576]	; (8009014 <AT_ESP8266_ND+0x2598>)
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	cb03      	ldmia	r3!, {r0, r1}
 8008dda:	6010      	str	r0, [r2, #0]
 8008ddc:	6051      	str	r1, [r2, #4]
 8008dde:	8819      	ldrh	r1, [r3, #0]
 8008de0:	789b      	ldrb	r3, [r3, #2]
 8008de2:	8111      	strh	r1, [r2, #8]
 8008de4:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 8008de6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008df4:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008df8:	2201      	movs	r2, #1
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f006 fbe3 	bl	800f5c6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8008e00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008e0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8008e1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	334c      	adds	r3, #76	; 0x4c
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7f7 f9e3 	bl	80001f4 <strlen>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	461a      	mov	r2, r3
 8008e32:	4629      	mov	r1, r5
 8008e34:	4620      	mov	r0, r4
 8008e36:	f006 fbc6 	bl	800f5c6 <strncat>
						strncat(a->_uart2snd,separador,3);
 8008e3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008e48:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008e4c:	2203      	movs	r2, #3
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f006 fbb9 	bl	800f5c6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 8008e54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008e62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f103 0562 	add.w	r5, r3, #98	; 0x62
 8008e70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	3362      	adds	r3, #98	; 0x62
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7f7 f9b9 	bl	80001f4 <strlen>
 8008e82:	4603      	mov	r3, r0
 8008e84:	461a      	mov	r2, r3
 8008e86:	4629      	mov	r1, r5
 8008e88:	4620      	mov	r0, r4
 8008e8a:	f006 fb9c 	bl	800f5c6 <strncat>
						strncat(a->_uart2snd,separador,3);
 8008e8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008e9c:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008ea0:	2203      	movs	r2, #3
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f006 fb8f 	bl	800f5c6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8008ea8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008eb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f103 0572 	add.w	r5, r3, #114	; 0x72
 8008ec4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ec8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3372      	adds	r3, #114	; 0x72
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7f7 f98f 	bl	80001f4 <strlen>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	461a      	mov	r2, r3
 8008eda:	4629      	mov	r1, r5
 8008edc:	4620      	mov	r0, r4
 8008ede:	f006 fb72 	bl	800f5c6 <strncat>
						strncat(a->_uart2snd,&comillas,1);
 8008ee2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ee6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ef0:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f006 fb65 	bl	800f5c6 <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008efc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008f0a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008f0e:	2202      	movs	r2, #2
 8008f10:	4618      	mov	r0, r3
 8008f12:	f006 fb58 	bl	800f5c6 <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8008f16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7f7 f965 	bl	80001f4 <strlen>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008f3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008f4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008f4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008f5c:	1c5a      	adds	r2, r3, #1
 8008f5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008f6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d11b      	bne.n	8008fb6 <AT_ESP8266_ND+0x253a>
 8008f7e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d023      	beq.n	8008fce <AT_ESP8266_ND+0x2552>
 8008f86:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f8a:	2b0b      	cmp	r3, #11
 8008f8c:	d01f      	beq.n	8008fce <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_wifi_gotip)
 8008f8e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f92:	2b0c      	cmp	r3, #12
 8008f94:	d01b      	beq.n	8008fce <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_restart)
 8008f96:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f9a:	2b04      	cmp	r3, #4
 8008f9c:	d017      	beq.n	8008fce <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_error)
 8008f9e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d013      	beq.n	8008fce <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_def_ip_err)
 8008fa6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008faa:	2b21      	cmp	r3, #33	; 0x21
 8008fac:	d00f      	beq.n	8008fce <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_def_ip_ok)))
 8008fae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008fb2:	2b1b      	cmp	r3, #27
 8008fb4:	d00b      	beq.n	8008fce <AT_ESP8266_ND+0x2552>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008fb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	f340 87ca 	ble.w	8009f62 <AT_ESP8266_ND+0x34e6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008fce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008fdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008fe0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fe4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008ff0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ff4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8009000:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009004:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2200      	movs	r2, #0
 800900c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8009010:	f000 bfa7 	b.w	8009f62 <AT_ESP8266_ND+0x34e6>
 8009014:	08010ab4 	.word	0x08010ab4
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009018:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800901c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2200      	movs	r2, #0
 8009024:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8009028:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800902c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009036:	2b01      	cmp	r3, #1
 8009038:	f040 80e2 	bne.w	8009200 <AT_ESP8266_ND+0x2784>
 800903c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009040:	2b0b      	cmp	r3, #11
 8009042:	f000 80dd 	beq.w	8009200 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_wifi_gotip)
 8009046:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800904a:	2b0c      	cmp	r3, #12
 800904c:	f000 80d8 	beq.w	8009200 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8009050:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009054:	2b0e      	cmp	r3, #14
 8009056:	f000 80d3 	beq.w	8009200 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_conectado)
 800905a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800905e:	2b0f      	cmp	r3, #15
 8009060:	f000 80ce 	beq.w	8009200 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_desconectado)
 8009064:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009068:	2b10      	cmp	r3, #16
 800906a:	f000 80c9 	beq.w	8009200 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_error))
 800906e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009072:	2b02      	cmp	r3, #2
 8009074:	f000 80c4 	beq.w	8009200 <AT_ESP8266_ND+0x2784>
						{
						a->_pasos=0;
 8009078:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800907c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2200      	movs	r2, #0
 8009084:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8009088:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800908c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2201      	movs	r2, #1
 8009094:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8009098:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800909c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80090a6:	4620      	mov	r0, r4
 80090a8:	f7f7 f8a4 	bl	80001f4 <strlen>
 80090ac:	4603      	mov	r3, r0
 80090ae:	4423      	add	r3, r4
 80090b0:	4aa1      	ldr	r2, [pc, #644]	; (8009338 <AT_ESP8266_ND+0x28bc>)
 80090b2:	461c      	mov	r4, r3
 80090b4:	4613      	mov	r3, r2
 80090b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80090b8:	6020      	str	r0, [r4, #0]
 80090ba:	6061      	str	r1, [r4, #4]
 80090bc:	60a2      	str	r2, [r4, #8]
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 80090c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80090d0:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80090d4:	2201      	movs	r2, #1
 80090d6:	4618      	mov	r0, r3
 80090d8:	f006 fa75 	bl	800f5c6 <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 80090dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80090ea:	4620      	mov	r0, r4
 80090ec:	f7f7 f882 	bl	80001f4 <strlen>
 80090f0:	4603      	mov	r3, r0
 80090f2:	4423      	add	r3, r4
 80090f4:	4a91      	ldr	r2, [pc, #580]	; (800933c <AT_ESP8266_ND+0x28c0>)
 80090f6:	6810      	ldr	r0, [r2, #0]
 80090f8:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 80090fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009108:	f507 710a 	add.w	r1, r7, #552	; 0x228
 800910c:	2203      	movs	r2, #3
 800910e:	4618      	mov	r0, r3
 8009110:	f006 fa59 	bl	800f5c6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8009114:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009118:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009122:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009126:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8009130:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009134:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	3336      	adds	r3, #54	; 0x36
 800913c:	4618      	mov	r0, r3
 800913e:	f7f7 f859 	bl	80001f4 <strlen>
 8009142:	4603      	mov	r3, r0
 8009144:	461a      	mov	r2, r3
 8009146:	4629      	mov	r1, r5
 8009148:	4620      	mov	r0, r4
 800914a:	f006 fa3c 	bl	800f5c6 <strncat>
						strncat(a->_uart2snd,separador2,2);
 800914e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009152:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800915c:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8009160:	2202      	movs	r2, #2
 8009162:	4618      	mov	r0, r3
 8009164:	f006 fa2f 	bl	800f5c6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8009168:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800916c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009176:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800917a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8009184:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009188:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	3346      	adds	r3, #70	; 0x46
 8009190:	4618      	mov	r0, r3
 8009192:	f7f7 f82f 	bl	80001f4 <strlen>
 8009196:	4603      	mov	r3, r0
 8009198:	461a      	mov	r2, r3
 800919a:	4629      	mov	r1, r5
 800919c:	4620      	mov	r0, r4
 800919e:	f006 fa12 	bl	800f5c6 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80091a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80091b0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7f7 f81d 	bl	80001f4 <strlen>
 80091ba:	4602      	mov	r2, r0
 80091bc:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80091c0:	4619      	mov	r1, r3
 80091c2:	4620      	mov	r0, r4
 80091c4:	f006 f9ff 	bl	800f5c6 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 80091c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7f7 f80c 	bl	80001f4 <strlen>
 80091dc:	4603      	mov	r3, r0
 80091de:	461a      	mov	r2, r3
 80091e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=600;
 80091ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80091fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8009200:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009204:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800920e:	1c5a      	adds	r2, r3, #1
 8009210:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009214:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 800921e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009222:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800922c:	2b00      	cmp	r3, #0
 800922e:	d120      	bne.n	8009272 <AT_ESP8266_ND+0x27f6>
 8009230:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009234:	2b0a      	cmp	r3, #10
 8009236:	d028      	beq.n	800928a <AT_ESP8266_ND+0x280e>
 8009238:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800923c:	2b0b      	cmp	r3, #11
 800923e:	d024      	beq.n	800928a <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_wifi_gotip)
 8009240:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009244:	2b0c      	cmp	r3, #12
 8009246:	d020      	beq.n	800928a <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 8009248:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800924c:	2b0e      	cmp	r3, #14
 800924e:	d01c      	beq.n	800928a <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_tcp_conectado)
 8009250:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009254:	2b0f      	cmp	r3, #15
 8009256:	d018      	beq.n	800928a <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_tcp_desconectado)
 8009258:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800925c:	2b10      	cmp	r3, #16
 800925e:	d014      	beq.n	800928a <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_error)
 8009260:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009264:	2b02      	cmp	r3, #2
 8009266:	d010      	beq.n	800928a <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_busy_p)))
 8009268:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800926c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009270:	d00b      	beq.n	800928a <AT_ESP8266_ND+0x280e>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8009272:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009276:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009280:	f241 3288 	movw	r2, #5000	; 0x1388
 8009284:	4293      	cmp	r3, r2
 8009286:	f340 866e 	ble.w	8009f66 <AT_ESP8266_ND+0x34ea>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800928a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800928e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009298:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 800929c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80092ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80092bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80092cc:	f000 be4b 	b.w	8009f66 <AT_ESP8266_ND+0x34ea>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 80092d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092d4:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80092d8:	2200      	movs	r2, #0
 80092da:	601a      	str	r2, [r3, #0]
 80092dc:	2200      	movs	r2, #0
 80092de:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 80092e0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092e4:	2b10      	cmp	r3, #16
 80092e6:	d003      	beq.n	80092f0 <AT_ESP8266_ND+0x2874>
 80092e8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092ec:	2b0a      	cmp	r3, #10
 80092ee:	d127      	bne.n	8009340 <AT_ESP8266_ND+0x28c4>
				{
					a->_estado=AT_decode;
 80092f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80092fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8009302:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009306:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2200      	movs	r2, #0
 800930e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8009312:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009316:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2200      	movs	r2, #0
 800931e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8009322:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009326:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2200      	movs	r2, #0
 800932e:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8009332:	f000 be1a 	b.w	8009f6a <AT_ESP8266_ND+0x34ee>
 8009336:	bf00      	nop
 8009338:	08010bd4 	.word	0x08010bd4
 800933c:	08010be4 	.word	0x08010be4
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8009340:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009344:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800934e:	2b01      	cmp	r3, #1
 8009350:	f040 80d1 	bne.w	80094f6 <AT_ESP8266_ND+0x2a7a>
 8009354:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009358:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009362:	2b00      	cmp	r3, #0
 8009364:	f040 80c7 	bne.w	80094f6 <AT_ESP8266_ND+0x2a7a>
										a->_ejecucion=1;
 8009368:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800936c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2201      	movs	r2, #1
 8009374:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8009378:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800937c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2218      	movs	r2, #24
 8009384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009388:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800938c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8009398:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800939c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80093a6:	1c5a      	adds	r2, r3, #1
 80093a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 80093b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 80093c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 80093d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80093e4:	4620      	mov	r0, r4
 80093e6:	f7f6 ff05 	bl	80001f4 <strlen>
 80093ea:	4603      	mov	r3, r0
 80093ec:	4423      	add	r3, r4
 80093ee:	4abe      	ldr	r2, [pc, #760]	; (80096e8 <AT_ESP8266_ND+0x2c6c>)
 80093f0:	461c      	mov	r4, r3
 80093f2:	4613      	mov	r3, r2
 80093f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80093f6:	6020      	str	r0, [r4, #0]
 80093f8:	6061      	str	r1, [r4, #4]
 80093fa:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 80093fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009400:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800940a:	f107 0214 	add.w	r2, r7, #20
 800940e:	4611      	mov	r1, r2
 8009410:	4618      	mov	r0, r3
 8009412:	f005 fe51 	bl	800f0b8 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8009416:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800941a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009424:	f107 0314 	add.w	r3, r7, #20
 8009428:	4618      	mov	r0, r3
 800942a:	f7f6 fee3 	bl	80001f4 <strlen>
 800942e:	4602      	mov	r2, r0
 8009430:	f107 0314 	add.w	r3, r7, #20
 8009434:	4619      	mov	r1, r3
 8009436:	4620      	mov	r0, r4
 8009438:	f006 f8c5 	bl	800f5c6 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 800943c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009440:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 800944a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800944e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009458:	4619      	mov	r1, r3
 800945a:	4610      	mov	r0, r2
 800945c:	f006 f994 	bl	800f788 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009460:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009464:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800946e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009472:	2202      	movs	r2, #2
 8009474:	4618      	mov	r0, r3
 8009476:	f006 f8a6 	bl	800f5c6 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 800947a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800947e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009488:	4618      	mov	r0, r3
 800948a:	f7f6 feb3 	bl	80001f4 <strlen>
 800948e:	4603      	mov	r3, r0
 8009490:	461a      	mov	r2, r3
 8009492:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009496:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 80094a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 80094ae:	4620      	mov	r0, r4
 80094b0:	f7f6 fea0 	bl	80001f4 <strlen>
 80094b4:	4603      	mov	r3, r0
 80094b6:	4423      	add	r3, r4
 80094b8:	4a8c      	ldr	r2, [pc, #560]	; (80096ec <AT_ESP8266_ND+0x2c70>)
 80094ba:	461c      	mov	r4, r3
 80094bc:	4613      	mov	r3, r2
 80094be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80094c0:	6020      	str	r0, [r4, #0]
 80094c2:	6061      	str	r1, [r4, #4]
 80094c4:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 80094c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80094d4:	1c5a      	adds	r2, r3, #1
 80094d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=700;
 80094e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80094f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 80094f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009504:	1c5a      	adds	r2, r3, #1
 8009506:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800950a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 8009514:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009518:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009522:	2b00      	cmp	r3, #0
 8009524:	f040 80a6 	bne.w	8009674 <AT_ESP8266_ND+0x2bf8>
 8009528:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800952c:	2b13      	cmp	r3, #19
 800952e:	f000 80a1 	beq.w	8009674 <AT_ESP8266_ND+0x2bf8>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 8009532:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009536:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8009540:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009544:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 800954e:	4619      	mov	r1, r3
 8009550:	4610      	mov	r0, r2
 8009552:	f7f6 fe45 	bl	80001e0 <strcmp>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d01b      	beq.n	8009594 <AT_ESP8266_ND+0x2b18>
 800955c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009560:	2b01      	cmp	r3, #1
 8009562:	d017      	beq.n	8009594 <AT_ESP8266_ND+0x2b18>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 8009564:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009568:	2b14      	cmp	r3, #20
 800956a:	d013      	beq.n	8009594 <AT_ESP8266_ND+0x2b18>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 800956c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009570:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800957a:	f241 3288 	movw	r2, #5000	; 0x1388
 800957e:	4293      	cmp	r3, r2
 8009580:	dd78      	ble.n	8009674 <AT_ESP8266_ND+0x2bf8>
 8009582:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009586:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009590:	2b01      	cmp	r3, #1
 8009592:	d16f      	bne.n	8009674 <AT_ESP8266_ND+0x2bf8>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 8009594:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009598:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80095a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80095a6:	4293      	cmp	r3, r2
 80095a8:	dd0e      	ble.n	80095c8 <AT_ESP8266_ND+0x2b4c>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 80095aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 80095b8:	1c5a      	adds	r2, r3, #1
 80095ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 80095c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 80095d6:	1c5a      	adds	r2, r3, #1
 80095d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 80095e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80095f4:	1c5a      	adds	r2, r3, #1
 80095f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8009604:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009608:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2201      	movs	r2, #1
 8009610:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009614:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009618:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8009622:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009626:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8009630:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009634:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 800963e:	2361      	movs	r3, #97	; 0x61
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	2301      	movs	r3, #1
 8009644:	f005 fd6c 	bl	800f120 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009648:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800964c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009656:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800965a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009664:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009668:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2200      	movs	r2, #0
 8009670:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 8009674:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009678:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009682:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009686:	f040 8470 	bne.w	8009f6a <AT_ESP8266_ND+0x34ee>
 800968a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800968e:	2b13      	cmp	r3, #19
 8009690:	d02e      	beq.n	80096f0 <AT_ESP8266_ND+0x2c74>
 8009692:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009696:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80096a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80096a4:	4293      	cmp	r3, r2
 80096a6:	dc23      	bgt.n	80096f0 <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_wifi_disconnect)
 80096a8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096ac:	2b0a      	cmp	r3, #10
 80096ae:	d01f      	beq.n	80096f0 <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_wifi_connected)
 80096b0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096b4:	2b0b      	cmp	r3, #11
 80096b6:	d01b      	beq.n	80096f0 <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_wifi_gotip)
 80096b8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096bc:	2b0c      	cmp	r3, #12
 80096be:	d017      	beq.n	80096f0 <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_tcp_desconectado)
 80096c0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096c4:	2b10      	cmp	r3, #16
 80096c6:	d013      	beq.n	80096f0 <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_tcp_snd_err)
 80096c8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096cc:	2b11      	cmp	r3, #17
 80096ce:	d00f      	beq.n	80096f0 <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_tcp_enviado_error)
 80096d0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096d4:	2b12      	cmp	r3, #18
 80096d6:	d00b      	beq.n	80096f0 <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_busy_p)))
 80096d8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096e0:	f040 8443 	bne.w	8009f6a <AT_ESP8266_ND+0x34ee>
 80096e4:	e004      	b.n	80096f0 <AT_ESP8266_ND+0x2c74>
 80096e6:	bf00      	nop
 80096e8:	08010be8 	.word	0x08010be8
 80096ec:	08010bf4 	.word	0x08010bf4
									a->_debug_count5++;
 80096f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80096fe:	1c5a      	adds	r2, r3, #1
 8009700:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009704:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 800970e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009712:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800971c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009720:	4293      	cmp	r3, r2
 8009722:	dd25      	ble.n	8009770 <AT_ESP8266_ND+0x2cf4>
										a->_debug_count8++;
 8009724:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009728:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009732:	1c5a      	adds	r2, r3, #1
 8009734:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009738:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8009742:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009746:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009750:	1c5a      	adds	r2, r3, #1
 8009752:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009756:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009760:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009764:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2200      	movs	r2, #0
 800976c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009770:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009774:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800977e:	2b02      	cmp	r3, #2
 8009780:	dd10      	ble.n	80097a4 <AT_ESP8266_ND+0x2d28>
 8009782:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009786:	2b10      	cmp	r3, #16
 8009788:	d00c      	beq.n	80097a4 <AT_ESP8266_ND+0x2d28>
 800978a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800978e:	2b0a      	cmp	r3, #10
 8009790:	d008      	beq.n	80097a4 <AT_ESP8266_ND+0x2d28>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 8009792:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009796:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	220f      	movs	r2, #15
 800979e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80097a2:	e008      	b.n	80097b6 <AT_ESP8266_ND+0x2d3a>
										a->_estado=AT_decode;	//Devuelvo el estado
 80097a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80097b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 80097b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 80097c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 80097d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 80097e6:	e3c0      	b.n	8009f6a <AT_ESP8266_ND+0x34ee>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80097e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if( a->_enviaruart==1)
 80097f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009806:	2b01      	cmp	r3, #1
 8009808:	d16f      	bne.n	80098ea <AT_ESP8266_ND+0x2e6e>
						{
						a->_pasos=0;
 800980a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800980e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2200      	movs	r2, #0
 8009816:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800981a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800981e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2201      	movs	r2, #1
 8009826:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 800982a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800982e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009838:	4620      	mov	r0, r4
 800983a:	f7f6 fcdb 	bl	80001f4 <strlen>
 800983e:	4603      	mov	r3, r0
 8009840:	4423      	add	r3, r4
 8009842:	4a78      	ldr	r2, [pc, #480]	; (8009a24 <AT_ESP8266_ND+0x2fa8>)
 8009844:	461c      	mov	r4, r3
 8009846:	4615      	mov	r5, r2
 8009848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800984a:	6020      	str	r0, [r4, #0]
 800984c:	6061      	str	r1, [r4, #4]
 800984e:	60a2      	str	r2, [r4, #8]
 8009850:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 8009852:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009856:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009860:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009864:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 800986e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009872:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	335c      	adds	r3, #92	; 0x5c
 800987a:	4618      	mov	r0, r3
 800987c:	f7f6 fcba 	bl	80001f4 <strlen>
 8009880:	4603      	mov	r3, r0
 8009882:	461a      	mov	r2, r3
 8009884:	4629      	mov	r1, r5
 8009886:	4620      	mov	r0, r4
 8009888:	f005 fe9d 	bl	800f5c6 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 800988c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009890:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800989a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800989e:	4618      	mov	r0, r3
 80098a0:	f7f6 fca8 	bl	80001f4 <strlen>
 80098a4:	4602      	mov	r2, r0
 80098a6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80098aa:	4619      	mov	r1, r3
 80098ac:	4620      	mov	r0, r4
 80098ae:	f005 fe8a 	bl	800f5c6 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 80098b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7f6 fc97 	bl	80001f4 <strlen>
 80098c6:	4603      	mov	r3, r0
 80098c8:	461a      	mov	r2, r3
 80098ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=800;
 80098d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80098e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 80098ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80098f8:	1c5a      	adds	r2, r3, #1
 80098fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8009908:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800990c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009916:	2b00      	cmp	r3, #0
 8009918:	d123      	bne.n	8009962 <AT_ESP8266_ND+0x2ee6>
 800991a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800991e:	2b0a      	cmp	r3, #10
 8009920:	d02b      	beq.n	800997a <AT_ESP8266_ND+0x2efe>
 8009922:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009926:	2b0b      	cmp	r3, #11
 8009928:	d027      	beq.n	800997a <AT_ESP8266_ND+0x2efe>
 800992a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800992e:	2b0c      	cmp	r3, #12
 8009930:	d023      	beq.n	800997a <AT_ESP8266_ND+0x2efe>
 8009932:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009936:	2b0e      	cmp	r3, #14
 8009938:	d01f      	beq.n	800997a <AT_ESP8266_ND+0x2efe>
 800993a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800993e:	2b0f      	cmp	r3, #15
 8009940:	d01b      	beq.n	800997a <AT_ESP8266_ND+0x2efe>
 8009942:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009946:	2b10      	cmp	r3, #16
 8009948:	d017      	beq.n	800997a <AT_ESP8266_ND+0x2efe>
 800994a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800994e:	2b15      	cmp	r3, #21
 8009950:	d013      	beq.n	800997a <AT_ESP8266_ND+0x2efe>
 8009952:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009956:	2b16      	cmp	r3, #22
 8009958:	d00f      	beq.n	800997a <AT_ESP8266_ND+0x2efe>
 800995a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800995e:	2b17      	cmp	r3, #23
 8009960:	d00b      	beq.n	800997a <AT_ESP8266_ND+0x2efe>
 8009962:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009966:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009970:	f241 3288 	movw	r2, #5000	; 0x1388
 8009974:	4293      	cmp	r3, r2
 8009976:	f340 82fa 	ble.w	8009f6e <AT_ESP8266_ND+0x34f2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800997a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800997e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 800998c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009990:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2200      	movs	r2, #0
 8009998:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 800999c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80099ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
			}
			break;
 80099bc:	e2d7      	b.n	8009f6e <AT_ESP8266_ND+0x34f2>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 80099be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099c2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80099c6:	2200      	movs	r2, #0
 80099c8:	601a      	str	r2, [r3, #0]
 80099ca:	2200      	movs	r2, #0
 80099cc:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 80099ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099d2:	2b10      	cmp	r3, #16
 80099d4:	d003      	beq.n	80099de <AT_ESP8266_ND+0x2f62>
 80099d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099da:	2b0a      	cmp	r3, #10
 80099dc:	d124      	bne.n	8009a28 <AT_ESP8266_ND+0x2fac>
				{
					a->_estado=AT_decode;
 80099de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80099ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 80099f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8009a00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8009a10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8009a20:	e2a7      	b.n	8009f72 <AT_ESP8266_ND+0x34f6>
 8009a22:	bf00      	nop
 8009a24:	08010c00 	.word	0x08010c00
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8009a28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	f040 8102 	bne.w	8009c40 <AT_ESP8266_ND+0x31c4>
 8009a3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f040 80f8 	bne.w	8009c40 <AT_ESP8266_ND+0x31c4>
										a->_ejecucion=1;
 8009a50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8009a60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2218      	movs	r2, #24
 8009a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009a70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8009a80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009a8e:	1c5a      	adds	r2, r3, #1
 8009a90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 8009a9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009aa2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8009aae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ab2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 8009abe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ac2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009acc:	4620      	mov	r0, r4
 8009ace:	f7f6 fb91 	bl	80001f4 <strlen>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	4423      	add	r3, r4
 8009ad6:	4a83      	ldr	r2, [pc, #524]	; (8009ce4 <AT_ESP8266_ND+0x3268>)
 8009ad8:	461c      	mov	r4, r3
 8009ada:	4613      	mov	r3, r2
 8009adc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009ade:	6020      	str	r0, [r4, #0]
 8009ae0:	6061      	str	r1, [r4, #4]
 8009ae2:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 8009ae4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ae8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f8d3 3a94 	ldr.w	r3, [r3, #2708]	; 0xa94
 8009af2:	f107 020c 	add.w	r2, r7, #12
 8009af6:	4611      	mov	r1, r2
 8009af8:	4618      	mov	r0, r3
 8009afa:	f005 fadd 	bl	800f0b8 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 8009afe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009b0c:	f107 030c 	add.w	r3, r7, #12
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7f6 fb6f 	bl	80001f4 <strlen>
 8009b16:	4602      	mov	r2, r0
 8009b18:	f107 030c 	add.w	r3, r7, #12
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f005 fd51 	bl	800f5c6 <strncat>
										strncat(a->_uart2snd,",",1);
 8009b24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009b32:	4620      	mov	r0, r4
 8009b34:	f7f6 fb5e 	bl	80001f4 <strlen>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	4423      	add	r3, r4
 8009b3c:	496a      	ldr	r1, [pc, #424]	; (8009ce8 <AT_ESP8266_ND+0x326c>)
 8009b3e:	461a      	mov	r2, r3
 8009b40:	460b      	mov	r3, r1
 8009b42:	881b      	ldrh	r3, [r3, #0]
 8009b44:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8009b46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8009b54:	f107 020c 	add.w	r2, r7, #12
 8009b58:	4611      	mov	r1, r2
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f005 faac 	bl	800f0b8 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8009b60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009b6e:	f107 030c 	add.w	r3, r7, #12
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7f6 fb3e 	bl	80001f4 <strlen>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	f107 030c 	add.w	r3, r7, #12
 8009b7e:	4619      	mov	r1, r3
 8009b80:	4620      	mov	r0, r4
 8009b82:	f005 fd20 	bl	800f5c6 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8009b86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8009b94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	4610      	mov	r0, r2
 8009ba6:	f005 fdef 	bl	800f788 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009baa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009bb8:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009bbc:	2202      	movs	r2, #2
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f005 fd01 	bl	800f5c6 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8009bc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7f6 fb0e 	bl	80001f4 <strlen>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	461a      	mov	r2, r3
 8009bdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009be0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009bea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f7f6 fafb 	bl	80001f4 <strlen>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	4423      	add	r3, r4
 8009c02:	4a3a      	ldr	r2, [pc, #232]	; (8009cec <AT_ESP8266_ND+0x3270>)
 8009c04:	461c      	mov	r4, r3
 8009c06:	4613      	mov	r3, r2
 8009c08:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009c0a:	6020      	str	r0, [r4, #0]
 8009c0c:	6061      	str	r1, [r4, #4]
 8009c0e:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8009c10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009c1e:	1c5a      	adds	r2, r3, #1
 8009c20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=900;
 8009c2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009c3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8009c40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009c4e:	1c5a      	adds	r2, r3, #1
 8009c50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009c5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f040 80b8 	bne.w	8009de2 <AT_ESP8266_ND+0x3366>
 8009c72:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009c76:	2b13      	cmp	r3, #19
 8009c78:	f000 80b3 	beq.w	8009de2 <AT_ESP8266_ND+0x3366>
 8009c7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8009c8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8009c98:	4619      	mov	r1, r3
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	f7f6 faa0 	bl	80001e0 <strcmp>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d024      	beq.n	8009cf0 <AT_ESP8266_ND+0x3274>
 8009ca6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d020      	beq.n	8009cf0 <AT_ESP8266_ND+0x3274>
 8009cae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009cb2:	2b14      	cmp	r3, #20
 8009cb4:	d01c      	beq.n	8009cf0 <AT_ESP8266_ND+0x3274>
 8009cb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	f340 808a 	ble.w	8009de2 <AT_ESP8266_ND+0x3366>
 8009cce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	f040 8080 	bne.w	8009de2 <AT_ESP8266_ND+0x3366>
 8009ce2:	e005      	b.n	8009cf0 <AT_ESP8266_ND+0x3274>
 8009ce4:	08010be8 	.word	0x08010be8
 8009ce8:	08010c10 	.word	0x08010c10
 8009cec:	08010bf4 	.word	0x08010bf4
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 8009cf0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cf4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d02:	4293      	cmp	r3, r2
 8009d04:	dd17      	ble.n	8009d36 <AT_ESP8266_ND+0x32ba>
 8009d06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d10e      	bne.n	8009d36 <AT_ESP8266_ND+0x32ba>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8009d18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8009d26:	1c5a      	adds	r2, r3, #1
 8009d28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 8009d36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8009d44:	1c5a      	adds	r2, r3, #1
 8009d46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 8009d54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009d62:	1c5a      	adds	r2, r3, #1
 8009d64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8009d72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009d82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8009d90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8009d9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009da2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009dac:	2361      	movs	r3, #97	; 0x61
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	2301      	movs	r3, #1
 8009db2:	f005 f9b5 	bl	800f120 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009db6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009dba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009dc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009dc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009dd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009dd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 8009de2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009de6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009df0:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009df4:	f040 80bd 	bne.w	8009f72 <AT_ESP8266_ND+0x34f6>
 8009df8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009dfc:	2b13      	cmp	r3, #19
 8009dfe:	d02b      	beq.n	8009e58 <AT_ESP8266_ND+0x33dc>
 8009e00:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009e04:	2b0b      	cmp	r3, #11
 8009e06:	d027      	beq.n	8009e58 <AT_ESP8266_ND+0x33dc>
 8009e08:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009e0c:	2b0c      	cmp	r3, #12
 8009e0e:	d023      	beq.n	8009e58 <AT_ESP8266_ND+0x33dc>
 8009e10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e22:	4293      	cmp	r3, r2
 8009e24:	dc18      	bgt.n	8009e58 <AT_ESP8266_ND+0x33dc>
 8009e26:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009e2a:	2b0a      	cmp	r3, #10
 8009e2c:	d014      	beq.n	8009e58 <AT_ESP8266_ND+0x33dc>
 8009e2e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009e32:	2b10      	cmp	r3, #16
 8009e34:	d010      	beq.n	8009e58 <AT_ESP8266_ND+0x33dc>
 8009e36:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009e3a:	2b11      	cmp	r3, #17
 8009e3c:	d00c      	beq.n	8009e58 <AT_ESP8266_ND+0x33dc>
 8009e3e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009e42:	2b12      	cmp	r3, #18
 8009e44:	d008      	beq.n	8009e58 <AT_ESP8266_ND+0x33dc>
 8009e46:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009e4a:	2b16      	cmp	r3, #22
 8009e4c:	d004      	beq.n	8009e58 <AT_ESP8266_ND+0x33dc>
 8009e4e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009e52:	2b19      	cmp	r3, #25
 8009e54:	f040 808d 	bne.w	8009f72 <AT_ESP8266_ND+0x34f6>
									a->_debug_count5++;
 8009e58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009e66:	1c5a      	adds	r2, r3, #1
 8009e68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 8009e76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	dd25      	ble.n	8009ed8 <AT_ESP8266_ND+0x345c>
										a->_debug_count8++;
 8009e8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009e9a:	1c5a      	adds	r2, r3, #1
 8009e9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ea0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8009eaa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009eae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009eb8:	1c5a      	adds	r2, r3, #1
 8009eba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ebe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009ec8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ecc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009ed8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009edc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	dd07      	ble.n	8009efa <AT_ESP8266_ND+0x347e>
 8009eea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009eee:	2b10      	cmp	r3, #16
 8009ef0:	d003      	beq.n	8009efa <AT_ESP8266_ND+0x347e>
 8009ef2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009ef6:	2b0a      	cmp	r3, #10
 8009ef8:	d108      	bne.n	8009f0c <AT_ESP8266_ND+0x3490>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009efa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009efe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009f08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009f0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009f1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8009f2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009f3c:	e019      	b.n	8009f72 <AT_ESP8266_ND+0x34f6>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8009f3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009f4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8009f50:	e010      	b.n	8009f74 <AT_ESP8266_ND+0x34f8>
			break;
 8009f52:	bf00      	nop
 8009f54:	e00e      	b.n	8009f74 <AT_ESP8266_ND+0x34f8>
			break;
 8009f56:	bf00      	nop
 8009f58:	e00c      	b.n	8009f74 <AT_ESP8266_ND+0x34f8>
			break;
 8009f5a:	bf00      	nop
 8009f5c:	e00a      	b.n	8009f74 <AT_ESP8266_ND+0x34f8>
			break;
 8009f5e:	bf00      	nop
 8009f60:	e008      	b.n	8009f74 <AT_ESP8266_ND+0x34f8>
			break;
 8009f62:	bf00      	nop
 8009f64:	e006      	b.n	8009f74 <AT_ESP8266_ND+0x34f8>
			break;
 8009f66:	bf00      	nop
 8009f68:	e004      	b.n	8009f74 <AT_ESP8266_ND+0x34f8>
			break;
 8009f6a:	bf00      	nop
 8009f6c:	e002      	b.n	8009f74 <AT_ESP8266_ND+0x34f8>
			break;
 8009f6e:	bf00      	nop
 8009f70:	e000      	b.n	8009f74 <AT_ESP8266_ND+0x34f8>
			break;
 8009f72:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8009f74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
		a->_n_orig=0;
 8009f84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

		return (a->_estado);
 8009f94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009fac <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fbe:	f240 328d 	movw	r2, #909	; 0x38d
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	f001 83d6 	beq.w	800b774 <WiFi_Conn_ND+0x17c8>
 8009fc8:	f240 328d 	movw	r2, #909	; 0x38d
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	f301 8466 	bgt.w	800b89e <WiFi_Conn_ND+0x18f2>
 8009fd2:	f240 3289 	movw	r2, #905	; 0x389
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	f001 8348 	beq.w	800b66c <WiFi_Conn_ND+0x16c0>
 8009fdc:	f240 3289 	movw	r2, #905	; 0x389
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	f301 845c 	bgt.w	800b89e <WiFi_Conn_ND+0x18f2>
 8009fe6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009fea:	f001 8237 	beq.w	800b45c <WiFi_Conn_ND+0x14b0>
 8009fee:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009ff2:	f301 8454 	bgt.w	800b89e <WiFi_Conn_ND+0x18f2>
 8009ff6:	f240 3229 	movw	r2, #809	; 0x329
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	f301 844f 	bgt.w	800b89e <WiFi_Conn_ND+0x18f2>
 800a000:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800a004:	f280 80a5 	bge.w	800a152 <WiFi_Conn_ND+0x1a6>
 800a008:	f240 22c5 	movw	r2, #709	; 0x2c5
 800a00c:	4293      	cmp	r3, r2
 800a00e:	f000 8789 	beq.w	800af24 <WiFi_Conn_ND+0xf78>
 800a012:	f240 22c5 	movw	r2, #709	; 0x2c5
 800a016:	4293      	cmp	r3, r2
 800a018:	f301 8441 	bgt.w	800b89e <WiFi_Conn_ND+0x18f2>
 800a01c:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a020:	4293      	cmp	r3, r2
 800a022:	f000 870f 	beq.w	800ae44 <WiFi_Conn_ND+0xe98>
 800a026:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a02a:	4293      	cmp	r3, r2
 800a02c:	f301 8437 	bgt.w	800b89e <WiFi_Conn_ND+0x18f2>
 800a030:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a034:	f000 863e 	beq.w	800acb4 <WiFi_Conn_ND+0xd08>
 800a038:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a03c:	f301 842f 	bgt.w	800b89e <WiFi_Conn_ND+0x18f2>
 800a040:	f240 2261 	movw	r2, #609	; 0x261
 800a044:	4293      	cmp	r3, r2
 800a046:	f000 85c4 	beq.w	800abd2 <WiFi_Conn_ND+0xc26>
 800a04a:	f240 2261 	movw	r2, #609	; 0x261
 800a04e:	4293      	cmp	r3, r2
 800a050:	f301 8425 	bgt.w	800b89e <WiFi_Conn_ND+0x18f2>
 800a054:	f240 225d 	movw	r2, #605	; 0x25d
 800a058:	4293      	cmp	r3, r2
 800a05a:	f000 8564 	beq.w	800ab26 <WiFi_Conn_ND+0xb7a>
 800a05e:	f240 225d 	movw	r2, #605	; 0x25d
 800a062:	4293      	cmp	r3, r2
 800a064:	f301 841b 	bgt.w	800b89e <WiFi_Conn_ND+0x18f2>
 800a068:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a06c:	f000 84e2 	beq.w	800aa34 <WiFi_Conn_ND+0xa88>
 800a070:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a074:	f301 8413 	bgt.w	800b89e <WiFi_Conn_ND+0x18f2>
 800a078:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a07c:	4293      	cmp	r3, r2
 800a07e:	f000 847d 	beq.w	800a97c <WiFi_Conn_ND+0x9d0>
 800a082:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800a086:	f281 840a 	bge.w	800b89e <WiFi_Conn_ND+0x18f2>
 800a08a:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a08e:	4293      	cmp	r3, r2
 800a090:	f000 8438 	beq.w	800a904 <WiFi_Conn_ND+0x958>
 800a094:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 800a098:	f281 8401 	bge.w	800b89e <WiFi_Conn_ND+0x18f2>
 800a09c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a0a0:	f000 83c3 	beq.w	800a82a <WiFi_Conn_ND+0x87e>
 800a0a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a0a8:	f301 83f9 	bgt.w	800b89e <WiFi_Conn_ND+0x18f2>
 800a0ac:	f240 1299 	movw	r2, #409	; 0x199
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	f000 8369 	beq.w	800a788 <WiFi_Conn_ND+0x7dc>
 800a0b6:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 800a0ba:	f281 83f0 	bge.w	800b89e <WiFi_Conn_ND+0x18f2>
 800a0be:	f240 1295 	movw	r2, #405	; 0x195
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	f000 8329 	beq.w	800a71a <WiFi_Conn_ND+0x76e>
 800a0c8:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 800a0cc:	f281 83e7 	bge.w	800b89e <WiFi_Conn_ND+0x18f2>
 800a0d0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a0d4:	f000 82a0 	beq.w	800a618 <WiFi_Conn_ND+0x66c>
 800a0d8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a0dc:	f301 83df 	bgt.w	800b89e <WiFi_Conn_ND+0x18f2>
 800a0e0:	f240 1235 	movw	r2, #309	; 0x135
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	f000 8271 	beq.w	800a5cc <WiFi_Conn_ND+0x620>
 800a0ea:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800a0ee:	f281 83d6 	bge.w	800b89e <WiFi_Conn_ND+0x18f2>
 800a0f2:	f240 1231 	movw	r2, #305	; 0x131
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	f000 8263 	beq.w	800a5c2 <WiFi_Conn_ND+0x616>
 800a0fc:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800a100:	f281 83cd 	bge.w	800b89e <WiFi_Conn_ND+0x18f2>
 800a104:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a108:	f000 8207 	beq.w	800a51a <WiFi_Conn_ND+0x56e>
 800a10c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a110:	f301 83c5 	bgt.w	800b89e <WiFi_Conn_ND+0x18f2>
 800a114:	2bd1      	cmp	r3, #209	; 0xd1
 800a116:	f000 81a0 	beq.w	800a45a <WiFi_Conn_ND+0x4ae>
 800a11a:	2bd1      	cmp	r3, #209	; 0xd1
 800a11c:	f301 83bf 	bgt.w	800b89e <WiFi_Conn_ND+0x18f2>
 800a120:	2bcd      	cmp	r3, #205	; 0xcd
 800a122:	f000 8170 	beq.w	800a406 <WiFi_Conn_ND+0x45a>
 800a126:	2bcd      	cmp	r3, #205	; 0xcd
 800a128:	f301 83b9 	bgt.w	800b89e <WiFi_Conn_ND+0x18f2>
 800a12c:	2bc8      	cmp	r3, #200	; 0xc8
 800a12e:	f000 80f1 	beq.w	800a314 <WiFi_Conn_ND+0x368>
 800a132:	2bc8      	cmp	r3, #200	; 0xc8
 800a134:	f301 83b3 	bgt.w	800b89e <WiFi_Conn_ND+0x18f2>
 800a138:	2b6d      	cmp	r3, #109	; 0x6d
 800a13a:	f000 80b3 	beq.w	800a2a4 <WiFi_Conn_ND+0x2f8>
 800a13e:	2b6d      	cmp	r3, #109	; 0x6d
 800a140:	f301 83ad 	bgt.w	800b89e <WiFi_Conn_ND+0x18f2>
 800a144:	2b64      	cmp	r3, #100	; 0x64
 800a146:	d021      	beq.n	800a18c <WiFi_Conn_ND+0x1e0>
 800a148:	2b69      	cmp	r3, #105	; 0x69
 800a14a:	f000 8096 	beq.w	800a27a <WiFi_Conn_ND+0x2ce>
 800a14e:	f001 bba6 	b.w	800b89e <WiFi_Conn_ND+0x18f2>
 800a152:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800a156:	2b09      	cmp	r3, #9
 800a158:	f201 83a1 	bhi.w	800b89e <WiFi_Conn_ND+0x18f2>
 800a15c:	a201      	add	r2, pc, #4	; (adr r2, 800a164 <WiFi_Conn_ND+0x1b8>)
 800a15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a162:	bf00      	nop
 800a164:	0800b031 	.word	0x0800b031
 800a168:	0800b89f 	.word	0x0800b89f
 800a16c:	0800b89f 	.word	0x0800b89f
 800a170:	0800b89f 	.word	0x0800b89f
 800a174:	0800b89f 	.word	0x0800b89f
 800a178:	0800b0ff 	.word	0x0800b0ff
 800a17c:	0800b19f 	.word	0x0800b19f
 800a180:	0800b23f 	.word	0x0800b23f
 800a184:	0800b2df 	.word	0x0800b2df
 800a188:	0800b37f 	.word	0x0800b37f
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a192:	2b64      	cmp	r3, #100	; 0x64
 800a194:	d046      	beq.n	800a224 <WiFi_Conn_ND+0x278>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d041      	beq.n	800a224 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a6:	2b1c      	cmp	r3, #28
 800a1a8:	d03c      	beq.n	800a224 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d037      	beq.n	800a224 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ba:	2b04      	cmp	r3, #4
 800a1bc:	d032      	beq.n	800a224 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1c4:	2b13      	cmp	r3, #19
 800a1c6:	d02d      	beq.n	800a224 <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f7fc fac1 	bl	8006750 <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d14e      	bne.n	800a276 <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f7fc fc4f 	bl	8006a7c <AT_ESP8266_ND>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d109      	bne.n	800a20c <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a204:	4619      	mov	r1, r3
 800a206:	4610      	mov	r0, r2
 800a208:	f7f7 fa22 	bl	8001650 <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a218:	b29a      	uxth	r2, r3
 800a21a:	2364      	movs	r3, #100	; 0x64
 800a21c:	68b8      	ldr	r0, [r7, #8]
 800a21e:	f7fb fa1b 	bl	8005658 <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 800a222:	e028      	b.n	800a276 <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d004      	beq.n	800a238 <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 800a234:	2b1c      	cmp	r3, #28
 800a236:	d103      	bne.n	800a240 <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	226d      	movs	r2, #109	; 0x6d
 800a23c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a246:	2b02      	cmp	r3, #2
 800a248:	d00f      	beq.n	800a26a <WiFi_Conn_ND+0x2be>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a250:	2b04      	cmp	r3, #4
 800a252:	d00a      	beq.n	800a26a <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a25a:	2b0b      	cmp	r3, #11
 800a25c:	d005      	beq.n	800a26a <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a264:	2b0c      	cmp	r3, #12
 800a266:	f041 82eb 	bne.w	800b840 <WiFi_Conn_ND+0x1894>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2269      	movs	r2, #105	; 0x69
 800a26e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 800a272:	f001 bae5 	b.w	800b840 <WiFi_Conn_ND+0x1894>
 800a276:	f001 bae3 	b.w	800b840 <WiFi_Conn_ND+0x1894>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f7fc fa68 	bl	8006750 <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2264      	movs	r2, #100	; 0x64
 800a284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2200      	movs	r2, #0
 800a294:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2200      	movs	r2, #0
 800a29c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 800a2a0:	f001 bafd 	b.w	800b89e <WiFi_Conn_ND+0x18f2>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00c      	beq.n	800a2c8 <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f7fc fa7a 	bl	80067a8 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a2ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800a2c6:	e00e      	b.n	800a2e6 <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f7fc fa57 	bl	800677c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	22c8      	movs	r2, #200	; 0xc8
 800a2d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ec:	2b04      	cmp	r3, #4
 800a2ee:	f041 82a9 	bne.w	800b844 <WiFi_Conn_ND+0x1898>
					{
						Cambiar_CWMODE(b);
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f7fc fa2c 	bl	8006750 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2264      	movs	r2, #100	; 0x64
 800a2fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a310:	f001 ba98 	b.w	800b844 <WiFi_Conn_ND+0x1898>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a31a:	2bc8      	cmp	r3, #200	; 0xc8
 800a31c:	d04f      	beq.n	800a3be <WiFi_Conn_ND+0x412>
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a324:	2b01      	cmp	r3, #1
 800a326:	d04a      	beq.n	800a3be <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d045      	beq.n	800a3be <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a338:	2b03      	cmp	r3, #3
 800a33a:	d040      	beq.n	800a3be <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a342:	2b04      	cmp	r3, #4
 800a344:	d03b      	beq.n	800a3be <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a34c:	2b0a      	cmp	r3, #10
 800a34e:	d036      	beq.n	800a3be <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a356:	2b0b      	cmp	r3, #11
 800a358:	d031      	beq.n	800a3be <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a360:	2b0c      	cmp	r3, #12
 800a362:	d02c      	beq.n	800a3be <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f7fc fa09 	bl	800677c <ConectarWIFI>
						if(b->_enviaruart==1)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a370:	2b01      	cmp	r3, #1
 800a372:	d124      	bne.n	800a3be <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f7fc fb81 	bl	8006a7c <AT_ESP8266_ND>
 800a37a:	4602      	mov	r2, r0
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2200      	movs	r2, #0
 800a386:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a390:	2b01      	cmp	r3, #1
 800a392:	d109      	bne.n	800a3a8 <WiFi_Conn_ND+0x3fc>
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	4610      	mov	r0, r2
 800a3a4:	f7f7 f954 	bl	8001650 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	2364      	movs	r3, #100	; 0x64
 800a3b8:	68b8      	ldr	r0, [r7, #8]
 800a3ba:	f7fb f94d 	bl	8005658 <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d004      	beq.n	800a3d2 <WiFi_Conn_ND+0x426>
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ce:	2b0c      	cmp	r3, #12
 800a3d0:	d103      	bne.n	800a3da <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	22d1      	movs	r2, #209	; 0xd1
 800a3d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d00a      	beq.n	800a3fa <WiFi_Conn_ND+0x44e>
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ea:	2b03      	cmp	r3, #3
 800a3ec:	d005      	beq.n	800a3fa <WiFi_Conn_ND+0x44e>
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3f4:	2b20      	cmp	r3, #32
 800a3f6:	f041 8227 	bne.w	800b848 <WiFi_Conn_ND+0x189c>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	22cd      	movs	r2, #205	; 0xcd
 800a3fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a402:	f001 ba21 	b.w	800b848 <WiFi_Conn_ND+0x189c>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 800a406:	f241 3088 	movw	r0, #5000	; 0x1388
 800a40a:	f7f8 fc71 	bl	8002cf0 <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f7fc f9b4 	bl	800677c <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	22c8      	movs	r2, #200	; 0xc8
 800a418:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2200      	movs	r2, #0
 800a420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2200      	movs	r2, #0
 800a428:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a432:	2b04      	cmp	r3, #4
 800a434:	f041 820a 	bne.w	800b84c <WiFi_Conn_ND+0x18a0>
					{
						Cambiar_CWMODE(b);
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f7fc f989 	bl	8006750 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2264      	movs	r2, #100	; 0x64
 800a442:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2200      	movs	r2, #0
 800a452:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a456:	f001 b9f9 	b.w	800b84c <WiFi_Conn_ND+0x18a0>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d108      	bne.n	800a47e <WiFi_Conn_ND+0x4d2>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f240 3229 	movw	r2, #809	; 0x329
 800a472:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)) //Si me desconecto, me vuelvo a conectar
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a484:	2b0a      	cmp	r3, #10
 800a486:	d004      	beq.n	800a492 <WiFi_Conn_ND+0x4e6>
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a48e:	2b0d      	cmp	r3, #13
 800a490:	d10a      	bne.n	800a4a8 <WiFi_Conn_ND+0x4fc>
				{
					ConectarWIFI(b);
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f7fc f972 	bl	800677c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	22c8      	movs	r2, #200	; 0xc8
 800a49c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ae:	2b04      	cmp	r3, #4
 800a4b0:	d10e      	bne.n	800a4d0 <WiFi_Conn_ND+0x524>
					{
						Cambiar_CWMODE(b);
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	f7fc f94c 	bl	8006750 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2264      	movs	r2, #100	; 0x64
 800a4bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d011      	beq.n	800a4fe <WiFi_Conn_ND+0x552>
				{//
					CrearServidorTCP(b);
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f7fc f9bc 	bl	8006858 <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a4e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 800a4fa:	f001 b9d0 	b.w	800b89e <WiFi_Conn_ND+0x18f2>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	f7fc f952 	bl	80067a8 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a50a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2200      	movs	r2, #0
 800a512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a516:	f001 b9c2 	b.w	800b89e <WiFi_Conn_ND+0x18f2>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a520:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a524:	d03b      	beq.n	800a59e <WiFi_Conn_ND+0x5f2>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a52c:	2b04      	cmp	r3, #4
 800a52e:	d036      	beq.n	800a59e <WiFi_Conn_ND+0x5f2>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a536:	2b0a      	cmp	r3, #10
 800a538:	d031      	beq.n	800a59e <WiFi_Conn_ND+0x5f2>
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a540:	2b0d      	cmp	r3, #13
 800a542:	d02c      	beq.n	800a59e <WiFi_Conn_ND+0x5f2>
				{
						DesconectarWIFI(b);
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f7fc f95b 	bl	8006800 <DesconectarWIFI>
						if(b->_enviaruart==1)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a550:	2b01      	cmp	r3, #1
 800a552:	d124      	bne.n	800a59e <WiFi_Conn_ND+0x5f2>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f7fc fa91 	bl	8006a7c <AT_ESP8266_ND>
 800a55a:	4602      	mov	r2, r0
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2200      	movs	r2, #0
 800a566:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a570:	2b01      	cmp	r3, #1
 800a572:	d109      	bne.n	800a588 <WiFi_Conn_ND+0x5dc>
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a580:	4619      	mov	r1, r3
 800a582:	4610      	mov	r0, r2
 800a584:	f7f7 f864 	bl	8001650 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a594:	b29a      	uxth	r2, r3
 800a596:	2364      	movs	r3, #100	; 0x64
 800a598:	68b8      	ldr	r0, [r7, #8]
 800a59a:	f7fb f85d 	bl	8005658 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5a4:	2b0a      	cmp	r3, #10
 800a5a6:	d005      	beq.n	800a5b4 <WiFi_Conn_ND+0x608>
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ae:	2b0d      	cmp	r3, #13
 800a5b0:	f041 814e 	bne.w	800b850 <WiFi_Conn_ND+0x18a4>
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f240 1235 	movw	r2, #309	; 0x135
 800a5ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a5be:	f001 b947 	b.w	800b850 <WiFi_Conn_ND+0x18a4>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 800a5c2:	68f8      	ldr	r0, [r7, #12]
 800a5c4:	f7fc f8ae 	bl	8006724 <NOP>
			}
			break;
 800a5c8:	f001 b969 	b.w	800b89e <WiFi_Conn_ND+0x18f2>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				ConectarWIFI(b);
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f7fc f8d1 	bl	800677c <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	22c8      	movs	r2, #200	; 0xc8
 800a5de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f0:	2b04      	cmp	r3, #4
 800a5f2:	f041 812f 	bne.w	800b854 <WiFi_Conn_ND+0x18a8>
					{
						Cambiar_CWMODE(b);
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f7fc f8aa 	bl	8006750 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2264      	movs	r2, #100	; 0x64
 800a600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2200      	movs	r2, #0
 800a608:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2200      	movs	r2, #0
 800a610:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a614:	f001 b91e 	b.w	800b854 <WiFi_Conn_ND+0x18a8>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a61e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a622:	d04f      	beq.n	800a6c4 <WiFi_Conn_ND+0x718>
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a62a:	2b04      	cmp	r3, #4
 800a62c:	d04a      	beq.n	800a6c4 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_ok)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a634:	2b01      	cmp	r3, #1
 800a636:	d045      	beq.n	800a6c4 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_error)
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a63e:	2b02      	cmp	r3, #2
 800a640:	d040      	beq.n	800a6c4 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_ok)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a648:	2b07      	cmp	r3, #7
 800a64a:	d03b      	beq.n	800a6c4 <WiFi_Conn_ND+0x718>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a652:	2b08      	cmp	r3, #8
 800a654:	d036      	beq.n	800a6c4 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_err)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a65c:	2b1e      	cmp	r3, #30
 800a65e:	d031      	beq.n	800a6c4 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a666:	2b1f      	cmp	r3, #31
 800a668:	d02c      	beq.n	800a6c4 <WiFi_Conn_ND+0x718>
				{
						MUX(b);
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f7fc f89c 	bl	80067a8 <MUX>
						if(b->_enviaruart==1)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a676:	2b01      	cmp	r3, #1
 800a678:	d124      	bne.n	800a6c4 <WiFi_Conn_ND+0x718>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f7fc f9fe 	bl	8006a7c <AT_ESP8266_ND>
 800a680:	4602      	mov	r2, r0
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a696:	2b01      	cmp	r3, #1
 800a698:	d109      	bne.n	800a6ae <WiFi_Conn_ND+0x702>
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	4610      	mov	r0, r2
 800a6aa:	f7f6 ffd1 	bl	8001650 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a6ba:	b29a      	uxth	r2, r3
 800a6bc:	2364      	movs	r3, #100	; 0x64
 800a6be:	68b8      	ldr	r0, [r7, #8]
 800a6c0:	f7fa ffca 	bl	8005658 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d009      	beq.n	800a6e2 <WiFi_Conn_ND+0x736>
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6d4:	2b07      	cmp	r3, #7
 800a6d6:	d004      	beq.n	800a6e2 <WiFi_Conn_ND+0x736>
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6de:	2b08      	cmp	r3, #8
 800a6e0:	d104      	bne.n	800a6ec <WiFi_Conn_ND+0x740>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f240 1299 	movw	r2, #409	; 0x199
 800a6e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err)) b->_estado_conexion=MUX_CONN_ERROR;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	d00a      	beq.n	800a70c <WiFi_Conn_ND+0x760>
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6fc:	2b1e      	cmp	r3, #30
 800a6fe:	d005      	beq.n	800a70c <WiFi_Conn_ND+0x760>
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a706:	2b1f      	cmp	r3, #31
 800a708:	f041 80a6 	bne.w	800b858 <WiFi_Conn_ND+0x18ac>
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f240 1295 	movw	r2, #405	; 0x195
 800a712:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a716:	f001 b89f 	b.w	800b858 <WiFi_Conn_ND+0x18ac>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f7fc f802 	bl	8006724 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a726:	2b04      	cmp	r3, #4
 800a728:	d112      	bne.n	800a750 <WiFi_Conn_ND+0x7a4>
				{
					Cambiar_CWMODE(b);
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f7fc f810 	bl	8006750 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2264      	movs	r2, #100	; 0x64
 800a734:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2200      	movs	r2, #0
 800a744:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a756:	2b0a      	cmp	r3, #10
 800a758:	d005      	beq.n	800a766 <WiFi_Conn_ND+0x7ba>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a760:	2b0d      	cmp	r3, #13
 800a762:	f041 807b 	bne.w	800b85c <WiFi_Conn_ND+0x18b0>
				{
					ConectarWIFI(b);
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f7fc f808 	bl	800677c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	22c8      	movs	r2, #200	; 0xc8
 800a770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2200      	movs	r2, #0
 800a778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2200      	movs	r2, #0
 800a780:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a784:	f001 b86a 	b.w	800b85c <WiFi_Conn_ND+0x18b0>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f7fb ffcb 	bl	8006724 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2200      	movs	r2, #0
 800a792:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a79c:	2b04      	cmp	r3, #4
 800a79e:	d10e      	bne.n	800a7be <WiFi_Conn_ND+0x812>
					{
						Cambiar_CWMODE(b);
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f7fb ffd5 	bl	8006750 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2264      	movs	r2, #100	; 0x64
 800a7aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7c4:	2b0a      	cmp	r3, #10
 800a7c6:	d004      	beq.n	800a7d2 <WiFi_Conn_ND+0x826>
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7ce:	2b0d      	cmp	r3, #13
 800a7d0:	d10a      	bne.n	800a7e8 <WiFi_Conn_ND+0x83c>
					{
						ConectarWIFI(b);
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f7fb ffd2 	bl	800677c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	22c8      	movs	r2, #200	; 0xc8
 800a7dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}
					if(b->_NO_IP==0)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d10d      	bne.n	800a80e <WiFi_Conn_ND+0x862>
					{
						IPDef(b);
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f7fb ffee 	bl	80067d4 <IPDef>
						b->_estado_conexion=DEF_IP_EN_CURSO;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a7fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2200      	movs	r2, #0
 800a806:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_estado=0;
					}


			}
			break;
 800a80a:	f001 b848 	b.w	800b89e <WiFi_Conn_ND+0x18f2>
						IPDef(b);
 800a80e:	68f8      	ldr	r0, [r7, #12]
 800a810:	f7fb ffe0 	bl	80067d4 <IPDef>
						b->_estado_conexion=DEF_IP_OK;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a81a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2200      	movs	r2, #0
 800a822:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a826:	f001 b83a 	b.w	800b89e <WiFi_Conn_ND+0x18f2>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a830:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a834:	d045      	beq.n	800a8c2 <WiFi_Conn_ND+0x916>
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a83c:	2b04      	cmp	r3, #4
 800a83e:	d040      	beq.n	800a8c2 <WiFi_Conn_ND+0x916>
									&&(b->_estado!=at_ok)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a846:	2b01      	cmp	r3, #1
 800a848:	d03b      	beq.n	800a8c2 <WiFi_Conn_ND+0x916>
									&&(b->_estado!=at_error)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a850:	2b02      	cmp	r3, #2
 800a852:	d036      	beq.n	800a8c2 <WiFi_Conn_ND+0x916>
									&&(b->_estado!=at_def_ip_ok)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a85a:	2b1b      	cmp	r3, #27
 800a85c:	d031      	beq.n	800a8c2 <WiFi_Conn_ND+0x916>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a864:	2b21      	cmp	r3, #33	; 0x21
 800a866:	d02c      	beq.n	800a8c2 <WiFi_Conn_ND+0x916>
				{
						IPDef(b);
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f7fb ffb3 	bl	80067d4 <IPDef>
						if(b->_enviaruart==1)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a874:	2b01      	cmp	r3, #1
 800a876:	d124      	bne.n	800a8c2 <WiFi_Conn_ND+0x916>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	f7fc f8ff 	bl	8006a7c <AT_ESP8266_ND>
 800a87e:	4602      	mov	r2, r0
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2200      	movs	r2, #0
 800a88a:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a894:	2b01      	cmp	r3, #1
 800a896:	d109      	bne.n	800a8ac <WiFi_Conn_ND+0x900>
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	4610      	mov	r0, r2
 800a8a8:	f7f6 fed2 	bl	8001650 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a8b8:	b29a      	uxth	r2, r3
 800a8ba:	2364      	movs	r3, #100	; 0x64
 800a8bc:	68b8      	ldr	r0, [r7, #8]
 800a8be:	f7fa fecb 	bl	8005658 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d004      	beq.n	800a8d6 <WiFi_Conn_ND+0x92a>
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8d2:	2b1b      	cmp	r3, #27
 800a8d4:	d104      	bne.n	800a8e0 <WiFi_Conn_ND+0x934>
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a8dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8e6:	2b02      	cmp	r3, #2
 800a8e8:	d005      	beq.n	800a8f6 <WiFi_Conn_ND+0x94a>
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8f0:	2b21      	cmp	r3, #33	; 0x21
 800a8f2:	f040 87b5 	bne.w	800b860 <WiFi_Conn_ND+0x18b4>
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a8fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a900:	f000 bfae 	b.w	800b860 <WiFi_Conn_ND+0x18b4>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a904:	68f8      	ldr	r0, [r7, #12]
 800a906:	f7fb ff0d 	bl	8006724 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a910:	2b04      	cmp	r3, #4
 800a912:	d004      	beq.n	800a91e <WiFi_Conn_ND+0x972>
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	d112      	bne.n	800a944 <WiFi_Conn_ND+0x998>
				{
					Cambiar_CWMODE(b);
 800a91e:	68f8      	ldr	r0, [r7, #12]
 800a920:	f7fb ff16 	bl	8006750 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2264      	movs	r2, #100	; 0x64
 800a928:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2200      	movs	r2, #0
 800a930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2200      	movs	r2, #0
 800a938:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2200      	movs	r2, #0
 800a940:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a94a:	2b0a      	cmp	r3, #10
 800a94c:	d005      	beq.n	800a95a <WiFi_Conn_ND+0x9ae>
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a954:	2b0d      	cmp	r3, #13
 800a956:	f040 8785 	bne.w	800b864 <WiFi_Conn_ND+0x18b8>
				{
					ConectarWIFI(b);
 800a95a:	68f8      	ldr	r0, [r7, #12]
 800a95c:	f7fb ff0e 	bl	800677c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	22c8      	movs	r2, #200	; 0xc8
 800a964:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a978:	f000 bf74 	b.w	800b864 <WiFi_Conn_ND+0x18b8>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f7fb fed1 	bl	8006724 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a988:	2b04      	cmp	r3, #4
 800a98a:	d112      	bne.n	800a9b2 <WiFi_Conn_ND+0xa06>
					{
						Cambiar_CWMODE(b);
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f7fb fedf 	bl	8006750 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2264      	movs	r2, #100	; 0x64
 800a996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9b8:	2b0a      	cmp	r3, #10
 800a9ba:	d004      	beq.n	800a9c6 <WiFi_Conn_ND+0xa1a>
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9c2:	2b0d      	cmp	r3, #13
 800a9c4:	d10e      	bne.n	800a9e4 <WiFi_Conn_ND+0xa38>
					{
						ConectarWIFI(b);
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f7fb fed8 	bl	800677c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	22c8      	movs	r2, #200	; 0xc8
 800a9d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d111      	bne.n	800aa12 <WiFi_Conn_ND+0xa66>
					{
						ConectarTCP(b);
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	f7fb ff1c 	bl	800682c <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a9fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						//b->_estado_conexion=TCP_SRVR_EN_CURSO;
						//b->_estado=0;
						//b->_n_orig=0; //Borro el vector RX
					}
			}
			break;
 800aa0e:	f000 bf46 	b.w	800b89e <WiFi_Conn_ND+0x18f2>
						ConectarWIFI(b);//
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f7fb feb2 	bl	800677c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	22c8      	movs	r2, #200	; 0xc8
 800aa1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800aa30:	f000 bf35 	b.w	800b89e <WiFi_Conn_ND+0x18f2>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa3a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800aa3e:	d04a      	beq.n	800aad6 <WiFi_Conn_ND+0xb2a>
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa46:	2b02      	cmp	r3, #2
 800aa48:	d045      	beq.n	800aad6 <WiFi_Conn_ND+0xb2a>
									&&(b->_estado!=at_ok)
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d040      	beq.n	800aad6 <WiFi_Conn_ND+0xb2a>
									&&(b->_estado!=at_wifi_disconnect)
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa5a:	2b0a      	cmp	r3, #10
 800aa5c:	d03b      	beq.n	800aad6 <WiFi_Conn_ND+0xb2a>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa64:	2b0e      	cmp	r3, #14
 800aa66:	d036      	beq.n	800aad6 <WiFi_Conn_ND+0xb2a>
									&&(b->_estado!=at_tcp_conectado)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa6e:	2b0f      	cmp	r3, #15
 800aa70:	d031      	beq.n	800aad6 <WiFi_Conn_ND+0xb2a>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa78:	2b10      	cmp	r3, #16
 800aa7a:	d02c      	beq.n	800aad6 <WiFi_Conn_ND+0xb2a>
				{
					ConectarTCP(b);
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f7fb fed5 	bl	800682c <ConectarTCP>
						if(b->_enviaruart==1)
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d124      	bne.n	800aad6 <WiFi_Conn_ND+0xb2a>
							{
								b->_estado=AT_ESP8266_ND(b);
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	f7fb fff5 	bl	8006a7c <AT_ESP8266_ND>
 800aa92:	4602      	mov	r2, r0
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d109      	bne.n	800aac0 <WiFi_Conn_ND+0xb14>
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800aab8:	4619      	mov	r1, r3
 800aaba:	4610      	mov	r0, r2
 800aabc:	f7f6 fdc8 	bl	8001650 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800aacc:	b29a      	uxth	r2, r3
 800aace:	2364      	movs	r3, #100	; 0x64
 800aad0:	68b8      	ldr	r0, [r7, #8]
 800aad2:	f7fa fdc1 	bl	8005658 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d009      	beq.n	800aaf4 <WiFi_Conn_ND+0xb48>
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aae6:	2b0e      	cmp	r3, #14
 800aae8:	d004      	beq.n	800aaf4 <WiFi_Conn_ND+0xb48>
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaf0:	2b0f      	cmp	r3, #15
 800aaf2:	d106      	bne.n	800ab02 <WiFi_Conn_ND+0xb56>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f240 2261 	movw	r2, #609	; 0x261
 800aafa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800aafe:	f000 beb3 	b.w	800b868 <WiFi_Conn_ND+0x18bc>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d005      	beq.n	800ab18 <WiFi_Conn_ND+0xb6c>
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab12:	2b10      	cmp	r3, #16
 800ab14:	f040 86a8 	bne.w	800b868 <WiFi_Conn_ND+0x18bc>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f240 225d 	movw	r2, #605	; 0x25d
 800ab1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800ab22:	f000 bea1 	b.w	800b868 <WiFi_Conn_ND+0x18bc>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f7fb fdfc 	bl	8006724 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab32:	2b04      	cmp	r3, #4
 800ab34:	d112      	bne.n	800ab5c <WiFi_Conn_ND+0xbb0>
				{
					Cambiar_CWMODE(b);
 800ab36:	68f8      	ldr	r0, [r7, #12]
 800ab38:	f7fb fe0a 	bl	8006750 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2264      	movs	r2, #100	; 0x64
 800ab40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2200      	movs	r2, #0
 800ab58:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab62:	2b0a      	cmp	r3, #10
 800ab64:	d004      	beq.n	800ab70 <WiFi_Conn_ND+0xbc4>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab6c:	2b0d      	cmp	r3, #13
 800ab6e:	d10e      	bne.n	800ab8e <WiFi_Conn_ND+0xbe2>
				{
					ConectarWIFI(b);
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f7fb fe03 	bl	800677c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	22c8      	movs	r2, #200	; 0xc8
 800ab7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2200      	movs	r2, #0
 800ab82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d00a      	beq.n	800abae <WiFi_Conn_ND+0xc02>
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab9e:	2b10      	cmp	r3, #16
 800aba0:	d005      	beq.n	800abae <WiFi_Conn_ND+0xc02>
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aba8:	2b0e      	cmp	r3, #14
 800abaa:	f040 865f 	bne.w	800b86c <WiFi_Conn_ND+0x18c0>
				{
					ConectarTCP(b);
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	f7fb fe3c 	bl	800682c <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f44f 7216 	mov.w	r2, #600	; 0x258
 800abba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2200      	movs	r2, #0
 800abca:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800abce:	f000 be4d 	b.w	800b86c <WiFi_Conn_ND+0x18c0>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f7fb fda6 	bl	8006724 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abde:	2b04      	cmp	r3, #4
 800abe0:	d112      	bne.n	800ac08 <WiFi_Conn_ND+0xc5c>
					{
						Cambiar_CWMODE(b);
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f7fb fdb4 	bl	8006750 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2264      	movs	r2, #100	; 0x64
 800abec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac0e:	2b0a      	cmp	r3, #10
 800ac10:	d004      	beq.n	800ac1c <WiFi_Conn_ND+0xc70>
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac18:	2b0d      	cmp	r3, #13
 800ac1a:	d10e      	bne.n	800ac3a <WiFi_Conn_ND+0xc8e>
					{
						ConectarWIFI(b);
 800ac1c:	68f8      	ldr	r0, [r7, #12]
 800ac1e:	f7fb fdad 	bl	800677c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	22c8      	movs	r2, #200	; 0xc8
 800ac26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac40:	2b02      	cmp	r3, #2
 800ac42:	d004      	beq.n	800ac4e <WiFi_Conn_ND+0xca2>
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac4a:	2b10      	cmp	r3, #16
 800ac4c:	d10f      	bne.n	800ac6e <WiFi_Conn_ND+0xcc2>
					{
						ConectarTCP(b);
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f7fb fdec 	bl	800682c <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ac5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2200      	movs	r2, #0
 800ac62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac74:	2b0e      	cmp	r3, #14
 800ac76:	d005      	beq.n	800ac84 <WiFi_Conn_ND+0xcd8>
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac7e:	2b0f      	cmp	r3, #15
 800ac80:	f040 85f6 	bne.w	800b870 <WiFi_Conn_ND+0x18c4>
					{
						if(b->_automatizacion >= WF_SEND )
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	f240 85f0 	bls.w	800b870 <WiFi_Conn_ND+0x18c4>
						{
							EnviarDatos(b);
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f7fb fe0d 	bl	80068b0 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800ac9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2200      	movs	r2, #0
 800acac:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						}
					}
			}
			break;
 800acb0:	f000 bdde 	b.w	800b870 <WiFi_Conn_ND+0x18c4>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acba:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800acbe:	d054      	beq.n	800ad6a <WiFi_Conn_ND+0xdbe>
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	d04f      	beq.n	800ad6a <WiFi_Conn_ND+0xdbe>
									&&(b->_estado!=at_wifi_disconnect)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acd0:	2b0a      	cmp	r3, #10
 800acd2:	d04a      	beq.n	800ad6a <WiFi_Conn_ND+0xdbe>
									&&(b->_estado!=at_tcp_desconectado)
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acda:	2b10      	cmp	r3, #16
 800acdc:	d045      	beq.n	800ad6a <WiFi_Conn_ND+0xdbe>
									&&(b->_estado!=at_tcp_snd_err)
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ace4:	2b11      	cmp	r3, #17
 800ace6:	d040      	beq.n	800ad6a <WiFi_Conn_ND+0xdbe>
									&&(b->_estado!=at_tcp_ok_to_send)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acee:	2b14      	cmp	r3, #20
 800acf0:	d03b      	beq.n	800ad6a <WiFi_Conn_ND+0xdbe>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acf8:	2b12      	cmp	r3, #18
 800acfa:	d036      	beq.n	800ad6a <WiFi_Conn_ND+0xdbe>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	d907      	bls.n	800ad16 <WiFi_Conn_ND+0xd6a>
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d002      	beq.n	800ad16 <WiFi_Conn_ND+0xd6a>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	f7fb fdcd 	bl	80068b0 <EnviarDatos>
							b->_data2SND[9]=0x00;
							b->_data2SND[10]=0x00;
							b->_data2SND[11]=0x0A;
							b->_n_D2SND=12;*/
					}
						if(b->_enviaruart==1)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d124      	bne.n	800ad6a <WiFi_Conn_ND+0xdbe>
							{
								b->_estado=AT_ESP8266_ND(b);
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f7fb feab 	bl	8006a7c <AT_ESP8266_ND>
 800ad26:	4602      	mov	r2, r0
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2200      	movs	r2, #0
 800ad32:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d109      	bne.n	800ad54 <WiFi_Conn_ND+0xda8>
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	4610      	mov	r0, r2
 800ad50:	f7f6 fc7e 	bl	8001650 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ad60:	b29a      	uxth	r2, r3
 800ad62:	2364      	movs	r3, #100	; 0x64
 800ad64:	68b8      	ldr	r0, [r7, #8]
 800ad66:	f7fa fc77 	bl	8005658 <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad70:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800ad74:	d13b      	bne.n	800adee <WiFi_Conn_ND+0xe42>
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d136      	bne.n	800adee <WiFi_Conn_ND+0xe42>
											&&(b->_estado!=at_error)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	d031      	beq.n	800adee <WiFi_Conn_ND+0xe42>
											&&(b->_estado!=at_wifi_disconnect)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad90:	2b0a      	cmp	r3, #10
 800ad92:	d02c      	beq.n	800adee <WiFi_Conn_ND+0xe42>
											&&(b->_estado!=at_tcp_desconectado)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad9a:	2b10      	cmp	r3, #16
 800ad9c:	d027      	beq.n	800adee <WiFi_Conn_ND+0xe42>
											&&(b->_estado!=at_tcp_snd_err)
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ada4:	2b11      	cmp	r3, #17
 800ada6:	d022      	beq.n	800adee <WiFi_Conn_ND+0xe42>
											&&(b->_estado!=at_tcp_enviado_error))
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adae:	2b12      	cmp	r3, #18
 800adb0:	d01d      	beq.n	800adee <WiFi_Conn_ND+0xe42>
							{
								b->_enviaruart=0;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2200      	movs	r2, #0
 800adb6:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d109      	bne.n	800add8 <WiFi_Conn_ND+0xe2c>
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800add0:	4619      	mov	r1, r3
 800add2:	4610      	mov	r0, r2
 800add4:	f7f6 fc3c 	bl	8001650 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ade4:	b29a      	uxth	r2, r3
 800ade6:	2364      	movs	r3, #100	; 0x64
 800ade8:	68b8      	ldr	r0, [r7, #8]
 800adea:	f7fa fc35 	bl	8005658 <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adf4:	2b13      	cmp	r3, #19
 800adf6:	d104      	bne.n	800ae02 <WiFi_Conn_ND+0xe56>
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f240 22c5 	movw	r2, #709	; 0x2c5
 800adfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	d014      	beq.n	800ae36 <WiFi_Conn_ND+0xe8a>
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae12:	2b0a      	cmp	r3, #10
 800ae14:	d00f      	beq.n	800ae36 <WiFi_Conn_ND+0xe8a>
										 ||(b->_estado==at_tcp_desconectado)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae1c:	2b10      	cmp	r3, #16
 800ae1e:	d00a      	beq.n	800ae36 <WiFi_Conn_ND+0xe8a>
										 ||(b->_estado==at_tcp_snd_err)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae26:	2b11      	cmp	r3, #17
 800ae28:	d005      	beq.n	800ae36 <WiFi_Conn_ND+0xe8a>
										 ||(b->_estado==at_tcp_enviado_error))
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae30:	2b12      	cmp	r3, #18
 800ae32:	f040 851f 	bne.w	800b874 <WiFi_Conn_ND+0x18c8>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f240 22c1 	movw	r2, #705	; 0x2c1
 800ae3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800ae40:	f000 bd18 	b.w	800b874 <WiFi_Conn_ND+0x18c8>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f7fb fc6d 	bl	8006724 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae50:	2b04      	cmp	r3, #4
 800ae52:	d112      	bne.n	800ae7a <WiFi_Conn_ND+0xece>
				{
					Cambiar_CWMODE(b);
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f7fb fc7b 	bl	8006750 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2264      	movs	r2, #100	; 0x64
 800ae5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2200      	movs	r2, #0
 800ae66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae80:	2b0a      	cmp	r3, #10
 800ae82:	d004      	beq.n	800ae8e <WiFi_Conn_ND+0xee2>
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae8a:	2b0d      	cmp	r3, #13
 800ae8c:	d10e      	bne.n	800aeac <WiFi_Conn_ND+0xf00>
				{
					ConectarWIFI(b);
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f7fb fc74 	bl	800677c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	22c8      	movs	r2, #200	; 0xc8
 800ae98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeb2:	2b0c      	cmp	r3, #12
 800aeb4:	d10f      	bne.n	800aed6 <WiFi_Conn_ND+0xf2a>
				{
					ConectarTCP(b);
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	f7fb fcb8 	bl	800682c <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2200      	movs	r2, #0
 800aeca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aedc:	2b02      	cmp	r3, #2
 800aede:	d00f      	beq.n	800af00 <WiFi_Conn_ND+0xf54>
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aee6:	2b10      	cmp	r3, #16
 800aee8:	d00a      	beq.n	800af00 <WiFi_Conn_ND+0xf54>
										 ||(b->_estado==at_tcp_snd_err)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aef0:	2b11      	cmp	r3, #17
 800aef2:	d005      	beq.n	800af00 <WiFi_Conn_ND+0xf54>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aefa:	2b12      	cmp	r3, #18
 800aefc:	f040 84bc 	bne.w	800b878 <WiFi_Conn_ND+0x18cc>
				{
					ConectarTCP(b);
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f7fb fc93 	bl	800682c <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f44f 7216 	mov.w	r2, #600	; 0x258
 800af0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2200      	movs	r2, #0
 800af14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800af20:	f000 bcaa 	b.w	800b878 <WiFi_Conn_ND+0x18cc>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f7fb fbfd 	bl	8006724 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af30:	2b04      	cmp	r3, #4
 800af32:	d112      	bne.n	800af5a <WiFi_Conn_ND+0xfae>
					{
						Cambiar_CWMODE(b);
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f7fb fc0b 	bl	8006750 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2264      	movs	r2, #100	; 0x64
 800af3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2200      	movs	r2, #0
 800af46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2200      	movs	r2, #0
 800af4e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2200      	movs	r2, #0
 800af56:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af60:	2b0a      	cmp	r3, #10
 800af62:	d004      	beq.n	800af6e <WiFi_Conn_ND+0xfc2>
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af6a:	2b0d      	cmp	r3, #13
 800af6c:	d10e      	bne.n	800af8c <WiFi_Conn_ND+0xfe0>
					{
						ConectarWIFI(b);
 800af6e:	68f8      	ldr	r0, [r7, #12]
 800af70:	f7fb fc04 	bl	800677c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	22c8      	movs	r2, #200	; 0xc8
 800af78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2200      	movs	r2, #0
 800af80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2200      	movs	r2, #0
 800af88:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af92:	2b02      	cmp	r3, #2
 800af94:	d00e      	beq.n	800afb4 <WiFi_Conn_ND+0x1008>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af9c:	2b0b      	cmp	r3, #11
 800af9e:	d009      	beq.n	800afb4 <WiFi_Conn_ND+0x1008>
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afa6:	2b0c      	cmp	r3, #12
 800afa8:	d004      	beq.n	800afb4 <WiFi_Conn_ND+0x1008>
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afb0:	2b10      	cmp	r3, #16
 800afb2:	d10f      	bne.n	800afd4 <WiFi_Conn_ND+0x1028>
					{
						ConectarTCP(b);
 800afb4:	68f8      	ldr	r0, [r7, #12]
 800afb6:	f7fb fc39 	bl	800682c <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f44f 7216 	mov.w	r2, #600	; 0x258
 800afc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2200      	movs	r2, #0
 800afd0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800afd4:	20c8      	movs	r0, #200	; 0xc8
 800afd6:	f7f7 fe8b 	bl	8002cf0 <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800afe0:	2b02      	cmp	r3, #2
 800afe2:	d916      	bls.n	800b012 <WiFi_Conn_ND+0x1066>
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800afea:	2b00      	cmp	r3, #0
 800afec:	d011      	beq.n	800b012 <WiFi_Conn_ND+0x1066>
					{
							EnviarDatos(b);
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	f7fb fc5e 	bl	80068b0 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800affa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2200      	movs	r2, #0
 800b002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2200      	movs	r2, #0
 800b00a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800b00e:	f000 bc46 	b.w	800b89e <WiFi_Conn_ND+0x18f2>
							b->_estado_conexion=TCP_CONN_OK;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f240 2261 	movw	r2, #609	; 0x261
 800b018:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2200      	movs	r2, #0
 800b020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2200      	movs	r2, #0
 800b028:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800b02c:	f000 bc37 	b.w	800b89e <WiFi_Conn_ND+0x18f2>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b036:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800b03a:	d045      	beq.n	800b0c8 <WiFi_Conn_ND+0x111c>
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b042:	2b02      	cmp	r3, #2
 800b044:	d040      	beq.n	800b0c8 <WiFi_Conn_ND+0x111c>
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b04c:	2b0a      	cmp	r3, #10
 800b04e:	d03b      	beq.n	800b0c8 <WiFi_Conn_ND+0x111c>
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b056:	2b15      	cmp	r3, #21
 800b058:	d036      	beq.n	800b0c8 <WiFi_Conn_ND+0x111c>
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b060:	2b16      	cmp	r3, #22
 800b062:	d031      	beq.n	800b0c8 <WiFi_Conn_ND+0x111c>
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b06a:	2b17      	cmp	r3, #23
 800b06c:	d02c      	beq.n	800b0c8 <WiFi_Conn_ND+0x111c>
							{
								CrearServidorTCP(b);
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f7fb fbf2 	bl	8006858 <CrearServidorTCP>
									if(b->_enviaruart==1)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d124      	bne.n	800b0c8 <WiFi_Conn_ND+0x111c>
										{
											b->_estado=AT_ESP8266_ND(b);
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f7fb fcfc 	bl	8006a7c <AT_ESP8266_ND>
 800b084:	4602      	mov	r2, r0
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2200      	movs	r2, #0
 800b090:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d109      	bne.n	800b0b2 <WiFi_Conn_ND+0x1106>
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	4610      	mov	r0, r2
 800b0ae:	f7f6 facf 	bl	8001650 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	2364      	movs	r3, #100	; 0x64
 800b0c2:	68b8      	ldr	r0, [r7, #8]
 800b0c4:	f7fa fac8 	bl	8005658 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0ce:	2b15      	cmp	r3, #21
 800b0d0:	d004      	beq.n	800b0dc <WiFi_Conn_ND+0x1130>
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0d8:	2b17      	cmp	r3, #23
 800b0da:	d104      	bne.n	800b0e6 <WiFi_Conn_ND+0x113a>
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f240 3229 	movw	r2, #809	; 0x329
 800b0e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0ec:	2b16      	cmp	r3, #22
 800b0ee:	f040 83c5 	bne.w	800b87c <WiFi_Conn_ND+0x18d0>
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f240 3225 	movw	r2, #805	; 0x325
 800b0f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800b0fc:	e3be      	b.n	800b87c <WiFi_Conn_ND+0x18d0>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b0fe:	68f8      	ldr	r0, [r7, #12]
 800b100:	f7fb fb10 	bl	8006724 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b10a:	2b04      	cmp	r3, #4
 800b10c:	d112      	bne.n	800b134 <WiFi_Conn_ND+0x1188>
							{
								Cambiar_CWMODE(b);
 800b10e:	68f8      	ldr	r0, [r7, #12]
 800b110:	f7fb fb1e 	bl	8006750 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2264      	movs	r2, #100	; 0x64
 800b118:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2200      	movs	r2, #0
 800b120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2200      	movs	r2, #0
 800b128:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2200      	movs	r2, #0
 800b130:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b13a:	2b0a      	cmp	r3, #10
 800b13c:	d004      	beq.n	800b148 <WiFi_Conn_ND+0x119c>
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b144:	2b0d      	cmp	r3, #13
 800b146:	d10e      	bne.n	800b166 <WiFi_Conn_ND+0x11ba>
							{
								ConectarWIFI(b);
 800b148:	68f8      	ldr	r0, [r7, #12]
 800b14a:	f7fb fb17 	bl	800677c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	22c8      	movs	r2, #200	; 0xc8
 800b152:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2200      	movs	r2, #0
 800b15a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2200      	movs	r2, #0
 800b162:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	d005      	beq.n	800b17c <WiFi_Conn_ND+0x11d0>
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b176:	2b10      	cmp	r3, #16
 800b178:	f040 8382 	bne.w	800b880 <WiFi_Conn_ND+0x18d4>
							{
								ConectarTCP(b);
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f7fb fb55 	bl	800682c <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2200      	movs	r2, #0
 800b190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2200      	movs	r2, #0
 800b198:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800b19c:	e370      	b.n	800b880 <WiFi_Conn_ND+0x18d4>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800b19e:	68f8      	ldr	r0, [r7, #12]
 800b1a0:	f7fb fac0 	bl	8006724 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1aa:	2b04      	cmp	r3, #4
 800b1ac:	d112      	bne.n	800b1d4 <WiFi_Conn_ND+0x1228>
							{
								Cambiar_CWMODE(b);
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	f7fb face 	bl	8006750 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2264      	movs	r2, #100	; 0x64
 800b1b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1da:	2b0a      	cmp	r3, #10
 800b1dc:	d004      	beq.n	800b1e8 <WiFi_Conn_ND+0x123c>
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1e4:	2b0d      	cmp	r3, #13
 800b1e6:	d10e      	bne.n	800b206 <WiFi_Conn_ND+0x125a>
							{
								ConectarWIFI(b);
 800b1e8:	68f8      	ldr	r0, [r7, #12]
 800b1ea:	f7fb fac7 	bl	800677c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	22c8      	movs	r2, #200	; 0xc8
 800b1f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2200      	movs	r2, #0
 800b202:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b20c:	2b02      	cmp	r3, #2
 800b20e:	d005      	beq.n	800b21c <WiFi_Conn_ND+0x1270>
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b216:	2b10      	cmp	r3, #16
 800b218:	f040 8334 	bne.w	800b884 <WiFi_Conn_ND+0x18d8>
							{
								ConectarTCP(b);
 800b21c:	68f8      	ldr	r0, [r7, #12]
 800b21e:	f7fb fb05 	bl	800682c <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b228:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2200      	movs	r2, #0
 800b230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2200      	movs	r2, #0
 800b238:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b23c:	e322      	b.n	800b884 <WiFi_Conn_ND+0x18d8>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f7fb fa70 	bl	8006724 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b24a:	2b04      	cmp	r3, #4
 800b24c:	d112      	bne.n	800b274 <WiFi_Conn_ND+0x12c8>
							{
								Cambiar_CWMODE(b);
 800b24e:	68f8      	ldr	r0, [r7, #12]
 800b250:	f7fb fa7e 	bl	8006750 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2264      	movs	r2, #100	; 0x64
 800b258:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2200      	movs	r2, #0
 800b260:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2200      	movs	r2, #0
 800b268:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2200      	movs	r2, #0
 800b270:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b27a:	2b0a      	cmp	r3, #10
 800b27c:	d004      	beq.n	800b288 <WiFi_Conn_ND+0x12dc>
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b284:	2b0d      	cmp	r3, #13
 800b286:	d10e      	bne.n	800b2a6 <WiFi_Conn_ND+0x12fa>
							{
								ConectarWIFI(b);
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f7fb fa77 	bl	800677c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	22c8      	movs	r2, #200	; 0xc8
 800b292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2200      	movs	r2, #0
 800b29a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2ac:	2b02      	cmp	r3, #2
 800b2ae:	d005      	beq.n	800b2bc <WiFi_Conn_ND+0x1310>
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2b6:	2b10      	cmp	r3, #16
 800b2b8:	f040 82e6 	bne.w	800b888 <WiFi_Conn_ND+0x18dc>
							{
								ConectarTCP(b);
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f7fb fab5 	bl	800682c <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b2c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b2dc:	e2d4      	b.n	800b888 <WiFi_Conn_ND+0x18dc>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	f7fb fa20 	bl	8006724 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2ea:	2b04      	cmp	r3, #4
 800b2ec:	d112      	bne.n	800b314 <WiFi_Conn_ND+0x1368>
							{
								Cambiar_CWMODE(b);
 800b2ee:	68f8      	ldr	r0, [r7, #12]
 800b2f0:	f7fb fa2e 	bl	8006750 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2264      	movs	r2, #100	; 0x64
 800b2f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2200      	movs	r2, #0
 800b308:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2200      	movs	r2, #0
 800b310:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b31a:	2b0a      	cmp	r3, #10
 800b31c:	d004      	beq.n	800b328 <WiFi_Conn_ND+0x137c>
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b324:	2b0d      	cmp	r3, #13
 800b326:	d10e      	bne.n	800b346 <WiFi_Conn_ND+0x139a>
							{
								ConectarWIFI(b);
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	f7fb fa27 	bl	800677c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	22c8      	movs	r2, #200	; 0xc8
 800b332:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2200      	movs	r2, #0
 800b33a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2200      	movs	r2, #0
 800b342:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b34c:	2b02      	cmp	r3, #2
 800b34e:	d005      	beq.n	800b35c <WiFi_Conn_ND+0x13b0>
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b356:	2b10      	cmp	r3, #16
 800b358:	f040 8298 	bne.w	800b88c <WiFi_Conn_ND+0x18e0>
							{
								ConectarTCP(b);
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f7fb fa65 	bl	800682c <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b368:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2200      	movs	r2, #0
 800b370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2200      	movs	r2, #0
 800b378:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b37c:	e286      	b.n	800b88c <WiFi_Conn_ND+0x18e0>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800b37e:	68f8      	ldr	r0, [r7, #12]
 800b380:	f7fb f9d0 	bl	8006724 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2201      	movs	r2, #1
 800b388:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b392:	2b04      	cmp	r3, #4
 800b394:	d112      	bne.n	800b3bc <WiFi_Conn_ND+0x1410>
								{
									Cambiar_CWMODE(b);
 800b396:	68f8      	ldr	r0, [r7, #12]
 800b398:	f7fb f9da 	bl	8006750 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2264      	movs	r2, #100	; 0x64
 800b3a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3c2:	2b0a      	cmp	r3, #10
 800b3c4:	d004      	beq.n	800b3d0 <WiFi_Conn_ND+0x1424>
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3cc:	2b0d      	cmp	r3, #13
 800b3ce:	d10e      	bne.n	800b3ee <WiFi_Conn_ND+0x1442>
								{
									ConectarWIFI(b);
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f7fb f9d3 	bl	800677c <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	22c8      	movs	r2, #200	; 0xc8
 800b3da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3f4:	2b02      	cmp	r3, #2
 800b3f6:	d004      	beq.n	800b402 <WiFi_Conn_ND+0x1456>
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3fe:	2b10      	cmp	r3, #16
 800b400:	d10f      	bne.n	800b422 <WiFi_Conn_ND+0x1476>
								{
									ConectarTCP(b);
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	f7fb fa12 	bl	800682c <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b40e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2200      	movs	r2, #0
 800b416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b428:	2b01      	cmp	r3, #1
 800b42a:	f040 8231 	bne.w	800b890 <WiFi_Conn_ND+0x18e4>
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b434:	2b00      	cmp	r3, #0
 800b436:	f000 822b 	beq.w	800b890 <WiFi_Conn_ND+0x18e4>
								{
									EnviarDatosSRVR(b);
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	f7fb fa22 	bl	8006884 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b446:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2200      	movs	r2, #0
 800b44e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2200      	movs	r2, #0
 800b456:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800b45a:	e219      	b.n	800b890 <WiFi_Conn_ND+0x18e4>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b462:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b466:	d063      	beq.n	800b530 <WiFi_Conn_ND+0x1584>
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d05e      	beq.n	800b530 <WiFi_Conn_ND+0x1584>
							   (b->_estado!=at_wifi_disconnect)&&
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b478:	2b0a      	cmp	r3, #10
 800b47a:	d059      	beq.n	800b530 <WiFi_Conn_ND+0x1584>
							   (b->_estado!=at_wifi_connected)&&
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800b482:	2b0b      	cmp	r3, #11
 800b484:	d054      	beq.n	800b530 <WiFi_Conn_ND+0x1584>
							   (b->_estado!=at_wifi_gotip)&&
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800b48c:	2b0c      	cmp	r3, #12
 800b48e:	d04f      	beq.n	800b530 <WiFi_Conn_ND+0x1584>
							   (b->_estado!=at_tcp_desconectado)&&
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800b496:	2b10      	cmp	r3, #16
 800b498:	d04a      	beq.n	800b530 <WiFi_Conn_ND+0x1584>
							   (b->_estado!=at_tcp_snd_err)&&
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800b4a0:	2b11      	cmp	r3, #17
 800b4a2:	d045      	beq.n	800b530 <WiFi_Conn_ND+0x1584>
							   (b->_estado!=at_tcp_enviado_error)&&
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800b4aa:	2b12      	cmp	r3, #18
 800b4ac:	d040      	beq.n	800b530 <WiFi_Conn_ND+0x1584>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800b4b4:	2b13      	cmp	r3, #19
 800b4b6:	d03b      	beq.n	800b530 <WiFi_Conn_ND+0x1584>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b4be:	2b16      	cmp	r3, #22
 800b4c0:	d036      	beq.n	800b530 <WiFi_Conn_ND+0x1584>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4c8:	2b19      	cmp	r3, #25
 800b4ca:	d031      	beq.n	800b530 <WiFi_Conn_ND+0x1584>
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d02c      	beq.n	800b530 <WiFi_Conn_ND+0x1584>
								{
								EnviarDatosSRVR(b);
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f7fb f9d4 	bl	8006884 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d124      	bne.n	800b530 <WiFi_Conn_ND+0x1584>
										{
											b->_estado=AT_ESP8266_ND(b);
 800b4e6:	68f8      	ldr	r0, [r7, #12]
 800b4e8:	f7fb fac8 	bl	8006a7c <AT_ESP8266_ND>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800b502:	2b01      	cmp	r3, #1
 800b504:	d109      	bne.n	800b51a <WiFi_Conn_ND+0x156e>
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b512:	4619      	mov	r1, r3
 800b514:	4610      	mov	r0, r2
 800b516:	f7f6 f89b 	bl	8001650 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b526:	b29a      	uxth	r2, r3
 800b528:	2364      	movs	r3, #100	; 0x64
 800b52a:	68b8      	ldr	r0, [r7, #8]
 800b52c:	f7fa f894 	bl	8005658 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b536:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b53a:	d154      	bne.n	800b5e6 <WiFi_Conn_ND+0x163a>
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b542:	2b01      	cmp	r3, #1
 800b544:	d14f      	bne.n	800b5e6 <WiFi_Conn_ND+0x163a>
									   (b->_estado!=at_error)&&
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b54c:	2b02      	cmp	r3, #2
 800b54e:	d04a      	beq.n	800b5e6 <WiFi_Conn_ND+0x163a>
									   (b->_estado!=at_wifi_disconnect)&&
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800b556:	2b0a      	cmp	r3, #10
 800b558:	d045      	beq.n	800b5e6 <WiFi_Conn_ND+0x163a>
									   (b->_estado!=at_wifi_connected)&&
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800b560:	2b0b      	cmp	r3, #11
 800b562:	d040      	beq.n	800b5e6 <WiFi_Conn_ND+0x163a>
									   (b->_estado!=at_wifi_gotip)&&
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800b56a:	2b0c      	cmp	r3, #12
 800b56c:	d03b      	beq.n	800b5e6 <WiFi_Conn_ND+0x163a>
									   (b->_estado!=at_tcp_desconectado)&&
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800b574:	2b10      	cmp	r3, #16
 800b576:	d036      	beq.n	800b5e6 <WiFi_Conn_ND+0x163a>
									   (b->_estado!=at_tcp_snd_err)&&
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800b57e:	2b11      	cmp	r3, #17
 800b580:	d031      	beq.n	800b5e6 <WiFi_Conn_ND+0x163a>
									   (b->_estado!=at_tcp_enviado_error)&&
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800b588:	2b12      	cmp	r3, #18
 800b58a:	d02c      	beq.n	800b5e6 <WiFi_Conn_ND+0x163a>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800b592:	2b13      	cmp	r3, #19
 800b594:	d027      	beq.n	800b5e6 <WiFi_Conn_ND+0x163a>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b59c:	2b16      	cmp	r3, #22
 800b59e:	d022      	beq.n	800b5e6 <WiFi_Conn_ND+0x163a>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5a6:	2b19      	cmp	r3, #25
 800b5a8:	d01d      	beq.n	800b5e6 <WiFi_Conn_ND+0x163a>
										{
											b->_enviaruart=0;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d109      	bne.n	800b5d0 <WiFi_Conn_ND+0x1624>
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	4610      	mov	r0, r2
 800b5cc:	f7f6 f840 	bl	8001650 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b5dc:	b29a      	uxth	r2, r3
 800b5de:	2364      	movs	r3, #100	; 0x64
 800b5e0:	68b8      	ldr	r0, [r7, #8]
 800b5e2:	f7fa f839 	bl	8005658 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5ec:	2b13      	cmp	r3, #19
 800b5ee:	d104      	bne.n	800b5fa <WiFi_Conn_ND+0x164e>
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f240 328d 	movw	r2, #909	; 0x38d
 800b5f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b600:	2b02      	cmp	r3, #2
 800b602:	d02d      	beq.n	800b660 <WiFi_Conn_ND+0x16b4>
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b60a:	2b04      	cmp	r3, #4
 800b60c:	d028      	beq.n	800b660 <WiFi_Conn_ND+0x16b4>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b614:	2b0a      	cmp	r3, #10
 800b616:	d023      	beq.n	800b660 <WiFi_Conn_ND+0x16b4>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b61e:	2b0b      	cmp	r3, #11
 800b620:	d01e      	beq.n	800b660 <WiFi_Conn_ND+0x16b4>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b628:	2b0c      	cmp	r3, #12
 800b62a:	d019      	beq.n	800b660 <WiFi_Conn_ND+0x16b4>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b632:	2b10      	cmp	r3, #16
 800b634:	d014      	beq.n	800b660 <WiFi_Conn_ND+0x16b4>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b63c:	2b11      	cmp	r3, #17
 800b63e:	d00f      	beq.n	800b660 <WiFi_Conn_ND+0x16b4>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b646:	2b12      	cmp	r3, #18
 800b648:	d00a      	beq.n	800b660 <WiFi_Conn_ND+0x16b4>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b650:	2b16      	cmp	r3, #22
 800b652:	d005      	beq.n	800b660 <WiFi_Conn_ND+0x16b4>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b65a:	2b19      	cmp	r3, #25
 800b65c:	f040 811a 	bne.w	800b894 <WiFi_Conn_ND+0x18e8>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f240 3289 	movw	r2, #905	; 0x389
 800b666:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800b66a:	e113      	b.n	800b894 <WiFi_Conn_ND+0x18e8>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	f7fb f859 	bl	8006724 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b678:	2b04      	cmp	r3, #4
 800b67a:	d009      	beq.n	800b690 <WiFi_Conn_ND+0x16e4>
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b682:	2b0b      	cmp	r3, #11
 800b684:	d004      	beq.n	800b690 <WiFi_Conn_ND+0x16e4>
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b68c:	2b0c      	cmp	r3, #12
 800b68e:	d112      	bne.n	800b6b6 <WiFi_Conn_ND+0x170a>
							{
								Cambiar_CWMODE(b);
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f7fb f85d 	bl	8006750 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2264      	movs	r2, #100	; 0x64
 800b69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6bc:	2b0a      	cmp	r3, #10
 800b6be:	d004      	beq.n	800b6ca <WiFi_Conn_ND+0x171e>
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6c6:	2b0d      	cmp	r3, #13
 800b6c8:	d10e      	bne.n	800b6e8 <WiFi_Conn_ND+0x173c>
							{
								ConectarWIFI(b);
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f7fb f856 	bl	800677c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	22c8      	movs	r2, #200	; 0xc8
 800b6d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6ee:	2b16      	cmp	r3, #22
 800b6f0:	d10c      	bne.n	800b70c <WiFi_Conn_ND+0x1760>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f240 3225 	movw	r2, #805	; 0x325
 800b6f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2200      	movs	r2, #0
 800b708:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b712:	2b18      	cmp	r3, #24
 800b714:	d10c      	bne.n	800b730 <WiFi_Conn_ND+0x1784>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f240 3229 	movw	r2, #809	; 0x329
 800b71c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b736:	2b19      	cmp	r3, #25
 800b738:	d008      	beq.n	800b74c <WiFi_Conn_ND+0x17a0>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b740:	2b11      	cmp	r3, #17
 800b742:	d003      	beq.n	800b74c <WiFi_Conn_ND+0x17a0>
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2212      	movs	r2, #18
 800b748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b752:	2b01      	cmp	r3, #1
 800b754:	f040 80a0 	bne.w	800b898 <WiFi_Conn_ND+0x18ec>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b75e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2200      	movs	r2, #0
 800b766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2200      	movs	r2, #0
 800b76e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

							}


						}
						break;
 800b772:	e091      	b.n	800b898 <WiFi_Conn_ND+0x18ec>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b774:	68f8      	ldr	r0, [r7, #12]
 800b776:	f7fa ffd5 	bl	8006724 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b780:	2b04      	cmp	r3, #4
 800b782:	d009      	beq.n	800b798 <WiFi_Conn_ND+0x17ec>
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b78a:	2b0b      	cmp	r3, #11
 800b78c:	d004      	beq.n	800b798 <WiFi_Conn_ND+0x17ec>
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b794:	2b0c      	cmp	r3, #12
 800b796:	d112      	bne.n	800b7be <WiFi_Conn_ND+0x1812>
								{
									Cambiar_CWMODE(b);
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f7fa ffd9 	bl	8006750 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2264      	movs	r2, #100	; 0x64
 800b7a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7c4:	2b0a      	cmp	r3, #10
 800b7c6:	d004      	beq.n	800b7d2 <WiFi_Conn_ND+0x1826>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7ce:	2b0d      	cmp	r3, #13
 800b7d0:	d10e      	bne.n	800b7f0 <WiFi_Conn_ND+0x1844>
								{
									ConectarWIFI(b);
 800b7d2:	68f8      	ldr	r0, [r7, #12]
 800b7d4:	f7fa ffd2 	bl	800677c <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	22c8      	movs	r2, #200	; 0xc8
 800b7dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d004      	beq.n	800b804 <WiFi_Conn_ND+0x1858>
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b800:	2b01      	cmp	r3, #1
 800b802:	d14b      	bne.n	800b89c <WiFi_Conn_ND+0x18f0>
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d046      	beq.n	800b89c <WiFi_Conn_ND+0x18f0>
								{
									EnviarDatosSRVR(b);
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f7fb f838 	bl	8006884 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b81a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2200      	movs	r2, #0
 800b822:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2200      	movs	r2, #0
 800b82a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_new_data_rcv=0;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2200      	movs	r2, #0
 800b832:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_send_data=0;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2200      	movs	r2, #0
 800b83a:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
								}

						}
						break;
 800b83e:	e02d      	b.n	800b89c <WiFi_Conn_ND+0x18f0>
			break;
 800b840:	bf00      	nop
 800b842:	e02c      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
			break;
 800b844:	bf00      	nop
 800b846:	e02a      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
			break;
 800b848:	bf00      	nop
 800b84a:	e028      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
			break;
 800b84c:	bf00      	nop
 800b84e:	e026      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
			break;
 800b850:	bf00      	nop
 800b852:	e024      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
			break;
 800b854:	bf00      	nop
 800b856:	e022      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
			break;
 800b858:	bf00      	nop
 800b85a:	e020      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
			break;
 800b85c:	bf00      	nop
 800b85e:	e01e      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
			break;
 800b860:	bf00      	nop
 800b862:	e01c      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
			break;
 800b864:	bf00      	nop
 800b866:	e01a      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
			break;
 800b868:	bf00      	nop
 800b86a:	e018      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
			break;
 800b86c:	bf00      	nop
 800b86e:	e016      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
			break;
 800b870:	bf00      	nop
 800b872:	e014      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
			break;
 800b874:	bf00      	nop
 800b876:	e012      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
			break;
 800b878:	bf00      	nop
 800b87a:	e010      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
						break;
 800b87c:	bf00      	nop
 800b87e:	e00e      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
						break;
 800b880:	bf00      	nop
 800b882:	e00c      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
						break;
 800b884:	bf00      	nop
 800b886:	e00a      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
						break;
 800b888:	bf00      	nop
 800b88a:	e008      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
						break;
 800b88c:	bf00      	nop
 800b88e:	e006      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
						break;
 800b890:	bf00      	nop
 800b892:	e004      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
						break;
 800b894:	bf00      	nop
 800b896:	e002      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
						break;
 800b898:	bf00      	nop
 800b89a:	e000      	b.n	800b89e <WiFi_Conn_ND+0x18f2>
						break;
 800b89c:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3710      	adds	r7, #16
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <httpPOST>:

char deviceId[]={',','"','d','e','v','I','d','"',':','\0'};


httpPOST(char * endpoint, char* server_ip, char * port,uint16_t d1, uint16_t d2, uint16_t d3, uint16_t d4,uint16_t d5,uint16_t d6,uint16_t d7,uint16_t d8,uint16_t d9,uint16_t d10, uint16_t d11,uint16_t d12,uint16_t d13,uint16_t d14,uint16_t d15,uint16_t d16, uint16_t devId, char  * post, char * body, int max_char)
{
 800b8ac:	b5b0      	push	{r4, r5, r7, lr}
 800b8ae:	b0a8      	sub	sp, #160	; 0xa0
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
 800b8b8:	807b      	strh	r3, [r7, #2]
	post[0]='\0';
 800b8ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b8be:	2200      	movs	r2, #0
 800b8c0:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b8c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b8ca:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b8ce:	f7f4 fc91 	bl	80001f4 <strlen>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b8da:	4413      	add	r3, r2
 800b8dc:	4aed      	ldr	r2, [pc, #948]	; (800bc94 <httpPOST+0x3e8>)
 800b8de:	6810      	ldr	r0, [r2, #0]
 800b8e0:	6018      	str	r0, [r3, #0]
 800b8e2:	8892      	ldrh	r2, [r2, #4]
 800b8e4:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	f7f4 fc84 	bl	80001f4 <strlen>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	68f9      	ldr	r1, [r7, #12]
 800b8f2:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b8f6:	f003 fe66 	bl	800f5c6 <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b8fa:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b8fe:	f7f4 fc79 	bl	80001f4 <strlen>
 800b902:	4603      	mov	r3, r0
 800b904:	461a      	mov	r2, r3
 800b906:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b90a:	4413      	add	r3, r2
 800b90c:	49e2      	ldr	r1, [pc, #904]	; (800bc98 <httpPOST+0x3ec>)
 800b90e:	461a      	mov	r2, r3
 800b910:	460b      	mov	r3, r1
 800b912:	cb03      	ldmia	r3!, {r0, r1}
 800b914:	6010      	str	r0, [r2, #0]
 800b916:	6051      	str	r1, [r2, #4]
 800b918:	8819      	ldrh	r1, [r3, #0]
 800b91a:	789b      	ldrb	r3, [r3, #2]
 800b91c:	8111      	strh	r1, [r2, #8]
 800b91e:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b920:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b924:	f7f4 fc66 	bl	80001f4 <strlen>
 800b928:	4603      	mov	r3, r0
 800b92a:	461a      	mov	r2, r3
 800b92c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b930:	4413      	add	r3, r2
 800b932:	4ada      	ldr	r2, [pc, #872]	; (800bc9c <httpPOST+0x3f0>)
 800b934:	8811      	ldrh	r1, [r2, #0]
 800b936:	7892      	ldrb	r2, [r2, #2]
 800b938:	8019      	strh	r1, [r3, #0]
 800b93a:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b93c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b940:	f7f4 fc58 	bl	80001f4 <strlen>
 800b944:	4603      	mov	r3, r0
 800b946:	461a      	mov	r2, r3
 800b948:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b94c:	4413      	add	r3, r2
 800b94e:	4ad4      	ldr	r2, [pc, #848]	; (800bca0 <httpPOST+0x3f4>)
 800b950:	6810      	ldr	r0, [r2, #0]
 800b952:	6018      	str	r0, [r3, #0]
 800b954:	8891      	ldrh	r1, [r2, #4]
 800b956:	7992      	ldrb	r2, [r2, #6]
 800b958:	8099      	strh	r1, [r3, #4]
 800b95a:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b95c:	68b8      	ldr	r0, [r7, #8]
 800b95e:	f7f4 fc49 	bl	80001f4 <strlen>
 800b962:	4603      	mov	r3, r0
 800b964:	461a      	mov	r2, r3
 800b966:	68b9      	ldr	r1, [r7, #8]
 800b968:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b96c:	f003 fe2b 	bl	800f5c6 <strncat>
	strncat(post,":",1);
 800b970:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b974:	f7f4 fc3e 	bl	80001f4 <strlen>
 800b978:	4603      	mov	r3, r0
 800b97a:	461a      	mov	r2, r3
 800b97c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b980:	4413      	add	r3, r2
 800b982:	49c8      	ldr	r1, [pc, #800]	; (800bca4 <httpPOST+0x3f8>)
 800b984:	461a      	mov	r2, r3
 800b986:	460b      	mov	r3, r1
 800b988:	881b      	ldrh	r3, [r3, #0]
 800b98a:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f7f4 fc31 	bl	80001f4 <strlen>
 800b992:	4603      	mov	r3, r0
 800b994:	461a      	mov	r2, r3
 800b996:	6879      	ldr	r1, [r7, #4]
 800b998:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b99c:	f003 fe13 	bl	800f5c6 <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b9a0:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b9a4:	f7f4 fc26 	bl	80001f4 <strlen>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b9b0:	4413      	add	r3, r2
 800b9b2:	4aba      	ldr	r2, [pc, #744]	; (800bc9c <httpPOST+0x3f0>)
 800b9b4:	8811      	ldrh	r1, [r2, #0]
 800b9b6:	7892      	ldrb	r2, [r2, #2]
 800b9b8:	8019      	strh	r1, [r3, #0]
 800b9ba:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b9bc:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b9c0:	f7f4 fc18 	bl	80001f4 <strlen>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b9cc:	4413      	add	r3, r2
 800b9ce:	4ab6      	ldr	r2, [pc, #728]	; (800bca8 <httpPOST+0x3fc>)
 800b9d0:	461d      	mov	r5, r3
 800b9d2:	4614      	mov	r4, r2
 800b9d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b9d6:	6028      	str	r0, [r5, #0]
 800b9d8:	6069      	str	r1, [r5, #4]
 800b9da:	60aa      	str	r2, [r5, #8]
 800b9dc:	60eb      	str	r3, [r5, #12]
 800b9de:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b9e0:	6128      	str	r0, [r5, #16]
 800b9e2:	6169      	str	r1, [r5, #20]
 800b9e4:	61aa      	str	r2, [r5, #24]
 800b9e6:	8823      	ldrh	r3, [r4, #0]
 800b9e8:	78a2      	ldrb	r2, [r4, #2]
 800b9ea:	83ab      	strh	r3, [r5, #28]
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b9f0:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b9f4:	f7f4 fbfe 	bl	80001f4 <strlen>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ba00:	4413      	add	r3, r2
 800ba02:	4aa6      	ldr	r2, [pc, #664]	; (800bc9c <httpPOST+0x3f0>)
 800ba04:	8811      	ldrh	r1, [r2, #0]
 800ba06:	7892      	ldrb	r2, [r2, #2]
 800ba08:	8019      	strh	r1, [r3, #0]
 800ba0a:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800ba0c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800ba10:	f7f4 fbf0 	bl	80001f4 <strlen>
 800ba14:	4603      	mov	r3, r0
 800ba16:	461a      	mov	r2, r3
 800ba18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ba1c:	4413      	add	r3, r2
 800ba1e:	4aa3      	ldr	r2, [pc, #652]	; (800bcac <httpPOST+0x400>)
 800ba20:	461c      	mov	r4, r3
 800ba22:	4615      	mov	r5, r2
 800ba24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba26:	6020      	str	r0, [r4, #0]
 800ba28:	6061      	str	r1, [r4, #4]
 800ba2a:	60a2      	str	r2, [r4, #8]
 800ba2c:	60e3      	str	r3, [r4, #12]


	// Conversión de datos recibido por ModBUS
	char _d1[8];
	_d1[0]='\0';
 800ba2e:	2300      	movs	r3, #0
 800ba30:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	INTOA( d1, _d1);//FTOA( d1,_d1,2);
 800ba34:	887b      	ldrh	r3, [r7, #2]
 800ba36:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800ba3a:	4611      	mov	r1, r2
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f003 fb3b 	bl	800f0b8 <INTOA>

	char _d2[8];
	_d2[0]='\0';
 800ba42:	2300      	movs	r3, #0
 800ba44:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	INTOA( d2, _d2);//FTOA( d2, _d2,2);//INTOA( dp_filtro, _filtro);//
 800ba48:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800ba4c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800ba50:	4611      	mov	r1, r2
 800ba52:	4618      	mov	r0, r3
 800ba54:	f003 fb30 	bl	800f0b8 <INTOA>

	char _d3[8];
	_d3[0]='\0';
 800ba58:	2300      	movs	r3, #0
 800ba5a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	INTOA( d3, _d3);//FTOA( d3, _d3,2);
 800ba5e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800ba62:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800ba66:	4611      	mov	r1, r2
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f003 fb25 	bl	800f0b8 <INTOA>

	char _d4[8];
	_d4[0]='\0';
 800ba6e:	2300      	movs	r3, #0
 800ba70:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	INTOA( d4, _d4);//FTOA( d4, _d4,2);
 800ba74:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800ba78:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800ba7c:	4611      	mov	r1, r2
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f003 fb1a 	bl	800f0b8 <INTOA>

	char _d5[8];
	_d5[0]='\0';
 800ba84:	2300      	movs	r3, #0
 800ba86:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	INTOA( d5, _d5);//FTOA( d5, _d5,2);
 800ba8a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800ba8e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800ba92:	4611      	mov	r1, r2
 800ba94:	4618      	mov	r0, r3
 800ba96:	f003 fb0f 	bl	800f0b8 <INTOA>

	char _d6[8];
	_d6[0]='\0';
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	INTOA( d6, _d6);//INTOA( d6, _d6);
 800baa0:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800baa4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800baa8:	4611      	mov	r1, r2
 800baaa:	4618      	mov	r0, r3
 800baac:	f003 fb04 	bl	800f0b8 <INTOA>

	char _d7[8];
	_d7[0]='\0';
 800bab0:	2300      	movs	r3, #0
 800bab2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	INTOA( d7, _d7);//FTOA( d7, _d7,2);
 800bab6:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800baba:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800babe:	4611      	mov	r1, r2
 800bac0:	4618      	mov	r0, r3
 800bac2:	f003 faf9 	bl	800f0b8 <INTOA>

	char _d8[8];
	_d8[0]='\0';
 800bac6:	2300      	movs	r3, #0
 800bac8:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	INTOA( d8, _d8);//FTOA( d8, _d8,2);
 800bacc:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800bad0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800bad4:	4611      	mov	r1, r2
 800bad6:	4618      	mov	r0, r3
 800bad8:	f003 faee 	bl	800f0b8 <INTOA>

	char _d9[8];
	_d9[0]='\0';
 800badc:	2300      	movs	r3, #0
 800bade:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	INTOA( d9, _d9);//FTOA( d9, _d9,2);
 800bae2:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800bae6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800baea:	4611      	mov	r1, r2
 800baec:	4618      	mov	r0, r3
 800baee:	f003 fae3 	bl	800f0b8 <INTOA>

	char _d10[8];
	_d10[0]='\0';
 800baf2:	2300      	movs	r3, #0
 800baf4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	INTOA( d10, _d10);//FTOA( d10, _d10,2);
 800baf8:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800bafc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800bb00:	4611      	mov	r1, r2
 800bb02:	4618      	mov	r0, r3
 800bb04:	f003 fad8 	bl	800f0b8 <INTOA>

	char _d11[8];
	_d11[0]='\0';
 800bb08:	2300      	movs	r3, #0
 800bb0a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	INTOA( d11, _d11);//FTOA( d11, _d11,2);
 800bb0e:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800bb12:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800bb16:	4611      	mov	r1, r2
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f003 facd 	bl	800f0b8 <INTOA>

	char _d12[8];
	_d12[0]='\0';
 800bb1e:	2300      	movs	r3, #0
 800bb20:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	INTOA( d12, _d12);//FTOA( d11, _d11,2);
 800bb24:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800bb28:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bb2c:	4611      	mov	r1, r2
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f003 fac2 	bl	800f0b8 <INTOA>

	char _d13[8];
	_d13[0]='\0';
 800bb34:	2300      	movs	r3, #0
 800bb36:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	INTOA( d13, _d13);//FTOA( d11, _d11,2);
 800bb3a:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800bb3e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800bb42:	4611      	mov	r1, r2
 800bb44:	4618      	mov	r0, r3
 800bb46:	f003 fab7 	bl	800f0b8 <INTOA>

	char _d14[8];
	_d14[0]='\0';
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	INTOA( d14, _d14);//FTOA( d11, _d11,2);
 800bb50:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800bb54:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bb58:	4611      	mov	r1, r2
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f003 faac 	bl	800f0b8 <INTOA>

	char _d15[8];
	_d15[0]='\0';
 800bb60:	2300      	movs	r3, #0
 800bb62:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	INTOA( d15, _d15);//FTOA( d11, _d11,2);
 800bb66:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 800bb6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bb6e:	4611      	mov	r1, r2
 800bb70:	4618      	mov	r0, r3
 800bb72:	f003 faa1 	bl	800f0b8 <INTOA>

	char _d16[8];
	_d16[0]='\0';
 800bb76:	2300      	movs	r3, #0
 800bb78:	f887 3020 	strb.w	r3, [r7, #32]
	INTOA( d16, _d16);//FTOA( d11, _d11,2);
 800bb7c:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800bb80:	f107 0220 	add.w	r2, r7, #32
 800bb84:	4611      	mov	r1, r2
 800bb86:	4618      	mov	r0, r3
 800bb88:	f003 fa96 	bl	800f0b8 <INTOA>

	char _devId[8];
	_devId[0]='\0';
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	763b      	strb	r3, [r7, #24]
	INTOA(devId, _devId);
 800bb90:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 800bb94:	f107 0218 	add.w	r2, r7, #24
 800bb98:	4611      	mov	r1, r2
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f003 fa8c 	bl	800f0b8 <INTOA>

	strncat(body,dd1,strlen(dd1));
 800bba0:	4843      	ldr	r0, [pc, #268]	; (800bcb0 <httpPOST+0x404>)
 800bba2:	f7f4 fb27 	bl	80001f4 <strlen>
 800bba6:	4603      	mov	r3, r0
 800bba8:	461a      	mov	r2, r3
 800bbaa:	4941      	ldr	r1, [pc, #260]	; (800bcb0 <httpPOST+0x404>)
 800bbac:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bbb0:	f003 fd09 	bl	800f5c6 <strncat>
	strncat(body,_d1,strlen(_d1));
 800bbb4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7f4 fb1b 	bl	80001f4 <strlen>
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bbca:	f003 fcfc 	bl	800f5c6 <strncat>

	strncat(body,dd2,strlen(dd2));
 800bbce:	4839      	ldr	r0, [pc, #228]	; (800bcb4 <httpPOST+0x408>)
 800bbd0:	f7f4 fb10 	bl	80001f4 <strlen>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	4936      	ldr	r1, [pc, #216]	; (800bcb4 <httpPOST+0x408>)
 800bbda:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bbde:	f003 fcf2 	bl	800f5c6 <strncat>
	strncat(body,_d2,strlen(_d2));
 800bbe2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7f4 fb04 	bl	80001f4 <strlen>
 800bbec:	4602      	mov	r2, r0
 800bbee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bbf8:	f003 fce5 	bl	800f5c6 <strncat>

	strncat(body,dd3,strlen(dd3));
 800bbfc:	482e      	ldr	r0, [pc, #184]	; (800bcb8 <httpPOST+0x40c>)
 800bbfe:	f7f4 faf9 	bl	80001f4 <strlen>
 800bc02:	4603      	mov	r3, r0
 800bc04:	461a      	mov	r2, r3
 800bc06:	492c      	ldr	r1, [pc, #176]	; (800bcb8 <httpPOST+0x40c>)
 800bc08:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bc0c:	f003 fcdb 	bl	800f5c6 <strncat>
	strncat(body,_d3,strlen(_d3));
 800bc10:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7f4 faed 	bl	80001f4 <strlen>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bc20:	4619      	mov	r1, r3
 800bc22:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bc26:	f003 fcce 	bl	800f5c6 <strncat>

	strncat(body,dd4,strlen(dd4));
 800bc2a:	4824      	ldr	r0, [pc, #144]	; (800bcbc <httpPOST+0x410>)
 800bc2c:	f7f4 fae2 	bl	80001f4 <strlen>
 800bc30:	4603      	mov	r3, r0
 800bc32:	461a      	mov	r2, r3
 800bc34:	4921      	ldr	r1, [pc, #132]	; (800bcbc <httpPOST+0x410>)
 800bc36:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bc3a:	f003 fcc4 	bl	800f5c6 <strncat>
	strncat(body,_d4,strlen(_d4));
 800bc3e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7f4 fad6 	bl	80001f4 <strlen>
 800bc48:	4602      	mov	r2, r0
 800bc4a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800bc4e:	4619      	mov	r1, r3
 800bc50:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bc54:	f003 fcb7 	bl	800f5c6 <strncat>

	strncat(body,dd5,strlen(dd5));
 800bc58:	4819      	ldr	r0, [pc, #100]	; (800bcc0 <httpPOST+0x414>)
 800bc5a:	f7f4 facb 	bl	80001f4 <strlen>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	461a      	mov	r2, r3
 800bc62:	4917      	ldr	r1, [pc, #92]	; (800bcc0 <httpPOST+0x414>)
 800bc64:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bc68:	f003 fcad 	bl	800f5c6 <strncat>
	strncat(body,_d5,strlen(_d5));
 800bc6c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7f4 fabf 	bl	80001f4 <strlen>
 800bc76:	4602      	mov	r2, r0
 800bc78:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bc82:	f003 fca0 	bl	800f5c6 <strncat>

	strncat(body,dd6,strlen(dd6));
 800bc86:	480f      	ldr	r0, [pc, #60]	; (800bcc4 <httpPOST+0x418>)
 800bc88:	f7f4 fab4 	bl	80001f4 <strlen>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	461a      	mov	r2, r3
 800bc90:	e01a      	b.n	800bcc8 <httpPOST+0x41c>
 800bc92:	bf00      	nop
 800bc94:	08010c28 	.word	0x08010c28
 800bc98:	08010c30 	.word	0x08010c30
 800bc9c:	08010c3c 	.word	0x08010c3c
 800bca0:	08010c40 	.word	0x08010c40
 800bca4:	08010c48 	.word	0x08010c48
 800bca8:	08010c4c 	.word	0x08010c4c
 800bcac:	08010c6c 	.word	0x08010c6c
 800bcb0:	20000090 	.word	0x20000090
 800bcb4:	20000098 	.word	0x20000098
 800bcb8:	200000a0 	.word	0x200000a0
 800bcbc:	200000a8 	.word	0x200000a8
 800bcc0:	200000b0 	.word	0x200000b0
 800bcc4:	200000b8 	.word	0x200000b8
 800bcc8:	49af      	ldr	r1, [pc, #700]	; (800bf88 <httpPOST+0x6dc>)
 800bcca:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bcce:	f003 fc7a 	bl	800f5c6 <strncat>
	strncat(body,_d6,strlen(_d6));
 800bcd2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7f4 fa8c 	bl	80001f4 <strlen>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800bce2:	4619      	mov	r1, r3
 800bce4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bce8:	f003 fc6d 	bl	800f5c6 <strncat>

	strncat(body,dd7,strlen(dd7));
 800bcec:	48a7      	ldr	r0, [pc, #668]	; (800bf8c <httpPOST+0x6e0>)
 800bcee:	f7f4 fa81 	bl	80001f4 <strlen>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	49a5      	ldr	r1, [pc, #660]	; (800bf8c <httpPOST+0x6e0>)
 800bcf8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bcfc:	f003 fc63 	bl	800f5c6 <strncat>
	strncat(body,_d7,strlen(_d7));
 800bd00:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7f4 fa75 	bl	80001f4 <strlen>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800bd10:	4619      	mov	r1, r3
 800bd12:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd16:	f003 fc56 	bl	800f5c6 <strncat>

	strncat(body,dd8,strlen(dd8));
 800bd1a:	489d      	ldr	r0, [pc, #628]	; (800bf90 <httpPOST+0x6e4>)
 800bd1c:	f7f4 fa6a 	bl	80001f4 <strlen>
 800bd20:	4603      	mov	r3, r0
 800bd22:	461a      	mov	r2, r3
 800bd24:	499a      	ldr	r1, [pc, #616]	; (800bf90 <httpPOST+0x6e4>)
 800bd26:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd2a:	f003 fc4c 	bl	800f5c6 <strncat>
	strncat(body,_d8,strlen(_d8));
 800bd2e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7f4 fa5e 	bl	80001f4 <strlen>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bd3e:	4619      	mov	r1, r3
 800bd40:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd44:	f003 fc3f 	bl	800f5c6 <strncat>

	strncat(body,dd9,strlen(dd9));
 800bd48:	4892      	ldr	r0, [pc, #584]	; (800bf94 <httpPOST+0x6e8>)
 800bd4a:	f7f4 fa53 	bl	80001f4 <strlen>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	461a      	mov	r2, r3
 800bd52:	4990      	ldr	r1, [pc, #576]	; (800bf94 <httpPOST+0x6e8>)
 800bd54:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd58:	f003 fc35 	bl	800f5c6 <strncat>
	strncat(body,_d9,strlen(_d9));
 800bd5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7f4 fa47 	bl	80001f4 <strlen>
 800bd66:	4602      	mov	r2, r0
 800bd68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd72:	f003 fc28 	bl	800f5c6 <strncat>

	strncat(body,dd10,strlen(dd10));
 800bd76:	4888      	ldr	r0, [pc, #544]	; (800bf98 <httpPOST+0x6ec>)
 800bd78:	f7f4 fa3c 	bl	80001f4 <strlen>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	461a      	mov	r2, r3
 800bd80:	4985      	ldr	r1, [pc, #532]	; (800bf98 <httpPOST+0x6ec>)
 800bd82:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bd86:	f003 fc1e 	bl	800f5c6 <strncat>
	strncat(body,_d10,strlen(_d10));
 800bd8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7f4 fa30 	bl	80001f4 <strlen>
 800bd94:	4602      	mov	r2, r0
 800bd96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bda0:	f003 fc11 	bl	800f5c6 <strncat>

	strncat(body,dd11,strlen(dd11));
 800bda4:	487d      	ldr	r0, [pc, #500]	; (800bf9c <httpPOST+0x6f0>)
 800bda6:	f7f4 fa25 	bl	80001f4 <strlen>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	461a      	mov	r2, r3
 800bdae:	497b      	ldr	r1, [pc, #492]	; (800bf9c <httpPOST+0x6f0>)
 800bdb0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bdb4:	f003 fc07 	bl	800f5c6 <strncat>
	strncat(body,_d11,strlen(_d11));
 800bdb8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7f4 fa19 	bl	80001f4 <strlen>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bdc8:	4619      	mov	r1, r3
 800bdca:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bdce:	f003 fbfa 	bl	800f5c6 <strncat>

	strncat(body,dd12,strlen(dd12));
 800bdd2:	4873      	ldr	r0, [pc, #460]	; (800bfa0 <httpPOST+0x6f4>)
 800bdd4:	f7f4 fa0e 	bl	80001f4 <strlen>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	461a      	mov	r2, r3
 800bddc:	4970      	ldr	r1, [pc, #448]	; (800bfa0 <httpPOST+0x6f4>)
 800bdde:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bde2:	f003 fbf0 	bl	800f5c6 <strncat>
	strncat(body,_d12,strlen(_d12));
 800bde6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7f4 fa02 	bl	80001f4 <strlen>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bdfc:	f003 fbe3 	bl	800f5c6 <strncat>

	strncat(body,dd13,strlen(dd13));
 800be00:	4868      	ldr	r0, [pc, #416]	; (800bfa4 <httpPOST+0x6f8>)
 800be02:	f7f4 f9f7 	bl	80001f4 <strlen>
 800be06:	4603      	mov	r3, r0
 800be08:	461a      	mov	r2, r3
 800be0a:	4966      	ldr	r1, [pc, #408]	; (800bfa4 <httpPOST+0x6f8>)
 800be0c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be10:	f003 fbd9 	bl	800f5c6 <strncat>
	strncat(body,_d13,strlen(_d13));
 800be14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800be18:	4618      	mov	r0, r3
 800be1a:	f7f4 f9eb 	bl	80001f4 <strlen>
 800be1e:	4602      	mov	r2, r0
 800be20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800be24:	4619      	mov	r1, r3
 800be26:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be2a:	f003 fbcc 	bl	800f5c6 <strncat>

	strncat(body,dd14,strlen(dd14));
 800be2e:	485e      	ldr	r0, [pc, #376]	; (800bfa8 <httpPOST+0x6fc>)
 800be30:	f7f4 f9e0 	bl	80001f4 <strlen>
 800be34:	4603      	mov	r3, r0
 800be36:	461a      	mov	r2, r3
 800be38:	495b      	ldr	r1, [pc, #364]	; (800bfa8 <httpPOST+0x6fc>)
 800be3a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be3e:	f003 fbc2 	bl	800f5c6 <strncat>
	strncat(body,_d14,strlen(_d14));
 800be42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800be46:	4618      	mov	r0, r3
 800be48:	f7f4 f9d4 	bl	80001f4 <strlen>
 800be4c:	4602      	mov	r2, r0
 800be4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800be52:	4619      	mov	r1, r3
 800be54:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be58:	f003 fbb5 	bl	800f5c6 <strncat>

	strncat(body,dd15,strlen(dd15));
 800be5c:	4853      	ldr	r0, [pc, #332]	; (800bfac <httpPOST+0x700>)
 800be5e:	f7f4 f9c9 	bl	80001f4 <strlen>
 800be62:	4603      	mov	r3, r0
 800be64:	461a      	mov	r2, r3
 800be66:	4951      	ldr	r1, [pc, #324]	; (800bfac <httpPOST+0x700>)
 800be68:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be6c:	f003 fbab 	bl	800f5c6 <strncat>
	strncat(body,_d15,strlen(_d15));
 800be70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be74:	4618      	mov	r0, r3
 800be76:	f7f4 f9bd 	bl	80001f4 <strlen>
 800be7a:	4602      	mov	r2, r0
 800be7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be80:	4619      	mov	r1, r3
 800be82:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be86:	f003 fb9e 	bl	800f5c6 <strncat>

	strncat(body,dd16,strlen(dd16));
 800be8a:	4849      	ldr	r0, [pc, #292]	; (800bfb0 <httpPOST+0x704>)
 800be8c:	f7f4 f9b2 	bl	80001f4 <strlen>
 800be90:	4603      	mov	r3, r0
 800be92:	461a      	mov	r2, r3
 800be94:	4946      	ldr	r1, [pc, #280]	; (800bfb0 <httpPOST+0x704>)
 800be96:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800be9a:	f003 fb94 	bl	800f5c6 <strncat>
	strncat(body,_d16,strlen(_d16));
 800be9e:	f107 0320 	add.w	r3, r7, #32
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7f4 f9a6 	bl	80001f4 <strlen>
 800bea8:	4602      	mov	r2, r0
 800beaa:	f107 0320 	add.w	r3, r7, #32
 800beae:	4619      	mov	r1, r3
 800beb0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800beb4:	f003 fb87 	bl	800f5c6 <strncat>

	strncat(body,deviceId,strlen(deviceId));
 800beb8:	483e      	ldr	r0, [pc, #248]	; (800bfb4 <httpPOST+0x708>)
 800beba:	f7f4 f99b 	bl	80001f4 <strlen>
 800bebe:	4603      	mov	r3, r0
 800bec0:	461a      	mov	r2, r3
 800bec2:	493c      	ldr	r1, [pc, #240]	; (800bfb4 <httpPOST+0x708>)
 800bec4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bec8:	f003 fb7d 	bl	800f5c6 <strncat>
	strncat(body,_devId,strlen(_devId));
 800becc:	f107 0318 	add.w	r3, r7, #24
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7f4 f98f 	bl	80001f4 <strlen>
 800bed6:	4602      	mov	r2, r0
 800bed8:	f107 0318 	add.w	r3, r7, #24
 800bedc:	4619      	mov	r1, r3
 800bede:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bee2:	f003 fb70 	bl	800f5c6 <strncat>

	strncat(body,"}",strlen("}"));
 800bee6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800beea:	f7f4 f983 	bl	80001f4 <strlen>
 800beee:	4603      	mov	r3, r0
 800bef0:	461a      	mov	r2, r3
 800bef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bef6:	4413      	add	r3, r2
 800bef8:	492f      	ldr	r1, [pc, #188]	; (800bfb8 <httpPOST+0x70c>)
 800befa:	461a      	mov	r2, r3
 800befc:	460b      	mov	r3, r1
 800befe:	881b      	ldrh	r3, [r3, #0]
 800bf00:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800bf02:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bf06:	f7f4 f975 	bl	80001f4 <strlen>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	f107 0310 	add.w	r3, r7, #16
 800bf10:	4619      	mov	r1, r3
 800bf12:	4610      	mov	r0, r2
 800bf14:	f003 f8d0 	bl	800f0b8 <INTOA>
	strncat(post,length,strlen(length));
 800bf18:	f107 0310 	add.w	r3, r7, #16
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7f4 f969 	bl	80001f4 <strlen>
 800bf22:	4602      	mov	r2, r0
 800bf24:	f107 0310 	add.w	r3, r7, #16
 800bf28:	4619      	mov	r1, r3
 800bf2a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bf2e:	f003 fb4a 	bl	800f5c6 <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800bf32:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bf36:	f7f4 f95d 	bl	80001f4 <strlen>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf42:	4413      	add	r3, r2
 800bf44:	4a1d      	ldr	r2, [pc, #116]	; (800bfbc <httpPOST+0x710>)
 800bf46:	6810      	ldr	r0, [r2, #0]
 800bf48:	6018      	str	r0, [r3, #0]
 800bf4a:	7912      	ldrb	r2, [r2, #4]
 800bf4c:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800bf4e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bf52:	f7f4 f94f 	bl	80001f4 <strlen>
 800bf56:	4602      	mov	r2, r0
 800bf58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d20d      	bcs.n	800bf7c <httpPOST+0x6d0>
	{
		strncat(post,body,strlen(body));
 800bf60:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bf64:	f7f4 f946 	bl	80001f4 <strlen>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800bf70:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bf74:	f003 fb27 	bl	800f5c6 <strncat>
		return 1 ;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e000      	b.n	800bf7e <httpPOST+0x6d2>
	}
		else
		{
			return 0;
 800bf7c:	2300      	movs	r3, #0
		}
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	37a0      	adds	r7, #160	; 0xa0
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bdb0      	pop	{r4, r5, r7, pc}
 800bf86:	bf00      	nop
 800bf88:	200000b8 	.word	0x200000b8
 800bf8c:	200000c0 	.word	0x200000c0
 800bf90:	200000c8 	.word	0x200000c8
 800bf94:	200000d0 	.word	0x200000d0
 800bf98:	200000d8 	.word	0x200000d8
 800bf9c:	200000e0 	.word	0x200000e0
 800bfa0:	200000e8 	.word	0x200000e8
 800bfa4:	200000f0 	.word	0x200000f0
 800bfa8:	200000f8 	.word	0x200000f8
 800bfac:	20000100 	.word	0x20000100
 800bfb0:	20000108 	.word	0x20000108
 800bfb4:	20000110 	.word	0x20000110
 800bfb8:	08010c7c 	.word	0x08010c7c
 800bfbc:	08010c80 	.word	0x08010c80

0800bfc0 <LoRa_Send>:
#include "RYLR896.h"
#include "string.h"
#include "STR_Chelo.h"

int LoRa_Send(struct LoRa *a, UART_HandleTypeDef * SERIAL)
{
 800bfc0:	b5b0      	push	{r4, r5, r7, lr}
 800bfc2:	b086      	sub	sp, #24
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]

	char items[4];

	if(a->txitems > 241)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800bfd0:	2bf1      	cmp	r3, #241	; 0xf1
 800bfd2:	dd01      	ble.n	800bfd8 <LoRa_Send+0x18>
	{
		return ERROR_BUFFER_SIZE;
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	e099      	b.n	800c10c <LoRa_Send+0x14c>
	}
	else
	{

		items[0]='\0';
 800bfd8:	2300      	movs	r3, #0
 800bfda:	723b      	strb	r3, [r7, #8]
		itoa(a->txitems, items,10);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800bfe2:	f107 0108 	add.w	r1, r7, #8
 800bfe6:	220a      	movs	r2, #10
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f003 f900 	bl	800f1ee <itoa>
		a->txbuff2SND[0]='\0'; 													//Borro el vector
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2200      	movs	r2, #0
 800bff2:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		strncat(a->txbuff2SND,"AT+SEND=",strlen("AT+SEND="));					//AT+SEND=
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bffc:	4620      	mov	r0, r4
 800bffe:	f7f4 f8f9 	bl	80001f4 <strlen>
 800c002:	4603      	mov	r3, r0
 800c004:	4423      	add	r3, r4
 800c006:	4943      	ldr	r1, [pc, #268]	; (800c114 <LoRa_Send+0x154>)
 800c008:	461a      	mov	r2, r3
 800c00a:	460b      	mov	r3, r1
 800c00c:	cb03      	ldmia	r3!, {r0, r1}
 800c00e:	6010      	str	r0, [r2, #0]
 800c010:	6051      	str	r1, [r2, #4]
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	7213      	strb	r3, [r2, #8]
		strncat(a->txbuff2SND,a->dest_address,strlen(a->dest_address));			//AT+SEND=1
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f103 0516 	add.w	r5, r3, #22
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	3316      	adds	r3, #22
 800c026:	4618      	mov	r0, r3
 800c028:	f7f4 f8e4 	bl	80001f4 <strlen>
 800c02c:	4603      	mov	r3, r0
 800c02e:	461a      	mov	r2, r3
 800c030:	4629      	mov	r1, r5
 800c032:	4620      	mov	r0, r4
 800c034:	f003 fac7 	bl	800f5c6 <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c03e:	4620      	mov	r0, r4
 800c040:	f7f4 f8d8 	bl	80001f4 <strlen>
 800c044:	4603      	mov	r3, r0
 800c046:	4423      	add	r3, r4
 800c048:	4933      	ldr	r1, [pc, #204]	; (800c118 <LoRa_Send+0x158>)
 800c04a:	461a      	mov	r2, r3
 800c04c:	460b      	mov	r3, r1
 800c04e:	881b      	ldrh	r3, [r3, #0]
 800c050:	8013      	strh	r3, [r2, #0]
		strncat(a->txbuff2SND,items,strlen(items));								//AT+SEND=1,4
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c058:	f107 0308 	add.w	r3, r7, #8
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7f4 f8c9 	bl	80001f4 <strlen>
 800c062:	4602      	mov	r2, r0
 800c064:	f107 0308 	add.w	r3, r7, #8
 800c068:	4619      	mov	r1, r3
 800c06a:	4620      	mov	r0, r4
 800c06c:	f003 faab 	bl	800f5c6 <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,4,
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800c076:	4620      	mov	r0, r4
 800c078:	f7f4 f8bc 	bl	80001f4 <strlen>
 800c07c:	4603      	mov	r3, r0
 800c07e:	4423      	add	r3, r4
 800c080:	4925      	ldr	r1, [pc, #148]	; (800c118 <LoRa_Send+0x158>)
 800c082:	461a      	mov	r2, r3
 800c084:	460b      	mov	r3, r1
 800c086:	881b      	ldrh	r3, [r3, #0]
 800c088:	8013      	strh	r3, [r2, #0]

		int la=strlen(a->txbuff2SND);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800c090:	4618      	mov	r0, r3
 800c092:	f7f4 f8af 	bl	80001f4 <strlen>
 800c096:	4603      	mov	r3, r0
 800c098:	617b      	str	r3, [r7, #20]
		int lb=la+a->txitems;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800c0a0:	697a      	ldr	r2, [r7, #20]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	60fb      	str	r3, [r7, #12]
		int lc=0;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800c0aa:	e012      	b.n	800c0d2 <LoRa_Send+0x112>
		{
			a->txbuff2SND[la]=a->txbuff[lc];
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 800c0b6:	7819      	ldrb	r1, [r3, #0]
 800c0b8:	687a      	ldr	r2, [r7, #4]
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	4413      	add	r3, r2
 800c0be:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800c0c2:	460a      	mov	r2, r1
 800c0c4:	701a      	strb	r2, [r3, #0]
			la++;
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	617b      	str	r3, [r7, #20]
			lc++;
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800c0d2:	697a      	ldr	r2, [r7, #20]
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	dbe8      	blt.n	800c0ac <LoRa_Send+0xec>
		}
		a->txbuff2SND[la++]='\r';
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	1c5a      	adds	r2, r3, #1
 800c0de:	617a      	str	r2, [r7, #20]
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	4413      	add	r3, r2
 800c0e4:	220d      	movs	r2, #13
 800c0e6:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		a->txbuff2SND[la++]='\n';
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	1c5a      	adds	r2, r3, #1
 800c0ee:	617a      	str	r2, [r7, #20]
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	4413      	add	r3, r2
 800c0f4:	220a      	movs	r2, #10
 800c0f6:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		HAL_UART_Transmit_IT(SERIAL, a->txbuff2SND, la);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800c100:	697a      	ldr	r2, [r7, #20]
 800c102:	b292      	uxth	r2, r2
 800c104:	4619      	mov	r1, r3
 800c106:	6838      	ldr	r0, [r7, #0]
 800c108:	f7f9 fb38 	bl	800577c <HAL_UART_Transmit_IT>
	}

}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3718      	adds	r7, #24
 800c110:	46bd      	mov	sp, r7
 800c112:	bdb0      	pop	{r4, r5, r7, pc}
 800c114:	08010c88 	.word	0x08010c88
 800c118:	08010c94 	.word	0x08010c94

0800c11c <LoRa_reset_sndTIMER>:
		a->tmr_dly_en=1;
		a->tmr_dlyCNT=0;
 }

void LoRa_reset_sndTIMER(struct LoRa *a,int msec)
 {
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
	 	a->tmr_dly_ON=0;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
		a->tmr_dly=msec;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	683a      	ldr	r2, [r7, #0]
 800c132:	f8c3 27f0 	str.w	r2, [r3, #2032]	; 0x7f0
		a->tmr_dly_en=0;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2200      	movs	r2, #0
 800c13a:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		a->tmr_dlyCNT=0;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2200      	movs	r2, #0
 800c142:	f8c3 27f4 	str.w	r2, [r3, #2036]	; 0x7f4
 }
 800c146:	bf00      	nop
 800c148:	370c      	adds	r7, #12
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr
	...

0800c154 <LoRa_decode>:
		break;
	}
}

void LoRa_decode(struct LoRa *b)
 {
 800c154:	b580      	push	{r7, lr}
 800c156:	b086      	sub	sp, #24
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
	switch (Lora_idSTR(b))
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f000 fa25 	bl	800c5ac <Lora_idSTR>
 800c162:	4603      	mov	r3, r0
 800c164:	2b10      	cmp	r3, #16
 800c166:	f200 820c 	bhi.w	800c582 <LoRa_decode+0x42e>
 800c16a:	a201      	add	r2, pc, #4	; (adr r2, 800c170 <LoRa_decode+0x1c>)
 800c16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c170:	0800c1b5 	.word	0x0800c1b5
 800c174:	0800c28d 	.word	0x0800c28d
 800c178:	0800c4c1 	.word	0x0800c4c1
 800c17c:	0800c4cb 	.word	0x0800c4cb
 800c180:	0800c4d5 	.word	0x0800c4d5
 800c184:	0800c4df 	.word	0x0800c4df
 800c188:	0800c4e9 	.word	0x0800c4e9
 800c18c:	0800c4f3 	.word	0x0800c4f3
 800c190:	0800c4fd 	.word	0x0800c4fd
 800c194:	0800c507 	.word	0x0800c507
 800c198:	0800c511 	.word	0x0800c511
 800c19c:	0800c551 	.word	0x0800c551
 800c1a0:	0800c55b 	.word	0x0800c55b
 800c1a4:	0800c56f 	.word	0x0800c56f
 800c1a8:	0800c565 	.word	0x0800c565
 800c1ac:	0800c4b7 	.word	0x0800c4b7
 800c1b0:	0800c579 	.word	0x0800c579
	{
		case _OK:
		{
			switch(b->estado)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	2b13      	cmp	r3, #19
 800c1be:	d860      	bhi.n	800c282 <LoRa_decode+0x12e>
 800c1c0:	a201      	add	r2, pc, #4	; (adr r2, 800c1c8 <LoRa_decode+0x74>)
 800c1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c6:	bf00      	nop
 800c1c8:	0800c219 	.word	0x0800c219
 800c1cc:	0800c283 	.word	0x0800c283
 800c1d0:	0800c283 	.word	0x0800c283
 800c1d4:	0800c283 	.word	0x0800c283
 800c1d8:	0800c283 	.word	0x0800c283
 800c1dc:	0800c283 	.word	0x0800c283
 800c1e0:	0800c223 	.word	0x0800c223
 800c1e4:	0800c22d 	.word	0x0800c22d
 800c1e8:	0800c283 	.word	0x0800c283
 800c1ec:	0800c237 	.word	0x0800c237
 800c1f0:	0800c283 	.word	0x0800c283
 800c1f4:	0800c241 	.word	0x0800c241
 800c1f8:	0800c283 	.word	0x0800c283
 800c1fc:	0800c24b 	.word	0x0800c24b
 800c200:	0800c283 	.word	0x0800c283
 800c204:	0800c255 	.word	0x0800c255
 800c208:	0800c283 	.word	0x0800c283
 800c20c:	0800c25f 	.word	0x0800c25f
 800c210:	0800c283 	.word	0x0800c283
 800c214:	0800c269 	.word	0x0800c269
			{
				case _AT_SENT:
					b->estado=_IDLE;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2200      	movs	r2, #0
 800c21c:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c220:	e02f      	b.n	800c282 <LoRa_decode+0x12e>
				case _MODE_SENT:
					b->estado=_MODE_OK;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2206      	movs	r2, #6
 800c226:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c22a:	e02a      	b.n	800c282 <LoRa_decode+0x12e>
				case _PARAMETER_SENT:
					b->estado=_PARAMETER_OK;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2209      	movs	r2, #9
 800c230:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c234:	e025      	b.n	800c282 <LoRa_decode+0x12e>
				case _BAND_SENT:
					b->estado=_BAND_OK;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	220b      	movs	r2, #11
 800c23a:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c23e:	e020      	b.n	800c282 <LoRa_decode+0x12e>
				case _ADDR_SENT:
					b->estado=_ADDR_OK;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	220d      	movs	r2, #13
 800c244:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c248:	e01b      	b.n	800c282 <LoRa_decode+0x12e>
				case _NETWORK_SENT:
					b->estado=_NETWORK_OK;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	220f      	movs	r2, #15
 800c24e:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c252:	e016      	b.n	800c282 <LoRa_decode+0x12e>
				case _CPIN_SENT:
					b->estado=_CPIN_OK;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2211      	movs	r2, #17
 800c258:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c25c:	e011      	b.n	800c282 <LoRa_decode+0x12e>
				case _CRFOP_SENT:
					b->estado=_CRFOP_OK;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2213      	movs	r2, #19
 800c262:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800c266:	e00c      	b.n	800c282 <LoRa_decode+0x12e>
				case _SENT:
					{
						b->estado=_SENT_OK;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2215      	movs	r2, #21
 800c26c:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
						b->rxbuff[0]='\0';
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2200      	movs	r2, #0
 800c274:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
						ITM0_Write("\r\nLora _SENT_OK\r\n",strlen("\r\nLora _SENT_OK\r\n"));
 800c278:	2111      	movs	r1, #17
 800c27a:	48a8      	ldr	r0, [pc, #672]	; (800c51c <LoRa_decode+0x3c8>)
 800c27c:	f7f5 f9e8 	bl	8001650 <ITM0_Write>
					}
					break;
 800c280:	bf00      	nop

			}

			ITM0_Write("\r\nLora _OK\r\n",strlen("\r\nLora _OK\r\n"));
 800c282:	210c      	movs	r1, #12
 800c284:	48a6      	ldr	r0, [pc, #664]	; (800c520 <LoRa_decode+0x3cc>)
 800c286:	f7f5 f9e3 	bl	8001650 <ITM0_Write>
						//Clean rxbuff_hld
		}
			break;
 800c28a:	e17f      	b.n	800c58c <LoRa_decode+0x438>
		case _RCV:
		{
			ITM0_Write("\r\nLora _RCV\r\n",strlen("\r\nLora _RCV\r\n"));
 800c28c:	210d      	movs	r1, #13
 800c28e:	48a5      	ldr	r0, [pc, #660]	; (800c524 <LoRa_decode+0x3d0>)
 800c290:	f7f5 f9de 	bl	8001650 <ITM0_Write>
				b->estado=_DATO_RECIBIDO;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	221a      	movs	r2, #26
 800c298:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
				b->_data_available=1;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
					int i=0;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	617b      	str	r3, [r7, #20]
					int j=0;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	613b      	str	r3, [r7, #16]
					int lngt=0;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	60fb      	str	r3, [r7, #12]
					while (b->rxbuff[i] != '=')
 800c2b0:	e002      	b.n	800c2b8 <LoRa_decode+0x164>
					{ i++;}
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i] != '=')
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	4413      	add	r3, r2
 800c2be:	3356      	adds	r3, #86	; 0x56
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	2b3d      	cmp	r3, #61	; 0x3d
 800c2c4:	d1f5      	bne.n	800c2b2 <LoRa_decode+0x15e>
					i++;
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800c2cc:	e017      	b.n	800c2fe <LoRa_decode+0x1aa>
					{
						b->rxaddress[j]=b->rxbuff[i];			//Save the address
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	4413      	add	r3, r2
 800c2d4:	3356      	adds	r3, #86	; 0x56
 800c2d6:	7819      	ldrb	r1, [r3, #0]
 800c2d8:	687a      	ldr	r2, [r7, #4]
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	4413      	add	r3, r2
 800c2de:	3306      	adds	r3, #6
 800c2e0:	460a      	mov	r2, r1
 800c2e2:	701a      	strb	r2, [r3, #0]
						i++;
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	617b      	str	r3, [r7, #20]
						j++;
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	613b      	str	r3, [r7, #16]
						if (j > 6)
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	2b06      	cmp	r3, #6
 800c2f4:	dd03      	ble.n	800c2fe <LoRa_decode+0x1aa>
						{
							Lora_rx_del(b);
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 fbca 	bl	800ca90 <Lora_rx_del>
							break;
 800c2fc:	e006      	b.n	800c30c <LoRa_decode+0x1b8>
					while (b->rxbuff[i]!= ',')
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	4413      	add	r3, r2
 800c304:	3356      	adds	r3, #86	; 0x56
 800c306:	781b      	ldrb	r3, [r3, #0]
 800c308:	2b2c      	cmp	r3, #44	; 0x2c
 800c30a:	d1e0      	bne.n	800c2ce <LoRa_decode+0x17a>
						}
					}
					b->rxaddress[j]='\0';
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	4413      	add	r3, r2
 800c312:	3306      	adds	r3, #6
 800c314:	2200      	movs	r2, #0
 800c316:	701a      	strb	r2, [r3, #0]
					j=0;
 800c318:	2300      	movs	r3, #0
 800c31a:	613b      	str	r3, [r7, #16]
					i++;
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	3301      	adds	r3, #1
 800c320:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800c322:	e017      	b.n	800c354 <LoRa_decode+0x200>
					{
						b->rx_items[j]=b->rxbuff[i];			//Save the qty of data
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	4413      	add	r3, r2
 800c32a:	3356      	adds	r3, #86	; 0x56
 800c32c:	7819      	ldrb	r1, [r3, #0]
 800c32e:	687a      	ldr	r2, [r7, #4]
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	4413      	add	r3, r2
 800c334:	330c      	adds	r3, #12
 800c336:	460a      	mov	r2, r1
 800c338:	701a      	strb	r2, [r3, #0]
						i++;
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	3301      	adds	r3, #1
 800c33e:	617b      	str	r3, [r7, #20]
						j++;
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	3301      	adds	r3, #1
 800c344:	613b      	str	r3, [r7, #16]
						if (j > 4)
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	2b04      	cmp	r3, #4
 800c34a:	dd03      	ble.n	800c354 <LoRa_decode+0x200>
						{
							Lora_rx_del(b);
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fb9f 	bl	800ca90 <Lora_rx_del>
							break;
 800c352:	e006      	b.n	800c362 <LoRa_decode+0x20e>
					while (b->rxbuff[i]!= ',')
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	4413      	add	r3, r2
 800c35a:	3356      	adds	r3, #86	; 0x56
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	2b2c      	cmp	r3, #44	; 0x2c
 800c360:	d1e0      	bne.n	800c324 <LoRa_decode+0x1d0>
						}
					}
					b->rx_items[j]='\0';
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	4413      	add	r3, r2
 800c368:	330c      	adds	r3, #12
 800c36a:	2200      	movs	r2, #0
 800c36c:	701a      	strb	r2, [r3, #0]
					j=0;
 800c36e:	2300      	movs	r3, #0
 800c370:	613b      	str	r3, [r7, #16]
					i++;
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	3301      	adds	r3, #1
 800c376:	617b      	str	r3, [r7, #20]
					lngt=atoi(b->rx_items,10);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	330c      	adds	r3, #12
 800c37c:	210a      	movs	r1, #10
 800c37e:	4618      	mov	r0, r3
 800c380:	f002 ff19 	bl	800f1b6 <atoi>
 800c384:	60f8      	str	r0, [r7, #12]
					//lngt=lngt+i;
					//while(lngt>i)   //Ahota busco leer lo datos recibid y luego verificar si ok
					while (b->rxbuff[i]!= ',')
 800c386:	e019      	b.n	800c3bc <LoRa_decode+0x268>
					{
						b->dataRCV[j]=b->rxbuff[i];			//Save the data
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	4413      	add	r3, r2
 800c38e:	3356      	adds	r3, #86	; 0x56
 800c390:	7819      	ldrb	r1, [r3, #0]
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	4413      	add	r3, r2
 800c398:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800c39c:	460a      	mov	r2, r1
 800c39e:	701a      	strb	r2, [r3, #0]
						j++;
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	613b      	str	r3, [r7, #16]
						i++;
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	617b      	str	r3, [r7, #20]
						if (j > lngt)
 800c3ac:	693a      	ldr	r2, [r7, #16]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	dd03      	ble.n	800c3bc <LoRa_decode+0x268>
						{
							Lora_rx_del(b);
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 fb6b 	bl	800ca90 <Lora_rx_del>
							break;
 800c3ba:	e006      	b.n	800c3ca <LoRa_decode+0x276>
					while (b->rxbuff[i]!= ',')
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	4413      	add	r3, r2
 800c3c2:	3356      	adds	r3, #86	; 0x56
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	2b2c      	cmp	r3, #44	; 0x2c
 800c3c8:	d1de      	bne.n	800c388 <LoRa_decode+0x234>
						}
					}
					b->_n_dataRCV=j;							//Save amount of data received
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	693a      	ldr	r2, [r7, #16]
 800c3ce:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
					j=0;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	613b      	str	r3, [r7, #16]
					i++;
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800c3dc:	e017      	b.n	800c40e <LoRa_decode+0x2ba>
					{
						b->rx_convert[j]=b->rxbuff[i];			//save RSSI
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	4413      	add	r3, r2
 800c3e4:	3356      	adds	r3, #86	; 0x56
 800c3e6:	7819      	ldrb	r1, [r3, #0]
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	4413      	add	r3, r2
 800c3ee:	3310      	adds	r3, #16
 800c3f0:	460a      	mov	r2, r1
 800c3f2:	701a      	strb	r2, [r3, #0]
						i++;
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	617b      	str	r3, [r7, #20]
						j++;
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	2b05      	cmp	r3, #5
 800c404:	dd03      	ble.n	800c40e <LoRa_decode+0x2ba>
						{
							Lora_rx_del(b);
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 fb42 	bl	800ca90 <Lora_rx_del>
							break;
 800c40c:	e006      	b.n	800c41c <LoRa_decode+0x2c8>
					while (b->rxbuff[i]!= ',')
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	4413      	add	r3, r2
 800c414:	3356      	adds	r3, #86	; 0x56
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	2b2c      	cmp	r3, #44	; 0x2c
 800c41a:	d1e0      	bne.n	800c3de <LoRa_decode+0x28a>
						}
					}
					b->rxRSSI=atoi(b->rx_convert,10);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	3310      	adds	r3, #16
 800c420:	210a      	movs	r1, #10
 800c422:	4618      	mov	r0, r3
 800c424:	f002 fec7 	bl	800f1b6 <atoi>
 800c428:	4602      	mov	r2, r0
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
					b->rx_convert[j]='\0';
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	4413      	add	r3, r2
 800c436:	3310      	adds	r3, #16
 800c438:	2200      	movs	r2, #0
 800c43a:	701a      	strb	r2, [r3, #0]
					j=0;
 800c43c:	2300      	movs	r3, #0
 800c43e:	613b      	str	r3, [r7, #16]
					i++;
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	3301      	adds	r3, #1
 800c444:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= '\r')
 800c446:	e017      	b.n	800c478 <LoRa_decode+0x324>
					{
						b->rx_convert[j]=b->rxbuff[i];			// Save SNR
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	4413      	add	r3, r2
 800c44e:	3356      	adds	r3, #86	; 0x56
 800c450:	7819      	ldrb	r1, [r3, #0]
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	4413      	add	r3, r2
 800c458:	3310      	adds	r3, #16
 800c45a:	460a      	mov	r2, r1
 800c45c:	701a      	strb	r2, [r3, #0]
						i++;
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	3301      	adds	r3, #1
 800c462:	617b      	str	r3, [r7, #20]
						j++;
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	3301      	adds	r3, #1
 800c468:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	2b05      	cmp	r3, #5
 800c46e:	dd03      	ble.n	800c478 <LoRa_decode+0x324>
						{
							Lora_rx_del(b);
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 fb0d 	bl	800ca90 <Lora_rx_del>
							break;
 800c476:	e006      	b.n	800c486 <LoRa_decode+0x332>
					while (b->rxbuff[i]!= '\r')
 800c478:	687a      	ldr	r2, [r7, #4]
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	4413      	add	r3, r2
 800c47e:	3356      	adds	r3, #86	; 0x56
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	2b0d      	cmp	r3, #13
 800c484:	d1e0      	bne.n	800c448 <LoRa_decode+0x2f4>
						}
					}

					b->rx_convert[j]='\0';
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	4413      	add	r3, r2
 800c48c:	3310      	adds	r3, #16
 800c48e:	2200      	movs	r2, #0
 800c490:	701a      	strb	r2, [r3, #0]
					b->rxSNR=atoi(b->rx_convert,10);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	3310      	adds	r3, #16
 800c496:	210a      	movs	r1, #10
 800c498:	4618      	mov	r0, r3
 800c49a:	f002 fe8c 	bl	800f1b6 <atoi>
 800c49e:	4602      	mov	r2, r0
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
					b->rx_convert[0]='\0';
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	741a      	strb	r2, [r3, #16]


			    //Timer de enviar data cuando antes se recibe
				//LoRa_set_sndTIMER(b, 3000);
				b->rxbuff[0]='\0';
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		}
			break;
 800c4b4:	e06a      	b.n	800c58c <LoRa_decode+0x438>
		case _ERR:
			ITM0_Write("\r\nLora _ERR\r\n",strlen("\r\nLora _ERR\r\n"));
 800c4b6:	210d      	movs	r1, #13
 800c4b8:	481b      	ldr	r0, [pc, #108]	; (800c528 <LoRa_decode+0x3d4>)
 800c4ba:	f7f5 f8c9 	bl	8001650 <ITM0_Write>
			break;
 800c4be:	e065      	b.n	800c58c <LoRa_decode+0x438>
		case _RESET:
			ITM0_Write("\r\nLora _RESET\r\n",strlen("\r\nLora _RESET\r\n"));
 800c4c0:	210f      	movs	r1, #15
 800c4c2:	481a      	ldr	r0, [pc, #104]	; (800c52c <LoRa_decode+0x3d8>)
 800c4c4:	f7f5 f8c4 	bl	8001650 <ITM0_Write>
			break;
 800c4c8:	e060      	b.n	800c58c <LoRa_decode+0x438>
		case _READY:
			ITM0_Write("\r\nLora _READY\r\n",strlen("\r\nLora _READY\r\n"));
 800c4ca:	210f      	movs	r1, #15
 800c4cc:	4818      	ldr	r0, [pc, #96]	; (800c530 <LoRa_decode+0x3dc>)
 800c4ce:	f7f5 f8bf 	bl	8001650 <ITM0_Write>
			break;
 800c4d2:	e05b      	b.n	800c58c <LoRa_decode+0x438>
		case _MODE:
			ITM0_Write("\r\nLora _MODE\r\n",strlen("\r\nLora _MODE\r\n"));
 800c4d4:	210e      	movs	r1, #14
 800c4d6:	4817      	ldr	r0, [pc, #92]	; (800c534 <LoRa_decode+0x3e0>)
 800c4d8:	f7f5 f8ba 	bl	8001650 <ITM0_Write>
			break;
 800c4dc:	e056      	b.n	800c58c <LoRa_decode+0x438>
		case _IPR:
			ITM0_Write("\r\nLora _IPR\r\n",strlen("\r\nLora _IPR\r\n"));
 800c4de:	210d      	movs	r1, #13
 800c4e0:	4815      	ldr	r0, [pc, #84]	; (800c538 <LoRa_decode+0x3e4>)
 800c4e2:	f7f5 f8b5 	bl	8001650 <ITM0_Write>
			break;
 800c4e6:	e051      	b.n	800c58c <LoRa_decode+0x438>
		case _PARAMETER:
			ITM0_Write("\r\nLora _PARAMETER\r\n",strlen("\r\nLora _PARAMETER\r\n"));
 800c4e8:	2113      	movs	r1, #19
 800c4ea:	4814      	ldr	r0, [pc, #80]	; (800c53c <LoRa_decode+0x3e8>)
 800c4ec:	f7f5 f8b0 	bl	8001650 <ITM0_Write>
			break;
 800c4f0:	e04c      	b.n	800c58c <LoRa_decode+0x438>
		case _BAND:
			ITM0_Write("\r\nLora _BAND\r\n",strlen("\r\nLora _BAND\r\n"));
 800c4f2:	210e      	movs	r1, #14
 800c4f4:	4812      	ldr	r0, [pc, #72]	; (800c540 <LoRa_decode+0x3ec>)
 800c4f6:	f7f5 f8ab 	bl	8001650 <ITM0_Write>
			break;
 800c4fa:	e047      	b.n	800c58c <LoRa_decode+0x438>
		case _ADDRESS:
			ITM0_Write("\r\nLora _ADDRESS\r\n",strlen("\r\nLora _ADDRESS\r\n"));
 800c4fc:	2111      	movs	r1, #17
 800c4fe:	4811      	ldr	r0, [pc, #68]	; (800c544 <LoRa_decode+0x3f0>)
 800c500:	f7f5 f8a6 	bl	8001650 <ITM0_Write>
			break;
 800c504:	e042      	b.n	800c58c <LoRa_decode+0x438>
		case _NETWORK:
			ITM0_Write("\r\nLora _NETWORK\r\n",strlen("\r\nLora _NETWORK\r\n"));
 800c506:	2111      	movs	r1, #17
 800c508:	480f      	ldr	r0, [pc, #60]	; (800c548 <LoRa_decode+0x3f4>)
 800c50a:	f7f5 f8a1 	bl	8001650 <ITM0_Write>
			break;
 800c50e:	e03d      	b.n	800c58c <LoRa_decode+0x438>
		case _CPIN:
			ITM0_Write("\r\nLora _CPIN\r\n",strlen("\r\nLora _CPIN\r\n"));
 800c510:	210e      	movs	r1, #14
 800c512:	480e      	ldr	r0, [pc, #56]	; (800c54c <LoRa_decode+0x3f8>)
 800c514:	f7f5 f89c 	bl	8001650 <ITM0_Write>
			break;
 800c518:	e038      	b.n	800c58c <LoRa_decode+0x438>
 800c51a:	bf00      	nop
 800c51c:	08010cc4 	.word	0x08010cc4
 800c520:	08010cd8 	.word	0x08010cd8
 800c524:	08010ce8 	.word	0x08010ce8
 800c528:	08010cf8 	.word	0x08010cf8
 800c52c:	08010d08 	.word	0x08010d08
 800c530:	08010d18 	.word	0x08010d18
 800c534:	08010d28 	.word	0x08010d28
 800c538:	08010d38 	.word	0x08010d38
 800c53c:	08010d48 	.word	0x08010d48
 800c540:	08010d5c 	.word	0x08010d5c
 800c544:	08010d6c 	.word	0x08010d6c
 800c548:	08010d80 	.word	0x08010d80
 800c54c:	08010d94 	.word	0x08010d94
		case _CRFOP:
			ITM0_Write("\r\nLora _CRFOP\r\n",strlen("\r\nLora _CRFOP\r\n"));
 800c550:	210f      	movs	r1, #15
 800c552:	4810      	ldr	r0, [pc, #64]	; (800c594 <LoRa_decode+0x440>)
 800c554:	f7f5 f87c 	bl	8001650 <ITM0_Write>
			break;
 800c558:	e018      	b.n	800c58c <LoRa_decode+0x438>
		case _SEND:
			ITM0_Write("\r\nLora _SEND\r\n",strlen("\r\nLora _SEND\r\n"));
 800c55a:	210e      	movs	r1, #14
 800c55c:	480e      	ldr	r0, [pc, #56]	; (800c598 <LoRa_decode+0x444>)
 800c55e:	f7f5 f877 	bl	8001650 <ITM0_Write>
			break;
 800c562:	e013      	b.n	800c58c <LoRa_decode+0x438>
		case _UID:
			ITM0_Write("\r\nLora _UID\r\n",strlen("\r\nLora _UID\r\n"));
 800c564:	210d      	movs	r1, #13
 800c566:	480d      	ldr	r0, [pc, #52]	; (800c59c <LoRa_decode+0x448>)
 800c568:	f7f5 f872 	bl	8001650 <ITM0_Write>
			break;
 800c56c:	e00e      	b.n	800c58c <LoRa_decode+0x438>
		case _VER:
			ITM0_Write("\r\nLora _VER\r\n",strlen("\r\nLora _VER\r\n"));
 800c56e:	210d      	movs	r1, #13
 800c570:	480b      	ldr	r0, [pc, #44]	; (800c5a0 <LoRa_decode+0x44c>)
 800c572:	f7f5 f86d 	bl	8001650 <ITM0_Write>
			break;
 800c576:	e009      	b.n	800c58c <LoRa_decode+0x438>
		case _ERR_RCV_OF:
			ITM0_Write("\r\nLora _ERR_RCV_OF\r\n",strlen("\r\nLora _ERR_RCV_OF\r\n"));
 800c578:	2114      	movs	r1, #20
 800c57a:	480a      	ldr	r0, [pc, #40]	; (800c5a4 <LoRa_decode+0x450>)
 800c57c:	f7f5 f868 	bl	8001650 <ITM0_Write>
			break;
 800c580:	e004      	b.n	800c58c <LoRa_decode+0x438>
		default:
			ITM0_Write("\r\nLora default\r\n",strlen("\r\nLora default\r\n"));
 800c582:	2110      	movs	r1, #16
 800c584:	4808      	ldr	r0, [pc, #32]	; (800c5a8 <LoRa_decode+0x454>)
 800c586:	f7f5 f863 	bl	8001650 <ITM0_Write>
			break;
 800c58a:	bf00      	nop
	}
 }
 800c58c:	bf00      	nop
 800c58e:	3718      	adds	r7, #24
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	08010da4 	.word	0x08010da4
 800c598:	08010db4 	.word	0x08010db4
 800c59c:	08010dc4 	.word	0x08010dc4
 800c5a0:	08010dd4 	.word	0x08010dd4
 800c5a4:	08010de4 	.word	0x08010de4
 800c5a8:	08010dfc 	.word	0x08010dfc

0800c5ac <Lora_idSTR>:
int Lora_idSTR(struct LoRa *a)
{		int f,g,h,i;
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b090      	sub	sp, #64	; 0x40
 800c5b0:	af06      	add	r7, sp, #24
 800c5b2:	6078      	str	r0, [r7, #4]
		if(a->rxitems > 270) return _ERR_RCV_OF;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 800c5ba:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c5be:	dd01      	ble.n	800c5c4 <Lora_idSTR+0x18>
 800c5c0:	2310      	movs	r3, #16
 800c5c2:	e257      	b.n	800ca74 <Lora_idSTR+0x4c8>
		char data[10];
		int ndata=0;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	60fb      	str	r3, [r7, #12]
		i=strlen("+OK=");
 800c5c8:	2304      	movs	r3, #4
 800c5ca:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+OK=",&i,data,&ndata,&g,&h,512, 0)==1) return _OK ;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c5d8:	f107 021c 	add.w	r2, r7, #28
 800c5dc:	2300      	movs	r3, #0
 800c5de:	9305      	str	r3, [sp, #20]
 800c5e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5e4:	9304      	str	r3, [sp, #16]
 800c5e6:	f107 0320 	add.w	r3, r7, #32
 800c5ea:	9303      	str	r3, [sp, #12]
 800c5ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5f0:	9302      	str	r3, [sp, #8]
 800c5f2:	f107 030c 	add.w	r3, r7, #12
 800c5f6:	9301      	str	r3, [sp, #4]
 800c5f8:	f107 0310 	add.w	r3, r7, #16
 800c5fc:	9300      	str	r3, [sp, #0]
 800c5fe:	4613      	mov	r3, r2
 800c600:	4ab7      	ldr	r2, [pc, #732]	; (800c8e0 <Lora_idSTR+0x334>)
 800c602:	f002 fa11 	bl	800ea28 <FT_String_ND>
 800c606:	4603      	mov	r3, r0
 800c608:	2b01      	cmp	r3, #1
 800c60a:	d101      	bne.n	800c610 <Lora_idSTR+0x64>
 800c60c:	2300      	movs	r3, #0
 800c60e:	e231      	b.n	800ca74 <Lora_idSTR+0x4c8>
		i=strlen("+RCV=");
 800c610:	2305      	movs	r3, #5
 800c612:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RCV=",&i,data,&ndata,&g,&h,512, 0)==1) return _RCV ;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c620:	f107 021c 	add.w	r2, r7, #28
 800c624:	2300      	movs	r3, #0
 800c626:	9305      	str	r3, [sp, #20]
 800c628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c62c:	9304      	str	r3, [sp, #16]
 800c62e:	f107 0320 	add.w	r3, r7, #32
 800c632:	9303      	str	r3, [sp, #12]
 800c634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c638:	9302      	str	r3, [sp, #8]
 800c63a:	f107 030c 	add.w	r3, r7, #12
 800c63e:	9301      	str	r3, [sp, #4]
 800c640:	f107 0310 	add.w	r3, r7, #16
 800c644:	9300      	str	r3, [sp, #0]
 800c646:	4613      	mov	r3, r2
 800c648:	4aa6      	ldr	r2, [pc, #664]	; (800c8e4 <Lora_idSTR+0x338>)
 800c64a:	f002 f9ed 	bl	800ea28 <FT_String_ND>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b01      	cmp	r3, #1
 800c652:	d101      	bne.n	800c658 <Lora_idSTR+0xac>
 800c654:	2301      	movs	r3, #1
 800c656:	e20d      	b.n	800ca74 <Lora_idSTR+0x4c8>
		i=strlen("+ERR=");
 800c658:	2305      	movs	r3, #5
 800c65a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ERR=",&i,data,&ndata,&g,&h,512, 0)==1) return _ERR ;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c668:	f107 021c 	add.w	r2, r7, #28
 800c66c:	2300      	movs	r3, #0
 800c66e:	9305      	str	r3, [sp, #20]
 800c670:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c674:	9304      	str	r3, [sp, #16]
 800c676:	f107 0320 	add.w	r3, r7, #32
 800c67a:	9303      	str	r3, [sp, #12]
 800c67c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c680:	9302      	str	r3, [sp, #8]
 800c682:	f107 030c 	add.w	r3, r7, #12
 800c686:	9301      	str	r3, [sp, #4]
 800c688:	f107 0310 	add.w	r3, r7, #16
 800c68c:	9300      	str	r3, [sp, #0]
 800c68e:	4613      	mov	r3, r2
 800c690:	4a95      	ldr	r2, [pc, #596]	; (800c8e8 <Lora_idSTR+0x33c>)
 800c692:	f002 f9c9 	bl	800ea28 <FT_String_ND>
 800c696:	4603      	mov	r3, r0
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d101      	bne.n	800c6a0 <Lora_idSTR+0xf4>
 800c69c:	230f      	movs	r3, #15
 800c69e:	e1e9      	b.n	800ca74 <Lora_idSTR+0x4c8>
		i=strlen("+RESET");
 800c6a0:	2306      	movs	r3, #6
 800c6a2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RESET",&i,data,&ndata,&g,&h,512, 0)==1)return _RESET;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c6b0:	f107 021c 	add.w	r2, r7, #28
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	9305      	str	r3, [sp, #20]
 800c6b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6bc:	9304      	str	r3, [sp, #16]
 800c6be:	f107 0320 	add.w	r3, r7, #32
 800c6c2:	9303      	str	r3, [sp, #12]
 800c6c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6c8:	9302      	str	r3, [sp, #8]
 800c6ca:	f107 030c 	add.w	r3, r7, #12
 800c6ce:	9301      	str	r3, [sp, #4]
 800c6d0:	f107 0310 	add.w	r3, r7, #16
 800c6d4:	9300      	str	r3, [sp, #0]
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	4a84      	ldr	r2, [pc, #528]	; (800c8ec <Lora_idSTR+0x340>)
 800c6da:	f002 f9a5 	bl	800ea28 <FT_String_ND>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	d101      	bne.n	800c6e8 <Lora_idSTR+0x13c>
 800c6e4:	2302      	movs	r3, #2
 800c6e6:	e1c5      	b.n	800ca74 <Lora_idSTR+0x4c8>
		i=strlen("+READY");
 800c6e8:	2306      	movs	r3, #6
 800c6ea:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+READY",&i,data,&ndata,&g,&h,512, 0)==1) return _READY ;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c6f8:	f107 021c 	add.w	r2, r7, #28
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	9305      	str	r3, [sp, #20]
 800c700:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c704:	9304      	str	r3, [sp, #16]
 800c706:	f107 0320 	add.w	r3, r7, #32
 800c70a:	9303      	str	r3, [sp, #12]
 800c70c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c710:	9302      	str	r3, [sp, #8]
 800c712:	f107 030c 	add.w	r3, r7, #12
 800c716:	9301      	str	r3, [sp, #4]
 800c718:	f107 0310 	add.w	r3, r7, #16
 800c71c:	9300      	str	r3, [sp, #0]
 800c71e:	4613      	mov	r3, r2
 800c720:	4a73      	ldr	r2, [pc, #460]	; (800c8f0 <Lora_idSTR+0x344>)
 800c722:	f002 f981 	bl	800ea28 <FT_String_ND>
 800c726:	4603      	mov	r3, r0
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d101      	bne.n	800c730 <Lora_idSTR+0x184>
 800c72c:	2303      	movs	r3, #3
 800c72e:	e1a1      	b.n	800ca74 <Lora_idSTR+0x4c8>
		i=strlen("+MODE=");
 800c730:	2306      	movs	r3, #6
 800c732:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+MODE=",&i,data,&ndata,&g,&h,512, 0)==1) return _MODE ;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c740:	f107 021c 	add.w	r2, r7, #28
 800c744:	2300      	movs	r3, #0
 800c746:	9305      	str	r3, [sp, #20]
 800c748:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c74c:	9304      	str	r3, [sp, #16]
 800c74e:	f107 0320 	add.w	r3, r7, #32
 800c752:	9303      	str	r3, [sp, #12]
 800c754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c758:	9302      	str	r3, [sp, #8]
 800c75a:	f107 030c 	add.w	r3, r7, #12
 800c75e:	9301      	str	r3, [sp, #4]
 800c760:	f107 0310 	add.w	r3, r7, #16
 800c764:	9300      	str	r3, [sp, #0]
 800c766:	4613      	mov	r3, r2
 800c768:	4a62      	ldr	r2, [pc, #392]	; (800c8f4 <Lora_idSTR+0x348>)
 800c76a:	f002 f95d 	bl	800ea28 <FT_String_ND>
 800c76e:	4603      	mov	r3, r0
 800c770:	2b01      	cmp	r3, #1
 800c772:	d101      	bne.n	800c778 <Lora_idSTR+0x1cc>
 800c774:	2304      	movs	r3, #4
 800c776:	e17d      	b.n	800ca74 <Lora_idSTR+0x4c8>
		i=strlen("+IPR=");
 800c778:	2305      	movs	r3, #5
 800c77a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+IPR=",&i,data,&ndata,&g,&h,512, 0)==1) return _IPR ;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c788:	f107 021c 	add.w	r2, r7, #28
 800c78c:	2300      	movs	r3, #0
 800c78e:	9305      	str	r3, [sp, #20]
 800c790:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c794:	9304      	str	r3, [sp, #16]
 800c796:	f107 0320 	add.w	r3, r7, #32
 800c79a:	9303      	str	r3, [sp, #12]
 800c79c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7a0:	9302      	str	r3, [sp, #8]
 800c7a2:	f107 030c 	add.w	r3, r7, #12
 800c7a6:	9301      	str	r3, [sp, #4]
 800c7a8:	f107 0310 	add.w	r3, r7, #16
 800c7ac:	9300      	str	r3, [sp, #0]
 800c7ae:	4613      	mov	r3, r2
 800c7b0:	4a51      	ldr	r2, [pc, #324]	; (800c8f8 <Lora_idSTR+0x34c>)
 800c7b2:	f002 f939 	bl	800ea28 <FT_String_ND>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d101      	bne.n	800c7c0 <Lora_idSTR+0x214>
 800c7bc:	2305      	movs	r3, #5
 800c7be:	e159      	b.n	800ca74 <Lora_idSTR+0x4c8>
		i=strlen("+PARAMETER=");
 800c7c0:	230b      	movs	r3, #11
 800c7c2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+PARAMETER=",&i,data,&ndata,&g,&h,512, 0)==1) return _PARAMETER ;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c7d0:	f107 021c 	add.w	r2, r7, #28
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	9305      	str	r3, [sp, #20]
 800c7d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7dc:	9304      	str	r3, [sp, #16]
 800c7de:	f107 0320 	add.w	r3, r7, #32
 800c7e2:	9303      	str	r3, [sp, #12]
 800c7e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7e8:	9302      	str	r3, [sp, #8]
 800c7ea:	f107 030c 	add.w	r3, r7, #12
 800c7ee:	9301      	str	r3, [sp, #4]
 800c7f0:	f107 0310 	add.w	r3, r7, #16
 800c7f4:	9300      	str	r3, [sp, #0]
 800c7f6:	4613      	mov	r3, r2
 800c7f8:	4a40      	ldr	r2, [pc, #256]	; (800c8fc <Lora_idSTR+0x350>)
 800c7fa:	f002 f915 	bl	800ea28 <FT_String_ND>
 800c7fe:	4603      	mov	r3, r0
 800c800:	2b01      	cmp	r3, #1
 800c802:	d101      	bne.n	800c808 <Lora_idSTR+0x25c>
 800c804:	2306      	movs	r3, #6
 800c806:	e135      	b.n	800ca74 <Lora_idSTR+0x4c8>
		i=strlen("+BAND=");
 800c808:	2306      	movs	r3, #6
 800c80a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+BAND=",&i,data,&ndata,&g,&h,512, 0)==1) return _BAND ;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c818:	f107 021c 	add.w	r2, r7, #28
 800c81c:	2300      	movs	r3, #0
 800c81e:	9305      	str	r3, [sp, #20]
 800c820:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c824:	9304      	str	r3, [sp, #16]
 800c826:	f107 0320 	add.w	r3, r7, #32
 800c82a:	9303      	str	r3, [sp, #12]
 800c82c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c830:	9302      	str	r3, [sp, #8]
 800c832:	f107 030c 	add.w	r3, r7, #12
 800c836:	9301      	str	r3, [sp, #4]
 800c838:	f107 0310 	add.w	r3, r7, #16
 800c83c:	9300      	str	r3, [sp, #0]
 800c83e:	4613      	mov	r3, r2
 800c840:	4a2f      	ldr	r2, [pc, #188]	; (800c900 <Lora_idSTR+0x354>)
 800c842:	f002 f8f1 	bl	800ea28 <FT_String_ND>
 800c846:	4603      	mov	r3, r0
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d101      	bne.n	800c850 <Lora_idSTR+0x2a4>
 800c84c:	2307      	movs	r3, #7
 800c84e:	e111      	b.n	800ca74 <Lora_idSTR+0x4c8>
		i=strlen("+ADDRESS=");
 800c850:	2309      	movs	r3, #9
 800c852:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ADDRESS=",&i,data,&ndata,&g,&h,512, 0)==1) return _ADDRESS ;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c860:	f107 021c 	add.w	r2, r7, #28
 800c864:	2300      	movs	r3, #0
 800c866:	9305      	str	r3, [sp, #20]
 800c868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c86c:	9304      	str	r3, [sp, #16]
 800c86e:	f107 0320 	add.w	r3, r7, #32
 800c872:	9303      	str	r3, [sp, #12]
 800c874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c878:	9302      	str	r3, [sp, #8]
 800c87a:	f107 030c 	add.w	r3, r7, #12
 800c87e:	9301      	str	r3, [sp, #4]
 800c880:	f107 0310 	add.w	r3, r7, #16
 800c884:	9300      	str	r3, [sp, #0]
 800c886:	4613      	mov	r3, r2
 800c888:	4a1e      	ldr	r2, [pc, #120]	; (800c904 <Lora_idSTR+0x358>)
 800c88a:	f002 f8cd 	bl	800ea28 <FT_String_ND>
 800c88e:	4603      	mov	r3, r0
 800c890:	2b01      	cmp	r3, #1
 800c892:	d101      	bne.n	800c898 <Lora_idSTR+0x2ec>
 800c894:	2308      	movs	r3, #8
 800c896:	e0ed      	b.n	800ca74 <Lora_idSTR+0x4c8>
		i=strlen("+NETWORK=");
 800c898:	2309      	movs	r3, #9
 800c89a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+NETWORK=",&i,data,&ndata,&g,&h,512, 0)==1) return _NETWORK ;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c8a8:	f107 021c 	add.w	r2, r7, #28
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	9305      	str	r3, [sp, #20]
 800c8b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c8b4:	9304      	str	r3, [sp, #16]
 800c8b6:	f107 0320 	add.w	r3, r7, #32
 800c8ba:	9303      	str	r3, [sp, #12]
 800c8bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8c0:	9302      	str	r3, [sp, #8]
 800c8c2:	f107 030c 	add.w	r3, r7, #12
 800c8c6:	9301      	str	r3, [sp, #4]
 800c8c8:	f107 0310 	add.w	r3, r7, #16
 800c8cc:	9300      	str	r3, [sp, #0]
 800c8ce:	4613      	mov	r3, r2
 800c8d0:	4a0d      	ldr	r2, [pc, #52]	; (800c908 <Lora_idSTR+0x35c>)
 800c8d2:	f002 f8a9 	bl	800ea28 <FT_String_ND>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d117      	bne.n	800c90c <Lora_idSTR+0x360>
 800c8dc:	2309      	movs	r3, #9
 800c8de:	e0c9      	b.n	800ca74 <Lora_idSTR+0x4c8>
 800c8e0:	08010e10 	.word	0x08010e10
 800c8e4:	08010e18 	.word	0x08010e18
 800c8e8:	08010e20 	.word	0x08010e20
 800c8ec:	08010e28 	.word	0x08010e28
 800c8f0:	08010e30 	.word	0x08010e30
 800c8f4:	08010e38 	.word	0x08010e38
 800c8f8:	08010e40 	.word	0x08010e40
 800c8fc:	08010e48 	.word	0x08010e48
 800c900:	08010e54 	.word	0x08010e54
 800c904:	08010e5c 	.word	0x08010e5c
 800c908:	08010e68 	.word	0x08010e68
		i=strlen("+CPIN=");
 800c90c:	2306      	movs	r3, #6
 800c90e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CPIN=",&i,data,&ndata,&g,&h,512, 0)==1) return _CPIN ;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c91c:	f107 021c 	add.w	r2, r7, #28
 800c920:	2300      	movs	r3, #0
 800c922:	9305      	str	r3, [sp, #20]
 800c924:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c928:	9304      	str	r3, [sp, #16]
 800c92a:	f107 0320 	add.w	r3, r7, #32
 800c92e:	9303      	str	r3, [sp, #12]
 800c930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c934:	9302      	str	r3, [sp, #8]
 800c936:	f107 030c 	add.w	r3, r7, #12
 800c93a:	9301      	str	r3, [sp, #4]
 800c93c:	f107 0310 	add.w	r3, r7, #16
 800c940:	9300      	str	r3, [sp, #0]
 800c942:	4613      	mov	r3, r2
 800c944:	4a4d      	ldr	r2, [pc, #308]	; (800ca7c <Lora_idSTR+0x4d0>)
 800c946:	f002 f86f 	bl	800ea28 <FT_String_ND>
 800c94a:	4603      	mov	r3, r0
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	d101      	bne.n	800c954 <Lora_idSTR+0x3a8>
 800c950:	230a      	movs	r3, #10
 800c952:	e08f      	b.n	800ca74 <Lora_idSTR+0x4c8>
		i=strlen("+CRFOP=");
 800c954:	2307      	movs	r3, #7
 800c956:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CRFOP=",&i,data,&ndata,&g,&h,512, 0)==1) return _CRFOP ;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c964:	f107 021c 	add.w	r2, r7, #28
 800c968:	2300      	movs	r3, #0
 800c96a:	9305      	str	r3, [sp, #20]
 800c96c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c970:	9304      	str	r3, [sp, #16]
 800c972:	f107 0320 	add.w	r3, r7, #32
 800c976:	9303      	str	r3, [sp, #12]
 800c978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c97c:	9302      	str	r3, [sp, #8]
 800c97e:	f107 030c 	add.w	r3, r7, #12
 800c982:	9301      	str	r3, [sp, #4]
 800c984:	f107 0310 	add.w	r3, r7, #16
 800c988:	9300      	str	r3, [sp, #0]
 800c98a:	4613      	mov	r3, r2
 800c98c:	4a3c      	ldr	r2, [pc, #240]	; (800ca80 <Lora_idSTR+0x4d4>)
 800c98e:	f002 f84b 	bl	800ea28 <FT_String_ND>
 800c992:	4603      	mov	r3, r0
 800c994:	2b01      	cmp	r3, #1
 800c996:	d101      	bne.n	800c99c <Lora_idSTR+0x3f0>
 800c998:	230b      	movs	r3, #11
 800c99a:	e06b      	b.n	800ca74 <Lora_idSTR+0x4c8>
		i=strlen("+SEND=");
 800c99c:	2306      	movs	r3, #6
 800c99e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+SEND=",&i,data,&ndata,&g,&h,512, 0)==1) return _SEND ;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c9ac:	f107 021c 	add.w	r2, r7, #28
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	9305      	str	r3, [sp, #20]
 800c9b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9b8:	9304      	str	r3, [sp, #16]
 800c9ba:	f107 0320 	add.w	r3, r7, #32
 800c9be:	9303      	str	r3, [sp, #12]
 800c9c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9c4:	9302      	str	r3, [sp, #8]
 800c9c6:	f107 030c 	add.w	r3, r7, #12
 800c9ca:	9301      	str	r3, [sp, #4]
 800c9cc:	f107 0310 	add.w	r3, r7, #16
 800c9d0:	9300      	str	r3, [sp, #0]
 800c9d2:	4613      	mov	r3, r2
 800c9d4:	4a2b      	ldr	r2, [pc, #172]	; (800ca84 <Lora_idSTR+0x4d8>)
 800c9d6:	f002 f827 	bl	800ea28 <FT_String_ND>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d101      	bne.n	800c9e4 <Lora_idSTR+0x438>
 800c9e0:	230c      	movs	r3, #12
 800c9e2:	e047      	b.n	800ca74 <Lora_idSTR+0x4c8>
		i=strlen("+UID=");
 800c9e4:	2305      	movs	r3, #5
 800c9e6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+UID=",&i,data,&ndata,&g,&h,512, 0)==1) return _UID ;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c9f4:	f107 021c 	add.w	r2, r7, #28
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	9305      	str	r3, [sp, #20]
 800c9fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca00:	9304      	str	r3, [sp, #16]
 800ca02:	f107 0320 	add.w	r3, r7, #32
 800ca06:	9303      	str	r3, [sp, #12]
 800ca08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca0c:	9302      	str	r3, [sp, #8]
 800ca0e:	f107 030c 	add.w	r3, r7, #12
 800ca12:	9301      	str	r3, [sp, #4]
 800ca14:	f107 0310 	add.w	r3, r7, #16
 800ca18:	9300      	str	r3, [sp, #0]
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	4a1a      	ldr	r2, [pc, #104]	; (800ca88 <Lora_idSTR+0x4dc>)
 800ca1e:	f002 f803 	bl	800ea28 <FT_String_ND>
 800ca22:	4603      	mov	r3, r0
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d101      	bne.n	800ca2c <Lora_idSTR+0x480>
 800ca28:	230e      	movs	r3, #14
 800ca2a:	e023      	b.n	800ca74 <Lora_idSTR+0x4c8>
		i=strlen("+VER=");
 800ca2c:	2305      	movs	r3, #5
 800ca2e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+VER=",&i,data,&ndata,&g,&h,512, 0)==1) return _VER ;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800ca3c:	f107 021c 	add.w	r2, r7, #28
 800ca40:	2300      	movs	r3, #0
 800ca42:	9305      	str	r3, [sp, #20]
 800ca44:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca48:	9304      	str	r3, [sp, #16]
 800ca4a:	f107 0320 	add.w	r3, r7, #32
 800ca4e:	9303      	str	r3, [sp, #12]
 800ca50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca54:	9302      	str	r3, [sp, #8]
 800ca56:	f107 030c 	add.w	r3, r7, #12
 800ca5a:	9301      	str	r3, [sp, #4]
 800ca5c:	f107 0310 	add.w	r3, r7, #16
 800ca60:	9300      	str	r3, [sp, #0]
 800ca62:	4613      	mov	r3, r2
 800ca64:	4a09      	ldr	r2, [pc, #36]	; (800ca8c <Lora_idSTR+0x4e0>)
 800ca66:	f001 ffdf 	bl	800ea28 <FT_String_ND>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d101      	bne.n	800ca74 <Lora_idSTR+0x4c8>
 800ca70:	230d      	movs	r3, #13
 800ca72:	e7ff      	b.n	800ca74 <Lora_idSTR+0x4c8>
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3728      	adds	r7, #40	; 0x28
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	08010e74 	.word	0x08010e74
 800ca80:	08010e7c 	.word	0x08010e7c
 800ca84:	08010e84 	.word	0x08010e84
 800ca88:	08010e8c 	.word	0x08010e8c
 800ca8c:	08010e94 	.word	0x08010e94

0800ca90 <Lora_rx_del>:
void Lora_rx_del(struct LoRa *a)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
	a->rxbuff[0]='\0';
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	a->rx_items[0]='\0';
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2200      	movs	r2, #0
 800caa4:	731a      	strb	r2, [r3, #12]
	//a->dataRCV[0]='\0';
	a->rxRSSI=0;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2200      	movs	r2, #0
 800caaa:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
	a->rxSNR=0;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2200      	movs	r2, #0
 800cab2:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
}
 800cab6:	bf00      	nop
 800cab8:	370c      	adds	r7, #12
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr
	...

0800cac4 <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2201      	movs	r2, #1
 800cad0:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2200      	movs	r2, #0
 800cad6:	711a      	strb	r2, [r3, #4]
	m->_timeout=500;						//Timeout para la recepción de respuesta.
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800cade:	80da      	strh	r2, [r3, #6]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2201      	movs	r2, #1
 800cae4:	729a      	strb	r2, [r3, #10]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2220      	movs	r2, #32
 800caea:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
	m->_Coils=0xF0F0AF5A;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	4a1c      	ldr	r2, [pc, #112]	; (800cb64 <ModBUS_Config+0xa0>)
 800caf2:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2201      	movs	r2, #1
 800cafa:	72da      	strb	r2, [r3, #11]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2220      	movs	r2, #32
 800cb00:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
	m->_Inputs=0xA5FA0F0F;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	4a18      	ldr	r2, [pc, #96]	; (800cb68 <ModBUS_Config+0xa4>)
 800cb08:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2201      	movs	r2, #1
 800cb10:	731a      	strb	r2, [r3, #12]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2210      	movs	r2, #16
 800cb16:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	735a      	strb	r2, [r3, #13]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2210      	movs	r2, #16
 800cb24:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	739a      	strb	r2, [r3, #14]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2220      	movs	r2, #32
 800cb32:	f883 2638 	strb.w	r2, [r3, #1592]	; 0x638

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2201      	movs	r2, #1
 800cb3a:	73da      	strb	r2, [r3, #15]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2201      	movs	r2, #1
 800cb40:	741a      	strb	r2, [r3, #16]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2220      	movs	r2, #32
 800cb46:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	745a      	strb	r2, [r3, #17]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2220      	movs	r2, #32
 800cb54:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
}
 800cb58:	bf00      	nop
 800cb5a:	370c      	adds	r7, #12
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr
 800cb64:	f0f0af5a 	.word	0xf0f0af5a
 800cb68:	a5fa0f0f 	.word	0xa5fa0f0f

0800cb6c <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	3305      	adds	r3, #5
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	3306      	adds	r3, #6
 800cb7e:	683a      	ldr	r2, [r7, #0]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d10b      	bne.n	800cb9c <ModBUS_Check+0x30>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	3302      	adds	r3, #2
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	3303      	adds	r3, #3
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	4413      	add	r3, r2
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d101      	bne.n	800cb9c <ModBUS_Check+0x30>
	{
		return(1);
 800cb98:	2301      	movs	r3, #1
 800cb9a:	e000      	b.n	800cb9e <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800cb9c:	2300      	movs	r3, #0
	}
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	370c      	adds	r7, #12
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr

0800cbaa <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800cbaa:	b480      	push	{r7}
 800cbac:	b083      	sub	sp, #12
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f893 2218 	ldrb.w	r2, [r3, #536]	; 0x218
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	7c9b      	ldrb	r3, [r3, #18]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d11d      	bne.n	800cbfc <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f893 2219 	ldrb.w	r2, [r3, #537]	; 0x219
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	7cdb      	ldrb	r3, [r3, #19]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d116      	bne.n	800cbfc <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d10f      	bne.n	800cbfc <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f893 221b 	ldrb.w	r2, [r3, #539]	; 0x21b
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	7d5b      	ldrb	r3, [r3, #21]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d108      	bne.n	800cbfc <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f893 221f 	ldrb.w	r2, [r3, #543]	; 0x21f
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	7e5b      	ldrb	r3, [r3, #25]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d101      	bne.n	800cbfc <ModBUS_Check_tid+0x52>
	{
		return(1);
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e000      	b.n	800cbfe <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800cbfc:	2300      	movs	r3, #0
	}
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	370c      	adds	r7, #12
 800cc02:	46bd      	mov	sp, r7
 800cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc08:	4770      	bx	lr

0800cc0a <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t a, uint16_t b)
{
 800cc0a:	b480      	push	{r7}
 800cc0c:	b085      	sub	sp, #20
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	6078      	str	r0, [r7, #4]
 800cc12:	460b      	mov	r3, r1
 800cc14:	70fb      	strb	r3, [r7, #3]
 800cc16:	4613      	mov	r3, r2
 800cc18:	803b      	strh	r3, [r7, #0]
	uint8_t c=0;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800cc24:	78fa      	ldrb	r2, [r7, #3]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d901      	bls.n	800cc2e <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e015      	b.n	800cc5a <ModBUS_F03_Assign+0x50>
	}
	else
	{
		m2->_Holding_Registers[(a*2)+1]=b;
 800cc2e:	78fb      	ldrb	r3, [r7, #3]
 800cc30:	005b      	lsls	r3, r3, #1
 800cc32:	3301      	adds	r3, #1
 800cc34:	883a      	ldrh	r2, [r7, #0]
 800cc36:	b2d1      	uxtb	r1, r2
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	460a      	mov	r2, r1
 800cc3e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
		c=b>>8;
 800cc42:	883b      	ldrh	r3, [r7, #0]
 800cc44:	0a1b      	lsrs	r3, r3, #8
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(a*2)]=c;
 800cc4a:	78fb      	ldrb	r3, [r7, #3]
 800cc4c:	005b      	lsls	r3, r3, #1
 800cc4e:	687a      	ldr	r2, [r7, #4]
 800cc50:	4413      	add	r3, r2
 800cc52:	7bfa      	ldrb	r2, [r7, #15]
 800cc54:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

		return(0);
 800cc58:	2300      	movs	r3, #0
	}
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3714      	adds	r7, #20
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc64:	4770      	bx	lr

0800cc66 <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t a)
{
 800cc66:	b480      	push	{r7}
 800cc68:	b085      	sub	sp, #20
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
 800cc6e:	460b      	mov	r3, r1
 800cc70:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800cc72:	2300      	movs	r3, #0
 800cc74:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800cc76:	2300      	movs	r3, #0
 800cc78:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800cc80:	78fa      	ldrb	r2, [r7, #3]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d901      	bls.n	800cc8a <ModBUS_F03_Read+0x24>
	{
		return(1);
 800cc86:	2301      	movs	r3, #1
 800cc88:	e015      	b.n	800ccb6 <ModBUS_F03_Read+0x50>
	}
	else
	{
		n=m2->_Holding_Registers[(a*2)];
 800cc8a:	78fb      	ldrb	r3, [r7, #3]
 800cc8c:	005b      	lsls	r3, r3, #1
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	4413      	add	r3, r2
 800cc92:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800cc96:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800cc98:	89fb      	ldrh	r3, [r7, #14]
 800cc9a:	021b      	lsls	r3, r3, #8
 800cc9c:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(a*2)+1];
 800cc9e:	78fb      	ldrb	r3, [r7, #3]
 800cca0:	005b      	lsls	r3, r3, #1
 800cca2:	3301      	adds	r3, #1
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	4413      	add	r3, r2
 800cca8:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800ccac:	b29a      	uxth	r2, r3
 800ccae:	89fb      	ldrh	r3, [r7, #14]
 800ccb0:	4313      	orrs	r3, r2
 800ccb2:	81fb      	strh	r3, [r7, #14]

		/*m2->_Holding_Registers[(a*2)+1]=b;
		c=b>>8;
		m2->_Holding_Registers[(a*2)]=c;*/
		return(n);
 800ccb4:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3714      	adds	r7, #20
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr

0800ccc2 <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800ccc2:	b480      	push	{r7}
 800ccc4:	b083      	sub	sp, #12
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
 800ccca:	460b      	mov	r3, r1
 800cccc:	807b      	strh	r3, [r7, #2]
 800ccce:	4613      	mov	r3, r2
 800ccd0:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800ccd2:	887b      	ldrh	r3, [r7, #2]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	bf14      	ite	ne
 800ccd8:	2301      	movne	r3, #1
 800ccda:	2300      	moveq	r3, #0
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	461a      	mov	r2, r3
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
	addr&=0xF0;
 800cce6:	887b      	ldrh	r3, [r7, #2]
 800cce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ccec:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800ccee:	887b      	ldrh	r3, [r7, #2]
 800ccf0:	0a1b      	lsrs	r3, r3, #8
 800ccf2:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800ccf4:	887b      	ldrh	r3, [r7, #2]
 800ccf6:	f003 030f 	and.w	r3, r3, #15
 800ccfa:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	m2->_MBUS_2SND[1]=0x00;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
	m2->_MBUS_2SND[2]=0x00;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
	m2->_MBUS_2SND[3]=0x00;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
	m2->_MBUS_2SND[4]=0x00;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	m2->_MBUS_2SND[5]=0x06;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2206      	movs	r2, #6
 800cd28:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	m2->_MBUS_2SND[6]=m2->_address;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	781a      	ldrb	r2, [r3, #0]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
	m2->_MBUS_2SND[7]=0x03;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2203      	movs	r2, #3
 800cd3a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
	m2->_MBUS_2SND[8]=addr;
 800cd3e:	887b      	ldrh	r3, [r7, #2]
 800cd40:	b2da      	uxtb	r2, r3
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220

	m2->_MBUS_2SND[10]=0x00;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
	m2->_MBUS_2SND[11]=qty;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	787a      	ldrb	r2, [r7, #1]
 800cd54:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	220c      	movs	r2, #12
 800cd5c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

}
 800cd60:	bf00      	nop
 800cd62:	4618      	mov	r0, r3
 800cd64:	370c      	adds	r7, #12
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr
	...

0800cd70 <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b09c      	sub	sp, #112	; 0x70
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	791b      	ldrb	r3, [r3, #4]
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	f041 813f 	bne.w	800e000 <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f103 0212 	add.w	r2, r3, #18
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cd8e:	4619      	mov	r1, r3
 800cd90:	4610      	mov	r0, r2
 800cd92:	f7ff feeb 	bl	800cb6c <ModBUS_Check>
 800cd96:	4603      	mov	r3, r0
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	f001 812f 	beq.w	800dffc <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	7e5b      	ldrb	r3, [r3, #25]
 800cda2:	3b01      	subs	r3, #1
 800cda4:	2b0f      	cmp	r3, #15
 800cda6:	f201 80f3 	bhi.w	800df90 <ModBUS+0x1220>
 800cdaa:	a201      	add	r2, pc, #4	; (adr r2, 800cdb0 <ModBUS+0x40>)
 800cdac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb0:	0800cdf1 	.word	0x0800cdf1
 800cdb4:	0800d031 	.word	0x0800d031
 800cdb8:	0800d271 	.word	0x0800d271
 800cdbc:	0800d4a9 	.word	0x0800d4a9
 800cdc0:	0800d6e1 	.word	0x0800d6e1
 800cdc4:	0800d8f7 	.word	0x0800d8f7
 800cdc8:	0800df91 	.word	0x0800df91
 800cdcc:	0800df91 	.word	0x0800df91
 800cdd0:	0800df91 	.word	0x0800df91
 800cdd4:	0800df91 	.word	0x0800df91
 800cdd8:	0800df91 	.word	0x0800df91
 800cddc:	0800df91 	.word	0x0800df91
 800cde0:	0800df91 	.word	0x0800df91
 800cde4:	0800df91 	.word	0x0800df91
 800cde8:	0800dab3 	.word	0x0800dab3
 800cdec:	0800dd43 	.word	0x0800dd43

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	7d9a      	ldrb	r2, [r3, #22]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	7d5a      	ldrb	r2, [r3, #21]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	7d1a      	ldrb	r2, [r3, #20]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	7cda      	ldrb	r2, [r3, #19]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	7c9a      	ldrb	r2, [r3, #18]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800ce22:	2300      	movs	r3, #0
 800ce24:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	7a9b      	ldrb	r3, [r3, #10]
 800ce2a:	2b01      	cmp	r3, #1
 800ce2c:	f040 80e6 	bne.w	800cffc <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	7e9b      	ldrb	r3, [r3, #26]
 800ce34:	b29a      	uxth	r2, r3
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800ce42:	021b      	lsls	r3, r3, #8
 800ce44:	b29a      	uxth	r2, r3
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800ce52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ce56:	b29a      	uxth	r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8b3 2622 	ldrh.w	r2, [r3, #1570]	; 0x622
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	7edb      	ldrb	r3, [r3, #27]
 800ce68:	b29b      	uxth	r3, r3
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	b29a      	uxth	r2, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	7f1b      	ldrb	r3, [r3, #28]
 800ce78:	b29a      	uxth	r2, r3
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800ce86:	021b      	lsls	r3, r3, #8
 800ce88:	b29a      	uxth	r2, r3
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800ce96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ce9a:	b29a      	uxth	r2, r3
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	7f5b      	ldrb	r3, [r3, #29]
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	b29a      	uxth	r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 800cec4:	b29b      	uxth	r3, r3
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d87e      	bhi.n	800cfc8 <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800ced0:	461a      	mov	r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800ced8:	4413      	add	r3, r2
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	f892 2620 	ldrb.w	r2, [r2, #1568]	; 0x620
 800cee0:	4293      	cmp	r3, r2
 800cee2:	dc57      	bgt.n	800cf94 <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800cee4:	2300      	movs	r3, #0
 800cee6:	613b      	str	r3, [r7, #16]
 800cee8:	2300      	movs	r3, #0
 800ceea:	60fb      	str	r3, [r7, #12]
 800ceec:	2300      	movs	r3, #0
 800ceee:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cef0:	2300      	movs	r3, #0
 800cef2:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800cef4:	2300      	movs	r3, #0
 800cef6:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	f8b2 2622 	ldrh.w	r2, [r2, #1570]	; 0x622
 800cf04:	40d3      	lsrs	r3, r2
 800cf06:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800cf0e:	08db      	lsrs	r3, r3, #3
 800cf10:	b29b      	uxth	r3, r3
 800cf12:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800cf1a:	f003 0307 	and.w	r3, r3, #7
 800cf1e:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d102      	bne.n	800cf2c <ModBUS+0x1bc>
									{
										bytes=div;
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cf2a:	e002      	b.n	800cf32 <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	3301      	adds	r3, #1
 800cf30:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800cf32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf34:	b2da      	uxtb	r2, r3
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800cf3c:	e00e      	b.n	800cf5c <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800cf3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf40:	3308      	adds	r3, #8
 800cf42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cf44:	b2d1      	uxtb	r1, r2
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	4413      	add	r3, r2
 800cf4a:	460a      	mov	r2, r1
 800cf4c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800cf50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf52:	0a1b      	lsrs	r3, r3, #8
 800cf54:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800cf56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf58:	3b01      	subs	r3, #1
 800cf5a:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800cf5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	dced      	bgt.n	800cf3e <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2201      	movs	r2, #1
 800cf66:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800cf78:	3303      	adds	r3, #3
 800cf7a:	b2da      	uxtb	r2, r3
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf88:	1d9a      	adds	r2, r3, #6
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cf90:	f001 b8d4 	b.w	800e13c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2202      	movs	r2, #2
 800cf98:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x81;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2281      	movs	r2, #129	; 0x81
 800cfa0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2203      	movs	r2, #3
 800cfb0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cfba:	1d9a      	adds	r2, r3, #6
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800cfc2:	2302      	movs	r3, #2
 800cfc4:	f001 b8ba 	b.w	800e13c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2203      	movs	r2, #3
 800cfcc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x81;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2281      	movs	r2, #129	; 0x81
 800cfd4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2201      	movs	r2, #1
 800cfdc:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2203      	movs	r2, #3
 800cfe4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cfee:	1d9a      	adds	r2, r3, #6
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800cff6:	2303      	movs	r3, #3
 800cff8:	f001 b8a0 	b.w	800e13c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2201      	movs	r2, #1
 800d000:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x81;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2281      	movs	r2, #129	; 0x81
 800d008:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2201      	movs	r2, #1
 800d010:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2203      	movs	r2, #3
 800d018:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d022:	1d9a      	adds	r2, r3, #6
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d02a:	2301      	movs	r3, #1
 800d02c:	f001 b886 	b.w	800e13c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	7d9a      	ldrb	r2, [r3, #22]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	7d5a      	ldrb	r2, [r3, #21]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	7d1a      	ldrb	r2, [r3, #20]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	7cda      	ldrb	r2, [r3, #19]
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	7c9a      	ldrb	r2, [r3, #18]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800d062:	2300      	movs	r3, #0
 800d064:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	7adb      	ldrb	r3, [r3, #11]
 800d06a:	2b01      	cmp	r3, #1
 800d06c:	f040 80e6 	bne.w	800d23c <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	7e9b      	ldrb	r3, [r3, #26]
 800d074:	b29a      	uxth	r2, r3
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800d082:	021b      	lsls	r3, r3, #8
 800d084:	b29a      	uxth	r2, r3
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800d092:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d096:	b29a      	uxth	r2, r3
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	7edb      	ldrb	r3, [r3, #27]
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	4313      	orrs	r3, r2
 800d0ac:	b29a      	uxth	r2, r3
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	7f1b      	ldrb	r3, [r3, #28]
 800d0b8:	b29a      	uxth	r2, r3
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800d0c6:	021b      	lsls	r3, r3, #8
 800d0c8:	b29a      	uxth	r2, r3
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800d0d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d0da:	b29a      	uxth	r2, r3
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	7f5b      	ldrb	r3, [r3, #29]
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	b29a      	uxth	r2, r3
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
 800d104:	b29b      	uxth	r3, r3
 800d106:	429a      	cmp	r2, r3
 800d108:	d87e      	bhi.n	800d208 <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800d110:	461a      	mov	r2, r3
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800d118:	4413      	add	r3, r2
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	f892 2626 	ldrb.w	r2, [r2, #1574]	; 0x626
 800d120:	4293      	cmp	r3, r2
 800d122:	dc57      	bgt.n	800d1d4 <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800d124:	2300      	movs	r3, #0
 800d126:	623b      	str	r3, [r7, #32]
 800d128:	2300      	movs	r3, #0
 800d12a:	61fb      	str	r3, [r7, #28]
 800d12c:	2300      	movs	r3, #0
 800d12e:	667b      	str	r3, [r7, #100]	; 0x64
 800d130:	2300      	movs	r3, #0
 800d132:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800d134:	2300      	movs	r3, #0
 800d136:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	f8b2 2628 	ldrh.w	r2, [r2, #1576]	; 0x628
 800d144:	40d3      	lsrs	r3, r2
 800d146:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800d14e:	08db      	lsrs	r3, r3, #3
 800d150:	b29b      	uxth	r3, r3
 800d152:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800d15a:	f003 0307 	and.w	r3, r3, #7
 800d15e:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800d160:	69fb      	ldr	r3, [r7, #28]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d102      	bne.n	800d16c <ModBUS+0x3fc>
									{
										bytes=div;
 800d166:	6a3b      	ldr	r3, [r7, #32]
 800d168:	667b      	str	r3, [r7, #100]	; 0x64
 800d16a:	e002      	b.n	800d172 <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800d16c:	6a3b      	ldr	r3, [r7, #32]
 800d16e:	3301      	adds	r3, #1
 800d170:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800d172:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d174:	b2da      	uxtb	r2, r3
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800d17c:	e00e      	b.n	800d19c <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800d17e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d180:	3308      	adds	r3, #8
 800d182:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d184:	b2d1      	uxtb	r1, r2
 800d186:	687a      	ldr	r2, [r7, #4]
 800d188:	4413      	add	r3, r2
 800d18a:	460a      	mov	r2, r1
 800d18c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800d190:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d192:	0a1b      	lsrs	r3, r3, #8
 800d194:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800d196:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d198:	3b01      	subs	r3, #1
 800d19a:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800d19c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	dced      	bgt.n	800d17e <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2202      	movs	r2, #2
 800d1a6:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d1b8:	3303      	adds	r3, #3
 800d1ba:	b2da      	uxtb	r2, r3
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d1c8:	1d9a      	adds	r2, r3, #6
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d1d0:	f000 bfb4 	b.w	800e13c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2202      	movs	r2, #2
 800d1d8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x82;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2282      	movs	r2, #130	; 0x82
 800d1e0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2203      	movs	r2, #3
 800d1f0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d1fa:	1d9a      	adds	r2, r3, #6
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800d202:	2302      	movs	r3, #2
 800d204:	f000 bf9a 	b.w	800e13c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2203      	movs	r2, #3
 800d20c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x82;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2282      	movs	r2, #130	; 0x82
 800d214:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2201      	movs	r2, #1
 800d21c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2203      	movs	r2, #3
 800d224:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d22e:	1d9a      	adds	r2, r3, #6
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800d236:	2303      	movs	r3, #3
 800d238:	f000 bf80 	b.w	800e13c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2201      	movs	r2, #1
 800d240:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x82;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2282      	movs	r2, #130	; 0x82
 800d248:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2201      	movs	r2, #1
 800d250:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2203      	movs	r2, #3
 800d258:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d262:	1d9a      	adds	r2, r3, #6
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d26a:	2301      	movs	r3, #1
 800d26c:	f000 bf66 	b.w	800e13c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	7d9a      	ldrb	r2, [r3, #22]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	7d5a      	ldrb	r2, [r3, #21]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	7d1a      	ldrb	r2, [r3, #20]
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	7cda      	ldrb	r2, [r3, #19]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	7c9a      	ldrb	r2, [r3, #18]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	7b1b      	ldrb	r3, [r3, #12]
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	f040 80e2 	bne.w	800d474 <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	7e9b      	ldrb	r3, [r3, #26]
 800d2b4:	b29a      	uxth	r2, r3
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d2c2:	021b      	lsls	r3, r3, #8
 800d2c4:	b29a      	uxth	r2, r3
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d2d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d2d6:	b29a      	uxth	r2, r3
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8b3 262e 	ldrh.w	r2, [r3, #1582]	; 0x62e
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	7edb      	ldrb	r3, [r3, #27]
 800d2e8:	b29b      	uxth	r3, r3
 800d2ea:	4313      	orrs	r3, r2
 800d2ec:	b29a      	uxth	r2, r3
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	7f1b      	ldrb	r3, [r3, #28]
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d306:	021b      	lsls	r3, r3, #8
 800d308:	b29a      	uxth	r2, r3
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d316:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d31a:	b29a      	uxth	r2, r3
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	7f5b      	ldrb	r3, [r3, #29]
 800d32c:	b29b      	uxth	r3, r3
 800d32e:	4313      	orrs	r3, r2
 800d330:	b29a      	uxth	r2, r3
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800d344:	b29b      	uxth	r3, r3
 800d346:	429a      	cmp	r2, r3
 800d348:	d87a      	bhi.n	800d440 <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d350:	461a      	mov	r2, r3
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d358:	4413      	add	r3, r2
 800d35a:	687a      	ldr	r2, [r7, #4]
 800d35c:	f892 262c 	ldrb.w	r2, [r2, #1580]	; 0x62c
 800d360:	4293      	cmp	r3, r2
 800d362:	dc53      	bgt.n	800d40c <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800d364:	e029      	b.n	800d3ba <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d36c:	461a      	mov	r2, r3
 800d36e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d370:	4413      	add	r3, r2
 800d372:	005a      	lsls	r2, r3, #1
 800d374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d376:	005b      	lsls	r3, r3, #1
 800d378:	3309      	adds	r3, #9
 800d37a:	6879      	ldr	r1, [r7, #4]
 800d37c:	440a      	add	r2, r1
 800d37e:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800d382:	687a      	ldr	r2, [r7, #4]
 800d384:	4413      	add	r3, r2
 800d386:	460a      	mov	r2, r1
 800d388:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d392:	461a      	mov	r2, r3
 800d394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d396:	4413      	add	r3, r2
 800d398:	005b      	lsls	r3, r3, #1
 800d39a:	1c5a      	adds	r2, r3, #1
 800d39c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d39e:	3305      	adds	r3, #5
 800d3a0:	005b      	lsls	r3, r3, #1
 800d3a2:	6879      	ldr	r1, [r7, #4]
 800d3a4:	440a      	add	r2, r1
 800d3a6:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800d3aa:	687a      	ldr	r2, [r7, #4]
 800d3ac:	4413      	add	r3, r2
 800d3ae:	460a      	mov	r2, r1
 800d3b0:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800d3b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	dbce      	blt.n	800d366 <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	005b      	lsls	r3, r3, #1
 800d3d2:	b2da      	uxtb	r2, r3
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x03;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2203      	movs	r2, #3
 800d3de:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d3f0:	3303      	adds	r3, #3
 800d3f2:	b2da      	uxtb	r2, r3
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d400:	1d9a      	adds	r2, r3, #6
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d408:	f000 be98 	b.w	800e13c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2202      	movs	r2, #2
 800d410:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x83;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2283      	movs	r2, #131	; 0x83
 800d418:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2201      	movs	r2, #1
 800d420:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2203      	movs	r2, #3
 800d428:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d432:	1d9a      	adds	r2, r3, #6
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800d43a:	2302      	movs	r3, #2
 800d43c:	f000 be7e 	b.w	800e13c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2203      	movs	r2, #3
 800d444:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x83;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2283      	movs	r2, #131	; 0x83
 800d44c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2201      	movs	r2, #1
 800d454:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2203      	movs	r2, #3
 800d45c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d466:	1d9a      	adds	r2, r3, #6
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800d46e:	2303      	movs	r3, #3
 800d470:	f000 be64 	b.w	800e13c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2201      	movs	r2, #1
 800d478:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x83;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2283      	movs	r2, #131	; 0x83
 800d480:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2201      	movs	r2, #1
 800d488:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2203      	movs	r2, #3
 800d490:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d49a:	1d9a      	adds	r2, r3, #6
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	f000 be4a 	b.w	800e13c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	7d9a      	ldrb	r2, [r3, #22]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	7d5a      	ldrb	r2, [r3, #21]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	7d1a      	ldrb	r2, [r3, #20]
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	7cda      	ldrb	r2, [r3, #19]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	7c9a      	ldrb	r2, [r3, #18]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	7b5b      	ldrb	r3, [r3, #13]
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	f040 80e2 	bne.w	800d6ac <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	7e9b      	ldrb	r3, [r3, #26]
 800d4ec:	b29a      	uxth	r2, r3
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d4fa:	021b      	lsls	r3, r3, #8
 800d4fc:	b29a      	uxth	r2, r3
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d50a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d50e:	b29a      	uxth	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8b3 2634 	ldrh.w	r2, [r3, #1588]	; 0x634
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	7edb      	ldrb	r3, [r3, #27]
 800d520:	b29b      	uxth	r3, r3
 800d522:	4313      	orrs	r3, r2
 800d524:	b29a      	uxth	r2, r3
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	7f1b      	ldrb	r3, [r3, #28]
 800d530:	b29a      	uxth	r2, r3
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d53e:	021b      	lsls	r3, r3, #8
 800d540:	b29a      	uxth	r2, r3
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d54e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d552:	b29a      	uxth	r2, r3
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	7f5b      	ldrb	r3, [r3, #29]
 800d564:	b29b      	uxth	r3, r3
 800d566:	4313      	orrs	r3, r2
 800d568:	b29a      	uxth	r2, r3
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f893 3632 	ldrb.w	r3, [r3, #1586]	; 0x632
 800d57c:	b29b      	uxth	r3, r3
 800d57e:	429a      	cmp	r2, r3
 800d580:	d87a      	bhi.n	800d678 <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d588:	461a      	mov	r2, r3
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d590:	4413      	add	r3, r2
 800d592:	687a      	ldr	r2, [r7, #4]
 800d594:	f892 2632 	ldrb.w	r2, [r2, #1586]	; 0x632
 800d598:	4293      	cmp	r3, r2
 800d59a:	dc53      	bgt.n	800d644 <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800d59c:	e029      	b.n	800d5f2 <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5a8:	4413      	add	r3, r2
 800d5aa:	005a      	lsls	r2, r3, #1
 800d5ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5ae:	005b      	lsls	r3, r3, #1
 800d5b0:	3309      	adds	r3, #9
 800d5b2:	6879      	ldr	r1, [r7, #4]
 800d5b4:	440a      	add	r2, r1
 800d5b6:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	4413      	add	r3, r2
 800d5be:	460a      	mov	r2, r1
 800d5c0:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5ce:	4413      	add	r3, r2
 800d5d0:	005b      	lsls	r3, r3, #1
 800d5d2:	1c5a      	adds	r2, r3, #1
 800d5d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5d6:	3305      	adds	r3, #5
 800d5d8:	005b      	lsls	r3, r3, #1
 800d5da:	6879      	ldr	r1, [r7, #4]
 800d5dc:	440a      	add	r2, r1
 800d5de:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	4413      	add	r3, r2
 800d5e6:	460a      	mov	r2, r1
 800d5e8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800d5ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	dbce      	blt.n	800d59e <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d606:	b2db      	uxtb	r3, r3
 800d608:	005b      	lsls	r3, r3, #1
 800d60a:	b2da      	uxtb	r2, r3
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x04;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2204      	movs	r2, #4
 800d616:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2201      	movs	r2, #1
 800d61e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d628:	3303      	adds	r3, #3
 800d62a:	b2da      	uxtb	r2, r3
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d638:	1d9a      	adds	r2, r3, #6
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d640:	f000 bd7c 	b.w	800e13c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2202      	movs	r2, #2
 800d648:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x84;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2284      	movs	r2, #132	; 0x84
 800d650:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2201      	movs	r2, #1
 800d658:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2203      	movs	r2, #3
 800d660:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d66a:	1d9a      	adds	r2, r3, #6
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800d672:	2302      	movs	r3, #2
 800d674:	f000 bd62 	b.w	800e13c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2203      	movs	r2, #3
 800d67c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x84;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2284      	movs	r2, #132	; 0x84
 800d684:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2201      	movs	r2, #1
 800d68c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2203      	movs	r2, #3
 800d694:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d69e:	1d9a      	adds	r2, r3, #6
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800d6a6:	2303      	movs	r3, #3
 800d6a8:	f000 bd48 	b.w	800e13c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x84;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2284      	movs	r2, #132	; 0x84
 800d6b8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2201      	movs	r2, #1
 800d6c0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2203      	movs	r2, #3
 800d6c8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d6d2:	1d9a      	adds	r2, r3, #6
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d6da:	2301      	movs	r3, #1
 800d6dc:	f000 bd2e 	b.w	800e13c <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	7d9a      	ldrb	r2, [r3, #22]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	7d5a      	ldrb	r2, [r3, #21]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	7d1a      	ldrb	r2, [r3, #20]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	7cda      	ldrb	r2, [r3, #19]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	7c9a      	ldrb	r2, [r3, #18]
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

								int qty_reg=0;
 800d712:	2300      	movs	r3, #0
 800d714:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	7b9b      	ldrb	r3, [r3, #14]
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	f040 80d1 	bne.w	800d8c2 <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	7e9b      	ldrb	r3, [r3, #26]
 800d724:	b29a      	uxth	r2, r3
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800d732:	021b      	lsls	r3, r3, #8
 800d734:	b29a      	uxth	r2, r3
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800d742:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d746:	b29a      	uxth	r2, r3
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f8b3 263a 	ldrh.w	r2, [r3, #1594]	; 0x63a
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	7edb      	ldrb	r3, [r3, #27]
 800d758:	b29b      	uxth	r3, r3
 800d75a:	4313      	orrs	r3, r2
 800d75c:	b29a      	uxth	r2, r3
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	7f1b      	ldrb	r3, [r3, #28]
 800d768:	b29a      	uxth	r2, r3
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d776:	021b      	lsls	r3, r3, #8
 800d778:	b29a      	uxth	r2, r3
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d786:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d78a:	b29a      	uxth	r2, r3
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f8b3 263c 	ldrh.w	r2, [r3, #1596]	; 0x63c
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	7f5b      	ldrb	r3, [r3, #29]
 800d79c:	b29b      	uxth	r3, r3
 800d79e:	4313      	orrs	r3, r2
 800d7a0:	b29a      	uxth	r2, r3
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f893 3638 	ldrb.w	r3, [r3, #1592]	; 0x638
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	dd69      	ble.n	800d88e <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d005      	beq.n	800d7d0 <ModBUS+0xa60>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d7ca:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d7ce:	d144      	bne.n	800d85a <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d7d6:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d7da:	d10d      	bne.n	800d7f8 <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	f8b2 263a 	ldrh.w	r2, [r2, #1594]	; 0x63a
 800d7e8:	4611      	mov	r1, r2
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	408a      	lsls	r2, r1
 800d7ee:	431a      	orrs	r2, r3
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800d7f6:	e003      	b.n	800d800 <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	7f5a      	ldrb	r2, [r3, #29]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	7f1a      	ldrb	r2, [r3, #28]
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	7eda      	ldrb	r2, [r3, #27]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	7e9a      	ldrb	r2, [r3, #26]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x05;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2205      	movs	r2, #5
 800d82c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2201      	movs	r2, #1
 800d834:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d83e:	3306      	adds	r3, #6
 800d840:	b2da      	uxtb	r2, r3
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d84e:	1d9a      	adds	r2, r3, #6
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800d856:	f000 bc71 	b.w	800e13c <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2202      	movs	r2, #2
 800d85e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x85;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2285      	movs	r2, #133	; 0x85
 800d866:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2201      	movs	r2, #1
 800d86e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2203      	movs	r2, #3
 800d876:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d880:	1d9a      	adds	r2, r3, #6
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
												return(2);//Error excepcion 02
 800d888:	2302      	movs	r3, #2
 800d88a:	f000 bc57 	b.w	800e13c <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2203      	movs	r2, #3
 800d892:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
											m3->_MBUS_2SND[7]=0x85;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2285      	movs	r2, #133	; 0x85
 800d89a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2203      	movs	r2, #3
 800d8aa:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d8b4:	1d9a      	adds	r2, r3, #6
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
											return(3);//Erroe excepcion 03
 800d8bc:	2303      	movs	r3, #3
 800d8be:	f000 bc3d 	b.w	800e13c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x85;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2285      	movs	r2, #133	; 0x85
 800d8ce:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2203      	movs	r2, #3
 800d8de:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d8e8:	1d9a      	adds	r2, r3, #6
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(1);//Error excepcion 01
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	f000 bc23 	b.w	800e13c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	7d9a      	ldrb	r2, [r3, #22]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	7d5a      	ldrb	r2, [r3, #21]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	7d1a      	ldrb	r2, [r3, #20]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	7cda      	ldrb	r2, [r3, #19]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	7c9a      	ldrb	r2, [r3, #18]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800d928:	2300      	movs	r3, #0
 800d92a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d92c:	2300      	movs	r3, #0
 800d92e:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	7bdb      	ldrb	r3, [r3, #15]
 800d934:	2b01      	cmp	r3, #1
 800d936:	f040 80a3 	bne.w	800da80 <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	7e9b      	ldrb	r3, [r3, #26]
 800d93e:	b29a      	uxth	r2, r3
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800d94c:	021b      	lsls	r3, r3, #8
 800d94e:	b29a      	uxth	r2, r3
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800d95c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d960:	b29a      	uxth	r2, r3
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	7edb      	ldrb	r3, [r3, #27]
 800d972:	b29b      	uxth	r3, r3
 800d974:	4313      	orrs	r3, r2
 800d976:	b29a      	uxth	r2, r3
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646

							start_address=m3->_06_WriteSingleRegister_Addr;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800d984:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	7f1b      	ldrb	r3, [r3, #28]
 800d98a:	b29a      	uxth	r2, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800d998:	021b      	lsls	r3, r3, #8
 800d99a:	b29a      	uxth	r2, r3
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800d9a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d9ac:	b29a      	uxth	r2, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f8b3 2648 	ldrh.w	r2, [r3, #1608]	; 0x648
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	7f5b      	ldrb	r3, [r3, #29]
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	4313      	orrs	r3, r2
 800d9c2:	b29a      	uxth	r2, r3
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d838      	bhi.n	800da4e <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800d9dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	7f11      	ldrb	r1, [r2, #28]
 800d9e2:	687a      	ldr	r2, [r7, #4]
 800d9e4:	4413      	add	r3, r2
 800d9e6:	460a      	mov	r2, r1
 800d9e8:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800d9ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	687a      	ldr	r2, [r7, #4]
 800d9f2:	7f51      	ldrb	r1, [r2, #29]
 800d9f4:	687a      	ldr	r2, [r7, #4]
 800d9f6:	4413      	add	r3, r2
 800d9f8:	460a      	mov	r2, r1
 800d9fa:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	7f5a      	ldrb	r2, [r3, #29]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	7f1a      	ldrb	r2, [r3, #28]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	7eda      	ldrb	r2, [r3, #27]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	7e9a      	ldrb	r2, [r3, #26]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x06;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2206      	movs	r2, #6
 800da2a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2201      	movs	r2, #1
 800da32:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2206      	movs	r2, #6
 800da3a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800da44:	1d9a      	adds	r2, r3, #6
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800da4c:	e376      	b.n	800e13c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2202      	movs	r2, #2
 800da52:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x86;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2286      	movs	r2, #134	; 0x86
 800da5a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2201      	movs	r2, #1
 800da62:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2203      	movs	r2, #3
 800da6a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800da74:	1d9a      	adds	r2, r3, #6
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800da7c:	2302      	movs	r3, #2
 800da7e:	e35d      	b.n	800e13c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2201      	movs	r2, #1
 800da84:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x86;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2286      	movs	r2, #134	; 0x86
 800da8c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2201      	movs	r2, #1
 800da94:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2203      	movs	r2, #3
 800da9c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800daa6:	1d9a      	adds	r2, r3, #6
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800daae:	2301      	movs	r3, #1
 800dab0:	e344      	b.n	800e13c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	7d9a      	ldrb	r2, [r3, #22]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	7d5a      	ldrb	r2, [r3, #21]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	7d1a      	ldrb	r2, [r3, #20]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	7cda      	ldrb	r2, [r3, #19]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	7c9a      	ldrb	r2, [r3, #18]
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800dae4:	2300      	movs	r3, #0
 800dae6:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	7c1b      	ldrb	r3, [r3, #16]
 800daec:	2b01      	cmp	r3, #1
 800daee:	f040 810f 	bne.w	800dd10 <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	7e9b      	ldrb	r3, [r3, #26]
 800daf6:	b29a      	uxth	r2, r3
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800db04:	021b      	lsls	r3, r3, #8
 800db06:	b29a      	uxth	r2, r3
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800db14:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800db18:	b29a      	uxth	r2, r3
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8b3 2640 	ldrh.w	r2, [r3, #1600]	; 0x640
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	7edb      	ldrb	r3, [r3, #27]
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	4313      	orrs	r3, r2
 800db2e:	b29a      	uxth	r2, r3
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	7f1b      	ldrb	r3, [r3, #28]
 800db3a:	b29a      	uxth	r2, r3
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800db48:	021b      	lsls	r3, r3, #8
 800db4a:	b29a      	uxth	r2, r3
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800db58:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800db5c:	b29a      	uxth	r2, r3
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	7f5b      	ldrb	r3, [r3, #29]
 800db6e:	b29b      	uxth	r3, r3
 800db70:	4313      	orrs	r3, r2
 800db72:	b29a      	uxth	r2, r3
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f893 363e 	ldrb.w	r3, [r3, #1598]	; 0x63e
 800db86:	b29b      	uxth	r3, r3
 800db88:	429a      	cmp	r2, r3
 800db8a:	f200 80a8 	bhi.w	800dcde <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800db94:	461a      	mov	r2, r3
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800db9c:	4413      	add	r3, r2
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	f892 263e 	ldrb.w	r2, [r2, #1598]	; 0x63e
 800dba4:	4293      	cmp	r3, r2
 800dba6:	f300 8081 	bgt.w	800dcac <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	657b      	str	r3, [r7, #84]	; 0x54
 800dbae:	2300      	movs	r3, #0
 800dbb0:	653b      	str	r3, [r7, #80]	; 0x50
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	7f9b      	ldrb	r3, [r3, #30]
 800dbbe:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800dbc0:	e00e      	b.n	800dbe0 <ModBUS+0xe70>
									{
										data=data<<8;
 800dbc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbc4:	021b      	lsls	r3, r3, #8
 800dbc6:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800dbc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbca:	330c      	adds	r3, #12
 800dbcc:	687a      	ldr	r2, [r7, #4]
 800dbce:	4413      	add	r3, r2
 800dbd0:	7c9b      	ldrb	r3, [r3, #18]
 800dbd2:	461a      	mov	r2, r3
 800dbd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbd6:	4313      	orrs	r3, r2
 800dbd8:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800dbda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbdc:	3b01      	subs	r3, #1
 800dbde:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800dbe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d1ed      	bne.n	800dbc2 <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800dbec:	461a      	mov	r2, r3
 800dbee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbf0:	4093      	lsls	r3, r2
 800dbf2:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800dbf4:	e00f      	b.n	800dc16 <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800dbfc:	461a      	mov	r2, r3
 800dbfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc00:	4413      	add	r3, r2
 800dc02:	2201      	movs	r2, #1
 800dc04:	fa02 f303 	lsl.w	r3, r2, r3
 800dc08:	461a      	mov	r2, r3
 800dc0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc0c:	4313      	orrs	r3, r2
 800dc0e:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800dc10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc12:	3301      	adds	r3, #1
 800dc14:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800dc1c:	461a      	mov	r2, r3
 800dc1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d3e8      	bcc.n	800dbf6 <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800dc24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc26:	43db      	mvns	r3, r3
 800dc28:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800dc30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc32:	401a      	ands	r2, r3
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c


									data &= ~mascara;
 800dc3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc3c:	43db      	mvns	r3, r3
 800dc3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dc40:	4013      	ands	r3, r2
 800dc42:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800dc4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc4c:	431a      	orrs	r2, r3
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	7f5a      	ldrb	r2, [r3, #29]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	7f1a      	ldrb	r2, [r3, #28]
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	7eda      	ldrb	r2, [r3, #27]
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	7e9a      	ldrb	r2, [r3, #26]
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x0F;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	220f      	movs	r2, #15
 800dc80:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2201      	movs	r2, #1
 800dc88:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800dc92:	3306      	adds	r3, #6
 800dc94:	b2da      	uxtb	r2, r3
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dca2:	1d9a      	adds	r2, r3, #6
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800dcaa:	e247      	b.n	800e13c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2202      	movs	r2, #2
 800dcb0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x8F;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	228f      	movs	r2, #143	; 0x8f
 800dcb8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2203      	movs	r2, #3
 800dcc8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dcd2:	1d9a      	adds	r2, r3, #6
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800dcda:	2302      	movs	r3, #2
 800dcdc:	e22e      	b.n	800e13c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2203      	movs	r2, #3
 800dce2:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x8F;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	228f      	movs	r2, #143	; 0x8f
 800dcea:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2203      	movs	r2, #3
 800dcfa:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dd04:	1d9a      	adds	r2, r3, #6
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800dd0c:	2303      	movs	r3, #3
 800dd0e:	e215      	b.n	800e13c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2201      	movs	r2, #1
 800dd14:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x8F;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	228f      	movs	r2, #143	; 0x8f
 800dd1c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2201      	movs	r2, #1
 800dd24:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2203      	movs	r2, #3
 800dd2c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dd36:	1d9a      	adds	r2, r3, #6
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800dd3e:	2301      	movs	r3, #1
 800dd40:	e1fc      	b.n	800e13c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	7d9a      	ldrb	r2, [r3, #22]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	7d5a      	ldrb	r2, [r3, #21]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	7d1a      	ldrb	r2, [r3, #20]
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	7cda      	ldrb	r2, [r3, #19]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	7c9a      	ldrb	r2, [r3, #18]
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800dd74:	2300      	movs	r3, #0
 800dd76:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	7c5b      	ldrb	r3, [r3, #17]
 800dd82:	2b01      	cmp	r3, #1
 800dd84:	f040 80eb 	bne.w	800df5e <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	7e9b      	ldrb	r3, [r3, #26]
 800dd8c:	b29a      	uxth	r2, r3
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800dd9a:	021b      	lsls	r3, r3, #8
 800dd9c:	b29a      	uxth	r2, r3
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800ddaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ddae:	b29a      	uxth	r2, r3
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8b3 264c 	ldrh.w	r2, [r3, #1612]	; 0x64c
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	7edb      	ldrb	r3, [r3, #27]
 800ddc0:	b29b      	uxth	r3, r3
 800ddc2:	4313      	orrs	r3, r2
 800ddc4:	b29a      	uxth	r2, r3
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800ddd2:	005b      	lsls	r3, r3, #1
 800ddd4:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	7f1b      	ldrb	r3, [r3, #28]
 800ddda:	b29a      	uxth	r2, r3
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800dde8:	021b      	lsls	r3, r3, #8
 800ddea:	b29a      	uxth	r2, r3
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800ddf8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ddfc:	b29a      	uxth	r2, r3
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	7f5b      	ldrb	r3, [r3, #29]
 800de0e:	b29b      	uxth	r3, r3
 800de10:	4313      	orrs	r3, r2
 800de12:	b29a      	uxth	r2, r3
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 800de26:	b29b      	uxth	r3, r3
 800de28:	429a      	cmp	r2, r3
 800de2a:	d87f      	bhi.n	800df2c <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800de32:	461a      	mov	r2, r3
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800de3a:	4413      	add	r3, r2
 800de3c:	687a      	ldr	r2, [r7, #4]
 800de3e:	f892 264a 	ldrb.w	r2, [r2, #1610]	; 0x64a
 800de42:	4293      	cmp	r3, r2
 800de44:	dc59      	bgt.n	800defa <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800de46:	e029      	b.n	800de9c <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800de48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800de4c:	f103 020d 	add.w	r2, r3, #13
 800de50:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800de52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800de56:	440b      	add	r3, r1
 800de58:	6879      	ldr	r1, [r7, #4]
 800de5a:	440a      	add	r2, r1
 800de5c:	7c91      	ldrb	r1, [r2, #18]
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	4413      	add	r3, r2
 800de62:	460a      	mov	r2, r1
 800de64:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800de68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800de6c:	3301      	adds	r3, #1
 800de6e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800de72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800de76:	f103 020d 	add.w	r2, r3, #13
 800de7a:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800de7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800de80:	440b      	add	r3, r1
 800de82:	6879      	ldr	r1, [r7, #4]
 800de84:	440a      	add	r2, r1
 800de86:	7c91      	ldrb	r1, [r2, #18]
 800de88:	687a      	ldr	r2, [r7, #4]
 800de8a:	4413      	add	r3, r2
 800de8c:	460a      	mov	r2, r1
 800de8e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										qty_reg++;
 800de92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800de96:	3301      	adds	r3, #1
 800de98:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	7f9b      	ldrb	r3, [r3, #30]
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800dea6:	429a      	cmp	r2, r3
 800dea8:	d3ce      	bcc.n	800de48 <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	7f5a      	ldrb	r2, [r3, #29]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	7f1a      	ldrb	r2, [r3, #28]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	7eda      	ldrb	r2, [r3, #27]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	7e9a      	ldrb	r2, [r3, #26]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x10;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2210      	movs	r2, #16
 800ded6:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2201      	movs	r2, #1
 800dede:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2206      	movs	r2, #6
 800dee6:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800def0:	1d9a      	adds	r2, r3, #6
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800def8:	e120      	b.n	800e13c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2202      	movs	r2, #2
 800defe:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x90;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2290      	movs	r2, #144	; 0x90
 800df06:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2201      	movs	r2, #1
 800df0e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2203      	movs	r2, #3
 800df16:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800df20:	1d9a      	adds	r2, r3, #6
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800df28:	2302      	movs	r3, #2
 800df2a:	e107      	b.n	800e13c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2203      	movs	r2, #3
 800df30:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x90;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2290      	movs	r2, #144	; 0x90
 800df38:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2201      	movs	r2, #1
 800df40:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2203      	movs	r2, #3
 800df48:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800df52:	1d9a      	adds	r2, r3, #6
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800df5a:	2303      	movs	r3, #3
 800df5c:	e0ee      	b.n	800e13c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2201      	movs	r2, #1
 800df62:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x90;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2290      	movs	r2, #144	; 0x90
 800df6a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2201      	movs	r2, #1
 800df72:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2203      	movs	r2, #3
 800df7a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800df84:	1d9a      	adds	r2, r3, #6
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800df8c:	2301      	movs	r3, #1
 800df8e:	e0d5      	b.n	800e13c <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2201      	movs	r2, #1
 800df94:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	7e5b      	ldrb	r3, [r3, #25]
 800df9c:	3b80      	subs	r3, #128	; 0x80
 800df9e:	b2da      	uxtb	r2, r3
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	7e1a      	ldrb	r2, [r3, #24]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
					m3->_MBUS_2SND[5]=0x03;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2203      	movs	r2, #3
 800dfb4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	7d9a      	ldrb	r2, [r3, #22]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	7d5a      	ldrb	r2, [r3, #21]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	7d1a      	ldrb	r2, [r3, #20]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	7cda      	ldrb	r2, [r3, #19]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	7c9a      	ldrb	r2, [r3, #18]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dff0:	1d9a      	adds	r2, r3, #6
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
					return(1);
 800dff8:	2301      	movs	r3, #1
 800dffa:	e09f      	b.n	800e13c <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800dffc:	2301      	movs	r3, #1
 800dffe:	e09d      	b.n	800e13c <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	791b      	ldrb	r3, [r3, #4]
 800e004:	2b00      	cmp	r3, #0
 800e006:	f040 8099 	bne.w	800e13c <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f103 0212 	add.w	r2, r3, #18
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e016:	4619      	mov	r1, r3
 800e018:	4610      	mov	r0, r2
 800e01a:	f7fe fda7 	bl	800cb6c <ModBUS_Check>
 800e01e:	4603      	mov	r3, r0
 800e020:	2b00      	cmp	r3, #0
 800e022:	f000 808b 	beq.w	800e13c <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f7fe fdbf 	bl	800cbaa <ModBUS_Check_tid>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d04f      	beq.n	800e0d2 <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	7e5b      	ldrb	r3, [r3, #25]
 800e036:	2b03      	cmp	r3, #3
 800e038:	d143      	bne.n	800e0c2 <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800e03a:	2300      	movs	r3, #0
 800e03c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800e03e:	2300      	movs	r3, #0
 800e040:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800e04a:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800e04c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e04e:	021b      	lsls	r3, r3, #8
 800e050:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
 800e058:	b29a      	uxth	r2, r3
 800e05a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e05c:	4313      	orrs	r3, r2
 800e05e:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 800e066:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800e06a:	2300      	movs	r3, #0
 800e06c:	643b      	str	r3, [r7, #64]	; 0x40
 800e06e:	e022      	b.n	800e0b6 <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800e070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e072:	005b      	lsls	r3, r3, #1
 800e074:	f103 0209 	add.w	r2, r3, #9
 800e078:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800e07a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e07c:	440b      	add	r3, r1
 800e07e:	005b      	lsls	r3, r3, #1
 800e080:	6879      	ldr	r1, [r7, #4]
 800e082:	440a      	add	r2, r1
 800e084:	7c91      	ldrb	r1, [r2, #18]
 800e086:	687a      	ldr	r2, [r7, #4]
 800e088:	4413      	add	r3, r2
 800e08a:	460a      	mov	r2, r1
 800e08c:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800e090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e092:	3305      	adds	r3, #5
 800e094:	005a      	lsls	r2, r3, #1
 800e096:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800e098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e09a:	440b      	add	r3, r1
 800e09c:	005b      	lsls	r3, r3, #1
 800e09e:	3301      	adds	r3, #1
 800e0a0:	6879      	ldr	r1, [r7, #4]
 800e0a2:	440a      	add	r2, r1
 800e0a4:	7c91      	ldrb	r1, [r2, #18]
 800e0a6:	687a      	ldr	r2, [r7, #4]
 800e0a8:	4413      	add	r3, r2
 800e0aa:	460a      	mov	r2, r1
 800e0ac:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
						for (int i=0;i< qty; i++)
 800e0b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	643b      	str	r3, [r7, #64]	; 0x40
 800e0b6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800e0ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	dbd7      	blt.n	800e070 <ModBUS+0x1300>

						}


					}
					break;
 800e0c0:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	7ddb      	ldrb	r3, [r3, #23]
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	7e9b      	ldrb	r3, [r3, #26]
 800e0cc:	1ad3      	subs	r3, r2, r3
 800e0ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800e0d0:	e034      	b.n	800e13c <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	7e5b      	ldrb	r3, [r3, #25]
 800e0d6:	3b81      	subs	r3, #129	; 0x81
 800e0d8:	2b15      	cmp	r3, #21
 800e0da:	d82f      	bhi.n	800e13c <ModBUS+0x13cc>
 800e0dc:	a201      	add	r2, pc, #4	; (adr r2, 800e0e4 <ModBUS+0x1374>)
 800e0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0e2:	bf00      	nop
 800e0e4:	0800e13d 	.word	0x0800e13d
 800e0e8:	0800e13d 	.word	0x0800e13d
 800e0ec:	0800e13d 	.word	0x0800e13d
 800e0f0:	0800e13d 	.word	0x0800e13d
 800e0f4:	0800e13d 	.word	0x0800e13d
 800e0f8:	0800e13d 	.word	0x0800e13d
 800e0fc:	0800e13d 	.word	0x0800e13d
 800e100:	0800e13d 	.word	0x0800e13d
 800e104:	0800e13d 	.word	0x0800e13d
 800e108:	0800e13d 	.word	0x0800e13d
 800e10c:	0800e13d 	.word	0x0800e13d
 800e110:	0800e13d 	.word	0x0800e13d
 800e114:	0800e13d 	.word	0x0800e13d
 800e118:	0800e13d 	.word	0x0800e13d
 800e11c:	0800e13d 	.word	0x0800e13d
 800e120:	0800e13d 	.word	0x0800e13d
 800e124:	0800e13d 	.word	0x0800e13d
 800e128:	0800e13d 	.word	0x0800e13d
 800e12c:	0800e13d 	.word	0x0800e13d
 800e130:	0800e13d 	.word	0x0800e13d
 800e134:	0800e13d 	.word	0x0800e13d
 800e138:	0800e13d 	.word	0x0800e13d
			}
		}
	}


}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3770      	adds	r7, #112	; 0x70
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <SPI_ETH>:

#include "ETH_W5100.h"


uint8_t  SPI_ETH(struct  W5100_SPI * x )
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b084      	sub	sp, #16
 800e148:	af02      	add	r7, sp, #8
 800e14a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6858      	ldr	r0, [r3, #4]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	891b      	ldrh	r3, [r3, #8]
 800e154:	2200      	movs	r2, #0
 800e156:	4619      	mov	r1, r3
 800e158:	f7f5 fa2c 	bl	80035b4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6818      	ldr	r0, [r3, #0]
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f103 0114 	add.w	r1, r3, #20
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f103 0218 	add.w	r2, r3, #24
 800e16c:	2364      	movs	r3, #100	; 0x64
 800e16e:	9300      	str	r3, [sp, #0]
 800e170:	2304      	movs	r3, #4
 800e172:	f7f5 ff34 	bl	8003fde <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6858      	ldr	r0, [r3, #4]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	891b      	ldrh	r3, [r3, #8]
 800e17e:	2201      	movs	r2, #1
 800e180:	4619      	mov	r1, r3
 800e182:	f7f5 fa17 	bl	80035b4 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	7edb      	ldrb	r3, [r3, #27]
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3708      	adds	r7, #8
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}

0800e192 <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5100_SPI * x, uint8_t addrh, uint8_t addrl, uint8_t op, uint8_t * data, uint8_t lnght)
{
 800e192:	b580      	push	{r7, lr}
 800e194:	b086      	sub	sp, #24
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
 800e19a:	4608      	mov	r0, r1
 800e19c:	4611      	mov	r1, r2
 800e19e:	461a      	mov	r2, r3
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	70fb      	strb	r3, [r7, #3]
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	70bb      	strb	r3, [r7, #2]
 800e1a8:	4613      	mov	r3, r2
 800e1aa:	707b      	strb	r3, [r7, #1]
 uint16_t res=0;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	82fb      	strh	r3, [r7, #22]

 x->TX[0]= op; //asigno lectura o escritura
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	787a      	ldrb	r2, [r7, #1]
 800e1b4:	751a      	strb	r2, [r3, #20]
 x->TX[1]= addrh;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	78fa      	ldrb	r2, [r7, #3]
 800e1ba:	755a      	strb	r2, [r3, #21]
 x->TX[2]= addrl;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	78ba      	ldrb	r2, [r7, #2]
 800e1c0:	759a      	strb	r2, [r3, #22]
 x->TX[3]=0x00;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	75da      	strb	r2, [r3, #23]
 if(op == SPI_WRITE)
 800e1c8:	787b      	ldrb	r3, [r7, #1]
 800e1ca:	2bf0      	cmp	r3, #240	; 0xf0
 800e1cc:	d11d      	bne.n	800e20a <SPI_ETH_REG+0x78>
 {
	 for(int i=0; i<(lnght); i++)
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	613b      	str	r3, [r7, #16]
 800e1d2:	e013      	b.n	800e1fc <SPI_ETH_REG+0x6a>
	 {
		x->TX[3]=data[i];
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	6a3a      	ldr	r2, [r7, #32]
 800e1d8:	4413      	add	r3, r2
 800e1da:	781a      	ldrb	r2, [r3, #0]
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f7ff ffaf 	bl	800e144 <SPI_ETH>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	82fb      	strh	r3, [r7, #22]
		x->TX[2]++;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	7d9b      	ldrb	r3, [r3, #22]
 800e1ee:	3301      	adds	r3, #1
 800e1f0:	b2da      	uxtb	r2, r3
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	759a      	strb	r2, [r3, #22]
	 for(int i=0; i<(lnght); i++)
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	3301      	adds	r3, #1
 800e1fa:	613b      	str	r3, [r7, #16]
 800e1fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e200:	693a      	ldr	r2, [r7, #16]
 800e202:	429a      	cmp	r2, r3
 800e204:	dbe6      	blt.n	800e1d4 <SPI_ETH_REG+0x42>
	 }
	 return(res);
 800e206:	8afb      	ldrh	r3, [r7, #22]
 800e208:	e037      	b.n	800e27a <SPI_ETH_REG+0xe8>
 }
	 if(op == SPI_READ)
 800e20a:	787b      	ldrb	r3, [r7, #1]
 800e20c:	2b0f      	cmp	r3, #15
 800e20e:	d134      	bne.n	800e27a <SPI_ETH_REG+0xe8>
	 {
		 x->TX[3]=0x00;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2200      	movs	r2, #0
 800e214:	75da      	strb	r2, [r3, #23]
		 if (lnght==2)
 800e216:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e21a:	2b02      	cmp	r3, #2
 800e21c:	d120      	bne.n	800e260 <SPI_ETH_REG+0xce>
		{
		for(int i=0; i<(lnght); i++)
 800e21e:	2300      	movs	r3, #0
 800e220:	60fb      	str	r3, [r7, #12]
 800e222:	e016      	b.n	800e252 <SPI_ETH_REG+0xc0>
			{
			res|=SPI_ETH(x);
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f7ff ff8d 	bl	800e144 <SPI_ETH>
 800e22a:	4603      	mov	r3, r0
 800e22c:	b29a      	uxth	r2, r3
 800e22e:	8afb      	ldrh	r3, [r7, #22]
 800e230:	4313      	orrs	r3, r2
 800e232:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	7d9b      	ldrb	r3, [r3, #22]
 800e238:	3301      	adds	r3, #1
 800e23a:	b2da      	uxtb	r2, r3
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	759a      	strb	r2, [r3, #22]
			if (i==0)res=res<<8;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d102      	bne.n	800e24c <SPI_ETH_REG+0xba>
 800e246:	8afb      	ldrh	r3, [r7, #22]
 800e248:	021b      	lsls	r3, r3, #8
 800e24a:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	3301      	adds	r3, #1
 800e250:	60fb      	str	r3, [r7, #12]
 800e252:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e256:	68fa      	ldr	r2, [r7, #12]
 800e258:	429a      	cmp	r2, r3
 800e25a:	dbe3      	blt.n	800e224 <SPI_ETH_REG+0x92>
			}
		 return(res);
 800e25c:	8afb      	ldrh	r3, [r7, #22]
 800e25e:	e00c      	b.n	800e27a <SPI_ETH_REG+0xe8>
		}else
		{
			res=SPI_ETH(x);
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f7ff ff6f 	bl	800e144 <SPI_ETH>
 800e266:	4603      	mov	r3, r0
 800e268:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	7d9b      	ldrb	r3, [r3, #22]
 800e26e:	3301      	adds	r3, #1
 800e270:	b2da      	uxtb	r2, r3
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	759a      	strb	r2, [r3, #22]
			return(res);
 800e276:	8afb      	ldrh	r3, [r7, #22]
 800e278:	e7ff      	b.n	800e27a <SPI_ETH_REG+0xe8>
		}
 	 }
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3718      	adds	r7, #24
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}

0800e282 <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5100_SPI * x, uint16_t addr, uint16_t  data)
{
 800e282:	b580      	push	{r7, lr}
 800e284:	b086      	sub	sp, #24
 800e286:	af00      	add	r7, sp, #0
 800e288:	6078      	str	r0, [r7, #4]
 800e28a:	460b      	mov	r3, r1
 800e28c:	807b      	strh	r3, [r7, #2]
 800e28e:	4613      	mov	r3, r2
 800e290:	803b      	strh	r3, [r7, #0]
 uint16_t res=0;
 800e292:	2300      	movs	r3, #0
 800e294:	82fb      	strh	r3, [r7, #22]
 uint8_t num[2];

 x->TX[0]= SPI_WRITE; //asigno lectura o escritura
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	22f0      	movs	r2, #240	; 0xf0
 800e29a:	751a      	strb	r2, [r3, #20]

 num[1] = data & 0x00FF ;
 800e29c:	883b      	ldrh	r3, [r7, #0]
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	737b      	strb	r3, [r7, #13]
 num[0] = (data & 0xFF00)>>8 ;
 800e2a2:	883b      	ldrh	r3, [r7, #0]
 800e2a4:	0a1b      	lsrs	r3, r3, #8
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	b2db      	uxtb	r3, r3
 800e2aa:	733b      	strb	r3, [r7, #12]

	 for(int i=0; i<(2); i++)
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	613b      	str	r3, [r7, #16]
 800e2b0:	e01b      	b.n	800e2ea <SPI_ETH_WR_REG_16+0x68>
	 {
		x->TX[2]= addr & 0x00FF;
 800e2b2:	887b      	ldrh	r3, [r7, #2]
 800e2b4:	b2da      	uxtb	r2, r3
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	759a      	strb	r2, [r3, #22]
		x->TX[1]=(addr & 0xFF00)>>8;
 800e2ba:	887b      	ldrh	r3, [r7, #2]
 800e2bc:	0a1b      	lsrs	r3, r3, #8
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	b2da      	uxtb	r2, r3
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	755a      	strb	r2, [r3, #21]
		addr++;
 800e2c6:	887b      	ldrh	r3, [r7, #2]
 800e2c8:	3301      	adds	r3, #1
 800e2ca:	807b      	strh	r3, [r7, #2]
		x->TX[3]=num[i];
 800e2cc:	f107 020c 	add.w	r2, r7, #12
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	4413      	add	r3, r2
 800e2d4:	781a      	ldrb	r2, [r3, #0]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f7ff ff32 	bl	800e144 <SPI_ETH>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	82fb      	strh	r3, [r7, #22]
	 for(int i=0; i<(2); i++)
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	613b      	str	r3, [r7, #16]
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	dde0      	ble.n	800e2b2 <SPI_ETH_WR_REG_16+0x30>
	 }
	 return(res);
 800e2f0:	8afb      	ldrh	r3, [r7, #22]
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3718      	adds	r7, #24
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}

0800e2fa <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800e2fa:	b590      	push	{r4, r7, lr}
 800e2fc:	b087      	sub	sp, #28
 800e2fe:	af00      	add	r7, sp, #0
 800e300:	60f8      	str	r0, [r7, #12]
 800e302:	607a      	str	r2, [r7, #4]
 800e304:	461a      	mov	r2, r3
 800e306:	460b      	mov	r3, r1
 800e308:	817b      	strh	r3, [r7, #10]
 800e30a:	4613      	mov	r3, r2
 800e30c:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0x0F; //read operation
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	220f      	movs	r2, #15
 800e312:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800e314:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e31a:	d226      	bcs.n	800e36a <SPI_ETH_RD_RCV_REG_16+0x70>
	{
			x->TX[3]=0x00;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	2200      	movs	r2, #0
 800e320:	75da      	strb	r2, [r3, #23]
			for(int i=0; i<(lnght); i++)
 800e322:	2300      	movs	r3, #0
 800e324:	617b      	str	r3, [r7, #20]
 800e326:	e01a      	b.n	800e35e <SPI_ETH_RD_RCV_REG_16+0x64>
				{
				x->TX[2] = addr & 0x00FF;
 800e328:	897b      	ldrh	r3, [r7, #10]
 800e32a:	b2da      	uxtb	r2, r3
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800e330:	897b      	ldrh	r3, [r7, #10]
 800e332:	0a1b      	lsrs	r3, r3, #8
 800e334:	b29b      	uxth	r3, r3
 800e336:	b2da      	uxtb	r2, r3
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	755a      	strb	r2, [r3, #21]
				data[i+offset]=SPI_ETH(x);
 800e33c:	893a      	ldrh	r2, [r7, #8]
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	4413      	add	r3, r2
 800e342:	461a      	mov	r2, r3
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	189c      	adds	r4, r3, r2
 800e348:	68f8      	ldr	r0, [r7, #12]
 800e34a:	f7ff fefb 	bl	800e144 <SPI_ETH>
 800e34e:	4603      	mov	r3, r0
 800e350:	7023      	strb	r3, [r4, #0]
				addr++;
 800e352:	897b      	ldrh	r3, [r7, #10]
 800e354:	3301      	adds	r3, #1
 800e356:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	3301      	adds	r3, #1
 800e35c:	617b      	str	r3, [r7, #20]
 800e35e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e360:	697a      	ldr	r2, [r7, #20]
 800e362:	429a      	cmp	r2, r3
 800e364:	dbe0      	blt.n	800e328 <SPI_ETH_RD_RCV_REG_16+0x2e>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800e366:	2300      	movs	r3, #0
 800e368:	e000      	b.n	800e36c <SPI_ETH_RD_RCV_REG_16+0x72>
	}
	else
	{
	return(1);
 800e36a:	2301      	movs	r3, #1
	}
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	371c      	adds	r7, #28
 800e370:	46bd      	mov	sp, r7
 800e372:	bd90      	pop	{r4, r7, pc}

0800e374 <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b086      	sub	sp, #24
 800e378:	af00      	add	r7, sp, #0
 800e37a:	60f8      	str	r0, [r7, #12]
 800e37c:	607a      	str	r2, [r7, #4]
 800e37e:	461a      	mov	r2, r3
 800e380:	460b      	mov	r3, r1
 800e382:	817b      	strh	r3, [r7, #10]
 800e384:	4613      	mov	r3, r2
 800e386:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0xF0; //write operation
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	22f0      	movs	r2, #240	; 0xf0
 800e38c:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800e38e:	8c3b      	ldrh	r3, [r7, #32]
 800e390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e394:	d223      	bcs.n	800e3de <SPI_ETH_WR_TX_REG_16+0x6a>
	{

			for(int i=0; i<(lnght); i++)
 800e396:	2300      	movs	r3, #0
 800e398:	617b      	str	r3, [r7, #20]
 800e39a:	e01a      	b.n	800e3d2 <SPI_ETH_WR_TX_REG_16+0x5e>
				{
				x->TX[2] = addr & 0x00FF;
 800e39c:	897b      	ldrh	r3, [r7, #10]
 800e39e:	b2da      	uxtb	r2, r3
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800e3a4:	897b      	ldrh	r3, [r7, #10]
 800e3a6:	0a1b      	lsrs	r3, r3, #8
 800e3a8:	b29b      	uxth	r3, r3
 800e3aa:	b2da      	uxtb	r2, r3
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	755a      	strb	r2, [r3, #21]
				x->TX[3]= x->data[i+offset];
 800e3b0:	893a      	ldrh	r2, [r7, #8]
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	4413      	add	r3, r2
 800e3b6:	68fa      	ldr	r2, [r7, #12]
 800e3b8:	4413      	add	r3, r2
 800e3ba:	7f1a      	ldrb	r2, [r3, #28]
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	75da      	strb	r2, [r3, #23]
				SPI_ETH(x);
 800e3c0:	68f8      	ldr	r0, [r7, #12]
 800e3c2:	f7ff febf 	bl	800e144 <SPI_ETH>
				addr++;
 800e3c6:	897b      	ldrh	r3, [r7, #10]
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	617b      	str	r3, [r7, #20]
 800e3d2:	8c3b      	ldrh	r3, [r7, #32]
 800e3d4:	697a      	ldr	r2, [r7, #20]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	dbe0      	blt.n	800e39c <SPI_ETH_WR_TX_REG_16+0x28>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800e3da:	2300      	movs	r3, #0
 800e3dc:	e000      	b.n	800e3e0 <SPI_ETH_WR_TX_REG_16+0x6c>
	}
	else
	{
	return(1);
 800e3de:	2301      	movs	r3, #1
	}
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3718      	adds	r7, #24
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b082      	sub	sp, #8
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	460b      	mov	r3, r1
 800e3f2:	70fb      	strb	r3, [r7, #3]
 800e3f4:	4613      	mov	r3, r2
 800e3f6:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	22f0      	movs	r2, #240	; 0xf0
 800e3fc:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_CR_ADDR_BASEH + s;
 800e3fe:	78fb      	ldrb	r3, [r7, #3]
 800e400:	3304      	adds	r3, #4
 800e402:	b2da      	uxtb	r2, r3
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_CR_ADDR_BASEL ;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2201      	movs	r2, #1
 800e40c:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	78ba      	ldrb	r2, [r7, #2]
 800e412:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f7ff fe95 	bl	800e144 <SPI_ETH>
}
 800e41a:	bf00      	nop
 800e41c:	4618      	mov	r0, r3
 800e41e:	3708      	adds	r7, #8
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}

0800e424 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b082      	sub	sp, #8
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	460b      	mov	r3, r1
 800e42e:	70fb      	strb	r3, [r7, #3]
 800e430:	4613      	mov	r3, r2
 800e432:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	22f0      	movs	r2, #240	; 0xf0
 800e438:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_MR_ADDR_BASEH + s;
 800e43a:	78fb      	ldrb	r3, [r7, #3]
 800e43c:	3304      	adds	r3, #4
 800e43e:	b2da      	uxtb	r2, r3
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_MR_ADDR_BASEL ;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2200      	movs	r2, #0
 800e448:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	78ba      	ldrb	r2, [r7, #2]
 800e44e:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f7ff fe77 	bl	800e144 <SPI_ETH>
}
 800e456:	bf00      	nop
 800e458:	4618      	mov	r0, r3
 800e45a:	3708      	adds	r7, #8
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <eth_init>:


uint8_t eth_init(struct W5100_SPI * ETH)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b084      	sub	sp, #16
 800e464:	af02      	add	r7, sp, #8
 800e466:	6078      	str	r0, [r7, #4]
	 SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e46e:	331c      	adds	r3, #28
 800e470:	2204      	movs	r2, #4
 800e472:	9201      	str	r2, [sp, #4]
 800e474:	9300      	str	r3, [sp, #0]
 800e476:	23f0      	movs	r3, #240	; 0xf0
 800e478:	2201      	movs	r2, #1
 800e47a:	2100      	movs	r1, #0
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f7ff fe88 	bl	800e192 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-GATEWAY SET\r\n",strlen("\r\nETH-W5100-GATEWAY SET\r\n"));									//same for server and client
 800e482:	2119      	movs	r1, #25
 800e484:	482d      	ldr	r0, [pc, #180]	; (800e53c <eth_init+0xdc>)
 800e486:	f7f3 f8e3 	bl	8001650 <ITM0_Write>
	 SPI_ETH_REG(ETH, SUBR_ADDR_BASEH,SUBR_ADDR_BASEL,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e490:	2204      	movs	r2, #4
 800e492:	9201      	str	r2, [sp, #4]
 800e494:	9300      	str	r3, [sp, #0]
 800e496:	23f0      	movs	r3, #240	; 0xf0
 800e498:	2205      	movs	r2, #5
 800e49a:	2100      	movs	r1, #0
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f7ff fe78 	bl	800e192 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SUBNET SET\r\n",strlen("\r\nETH-W5100-SUBNET SET"));											//same for server and client
 800e4a2:	2116      	movs	r1, #22
 800e4a4:	4826      	ldr	r0, [pc, #152]	; (800e540 <eth_init+0xe0>)
 800e4a6:	f7f3 f8d3 	bl	8001650 <ITM0_Write>
	 SPI_ETH_REG(ETH, SHAR_ADDR_BASEH,SHAR_ADDR_BASEL,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e4b0:	3304      	adds	r3, #4
 800e4b2:	2206      	movs	r2, #6
 800e4b4:	9201      	str	r2, [sp, #4]
 800e4b6:	9300      	str	r3, [sp, #0]
 800e4b8:	23f0      	movs	r3, #240	; 0xf0
 800e4ba:	2209      	movs	r2, #9
 800e4bc:	2100      	movs	r1, #0
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f7ff fe67 	bl	800e192 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-MAC SET\r\n",strlen("\r\nETH-W5100-MAC SET"));												//same for server and client
 800e4c4:	2113      	movs	r1, #19
 800e4c6:	481f      	ldr	r0, [pc, #124]	; (800e544 <eth_init+0xe4>)
 800e4c8:	f7f3 f8c2 	bl	8001650 <ITM0_Write>
	 SPI_ETH_REG(ETH, SIPR_ADDR_BASEH,SIPR_ADDR_BASEL,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e4d2:	330a      	adds	r3, #10
 800e4d4:	2204      	movs	r2, #4
 800e4d6:	9201      	str	r2, [sp, #4]
 800e4d8:	9300      	str	r3, [sp, #0]
 800e4da:	23f0      	movs	r3, #240	; 0xf0
 800e4dc:	220f      	movs	r2, #15
 800e4de:	2100      	movs	r1, #0
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f7ff fe56 	bl	800e192 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-IP SET\r\n",strlen("\r\nETH-W5100-IP SET"));													//same for server and client
 800e4e6:	2112      	movs	r1, #18
 800e4e8:	4817      	ldr	r0, [pc, #92]	; (800e548 <eth_init+0xe8>)
 800e4ea:	f7f3 f8b1 	bl	8001650 <ITM0_Write>
	 SPI_ETH_REG(ETH, RMSR_ADDR_BASEH,RMSR_ADDR_BASEL,SPI_WRITE, &ETH->RMSR,1);												//same for server and client
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e4f4:	330e      	adds	r3, #14
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	9201      	str	r2, [sp, #4]
 800e4fa:	9300      	str	r3, [sp, #0]
 800e4fc:	23f0      	movs	r3, #240	; 0xf0
 800e4fe:	221a      	movs	r2, #26
 800e500:	2100      	movs	r1, #0
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f7ff fe45 	bl	800e192 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n")); 	//same for server and client
 800e508:	2128      	movs	r1, #40	; 0x28
 800e50a:	4810      	ldr	r0, [pc, #64]	; (800e54c <eth_init+0xec>)
 800e50c:	f7f3 f8a0 	bl	8001650 <ITM0_Write>
	 SPI_ETH_REG(ETH, TMSR_ADDR_BASEH,TMSR_ADDR_BASEL,SPI_WRITE, &ETH->TMSR,1);												//same for server and client
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e516:	330f      	adds	r3, #15
 800e518:	2201      	movs	r2, #1
 800e51a:	9201      	str	r2, [sp, #4]
 800e51c:	9300      	str	r3, [sp, #0]
 800e51e:	23f0      	movs	r3, #240	; 0xf0
 800e520:	221b      	movs	r2, #27
 800e522:	2100      	movs	r1, #0
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f7ff fe34 	bl	800e192 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n"));		//same for server and client
 800e52a:	2128      	movs	r1, #40	; 0x28
 800e52c:	4808      	ldr	r0, [pc, #32]	; (800e550 <eth_init+0xf0>)
 800e52e:	f7f3 f88f 	bl	8001650 <ITM0_Write>

}
 800e532:	bf00      	nop
 800e534:	4618      	mov	r0, r3
 800e536:	3708      	adds	r7, #8
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}
 800e53c:	08010e9c 	.word	0x08010e9c
 800e540:	08010eb8 	.word	0x08010eb8
 800e544:	08010ed4 	.word	0x08010ed4
 800e548:	08010eec 	.word	0x08010eec
 800e54c:	08010f04 	.word	0x08010f04
 800e550:	08010f30 	.word	0x08010f30

0800e554 <eth_socket_init>:

uint8_t eth_socket_init(struct W5100_SPI * ETH, uint8_t socket)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b084      	sub	sp, #16
 800e558:	af02      	add	r7, sp, #8
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	460b      	mov	r3, r1
 800e55e:	70fb      	strb	r3, [r7, #3]
	 eth_wr_SOCKET_MODE(ETH,socket, MODE_TCP);																				//same for server and client
 800e560:	78fb      	ldrb	r3, [r7, #3]
 800e562:	2201      	movs	r2, #1
 800e564:	4619      	mov	r1, r3
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f7ff ff5c 	bl	800e424 <eth_wr_SOCKET_MODE>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP SET"));									//same for server and client
 800e56c:	2119      	movs	r1, #25
 800e56e:	4830      	ldr	r0, [pc, #192]	; (800e630 <eth_socket_init+0xdc>)
 800e570:	f7f3 f86e 	bl	8001650 <ITM0_Write>
	 SPI_ETH_REG(ETH, S0_PORT_ADDR_BASELH,S0_PORT_ADDR_BASELL,SPI_WRITE, ETH->S0_PORT,2);									//same for server and client
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e57a:	331a      	adds	r3, #26
 800e57c:	2202      	movs	r2, #2
 800e57e:	9201      	str	r2, [sp, #4]
 800e580:	9300      	str	r3, [sp, #0]
 800e582:	23f0      	movs	r3, #240	; 0xf0
 800e584:	2204      	movs	r2, #4
 800e586:	2104      	movs	r1, #4
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f7ff fe02 	bl	800e192 <SPI_ETH_REG>

	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
 800e58e:	212c      	movs	r1, #44	; 0x2c
 800e590:	4828      	ldr	r0, [pc, #160]	; (800e634 <eth_socket_init+0xe0>)
 800e592:	f7f3 f85d 	bl	8001650 <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x0C,SPI_WRITE, ETH->S0_DIPR,4);									// client
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e59c:	331c      	adds	r3, #28
 800e59e:	2204      	movs	r2, #4
 800e5a0:	9201      	str	r2, [sp, #4]
 800e5a2:	9300      	str	r3, [sp, #0]
 800e5a4:	23f0      	movs	r3, #240	; 0xf0
 800e5a6:	220c      	movs	r2, #12
 800e5a8:	2104      	movs	r1, #4
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f7ff fdf1 	bl	800e192 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 800e5b0:	212e      	movs	r1, #46	; 0x2e
 800e5b2:	4821      	ldr	r0, [pc, #132]	; (800e638 <eth_socket_init+0xe4>)
 800e5b4:	f7f3 f84c 	bl	8001650 <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x10,SPI_WRITE, ETH->S0_DPORT,2);									// client
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e5be:	2202      	movs	r2, #2
 800e5c0:	9201      	str	r2, [sp, #4]
 800e5c2:	9300      	str	r3, [sp, #0]
 800e5c4:	23f0      	movs	r3, #240	; 0xf0
 800e5c6:	2210      	movs	r2, #16
 800e5c8:	2104      	movs	r1, #4
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f7ff fde1 	bl	800e192 <SPI_ETH_REG>


	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 800e5d0:	2120      	movs	r1, #32
 800e5d2:	481a      	ldr	r0, [pc, #104]	; (800e63c <eth_socket_init+0xe8>)
 800e5d4:	f7f3 f83c 	bl	8001650 <ITM0_Write>
	 eth_wr_SOCKET_CMD(ETH,socket, OPEN);																					//same for server and client
 800e5d8:	78fb      	ldrb	r3, [r7, #3]
 800e5da:	2201      	movs	r2, #1
 800e5dc:	4619      	mov	r1, r3
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f7ff ff02 	bl	800e3e8 <eth_wr_SOCKET_CMD>
	 ITM0_Write("\r\nETH-W5100-OPEN SOCKET\r\n",strlen("\r\nETH-W5100-OPEN SOCKET\r\n"));									//same for server and client
 800e5e4:	2119      	movs	r1, #25
 800e5e6:	4816      	ldr	r0, [pc, #88]	; (800e640 <eth_socket_init+0xec>)
 800e5e8:	f7f3 f832 	bl	8001650 <ITM0_Write>

	 if(ETH->S0_ENserver == 1)
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e5f6:	2b01      	cmp	r3, #1
 800e5f8:	d10a      	bne.n	800e610 <eth_socket_init+0xbc>
	 {
		 eth_wr_SOCKET_CMD(ETH,socket, LISTEN);																				//only for server
 800e5fa:	78fb      	ldrb	r3, [r7, #3]
 800e5fc:	2202      	movs	r2, #2
 800e5fe:	4619      	mov	r1, r3
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f7ff fef1 	bl	800e3e8 <eth_wr_SOCKET_CMD>
		 ITM0_Write("\r\nETH-W5100-LISTEN SOCKET\r\n",strlen("\r\nETH-W5100-LISTEN SOCKET\r\n"));							//only for server
 800e606:	211b      	movs	r1, #27
 800e608:	480e      	ldr	r0, [pc, #56]	; (800e644 <eth_socket_init+0xf0>)
 800e60a:	f7f3 f821 	bl	8001650 <ITM0_Write>
 800e60e:	e009      	b.n	800e624 <eth_socket_init+0xd0>
	 }
	 else
	 {

		 	 eth_wr_SOCKET_CMD(ETH,socket, CONNECT);																				//only for server
 800e610:	78fb      	ldrb	r3, [r7, #3]
 800e612:	2204      	movs	r2, #4
 800e614:	4619      	mov	r1, r3
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f7ff fee6 	bl	800e3e8 <eth_wr_SOCKET_CMD>
			 ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));											//only fir server
 800e61c:	2115      	movs	r1, #21
 800e61e:	480a      	ldr	r0, [pc, #40]	; (800e648 <eth_socket_init+0xf4>)
 800e620:	f7f3 f816 	bl	8001650 <ITM0_Write>
	 }
}
 800e624:	bf00      	nop
 800e626:	4618      	mov	r0, r3
 800e628:	3708      	adds	r7, #8
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}
 800e62e:	bf00      	nop
 800e630:	08010f5c 	.word	0x08010f5c
 800e634:	08010f78 	.word	0x08010f78
 800e638:	08010fa8 	.word	0x08010fa8
 800e63c:	08010fd8 	.word	0x08010fd8
 800e640:	08010ffc 	.word	0x08010ffc
 800e644:	08011018 	.word	0x08011018
 800e648:	08011034 	.word	0x08011034

0800e64c <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5100_SPI * y, uint8_t socket)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b082      	sub	sp, #8
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	460b      	mov	r3, r1
 800e656:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	220f      	movs	r2, #15
 800e65c:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_SR_ADDR_BASEH + socket;
 800e65e:	78fb      	ldrb	r3, [r7, #3]
 800e660:	3304      	adds	r3, #4
 800e662:	b2da      	uxtb	r2, r3
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_SR_ADDR_BASEL ;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2203      	movs	r2, #3
 800e66c:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2200      	movs	r2, #0
 800e672:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f7ff fd65 	bl	800e144 <SPI_ETH>
	return(y->RX[3]);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	7edb      	ldrb	r3, [r3, #27]
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3708      	adds	r7, #8
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}

0800e686 <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5100_SPI * y, uint8_t socket)
{
 800e686:	b580      	push	{r7, lr}
 800e688:	b082      	sub	sp, #8
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6078      	str	r0, [r7, #4]
 800e68e:	460b      	mov	r3, r1
 800e690:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	220f      	movs	r2, #15
 800e696:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_CR_ADDR_BASEH + socket;
 800e698:	78fb      	ldrb	r3, [r7, #3]
 800e69a:	3304      	adds	r3, #4
 800e69c:	b2da      	uxtb	r2, r3
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_CR_ADDR_BASEL ;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f7ff fd48 	bl	800e144 <SPI_ETH>
	return(y->RX[3]);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	7edb      	ldrb	r3, [r3, #27]
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3708      	adds	r7, #8
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}

0800e6c0 <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b08c      	sub	sp, #48	; 0x30
 800e6c4:	af02      	add	r7, sp, #8
 800e6c6:	60f8      	str	r0, [r7, #12]
 800e6c8:	607a      	str	r2, [r7, #4]
 800e6ca:	461a      	mov	r2, r3
 800e6cc:	460b      	mov	r3, r1
 800e6ce:	72fb      	strb	r3, [r7, #11]
 800e6d0:	4613      	mov	r3, r2
 800e6d2:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	847b      	strh	r3, [r7, #34]	; 0x22
			 left_size=0,
 800e6d8:	2300      	movs	r3, #0
 800e6da:	843b      	strh	r3, [r7, #32]
			 upper_size=0,
 800e6dc:	2300      	movs	r3, #0
 800e6de:	83fb      	strh	r3, [r7, #30]
			 destination_addr=0,
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	83bb      	strh	r3, [r7, #28]
			 S0_RX_RD=0,
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	837b      	strh	r3, [r7, #26]
			 S0_get_offset=0,
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	833b      	strh	r3, [r7, #24]
			 S0_get_start_address=0,
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	82fb      	strh	r3, [r7, #22]
			 S0_mem_pointer=0,
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	82bb      	strh	r3, [r7, #20]
			 RX_MASK=0,
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	84fb      	strh	r3, [r7, #38]	; 0x26
			 RX_BASE=0;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t spi_Data[2];

	switch (socket)
 800e6fc:	7afb      	ldrb	r3, [r7, #11]
 800e6fe:	2b03      	cmp	r3, #3
 800e700:	d83e      	bhi.n	800e780 <eth_rd_SOCKET_DATA+0xc0>
 800e702:	a201      	add	r2, pc, #4	; (adr r2, 800e708 <eth_rd_SOCKET_DATA+0x48>)
 800e704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e708:	0800e719 	.word	0x0800e719
 800e70c:	0800e733 	.word	0x0800e733
 800e710:	0800e74d 	.word	0x0800e74d
 800e714:	0800e767 	.word	0x0800e767
	{
		case 0 :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e71e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e722:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e72a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e72e:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e730:	e033      	b.n	800e79a <eth_rd_SOCKET_DATA+0xda>
		case 1 :
		{
			RX_MASK=ETH->gS1_RX_MASK;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e738:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800e73c:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS1_RX_BASE;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e744:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e748:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e74a:	e026      	b.n	800e79a <eth_rd_SOCKET_DATA+0xda>
		case 2 :
		{
			RX_MASK=ETH->gS2_RX_MASK;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e756:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS2_RX_BASE;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e75e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e762:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e764:	e019      	b.n	800e79a <eth_rd_SOCKET_DATA+0xda>
		case 3 :
		{
			RX_MASK=ETH->gS3_RX_MASK;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e76c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800e770:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS3_RX_BASE;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e778:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e77c:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e77e:	e00c      	b.n	800e79a <eth_rd_SOCKET_DATA+0xda>
		default :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e786:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e78a:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e792:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e796:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e798:	bf00      	nop
	}

	S0_RX_RD = SPI_ETH_REG(ETH, S0_RX_RD_ADDR_BASEHH + socket ,S0_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800e79a:	7afb      	ldrb	r3, [r7, #11]
 800e79c:	3304      	adds	r3, #4
 800e79e:	b2d9      	uxtb	r1, r3
 800e7a0:	2302      	movs	r3, #2
 800e7a2:	9301      	str	r3, [sp, #4]
 800e7a4:	f107 0310 	add.w	r3, r7, #16
 800e7a8:	9300      	str	r3, [sp, #0]
 800e7aa:	230f      	movs	r3, #15
 800e7ac:	2228      	movs	r2, #40	; 0x28
 800e7ae:	68f8      	ldr	r0, [r7, #12]
 800e7b0:	f7ff fcef 	bl	800e192 <SPI_ETH_REG>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	837b      	strh	r3, [r7, #26]
	S0_get_offset = S0_RX_RD & RX_MASK;
 800e7b8:	8b7a      	ldrh	r2, [r7, #26]
 800e7ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e7bc:	4013      	ands	r3, r2
 800e7be:	833b      	strh	r3, [r7, #24]
	S0_get_start_address  = RX_BASE + S0_get_offset;
 800e7c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e7c2:	8b3b      	ldrh	r3, [r7, #24]
 800e7c4:	4413      	add	r3, r2
 800e7c6:	82fb      	strh	r3, [r7, #22]
	if((S0_get_offset  + sizedata )>(RX_MASK + 1))
 800e7c8:	8b3a      	ldrh	r2, [r7, #24]
 800e7ca:	893b      	ldrh	r3, [r7, #8]
 800e7cc:	441a      	add	r2, r3
 800e7ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	dd2c      	ble.n	800e830 <eth_rd_SOCKET_DATA+0x170>
		{
			upper_size = (RX_MASK + 1) - S0_get_offset ;
 800e7d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e7d8:	8b3b      	ldrh	r3, [r7, #24]
 800e7da:	1ad3      	subs	r3, r2, r3
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	3301      	adds	r3, #1
 800e7e0:	83fb      	strh	r3, [r7, #30]
			SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f103 021c 	add.w	r2, r3, #28
 800e7e8:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e7ea:	8af9      	ldrh	r1, [r7, #22]
 800e7ec:	8bfb      	ldrh	r3, [r7, #30]
 800e7ee:	9300      	str	r3, [sp, #0]
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	68f8      	ldr	r0, [r7, #12]
 800e7f4:	f7ff fd81 	bl	800e2fa <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800e7f8:	8bba      	ldrh	r2, [r7, #28]
 800e7fa:	8bfb      	ldrh	r3, [r7, #30]
 800e7fc:	4413      	add	r3, r2
 800e7fe:	83bb      	strh	r3, [r7, #28]
			left_size=sizedata-upper_size;
 800e800:	893a      	ldrh	r2, [r7, #8]
 800e802:	8bfb      	ldrh	r3, [r7, #30]
 800e804:	1ad3      	subs	r3, r2, r3
 800e806:	843b      	strh	r3, [r7, #32]
			S0_bf_rcv_offset=upper_size;
 800e808:	8bfb      	ldrh	r3, [r7, #30]
 800e80a:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	f103 021c 	add.w	r2, r3, #28
 800e812:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e814:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e816:	8c3b      	ldrh	r3, [r7, #32]
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	4603      	mov	r3, r0
 800e81c:	68f8      	ldr	r0, [r7, #12]
 800e81e:	f7ff fd6c 	bl	800e2fa <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S0_RX_RD + sizedata;
 800e822:	8b7a      	ldrh	r2, [r7, #26]
 800e824:	893b      	ldrh	r3, [r7, #8]
 800e826:	4413      	add	r3, r2
 800e828:	b29a      	uxth	r2, r3
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	801a      	strh	r2, [r3, #0]
 800e82e:	e010      	b.n	800e852 <eth_rd_SOCKET_DATA+0x192>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, sizedata);
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	f103 021c 	add.w	r2, r3, #28
 800e836:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e838:	8af9      	ldrh	r1, [r7, #22]
 800e83a:	893b      	ldrh	r3, [r7, #8]
 800e83c:	9300      	str	r3, [sp, #0]
 800e83e:	4603      	mov	r3, r0
 800e840:	68f8      	ldr	r0, [r7, #12]
 800e842:	f7ff fd5a 	bl	800e2fa <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S0_RX_RD + sizedata;
 800e846:	8b7a      	ldrh	r2, [r7, #26]
 800e848:	893b      	ldrh	r3, [r7, #8]
 800e84a:	4413      	add	r3, r2
 800e84c:	b29a      	uxth	r2, r3
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	b29b      	uxth	r3, r3
}
 800e856:	4618      	mov	r0, r3
 800e858:	3728      	adds	r7, #40	; 0x28
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop

0800e860 <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b08c      	sub	sp, #48	; 0x30
 800e864:	af02      	add	r7, sp, #8
 800e866:	60f8      	str	r0, [r7, #12]
 800e868:	607a      	str	r2, [r7, #4]
 800e86a:	461a      	mov	r2, r3
 800e86c:	460b      	mov	r3, r1
 800e86e:	72fb      	strb	r3, [r7, #11]
 800e870:	4613      	mov	r3, r2
 800e872:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e874:	2300      	movs	r3, #0
 800e876:	843b      	strh	r3, [r7, #32]
			 left_size=0,
 800e878:	2300      	movs	r3, #0
 800e87a:	83fb      	strh	r3, [r7, #30]
			 upper_size=0,
 800e87c:	2300      	movs	r3, #0
 800e87e:	83bb      	strh	r3, [r7, #28]
			 source_addr=0,
 800e880:	2300      	movs	r3, #0
 800e882:	837b      	strh	r3, [r7, #26]
			 Sn_TX_WR=0,
 800e884:	2300      	movs	r3, #0
 800e886:	833b      	strh	r3, [r7, #24]
			 get_offset=0,
 800e888:	2300      	movs	r3, #0
 800e88a:	82fb      	strh	r3, [r7, #22]
			 get_free_size=0,
 800e88c:	2300      	movs	r3, #0
 800e88e:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800e890:	2300      	movs	r3, #0
 800e892:	82bb      	strh	r3, [r7, #20]
			 S0_mem_pointer=0,
 800e894:	2300      	movs	r3, #0
 800e896:	827b      	strh	r3, [r7, #18]
			 TX_MASK=0,
 800e898:	2300      	movs	r3, #0
 800e89a:	84bb      	strh	r3, [r7, #36]	; 0x24
			 TX_BASE=0;
 800e89c:	2300      	movs	r3, #0
 800e89e:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t spi_Data[2];

	switch (socket)
 800e8a0:	7afb      	ldrb	r3, [r7, #11]
 800e8a2:	2b03      	cmp	r3, #3
 800e8a4:	d83e      	bhi.n	800e924 <eth_wr_SOCKET_DATA+0xc4>
 800e8a6:	a201      	add	r2, pc, #4	; (adr r2, 800e8ac <eth_wr_SOCKET_DATA+0x4c>)
 800e8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8ac:	0800e8bd 	.word	0x0800e8bd
 800e8b0:	0800e8d7 	.word	0x0800e8d7
 800e8b4:	0800e8f1 	.word	0x0800e8f1
 800e8b8:	0800e90b 	.word	0x0800e90b
	{
		case 0 :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e8c6:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e8d2:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e8d4:	e033      	b.n	800e93e <eth_wr_SOCKET_DATA+0xde>
		case 1 :
		{
			TX_MASK=ETH->gS1_TX_MASK;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e8e0:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS1_TX_BASE;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e8ec:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e8ee:	e026      	b.n	800e93e <eth_wr_SOCKET_DATA+0xde>
		case 2 :
		{
			TX_MASK=ETH->gS2_TX_MASK;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e8fa:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS2_TX_BASE;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e902:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e906:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e908:	e019      	b.n	800e93e <eth_wr_SOCKET_DATA+0xde>
		case 3 :
		{
			TX_MASK=ETH->gS3_TX_MASK;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e910:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e914:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS3_TX_BASE;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e91c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e920:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e922:	e00c      	b.n	800e93e <eth_wr_SOCKET_DATA+0xde>
		default :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e92a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e92e:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e936:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e93a:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e93c:	bf00      	nop
	}

	while(get_free_size<send_size)
 800e93e:	e00e      	b.n	800e95e <eth_wr_SOCKET_DATA+0xfe>
			{
				get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S0_TX_FSR	=   0x420,
 800e940:	7afb      	ldrb	r3, [r7, #11]
 800e942:	3304      	adds	r3, #4
 800e944:	b2d9      	uxtb	r1, r3
 800e946:	2302      	movs	r3, #2
 800e948:	9301      	str	r3, [sp, #4]
 800e94a:	f107 0310 	add.w	r3, r7, #16
 800e94e:	9300      	str	r3, [sp, #0]
 800e950:	230f      	movs	r3, #15
 800e952:	2220      	movs	r2, #32
 800e954:	68f8      	ldr	r0, [r7, #12]
 800e956:	f7ff fc1c 	bl	800e192 <SPI_ETH_REG>
 800e95a:	4603      	mov	r3, r0
 800e95c:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800e95e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e960:	893b      	ldrh	r3, [r7, #8]
 800e962:	429a      	cmp	r2, r3
 800e964:	d3ec      	bcc.n	800e940 <eth_wr_SOCKET_DATA+0xe0>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S0_TX_RD =   0x424,
 800e966:	7afb      	ldrb	r3, [r7, #11]
 800e968:	3304      	adds	r3, #4
 800e96a:	b2d9      	uxtb	r1, r3
 800e96c:	2302      	movs	r3, #2
 800e96e:	9301      	str	r3, [sp, #4]
 800e970:	f107 0310 	add.w	r3, r7, #16
 800e974:	9300      	str	r3, [sp, #0]
 800e976:	230f      	movs	r3, #15
 800e978:	2224      	movs	r2, #36	; 0x24
 800e97a:	68f8      	ldr	r0, [r7, #12]
 800e97c:	f7ff fc09 	bl	800e192 <SPI_ETH_REG>
 800e980:	4603      	mov	r3, r0
 800e982:	833b      	strh	r3, [r7, #24]
				get_offset= Sn_TX_WR & TX_MASK;
 800e984:	8b3a      	ldrh	r2, [r7, #24]
 800e986:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e988:	4013      	ands	r3, r2
 800e98a:	82fb      	strh	r3, [r7, #22]
				get_start_address=TX_BASE + get_offset;
 800e98c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e98e:	8afb      	ldrh	r3, [r7, #22]
 800e990:	4413      	add	r3, r2
 800e992:	82bb      	strh	r3, [r7, #20]

				if((get_offset + send_size)>(TX_MASK + 1))
 800e994:	8afa      	ldrh	r2, [r7, #22]
 800e996:	893b      	ldrh	r3, [r7, #8]
 800e998:	441a      	add	r2, r3
 800e99a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e99c:	3301      	adds	r3, #1
 800e99e:	429a      	cmp	r2, r3
 800e9a0:	dd2c      	ble.n	800e9fc <eth_wr_SOCKET_DATA+0x19c>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800e9a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9a4:	8afb      	ldrh	r3, [r7, #22]
 800e9a6:	1ad3      	subs	r3, r2, r3
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	3301      	adds	r3, #1
 800e9ac:	83bb      	strh	r3, [r7, #28]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f103 021c 	add.w	r2, r3, #28
 800e9b4:	8c38      	ldrh	r0, [r7, #32]
 800e9b6:	8ab9      	ldrh	r1, [r7, #20]
 800e9b8:	8bbb      	ldrh	r3, [r7, #28]
 800e9ba:	9300      	str	r3, [sp, #0]
 800e9bc:	4603      	mov	r3, r0
 800e9be:	68f8      	ldr	r0, [r7, #12]
 800e9c0:	f7ff fcd8 	bl	800e374 <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800e9c4:	8b7a      	ldrh	r2, [r7, #26]
 800e9c6:	8bbb      	ldrh	r3, [r7, #28]
 800e9c8:	4413      	add	r3, r2
 800e9ca:	837b      	strh	r3, [r7, #26]
						left_size=send_size-upper_size;
 800e9cc:	893a      	ldrh	r2, [r7, #8]
 800e9ce:	8bbb      	ldrh	r3, [r7, #28]
 800e9d0:	1ad3      	subs	r3, r2, r3
 800e9d2:	83fb      	strh	r3, [r7, #30]
						S0_bf_rcv_offset=upper_size;
 800e9d4:	8bbb      	ldrh	r3, [r7, #28]
 800e9d6:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f103 021c 	add.w	r2, r3, #28
 800e9de:	8c38      	ldrh	r0, [r7, #32]
 800e9e0:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800e9e2:	8bfb      	ldrh	r3, [r7, #30]
 800e9e4:	9300      	str	r3, [sp, #0]
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	68f8      	ldr	r0, [r7, #12]
 800e9ea:	f7ff fcc3 	bl	800e374 <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800e9ee:	8b3a      	ldrh	r2, [r7, #24]
 800e9f0:	893b      	ldrh	r3, [r7, #8]
 800e9f2:	4413      	add	r3, r2
 800e9f4:	b29a      	uxth	r2, r3
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	801a      	strh	r2, [r3, #0]
 800e9fa:	e010      	b.n	800ea1e <eth_wr_SOCKET_DATA+0x1be>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, send_size);
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f103 021c 	add.w	r2, r3, #28
 800ea02:	8c38      	ldrh	r0, [r7, #32]
 800ea04:	8ab9      	ldrh	r1, [r7, #20]
 800ea06:	893b      	ldrh	r3, [r7, #8]
 800ea08:	9300      	str	r3, [sp, #0]
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	68f8      	ldr	r0, [r7, #12]
 800ea0e:	f7ff fcb1 	bl	800e374 <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800ea12:	8b3a      	ldrh	r2, [r7, #24]
 800ea14:	893b      	ldrh	r3, [r7, #8]
 800ea16:	4413      	add	r3, r2
 800ea18:	b29a      	uxth	r2, r3
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	801a      	strh	r2, [r3, #0]
					}

}
 800ea1e:	bf00      	nop
 800ea20:	4618      	mov	r0, r3
 800ea22:	3728      	adds	r7, #40	; 0x28
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}

0800ea28 <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int of, int tf)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b090      	sub	sp, #64	; 0x40
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	60f8      	str	r0, [r7, #12]
 800ea30:	60b9      	str	r1, [r7, #8]
 800ea32:	607a      	str	r2, [r7, #4]
 800ea34:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800ea36:	2300      	movs	r3, #0
 800ea38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea3e:	2300      	movs	r3, #0
 800ea40:	637b      	str	r3, [r7, #52]	; 0x34
 800ea42:	2300      	movs	r3, #0
 800ea44:	633b      	str	r3, [r7, #48]	; 0x30
 800ea46:	2300      	movs	r3, #0
 800ea48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	61fb      	str	r3, [r7, #28]
 800ea4e:	2300      	movs	r3, #0
 800ea50:	61bb      	str	r3, [r7, #24]
 800ea52:	2300      	movs	r3, #0
 800ea54:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea56:	2300      	movs	r3, #0
 800ea58:	627b      	str	r3, [r7, #36]	; 0x24
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	617b      	str	r3, [r7, #20]
 800ea5e:	2300      	movs	r3, #0
 800ea60:	623b      	str	r3, [r7, #32]
 800ea62:	2300      	movs	r3, #0
 800ea64:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	61fb      	str	r3, [r7, #28]
	lngb=*bn;
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	61bb      	str	r3, [r7, #24]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800ea72:	69fa      	ldr	r2, [r7, #28]
 800ea74:	69bb      	ldr	r3, [r7, #24]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	f2c0 8315 	blt.w	800f0a6 <FT_String_ND+0x67e>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800ea80:	e00c      	b.n	800ea9c <FT_String_ND+0x74>
							{
								n++;
 800ea82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea84:	3301      	adds	r3, #1
 800ea86:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800ea88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea8a:	69bb      	ldr	r3, [r7, #24]
 800ea8c:	441a      	add	r2, r3
 800ea8e:	69fb      	ldr	r3, [r7, #28]
 800ea90:	3301      	adds	r3, #1
 800ea92:	429a      	cmp	r2, r3
 800ea94:	dd02      	ble.n	800ea9c <FT_String_ND+0x74>
								{
									estado=0;
 800ea96:	2300      	movs	r3, #0
 800ea98:	623b      	str	r3, [r7, #32]
									break;
 800ea9a:	e009      	b.n	800eab0 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800ea9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea9e:	68fa      	ldr	r2, [r7, #12]
 800eaa0:	4413      	add	r3, r2
 800eaa2:	781a      	ldrb	r2, [r3, #0]
 800eaa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa6:	6879      	ldr	r1, [r7, #4]
 800eaa8:	440b      	add	r3, r1
 800eaaa:	781b      	ldrb	r3, [r3, #0]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d1e8      	bne.n	800ea82 <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800eab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eab2:	3301      	adds	r3, #1
 800eab4:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800eab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab8:	3301      	adds	r3, #1
 800eaba:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800eabc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eabe:	69bb      	ldr	r3, [r7, #24]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d108      	bne.n	800ead6 <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800eac4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eac6:	69bb      	ldr	r3, [r7, #24]
 800eac8:	1ad3      	subs	r3, r2, r3
 800eaca:	1c5a      	adds	r2, r3, #1
 800eacc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eace:	601a      	str	r2, [r3, #0]
									estado=1;
 800ead0:	2301      	movs	r3, #1
 800ead2:	623b      	str	r3, [r7, #32]
									break;
 800ead4:	e010      	b.n	800eaf8 <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800ead6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ead8:	69bb      	ldr	r3, [r7, #24]
 800eada:	429a      	cmp	r2, r3
 800eadc:	dd02      	ble.n	800eae4 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800eade:	2300      	movs	r3, #0
 800eae0:	623b      	str	r3, [r7, #32]
									 break;
 800eae2:	e009      	b.n	800eaf8 <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800eae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eae6:	68fa      	ldr	r2, [r7, #12]
 800eae8:	4413      	add	r3, r2
 800eaea:	781a      	ldrb	r2, [r3, #0]
 800eaec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaee:	6879      	ldr	r1, [r7, #4]
 800eaf0:	440b      	add	r3, r1
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d0db      	beq.n	800eab0 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800eaf8:	69bb      	ldr	r3, [r7, #24]
 800eafa:	1e5a      	subs	r2, r3, #1
 800eafc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eafe:	4413      	add	r3, r2
 800eb00:	69fa      	ldr	r2, [r7, #28]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	dd02      	ble.n	800eb0c <FT_String_ND+0xe4>
 800eb06:	6a3b      	ldr	r3, [r7, #32]
 800eb08:	2b01      	cmp	r3, #1
 800eb0a:	d1b7      	bne.n	800ea7c <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800eb0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d101      	bne.n	800eb16 <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800eb12:	6a3b      	ldr	r3, [r7, #32]
 800eb14:	e2c8      	b.n	800f0a8 <FT_String_ND+0x680>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800eb16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	d12c      	bne.n	800eb76 <FT_String_ND+0x14e>
 800eb1c:	6a3b      	ldr	r3, [r7, #32]
 800eb1e:	2b01      	cmp	r3, #1
 800eb20:	d129      	bne.n	800eb76 <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800eb22:	e014      	b.n	800eb4e <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800eb24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb26:	681a      	ldr	r2, [r3, #0]
 800eb28:	69bb      	ldr	r3, [r7, #24]
 800eb2a:	441a      	add	r2, r3
 800eb2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb2e:	4413      	add	r3, r2
 800eb30:	3b01      	subs	r3, #1
 800eb32:	68fa      	ldr	r2, [r7, #12]
 800eb34:	441a      	add	r2, r3
 800eb36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb38:	6819      	ldr	r1, [r3, #0]
 800eb3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb3c:	440b      	add	r3, r1
 800eb3e:	3b01      	subs	r3, #1
 800eb40:	68f9      	ldr	r1, [r7, #12]
 800eb42:	440b      	add	r3, r1
 800eb44:	7812      	ldrb	r2, [r2, #0]
 800eb46:	701a      	strb	r2, [r3, #0]
										n3++;
 800eb48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800eb4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb50:	681a      	ldr	r2, [r3, #0]
 800eb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb54:	441a      	add	r2, r3
 800eb56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb58:	4413      	add	r3, r2
 800eb5a:	69fa      	ldr	r2, [r7, #28]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	dae1      	bge.n	800eb24 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800eb60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb62:	681a      	ldr	r2, [r3, #0]
 800eb64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb66:	4413      	add	r3, r2
 800eb68:	1e5a      	subs	r2, r3, #1
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	601a      	str	r2, [r3, #0]
							estado=3;
 800eb6e:	2303      	movs	r3, #3
 800eb70:	623b      	str	r3, [r7, #32]
							return(estado);
 800eb72:	6a3b      	ldr	r3, [r7, #32]
 800eb74:	e298      	b.n	800f0a8 <FT_String_ND+0x680>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800eb76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb78:	2b02      	cmp	r3, #2
 800eb7a:	f040 80be 	bne.w	800ecfa <FT_String_ND+0x2d2>
 800eb7e:	6a3b      	ldr	r3, [r7, #32]
 800eb80:	2b01      	cmp	r3, #1
 800eb82:	f040 80ba 	bne.w	800ecfa <FT_String_ND+0x2d2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800eb86:	e012      	b.n	800ebae <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800eb88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb8a:	69bb      	ldr	r3, [r7, #24]
 800eb8c:	1ad2      	subs	r2, r2, r3
 800eb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb90:	4413      	add	r3, r2
 800eb92:	461a      	mov	r2, r3
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	441a      	add	r2, r3
 800eb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eb9c:	440b      	add	r3, r1
 800eb9e:	7812      	ldrb	r2, [r2, #0]
 800eba0:	701a      	strb	r2, [r3, #0]
								n4++;
 800eba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba4:	3301      	adds	r3, #1
 800eba6:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800eba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebac:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ebae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebb0:	69bb      	ldr	r3, [r7, #24]
 800ebb2:	1ad2      	subs	r2, r2, r3
 800ebb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb6:	4413      	add	r3, r2
 800ebb8:	69fa      	ldr	r2, [r7, #28]
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	dae4      	bge.n	800eb88 <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800ebbe:	499d      	ldr	r1, [pc, #628]	; (800ee34 <FT_String_ND+0x40c>)
 800ebc0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ebc2:	f000 fd13 	bl	800f5ec <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800ebc6:	499c      	ldr	r1, [pc, #624]	; (800ee38 <FT_String_ND+0x410>)
 800ebc8:	2000      	movs	r0, #0
 800ebca:	f000 fd0f 	bl	800f5ec <strtok>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f000 faf0 	bl	800f1b6 <atoi>
 800ebd6:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800ebd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebda:	3b01      	subs	r3, #1
 800ebdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	db02      	blt.n	800ebe8 <FT_String_ND+0x1c0>
							{
								lngd=of-1;
 800ebe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebe4:	3b01      	subs	r3, #1
 800ebe6:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800ebe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebea:	3306      	adds	r3, #6
 800ebec:	222c      	movs	r2, #44	; 0x2c
 800ebee:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ebf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf2:	2b09      	cmp	r3, #9
 800ebf4:	dc0d      	bgt.n	800ec12 <FT_String_ND+0x1ea>
											{
												c[8]=':';
 800ebf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebf8:	3308      	adds	r3, #8
 800ebfa:	223a      	movs	r2, #58	; 0x3a
 800ebfc:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800ebfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec00:	3309      	adds	r3, #9
 800ec02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec04:	4413      	add	r3, r2
 800ec06:	2200      	movs	r2, #0
 800ec08:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800ec0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0c:	3309      	adds	r3, #9
 800ec0e:	627b      	str	r3, [r7, #36]	; 0x24
 800ec10:	e021      	b.n	800ec56 <FT_String_ND+0x22e>
											}
											else{
														if (lngd< 100)
 800ec12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec14:	2b63      	cmp	r3, #99	; 0x63
 800ec16:	dc0d      	bgt.n	800ec34 <FT_String_ND+0x20c>
														{
															c[9]=':';
 800ec18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec1a:	3309      	adds	r3, #9
 800ec1c:	223a      	movs	r2, #58	; 0x3a
 800ec1e:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800ec20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec22:	330a      	adds	r3, #10
 800ec24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec26:	4413      	add	r3, r2
 800ec28:	2200      	movs	r2, #0
 800ec2a:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800ec2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2e:	330a      	adds	r3, #10
 800ec30:	627b      	str	r3, [r7, #36]	; 0x24
 800ec32:	e010      	b.n	800ec56 <FT_String_ND+0x22e>
														}
														else
														{
														if (lngd < 1000)
 800ec34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ec3a:	da0c      	bge.n	800ec56 <FT_String_ND+0x22e>
														{
															c[10]=':';
 800ec3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec3e:	330a      	adds	r3, #10
 800ec40:	223a      	movs	r2, #58	; 0x3a
 800ec42:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800ec44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec46:	330b      	adds	r3, #11
 800ec48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec4a:	4413      	add	r3, r2
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800ec50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec52:	330b      	adds	r3, #11
 800ec54:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800ec56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec5a:	601a      	str	r2, [r3, #0]
							n4=0;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ec60:	e016      	b.n	800ec90 <FT_String_ND+0x268>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ec62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec64:	69bb      	ldr	r3, [r7, #24]
 800ec66:	1ad2      	subs	r2, r2, r3
 800ec68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6a:	441a      	add	r2, r3
 800ec6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec6e:	4413      	add	r3, r2
 800ec70:	461a      	mov	r2, r3
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	441a      	add	r2, r3
 800ec76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ec78:	69bb      	ldr	r3, [r7, #24]
 800ec7a:	1ac9      	subs	r1, r1, r3
 800ec7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec7e:	440b      	add	r3, r1
 800ec80:	4619      	mov	r1, r3
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	440b      	add	r3, r1
 800ec86:	7812      	ldrb	r2, [r2, #0]
 800ec88:	701a      	strb	r2, [r3, #0]
								n4++;
 800ec8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ec90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec92:	69bb      	ldr	r3, [r7, #24]
 800ec94:	1ad2      	subs	r2, r2, r3
 800ec96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec98:	441a      	add	r2, r3
 800ec9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec9c:	4413      	add	r3, r2
 800ec9e:	69fa      	ldr	r2, [r7, #28]
 800eca0:	429a      	cmp	r2, r3
 800eca2:	dade      	bge.n	800ec62 <FT_String_ND+0x23a>
							}
							*an=n+n4-lngb-1;
 800eca4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca8:	441a      	add	r2, r3
 800ecaa:	69bb      	ldr	r3, [r7, #24]
 800ecac:	1ad3      	subs	r3, r2, r3
 800ecae:	1e5a      	subs	r2, r3, #1
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800ecb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ecb6:	69bb      	ldr	r3, [r7, #24]
 800ecb8:	1ad2      	subs	r2, r2, r3
 800ecba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecbc:	441a      	add	r2, r3
 800ecbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc0:	4413      	add	r3, r2
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	4413      	add	r3, r2
 800ecc8:	2200      	movs	r2, #0
 800ecca:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800eccc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ecce:	69bb      	ldr	r3, [r7, #24]
 800ecd0:	1ad2      	subs	r2, r2, r3
 800ecd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd4:	4413      	add	r3, r2
 800ecd6:	461a      	mov	r2, r3
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	4413      	add	r3, r2
 800ecdc:	2200      	movs	r2, #0
 800ecde:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800ece0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	1ad2      	subs	r2, r2, r3
 800ece6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ece8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecea:	440b      	add	r3, r1
 800ecec:	429a      	cmp	r2, r3
 800ecee:	d102      	bne.n	800ecf6 <FT_String_ND+0x2ce>
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	701a      	strb	r2, [r3, #0]
							estado=3;
 800ecf6:	2303      	movs	r3, #3
 800ecf8:	623b      	str	r3, [r7, #32]

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800ecfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecfc:	2b03      	cmp	r3, #3
 800ecfe:	d146      	bne.n	800ed8e <FT_String_ND+0x366>
 800ed00:	6a3b      	ldr	r3, [r7, #32]
 800ed02:	2b01      	cmp	r3, #1
 800ed04:	d143      	bne.n	800ed8e <FT_String_ND+0x366>
						{
						n3=0;
 800ed06:	2300      	movs	r3, #0
 800ed08:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800ed0a:	e00e      	b.n	800ed2a <FT_String_ND+0x302>
									{
										c[n3]=a[*ubicacion+n3-1];
 800ed0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed0e:	681a      	ldr	r2, [r3, #0]
 800ed10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed12:	4413      	add	r3, r2
 800ed14:	3b01      	subs	r3, #1
 800ed16:	68fa      	ldr	r2, [r7, #12]
 800ed18:	441a      	add	r2, r3
 800ed1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed1c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ed1e:	440b      	add	r3, r1
 800ed20:	7812      	ldrb	r2, [r2, #0]
 800ed22:	701a      	strb	r2, [r3, #0]
										n3++;
 800ed24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed26:	3301      	adds	r3, #1
 800ed28:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800ed2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed2c:	69bb      	ldr	r3, [r7, #24]
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	dbec      	blt.n	800ed0c <FT_String_ND+0x2e4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800ed32:	2300      	movs	r3, #0
 800ed34:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800ed36:	e014      	b.n	800ed62 <FT_String_ND+0x33a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800ed38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	69bb      	ldr	r3, [r7, #24]
 800ed3e:	441a      	add	r2, r3
 800ed40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed42:	4413      	add	r3, r2
 800ed44:	3b01      	subs	r3, #1
 800ed46:	68fa      	ldr	r2, [r7, #12]
 800ed48:	441a      	add	r2, r3
 800ed4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed4c:	6819      	ldr	r1, [r3, #0]
 800ed4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed50:	440b      	add	r3, r1
 800ed52:	3b01      	subs	r3, #1
 800ed54:	68f9      	ldr	r1, [r7, #12]
 800ed56:	440b      	add	r3, r1
 800ed58:	7812      	ldrb	r2, [r2, #0]
 800ed5a:	701a      	strb	r2, [r3, #0]
										n5++;
 800ed5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5e:	3301      	adds	r3, #1
 800ed60:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800ed62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed64:	681a      	ldr	r2, [r3, #0]
 800ed66:	69bb      	ldr	r3, [r7, #24]
 800ed68:	441a      	add	r2, r3
 800ed6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed6c:	441a      	add	r2, r3
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	dde0      	ble.n	800ed38 <FT_String_ND+0x310>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800ed76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed78:	681a      	ldr	r2, [r3, #0]
 800ed7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed7c:	4413      	add	r3, r2
 800ed7e:	1e5a      	subs	r2, r3, #1
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800ed84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed88:	601a      	str	r2, [r3, #0]
							estado=3;
 800ed8a:	2303      	movs	r3, #3
 800ed8c:	623b      	str	r3, [r7, #32]
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800ed8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed90:	2b04      	cmp	r3, #4
 800ed92:	f040 80bd 	bne.w	800ef10 <FT_String_ND+0x4e8>
 800ed96:	6a3b      	ldr	r3, [r7, #32]
 800ed98:	2b01      	cmp	r3, #1
 800ed9a:	f040 80b9 	bne.w	800ef10 <FT_String_ND+0x4e8>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ed9e:	e012      	b.n	800edc6 <FT_String_ND+0x39e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800eda0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eda2:	69bb      	ldr	r3, [r7, #24]
 800eda4:	1ad2      	subs	r2, r2, r3
 800eda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda8:	4413      	add	r3, r2
 800edaa:	461a      	mov	r2, r3
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	441a      	add	r2, r3
 800edb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800edb4:	440b      	add	r3, r1
 800edb6:	7812      	ldrb	r2, [r2, #0]
 800edb8:	701a      	strb	r2, [r3, #0]
								n4++;
 800edba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edbc:	3301      	adds	r3, #1
 800edbe:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XX:
 800edc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edc4:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800edc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800edc8:	69bb      	ldr	r3, [r7, #24]
 800edca:	1ad2      	subs	r2, r2, r3
 800edcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edce:	4413      	add	r3, r2
 800edd0:	69fa      	ldr	r2, [r7, #28]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	dae4      	bge.n	800eda0 <FT_String_ND+0x378>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800edd6:	4917      	ldr	r1, [pc, #92]	; (800ee34 <FT_String_ND+0x40c>)
 800edd8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800edda:	f000 fc07 	bl	800f5ec <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800edde:	4916      	ldr	r1, [pc, #88]	; (800ee38 <FT_String_ND+0x410>)
 800ede0:	2000      	movs	r0, #0
 800ede2:	f000 fc03 	bl	800f5ec <strtok>
 800ede6:	4603      	mov	r3, r0
 800ede8:	4618      	mov	r0, r3
 800edea:	f000 f9e4 	bl	800f1b6 <atoi>
 800edee:	62b8      	str	r0, [r7, #40]	; 0x28

							if(lngd>=of-1)//if(lngd>=of-1)
 800edf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800edf2:	3b01      	subs	r3, #1
 800edf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edf6:	429a      	cmp	r2, r3
 800edf8:	db02      	blt.n	800ee00 <FT_String_ND+0x3d8>
							{
								lngd=of-1;
 800edfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800edfc:	3b01      	subs	r3, #1
 800edfe:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800ee00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee02:	3306      	adds	r3, #6
 800ee04:	222c      	movs	r2, #44	; 0x2c
 800ee06:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ee08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0a:	2b09      	cmp	r3, #9
 800ee0c:	dc07      	bgt.n	800ee1e <FT_String_ND+0x3f6>
											{
												c[8]=':';
 800ee0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee10:	3308      	adds	r3, #8
 800ee12:	223a      	movs	r2, #58	; 0x3a
 800ee14:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800ee16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee18:	3309      	adds	r3, #9
 800ee1a:	627b      	str	r3, [r7, #36]	; 0x24
 800ee1c:	e019      	b.n	800ee52 <FT_String_ND+0x42a>
											}
											else{
														if (lngd< 100)
 800ee1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee20:	2b63      	cmp	r3, #99	; 0x63
 800ee22:	dc0b      	bgt.n	800ee3c <FT_String_ND+0x414>
														{
															c[9]=':';
 800ee24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee26:	3309      	adds	r3, #9
 800ee28:	223a      	movs	r2, #58	; 0x3a
 800ee2a:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800ee2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2e:	330a      	adds	r3, #10
 800ee30:	627b      	str	r3, [r7, #36]	; 0x24
 800ee32:	e00e      	b.n	800ee52 <FT_String_ND+0x42a>
 800ee34:	0801104c 	.word	0x0801104c
 800ee38:	08011050 	.word	0x08011050
														}
														else
														{
														if (lngd < 1000)
 800ee3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ee42:	da06      	bge.n	800ee52 <FT_String_ND+0x42a>
														{
															c[10]=':';
 800ee44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee46:	330a      	adds	r3, #10
 800ee48:	223a      	movs	r2, #58	; 0x3a
 800ee4a:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800ee4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee4e:	330b      	adds	r3, #11
 800ee50:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800ee52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee56:	601a      	str	r2, [r3, #0]
							n4=0;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ee5c:	e016      	b.n	800ee8c <FT_String_ND+0x464>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ee5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee60:	69bb      	ldr	r3, [r7, #24]
 800ee62:	1ad2      	subs	r2, r2, r3
 800ee64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee66:	441a      	add	r2, r3
 800ee68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee6a:	4413      	add	r3, r2
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	441a      	add	r2, r3
 800ee72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee74:	69bb      	ldr	r3, [r7, #24]
 800ee76:	1ac9      	subs	r1, r1, r3
 800ee78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee7a:	440b      	add	r3, r1
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	440b      	add	r3, r1
 800ee82:	7812      	ldrb	r2, [r2, #0]
 800ee84:	701a      	strb	r2, [r3, #0]
								n4++;
 800ee86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee88:	3301      	adds	r3, #1
 800ee8a:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ee8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee8e:	69bb      	ldr	r3, [r7, #24]
 800ee90:	1ad2      	subs	r2, r2, r3
 800ee92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee94:	441a      	add	r2, r3
 800ee96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee98:	4413      	add	r3, r2
 800ee9a:	69fa      	ldr	r2, [r7, #28]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	dade      	bge.n	800ee5e <FT_String_ND+0x436>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800eea0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea4:	441a      	add	r2, r3
 800eea6:	69bb      	ldr	r3, [r7, #24]
 800eea8:	1ad3      	subs	r3, r2, r3
 800eeaa:	1e5a      	subs	r2, r3, #1
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	601a      	str	r2, [r3, #0]
							n5=0;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800eeb4:	e00f      	b.n	800eed6 <FT_String_ND+0x4ae>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800eeb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeba:	1ad2      	subs	r2, r2, r3
 800eebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eebe:	4413      	add	r3, r2
 800eec0:	461a      	mov	r2, r3
 800eec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eec4:	441a      	add	r2, r3
 800eec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eeca:	440b      	add	r3, r1
 800eecc:	7812      	ldrb	r2, [r2, #0]
 800eece:	701a      	strb	r2, [r3, #0]
								n5++;
 800eed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed2:	3301      	adds	r3, #1
 800eed4:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800eed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeda:	1ad2      	subs	r2, r2, r3
 800eedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eede:	441a      	add	r2, r3
 800eee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	429a      	cmp	r2, r3
 800eee6:	dbe6      	blt.n	800eeb6 <FT_String_ND+0x48e>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800eee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eeea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eeec:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800eeee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eef0:	681a      	ldr	r2, [r3, #0]
 800eef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef4:	441a      	add	r2, r3
 800eef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef8:	1ad2      	subs	r2, r2, r3
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	4413      	add	r3, r2
 800ef00:	69fa      	ldr	r2, [r7, #28]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d102      	bne.n	800ef0c <FT_String_ND+0x4e4>
							{
								estado=4;
 800ef06:	2304      	movs	r3, #4
 800ef08:	623b      	str	r3, [r7, #32]
 800ef0a:	e001      	b.n	800ef10 <FT_String_ND+0x4e8>

							}
							else
							{
								estado=5;
 800ef0c:	2305      	movs	r3, #5
 800ef0e:	623b      	str	r3, [r7, #32]
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800ef10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef12:	2b05      	cmp	r3, #5
 800ef14:	f040 80c5 	bne.w	800f0a2 <FT_String_ND+0x67a>
 800ef18:	6a3b      	ldr	r3, [r7, #32]
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	f040 80c1 	bne.w	800f0a2 <FT_String_ND+0x67a>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ef20:	e012      	b.n	800ef48 <FT_String_ND+0x520>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800ef22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef24:	69bb      	ldr	r3, [r7, #24]
 800ef26:	1ad2      	subs	r2, r2, r3
 800ef28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2a:	4413      	add	r3, r2
 800ef2c:	461a      	mov	r2, r3
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	441a      	add	r2, r3
 800ef32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef34:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ef36:	440b      	add	r3, r1
 800ef38:	7812      	ldrb	r2, [r2, #0]
 800ef3a:	701a      	strb	r2, [r3, #0]
								n4++;
 800ef3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef3e:	3301      	adds	r3, #1
 800ef40:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800ef42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef46:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ef48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef4a:	69bb      	ldr	r3, [r7, #24]
 800ef4c:	1ad2      	subs	r2, r2, r3
 800ef4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef50:	4413      	add	r3, r2
 800ef52:	69fa      	ldr	r2, [r7, #28]
 800ef54:	429a      	cmp	r2, r3
 800ef56:	dae4      	bge.n	800ef22 <FT_String_ND+0x4fa>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800ef58:	4955      	ldr	r1, [pc, #340]	; (800f0b0 <FT_String_ND+0x688>)
 800ef5a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ef5c:	f000 fb46 	bl	800f5ec <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800ef60:	4954      	ldr	r1, [pc, #336]	; (800f0b4 <FT_String_ND+0x68c>)
 800ef62:	2000      	movs	r0, #0
 800ef64:	f000 fb42 	bl	800f5ec <strtok>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f000 f923 	bl	800f1b6 <atoi>
 800ef70:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800ef72:	4950      	ldr	r1, [pc, #320]	; (800f0b4 <FT_String_ND+0x68c>)
 800ef74:	2000      	movs	r0, #0
 800ef76:	f000 fb39 	bl	800f5ec <strtok>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f000 f91a 	bl	800f1b6 <atoi>
 800ef82:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800ef84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef86:	3b01      	subs	r3, #1
 800ef88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	db02      	blt.n	800ef94 <FT_String_ND+0x56c>
							{
								lngd=of-1;
 800ef8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef90:	3b01      	subs	r3, #1
 800ef92:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800ef94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef96:	3306      	adds	r3, #6
 800ef98:	222c      	movs	r2, #44	; 0x2c
 800ef9a:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ef9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef9e:	2b09      	cmp	r3, #9
 800efa0:	dc07      	bgt.n	800efb2 <FT_String_ND+0x58a>
											{
												c[10]=':';
 800efa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efa4:	330a      	adds	r3, #10
 800efa6:	223a      	movs	r2, #58	; 0x3a
 800efa8:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800efaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efac:	330b      	adds	r3, #11
 800efae:	627b      	str	r3, [r7, #36]	; 0x24
 800efb0:	e015      	b.n	800efde <FT_String_ND+0x5b6>
											}
											else{
														if (lngd< 100)
 800efb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efb4:	2b63      	cmp	r3, #99	; 0x63
 800efb6:	dc07      	bgt.n	800efc8 <FT_String_ND+0x5a0>
														{
															c[11]=':';
 800efb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efba:	330b      	adds	r3, #11
 800efbc:	223a      	movs	r2, #58	; 0x3a
 800efbe:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800efc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc2:	330c      	adds	r3, #12
 800efc4:	627b      	str	r3, [r7, #36]	; 0x24
 800efc6:	e00a      	b.n	800efde <FT_String_ND+0x5b6>
														}
														else
														{
														if (lngd < 1000)
 800efc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800efce:	da06      	bge.n	800efde <FT_String_ND+0x5b6>
														{
															c[12]=':';
 800efd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efd2:	330c      	adds	r3, #12
 800efd4:	223a      	movs	r2, #58	; 0x3a
 800efd6:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800efd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efda:	330d      	adds	r3, #13
 800efdc:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800efde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efe2:	601a      	str	r2, [r3, #0]
							n4=0;
 800efe4:	2300      	movs	r3, #0
 800efe6:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800efe8:	e016      	b.n	800f018 <FT_String_ND+0x5f0>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800efea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800efec:	69bb      	ldr	r3, [r7, #24]
 800efee:	1ad2      	subs	r2, r2, r3
 800eff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff2:	441a      	add	r2, r3
 800eff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff6:	4413      	add	r3, r2
 800eff8:	461a      	mov	r2, r3
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	441a      	add	r2, r3
 800effe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f000:	69bb      	ldr	r3, [r7, #24]
 800f002:	1ac9      	subs	r1, r1, r3
 800f004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f006:	440b      	add	r3, r1
 800f008:	4619      	mov	r1, r3
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	440b      	add	r3, r1
 800f00e:	7812      	ldrb	r2, [r2, #0]
 800f010:	701a      	strb	r2, [r3, #0]
								n4++;
 800f012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f014:	3301      	adds	r3, #1
 800f016:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800f018:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f01a:	69bb      	ldr	r3, [r7, #24]
 800f01c:	1ad2      	subs	r2, r2, r3
 800f01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f020:	441a      	add	r2, r3
 800f022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f024:	4413      	add	r3, r2
 800f026:	69fa      	ldr	r2, [r7, #28]
 800f028:	429a      	cmp	r2, r3
 800f02a:	dade      	bge.n	800efea <FT_String_ND+0x5c2>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800f02c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f030:	441a      	add	r2, r3
 800f032:	69bb      	ldr	r3, [r7, #24]
 800f034:	1ad3      	subs	r3, r2, r3
 800f036:	1e5a      	subs	r2, r3, #1
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	601a      	str	r2, [r3, #0]
							n5=0;
 800f03c:	2300      	movs	r3, #0
 800f03e:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800f040:	e00f      	b.n	800f062 <FT_String_ND+0x63a>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800f042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f046:	1ad2      	subs	r2, r2, r3
 800f048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f04a:	4413      	add	r3, r2
 800f04c:	461a      	mov	r2, r3
 800f04e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f050:	441a      	add	r2, r3
 800f052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f054:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f056:	440b      	add	r3, r1
 800f058:	7812      	ldrb	r2, [r2, #0]
 800f05a:	701a      	strb	r2, [r3, #0]
								n5++;
 800f05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05e:	3301      	adds	r3, #1
 800f060:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800f062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f066:	1ad2      	subs	r2, r2, r3
 800f068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f06a:	441a      	add	r2, r3
 800f06c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	429a      	cmp	r2, r3
 800f072:	dbe6      	blt.n	800f042 <FT_String_ND+0x61a>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800f074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f078:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800f07a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f07c:	681a      	ldr	r2, [r3, #0]
 800f07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f080:	441a      	add	r2, r3
 800f082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f084:	1ad2      	subs	r2, r2, r3
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	4413      	add	r3, r2
 800f08c:	69fa      	ldr	r2, [r7, #28]
 800f08e:	429a      	cmp	r2, r3
 800f090:	d105      	bne.n	800f09e <FT_String_ND+0x676>
							{
								estado=4;
 800f092:	2304      	movs	r3, #4
 800f094:	623b      	str	r3, [r7, #32]
								*idcom=cliente;
 800f096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f098:	693a      	ldr	r2, [r7, #16]
 800f09a:	601a      	str	r2, [r3, #0]
 800f09c:	e001      	b.n	800f0a2 <FT_String_ND+0x67a>
							}
							else
							{
								estado=5;
 800f09e:	2305      	movs	r3, #5
 800f0a0:	623b      	str	r3, [r7, #32]
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800f0a2:	6a3b      	ldr	r3, [r7, #32]
 800f0a4:	e000      	b.n	800f0a8 <FT_String_ND+0x680>
					}
			}
			else
			{
				return(2);
 800f0a6:	2302      	movs	r3, #2
			}
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3740      	adds	r7, #64	; 0x40
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}
 800f0b0:	0801104c 	.word	0x0801104c
 800f0b4:	08011050 	.word	0x08011050

0800f0b8 <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b088      	sub	sp, #32
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800f0c2:	2330      	movs	r3, #48	; 0x30
 800f0c4:	60bb      	str	r3, [r7, #8]
 800f0c6:	f107 030c 	add.w	r3, r7, #12
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	601a      	str	r2, [r3, #0]
 800f0ce:	605a      	str	r2, [r3, #4]
 800f0d0:	609a      	str	r2, [r3, #8]
 800f0d2:	60da      	str	r2, [r3, #12]
int i=0;	
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800f0d8:	f107 0308 	add.w	r3, r7, #8
 800f0dc:	687a      	ldr	r2, [r7, #4]
 800f0de:	490f      	ldr	r1, [pc, #60]	; (800f11c <INTOA+0x64>)
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f000 fa05 	bl	800f4f0 <siprintf>
		while(i<=strlen(origbuff))
 800f0e6:	e00b      	b.n	800f100 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	1c5a      	adds	r2, r3, #1
 800f0ec:	603a      	str	r2, [r7, #0]
 800f0ee:	f107 0108 	add.w	r1, r7, #8
 800f0f2:	69fa      	ldr	r2, [r7, #28]
 800f0f4:	440a      	add	r2, r1
 800f0f6:	7812      	ldrb	r2, [r2, #0]
 800f0f8:	701a      	strb	r2, [r3, #0]
		i++;
 800f0fa:	69fb      	ldr	r3, [r7, #28]
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800f100:	f107 0308 	add.w	r3, r7, #8
 800f104:	4618      	mov	r0, r3
 800f106:	f7f1 f875 	bl	80001f4 <strlen>
 800f10a:	4602      	mov	r2, r0
 800f10c:	69fb      	ldr	r3, [r7, #28]
 800f10e:	429a      	cmp	r2, r3
 800f110:	d2ea      	bcs.n	800f0e8 <INTOA+0x30>
		}
		return(i);
 800f112:	69fb      	ldr	r3, [r7, #28]
}
 800f114:	4618      	mov	r0, r3
 800f116:	3720      	adds	r7, #32
 800f118:	46bd      	mov	sp, r7
 800f11a:	bd80      	pop	{r7, pc}
 800f11c:	08011054 	.word	0x08011054

0800f120 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b088      	sub	sp, #32
 800f124:	af00      	add	r7, sp, #0
 800f126:	60f8      	str	r0, [r7, #12]
 800f128:	60b9      	str	r1, [r7, #8]
 800f12a:	607a      	str	r2, [r7, #4]
 800f12c:	603b      	str	r3, [r7, #0]
int x =0;
 800f12e:	2300      	movs	r3, #0
 800f130:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800f132:	2300      	movs	r3, #0
 800f134:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800f136:	f107 0310 	add.w	r3, r7, #16
 800f13a:	617b      	str	r3, [r7, #20]
if (c==0)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d105      	bne.n	800f14e <CopiaVector+0x2e>
{
	x=strlen(b);
 800f142:	68b8      	ldr	r0, [r7, #8]
 800f144:	f7f1 f856 	bl	80001f4 <strlen>
 800f148:	4603      	mov	r3, r0
 800f14a:	61bb      	str	r3, [r7, #24]
 800f14c:	e02e      	b.n	800f1ac <CopiaVector+0x8c>
}
else
	{
		x=c;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800f152:	69bb      	ldr	r3, [r7, #24]
 800f154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f158:	dd01      	ble.n	800f15e <CopiaVector+0x3e>
			{
				return(1);
 800f15a:	2301      	movs	r3, #1
 800f15c:	e027      	b.n	800f1ae <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800f15e:	2300      	movs	r3, #0
 800f160:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800f162:	e00a      	b.n	800f17a <CopiaVector+0x5a>
				{
					*a++=*b++;
 800f164:	68ba      	ldr	r2, [r7, #8]
 800f166:	1c53      	adds	r3, r2, #1
 800f168:	60bb      	str	r3, [r7, #8]
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	1c59      	adds	r1, r3, #1
 800f16e:	60f9      	str	r1, [r7, #12]
 800f170:	7812      	ldrb	r2, [r2, #0]
 800f172:	701a      	strb	r2, [r3, #0]
					p++;
 800f174:	69fb      	ldr	r3, [r7, #28]
 800f176:	3301      	adds	r3, #1
 800f178:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800f17a:	69fa      	ldr	r2, [r7, #28]
 800f17c:	69bb      	ldr	r3, [r7, #24]
 800f17e:	429a      	cmp	r2, r3
 800f180:	dbf0      	blt.n	800f164 <CopiaVector+0x44>
				}


			if (d==1)
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	2b01      	cmp	r3, #1
 800f186:	d111      	bne.n	800f1ac <CopiaVector+0x8c>
			{
			  p=c;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	61fb      	str	r3, [r7, #28]
			  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800f18c:	e008      	b.n	800f1a0 <CopiaVector+0x80>
			  {

				  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	1c5a      	adds	r2, r3, #1
 800f192:	60fa      	str	r2, [r7, #12]
 800f194:	697a      	ldr	r2, [r7, #20]
 800f196:	7812      	ldrb	r2, [r2, #0]
 800f198:	701a      	strb	r2, [r3, #0]
				  p++;
 800f19a:	69fb      	ldr	r3, [r7, #28]
 800f19c:	3301      	adds	r3, #1
 800f19e:	61fb      	str	r3, [r7, #28]
			  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	69fb      	ldr	r3, [r7, #28]
 800f1a4:	429a      	cmp	r2, r3
 800f1a6:	daf2      	bge.n	800f18e <CopiaVector+0x6e>
				  //&a[p]="/0";

			  }
			return (0);
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	e000      	b.n	800f1ae <CopiaVector+0x8e>
			}

			}
	}
return (1);
 800f1ac:	2301      	movs	r3, #1
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3720      	adds	r7, #32
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}

0800f1b6 <atoi>:
 800f1b6:	220a      	movs	r2, #10
 800f1b8:	2100      	movs	r1, #0
 800f1ba:	f000 b89d 	b.w	800f2f8 <strtol>

0800f1be <__itoa>:
 800f1be:	1e93      	subs	r3, r2, #2
 800f1c0:	2b22      	cmp	r3, #34	; 0x22
 800f1c2:	b510      	push	{r4, lr}
 800f1c4:	460c      	mov	r4, r1
 800f1c6:	d904      	bls.n	800f1d2 <__itoa+0x14>
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	700b      	strb	r3, [r1, #0]
 800f1cc:	461c      	mov	r4, r3
 800f1ce:	4620      	mov	r0, r4
 800f1d0:	bd10      	pop	{r4, pc}
 800f1d2:	2a0a      	cmp	r2, #10
 800f1d4:	d109      	bne.n	800f1ea <__itoa+0x2c>
 800f1d6:	2800      	cmp	r0, #0
 800f1d8:	da07      	bge.n	800f1ea <__itoa+0x2c>
 800f1da:	232d      	movs	r3, #45	; 0x2d
 800f1dc:	700b      	strb	r3, [r1, #0]
 800f1de:	4240      	negs	r0, r0
 800f1e0:	2101      	movs	r1, #1
 800f1e2:	4421      	add	r1, r4
 800f1e4:	f000 f892 	bl	800f30c <__utoa>
 800f1e8:	e7f1      	b.n	800f1ce <__itoa+0x10>
 800f1ea:	2100      	movs	r1, #0
 800f1ec:	e7f9      	b.n	800f1e2 <__itoa+0x24>

0800f1ee <itoa>:
 800f1ee:	f7ff bfe6 	b.w	800f1be <__itoa>
	...

0800f1f4 <_strtol_l.constprop.0>:
 800f1f4:	2b01      	cmp	r3, #1
 800f1f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1fa:	d001      	beq.n	800f200 <_strtol_l.constprop.0+0xc>
 800f1fc:	2b24      	cmp	r3, #36	; 0x24
 800f1fe:	d906      	bls.n	800f20e <_strtol_l.constprop.0+0x1a>
 800f200:	f000 fa96 	bl	800f730 <__errno>
 800f204:	2316      	movs	r3, #22
 800f206:	6003      	str	r3, [r0, #0]
 800f208:	2000      	movs	r0, #0
 800f20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f20e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f2f4 <_strtol_l.constprop.0+0x100>
 800f212:	460d      	mov	r5, r1
 800f214:	462e      	mov	r6, r5
 800f216:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f21a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800f21e:	f017 0708 	ands.w	r7, r7, #8
 800f222:	d1f7      	bne.n	800f214 <_strtol_l.constprop.0+0x20>
 800f224:	2c2d      	cmp	r4, #45	; 0x2d
 800f226:	d132      	bne.n	800f28e <_strtol_l.constprop.0+0x9a>
 800f228:	782c      	ldrb	r4, [r5, #0]
 800f22a:	2701      	movs	r7, #1
 800f22c:	1cb5      	adds	r5, r6, #2
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d05b      	beq.n	800f2ea <_strtol_l.constprop.0+0xf6>
 800f232:	2b10      	cmp	r3, #16
 800f234:	d109      	bne.n	800f24a <_strtol_l.constprop.0+0x56>
 800f236:	2c30      	cmp	r4, #48	; 0x30
 800f238:	d107      	bne.n	800f24a <_strtol_l.constprop.0+0x56>
 800f23a:	782c      	ldrb	r4, [r5, #0]
 800f23c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f240:	2c58      	cmp	r4, #88	; 0x58
 800f242:	d14d      	bne.n	800f2e0 <_strtol_l.constprop.0+0xec>
 800f244:	786c      	ldrb	r4, [r5, #1]
 800f246:	2310      	movs	r3, #16
 800f248:	3502      	adds	r5, #2
 800f24a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f24e:	f108 38ff 	add.w	r8, r8, #4294967295
 800f252:	f04f 0e00 	mov.w	lr, #0
 800f256:	fbb8 f9f3 	udiv	r9, r8, r3
 800f25a:	4676      	mov	r6, lr
 800f25c:	fb03 8a19 	mls	sl, r3, r9, r8
 800f260:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f264:	f1bc 0f09 	cmp.w	ip, #9
 800f268:	d816      	bhi.n	800f298 <_strtol_l.constprop.0+0xa4>
 800f26a:	4664      	mov	r4, ip
 800f26c:	42a3      	cmp	r3, r4
 800f26e:	dd24      	ble.n	800f2ba <_strtol_l.constprop.0+0xc6>
 800f270:	f1be 3fff 	cmp.w	lr, #4294967295
 800f274:	d008      	beq.n	800f288 <_strtol_l.constprop.0+0x94>
 800f276:	45b1      	cmp	r9, r6
 800f278:	d31c      	bcc.n	800f2b4 <_strtol_l.constprop.0+0xc0>
 800f27a:	d101      	bne.n	800f280 <_strtol_l.constprop.0+0x8c>
 800f27c:	45a2      	cmp	sl, r4
 800f27e:	db19      	blt.n	800f2b4 <_strtol_l.constprop.0+0xc0>
 800f280:	fb06 4603 	mla	r6, r6, r3, r4
 800f284:	f04f 0e01 	mov.w	lr, #1
 800f288:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f28c:	e7e8      	b.n	800f260 <_strtol_l.constprop.0+0x6c>
 800f28e:	2c2b      	cmp	r4, #43	; 0x2b
 800f290:	bf04      	itt	eq
 800f292:	782c      	ldrbeq	r4, [r5, #0]
 800f294:	1cb5      	addeq	r5, r6, #2
 800f296:	e7ca      	b.n	800f22e <_strtol_l.constprop.0+0x3a>
 800f298:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f29c:	f1bc 0f19 	cmp.w	ip, #25
 800f2a0:	d801      	bhi.n	800f2a6 <_strtol_l.constprop.0+0xb2>
 800f2a2:	3c37      	subs	r4, #55	; 0x37
 800f2a4:	e7e2      	b.n	800f26c <_strtol_l.constprop.0+0x78>
 800f2a6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f2aa:	f1bc 0f19 	cmp.w	ip, #25
 800f2ae:	d804      	bhi.n	800f2ba <_strtol_l.constprop.0+0xc6>
 800f2b0:	3c57      	subs	r4, #87	; 0x57
 800f2b2:	e7db      	b.n	800f26c <_strtol_l.constprop.0+0x78>
 800f2b4:	f04f 3eff 	mov.w	lr, #4294967295
 800f2b8:	e7e6      	b.n	800f288 <_strtol_l.constprop.0+0x94>
 800f2ba:	f1be 3fff 	cmp.w	lr, #4294967295
 800f2be:	d105      	bne.n	800f2cc <_strtol_l.constprop.0+0xd8>
 800f2c0:	2322      	movs	r3, #34	; 0x22
 800f2c2:	6003      	str	r3, [r0, #0]
 800f2c4:	4646      	mov	r6, r8
 800f2c6:	b942      	cbnz	r2, 800f2da <_strtol_l.constprop.0+0xe6>
 800f2c8:	4630      	mov	r0, r6
 800f2ca:	e79e      	b.n	800f20a <_strtol_l.constprop.0+0x16>
 800f2cc:	b107      	cbz	r7, 800f2d0 <_strtol_l.constprop.0+0xdc>
 800f2ce:	4276      	negs	r6, r6
 800f2d0:	2a00      	cmp	r2, #0
 800f2d2:	d0f9      	beq.n	800f2c8 <_strtol_l.constprop.0+0xd4>
 800f2d4:	f1be 0f00 	cmp.w	lr, #0
 800f2d8:	d000      	beq.n	800f2dc <_strtol_l.constprop.0+0xe8>
 800f2da:	1e69      	subs	r1, r5, #1
 800f2dc:	6011      	str	r1, [r2, #0]
 800f2de:	e7f3      	b.n	800f2c8 <_strtol_l.constprop.0+0xd4>
 800f2e0:	2430      	movs	r4, #48	; 0x30
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d1b1      	bne.n	800f24a <_strtol_l.constprop.0+0x56>
 800f2e6:	2308      	movs	r3, #8
 800f2e8:	e7af      	b.n	800f24a <_strtol_l.constprop.0+0x56>
 800f2ea:	2c30      	cmp	r4, #48	; 0x30
 800f2ec:	d0a5      	beq.n	800f23a <_strtol_l.constprop.0+0x46>
 800f2ee:	230a      	movs	r3, #10
 800f2f0:	e7ab      	b.n	800f24a <_strtol_l.constprop.0+0x56>
 800f2f2:	bf00      	nop
 800f2f4:	08011096 	.word	0x08011096

0800f2f8 <strtol>:
 800f2f8:	4613      	mov	r3, r2
 800f2fa:	460a      	mov	r2, r1
 800f2fc:	4601      	mov	r1, r0
 800f2fe:	4802      	ldr	r0, [pc, #8]	; (800f308 <strtol+0x10>)
 800f300:	6800      	ldr	r0, [r0, #0]
 800f302:	f7ff bf77 	b.w	800f1f4 <_strtol_l.constprop.0>
 800f306:	bf00      	nop
 800f308:	20000174 	.word	0x20000174

0800f30c <__utoa>:
 800f30c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f30e:	4c1f      	ldr	r4, [pc, #124]	; (800f38c <__utoa+0x80>)
 800f310:	b08b      	sub	sp, #44	; 0x2c
 800f312:	4605      	mov	r5, r0
 800f314:	460b      	mov	r3, r1
 800f316:	466e      	mov	r6, sp
 800f318:	f104 0c20 	add.w	ip, r4, #32
 800f31c:	6820      	ldr	r0, [r4, #0]
 800f31e:	6861      	ldr	r1, [r4, #4]
 800f320:	4637      	mov	r7, r6
 800f322:	c703      	stmia	r7!, {r0, r1}
 800f324:	3408      	adds	r4, #8
 800f326:	4564      	cmp	r4, ip
 800f328:	463e      	mov	r6, r7
 800f32a:	d1f7      	bne.n	800f31c <__utoa+0x10>
 800f32c:	7921      	ldrb	r1, [r4, #4]
 800f32e:	7139      	strb	r1, [r7, #4]
 800f330:	1e91      	subs	r1, r2, #2
 800f332:	6820      	ldr	r0, [r4, #0]
 800f334:	6038      	str	r0, [r7, #0]
 800f336:	2922      	cmp	r1, #34	; 0x22
 800f338:	f04f 0100 	mov.w	r1, #0
 800f33c:	d904      	bls.n	800f348 <__utoa+0x3c>
 800f33e:	7019      	strb	r1, [r3, #0]
 800f340:	460b      	mov	r3, r1
 800f342:	4618      	mov	r0, r3
 800f344:	b00b      	add	sp, #44	; 0x2c
 800f346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f348:	1e58      	subs	r0, r3, #1
 800f34a:	4684      	mov	ip, r0
 800f34c:	fbb5 f7f2 	udiv	r7, r5, r2
 800f350:	fb02 5617 	mls	r6, r2, r7, r5
 800f354:	3628      	adds	r6, #40	; 0x28
 800f356:	446e      	add	r6, sp
 800f358:	460c      	mov	r4, r1
 800f35a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800f35e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800f362:	462e      	mov	r6, r5
 800f364:	42b2      	cmp	r2, r6
 800f366:	f101 0101 	add.w	r1, r1, #1
 800f36a:	463d      	mov	r5, r7
 800f36c:	d9ee      	bls.n	800f34c <__utoa+0x40>
 800f36e:	2200      	movs	r2, #0
 800f370:	545a      	strb	r2, [r3, r1]
 800f372:	1919      	adds	r1, r3, r4
 800f374:	1aa5      	subs	r5, r4, r2
 800f376:	42aa      	cmp	r2, r5
 800f378:	dae3      	bge.n	800f342 <__utoa+0x36>
 800f37a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800f37e:	780e      	ldrb	r6, [r1, #0]
 800f380:	7006      	strb	r6, [r0, #0]
 800f382:	3201      	adds	r2, #1
 800f384:	f801 5901 	strb.w	r5, [r1], #-1
 800f388:	e7f4      	b.n	800f374 <__utoa+0x68>
 800f38a:	bf00      	nop
 800f38c:	08011070 	.word	0x08011070

0800f390 <std>:
 800f390:	2300      	movs	r3, #0
 800f392:	b510      	push	{r4, lr}
 800f394:	4604      	mov	r4, r0
 800f396:	e9c0 3300 	strd	r3, r3, [r0]
 800f39a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f39e:	6083      	str	r3, [r0, #8]
 800f3a0:	8181      	strh	r1, [r0, #12]
 800f3a2:	6643      	str	r3, [r0, #100]	; 0x64
 800f3a4:	81c2      	strh	r2, [r0, #14]
 800f3a6:	6183      	str	r3, [r0, #24]
 800f3a8:	4619      	mov	r1, r3
 800f3aa:	2208      	movs	r2, #8
 800f3ac:	305c      	adds	r0, #92	; 0x5c
 800f3ae:	f000 f902 	bl	800f5b6 <memset>
 800f3b2:	4b05      	ldr	r3, [pc, #20]	; (800f3c8 <std+0x38>)
 800f3b4:	6263      	str	r3, [r4, #36]	; 0x24
 800f3b6:	4b05      	ldr	r3, [pc, #20]	; (800f3cc <std+0x3c>)
 800f3b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800f3ba:	4b05      	ldr	r3, [pc, #20]	; (800f3d0 <std+0x40>)
 800f3bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f3be:	4b05      	ldr	r3, [pc, #20]	; (800f3d4 <std+0x44>)
 800f3c0:	6224      	str	r4, [r4, #32]
 800f3c2:	6323      	str	r3, [r4, #48]	; 0x30
 800f3c4:	bd10      	pop	{r4, pc}
 800f3c6:	bf00      	nop
 800f3c8:	0800f531 	.word	0x0800f531
 800f3cc:	0800f553 	.word	0x0800f553
 800f3d0:	0800f58b 	.word	0x0800f58b
 800f3d4:	0800f5af 	.word	0x0800f5af

0800f3d8 <stdio_exit_handler>:
 800f3d8:	4a02      	ldr	r2, [pc, #8]	; (800f3e4 <stdio_exit_handler+0xc>)
 800f3da:	4903      	ldr	r1, [pc, #12]	; (800f3e8 <stdio_exit_handler+0x10>)
 800f3dc:	4803      	ldr	r0, [pc, #12]	; (800f3ec <stdio_exit_handler+0x14>)
 800f3de:	f000 b869 	b.w	800f4b4 <_fwalk_sglue>
 800f3e2:	bf00      	nop
 800f3e4:	2000011c 	.word	0x2000011c
 800f3e8:	080100b1 	.word	0x080100b1
 800f3ec:	20000128 	.word	0x20000128

0800f3f0 <cleanup_stdio>:
 800f3f0:	6841      	ldr	r1, [r0, #4]
 800f3f2:	4b0c      	ldr	r3, [pc, #48]	; (800f424 <cleanup_stdio+0x34>)
 800f3f4:	4299      	cmp	r1, r3
 800f3f6:	b510      	push	{r4, lr}
 800f3f8:	4604      	mov	r4, r0
 800f3fa:	d001      	beq.n	800f400 <cleanup_stdio+0x10>
 800f3fc:	f000 fe58 	bl	80100b0 <_fflush_r>
 800f400:	68a1      	ldr	r1, [r4, #8]
 800f402:	4b09      	ldr	r3, [pc, #36]	; (800f428 <cleanup_stdio+0x38>)
 800f404:	4299      	cmp	r1, r3
 800f406:	d002      	beq.n	800f40e <cleanup_stdio+0x1e>
 800f408:	4620      	mov	r0, r4
 800f40a:	f000 fe51 	bl	80100b0 <_fflush_r>
 800f40e:	68e1      	ldr	r1, [r4, #12]
 800f410:	4b06      	ldr	r3, [pc, #24]	; (800f42c <cleanup_stdio+0x3c>)
 800f412:	4299      	cmp	r1, r3
 800f414:	d004      	beq.n	800f420 <cleanup_stdio+0x30>
 800f416:	4620      	mov	r0, r4
 800f418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f41c:	f000 be48 	b.w	80100b0 <_fflush_r>
 800f420:	bd10      	pop	{r4, pc}
 800f422:	bf00      	nop
 800f424:	20004068 	.word	0x20004068
 800f428:	200040d0 	.word	0x200040d0
 800f42c:	20004138 	.word	0x20004138

0800f430 <global_stdio_init.part.0>:
 800f430:	b510      	push	{r4, lr}
 800f432:	4b0b      	ldr	r3, [pc, #44]	; (800f460 <global_stdio_init.part.0+0x30>)
 800f434:	4c0b      	ldr	r4, [pc, #44]	; (800f464 <global_stdio_init.part.0+0x34>)
 800f436:	4a0c      	ldr	r2, [pc, #48]	; (800f468 <global_stdio_init.part.0+0x38>)
 800f438:	601a      	str	r2, [r3, #0]
 800f43a:	4620      	mov	r0, r4
 800f43c:	2200      	movs	r2, #0
 800f43e:	2104      	movs	r1, #4
 800f440:	f7ff ffa6 	bl	800f390 <std>
 800f444:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f448:	2201      	movs	r2, #1
 800f44a:	2109      	movs	r1, #9
 800f44c:	f7ff ffa0 	bl	800f390 <std>
 800f450:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f454:	2202      	movs	r2, #2
 800f456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f45a:	2112      	movs	r1, #18
 800f45c:	f7ff bf98 	b.w	800f390 <std>
 800f460:	200041a0 	.word	0x200041a0
 800f464:	20004068 	.word	0x20004068
 800f468:	0800f3d9 	.word	0x0800f3d9

0800f46c <__sfp_lock_acquire>:
 800f46c:	4801      	ldr	r0, [pc, #4]	; (800f474 <__sfp_lock_acquire+0x8>)
 800f46e:	f000 b989 	b.w	800f784 <__retarget_lock_acquire_recursive>
 800f472:	bf00      	nop
 800f474:	200041a9 	.word	0x200041a9

0800f478 <__sfp_lock_release>:
 800f478:	4801      	ldr	r0, [pc, #4]	; (800f480 <__sfp_lock_release+0x8>)
 800f47a:	f000 b984 	b.w	800f786 <__retarget_lock_release_recursive>
 800f47e:	bf00      	nop
 800f480:	200041a9 	.word	0x200041a9

0800f484 <__sinit>:
 800f484:	b510      	push	{r4, lr}
 800f486:	4604      	mov	r4, r0
 800f488:	f7ff fff0 	bl	800f46c <__sfp_lock_acquire>
 800f48c:	6a23      	ldr	r3, [r4, #32]
 800f48e:	b11b      	cbz	r3, 800f498 <__sinit+0x14>
 800f490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f494:	f7ff bff0 	b.w	800f478 <__sfp_lock_release>
 800f498:	4b04      	ldr	r3, [pc, #16]	; (800f4ac <__sinit+0x28>)
 800f49a:	6223      	str	r3, [r4, #32]
 800f49c:	4b04      	ldr	r3, [pc, #16]	; (800f4b0 <__sinit+0x2c>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d1f5      	bne.n	800f490 <__sinit+0xc>
 800f4a4:	f7ff ffc4 	bl	800f430 <global_stdio_init.part.0>
 800f4a8:	e7f2      	b.n	800f490 <__sinit+0xc>
 800f4aa:	bf00      	nop
 800f4ac:	0800f3f1 	.word	0x0800f3f1
 800f4b0:	200041a0 	.word	0x200041a0

0800f4b4 <_fwalk_sglue>:
 800f4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4b8:	4607      	mov	r7, r0
 800f4ba:	4688      	mov	r8, r1
 800f4bc:	4614      	mov	r4, r2
 800f4be:	2600      	movs	r6, #0
 800f4c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f4c4:	f1b9 0901 	subs.w	r9, r9, #1
 800f4c8:	d505      	bpl.n	800f4d6 <_fwalk_sglue+0x22>
 800f4ca:	6824      	ldr	r4, [r4, #0]
 800f4cc:	2c00      	cmp	r4, #0
 800f4ce:	d1f7      	bne.n	800f4c0 <_fwalk_sglue+0xc>
 800f4d0:	4630      	mov	r0, r6
 800f4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4d6:	89ab      	ldrh	r3, [r5, #12]
 800f4d8:	2b01      	cmp	r3, #1
 800f4da:	d907      	bls.n	800f4ec <_fwalk_sglue+0x38>
 800f4dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	d003      	beq.n	800f4ec <_fwalk_sglue+0x38>
 800f4e4:	4629      	mov	r1, r5
 800f4e6:	4638      	mov	r0, r7
 800f4e8:	47c0      	blx	r8
 800f4ea:	4306      	orrs	r6, r0
 800f4ec:	3568      	adds	r5, #104	; 0x68
 800f4ee:	e7e9      	b.n	800f4c4 <_fwalk_sglue+0x10>

0800f4f0 <siprintf>:
 800f4f0:	b40e      	push	{r1, r2, r3}
 800f4f2:	b500      	push	{lr}
 800f4f4:	b09c      	sub	sp, #112	; 0x70
 800f4f6:	ab1d      	add	r3, sp, #116	; 0x74
 800f4f8:	9002      	str	r0, [sp, #8]
 800f4fa:	9006      	str	r0, [sp, #24]
 800f4fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f500:	4809      	ldr	r0, [pc, #36]	; (800f528 <siprintf+0x38>)
 800f502:	9107      	str	r1, [sp, #28]
 800f504:	9104      	str	r1, [sp, #16]
 800f506:	4909      	ldr	r1, [pc, #36]	; (800f52c <siprintf+0x3c>)
 800f508:	f853 2b04 	ldr.w	r2, [r3], #4
 800f50c:	9105      	str	r1, [sp, #20]
 800f50e:	6800      	ldr	r0, [r0, #0]
 800f510:	9301      	str	r3, [sp, #4]
 800f512:	a902      	add	r1, sp, #8
 800f514:	f000 fab8 	bl	800fa88 <_svfiprintf_r>
 800f518:	9b02      	ldr	r3, [sp, #8]
 800f51a:	2200      	movs	r2, #0
 800f51c:	701a      	strb	r2, [r3, #0]
 800f51e:	b01c      	add	sp, #112	; 0x70
 800f520:	f85d eb04 	ldr.w	lr, [sp], #4
 800f524:	b003      	add	sp, #12
 800f526:	4770      	bx	lr
 800f528:	20000174 	.word	0x20000174
 800f52c:	ffff0208 	.word	0xffff0208

0800f530 <__sread>:
 800f530:	b510      	push	{r4, lr}
 800f532:	460c      	mov	r4, r1
 800f534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f538:	f000 f8d6 	bl	800f6e8 <_read_r>
 800f53c:	2800      	cmp	r0, #0
 800f53e:	bfab      	itete	ge
 800f540:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f542:	89a3      	ldrhlt	r3, [r4, #12]
 800f544:	181b      	addge	r3, r3, r0
 800f546:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f54a:	bfac      	ite	ge
 800f54c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f54e:	81a3      	strhlt	r3, [r4, #12]
 800f550:	bd10      	pop	{r4, pc}

0800f552 <__swrite>:
 800f552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f556:	461f      	mov	r7, r3
 800f558:	898b      	ldrh	r3, [r1, #12]
 800f55a:	05db      	lsls	r3, r3, #23
 800f55c:	4605      	mov	r5, r0
 800f55e:	460c      	mov	r4, r1
 800f560:	4616      	mov	r6, r2
 800f562:	d505      	bpl.n	800f570 <__swrite+0x1e>
 800f564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f568:	2302      	movs	r3, #2
 800f56a:	2200      	movs	r2, #0
 800f56c:	f000 f8aa 	bl	800f6c4 <_lseek_r>
 800f570:	89a3      	ldrh	r3, [r4, #12]
 800f572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f576:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f57a:	81a3      	strh	r3, [r4, #12]
 800f57c:	4632      	mov	r2, r6
 800f57e:	463b      	mov	r3, r7
 800f580:	4628      	mov	r0, r5
 800f582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f586:	f000 b8c1 	b.w	800f70c <_write_r>

0800f58a <__sseek>:
 800f58a:	b510      	push	{r4, lr}
 800f58c:	460c      	mov	r4, r1
 800f58e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f592:	f000 f897 	bl	800f6c4 <_lseek_r>
 800f596:	1c43      	adds	r3, r0, #1
 800f598:	89a3      	ldrh	r3, [r4, #12]
 800f59a:	bf15      	itete	ne
 800f59c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f59e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f5a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f5a6:	81a3      	strheq	r3, [r4, #12]
 800f5a8:	bf18      	it	ne
 800f5aa:	81a3      	strhne	r3, [r4, #12]
 800f5ac:	bd10      	pop	{r4, pc}

0800f5ae <__sclose>:
 800f5ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5b2:	f000 b877 	b.w	800f6a4 <_close_r>

0800f5b6 <memset>:
 800f5b6:	4402      	add	r2, r0
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	4293      	cmp	r3, r2
 800f5bc:	d100      	bne.n	800f5c0 <memset+0xa>
 800f5be:	4770      	bx	lr
 800f5c0:	f803 1b01 	strb.w	r1, [r3], #1
 800f5c4:	e7f9      	b.n	800f5ba <memset+0x4>

0800f5c6 <strncat>:
 800f5c6:	b530      	push	{r4, r5, lr}
 800f5c8:	4604      	mov	r4, r0
 800f5ca:	7825      	ldrb	r5, [r4, #0]
 800f5cc:	4623      	mov	r3, r4
 800f5ce:	3401      	adds	r4, #1
 800f5d0:	2d00      	cmp	r5, #0
 800f5d2:	d1fa      	bne.n	800f5ca <strncat+0x4>
 800f5d4:	3a01      	subs	r2, #1
 800f5d6:	d304      	bcc.n	800f5e2 <strncat+0x1c>
 800f5d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5dc:	f803 4b01 	strb.w	r4, [r3], #1
 800f5e0:	b904      	cbnz	r4, 800f5e4 <strncat+0x1e>
 800f5e2:	bd30      	pop	{r4, r5, pc}
 800f5e4:	2a00      	cmp	r2, #0
 800f5e6:	d1f5      	bne.n	800f5d4 <strncat+0xe>
 800f5e8:	701a      	strb	r2, [r3, #0]
 800f5ea:	e7f3      	b.n	800f5d4 <strncat+0xe>

0800f5ec <strtok>:
 800f5ec:	4b16      	ldr	r3, [pc, #88]	; (800f648 <strtok+0x5c>)
 800f5ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f5f0:	681e      	ldr	r6, [r3, #0]
 800f5f2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800f5f4:	4605      	mov	r5, r0
 800f5f6:	b9fc      	cbnz	r4, 800f638 <strtok+0x4c>
 800f5f8:	2050      	movs	r0, #80	; 0x50
 800f5fa:	9101      	str	r1, [sp, #4]
 800f5fc:	f000 f936 	bl	800f86c <malloc>
 800f600:	9901      	ldr	r1, [sp, #4]
 800f602:	6470      	str	r0, [r6, #68]	; 0x44
 800f604:	4602      	mov	r2, r0
 800f606:	b920      	cbnz	r0, 800f612 <strtok+0x26>
 800f608:	4b10      	ldr	r3, [pc, #64]	; (800f64c <strtok+0x60>)
 800f60a:	4811      	ldr	r0, [pc, #68]	; (800f650 <strtok+0x64>)
 800f60c:	215b      	movs	r1, #91	; 0x5b
 800f60e:	f000 f8c3 	bl	800f798 <__assert_func>
 800f612:	e9c0 4400 	strd	r4, r4, [r0]
 800f616:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f61a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f61e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f622:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f626:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f62a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f62e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f632:	6184      	str	r4, [r0, #24]
 800f634:	7704      	strb	r4, [r0, #28]
 800f636:	6244      	str	r4, [r0, #36]	; 0x24
 800f638:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800f63a:	2301      	movs	r3, #1
 800f63c:	4628      	mov	r0, r5
 800f63e:	b002      	add	sp, #8
 800f640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f644:	f000 b806 	b.w	800f654 <__strtok_r>
 800f648:	20000174 	.word	0x20000174
 800f64c:	08011196 	.word	0x08011196
 800f650:	080111ad 	.word	0x080111ad

0800f654 <__strtok_r>:
 800f654:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f656:	b908      	cbnz	r0, 800f65c <__strtok_r+0x8>
 800f658:	6810      	ldr	r0, [r2, #0]
 800f65a:	b188      	cbz	r0, 800f680 <__strtok_r+0x2c>
 800f65c:	4604      	mov	r4, r0
 800f65e:	4620      	mov	r0, r4
 800f660:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f664:	460f      	mov	r7, r1
 800f666:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f66a:	b91e      	cbnz	r6, 800f674 <__strtok_r+0x20>
 800f66c:	b965      	cbnz	r5, 800f688 <__strtok_r+0x34>
 800f66e:	6015      	str	r5, [r2, #0]
 800f670:	4628      	mov	r0, r5
 800f672:	e005      	b.n	800f680 <__strtok_r+0x2c>
 800f674:	42b5      	cmp	r5, r6
 800f676:	d1f6      	bne.n	800f666 <__strtok_r+0x12>
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d1f0      	bne.n	800f65e <__strtok_r+0xa>
 800f67c:	6014      	str	r4, [r2, #0]
 800f67e:	7003      	strb	r3, [r0, #0]
 800f680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f682:	461c      	mov	r4, r3
 800f684:	e00c      	b.n	800f6a0 <__strtok_r+0x4c>
 800f686:	b915      	cbnz	r5, 800f68e <__strtok_r+0x3a>
 800f688:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f68c:	460e      	mov	r6, r1
 800f68e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f692:	42ab      	cmp	r3, r5
 800f694:	d1f7      	bne.n	800f686 <__strtok_r+0x32>
 800f696:	2b00      	cmp	r3, #0
 800f698:	d0f3      	beq.n	800f682 <__strtok_r+0x2e>
 800f69a:	2300      	movs	r3, #0
 800f69c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f6a0:	6014      	str	r4, [r2, #0]
 800f6a2:	e7ed      	b.n	800f680 <__strtok_r+0x2c>

0800f6a4 <_close_r>:
 800f6a4:	b538      	push	{r3, r4, r5, lr}
 800f6a6:	4d06      	ldr	r5, [pc, #24]	; (800f6c0 <_close_r+0x1c>)
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	4604      	mov	r4, r0
 800f6ac:	4608      	mov	r0, r1
 800f6ae:	602b      	str	r3, [r5, #0]
 800f6b0:	f7f3 fa05 	bl	8002abe <_close>
 800f6b4:	1c43      	adds	r3, r0, #1
 800f6b6:	d102      	bne.n	800f6be <_close_r+0x1a>
 800f6b8:	682b      	ldr	r3, [r5, #0]
 800f6ba:	b103      	cbz	r3, 800f6be <_close_r+0x1a>
 800f6bc:	6023      	str	r3, [r4, #0]
 800f6be:	bd38      	pop	{r3, r4, r5, pc}
 800f6c0:	200041a4 	.word	0x200041a4

0800f6c4 <_lseek_r>:
 800f6c4:	b538      	push	{r3, r4, r5, lr}
 800f6c6:	4d07      	ldr	r5, [pc, #28]	; (800f6e4 <_lseek_r+0x20>)
 800f6c8:	4604      	mov	r4, r0
 800f6ca:	4608      	mov	r0, r1
 800f6cc:	4611      	mov	r1, r2
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	602a      	str	r2, [r5, #0]
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	f7f3 fa1a 	bl	8002b0c <_lseek>
 800f6d8:	1c43      	adds	r3, r0, #1
 800f6da:	d102      	bne.n	800f6e2 <_lseek_r+0x1e>
 800f6dc:	682b      	ldr	r3, [r5, #0]
 800f6de:	b103      	cbz	r3, 800f6e2 <_lseek_r+0x1e>
 800f6e0:	6023      	str	r3, [r4, #0]
 800f6e2:	bd38      	pop	{r3, r4, r5, pc}
 800f6e4:	200041a4 	.word	0x200041a4

0800f6e8 <_read_r>:
 800f6e8:	b538      	push	{r3, r4, r5, lr}
 800f6ea:	4d07      	ldr	r5, [pc, #28]	; (800f708 <_read_r+0x20>)
 800f6ec:	4604      	mov	r4, r0
 800f6ee:	4608      	mov	r0, r1
 800f6f0:	4611      	mov	r1, r2
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	602a      	str	r2, [r5, #0]
 800f6f6:	461a      	mov	r2, r3
 800f6f8:	f7f3 f9a8 	bl	8002a4c <_read>
 800f6fc:	1c43      	adds	r3, r0, #1
 800f6fe:	d102      	bne.n	800f706 <_read_r+0x1e>
 800f700:	682b      	ldr	r3, [r5, #0]
 800f702:	b103      	cbz	r3, 800f706 <_read_r+0x1e>
 800f704:	6023      	str	r3, [r4, #0]
 800f706:	bd38      	pop	{r3, r4, r5, pc}
 800f708:	200041a4 	.word	0x200041a4

0800f70c <_write_r>:
 800f70c:	b538      	push	{r3, r4, r5, lr}
 800f70e:	4d07      	ldr	r5, [pc, #28]	; (800f72c <_write_r+0x20>)
 800f710:	4604      	mov	r4, r0
 800f712:	4608      	mov	r0, r1
 800f714:	4611      	mov	r1, r2
 800f716:	2200      	movs	r2, #0
 800f718:	602a      	str	r2, [r5, #0]
 800f71a:	461a      	mov	r2, r3
 800f71c:	f7f3 f9b3 	bl	8002a86 <_write>
 800f720:	1c43      	adds	r3, r0, #1
 800f722:	d102      	bne.n	800f72a <_write_r+0x1e>
 800f724:	682b      	ldr	r3, [r5, #0]
 800f726:	b103      	cbz	r3, 800f72a <_write_r+0x1e>
 800f728:	6023      	str	r3, [r4, #0]
 800f72a:	bd38      	pop	{r3, r4, r5, pc}
 800f72c:	200041a4 	.word	0x200041a4

0800f730 <__errno>:
 800f730:	4b01      	ldr	r3, [pc, #4]	; (800f738 <__errno+0x8>)
 800f732:	6818      	ldr	r0, [r3, #0]
 800f734:	4770      	bx	lr
 800f736:	bf00      	nop
 800f738:	20000174 	.word	0x20000174

0800f73c <__libc_init_array>:
 800f73c:	b570      	push	{r4, r5, r6, lr}
 800f73e:	4d0d      	ldr	r5, [pc, #52]	; (800f774 <__libc_init_array+0x38>)
 800f740:	4c0d      	ldr	r4, [pc, #52]	; (800f778 <__libc_init_array+0x3c>)
 800f742:	1b64      	subs	r4, r4, r5
 800f744:	10a4      	asrs	r4, r4, #2
 800f746:	2600      	movs	r6, #0
 800f748:	42a6      	cmp	r6, r4
 800f74a:	d109      	bne.n	800f760 <__libc_init_array+0x24>
 800f74c:	4d0b      	ldr	r5, [pc, #44]	; (800f77c <__libc_init_array+0x40>)
 800f74e:	4c0c      	ldr	r4, [pc, #48]	; (800f780 <__libc_init_array+0x44>)
 800f750:	f001 f800 	bl	8010754 <_init>
 800f754:	1b64      	subs	r4, r4, r5
 800f756:	10a4      	asrs	r4, r4, #2
 800f758:	2600      	movs	r6, #0
 800f75a:	42a6      	cmp	r6, r4
 800f75c:	d105      	bne.n	800f76a <__libc_init_array+0x2e>
 800f75e:	bd70      	pop	{r4, r5, r6, pc}
 800f760:	f855 3b04 	ldr.w	r3, [r5], #4
 800f764:	4798      	blx	r3
 800f766:	3601      	adds	r6, #1
 800f768:	e7ee      	b.n	800f748 <__libc_init_array+0xc>
 800f76a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f76e:	4798      	blx	r3
 800f770:	3601      	adds	r6, #1
 800f772:	e7f2      	b.n	800f75a <__libc_init_array+0x1e>
 800f774:	08011280 	.word	0x08011280
 800f778:	08011280 	.word	0x08011280
 800f77c:	08011280 	.word	0x08011280
 800f780:	08011284 	.word	0x08011284

0800f784 <__retarget_lock_acquire_recursive>:
 800f784:	4770      	bx	lr

0800f786 <__retarget_lock_release_recursive>:
 800f786:	4770      	bx	lr

0800f788 <strcpy>:
 800f788:	4603      	mov	r3, r0
 800f78a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f78e:	f803 2b01 	strb.w	r2, [r3], #1
 800f792:	2a00      	cmp	r2, #0
 800f794:	d1f9      	bne.n	800f78a <strcpy+0x2>
 800f796:	4770      	bx	lr

0800f798 <__assert_func>:
 800f798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f79a:	4614      	mov	r4, r2
 800f79c:	461a      	mov	r2, r3
 800f79e:	4b09      	ldr	r3, [pc, #36]	; (800f7c4 <__assert_func+0x2c>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	4605      	mov	r5, r0
 800f7a4:	68d8      	ldr	r0, [r3, #12]
 800f7a6:	b14c      	cbz	r4, 800f7bc <__assert_func+0x24>
 800f7a8:	4b07      	ldr	r3, [pc, #28]	; (800f7c8 <__assert_func+0x30>)
 800f7aa:	9100      	str	r1, [sp, #0]
 800f7ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f7b0:	4906      	ldr	r1, [pc, #24]	; (800f7cc <__assert_func+0x34>)
 800f7b2:	462b      	mov	r3, r5
 800f7b4:	f000 fca4 	bl	8010100 <fiprintf>
 800f7b8:	f000 fcec 	bl	8010194 <abort>
 800f7bc:	4b04      	ldr	r3, [pc, #16]	; (800f7d0 <__assert_func+0x38>)
 800f7be:	461c      	mov	r4, r3
 800f7c0:	e7f3      	b.n	800f7aa <__assert_func+0x12>
 800f7c2:	bf00      	nop
 800f7c4:	20000174 	.word	0x20000174
 800f7c8:	08011207 	.word	0x08011207
 800f7cc:	08011214 	.word	0x08011214
 800f7d0:	08011242 	.word	0x08011242

0800f7d4 <_free_r>:
 800f7d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f7d6:	2900      	cmp	r1, #0
 800f7d8:	d044      	beq.n	800f864 <_free_r+0x90>
 800f7da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7de:	9001      	str	r0, [sp, #4]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	f1a1 0404 	sub.w	r4, r1, #4
 800f7e6:	bfb8      	it	lt
 800f7e8:	18e4      	addlt	r4, r4, r3
 800f7ea:	f000 f8e7 	bl	800f9bc <__malloc_lock>
 800f7ee:	4a1e      	ldr	r2, [pc, #120]	; (800f868 <_free_r+0x94>)
 800f7f0:	9801      	ldr	r0, [sp, #4]
 800f7f2:	6813      	ldr	r3, [r2, #0]
 800f7f4:	b933      	cbnz	r3, 800f804 <_free_r+0x30>
 800f7f6:	6063      	str	r3, [r4, #4]
 800f7f8:	6014      	str	r4, [r2, #0]
 800f7fa:	b003      	add	sp, #12
 800f7fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f800:	f000 b8e2 	b.w	800f9c8 <__malloc_unlock>
 800f804:	42a3      	cmp	r3, r4
 800f806:	d908      	bls.n	800f81a <_free_r+0x46>
 800f808:	6825      	ldr	r5, [r4, #0]
 800f80a:	1961      	adds	r1, r4, r5
 800f80c:	428b      	cmp	r3, r1
 800f80e:	bf01      	itttt	eq
 800f810:	6819      	ldreq	r1, [r3, #0]
 800f812:	685b      	ldreq	r3, [r3, #4]
 800f814:	1949      	addeq	r1, r1, r5
 800f816:	6021      	streq	r1, [r4, #0]
 800f818:	e7ed      	b.n	800f7f6 <_free_r+0x22>
 800f81a:	461a      	mov	r2, r3
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	b10b      	cbz	r3, 800f824 <_free_r+0x50>
 800f820:	42a3      	cmp	r3, r4
 800f822:	d9fa      	bls.n	800f81a <_free_r+0x46>
 800f824:	6811      	ldr	r1, [r2, #0]
 800f826:	1855      	adds	r5, r2, r1
 800f828:	42a5      	cmp	r5, r4
 800f82a:	d10b      	bne.n	800f844 <_free_r+0x70>
 800f82c:	6824      	ldr	r4, [r4, #0]
 800f82e:	4421      	add	r1, r4
 800f830:	1854      	adds	r4, r2, r1
 800f832:	42a3      	cmp	r3, r4
 800f834:	6011      	str	r1, [r2, #0]
 800f836:	d1e0      	bne.n	800f7fa <_free_r+0x26>
 800f838:	681c      	ldr	r4, [r3, #0]
 800f83a:	685b      	ldr	r3, [r3, #4]
 800f83c:	6053      	str	r3, [r2, #4]
 800f83e:	440c      	add	r4, r1
 800f840:	6014      	str	r4, [r2, #0]
 800f842:	e7da      	b.n	800f7fa <_free_r+0x26>
 800f844:	d902      	bls.n	800f84c <_free_r+0x78>
 800f846:	230c      	movs	r3, #12
 800f848:	6003      	str	r3, [r0, #0]
 800f84a:	e7d6      	b.n	800f7fa <_free_r+0x26>
 800f84c:	6825      	ldr	r5, [r4, #0]
 800f84e:	1961      	adds	r1, r4, r5
 800f850:	428b      	cmp	r3, r1
 800f852:	bf04      	itt	eq
 800f854:	6819      	ldreq	r1, [r3, #0]
 800f856:	685b      	ldreq	r3, [r3, #4]
 800f858:	6063      	str	r3, [r4, #4]
 800f85a:	bf04      	itt	eq
 800f85c:	1949      	addeq	r1, r1, r5
 800f85e:	6021      	streq	r1, [r4, #0]
 800f860:	6054      	str	r4, [r2, #4]
 800f862:	e7ca      	b.n	800f7fa <_free_r+0x26>
 800f864:	b003      	add	sp, #12
 800f866:	bd30      	pop	{r4, r5, pc}
 800f868:	200041ac 	.word	0x200041ac

0800f86c <malloc>:
 800f86c:	4b02      	ldr	r3, [pc, #8]	; (800f878 <malloc+0xc>)
 800f86e:	4601      	mov	r1, r0
 800f870:	6818      	ldr	r0, [r3, #0]
 800f872:	f000 b823 	b.w	800f8bc <_malloc_r>
 800f876:	bf00      	nop
 800f878:	20000174 	.word	0x20000174

0800f87c <sbrk_aligned>:
 800f87c:	b570      	push	{r4, r5, r6, lr}
 800f87e:	4e0e      	ldr	r6, [pc, #56]	; (800f8b8 <sbrk_aligned+0x3c>)
 800f880:	460c      	mov	r4, r1
 800f882:	6831      	ldr	r1, [r6, #0]
 800f884:	4605      	mov	r5, r0
 800f886:	b911      	cbnz	r1, 800f88e <sbrk_aligned+0x12>
 800f888:	f000 fc66 	bl	8010158 <_sbrk_r>
 800f88c:	6030      	str	r0, [r6, #0]
 800f88e:	4621      	mov	r1, r4
 800f890:	4628      	mov	r0, r5
 800f892:	f000 fc61 	bl	8010158 <_sbrk_r>
 800f896:	1c43      	adds	r3, r0, #1
 800f898:	d00a      	beq.n	800f8b0 <sbrk_aligned+0x34>
 800f89a:	1cc4      	adds	r4, r0, #3
 800f89c:	f024 0403 	bic.w	r4, r4, #3
 800f8a0:	42a0      	cmp	r0, r4
 800f8a2:	d007      	beq.n	800f8b4 <sbrk_aligned+0x38>
 800f8a4:	1a21      	subs	r1, r4, r0
 800f8a6:	4628      	mov	r0, r5
 800f8a8:	f000 fc56 	bl	8010158 <_sbrk_r>
 800f8ac:	3001      	adds	r0, #1
 800f8ae:	d101      	bne.n	800f8b4 <sbrk_aligned+0x38>
 800f8b0:	f04f 34ff 	mov.w	r4, #4294967295
 800f8b4:	4620      	mov	r0, r4
 800f8b6:	bd70      	pop	{r4, r5, r6, pc}
 800f8b8:	200041b0 	.word	0x200041b0

0800f8bc <_malloc_r>:
 800f8bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8c0:	1ccd      	adds	r5, r1, #3
 800f8c2:	f025 0503 	bic.w	r5, r5, #3
 800f8c6:	3508      	adds	r5, #8
 800f8c8:	2d0c      	cmp	r5, #12
 800f8ca:	bf38      	it	cc
 800f8cc:	250c      	movcc	r5, #12
 800f8ce:	2d00      	cmp	r5, #0
 800f8d0:	4607      	mov	r7, r0
 800f8d2:	db01      	blt.n	800f8d8 <_malloc_r+0x1c>
 800f8d4:	42a9      	cmp	r1, r5
 800f8d6:	d905      	bls.n	800f8e4 <_malloc_r+0x28>
 800f8d8:	230c      	movs	r3, #12
 800f8da:	603b      	str	r3, [r7, #0]
 800f8dc:	2600      	movs	r6, #0
 800f8de:	4630      	mov	r0, r6
 800f8e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f9b8 <_malloc_r+0xfc>
 800f8e8:	f000 f868 	bl	800f9bc <__malloc_lock>
 800f8ec:	f8d8 3000 	ldr.w	r3, [r8]
 800f8f0:	461c      	mov	r4, r3
 800f8f2:	bb5c      	cbnz	r4, 800f94c <_malloc_r+0x90>
 800f8f4:	4629      	mov	r1, r5
 800f8f6:	4638      	mov	r0, r7
 800f8f8:	f7ff ffc0 	bl	800f87c <sbrk_aligned>
 800f8fc:	1c43      	adds	r3, r0, #1
 800f8fe:	4604      	mov	r4, r0
 800f900:	d155      	bne.n	800f9ae <_malloc_r+0xf2>
 800f902:	f8d8 4000 	ldr.w	r4, [r8]
 800f906:	4626      	mov	r6, r4
 800f908:	2e00      	cmp	r6, #0
 800f90a:	d145      	bne.n	800f998 <_malloc_r+0xdc>
 800f90c:	2c00      	cmp	r4, #0
 800f90e:	d048      	beq.n	800f9a2 <_malloc_r+0xe6>
 800f910:	6823      	ldr	r3, [r4, #0]
 800f912:	4631      	mov	r1, r6
 800f914:	4638      	mov	r0, r7
 800f916:	eb04 0903 	add.w	r9, r4, r3
 800f91a:	f000 fc1d 	bl	8010158 <_sbrk_r>
 800f91e:	4581      	cmp	r9, r0
 800f920:	d13f      	bne.n	800f9a2 <_malloc_r+0xe6>
 800f922:	6821      	ldr	r1, [r4, #0]
 800f924:	1a6d      	subs	r5, r5, r1
 800f926:	4629      	mov	r1, r5
 800f928:	4638      	mov	r0, r7
 800f92a:	f7ff ffa7 	bl	800f87c <sbrk_aligned>
 800f92e:	3001      	adds	r0, #1
 800f930:	d037      	beq.n	800f9a2 <_malloc_r+0xe6>
 800f932:	6823      	ldr	r3, [r4, #0]
 800f934:	442b      	add	r3, r5
 800f936:	6023      	str	r3, [r4, #0]
 800f938:	f8d8 3000 	ldr.w	r3, [r8]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d038      	beq.n	800f9b2 <_malloc_r+0xf6>
 800f940:	685a      	ldr	r2, [r3, #4]
 800f942:	42a2      	cmp	r2, r4
 800f944:	d12b      	bne.n	800f99e <_malloc_r+0xe2>
 800f946:	2200      	movs	r2, #0
 800f948:	605a      	str	r2, [r3, #4]
 800f94a:	e00f      	b.n	800f96c <_malloc_r+0xb0>
 800f94c:	6822      	ldr	r2, [r4, #0]
 800f94e:	1b52      	subs	r2, r2, r5
 800f950:	d41f      	bmi.n	800f992 <_malloc_r+0xd6>
 800f952:	2a0b      	cmp	r2, #11
 800f954:	d917      	bls.n	800f986 <_malloc_r+0xca>
 800f956:	1961      	adds	r1, r4, r5
 800f958:	42a3      	cmp	r3, r4
 800f95a:	6025      	str	r5, [r4, #0]
 800f95c:	bf18      	it	ne
 800f95e:	6059      	strne	r1, [r3, #4]
 800f960:	6863      	ldr	r3, [r4, #4]
 800f962:	bf08      	it	eq
 800f964:	f8c8 1000 	streq.w	r1, [r8]
 800f968:	5162      	str	r2, [r4, r5]
 800f96a:	604b      	str	r3, [r1, #4]
 800f96c:	4638      	mov	r0, r7
 800f96e:	f104 060b 	add.w	r6, r4, #11
 800f972:	f000 f829 	bl	800f9c8 <__malloc_unlock>
 800f976:	f026 0607 	bic.w	r6, r6, #7
 800f97a:	1d23      	adds	r3, r4, #4
 800f97c:	1af2      	subs	r2, r6, r3
 800f97e:	d0ae      	beq.n	800f8de <_malloc_r+0x22>
 800f980:	1b9b      	subs	r3, r3, r6
 800f982:	50a3      	str	r3, [r4, r2]
 800f984:	e7ab      	b.n	800f8de <_malloc_r+0x22>
 800f986:	42a3      	cmp	r3, r4
 800f988:	6862      	ldr	r2, [r4, #4]
 800f98a:	d1dd      	bne.n	800f948 <_malloc_r+0x8c>
 800f98c:	f8c8 2000 	str.w	r2, [r8]
 800f990:	e7ec      	b.n	800f96c <_malloc_r+0xb0>
 800f992:	4623      	mov	r3, r4
 800f994:	6864      	ldr	r4, [r4, #4]
 800f996:	e7ac      	b.n	800f8f2 <_malloc_r+0x36>
 800f998:	4634      	mov	r4, r6
 800f99a:	6876      	ldr	r6, [r6, #4]
 800f99c:	e7b4      	b.n	800f908 <_malloc_r+0x4c>
 800f99e:	4613      	mov	r3, r2
 800f9a0:	e7cc      	b.n	800f93c <_malloc_r+0x80>
 800f9a2:	230c      	movs	r3, #12
 800f9a4:	603b      	str	r3, [r7, #0]
 800f9a6:	4638      	mov	r0, r7
 800f9a8:	f000 f80e 	bl	800f9c8 <__malloc_unlock>
 800f9ac:	e797      	b.n	800f8de <_malloc_r+0x22>
 800f9ae:	6025      	str	r5, [r4, #0]
 800f9b0:	e7dc      	b.n	800f96c <_malloc_r+0xb0>
 800f9b2:	605b      	str	r3, [r3, #4]
 800f9b4:	deff      	udf	#255	; 0xff
 800f9b6:	bf00      	nop
 800f9b8:	200041ac 	.word	0x200041ac

0800f9bc <__malloc_lock>:
 800f9bc:	4801      	ldr	r0, [pc, #4]	; (800f9c4 <__malloc_lock+0x8>)
 800f9be:	f7ff bee1 	b.w	800f784 <__retarget_lock_acquire_recursive>
 800f9c2:	bf00      	nop
 800f9c4:	200041a8 	.word	0x200041a8

0800f9c8 <__malloc_unlock>:
 800f9c8:	4801      	ldr	r0, [pc, #4]	; (800f9d0 <__malloc_unlock+0x8>)
 800f9ca:	f7ff bedc 	b.w	800f786 <__retarget_lock_release_recursive>
 800f9ce:	bf00      	nop
 800f9d0:	200041a8 	.word	0x200041a8

0800f9d4 <__ssputs_r>:
 800f9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9d8:	688e      	ldr	r6, [r1, #8]
 800f9da:	461f      	mov	r7, r3
 800f9dc:	42be      	cmp	r6, r7
 800f9de:	680b      	ldr	r3, [r1, #0]
 800f9e0:	4682      	mov	sl, r0
 800f9e2:	460c      	mov	r4, r1
 800f9e4:	4690      	mov	r8, r2
 800f9e6:	d82c      	bhi.n	800fa42 <__ssputs_r+0x6e>
 800f9e8:	898a      	ldrh	r2, [r1, #12]
 800f9ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f9ee:	d026      	beq.n	800fa3e <__ssputs_r+0x6a>
 800f9f0:	6965      	ldr	r5, [r4, #20]
 800f9f2:	6909      	ldr	r1, [r1, #16]
 800f9f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f9f8:	eba3 0901 	sub.w	r9, r3, r1
 800f9fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fa00:	1c7b      	adds	r3, r7, #1
 800fa02:	444b      	add	r3, r9
 800fa04:	106d      	asrs	r5, r5, #1
 800fa06:	429d      	cmp	r5, r3
 800fa08:	bf38      	it	cc
 800fa0a:	461d      	movcc	r5, r3
 800fa0c:	0553      	lsls	r3, r2, #21
 800fa0e:	d527      	bpl.n	800fa60 <__ssputs_r+0x8c>
 800fa10:	4629      	mov	r1, r5
 800fa12:	f7ff ff53 	bl	800f8bc <_malloc_r>
 800fa16:	4606      	mov	r6, r0
 800fa18:	b360      	cbz	r0, 800fa74 <__ssputs_r+0xa0>
 800fa1a:	6921      	ldr	r1, [r4, #16]
 800fa1c:	464a      	mov	r2, r9
 800fa1e:	f000 fbab 	bl	8010178 <memcpy>
 800fa22:	89a3      	ldrh	r3, [r4, #12]
 800fa24:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fa28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa2c:	81a3      	strh	r3, [r4, #12]
 800fa2e:	6126      	str	r6, [r4, #16]
 800fa30:	6165      	str	r5, [r4, #20]
 800fa32:	444e      	add	r6, r9
 800fa34:	eba5 0509 	sub.w	r5, r5, r9
 800fa38:	6026      	str	r6, [r4, #0]
 800fa3a:	60a5      	str	r5, [r4, #8]
 800fa3c:	463e      	mov	r6, r7
 800fa3e:	42be      	cmp	r6, r7
 800fa40:	d900      	bls.n	800fa44 <__ssputs_r+0x70>
 800fa42:	463e      	mov	r6, r7
 800fa44:	6820      	ldr	r0, [r4, #0]
 800fa46:	4632      	mov	r2, r6
 800fa48:	4641      	mov	r1, r8
 800fa4a:	f000 fb6b 	bl	8010124 <memmove>
 800fa4e:	68a3      	ldr	r3, [r4, #8]
 800fa50:	1b9b      	subs	r3, r3, r6
 800fa52:	60a3      	str	r3, [r4, #8]
 800fa54:	6823      	ldr	r3, [r4, #0]
 800fa56:	4433      	add	r3, r6
 800fa58:	6023      	str	r3, [r4, #0]
 800fa5a:	2000      	movs	r0, #0
 800fa5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa60:	462a      	mov	r2, r5
 800fa62:	f000 fb9e 	bl	80101a2 <_realloc_r>
 800fa66:	4606      	mov	r6, r0
 800fa68:	2800      	cmp	r0, #0
 800fa6a:	d1e0      	bne.n	800fa2e <__ssputs_r+0x5a>
 800fa6c:	6921      	ldr	r1, [r4, #16]
 800fa6e:	4650      	mov	r0, sl
 800fa70:	f7ff feb0 	bl	800f7d4 <_free_r>
 800fa74:	230c      	movs	r3, #12
 800fa76:	f8ca 3000 	str.w	r3, [sl]
 800fa7a:	89a3      	ldrh	r3, [r4, #12]
 800fa7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa80:	81a3      	strh	r3, [r4, #12]
 800fa82:	f04f 30ff 	mov.w	r0, #4294967295
 800fa86:	e7e9      	b.n	800fa5c <__ssputs_r+0x88>

0800fa88 <_svfiprintf_r>:
 800fa88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa8c:	4698      	mov	r8, r3
 800fa8e:	898b      	ldrh	r3, [r1, #12]
 800fa90:	061b      	lsls	r3, r3, #24
 800fa92:	b09d      	sub	sp, #116	; 0x74
 800fa94:	4607      	mov	r7, r0
 800fa96:	460d      	mov	r5, r1
 800fa98:	4614      	mov	r4, r2
 800fa9a:	d50e      	bpl.n	800faba <_svfiprintf_r+0x32>
 800fa9c:	690b      	ldr	r3, [r1, #16]
 800fa9e:	b963      	cbnz	r3, 800faba <_svfiprintf_r+0x32>
 800faa0:	2140      	movs	r1, #64	; 0x40
 800faa2:	f7ff ff0b 	bl	800f8bc <_malloc_r>
 800faa6:	6028      	str	r0, [r5, #0]
 800faa8:	6128      	str	r0, [r5, #16]
 800faaa:	b920      	cbnz	r0, 800fab6 <_svfiprintf_r+0x2e>
 800faac:	230c      	movs	r3, #12
 800faae:	603b      	str	r3, [r7, #0]
 800fab0:	f04f 30ff 	mov.w	r0, #4294967295
 800fab4:	e0d0      	b.n	800fc58 <_svfiprintf_r+0x1d0>
 800fab6:	2340      	movs	r3, #64	; 0x40
 800fab8:	616b      	str	r3, [r5, #20]
 800faba:	2300      	movs	r3, #0
 800fabc:	9309      	str	r3, [sp, #36]	; 0x24
 800fabe:	2320      	movs	r3, #32
 800fac0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fac4:	f8cd 800c 	str.w	r8, [sp, #12]
 800fac8:	2330      	movs	r3, #48	; 0x30
 800faca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fc70 <_svfiprintf_r+0x1e8>
 800face:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fad2:	f04f 0901 	mov.w	r9, #1
 800fad6:	4623      	mov	r3, r4
 800fad8:	469a      	mov	sl, r3
 800fada:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fade:	b10a      	cbz	r2, 800fae4 <_svfiprintf_r+0x5c>
 800fae0:	2a25      	cmp	r2, #37	; 0x25
 800fae2:	d1f9      	bne.n	800fad8 <_svfiprintf_r+0x50>
 800fae4:	ebba 0b04 	subs.w	fp, sl, r4
 800fae8:	d00b      	beq.n	800fb02 <_svfiprintf_r+0x7a>
 800faea:	465b      	mov	r3, fp
 800faec:	4622      	mov	r2, r4
 800faee:	4629      	mov	r1, r5
 800faf0:	4638      	mov	r0, r7
 800faf2:	f7ff ff6f 	bl	800f9d4 <__ssputs_r>
 800faf6:	3001      	adds	r0, #1
 800faf8:	f000 80a9 	beq.w	800fc4e <_svfiprintf_r+0x1c6>
 800fafc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fafe:	445a      	add	r2, fp
 800fb00:	9209      	str	r2, [sp, #36]	; 0x24
 800fb02:	f89a 3000 	ldrb.w	r3, [sl]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	f000 80a1 	beq.w	800fc4e <_svfiprintf_r+0x1c6>
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	f04f 32ff 	mov.w	r2, #4294967295
 800fb12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb16:	f10a 0a01 	add.w	sl, sl, #1
 800fb1a:	9304      	str	r3, [sp, #16]
 800fb1c:	9307      	str	r3, [sp, #28]
 800fb1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb22:	931a      	str	r3, [sp, #104]	; 0x68
 800fb24:	4654      	mov	r4, sl
 800fb26:	2205      	movs	r2, #5
 800fb28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb2c:	4850      	ldr	r0, [pc, #320]	; (800fc70 <_svfiprintf_r+0x1e8>)
 800fb2e:	f7f0 fb6f 	bl	8000210 <memchr>
 800fb32:	9a04      	ldr	r2, [sp, #16]
 800fb34:	b9d8      	cbnz	r0, 800fb6e <_svfiprintf_r+0xe6>
 800fb36:	06d0      	lsls	r0, r2, #27
 800fb38:	bf44      	itt	mi
 800fb3a:	2320      	movmi	r3, #32
 800fb3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb40:	0711      	lsls	r1, r2, #28
 800fb42:	bf44      	itt	mi
 800fb44:	232b      	movmi	r3, #43	; 0x2b
 800fb46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb4a:	f89a 3000 	ldrb.w	r3, [sl]
 800fb4e:	2b2a      	cmp	r3, #42	; 0x2a
 800fb50:	d015      	beq.n	800fb7e <_svfiprintf_r+0xf6>
 800fb52:	9a07      	ldr	r2, [sp, #28]
 800fb54:	4654      	mov	r4, sl
 800fb56:	2000      	movs	r0, #0
 800fb58:	f04f 0c0a 	mov.w	ip, #10
 800fb5c:	4621      	mov	r1, r4
 800fb5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb62:	3b30      	subs	r3, #48	; 0x30
 800fb64:	2b09      	cmp	r3, #9
 800fb66:	d94d      	bls.n	800fc04 <_svfiprintf_r+0x17c>
 800fb68:	b1b0      	cbz	r0, 800fb98 <_svfiprintf_r+0x110>
 800fb6a:	9207      	str	r2, [sp, #28]
 800fb6c:	e014      	b.n	800fb98 <_svfiprintf_r+0x110>
 800fb6e:	eba0 0308 	sub.w	r3, r0, r8
 800fb72:	fa09 f303 	lsl.w	r3, r9, r3
 800fb76:	4313      	orrs	r3, r2
 800fb78:	9304      	str	r3, [sp, #16]
 800fb7a:	46a2      	mov	sl, r4
 800fb7c:	e7d2      	b.n	800fb24 <_svfiprintf_r+0x9c>
 800fb7e:	9b03      	ldr	r3, [sp, #12]
 800fb80:	1d19      	adds	r1, r3, #4
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	9103      	str	r1, [sp, #12]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	bfbb      	ittet	lt
 800fb8a:	425b      	neglt	r3, r3
 800fb8c:	f042 0202 	orrlt.w	r2, r2, #2
 800fb90:	9307      	strge	r3, [sp, #28]
 800fb92:	9307      	strlt	r3, [sp, #28]
 800fb94:	bfb8      	it	lt
 800fb96:	9204      	strlt	r2, [sp, #16]
 800fb98:	7823      	ldrb	r3, [r4, #0]
 800fb9a:	2b2e      	cmp	r3, #46	; 0x2e
 800fb9c:	d10c      	bne.n	800fbb8 <_svfiprintf_r+0x130>
 800fb9e:	7863      	ldrb	r3, [r4, #1]
 800fba0:	2b2a      	cmp	r3, #42	; 0x2a
 800fba2:	d134      	bne.n	800fc0e <_svfiprintf_r+0x186>
 800fba4:	9b03      	ldr	r3, [sp, #12]
 800fba6:	1d1a      	adds	r2, r3, #4
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	9203      	str	r2, [sp, #12]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	bfb8      	it	lt
 800fbb0:	f04f 33ff 	movlt.w	r3, #4294967295
 800fbb4:	3402      	adds	r4, #2
 800fbb6:	9305      	str	r3, [sp, #20]
 800fbb8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fc80 <_svfiprintf_r+0x1f8>
 800fbbc:	7821      	ldrb	r1, [r4, #0]
 800fbbe:	2203      	movs	r2, #3
 800fbc0:	4650      	mov	r0, sl
 800fbc2:	f7f0 fb25 	bl	8000210 <memchr>
 800fbc6:	b138      	cbz	r0, 800fbd8 <_svfiprintf_r+0x150>
 800fbc8:	9b04      	ldr	r3, [sp, #16]
 800fbca:	eba0 000a 	sub.w	r0, r0, sl
 800fbce:	2240      	movs	r2, #64	; 0x40
 800fbd0:	4082      	lsls	r2, r0
 800fbd2:	4313      	orrs	r3, r2
 800fbd4:	3401      	adds	r4, #1
 800fbd6:	9304      	str	r3, [sp, #16]
 800fbd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbdc:	4825      	ldr	r0, [pc, #148]	; (800fc74 <_svfiprintf_r+0x1ec>)
 800fbde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fbe2:	2206      	movs	r2, #6
 800fbe4:	f7f0 fb14 	bl	8000210 <memchr>
 800fbe8:	2800      	cmp	r0, #0
 800fbea:	d038      	beq.n	800fc5e <_svfiprintf_r+0x1d6>
 800fbec:	4b22      	ldr	r3, [pc, #136]	; (800fc78 <_svfiprintf_r+0x1f0>)
 800fbee:	bb1b      	cbnz	r3, 800fc38 <_svfiprintf_r+0x1b0>
 800fbf0:	9b03      	ldr	r3, [sp, #12]
 800fbf2:	3307      	adds	r3, #7
 800fbf4:	f023 0307 	bic.w	r3, r3, #7
 800fbf8:	3308      	adds	r3, #8
 800fbfa:	9303      	str	r3, [sp, #12]
 800fbfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbfe:	4433      	add	r3, r6
 800fc00:	9309      	str	r3, [sp, #36]	; 0x24
 800fc02:	e768      	b.n	800fad6 <_svfiprintf_r+0x4e>
 800fc04:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc08:	460c      	mov	r4, r1
 800fc0a:	2001      	movs	r0, #1
 800fc0c:	e7a6      	b.n	800fb5c <_svfiprintf_r+0xd4>
 800fc0e:	2300      	movs	r3, #0
 800fc10:	3401      	adds	r4, #1
 800fc12:	9305      	str	r3, [sp, #20]
 800fc14:	4619      	mov	r1, r3
 800fc16:	f04f 0c0a 	mov.w	ip, #10
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc20:	3a30      	subs	r2, #48	; 0x30
 800fc22:	2a09      	cmp	r2, #9
 800fc24:	d903      	bls.n	800fc2e <_svfiprintf_r+0x1a6>
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d0c6      	beq.n	800fbb8 <_svfiprintf_r+0x130>
 800fc2a:	9105      	str	r1, [sp, #20]
 800fc2c:	e7c4      	b.n	800fbb8 <_svfiprintf_r+0x130>
 800fc2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc32:	4604      	mov	r4, r0
 800fc34:	2301      	movs	r3, #1
 800fc36:	e7f0      	b.n	800fc1a <_svfiprintf_r+0x192>
 800fc38:	ab03      	add	r3, sp, #12
 800fc3a:	9300      	str	r3, [sp, #0]
 800fc3c:	462a      	mov	r2, r5
 800fc3e:	4b0f      	ldr	r3, [pc, #60]	; (800fc7c <_svfiprintf_r+0x1f4>)
 800fc40:	a904      	add	r1, sp, #16
 800fc42:	4638      	mov	r0, r7
 800fc44:	f3af 8000 	nop.w
 800fc48:	1c42      	adds	r2, r0, #1
 800fc4a:	4606      	mov	r6, r0
 800fc4c:	d1d6      	bne.n	800fbfc <_svfiprintf_r+0x174>
 800fc4e:	89ab      	ldrh	r3, [r5, #12]
 800fc50:	065b      	lsls	r3, r3, #25
 800fc52:	f53f af2d 	bmi.w	800fab0 <_svfiprintf_r+0x28>
 800fc56:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc58:	b01d      	add	sp, #116	; 0x74
 800fc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc5e:	ab03      	add	r3, sp, #12
 800fc60:	9300      	str	r3, [sp, #0]
 800fc62:	462a      	mov	r2, r5
 800fc64:	4b05      	ldr	r3, [pc, #20]	; (800fc7c <_svfiprintf_r+0x1f4>)
 800fc66:	a904      	add	r1, sp, #16
 800fc68:	4638      	mov	r0, r7
 800fc6a:	f000 f879 	bl	800fd60 <_printf_i>
 800fc6e:	e7eb      	b.n	800fc48 <_svfiprintf_r+0x1c0>
 800fc70:	08011243 	.word	0x08011243
 800fc74:	0801124d 	.word	0x0801124d
 800fc78:	00000000 	.word	0x00000000
 800fc7c:	0800f9d5 	.word	0x0800f9d5
 800fc80:	08011249 	.word	0x08011249

0800fc84 <_printf_common>:
 800fc84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc88:	4616      	mov	r6, r2
 800fc8a:	4699      	mov	r9, r3
 800fc8c:	688a      	ldr	r2, [r1, #8]
 800fc8e:	690b      	ldr	r3, [r1, #16]
 800fc90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fc94:	4293      	cmp	r3, r2
 800fc96:	bfb8      	it	lt
 800fc98:	4613      	movlt	r3, r2
 800fc9a:	6033      	str	r3, [r6, #0]
 800fc9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fca0:	4607      	mov	r7, r0
 800fca2:	460c      	mov	r4, r1
 800fca4:	b10a      	cbz	r2, 800fcaa <_printf_common+0x26>
 800fca6:	3301      	adds	r3, #1
 800fca8:	6033      	str	r3, [r6, #0]
 800fcaa:	6823      	ldr	r3, [r4, #0]
 800fcac:	0699      	lsls	r1, r3, #26
 800fcae:	bf42      	ittt	mi
 800fcb0:	6833      	ldrmi	r3, [r6, #0]
 800fcb2:	3302      	addmi	r3, #2
 800fcb4:	6033      	strmi	r3, [r6, #0]
 800fcb6:	6825      	ldr	r5, [r4, #0]
 800fcb8:	f015 0506 	ands.w	r5, r5, #6
 800fcbc:	d106      	bne.n	800fccc <_printf_common+0x48>
 800fcbe:	f104 0a19 	add.w	sl, r4, #25
 800fcc2:	68e3      	ldr	r3, [r4, #12]
 800fcc4:	6832      	ldr	r2, [r6, #0]
 800fcc6:	1a9b      	subs	r3, r3, r2
 800fcc8:	42ab      	cmp	r3, r5
 800fcca:	dc26      	bgt.n	800fd1a <_printf_common+0x96>
 800fccc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fcd0:	1e13      	subs	r3, r2, #0
 800fcd2:	6822      	ldr	r2, [r4, #0]
 800fcd4:	bf18      	it	ne
 800fcd6:	2301      	movne	r3, #1
 800fcd8:	0692      	lsls	r2, r2, #26
 800fcda:	d42b      	bmi.n	800fd34 <_printf_common+0xb0>
 800fcdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fce0:	4649      	mov	r1, r9
 800fce2:	4638      	mov	r0, r7
 800fce4:	47c0      	blx	r8
 800fce6:	3001      	adds	r0, #1
 800fce8:	d01e      	beq.n	800fd28 <_printf_common+0xa4>
 800fcea:	6823      	ldr	r3, [r4, #0]
 800fcec:	6922      	ldr	r2, [r4, #16]
 800fcee:	f003 0306 	and.w	r3, r3, #6
 800fcf2:	2b04      	cmp	r3, #4
 800fcf4:	bf02      	ittt	eq
 800fcf6:	68e5      	ldreq	r5, [r4, #12]
 800fcf8:	6833      	ldreq	r3, [r6, #0]
 800fcfa:	1aed      	subeq	r5, r5, r3
 800fcfc:	68a3      	ldr	r3, [r4, #8]
 800fcfe:	bf0c      	ite	eq
 800fd00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd04:	2500      	movne	r5, #0
 800fd06:	4293      	cmp	r3, r2
 800fd08:	bfc4      	itt	gt
 800fd0a:	1a9b      	subgt	r3, r3, r2
 800fd0c:	18ed      	addgt	r5, r5, r3
 800fd0e:	2600      	movs	r6, #0
 800fd10:	341a      	adds	r4, #26
 800fd12:	42b5      	cmp	r5, r6
 800fd14:	d11a      	bne.n	800fd4c <_printf_common+0xc8>
 800fd16:	2000      	movs	r0, #0
 800fd18:	e008      	b.n	800fd2c <_printf_common+0xa8>
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	4652      	mov	r2, sl
 800fd1e:	4649      	mov	r1, r9
 800fd20:	4638      	mov	r0, r7
 800fd22:	47c0      	blx	r8
 800fd24:	3001      	adds	r0, #1
 800fd26:	d103      	bne.n	800fd30 <_printf_common+0xac>
 800fd28:	f04f 30ff 	mov.w	r0, #4294967295
 800fd2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd30:	3501      	adds	r5, #1
 800fd32:	e7c6      	b.n	800fcc2 <_printf_common+0x3e>
 800fd34:	18e1      	adds	r1, r4, r3
 800fd36:	1c5a      	adds	r2, r3, #1
 800fd38:	2030      	movs	r0, #48	; 0x30
 800fd3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd3e:	4422      	add	r2, r4
 800fd40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fd44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fd48:	3302      	adds	r3, #2
 800fd4a:	e7c7      	b.n	800fcdc <_printf_common+0x58>
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	4622      	mov	r2, r4
 800fd50:	4649      	mov	r1, r9
 800fd52:	4638      	mov	r0, r7
 800fd54:	47c0      	blx	r8
 800fd56:	3001      	adds	r0, #1
 800fd58:	d0e6      	beq.n	800fd28 <_printf_common+0xa4>
 800fd5a:	3601      	adds	r6, #1
 800fd5c:	e7d9      	b.n	800fd12 <_printf_common+0x8e>
	...

0800fd60 <_printf_i>:
 800fd60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd64:	7e0f      	ldrb	r7, [r1, #24]
 800fd66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fd68:	2f78      	cmp	r7, #120	; 0x78
 800fd6a:	4691      	mov	r9, r2
 800fd6c:	4680      	mov	r8, r0
 800fd6e:	460c      	mov	r4, r1
 800fd70:	469a      	mov	sl, r3
 800fd72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fd76:	d807      	bhi.n	800fd88 <_printf_i+0x28>
 800fd78:	2f62      	cmp	r7, #98	; 0x62
 800fd7a:	d80a      	bhi.n	800fd92 <_printf_i+0x32>
 800fd7c:	2f00      	cmp	r7, #0
 800fd7e:	f000 80d4 	beq.w	800ff2a <_printf_i+0x1ca>
 800fd82:	2f58      	cmp	r7, #88	; 0x58
 800fd84:	f000 80c0 	beq.w	800ff08 <_printf_i+0x1a8>
 800fd88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fd90:	e03a      	b.n	800fe08 <_printf_i+0xa8>
 800fd92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fd96:	2b15      	cmp	r3, #21
 800fd98:	d8f6      	bhi.n	800fd88 <_printf_i+0x28>
 800fd9a:	a101      	add	r1, pc, #4	; (adr r1, 800fda0 <_printf_i+0x40>)
 800fd9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fda0:	0800fdf9 	.word	0x0800fdf9
 800fda4:	0800fe0d 	.word	0x0800fe0d
 800fda8:	0800fd89 	.word	0x0800fd89
 800fdac:	0800fd89 	.word	0x0800fd89
 800fdb0:	0800fd89 	.word	0x0800fd89
 800fdb4:	0800fd89 	.word	0x0800fd89
 800fdb8:	0800fe0d 	.word	0x0800fe0d
 800fdbc:	0800fd89 	.word	0x0800fd89
 800fdc0:	0800fd89 	.word	0x0800fd89
 800fdc4:	0800fd89 	.word	0x0800fd89
 800fdc8:	0800fd89 	.word	0x0800fd89
 800fdcc:	0800ff11 	.word	0x0800ff11
 800fdd0:	0800fe39 	.word	0x0800fe39
 800fdd4:	0800fecb 	.word	0x0800fecb
 800fdd8:	0800fd89 	.word	0x0800fd89
 800fddc:	0800fd89 	.word	0x0800fd89
 800fde0:	0800ff33 	.word	0x0800ff33
 800fde4:	0800fd89 	.word	0x0800fd89
 800fde8:	0800fe39 	.word	0x0800fe39
 800fdec:	0800fd89 	.word	0x0800fd89
 800fdf0:	0800fd89 	.word	0x0800fd89
 800fdf4:	0800fed3 	.word	0x0800fed3
 800fdf8:	682b      	ldr	r3, [r5, #0]
 800fdfa:	1d1a      	adds	r2, r3, #4
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	602a      	str	r2, [r5, #0]
 800fe00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fe04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fe08:	2301      	movs	r3, #1
 800fe0a:	e09f      	b.n	800ff4c <_printf_i+0x1ec>
 800fe0c:	6820      	ldr	r0, [r4, #0]
 800fe0e:	682b      	ldr	r3, [r5, #0]
 800fe10:	0607      	lsls	r7, r0, #24
 800fe12:	f103 0104 	add.w	r1, r3, #4
 800fe16:	6029      	str	r1, [r5, #0]
 800fe18:	d501      	bpl.n	800fe1e <_printf_i+0xbe>
 800fe1a:	681e      	ldr	r6, [r3, #0]
 800fe1c:	e003      	b.n	800fe26 <_printf_i+0xc6>
 800fe1e:	0646      	lsls	r6, r0, #25
 800fe20:	d5fb      	bpl.n	800fe1a <_printf_i+0xba>
 800fe22:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fe26:	2e00      	cmp	r6, #0
 800fe28:	da03      	bge.n	800fe32 <_printf_i+0xd2>
 800fe2a:	232d      	movs	r3, #45	; 0x2d
 800fe2c:	4276      	negs	r6, r6
 800fe2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe32:	485a      	ldr	r0, [pc, #360]	; (800ff9c <_printf_i+0x23c>)
 800fe34:	230a      	movs	r3, #10
 800fe36:	e012      	b.n	800fe5e <_printf_i+0xfe>
 800fe38:	682b      	ldr	r3, [r5, #0]
 800fe3a:	6820      	ldr	r0, [r4, #0]
 800fe3c:	1d19      	adds	r1, r3, #4
 800fe3e:	6029      	str	r1, [r5, #0]
 800fe40:	0605      	lsls	r5, r0, #24
 800fe42:	d501      	bpl.n	800fe48 <_printf_i+0xe8>
 800fe44:	681e      	ldr	r6, [r3, #0]
 800fe46:	e002      	b.n	800fe4e <_printf_i+0xee>
 800fe48:	0641      	lsls	r1, r0, #25
 800fe4a:	d5fb      	bpl.n	800fe44 <_printf_i+0xe4>
 800fe4c:	881e      	ldrh	r6, [r3, #0]
 800fe4e:	4853      	ldr	r0, [pc, #332]	; (800ff9c <_printf_i+0x23c>)
 800fe50:	2f6f      	cmp	r7, #111	; 0x6f
 800fe52:	bf0c      	ite	eq
 800fe54:	2308      	moveq	r3, #8
 800fe56:	230a      	movne	r3, #10
 800fe58:	2100      	movs	r1, #0
 800fe5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fe5e:	6865      	ldr	r5, [r4, #4]
 800fe60:	60a5      	str	r5, [r4, #8]
 800fe62:	2d00      	cmp	r5, #0
 800fe64:	bfa2      	ittt	ge
 800fe66:	6821      	ldrge	r1, [r4, #0]
 800fe68:	f021 0104 	bicge.w	r1, r1, #4
 800fe6c:	6021      	strge	r1, [r4, #0]
 800fe6e:	b90e      	cbnz	r6, 800fe74 <_printf_i+0x114>
 800fe70:	2d00      	cmp	r5, #0
 800fe72:	d04b      	beq.n	800ff0c <_printf_i+0x1ac>
 800fe74:	4615      	mov	r5, r2
 800fe76:	fbb6 f1f3 	udiv	r1, r6, r3
 800fe7a:	fb03 6711 	mls	r7, r3, r1, r6
 800fe7e:	5dc7      	ldrb	r7, [r0, r7]
 800fe80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fe84:	4637      	mov	r7, r6
 800fe86:	42bb      	cmp	r3, r7
 800fe88:	460e      	mov	r6, r1
 800fe8a:	d9f4      	bls.n	800fe76 <_printf_i+0x116>
 800fe8c:	2b08      	cmp	r3, #8
 800fe8e:	d10b      	bne.n	800fea8 <_printf_i+0x148>
 800fe90:	6823      	ldr	r3, [r4, #0]
 800fe92:	07de      	lsls	r6, r3, #31
 800fe94:	d508      	bpl.n	800fea8 <_printf_i+0x148>
 800fe96:	6923      	ldr	r3, [r4, #16]
 800fe98:	6861      	ldr	r1, [r4, #4]
 800fe9a:	4299      	cmp	r1, r3
 800fe9c:	bfde      	ittt	le
 800fe9e:	2330      	movle	r3, #48	; 0x30
 800fea0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fea4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fea8:	1b52      	subs	r2, r2, r5
 800feaa:	6122      	str	r2, [r4, #16]
 800feac:	f8cd a000 	str.w	sl, [sp]
 800feb0:	464b      	mov	r3, r9
 800feb2:	aa03      	add	r2, sp, #12
 800feb4:	4621      	mov	r1, r4
 800feb6:	4640      	mov	r0, r8
 800feb8:	f7ff fee4 	bl	800fc84 <_printf_common>
 800febc:	3001      	adds	r0, #1
 800febe:	d14a      	bne.n	800ff56 <_printf_i+0x1f6>
 800fec0:	f04f 30ff 	mov.w	r0, #4294967295
 800fec4:	b004      	add	sp, #16
 800fec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feca:	6823      	ldr	r3, [r4, #0]
 800fecc:	f043 0320 	orr.w	r3, r3, #32
 800fed0:	6023      	str	r3, [r4, #0]
 800fed2:	4833      	ldr	r0, [pc, #204]	; (800ffa0 <_printf_i+0x240>)
 800fed4:	2778      	movs	r7, #120	; 0x78
 800fed6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800feda:	6823      	ldr	r3, [r4, #0]
 800fedc:	6829      	ldr	r1, [r5, #0]
 800fede:	061f      	lsls	r7, r3, #24
 800fee0:	f851 6b04 	ldr.w	r6, [r1], #4
 800fee4:	d402      	bmi.n	800feec <_printf_i+0x18c>
 800fee6:	065f      	lsls	r7, r3, #25
 800fee8:	bf48      	it	mi
 800feea:	b2b6      	uxthmi	r6, r6
 800feec:	07df      	lsls	r7, r3, #31
 800feee:	bf48      	it	mi
 800fef0:	f043 0320 	orrmi.w	r3, r3, #32
 800fef4:	6029      	str	r1, [r5, #0]
 800fef6:	bf48      	it	mi
 800fef8:	6023      	strmi	r3, [r4, #0]
 800fefa:	b91e      	cbnz	r6, 800ff04 <_printf_i+0x1a4>
 800fefc:	6823      	ldr	r3, [r4, #0]
 800fefe:	f023 0320 	bic.w	r3, r3, #32
 800ff02:	6023      	str	r3, [r4, #0]
 800ff04:	2310      	movs	r3, #16
 800ff06:	e7a7      	b.n	800fe58 <_printf_i+0xf8>
 800ff08:	4824      	ldr	r0, [pc, #144]	; (800ff9c <_printf_i+0x23c>)
 800ff0a:	e7e4      	b.n	800fed6 <_printf_i+0x176>
 800ff0c:	4615      	mov	r5, r2
 800ff0e:	e7bd      	b.n	800fe8c <_printf_i+0x12c>
 800ff10:	682b      	ldr	r3, [r5, #0]
 800ff12:	6826      	ldr	r6, [r4, #0]
 800ff14:	6961      	ldr	r1, [r4, #20]
 800ff16:	1d18      	adds	r0, r3, #4
 800ff18:	6028      	str	r0, [r5, #0]
 800ff1a:	0635      	lsls	r5, r6, #24
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	d501      	bpl.n	800ff24 <_printf_i+0x1c4>
 800ff20:	6019      	str	r1, [r3, #0]
 800ff22:	e002      	b.n	800ff2a <_printf_i+0x1ca>
 800ff24:	0670      	lsls	r0, r6, #25
 800ff26:	d5fb      	bpl.n	800ff20 <_printf_i+0x1c0>
 800ff28:	8019      	strh	r1, [r3, #0]
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	6123      	str	r3, [r4, #16]
 800ff2e:	4615      	mov	r5, r2
 800ff30:	e7bc      	b.n	800feac <_printf_i+0x14c>
 800ff32:	682b      	ldr	r3, [r5, #0]
 800ff34:	1d1a      	adds	r2, r3, #4
 800ff36:	602a      	str	r2, [r5, #0]
 800ff38:	681d      	ldr	r5, [r3, #0]
 800ff3a:	6862      	ldr	r2, [r4, #4]
 800ff3c:	2100      	movs	r1, #0
 800ff3e:	4628      	mov	r0, r5
 800ff40:	f7f0 f966 	bl	8000210 <memchr>
 800ff44:	b108      	cbz	r0, 800ff4a <_printf_i+0x1ea>
 800ff46:	1b40      	subs	r0, r0, r5
 800ff48:	6060      	str	r0, [r4, #4]
 800ff4a:	6863      	ldr	r3, [r4, #4]
 800ff4c:	6123      	str	r3, [r4, #16]
 800ff4e:	2300      	movs	r3, #0
 800ff50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff54:	e7aa      	b.n	800feac <_printf_i+0x14c>
 800ff56:	6923      	ldr	r3, [r4, #16]
 800ff58:	462a      	mov	r2, r5
 800ff5a:	4649      	mov	r1, r9
 800ff5c:	4640      	mov	r0, r8
 800ff5e:	47d0      	blx	sl
 800ff60:	3001      	adds	r0, #1
 800ff62:	d0ad      	beq.n	800fec0 <_printf_i+0x160>
 800ff64:	6823      	ldr	r3, [r4, #0]
 800ff66:	079b      	lsls	r3, r3, #30
 800ff68:	d413      	bmi.n	800ff92 <_printf_i+0x232>
 800ff6a:	68e0      	ldr	r0, [r4, #12]
 800ff6c:	9b03      	ldr	r3, [sp, #12]
 800ff6e:	4298      	cmp	r0, r3
 800ff70:	bfb8      	it	lt
 800ff72:	4618      	movlt	r0, r3
 800ff74:	e7a6      	b.n	800fec4 <_printf_i+0x164>
 800ff76:	2301      	movs	r3, #1
 800ff78:	4632      	mov	r2, r6
 800ff7a:	4649      	mov	r1, r9
 800ff7c:	4640      	mov	r0, r8
 800ff7e:	47d0      	blx	sl
 800ff80:	3001      	adds	r0, #1
 800ff82:	d09d      	beq.n	800fec0 <_printf_i+0x160>
 800ff84:	3501      	adds	r5, #1
 800ff86:	68e3      	ldr	r3, [r4, #12]
 800ff88:	9903      	ldr	r1, [sp, #12]
 800ff8a:	1a5b      	subs	r3, r3, r1
 800ff8c:	42ab      	cmp	r3, r5
 800ff8e:	dcf2      	bgt.n	800ff76 <_printf_i+0x216>
 800ff90:	e7eb      	b.n	800ff6a <_printf_i+0x20a>
 800ff92:	2500      	movs	r5, #0
 800ff94:	f104 0619 	add.w	r6, r4, #25
 800ff98:	e7f5      	b.n	800ff86 <_printf_i+0x226>
 800ff9a:	bf00      	nop
 800ff9c:	08011254 	.word	0x08011254
 800ffa0:	08011265 	.word	0x08011265

0800ffa4 <__sflush_r>:
 800ffa4:	898a      	ldrh	r2, [r1, #12]
 800ffa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffaa:	4605      	mov	r5, r0
 800ffac:	0710      	lsls	r0, r2, #28
 800ffae:	460c      	mov	r4, r1
 800ffb0:	d458      	bmi.n	8010064 <__sflush_r+0xc0>
 800ffb2:	684b      	ldr	r3, [r1, #4]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	dc05      	bgt.n	800ffc4 <__sflush_r+0x20>
 800ffb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	dc02      	bgt.n	800ffc4 <__sflush_r+0x20>
 800ffbe:	2000      	movs	r0, #0
 800ffc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ffc6:	2e00      	cmp	r6, #0
 800ffc8:	d0f9      	beq.n	800ffbe <__sflush_r+0x1a>
 800ffca:	2300      	movs	r3, #0
 800ffcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ffd0:	682f      	ldr	r7, [r5, #0]
 800ffd2:	6a21      	ldr	r1, [r4, #32]
 800ffd4:	602b      	str	r3, [r5, #0]
 800ffd6:	d032      	beq.n	801003e <__sflush_r+0x9a>
 800ffd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ffda:	89a3      	ldrh	r3, [r4, #12]
 800ffdc:	075a      	lsls	r2, r3, #29
 800ffde:	d505      	bpl.n	800ffec <__sflush_r+0x48>
 800ffe0:	6863      	ldr	r3, [r4, #4]
 800ffe2:	1ac0      	subs	r0, r0, r3
 800ffe4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ffe6:	b10b      	cbz	r3, 800ffec <__sflush_r+0x48>
 800ffe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ffea:	1ac0      	subs	r0, r0, r3
 800ffec:	2300      	movs	r3, #0
 800ffee:	4602      	mov	r2, r0
 800fff0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fff2:	6a21      	ldr	r1, [r4, #32]
 800fff4:	4628      	mov	r0, r5
 800fff6:	47b0      	blx	r6
 800fff8:	1c43      	adds	r3, r0, #1
 800fffa:	89a3      	ldrh	r3, [r4, #12]
 800fffc:	d106      	bne.n	801000c <__sflush_r+0x68>
 800fffe:	6829      	ldr	r1, [r5, #0]
 8010000:	291d      	cmp	r1, #29
 8010002:	d82b      	bhi.n	801005c <__sflush_r+0xb8>
 8010004:	4a29      	ldr	r2, [pc, #164]	; (80100ac <__sflush_r+0x108>)
 8010006:	410a      	asrs	r2, r1
 8010008:	07d6      	lsls	r6, r2, #31
 801000a:	d427      	bmi.n	801005c <__sflush_r+0xb8>
 801000c:	2200      	movs	r2, #0
 801000e:	6062      	str	r2, [r4, #4]
 8010010:	04d9      	lsls	r1, r3, #19
 8010012:	6922      	ldr	r2, [r4, #16]
 8010014:	6022      	str	r2, [r4, #0]
 8010016:	d504      	bpl.n	8010022 <__sflush_r+0x7e>
 8010018:	1c42      	adds	r2, r0, #1
 801001a:	d101      	bne.n	8010020 <__sflush_r+0x7c>
 801001c:	682b      	ldr	r3, [r5, #0]
 801001e:	b903      	cbnz	r3, 8010022 <__sflush_r+0x7e>
 8010020:	6560      	str	r0, [r4, #84]	; 0x54
 8010022:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010024:	602f      	str	r7, [r5, #0]
 8010026:	2900      	cmp	r1, #0
 8010028:	d0c9      	beq.n	800ffbe <__sflush_r+0x1a>
 801002a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801002e:	4299      	cmp	r1, r3
 8010030:	d002      	beq.n	8010038 <__sflush_r+0x94>
 8010032:	4628      	mov	r0, r5
 8010034:	f7ff fbce 	bl	800f7d4 <_free_r>
 8010038:	2000      	movs	r0, #0
 801003a:	6360      	str	r0, [r4, #52]	; 0x34
 801003c:	e7c0      	b.n	800ffc0 <__sflush_r+0x1c>
 801003e:	2301      	movs	r3, #1
 8010040:	4628      	mov	r0, r5
 8010042:	47b0      	blx	r6
 8010044:	1c41      	adds	r1, r0, #1
 8010046:	d1c8      	bne.n	800ffda <__sflush_r+0x36>
 8010048:	682b      	ldr	r3, [r5, #0]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d0c5      	beq.n	800ffda <__sflush_r+0x36>
 801004e:	2b1d      	cmp	r3, #29
 8010050:	d001      	beq.n	8010056 <__sflush_r+0xb2>
 8010052:	2b16      	cmp	r3, #22
 8010054:	d101      	bne.n	801005a <__sflush_r+0xb6>
 8010056:	602f      	str	r7, [r5, #0]
 8010058:	e7b1      	b.n	800ffbe <__sflush_r+0x1a>
 801005a:	89a3      	ldrh	r3, [r4, #12]
 801005c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010060:	81a3      	strh	r3, [r4, #12]
 8010062:	e7ad      	b.n	800ffc0 <__sflush_r+0x1c>
 8010064:	690f      	ldr	r7, [r1, #16]
 8010066:	2f00      	cmp	r7, #0
 8010068:	d0a9      	beq.n	800ffbe <__sflush_r+0x1a>
 801006a:	0793      	lsls	r3, r2, #30
 801006c:	680e      	ldr	r6, [r1, #0]
 801006e:	bf08      	it	eq
 8010070:	694b      	ldreq	r3, [r1, #20]
 8010072:	600f      	str	r7, [r1, #0]
 8010074:	bf18      	it	ne
 8010076:	2300      	movne	r3, #0
 8010078:	eba6 0807 	sub.w	r8, r6, r7
 801007c:	608b      	str	r3, [r1, #8]
 801007e:	f1b8 0f00 	cmp.w	r8, #0
 8010082:	dd9c      	ble.n	800ffbe <__sflush_r+0x1a>
 8010084:	6a21      	ldr	r1, [r4, #32]
 8010086:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010088:	4643      	mov	r3, r8
 801008a:	463a      	mov	r2, r7
 801008c:	4628      	mov	r0, r5
 801008e:	47b0      	blx	r6
 8010090:	2800      	cmp	r0, #0
 8010092:	dc06      	bgt.n	80100a2 <__sflush_r+0xfe>
 8010094:	89a3      	ldrh	r3, [r4, #12]
 8010096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801009a:	81a3      	strh	r3, [r4, #12]
 801009c:	f04f 30ff 	mov.w	r0, #4294967295
 80100a0:	e78e      	b.n	800ffc0 <__sflush_r+0x1c>
 80100a2:	4407      	add	r7, r0
 80100a4:	eba8 0800 	sub.w	r8, r8, r0
 80100a8:	e7e9      	b.n	801007e <__sflush_r+0xda>
 80100aa:	bf00      	nop
 80100ac:	dfbffffe 	.word	0xdfbffffe

080100b0 <_fflush_r>:
 80100b0:	b538      	push	{r3, r4, r5, lr}
 80100b2:	690b      	ldr	r3, [r1, #16]
 80100b4:	4605      	mov	r5, r0
 80100b6:	460c      	mov	r4, r1
 80100b8:	b913      	cbnz	r3, 80100c0 <_fflush_r+0x10>
 80100ba:	2500      	movs	r5, #0
 80100bc:	4628      	mov	r0, r5
 80100be:	bd38      	pop	{r3, r4, r5, pc}
 80100c0:	b118      	cbz	r0, 80100ca <_fflush_r+0x1a>
 80100c2:	6a03      	ldr	r3, [r0, #32]
 80100c4:	b90b      	cbnz	r3, 80100ca <_fflush_r+0x1a>
 80100c6:	f7ff f9dd 	bl	800f484 <__sinit>
 80100ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d0f3      	beq.n	80100ba <_fflush_r+0xa>
 80100d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80100d4:	07d0      	lsls	r0, r2, #31
 80100d6:	d404      	bmi.n	80100e2 <_fflush_r+0x32>
 80100d8:	0599      	lsls	r1, r3, #22
 80100da:	d402      	bmi.n	80100e2 <_fflush_r+0x32>
 80100dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100de:	f7ff fb51 	bl	800f784 <__retarget_lock_acquire_recursive>
 80100e2:	4628      	mov	r0, r5
 80100e4:	4621      	mov	r1, r4
 80100e6:	f7ff ff5d 	bl	800ffa4 <__sflush_r>
 80100ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100ec:	07da      	lsls	r2, r3, #31
 80100ee:	4605      	mov	r5, r0
 80100f0:	d4e4      	bmi.n	80100bc <_fflush_r+0xc>
 80100f2:	89a3      	ldrh	r3, [r4, #12]
 80100f4:	059b      	lsls	r3, r3, #22
 80100f6:	d4e1      	bmi.n	80100bc <_fflush_r+0xc>
 80100f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100fa:	f7ff fb44 	bl	800f786 <__retarget_lock_release_recursive>
 80100fe:	e7dd      	b.n	80100bc <_fflush_r+0xc>

08010100 <fiprintf>:
 8010100:	b40e      	push	{r1, r2, r3}
 8010102:	b503      	push	{r0, r1, lr}
 8010104:	4601      	mov	r1, r0
 8010106:	ab03      	add	r3, sp, #12
 8010108:	4805      	ldr	r0, [pc, #20]	; (8010120 <fiprintf+0x20>)
 801010a:	f853 2b04 	ldr.w	r2, [r3], #4
 801010e:	6800      	ldr	r0, [r0, #0]
 8010110:	9301      	str	r3, [sp, #4]
 8010112:	f000 f89f 	bl	8010254 <_vfiprintf_r>
 8010116:	b002      	add	sp, #8
 8010118:	f85d eb04 	ldr.w	lr, [sp], #4
 801011c:	b003      	add	sp, #12
 801011e:	4770      	bx	lr
 8010120:	20000174 	.word	0x20000174

08010124 <memmove>:
 8010124:	4288      	cmp	r0, r1
 8010126:	b510      	push	{r4, lr}
 8010128:	eb01 0402 	add.w	r4, r1, r2
 801012c:	d902      	bls.n	8010134 <memmove+0x10>
 801012e:	4284      	cmp	r4, r0
 8010130:	4623      	mov	r3, r4
 8010132:	d807      	bhi.n	8010144 <memmove+0x20>
 8010134:	1e43      	subs	r3, r0, #1
 8010136:	42a1      	cmp	r1, r4
 8010138:	d008      	beq.n	801014c <memmove+0x28>
 801013a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801013e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010142:	e7f8      	b.n	8010136 <memmove+0x12>
 8010144:	4402      	add	r2, r0
 8010146:	4601      	mov	r1, r0
 8010148:	428a      	cmp	r2, r1
 801014a:	d100      	bne.n	801014e <memmove+0x2a>
 801014c:	bd10      	pop	{r4, pc}
 801014e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010152:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010156:	e7f7      	b.n	8010148 <memmove+0x24>

08010158 <_sbrk_r>:
 8010158:	b538      	push	{r3, r4, r5, lr}
 801015a:	4d06      	ldr	r5, [pc, #24]	; (8010174 <_sbrk_r+0x1c>)
 801015c:	2300      	movs	r3, #0
 801015e:	4604      	mov	r4, r0
 8010160:	4608      	mov	r0, r1
 8010162:	602b      	str	r3, [r5, #0]
 8010164:	f7f2 fce0 	bl	8002b28 <_sbrk>
 8010168:	1c43      	adds	r3, r0, #1
 801016a:	d102      	bne.n	8010172 <_sbrk_r+0x1a>
 801016c:	682b      	ldr	r3, [r5, #0]
 801016e:	b103      	cbz	r3, 8010172 <_sbrk_r+0x1a>
 8010170:	6023      	str	r3, [r4, #0]
 8010172:	bd38      	pop	{r3, r4, r5, pc}
 8010174:	200041a4 	.word	0x200041a4

08010178 <memcpy>:
 8010178:	440a      	add	r2, r1
 801017a:	4291      	cmp	r1, r2
 801017c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010180:	d100      	bne.n	8010184 <memcpy+0xc>
 8010182:	4770      	bx	lr
 8010184:	b510      	push	{r4, lr}
 8010186:	f811 4b01 	ldrb.w	r4, [r1], #1
 801018a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801018e:	4291      	cmp	r1, r2
 8010190:	d1f9      	bne.n	8010186 <memcpy+0xe>
 8010192:	bd10      	pop	{r4, pc}

08010194 <abort>:
 8010194:	b508      	push	{r3, lr}
 8010196:	2006      	movs	r0, #6
 8010198:	f000 fa34 	bl	8010604 <raise>
 801019c:	2001      	movs	r0, #1
 801019e:	f7f2 fc4b 	bl	8002a38 <_exit>

080101a2 <_realloc_r>:
 80101a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101a6:	4680      	mov	r8, r0
 80101a8:	4614      	mov	r4, r2
 80101aa:	460e      	mov	r6, r1
 80101ac:	b921      	cbnz	r1, 80101b8 <_realloc_r+0x16>
 80101ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101b2:	4611      	mov	r1, r2
 80101b4:	f7ff bb82 	b.w	800f8bc <_malloc_r>
 80101b8:	b92a      	cbnz	r2, 80101c6 <_realloc_r+0x24>
 80101ba:	f7ff fb0b 	bl	800f7d4 <_free_r>
 80101be:	4625      	mov	r5, r4
 80101c0:	4628      	mov	r0, r5
 80101c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101c6:	f000 fa39 	bl	801063c <_malloc_usable_size_r>
 80101ca:	4284      	cmp	r4, r0
 80101cc:	4607      	mov	r7, r0
 80101ce:	d802      	bhi.n	80101d6 <_realloc_r+0x34>
 80101d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80101d4:	d812      	bhi.n	80101fc <_realloc_r+0x5a>
 80101d6:	4621      	mov	r1, r4
 80101d8:	4640      	mov	r0, r8
 80101da:	f7ff fb6f 	bl	800f8bc <_malloc_r>
 80101de:	4605      	mov	r5, r0
 80101e0:	2800      	cmp	r0, #0
 80101e2:	d0ed      	beq.n	80101c0 <_realloc_r+0x1e>
 80101e4:	42bc      	cmp	r4, r7
 80101e6:	4622      	mov	r2, r4
 80101e8:	4631      	mov	r1, r6
 80101ea:	bf28      	it	cs
 80101ec:	463a      	movcs	r2, r7
 80101ee:	f7ff ffc3 	bl	8010178 <memcpy>
 80101f2:	4631      	mov	r1, r6
 80101f4:	4640      	mov	r0, r8
 80101f6:	f7ff faed 	bl	800f7d4 <_free_r>
 80101fa:	e7e1      	b.n	80101c0 <_realloc_r+0x1e>
 80101fc:	4635      	mov	r5, r6
 80101fe:	e7df      	b.n	80101c0 <_realloc_r+0x1e>

08010200 <__sfputc_r>:
 8010200:	6893      	ldr	r3, [r2, #8]
 8010202:	3b01      	subs	r3, #1
 8010204:	2b00      	cmp	r3, #0
 8010206:	b410      	push	{r4}
 8010208:	6093      	str	r3, [r2, #8]
 801020a:	da08      	bge.n	801021e <__sfputc_r+0x1e>
 801020c:	6994      	ldr	r4, [r2, #24]
 801020e:	42a3      	cmp	r3, r4
 8010210:	db01      	blt.n	8010216 <__sfputc_r+0x16>
 8010212:	290a      	cmp	r1, #10
 8010214:	d103      	bne.n	801021e <__sfputc_r+0x1e>
 8010216:	f85d 4b04 	ldr.w	r4, [sp], #4
 801021a:	f000 b935 	b.w	8010488 <__swbuf_r>
 801021e:	6813      	ldr	r3, [r2, #0]
 8010220:	1c58      	adds	r0, r3, #1
 8010222:	6010      	str	r0, [r2, #0]
 8010224:	7019      	strb	r1, [r3, #0]
 8010226:	4608      	mov	r0, r1
 8010228:	f85d 4b04 	ldr.w	r4, [sp], #4
 801022c:	4770      	bx	lr

0801022e <__sfputs_r>:
 801022e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010230:	4606      	mov	r6, r0
 8010232:	460f      	mov	r7, r1
 8010234:	4614      	mov	r4, r2
 8010236:	18d5      	adds	r5, r2, r3
 8010238:	42ac      	cmp	r4, r5
 801023a:	d101      	bne.n	8010240 <__sfputs_r+0x12>
 801023c:	2000      	movs	r0, #0
 801023e:	e007      	b.n	8010250 <__sfputs_r+0x22>
 8010240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010244:	463a      	mov	r2, r7
 8010246:	4630      	mov	r0, r6
 8010248:	f7ff ffda 	bl	8010200 <__sfputc_r>
 801024c:	1c43      	adds	r3, r0, #1
 801024e:	d1f3      	bne.n	8010238 <__sfputs_r+0xa>
 8010250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010254 <_vfiprintf_r>:
 8010254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010258:	460d      	mov	r5, r1
 801025a:	b09d      	sub	sp, #116	; 0x74
 801025c:	4614      	mov	r4, r2
 801025e:	4698      	mov	r8, r3
 8010260:	4606      	mov	r6, r0
 8010262:	b118      	cbz	r0, 801026c <_vfiprintf_r+0x18>
 8010264:	6a03      	ldr	r3, [r0, #32]
 8010266:	b90b      	cbnz	r3, 801026c <_vfiprintf_r+0x18>
 8010268:	f7ff f90c 	bl	800f484 <__sinit>
 801026c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801026e:	07d9      	lsls	r1, r3, #31
 8010270:	d405      	bmi.n	801027e <_vfiprintf_r+0x2a>
 8010272:	89ab      	ldrh	r3, [r5, #12]
 8010274:	059a      	lsls	r2, r3, #22
 8010276:	d402      	bmi.n	801027e <_vfiprintf_r+0x2a>
 8010278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801027a:	f7ff fa83 	bl	800f784 <__retarget_lock_acquire_recursive>
 801027e:	89ab      	ldrh	r3, [r5, #12]
 8010280:	071b      	lsls	r3, r3, #28
 8010282:	d501      	bpl.n	8010288 <_vfiprintf_r+0x34>
 8010284:	692b      	ldr	r3, [r5, #16]
 8010286:	b99b      	cbnz	r3, 80102b0 <_vfiprintf_r+0x5c>
 8010288:	4629      	mov	r1, r5
 801028a:	4630      	mov	r0, r6
 801028c:	f000 f93a 	bl	8010504 <__swsetup_r>
 8010290:	b170      	cbz	r0, 80102b0 <_vfiprintf_r+0x5c>
 8010292:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010294:	07dc      	lsls	r4, r3, #31
 8010296:	d504      	bpl.n	80102a2 <_vfiprintf_r+0x4e>
 8010298:	f04f 30ff 	mov.w	r0, #4294967295
 801029c:	b01d      	add	sp, #116	; 0x74
 801029e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102a2:	89ab      	ldrh	r3, [r5, #12]
 80102a4:	0598      	lsls	r0, r3, #22
 80102a6:	d4f7      	bmi.n	8010298 <_vfiprintf_r+0x44>
 80102a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80102aa:	f7ff fa6c 	bl	800f786 <__retarget_lock_release_recursive>
 80102ae:	e7f3      	b.n	8010298 <_vfiprintf_r+0x44>
 80102b0:	2300      	movs	r3, #0
 80102b2:	9309      	str	r3, [sp, #36]	; 0x24
 80102b4:	2320      	movs	r3, #32
 80102b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80102ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80102be:	2330      	movs	r3, #48	; 0x30
 80102c0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010474 <_vfiprintf_r+0x220>
 80102c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80102c8:	f04f 0901 	mov.w	r9, #1
 80102cc:	4623      	mov	r3, r4
 80102ce:	469a      	mov	sl, r3
 80102d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102d4:	b10a      	cbz	r2, 80102da <_vfiprintf_r+0x86>
 80102d6:	2a25      	cmp	r2, #37	; 0x25
 80102d8:	d1f9      	bne.n	80102ce <_vfiprintf_r+0x7a>
 80102da:	ebba 0b04 	subs.w	fp, sl, r4
 80102de:	d00b      	beq.n	80102f8 <_vfiprintf_r+0xa4>
 80102e0:	465b      	mov	r3, fp
 80102e2:	4622      	mov	r2, r4
 80102e4:	4629      	mov	r1, r5
 80102e6:	4630      	mov	r0, r6
 80102e8:	f7ff ffa1 	bl	801022e <__sfputs_r>
 80102ec:	3001      	adds	r0, #1
 80102ee:	f000 80a9 	beq.w	8010444 <_vfiprintf_r+0x1f0>
 80102f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80102f4:	445a      	add	r2, fp
 80102f6:	9209      	str	r2, [sp, #36]	; 0x24
 80102f8:	f89a 3000 	ldrb.w	r3, [sl]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	f000 80a1 	beq.w	8010444 <_vfiprintf_r+0x1f0>
 8010302:	2300      	movs	r3, #0
 8010304:	f04f 32ff 	mov.w	r2, #4294967295
 8010308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801030c:	f10a 0a01 	add.w	sl, sl, #1
 8010310:	9304      	str	r3, [sp, #16]
 8010312:	9307      	str	r3, [sp, #28]
 8010314:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010318:	931a      	str	r3, [sp, #104]	; 0x68
 801031a:	4654      	mov	r4, sl
 801031c:	2205      	movs	r2, #5
 801031e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010322:	4854      	ldr	r0, [pc, #336]	; (8010474 <_vfiprintf_r+0x220>)
 8010324:	f7ef ff74 	bl	8000210 <memchr>
 8010328:	9a04      	ldr	r2, [sp, #16]
 801032a:	b9d8      	cbnz	r0, 8010364 <_vfiprintf_r+0x110>
 801032c:	06d1      	lsls	r1, r2, #27
 801032e:	bf44      	itt	mi
 8010330:	2320      	movmi	r3, #32
 8010332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010336:	0713      	lsls	r3, r2, #28
 8010338:	bf44      	itt	mi
 801033a:	232b      	movmi	r3, #43	; 0x2b
 801033c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010340:	f89a 3000 	ldrb.w	r3, [sl]
 8010344:	2b2a      	cmp	r3, #42	; 0x2a
 8010346:	d015      	beq.n	8010374 <_vfiprintf_r+0x120>
 8010348:	9a07      	ldr	r2, [sp, #28]
 801034a:	4654      	mov	r4, sl
 801034c:	2000      	movs	r0, #0
 801034e:	f04f 0c0a 	mov.w	ip, #10
 8010352:	4621      	mov	r1, r4
 8010354:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010358:	3b30      	subs	r3, #48	; 0x30
 801035a:	2b09      	cmp	r3, #9
 801035c:	d94d      	bls.n	80103fa <_vfiprintf_r+0x1a6>
 801035e:	b1b0      	cbz	r0, 801038e <_vfiprintf_r+0x13a>
 8010360:	9207      	str	r2, [sp, #28]
 8010362:	e014      	b.n	801038e <_vfiprintf_r+0x13a>
 8010364:	eba0 0308 	sub.w	r3, r0, r8
 8010368:	fa09 f303 	lsl.w	r3, r9, r3
 801036c:	4313      	orrs	r3, r2
 801036e:	9304      	str	r3, [sp, #16]
 8010370:	46a2      	mov	sl, r4
 8010372:	e7d2      	b.n	801031a <_vfiprintf_r+0xc6>
 8010374:	9b03      	ldr	r3, [sp, #12]
 8010376:	1d19      	adds	r1, r3, #4
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	9103      	str	r1, [sp, #12]
 801037c:	2b00      	cmp	r3, #0
 801037e:	bfbb      	ittet	lt
 8010380:	425b      	neglt	r3, r3
 8010382:	f042 0202 	orrlt.w	r2, r2, #2
 8010386:	9307      	strge	r3, [sp, #28]
 8010388:	9307      	strlt	r3, [sp, #28]
 801038a:	bfb8      	it	lt
 801038c:	9204      	strlt	r2, [sp, #16]
 801038e:	7823      	ldrb	r3, [r4, #0]
 8010390:	2b2e      	cmp	r3, #46	; 0x2e
 8010392:	d10c      	bne.n	80103ae <_vfiprintf_r+0x15a>
 8010394:	7863      	ldrb	r3, [r4, #1]
 8010396:	2b2a      	cmp	r3, #42	; 0x2a
 8010398:	d134      	bne.n	8010404 <_vfiprintf_r+0x1b0>
 801039a:	9b03      	ldr	r3, [sp, #12]
 801039c:	1d1a      	adds	r2, r3, #4
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	9203      	str	r2, [sp, #12]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	bfb8      	it	lt
 80103a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80103aa:	3402      	adds	r4, #2
 80103ac:	9305      	str	r3, [sp, #20]
 80103ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010484 <_vfiprintf_r+0x230>
 80103b2:	7821      	ldrb	r1, [r4, #0]
 80103b4:	2203      	movs	r2, #3
 80103b6:	4650      	mov	r0, sl
 80103b8:	f7ef ff2a 	bl	8000210 <memchr>
 80103bc:	b138      	cbz	r0, 80103ce <_vfiprintf_r+0x17a>
 80103be:	9b04      	ldr	r3, [sp, #16]
 80103c0:	eba0 000a 	sub.w	r0, r0, sl
 80103c4:	2240      	movs	r2, #64	; 0x40
 80103c6:	4082      	lsls	r2, r0
 80103c8:	4313      	orrs	r3, r2
 80103ca:	3401      	adds	r4, #1
 80103cc:	9304      	str	r3, [sp, #16]
 80103ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103d2:	4829      	ldr	r0, [pc, #164]	; (8010478 <_vfiprintf_r+0x224>)
 80103d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80103d8:	2206      	movs	r2, #6
 80103da:	f7ef ff19 	bl	8000210 <memchr>
 80103de:	2800      	cmp	r0, #0
 80103e0:	d03f      	beq.n	8010462 <_vfiprintf_r+0x20e>
 80103e2:	4b26      	ldr	r3, [pc, #152]	; (801047c <_vfiprintf_r+0x228>)
 80103e4:	bb1b      	cbnz	r3, 801042e <_vfiprintf_r+0x1da>
 80103e6:	9b03      	ldr	r3, [sp, #12]
 80103e8:	3307      	adds	r3, #7
 80103ea:	f023 0307 	bic.w	r3, r3, #7
 80103ee:	3308      	adds	r3, #8
 80103f0:	9303      	str	r3, [sp, #12]
 80103f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103f4:	443b      	add	r3, r7
 80103f6:	9309      	str	r3, [sp, #36]	; 0x24
 80103f8:	e768      	b.n	80102cc <_vfiprintf_r+0x78>
 80103fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80103fe:	460c      	mov	r4, r1
 8010400:	2001      	movs	r0, #1
 8010402:	e7a6      	b.n	8010352 <_vfiprintf_r+0xfe>
 8010404:	2300      	movs	r3, #0
 8010406:	3401      	adds	r4, #1
 8010408:	9305      	str	r3, [sp, #20]
 801040a:	4619      	mov	r1, r3
 801040c:	f04f 0c0a 	mov.w	ip, #10
 8010410:	4620      	mov	r0, r4
 8010412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010416:	3a30      	subs	r2, #48	; 0x30
 8010418:	2a09      	cmp	r2, #9
 801041a:	d903      	bls.n	8010424 <_vfiprintf_r+0x1d0>
 801041c:	2b00      	cmp	r3, #0
 801041e:	d0c6      	beq.n	80103ae <_vfiprintf_r+0x15a>
 8010420:	9105      	str	r1, [sp, #20]
 8010422:	e7c4      	b.n	80103ae <_vfiprintf_r+0x15a>
 8010424:	fb0c 2101 	mla	r1, ip, r1, r2
 8010428:	4604      	mov	r4, r0
 801042a:	2301      	movs	r3, #1
 801042c:	e7f0      	b.n	8010410 <_vfiprintf_r+0x1bc>
 801042e:	ab03      	add	r3, sp, #12
 8010430:	9300      	str	r3, [sp, #0]
 8010432:	462a      	mov	r2, r5
 8010434:	4b12      	ldr	r3, [pc, #72]	; (8010480 <_vfiprintf_r+0x22c>)
 8010436:	a904      	add	r1, sp, #16
 8010438:	4630      	mov	r0, r6
 801043a:	f3af 8000 	nop.w
 801043e:	4607      	mov	r7, r0
 8010440:	1c78      	adds	r0, r7, #1
 8010442:	d1d6      	bne.n	80103f2 <_vfiprintf_r+0x19e>
 8010444:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010446:	07d9      	lsls	r1, r3, #31
 8010448:	d405      	bmi.n	8010456 <_vfiprintf_r+0x202>
 801044a:	89ab      	ldrh	r3, [r5, #12]
 801044c:	059a      	lsls	r2, r3, #22
 801044e:	d402      	bmi.n	8010456 <_vfiprintf_r+0x202>
 8010450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010452:	f7ff f998 	bl	800f786 <__retarget_lock_release_recursive>
 8010456:	89ab      	ldrh	r3, [r5, #12]
 8010458:	065b      	lsls	r3, r3, #25
 801045a:	f53f af1d 	bmi.w	8010298 <_vfiprintf_r+0x44>
 801045e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010460:	e71c      	b.n	801029c <_vfiprintf_r+0x48>
 8010462:	ab03      	add	r3, sp, #12
 8010464:	9300      	str	r3, [sp, #0]
 8010466:	462a      	mov	r2, r5
 8010468:	4b05      	ldr	r3, [pc, #20]	; (8010480 <_vfiprintf_r+0x22c>)
 801046a:	a904      	add	r1, sp, #16
 801046c:	4630      	mov	r0, r6
 801046e:	f7ff fc77 	bl	800fd60 <_printf_i>
 8010472:	e7e4      	b.n	801043e <_vfiprintf_r+0x1ea>
 8010474:	08011243 	.word	0x08011243
 8010478:	0801124d 	.word	0x0801124d
 801047c:	00000000 	.word	0x00000000
 8010480:	0801022f 	.word	0x0801022f
 8010484:	08011249 	.word	0x08011249

08010488 <__swbuf_r>:
 8010488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801048a:	460e      	mov	r6, r1
 801048c:	4614      	mov	r4, r2
 801048e:	4605      	mov	r5, r0
 8010490:	b118      	cbz	r0, 801049a <__swbuf_r+0x12>
 8010492:	6a03      	ldr	r3, [r0, #32]
 8010494:	b90b      	cbnz	r3, 801049a <__swbuf_r+0x12>
 8010496:	f7fe fff5 	bl	800f484 <__sinit>
 801049a:	69a3      	ldr	r3, [r4, #24]
 801049c:	60a3      	str	r3, [r4, #8]
 801049e:	89a3      	ldrh	r3, [r4, #12]
 80104a0:	071a      	lsls	r2, r3, #28
 80104a2:	d525      	bpl.n	80104f0 <__swbuf_r+0x68>
 80104a4:	6923      	ldr	r3, [r4, #16]
 80104a6:	b31b      	cbz	r3, 80104f0 <__swbuf_r+0x68>
 80104a8:	6823      	ldr	r3, [r4, #0]
 80104aa:	6922      	ldr	r2, [r4, #16]
 80104ac:	1a98      	subs	r0, r3, r2
 80104ae:	6963      	ldr	r3, [r4, #20]
 80104b0:	b2f6      	uxtb	r6, r6
 80104b2:	4283      	cmp	r3, r0
 80104b4:	4637      	mov	r7, r6
 80104b6:	dc04      	bgt.n	80104c2 <__swbuf_r+0x3a>
 80104b8:	4621      	mov	r1, r4
 80104ba:	4628      	mov	r0, r5
 80104bc:	f7ff fdf8 	bl	80100b0 <_fflush_r>
 80104c0:	b9e0      	cbnz	r0, 80104fc <__swbuf_r+0x74>
 80104c2:	68a3      	ldr	r3, [r4, #8]
 80104c4:	3b01      	subs	r3, #1
 80104c6:	60a3      	str	r3, [r4, #8]
 80104c8:	6823      	ldr	r3, [r4, #0]
 80104ca:	1c5a      	adds	r2, r3, #1
 80104cc:	6022      	str	r2, [r4, #0]
 80104ce:	701e      	strb	r6, [r3, #0]
 80104d0:	6962      	ldr	r2, [r4, #20]
 80104d2:	1c43      	adds	r3, r0, #1
 80104d4:	429a      	cmp	r2, r3
 80104d6:	d004      	beq.n	80104e2 <__swbuf_r+0x5a>
 80104d8:	89a3      	ldrh	r3, [r4, #12]
 80104da:	07db      	lsls	r3, r3, #31
 80104dc:	d506      	bpl.n	80104ec <__swbuf_r+0x64>
 80104de:	2e0a      	cmp	r6, #10
 80104e0:	d104      	bne.n	80104ec <__swbuf_r+0x64>
 80104e2:	4621      	mov	r1, r4
 80104e4:	4628      	mov	r0, r5
 80104e6:	f7ff fde3 	bl	80100b0 <_fflush_r>
 80104ea:	b938      	cbnz	r0, 80104fc <__swbuf_r+0x74>
 80104ec:	4638      	mov	r0, r7
 80104ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104f0:	4621      	mov	r1, r4
 80104f2:	4628      	mov	r0, r5
 80104f4:	f000 f806 	bl	8010504 <__swsetup_r>
 80104f8:	2800      	cmp	r0, #0
 80104fa:	d0d5      	beq.n	80104a8 <__swbuf_r+0x20>
 80104fc:	f04f 37ff 	mov.w	r7, #4294967295
 8010500:	e7f4      	b.n	80104ec <__swbuf_r+0x64>
	...

08010504 <__swsetup_r>:
 8010504:	b538      	push	{r3, r4, r5, lr}
 8010506:	4b2a      	ldr	r3, [pc, #168]	; (80105b0 <__swsetup_r+0xac>)
 8010508:	4605      	mov	r5, r0
 801050a:	6818      	ldr	r0, [r3, #0]
 801050c:	460c      	mov	r4, r1
 801050e:	b118      	cbz	r0, 8010518 <__swsetup_r+0x14>
 8010510:	6a03      	ldr	r3, [r0, #32]
 8010512:	b90b      	cbnz	r3, 8010518 <__swsetup_r+0x14>
 8010514:	f7fe ffb6 	bl	800f484 <__sinit>
 8010518:	89a3      	ldrh	r3, [r4, #12]
 801051a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801051e:	0718      	lsls	r0, r3, #28
 8010520:	d422      	bmi.n	8010568 <__swsetup_r+0x64>
 8010522:	06d9      	lsls	r1, r3, #27
 8010524:	d407      	bmi.n	8010536 <__swsetup_r+0x32>
 8010526:	2309      	movs	r3, #9
 8010528:	602b      	str	r3, [r5, #0]
 801052a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801052e:	81a3      	strh	r3, [r4, #12]
 8010530:	f04f 30ff 	mov.w	r0, #4294967295
 8010534:	e034      	b.n	80105a0 <__swsetup_r+0x9c>
 8010536:	0758      	lsls	r0, r3, #29
 8010538:	d512      	bpl.n	8010560 <__swsetup_r+0x5c>
 801053a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801053c:	b141      	cbz	r1, 8010550 <__swsetup_r+0x4c>
 801053e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010542:	4299      	cmp	r1, r3
 8010544:	d002      	beq.n	801054c <__swsetup_r+0x48>
 8010546:	4628      	mov	r0, r5
 8010548:	f7ff f944 	bl	800f7d4 <_free_r>
 801054c:	2300      	movs	r3, #0
 801054e:	6363      	str	r3, [r4, #52]	; 0x34
 8010550:	89a3      	ldrh	r3, [r4, #12]
 8010552:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010556:	81a3      	strh	r3, [r4, #12]
 8010558:	2300      	movs	r3, #0
 801055a:	6063      	str	r3, [r4, #4]
 801055c:	6923      	ldr	r3, [r4, #16]
 801055e:	6023      	str	r3, [r4, #0]
 8010560:	89a3      	ldrh	r3, [r4, #12]
 8010562:	f043 0308 	orr.w	r3, r3, #8
 8010566:	81a3      	strh	r3, [r4, #12]
 8010568:	6923      	ldr	r3, [r4, #16]
 801056a:	b94b      	cbnz	r3, 8010580 <__swsetup_r+0x7c>
 801056c:	89a3      	ldrh	r3, [r4, #12]
 801056e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010576:	d003      	beq.n	8010580 <__swsetup_r+0x7c>
 8010578:	4621      	mov	r1, r4
 801057a:	4628      	mov	r0, r5
 801057c:	f000 f88c 	bl	8010698 <__smakebuf_r>
 8010580:	89a0      	ldrh	r0, [r4, #12]
 8010582:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010586:	f010 0301 	ands.w	r3, r0, #1
 801058a:	d00a      	beq.n	80105a2 <__swsetup_r+0x9e>
 801058c:	2300      	movs	r3, #0
 801058e:	60a3      	str	r3, [r4, #8]
 8010590:	6963      	ldr	r3, [r4, #20]
 8010592:	425b      	negs	r3, r3
 8010594:	61a3      	str	r3, [r4, #24]
 8010596:	6923      	ldr	r3, [r4, #16]
 8010598:	b943      	cbnz	r3, 80105ac <__swsetup_r+0xa8>
 801059a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801059e:	d1c4      	bne.n	801052a <__swsetup_r+0x26>
 80105a0:	bd38      	pop	{r3, r4, r5, pc}
 80105a2:	0781      	lsls	r1, r0, #30
 80105a4:	bf58      	it	pl
 80105a6:	6963      	ldrpl	r3, [r4, #20]
 80105a8:	60a3      	str	r3, [r4, #8]
 80105aa:	e7f4      	b.n	8010596 <__swsetup_r+0x92>
 80105ac:	2000      	movs	r0, #0
 80105ae:	e7f7      	b.n	80105a0 <__swsetup_r+0x9c>
 80105b0:	20000174 	.word	0x20000174

080105b4 <_raise_r>:
 80105b4:	291f      	cmp	r1, #31
 80105b6:	b538      	push	{r3, r4, r5, lr}
 80105b8:	4604      	mov	r4, r0
 80105ba:	460d      	mov	r5, r1
 80105bc:	d904      	bls.n	80105c8 <_raise_r+0x14>
 80105be:	2316      	movs	r3, #22
 80105c0:	6003      	str	r3, [r0, #0]
 80105c2:	f04f 30ff 	mov.w	r0, #4294967295
 80105c6:	bd38      	pop	{r3, r4, r5, pc}
 80105c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80105ca:	b112      	cbz	r2, 80105d2 <_raise_r+0x1e>
 80105cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80105d0:	b94b      	cbnz	r3, 80105e6 <_raise_r+0x32>
 80105d2:	4620      	mov	r0, r4
 80105d4:	f000 f830 	bl	8010638 <_getpid_r>
 80105d8:	462a      	mov	r2, r5
 80105da:	4601      	mov	r1, r0
 80105dc:	4620      	mov	r0, r4
 80105de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105e2:	f000 b817 	b.w	8010614 <_kill_r>
 80105e6:	2b01      	cmp	r3, #1
 80105e8:	d00a      	beq.n	8010600 <_raise_r+0x4c>
 80105ea:	1c59      	adds	r1, r3, #1
 80105ec:	d103      	bne.n	80105f6 <_raise_r+0x42>
 80105ee:	2316      	movs	r3, #22
 80105f0:	6003      	str	r3, [r0, #0]
 80105f2:	2001      	movs	r0, #1
 80105f4:	e7e7      	b.n	80105c6 <_raise_r+0x12>
 80105f6:	2400      	movs	r4, #0
 80105f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80105fc:	4628      	mov	r0, r5
 80105fe:	4798      	blx	r3
 8010600:	2000      	movs	r0, #0
 8010602:	e7e0      	b.n	80105c6 <_raise_r+0x12>

08010604 <raise>:
 8010604:	4b02      	ldr	r3, [pc, #8]	; (8010610 <raise+0xc>)
 8010606:	4601      	mov	r1, r0
 8010608:	6818      	ldr	r0, [r3, #0]
 801060a:	f7ff bfd3 	b.w	80105b4 <_raise_r>
 801060e:	bf00      	nop
 8010610:	20000174 	.word	0x20000174

08010614 <_kill_r>:
 8010614:	b538      	push	{r3, r4, r5, lr}
 8010616:	4d07      	ldr	r5, [pc, #28]	; (8010634 <_kill_r+0x20>)
 8010618:	2300      	movs	r3, #0
 801061a:	4604      	mov	r4, r0
 801061c:	4608      	mov	r0, r1
 801061e:	4611      	mov	r1, r2
 8010620:	602b      	str	r3, [r5, #0]
 8010622:	f7f2 f9f9 	bl	8002a18 <_kill>
 8010626:	1c43      	adds	r3, r0, #1
 8010628:	d102      	bne.n	8010630 <_kill_r+0x1c>
 801062a:	682b      	ldr	r3, [r5, #0]
 801062c:	b103      	cbz	r3, 8010630 <_kill_r+0x1c>
 801062e:	6023      	str	r3, [r4, #0]
 8010630:	bd38      	pop	{r3, r4, r5, pc}
 8010632:	bf00      	nop
 8010634:	200041a4 	.word	0x200041a4

08010638 <_getpid_r>:
 8010638:	f7f2 b9e6 	b.w	8002a08 <_getpid>

0801063c <_malloc_usable_size_r>:
 801063c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010640:	1f18      	subs	r0, r3, #4
 8010642:	2b00      	cmp	r3, #0
 8010644:	bfbc      	itt	lt
 8010646:	580b      	ldrlt	r3, [r1, r0]
 8010648:	18c0      	addlt	r0, r0, r3
 801064a:	4770      	bx	lr

0801064c <__swhatbuf_r>:
 801064c:	b570      	push	{r4, r5, r6, lr}
 801064e:	460c      	mov	r4, r1
 8010650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010654:	2900      	cmp	r1, #0
 8010656:	b096      	sub	sp, #88	; 0x58
 8010658:	4615      	mov	r5, r2
 801065a:	461e      	mov	r6, r3
 801065c:	da0d      	bge.n	801067a <__swhatbuf_r+0x2e>
 801065e:	89a3      	ldrh	r3, [r4, #12]
 8010660:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010664:	f04f 0100 	mov.w	r1, #0
 8010668:	bf0c      	ite	eq
 801066a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801066e:	2340      	movne	r3, #64	; 0x40
 8010670:	2000      	movs	r0, #0
 8010672:	6031      	str	r1, [r6, #0]
 8010674:	602b      	str	r3, [r5, #0]
 8010676:	b016      	add	sp, #88	; 0x58
 8010678:	bd70      	pop	{r4, r5, r6, pc}
 801067a:	466a      	mov	r2, sp
 801067c:	f000 f848 	bl	8010710 <_fstat_r>
 8010680:	2800      	cmp	r0, #0
 8010682:	dbec      	blt.n	801065e <__swhatbuf_r+0x12>
 8010684:	9901      	ldr	r1, [sp, #4]
 8010686:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801068a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801068e:	4259      	negs	r1, r3
 8010690:	4159      	adcs	r1, r3
 8010692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010696:	e7eb      	b.n	8010670 <__swhatbuf_r+0x24>

08010698 <__smakebuf_r>:
 8010698:	898b      	ldrh	r3, [r1, #12]
 801069a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801069c:	079d      	lsls	r5, r3, #30
 801069e:	4606      	mov	r6, r0
 80106a0:	460c      	mov	r4, r1
 80106a2:	d507      	bpl.n	80106b4 <__smakebuf_r+0x1c>
 80106a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80106a8:	6023      	str	r3, [r4, #0]
 80106aa:	6123      	str	r3, [r4, #16]
 80106ac:	2301      	movs	r3, #1
 80106ae:	6163      	str	r3, [r4, #20]
 80106b0:	b002      	add	sp, #8
 80106b2:	bd70      	pop	{r4, r5, r6, pc}
 80106b4:	ab01      	add	r3, sp, #4
 80106b6:	466a      	mov	r2, sp
 80106b8:	f7ff ffc8 	bl	801064c <__swhatbuf_r>
 80106bc:	9900      	ldr	r1, [sp, #0]
 80106be:	4605      	mov	r5, r0
 80106c0:	4630      	mov	r0, r6
 80106c2:	f7ff f8fb 	bl	800f8bc <_malloc_r>
 80106c6:	b948      	cbnz	r0, 80106dc <__smakebuf_r+0x44>
 80106c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106cc:	059a      	lsls	r2, r3, #22
 80106ce:	d4ef      	bmi.n	80106b0 <__smakebuf_r+0x18>
 80106d0:	f023 0303 	bic.w	r3, r3, #3
 80106d4:	f043 0302 	orr.w	r3, r3, #2
 80106d8:	81a3      	strh	r3, [r4, #12]
 80106da:	e7e3      	b.n	80106a4 <__smakebuf_r+0xc>
 80106dc:	89a3      	ldrh	r3, [r4, #12]
 80106de:	6020      	str	r0, [r4, #0]
 80106e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106e4:	81a3      	strh	r3, [r4, #12]
 80106e6:	9b00      	ldr	r3, [sp, #0]
 80106e8:	6163      	str	r3, [r4, #20]
 80106ea:	9b01      	ldr	r3, [sp, #4]
 80106ec:	6120      	str	r0, [r4, #16]
 80106ee:	b15b      	cbz	r3, 8010708 <__smakebuf_r+0x70>
 80106f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106f4:	4630      	mov	r0, r6
 80106f6:	f000 f81d 	bl	8010734 <_isatty_r>
 80106fa:	b128      	cbz	r0, 8010708 <__smakebuf_r+0x70>
 80106fc:	89a3      	ldrh	r3, [r4, #12]
 80106fe:	f023 0303 	bic.w	r3, r3, #3
 8010702:	f043 0301 	orr.w	r3, r3, #1
 8010706:	81a3      	strh	r3, [r4, #12]
 8010708:	89a3      	ldrh	r3, [r4, #12]
 801070a:	431d      	orrs	r5, r3
 801070c:	81a5      	strh	r5, [r4, #12]
 801070e:	e7cf      	b.n	80106b0 <__smakebuf_r+0x18>

08010710 <_fstat_r>:
 8010710:	b538      	push	{r3, r4, r5, lr}
 8010712:	4d07      	ldr	r5, [pc, #28]	; (8010730 <_fstat_r+0x20>)
 8010714:	2300      	movs	r3, #0
 8010716:	4604      	mov	r4, r0
 8010718:	4608      	mov	r0, r1
 801071a:	4611      	mov	r1, r2
 801071c:	602b      	str	r3, [r5, #0]
 801071e:	f7f2 f9da 	bl	8002ad6 <_fstat>
 8010722:	1c43      	adds	r3, r0, #1
 8010724:	d102      	bne.n	801072c <_fstat_r+0x1c>
 8010726:	682b      	ldr	r3, [r5, #0]
 8010728:	b103      	cbz	r3, 801072c <_fstat_r+0x1c>
 801072a:	6023      	str	r3, [r4, #0]
 801072c:	bd38      	pop	{r3, r4, r5, pc}
 801072e:	bf00      	nop
 8010730:	200041a4 	.word	0x200041a4

08010734 <_isatty_r>:
 8010734:	b538      	push	{r3, r4, r5, lr}
 8010736:	4d06      	ldr	r5, [pc, #24]	; (8010750 <_isatty_r+0x1c>)
 8010738:	2300      	movs	r3, #0
 801073a:	4604      	mov	r4, r0
 801073c:	4608      	mov	r0, r1
 801073e:	602b      	str	r3, [r5, #0]
 8010740:	f7f2 f9d9 	bl	8002af6 <_isatty>
 8010744:	1c43      	adds	r3, r0, #1
 8010746:	d102      	bne.n	801074e <_isatty_r+0x1a>
 8010748:	682b      	ldr	r3, [r5, #0]
 801074a:	b103      	cbz	r3, 801074e <_isatty_r+0x1a>
 801074c:	6023      	str	r3, [r4, #0]
 801074e:	bd38      	pop	{r3, r4, r5, pc}
 8010750:	200041a4 	.word	0x200041a4

08010754 <_init>:
 8010754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010756:	bf00      	nop
 8010758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801075a:	bc08      	pop	{r3}
 801075c:	469e      	mov	lr, r3
 801075e:	4770      	bx	lr

08010760 <_fini>:
 8010760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010762:	bf00      	nop
 8010764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010766:	bc08      	pop	{r3}
 8010768:	469e      	mov	lr, r3
 801076a:	4770      	bx	lr
