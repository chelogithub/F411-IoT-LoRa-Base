
F411-IoT-LoRa-Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c4  0800fbf4  0800fbf4  0001fbf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105b8  080105b8  00030198  2**0
                  CONTENTS
  4 .ARM          00000008  080105b8  080105b8  000205b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105c0  080105c0  00030198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105c0  080105c0  000205c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080105c4  080105c4  000205c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  080105c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004480  20000198  08010760  00030198  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004618  08010760  00034618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015bb3  00000000  00000000  0003020b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030a7  00000000  00000000  00045dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  00048e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e3b  00000000  00000000  00049ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018878  00000000  00000000  0004ae33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018171  00000000  00000000  000636ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093b1c  00000000  00000000  0007b81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005664  00000000  00000000  0010f338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0011499c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000198 	.word	0x20000198
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fbdc 	.word	0x0800fbdc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000019c 	.word	0x2000019c
 80001dc:	0800fbdc 	.word	0x0800fbdc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	b08f      	sub	sp, #60	; 0x3c
 8000698:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5100 Environment-------------------------//

	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069a:	4bd0      	ldr	r3, [pc, #832]	; (80009dc <main+0x348>)
 800069c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a0:	22c0      	movs	r2, #192	; 0xc0
 80006a2:	771a      	strb	r2, [r3, #28]
		ETH.GAR[1]=168;
 80006a4:	4bcd      	ldr	r3, [pc, #820]	; (80009dc <main+0x348>)
 80006a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006aa:	22a8      	movs	r2, #168	; 0xa8
 80006ac:	775a      	strb	r2, [r3, #29]
		ETH.GAR[2]=0;
 80006ae:	4bcb      	ldr	r3, [pc, #812]	; (80009dc <main+0x348>)
 80006b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b4:	2200      	movs	r2, #0
 80006b6:	779a      	strb	r2, [r3, #30]
		ETH.GAR[3]=1;
 80006b8:	4bc8      	ldr	r3, [pc, #800]	; (80009dc <main+0x348>)
 80006ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006be:	2201      	movs	r2, #1
 80006c0:	77da      	strb	r2, [r3, #31]
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006c2:	4bc6      	ldr	r3, [pc, #792]	; (80009dc <main+0x348>)
 80006c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c8:	22ff      	movs	r2, #255	; 0xff
 80006ca:	f883 2020 	strb.w	r2, [r3, #32]
		ETH.SUBR[1]=255;
 80006ce:	4bc3      	ldr	r3, [pc, #780]	; (80009dc <main+0x348>)
 80006d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d4:	22ff      	movs	r2, #255	; 0xff
 80006d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		ETH.SUBR[2]=255;
 80006da:	4bc0      	ldr	r3, [pc, #768]	; (80009dc <main+0x348>)
 80006dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e0:	22ff      	movs	r2, #255	; 0xff
 80006e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ETH.SUBR[3]=0;
 80006e6:	4bbd      	ldr	r3, [pc, #756]	; (80009dc <main+0x348>)
 80006e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ec:	2200      	movs	r2, #0
 80006ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006f2:	4bba      	ldr	r3, [pc, #744]	; (80009dc <main+0x348>)
 80006f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.SHAR[1]=0x08;
 80006fe:	4bb7      	ldr	r3, [pc, #732]	; (80009dc <main+0x348>)
 8000700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000704:	2208      	movs	r2, #8
 8000706:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.SHAR[2]=0xDC;
 800070a:	4bb4      	ldr	r3, [pc, #720]	; (80009dc <main+0x348>)
 800070c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000710:	22dc      	movs	r2, #220	; 0xdc
 8000712:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.SHAR[3]=0x00;
 8000716:	4bb1      	ldr	r3, [pc, #708]	; (80009dc <main+0x348>)
 8000718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071c:	2200      	movs	r2, #0
 800071e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		ETH.SHAR[4]=0x00;
 8000722:	4bae      	ldr	r3, [pc, #696]	; (80009dc <main+0x348>)
 8000724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SHAR[5]=0x01;
 800072e:	4bab      	ldr	r3, [pc, #684]	; (80009dc <main+0x348>)
 8000730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000734:	2201      	movs	r2, #1
 8000736:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 800073a:	4ba8      	ldr	r3, [pc, #672]	; (80009dc <main+0x348>)
 800073c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000740:	22c0      	movs	r2, #192	; 0xc0
 8000742:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SIPR[1]=168;
 8000746:	4ba5      	ldr	r3, [pc, #660]	; (80009dc <main+0x348>)
 8000748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074c:	22a8      	movs	r2, #168	; 0xa8
 800074e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		ETH.SIPR[2]=0;
 8000752:	4ba2      	ldr	r3, [pc, #648]	; (80009dc <main+0x348>)
 8000754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000758:	2200      	movs	r2, #0
 800075a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SIPR[3]=6,//ETH.SIPR[3]=34,
 800075e:	4b9f      	ldr	r3, [pc, #636]	; (80009dc <main+0x348>)
 8000760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000764:	2206      	movs	r2, #6
 8000766:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	//  Socket RX memory
		ETH.RMSR=0x55;
 800076a:	4b9c      	ldr	r3, [pc, #624]	; (80009dc <main+0x348>)
 800076c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000770:	2255      	movs	r2, #85	; 0x55
 8000772:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	//  Socket TX memory


		ETH.TMSR=0x55;
 8000776:	4b99      	ldr	r3, [pc, #612]	; (80009dc <main+0x348>)
 8000778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077c:	2255      	movs	r2, #85	; 0x55
 800077e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	//  S0 Port Number
		ETH.S0_PORT[0]=0x01;
 8000782:	4b96      	ldr	r3, [pc, #600]	; (80009dc <main+0x348>)
 8000784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000788:	2201      	movs	r2, #1
 800078a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		ETH.S0_PORT[1]=0xF6;
 800078e:	4b93      	ldr	r3, [pc, #588]	; (80009dc <main+0x348>)
 8000790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000794:	22f6      	movs	r2, #246	; 0xf6
 8000796:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//	S0 Client IP ADDRESS
		ETH.S0_DIPR[0]=192;
 800079a:	4b90      	ldr	r3, [pc, #576]	; (80009dc <main+0x348>)
 800079c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a0:	22c0      	movs	r2, #192	; 0xc0
 80007a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		ETH.S0_DIPR[1]=168;
 80007a6:	4b8d      	ldr	r3, [pc, #564]	; (80009dc <main+0x348>)
 80007a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ac:	22a8      	movs	r2, #168	; 0xa8
 80007ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		ETH.S0_DIPR[2]=0;
 80007b2:	4b8a      	ldr	r3, [pc, #552]	; (80009dc <main+0x348>)
 80007b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		ETH.S0_DIPR[3]=3;
 80007be:	4b87      	ldr	r3, [pc, #540]	; (80009dc <main+0x348>)
 80007c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c4:	2203      	movs	r2, #3
 80007c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	//	S0 Client IP ADDRESS
		ETH.S0_DPORT[0]=0x01;
 80007ca:	4b84      	ldr	r3, [pc, #528]	; (80009dc <main+0x348>)
 80007cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d0:	2201      	movs	r2, #1
 80007d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		ETH.S0_DPORT[1]=0xF6;
 80007d6:	4b81      	ldr	r3, [pc, #516]	; (80009dc <main+0x348>)
 80007d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007dc:	22f6      	movs	r2, #246	; 0xf6
 80007de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		ETH.gS0_RX_BASE = 0x6000;
 80007e2:	4b7e      	ldr	r3, [pc, #504]	; (80009dc <main+0x348>)
 80007e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007e8:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80007ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		ETH.gS0_RX_MASK = 0x07FF;
 80007f0:	4b7a      	ldr	r3, [pc, #488]	; (80009dc <main+0x348>)
 80007f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		ETH.gS1_RX_BASE = 0x6800;
 80007fe:	4b77      	ldr	r3, [pc, #476]	; (80009dc <main+0x348>)
 8000800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000804:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 8000808:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		ETH.gS1_RX_MASK = 0x07FF;
 800080c:	4b73      	ldr	r3, [pc, #460]	; (80009dc <main+0x348>)
 800080e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000812:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000816:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		ETH.gS2_RX_BASE = 0x7000;
 800081a:	4b70      	ldr	r3, [pc, #448]	; (80009dc <main+0x348>)
 800081c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000820:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000824:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		ETH.gS2_RX_MASK = 0x07FF;
 8000828:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <main+0x348>)
 800082a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800082e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000832:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS3_RX_BASE = 0x7800;
 8000836:	4b69      	ldr	r3, [pc, #420]	; (80009dc <main+0x348>)
 8000838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800083c:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000840:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS3_RX_MASK = 0x07FF;
 8000844:	4b65      	ldr	r3, [pc, #404]	; (80009dc <main+0x348>)
 8000846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800084a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800084e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS0_TX_BASE = 0x4000;
 8000852:	4b62      	ldr	r3, [pc, #392]	; (80009dc <main+0x348>)
 8000854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000858:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS0_TX_MASK = 0x07FF;
 8000860:	4b5e      	ldr	r3, [pc, #376]	; (80009dc <main+0x348>)
 8000862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000866:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800086a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS1_TX_BASE = 0x4800;
 800086e:	4b5b      	ldr	r3, [pc, #364]	; (80009dc <main+0x348>)
 8000870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000874:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8000878:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS1_TX_MASK = 0x07FF;
 800087c:	4b57      	ldr	r3, [pc, #348]	; (80009dc <main+0x348>)
 800087e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000882:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000886:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS2_TX_BASE = 0x5000;
 800088a:	4b54      	ldr	r3, [pc, #336]	; (80009dc <main+0x348>)
 800088c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000890:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000894:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS2_TX_MASK = 0x07FF;
 8000898:	4b50      	ldr	r3, [pc, #320]	; (80009dc <main+0x348>)
 800089a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800089e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS3_TX_BASE = 0x5800;
 80008a6:	4b4d      	ldr	r3, [pc, #308]	; (80009dc <main+0x348>)
 80008a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ac:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS3_TX_MASK = 0x07FF;
 80008b4:	4b49      	ldr	r3, [pc, #292]	; (80009dc <main+0x348>)
 80008b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008be:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		ETH.S0_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c2:	4b46      	ldr	r3, [pc, #280]	; (80009dc <main+0x348>)
 80008c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	  //----------------------- LoRa ------------------------//

	  //----------------------- LoRa ------------------------//

	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008ce:	4844      	ldr	r0, [pc, #272]	; (80009e0 <main+0x34c>)
 80008d0:	f006 f812 	bl	80068f8 <Inicializar>
 	  	wf.RESET_PORT=GPIOA;
 80008d4:	4b42      	ldr	r3, [pc, #264]	; (80009e0 <main+0x34c>)
 80008d6:	4a43      	ldr	r2, [pc, #268]	; (80009e4 <main+0x350>)
 80008d8:	601a      	str	r2, [r3, #0]
 	  	wf.RESET_PIN=GPIO_PIN_8;
 80008da:	4b41      	ldr	r3, [pc, #260]	; (80009e0 <main+0x34c>)
 80008dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008e0:	809a      	strh	r2, [r3, #4]
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008e2:	4941      	ldr	r1, [pc, #260]	; (80009e8 <main+0x354>)
 80008e4:	4841      	ldr	r0, [pc, #260]	; (80009ec <main+0x358>)
 80008e6:	f00e f993 	bl	800ec10 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 80008ea:	4941      	ldr	r1, [pc, #260]	; (80009f0 <main+0x35c>)
 80008ec:	4841      	ldr	r0, [pc, #260]	; (80009f4 <main+0x360>)
 80008ee:	f00e f98f 	bl	800ec10 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 80008f2:	4941      	ldr	r1, [pc, #260]	; (80009f8 <main+0x364>)
 80008f4:	4841      	ldr	r0, [pc, #260]	; (80009fc <main+0x368>)
 80008f6:	f00e f98b 	bl	800ec10 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 80008fa:	4941      	ldr	r1, [pc, #260]	; (8000a00 <main+0x36c>)
 80008fc:	4841      	ldr	r0, [pc, #260]	; (8000a04 <main+0x370>)
 80008fe:	f00e f987 	bl	800ec10 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 8000902:	4941      	ldr	r1, [pc, #260]	; (8000a08 <main+0x374>)
 8000904:	4841      	ldr	r0, [pc, #260]	; (8000a0c <main+0x378>)
 8000906:	f00e f983 	bl	800ec10 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 800090a:	4941      	ldr	r1, [pc, #260]	; (8000a10 <main+0x37c>)
 800090c:	4841      	ldr	r0, [pc, #260]	; (8000a14 <main+0x380>)
 800090e:	f00e f97f 	bl	800ec10 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 8000912:	4941      	ldr	r1, [pc, #260]	; (8000a18 <main+0x384>)
 8000914:	4841      	ldr	r0, [pc, #260]	; (8000a1c <main+0x388>)
 8000916:	f00e f97b 	bl	800ec10 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 800091a:	4941      	ldr	r1, [pc, #260]	; (8000a20 <main+0x38c>)
 800091c:	4841      	ldr	r0, [pc, #260]	; (8000a24 <main+0x390>)
 800091e:	f00e f977 	bl	800ec10 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 8000922:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <main+0x34c>)
 8000924:	2200      	movs	r2, #0
 8000926:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800092a:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <main+0x34c>)
 800092c:	2200      	movs	r2, #0
 800092e:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[1]=0x00;
 8000932:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <main+0x34c>)
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[2]=0x00;
 800093a:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <main+0x34c>)
 800093c:	2200      	movs	r2, #0
 800093e:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[3]=0x00;
 8000942:	4b27      	ldr	r3, [pc, #156]	; (80009e0 <main+0x34c>)
 8000944:	2200      	movs	r2, #0
 8000946:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[4]=0x00;
 800094a:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <main+0x34c>)
 800094c:	2200      	movs	r2, #0
 800094e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[5]=0x06;
 8000952:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <main+0x34c>)
 8000954:	2206      	movs	r2, #6
 8000956:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[6]=0x01;
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <main+0x34c>)
 800095c:	2201      	movs	r2, #1
 800095e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[7]=0x03;
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <main+0x34c>)
 8000964:	2203      	movs	r2, #3
 8000966:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <main+0x34c>)
 800096c:	2200      	movs	r2, #0
 800096e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[9]=0x00;
 8000972:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <main+0x34c>)
 8000974:	2200      	movs	r2, #0
 8000976:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[10]=0x00;
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <main+0x34c>)
 800097c:	2200      	movs	r2, #0
 800097e:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[11]=0x0A;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <main+0x34c>)
 8000984:	220a      	movs	r2, #10
 8000986:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._data2SND[12]=0x00;
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <main+0x34c>)
 800098c:	2200      	movs	r2, #0
 800098e:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
		wf._data2SND[13]=0x33;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <main+0x34c>)
 8000994:	2233      	movs	r2, #51	; 0x33
 8000996:	f883 22a5 	strb.w	r2, [r3, #677]	; 0x2a5
		wf._data2SND[14]=0x34;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <main+0x34c>)
 800099c:	2234      	movs	r2, #52	; 0x34
 800099e:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6
		wf._data2SND[15]=0x35;
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <main+0x34c>)
 80009a4:	2235      	movs	r2, #53	; 0x35
 80009a6:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
		wf._n_D2SND=12;
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <main+0x34c>)
 80009ac:	220c      	movs	r2, #12
 80009ae:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <main+0x34c>)
 80009b4:	2264      	movs	r2, #100	; 0x64
 80009b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <main+0x34c>)
 80009bc:	2202      	movs	r2, #2
 80009be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._NO_IP=1;
 80009c2:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <main+0x34c>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	f8c3 2d58 	str.w	r2, [r3, #3416]	; 0xd58
		wf._DBG_EN=1;
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <main+0x34c>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	f8c3 2d5c 	str.w	r2, [r3, #3420]	; 0xd5c
		//wf._send_data=1;
		// ----------- INICIO - Seteo de módulo Ethernet W5100 ----------- //
	    // Conectado a SPI2
		// PIN NSS - PortB 12
		spi_no_debug=1;
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <main+0x394>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	701a      	strb	r2, [r3, #0]
 80009d8:	e028      	b.n	8000a2c <main+0x398>
 80009da:	bf00      	nop
 80009dc:	20002980 	.word	0x20002980
 80009e0:	20000b78 	.word	0x20000b78
 80009e4:	40020000 	.word	0x40020000
 80009e8:	20000024 	.word	0x20000024
 80009ec:	20000b7e 	.word	0x20000b7e
 80009f0:	2000002c 	.word	0x2000002c
 80009f4:	20000b9e 	.word	0x20000b9e
 80009f8:	20000038 	.word	0x20000038
 80009fc:	20000bae 	.word	0x20000bae
 8000a00:	20000048 	.word	0x20000048
 8000a04:	20000bbe 	.word	0x20000bbe
 8000a08:	20000050 	.word	0x20000050
 8000a0c:	20000bc4 	.word	0x20000bc4
 8000a10:	20000060 	.word	0x20000060
 8000a14:	20000bda 	.word	0x20000bda
 8000a18:	20000070 	.word	0x20000070
 8000a1c:	20000bea 	.word	0x20000bea
 8000a20:	20000080 	.word	0x20000080
 8000a24:	20000bd4 	.word	0x20000bd4
 8000a28:	20003a68 	.word	0x20003a68
		ETH.NSS_PORT=GPIOA;
 8000a2c:	4b85      	ldr	r3, [pc, #532]	; (8000c44 <main+0x5b0>)
 8000a2e:	4a86      	ldr	r2, [pc, #536]	; (8000c48 <main+0x5b4>)
 8000a30:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 8000a32:	4b84      	ldr	r3, [pc, #528]	; (8000c44 <main+0x5b0>)
 8000a34:	2210      	movs	r2, #16
 8000a36:	811a      	strh	r2, [r3, #8]
		ETH.SPI= &hspi1;
 8000a38:	4b82      	ldr	r3, [pc, #520]	; (8000c44 <main+0x5b0>)
 8000a3a:	4a84      	ldr	r2, [pc, #528]	; (8000c4c <main+0x5b8>)
 8000a3c:	601a      	str	r2, [r3, #0]

		// ----------- FIN - Seteo de módulo Ethernet W5100 ----------- //
		 //----------------------- WIFI ------------------------//
			decimal[0]=1;
 8000a3e:	4b84      	ldr	r3, [pc, #528]	; (8000c50 <main+0x5bc>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]
			decimal[1]=1;
 8000a44:	4b82      	ldr	r3, [pc, #520]	; (8000c50 <main+0x5bc>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	705a      	strb	r2, [r3, #1]
			decimal[2]=1;
 8000a4a:	4b81      	ldr	r3, [pc, #516]	; (8000c50 <main+0x5bc>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	709a      	strb	r2, [r3, #2]
			decimal[3]=1;
 8000a50:	4b7f      	ldr	r3, [pc, #508]	; (8000c50 <main+0x5bc>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	70da      	strb	r2, [r3, #3]
			decimal[4]=1;
 8000a56:	4b7e      	ldr	r3, [pc, #504]	; (8000c50 <main+0x5bc>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	711a      	strb	r2, [r3, #4]
			decimal[5]=1;
 8000a5c:	4b7c      	ldr	r3, [pc, #496]	; (8000c50 <main+0x5bc>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	715a      	strb	r2, [r3, #5]
			decimal[6]=1;
 8000a62:	4b7b      	ldr	r3, [pc, #492]	; (8000c50 <main+0x5bc>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	719a      	strb	r2, [r3, #6]
			decimal[7]=1;
 8000a68:	4b79      	ldr	r3, [pc, #484]	; (8000c50 <main+0x5bc>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	71da      	strb	r2, [r3, #7]
			decimal[8]=1;
 8000a6e:	4b78      	ldr	r3, [pc, #480]	; (8000c50 <main+0x5bc>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	721a      	strb	r2, [r3, #8]
			decimal[9]=1;
 8000a74:	4b76      	ldr	r3, [pc, #472]	; (8000c50 <main+0x5bc>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	725a      	strb	r2, [r3, #9]
			decimal[10]=1;
 8000a7a:	4b75      	ldr	r3, [pc, #468]	; (8000c50 <main+0x5bc>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	729a      	strb	r2, [r3, #10]
			decimal[11]=1;
 8000a80:	4b73      	ldr	r3, [pc, #460]	; (8000c50 <main+0x5bc>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	72da      	strb	r2, [r3, #11]
			decimal[12]=1;
 8000a86:	4b72      	ldr	r3, [pc, #456]	; (8000c50 <main+0x5bc>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	731a      	strb	r2, [r3, #12]
			decimal[13]=1;
 8000a8c:	4b70      	ldr	r3, [pc, #448]	; (8000c50 <main+0x5bc>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	735a      	strb	r2, [r3, #13]
			decimal[14]=1;
 8000a92:	4b6f      	ldr	r3, [pc, #444]	; (8000c50 <main+0x5bc>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	739a      	strb	r2, [r3, #14]
			decimal[15]=1;
 8000a98:	4b6d      	ldr	r3, [pc, #436]	; (8000c50 <main+0x5bc>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	73da      	strb	r2, [r3, #15]
			decimal[16]=1;
 8000a9e:	4b6c      	ldr	r3, [pc, #432]	; (8000c50 <main+0x5bc>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	741a      	strb	r2, [r3, #16]
	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000aa4:	486b      	ldr	r0, [pc, #428]	; (8000c54 <main+0x5c0>)
 8000aa6:	f00b fa21 	bl	800beec <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000aaa:	4b6a      	ldr	r3, [pc, #424]	; (8000c54 <main+0x5c0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	711a      	strb	r2, [r3, #4]
		ModBUS_Config(&mb_wf);	//WIFI como servidor TCP, recibe comadno ModBUS
 8000ab0:	4869      	ldr	r0, [pc, #420]	; (8000c58 <main+0x5c4>)
 8000ab2:	f00b fa1b 	bl	800beec <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000ab6:	4b68      	ldr	r3, [pc, #416]	; (8000c58 <main+0x5c4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	711a      	strb	r2, [r3, #4]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000abc:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000ac0:	2103      	movs	r1, #3
 8000ac2:	4865      	ldr	r0, [pc, #404]	; (8000c58 <main+0x5c4>)
 8000ac4:	f00b fab5 	bl	800c032 <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac8:	f002 f886 	bl	8002bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000acc:	f000 faec 	bl	80010a8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000ad0:	4b62      	ldr	r3, [pc, #392]	; (8000c5c <main+0x5c8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a62      	ldr	r2, [pc, #392]	; (8000c60 <main+0x5cc>)
 8000ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ada:	099b      	lsrs	r3, r3, #6
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fd8f 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae2:	f000 fcf5 	bl	80014d0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ae6:	f000 fb47 	bl	8001178 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000aea:	f000 fc73 	bl	80013d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000aee:	f000 fc9b 	bl	8001428 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000af2:	f000 fcc3 	bl	800147c <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000af6:	f000 fb75 	bl	80011e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000afa:	f000 fbef 	bl	80012dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2102      	movs	r1, #2
 8000b02:	4851      	ldr	r0, [pc, #324]	; (8000c48 <main+0x5b4>)
 8000b04:	f002 fd3c 	bl	8003580 <HAL_GPIO_WritePin>
  ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000b08:	210e      	movs	r1, #14
 8000b0a:	4856      	ldr	r0, [pc, #344]	; (8000c64 <main+0x5d0>)
 8000b0c:	f000 fd72 	bl	80015f4 <ITM0_Write>
   	   HW_RESET(&wf);
 8000b10:	4855      	ldr	r0, [pc, #340]	; (8000c68 <main+0x5d4>)
 8000b12:	f005 fded 	bl	80066f0 <HW_RESET>
     //ESP8266_HW_Reset();	//WRNNG Hardcoded	  //Reseteo el modulo desde el pin de RESET
     if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000b16:	4b54      	ldr	r3, [pc, #336]	; (8000c68 <main+0x5d4>)
 8000b18:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <main+0x494>
 8000b20:	2113      	movs	r1, #19
 8000b22:	4852      	ldr	r0, [pc, #328]	; (8000c6c <main+0x5d8>)
 8000b24:	f000 fd66 	bl	80015f4 <ITM0_Write>
     HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4951      	ldr	r1, [pc, #324]	; (8000c70 <main+0x5dc>)
 8000b2c:	4851      	ldr	r0, [pc, #324]	; (8000c74 <main+0x5e0>)
 8000b2e:	f004 fe50 	bl	80057d2 <HAL_UART_Receive_IT>
     HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1);
 8000b32:	2201      	movs	r2, #1
 8000b34:	4950      	ldr	r1, [pc, #320]	; (8000c78 <main+0x5e4>)
 8000b36:	4851      	ldr	r0, [pc, #324]	; (8000c7c <main+0x5e8>)
 8000b38:	f004 fe4b 	bl	80057d2 <HAL_UART_Receive_IT>
     if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5100 \r\n",strlen("\r\n SET-UP W5100 \r\n"));
 8000b3c:	4b50      	ldr	r3, [pc, #320]	; (8000c80 <main+0x5ec>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d003      	beq.n	8000b4c <main+0x4b8>
 8000b44:	2112      	movs	r1, #18
 8000b46:	484f      	ldr	r0, [pc, #316]	; (8000c84 <main+0x5f0>)
 8000b48:	f000 fd54 	bl	80015f4 <ITM0_Write>

   	 ETH.operacion=SPI_WRITE;
 8000b4c:	4b3d      	ldr	r3, [pc, #244]	; (8000c44 <main+0x5b0>)
 8000b4e:	22f0      	movs	r2, #240	; 0xf0
 8000b50:	729a      	strb	r2, [r3, #10]
   	 ETH.TX[1]= 0;
 8000b52:	4b3c      	ldr	r3, [pc, #240]	; (8000c44 <main+0x5b0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	755a      	strb	r2, [r3, #21]
   	 ETH.TX[2]= 1;
 8000b58:	4b3a      	ldr	r3, [pc, #232]	; (8000c44 <main+0x5b0>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	759a      	strb	r2, [r3, #22]
   	 ETH.TX[3]= 192;
 8000b5e:	4b39      	ldr	r3, [pc, #228]	; (8000c44 <main+0x5b0>)
 8000b60:	22c0      	movs	r2, #192	; 0xc0
 8000b62:	75da      	strb	r2, [r3, #23]
   ETH.operacion=SPI_READ;
 8000b64:	4b37      	ldr	r3, [pc, #220]	; (8000c44 <main+0x5b0>)
 8000b66:	220f      	movs	r2, #15
 8000b68:	729a      	strb	r2, [r3, #10]
   ETH.TX[1]= 0;
 8000b6a:	4b36      	ldr	r3, [pc, #216]	; (8000c44 <main+0x5b0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	755a      	strb	r2, [r3, #21]
   ETH.TX[2]= 1;
 8000b70:	4b34      	ldr	r3, [pc, #208]	; (8000c44 <main+0x5b0>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	759a      	strb	r2, [r3, #22]
   ETH.TX[3]= 0;
 8000b76:	4b33      	ldr	r3, [pc, #204]	; (8000c44 <main+0x5b0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	75da      	strb	r2, [r3, #23]

     if(ESP8266_HW_Init(&huart1)==1)
 8000b7c:	483d      	ldr	r0, [pc, #244]	; (8000c74 <main+0x5e0>)
 8000b7e:	f001 fc67 	bl	8002450 <ESP8266_HW_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d10c      	bne.n	8000ba2 <main+0x50e>
     {
   	  ESP_HW_Init=1;
 8000b88:	4b3f      	ldr	r3, [pc, #252]	; (8000c88 <main+0x5f4>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
   	  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b8e:	4b36      	ldr	r3, [pc, #216]	; (8000c68 <main+0x5d4>)
 8000b90:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d026      	beq.n	8000be6 <main+0x552>
 8000b98:	2113      	movs	r1, #19
 8000b9a:	483c      	ldr	r0, [pc, #240]	; (8000c8c <main+0x5f8>)
 8000b9c:	f000 fd2a 	bl	80015f4 <ITM0_Write>
 8000ba0:	e021      	b.n	8000be6 <main+0x552>
     }
     else
     {
	   HW_RESET(&wf);
 8000ba2:	4831      	ldr	r0, [pc, #196]	; (8000c68 <main+0x5d4>)
 8000ba4:	f005 fda4 	bl	80066f0 <HW_RESET>
   	 //ESP8266_HW_Reset(); //WRNNG Hardcoded
   	  if(ESP8266_HW_Init(&huart1)==1)
 8000ba8:	4832      	ldr	r0, [pc, #200]	; (8000c74 <main+0x5e0>)
 8000baa:	f001 fc51 	bl	8002450 <ESP8266_HW_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d10c      	bne.n	8000bce <main+0x53a>
   	  {
   		  ESP_HW_Init=1;
 8000bb4:	4b34      	ldr	r3, [pc, #208]	; (8000c88 <main+0x5f4>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000bba:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <main+0x5d4>)
 8000bbc:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d010      	beq.n	8000be6 <main+0x552>
 8000bc4:	2113      	movs	r1, #19
 8000bc6:	4831      	ldr	r0, [pc, #196]	; (8000c8c <main+0x5f8>)
 8000bc8:	f000 fd14 	bl	80015f4 <ITM0_Write>
 8000bcc:	e00b      	b.n	8000be6 <main+0x552>
   	  }
   	  else
   	  {
   		  ESP_HW_Init=0;
 8000bce:	4b2e      	ldr	r3, [pc, #184]	; (8000c88 <main+0x5f4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000bd4:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <main+0x5d4>)
 8000bd6:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <main+0x552>
 8000bde:	2115      	movs	r1, #21
 8000be0:	482b      	ldr	r0, [pc, #172]	; (8000c90 <main+0x5fc>)
 8000be2:	f000 fd07 	bl	80015f4 <ITM0_Write>
   	  }
     }

     HAL_Delay(1000);
 8000be6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bea:	f002 f867 	bl	8002cbc <HAL_Delay>





	  	  if (ESP_HW_Init==1)
 8000bee:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <main+0x5f4>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	f040 809c 	bne.w	8000d30 <main+0x69c>
	  	  {
	  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(lr._data_available))
 8000bf8:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <main+0x600>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	f040 8097 	bne.w	8000d30 <main+0x69c>
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <main+0x5d4>)
 8000c04:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	f040 8091 	bne.w	8000d30 <main+0x69c>
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <main+0x5d4>)
 8000c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c14:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000c18:	f340 808a 	ble.w	8000d30 <main+0x69c>
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <main+0x604>)
 8000c1e:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 8084 	beq.w	8000d30 <main+0x69c>
	  			{	lr._data_available=0;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <main+0x604>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
	  				wf_snd_flag_ticks=0;
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <main+0x608>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
	  				WF_SND_FLAG=0;
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <main+0x600>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
									ModBUS_F03_Read(&mb_eth,13),
									ModBUS_F03_Read(&mb_eth,14),
									ModBUS_F03_Read(&mb_eth,15),TEST_1,//ModBUS_F03_Read(&mb_eth,9),TEPELCO,
	  								post, body, 512))*/

		  				for(uint8_t i=0;i<=16;i++)
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	77fb      	strb	r3, [r7, #31]
 8000c40:	e03c      	b.n	8000cbc <main+0x628>
 8000c42:	bf00      	nop
 8000c44:	20002980 	.word	0x20002980
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	200001b4 	.word	0x200001b4
 8000c50:	20003a14 	.word	0x20003a14
 8000c54:	200018d8 	.word	0x200018d8
 8000c58:	20001f28 	.word	0x20001f28
 8000c5c:	20000084 	.word	0x20000084
 8000c60:	10624dd3 	.word	0x10624dd3
 8000c64:	0800fbf4 	.word	0x0800fbf4
 8000c68:	20000b78 	.word	0x20000b78
 8000c6c:	0800fc04 	.word	0x0800fc04
 8000c70:	20004480 	.word	0x20004480
 8000c74:	2000029c 	.word	0x2000029c
 8000c78:	20004484 	.word	0x20004484
 8000c7c:	200002e0 	.word	0x200002e0
 8000c80:	20002978 	.word	0x20002978
 8000c84:	0800fc18 	.word	0x0800fc18
 8000c88:	20003a6b 	.word	0x20003a6b
 8000c8c:	0800fc2c 	.word	0x0800fc2c
 8000c90:	0800fc40 	.word	0x0800fc40
 8000c94:	20002979 	.word	0x20002979
 8000c98:	20000370 	.word	0x20000370
 8000c9c:	2000297c 	.word	0x2000297c
		  				{
		  					datos[i]=ModBUS_F03_Read(&mb_eth,i);//datos[i]=ModBUS_F03_Read(&mb_eth,i);
 8000ca0:	7ffc      	ldrb	r4, [r7, #31]
 8000ca2:	7ffb      	ldrb	r3, [r7, #31]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	487e      	ldr	r0, [pc, #504]	; (8000ea0 <main+0x80c>)
 8000ca8:	f00b f9f2 	bl	800c090 <ModBUS_F03_Read>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b7c      	ldr	r3, [pc, #496]	; (8000ea4 <main+0x810>)
 8000cb2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		  				for(uint8_t i=0;i<=16;i++)
 8000cb6:	7ffb      	ldrb	r3, [r7, #31]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	77fb      	strb	r3, [r7, #31]
 8000cbc:	7ffb      	ldrb	r3, [r7, #31]
 8000cbe:	2b10      	cmp	r3, #16
 8000cc0:	d9ee      	bls.n	8000ca0 <main+0x60c>
		  				}

		  				if(httpPOST2(ENDPOINT, SERVER_IP,PORT,&datos,&decimal,16,TEST_1,post,body, 512))
 8000cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cc6:	9305      	str	r3, [sp, #20]
 8000cc8:	4b77      	ldr	r3, [pc, #476]	; (8000ea8 <main+0x814>)
 8000cca:	9304      	str	r3, [sp, #16]
 8000ccc:	4b77      	ldr	r3, [pc, #476]	; (8000eac <main+0x818>)
 8000cce:	9303      	str	r3, [sp, #12]
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	9302      	str	r3, [sp, #8]
 8000cd4:	2310      	movs	r3, #16
 8000cd6:	9301      	str	r3, [sp, #4]
 8000cd8:	4b75      	ldr	r3, [pc, #468]	; (8000eb0 <main+0x81c>)
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	4b71      	ldr	r3, [pc, #452]	; (8000ea4 <main+0x810>)
 8000cde:	4a75      	ldr	r2, [pc, #468]	; (8000eb4 <main+0x820>)
 8000ce0:	4975      	ldr	r1, [pc, #468]	; (8000eb8 <main+0x824>)
 8000ce2:	4876      	ldr	r0, [pc, #472]	; (8000ebc <main+0x828>)
 8000ce4:	f00a fa0c 	bl	800b100 <httpPOST2>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d020      	beq.n	8000d30 <main+0x69c>
							{
										CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000cee:	486f      	ldr	r0, [pc, #444]	; (8000eac <main+0x818>)
 8000cf0:	f7ff fa80 	bl	80001f4 <strlen>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	2341      	movs	r3, #65	; 0x41
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	496b      	ldr	r1, [pc, #428]	; (8000eac <main+0x818>)
 8000d00:	486f      	ldr	r0, [pc, #444]	; (8000ec0 <main+0x82c>)
 8000d02:	f00d fc51 	bl	800e5a8 <CopiaVector>
										wf._n_D2SND=strlen(post);
 8000d06:	4869      	ldr	r0, [pc, #420]	; (8000eac <main+0x818>)
 8000d08:	f7ff fa74 	bl	80001f4 <strlen>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4b6c      	ldr	r3, [pc, #432]	; (8000ec4 <main+0x830>)
 8000d12:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
										if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000d16:	4b6b      	ldr	r3, [pc, #428]	; (8000ec4 <main+0x830>)
 8000d18:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d807      	bhi.n	8000d30 <main+0x69c>
										{
											EnviarDatos(&wf);
 8000d20:	4868      	ldr	r0, [pc, #416]	; (8000ec4 <main+0x830>)
 8000d22:	f005 fdd3 	bl	80068cc <EnviarDatos>
											wf._estado_conexion=TCP_SND_EN_CURSO;
 8000d26:	4b67      	ldr	r3, [pc, #412]	; (8000ec4 <main+0x830>)
 8000d28:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000d2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							}
	  			}
	  	  }
	  /**************[ FIN PIDO ENVIAR DATOS ]**************/

	  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000d30:	4b65      	ldr	r3, [pc, #404]	; (8000ec8 <main+0x834>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d003      	beq.n	8000d40 <main+0x6ac>
 8000d38:	4b64      	ldr	r3, [pc, #400]	; (8000ecc <main+0x838>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d175      	bne.n	8000e2c <main+0x798>
	  		{
	  			if(FLAG_UART1==1)
 8000d40:	4b61      	ldr	r3, [pc, #388]	; (8000ec8 <main+0x834>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d11c      	bne.n	8000d82 <main+0x6ee>
	  				{
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000d48:	4b61      	ldr	r3, [pc, #388]	; (8000ed0 <main+0x83c>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b61      	ldr	r3, [pc, #388]	; (8000ed4 <main+0x840>)
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	2301      	movs	r3, #1
 8000d52:	4961      	ldr	r1, [pc, #388]	; (8000ed8 <main+0x844>)
 8000d54:	4861      	ldr	r0, [pc, #388]	; (8000edc <main+0x848>)
 8000d56:	f00d fc27 	bl	800e5a8 <CopiaVector>
	  					FLAG_UART1=0;
 8000d5a:	4b5b      	ldr	r3, [pc, #364]	; (8000ec8 <main+0x834>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]

	  						if (error_rxdata==3)
 8000d60:	4b5f      	ldr	r3, [pc, #380]	; (8000ee0 <main+0x84c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	d102      	bne.n	8000d6e <main+0x6da>
	  						{
	  							error_rxdata=0;
 8000d68:	4b5d      	ldr	r3, [pc, #372]	; (8000ee0 <main+0x84c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
	  						}
	  						if (error_rxdata==1)
 8000d6e:	4b5c      	ldr	r3, [pc, #368]	; (8000ee0 <main+0x84c>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d105      	bne.n	8000d82 <main+0x6ee>
	  						{
	  							error_rxdata=5;
 8000d76:	4b5a      	ldr	r3, [pc, #360]	; (8000ee0 <main+0x84c>)
 8000d78:	2205      	movs	r2, #5
 8000d7a:	701a      	strb	r2, [r3, #0]
	  							error_rxdata=0;
 8000d7c:	4b58      	ldr	r3, [pc, #352]	; (8000ee0 <main+0x84c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
	  						}
	  				}
	  			if(FLAG_TIMEOUT==1)
 8000d82:	4b52      	ldr	r3, [pc, #328]	; (8000ecc <main+0x838>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d102      	bne.n	8000d90 <main+0x6fc>
	  					{
	  						FLAG_TIMEOUT=0;
 8000d8a:	4b50      	ldr	r3, [pc, #320]	; (8000ecc <main+0x838>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
	  					}

	  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000d90:	4b54      	ldr	r3, [pc, #336]	; (8000ee4 <main+0x850>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d149      	bne.n	8000e2c <main+0x798>
	  				{
	  					/*************** Copio y proceso info recibida ***************/
	  					wf._n_orig=UART_RX_items;
 8000d98:	4b4d      	ldr	r3, [pc, #308]	; (8000ed0 <main+0x83c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a49      	ldr	r2, [pc, #292]	; (8000ec4 <main+0x830>)
 8000d9e:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000da2:	4b4b      	ldr	r3, [pc, #300]	; (8000ed0 <main+0x83c>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	4b4b      	ldr	r3, [pc, #300]	; (8000ed4 <main+0x840>)
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	2301      	movs	r3, #1
 8000dac:	494a      	ldr	r1, [pc, #296]	; (8000ed8 <main+0x844>)
 8000dae:	484b      	ldr	r0, [pc, #300]	; (8000edc <main+0x848>)
 8000db0:	f00d fbfa 	bl	800e5a8 <CopiaVector>
	  					resultado=AT_ESP8266_ND(&wf);
 8000db4:	4843      	ldr	r0, [pc, #268]	; (8000ec4 <main+0x830>)
 8000db6:	f005 fe6f 	bl	8006a98 <AT_ESP8266_ND>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4b4a      	ldr	r3, [pc, #296]	; (8000ee8 <main+0x854>)
 8000dc0:	701a      	strb	r2, [r3, #0]

	  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

	  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000dc2:	4b40      	ldr	r3, [pc, #256]	; (8000ec4 <main+0x830>)
 8000dc4:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d12f      	bne.n	8000e2c <main+0x798>
 8000dcc:	4b3d      	ldr	r3, [pc, #244]	; (8000ec4 <main+0x830>)
 8000dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dd2:	2b63      	cmp	r3, #99	; 0x63
 8000dd4:	d12a      	bne.n	8000e2c <main+0x798>
	  					{

	  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000dd6:	4b3b      	ldr	r3, [pc, #236]	; (8000ec4 <main+0x830>)
 8000dd8:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8000ddc:	2341      	movs	r3, #65	; 0x41
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2300      	movs	r3, #0
 8000de2:	4942      	ldr	r1, [pc, #264]	; (8000eec <main+0x858>)
 8000de4:	4842      	ldr	r0, [pc, #264]	; (8000ef0 <main+0x85c>)
 8000de6:	f00d fbdf 	bl	800e5a8 <CopiaVector>
	  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000dea:	4b36      	ldr	r3, [pc, #216]	; (8000ec4 <main+0x830>)
 8000dec:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8000df0:	4a40      	ldr	r2, [pc, #256]	; (8000ef4 <main+0x860>)
 8000df2:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

	  						ModBUS(&mb_wf);
 8000df6:	483f      	ldr	r0, [pc, #252]	; (8000ef4 <main+0x860>)
 8000df8:	f00b f9d0 	bl	800c19c <ModBUS>

	  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000dfc:	4b3d      	ldr	r3, [pc, #244]	; (8000ef4 <main+0x860>)
 8000dfe:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000e02:	2341      	movs	r3, #65	; 0x41
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	2300      	movs	r3, #0
 8000e08:	493b      	ldr	r1, [pc, #236]	; (8000ef8 <main+0x864>)
 8000e0a:	482d      	ldr	r0, [pc, #180]	; (8000ec0 <main+0x82c>)
 8000e0c:	f00d fbcc 	bl	800e5a8 <CopiaVector>
	  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000e10:	4b38      	ldr	r3, [pc, #224]	; (8000ef4 <main+0x860>)
 8000e12:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000e16:	4a2b      	ldr	r2, [pc, #172]	; (8000ec4 <main+0x830>)
 8000e18:	f8c2 3cf0 	str.w	r3, [r2, #3312]	; 0xcf0
	  						wf._new_data_rcv=0;//
 8000e1c:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <main+0x830>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
	  						wf._send_data=1;
 8000e24:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <main+0x830>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
	  						}
	  					}

	  		}
// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT
	  		if((FLAG_UART2 == 1)||(lr.tmr_dly_ON==1))  //Evento de dato recibido LoRA debo verificar que es
 8000e2c:	4b33      	ldr	r3, [pc, #204]	; (8000efc <main+0x868>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d005      	beq.n	8000e40 <main+0x7ac>
 8000e34:	4b32      	ldr	r3, [pc, #200]	; (8000f00 <main+0x86c>)
 8000e36:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	f040 80f1 	bne.w	8001022 <main+0x98e>
	  		{
	  			if(FLAG_UART2==1)
 8000e40:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <main+0x868>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	f040 809f 	bne.w	8000f88 <main+0x8f4>
	  				{
	  				FLAG_UART2=0;
 8000e4a:	4b2c      	ldr	r3, [pc, #176]	; (8000efc <main+0x868>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
	  				LoRa_decode(&lr);
 8000e50:	482b      	ldr	r0, [pc, #172]	; (8000f00 <main+0x86c>)
 8000e52:	f00a fb93 	bl	800b57c <LoRa_decode>
	  				if(lr._data_available)
 8000e56:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <main+0x86c>)
 8000e58:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	f000 8093 	beq.w	8000f88 <main+0x8f4>
	  				{
	  					CopiaVector(lr.dataRCV_hld,lr.dataRCV,lr._n_dataRCV,1,"D");
 8000e62:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <main+0x86c>)
 8000e64:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	; 0x4d8
 8000e68:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <main+0x870>)
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	4926      	ldr	r1, [pc, #152]	; (8000f08 <main+0x874>)
 8000e70:	4826      	ldr	r0, [pc, #152]	; (8000f0c <main+0x878>)
 8000e72:	f00d fb99 	bl	800e5a8 <CopiaVector>
	  					char num[6];
	  					int i=0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
	  					int n=0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
	  					int lnn=0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
	  					lnn=strlen(lr.dataRCV_hld);
 8000e82:	4822      	ldr	r0, [pc, #136]	; (8000f0c <main+0x878>)
 8000e84:	f7ff f9b6 	bl	80001f4 <strlen>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	60fb      	str	r3, [r7, #12]
	  					while(i < lnn-1)
 8000e8c:	e077      	b.n	8000f7e <main+0x8ea>
	  					{
							if( i!=0) i++;
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <main+0x806>
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	3301      	adds	r3, #1
 8000e98:	61bb      	str	r3, [r7, #24]
							int j=0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]

								while(lr.dataRCV_hld[i] != ';')
 8000e9e:	e050      	b.n	8000f42 <main+0x8ae>
 8000ea0:	200018d8 	.word	0x200018d8
 8000ea4:	200039f0 	.word	0x200039f0
 8000ea8:	20002778 	.word	0x20002778
 8000eac:	20002578 	.word	0x20002578
 8000eb0:	20003a14 	.word	0x20003a14
 8000eb4:	2000001c 	.word	0x2000001c
 8000eb8:	2000000c 	.word	0x2000000c
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	20000e10 	.word	0x20000e10
 8000ec4:	20000b78 	.word	0x20000b78
 8000ec8:	20003a70 	.word	0x20003a70
 8000ecc:	20003a6f 	.word	0x20003a6f
 8000ed0:	2000448c 	.word	0x2000448c
 8000ed4:	2000447c 	.word	0x2000447c
 8000ed8:	2000407c 	.word	0x2000407c
 8000edc:	20001210 	.word	0x20001210
 8000ee0:	20003a73 	.word	0x20003a73
 8000ee4:	20003a6b 	.word	0x20003a6b
 8000ee8:	20003a72 	.word	0x20003a72
 8000eec:	20000c10 	.word	0x20000c10
 8000ef0:	20001f3a 	.word	0x20001f3a
 8000ef4:	20001f28 	.word	0x20001f28
 8000ef8:	20002140 	.word	0x20002140
 8000efc:	20003a71 	.word	0x20003a71
 8000f00:	20000370 	.word	0x20000370
 8000f04:	0800fc58 	.word	0x0800fc58
 8000f08:	20000546 	.word	0x20000546
 8000f0c:	200006c6 	.word	0x200006c6
								{
									if(lr.dataRCV_hld[i] != '.')
 8000f10:	4a58      	ldr	r2, [pc, #352]	; (8001074 <main+0x9e0>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	4413      	add	r3, r2
 8000f16:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b2e      	cmp	r3, #46	; 0x2e
 8000f1e:	d00d      	beq.n	8000f3c <main+0x8a8>
									{
										num[j]=lr.dataRCV_hld[i];
 8000f20:	4a54      	ldr	r2, [pc, #336]	; (8001074 <main+0x9e0>)
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	4413      	add	r3, r2
 8000f26:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000f2a:	7819      	ldrb	r1, [r3, #0]
 8000f2c:	1d3a      	adds	r2, r7, #4
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4413      	add	r3, r2
 8000f32:	460a      	mov	r2, r1
 8000f34:	701a      	strb	r2, [r3, #0]
										j++;
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	613b      	str	r3, [r7, #16]
									}
									i++;
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	61bb      	str	r3, [r7, #24]
								while(lr.dataRCV_hld[i] != ';')
 8000f42:	4a4c      	ldr	r2, [pc, #304]	; (8001074 <main+0x9e0>)
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	4413      	add	r3, r2
 8000f48:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b3b      	cmp	r3, #59	; 0x3b
 8000f50:	d1de      	bne.n	8000f10 <main+0x87c>
								}
							num[j]='\0';
 8000f52:	1d3a      	adds	r2, r7, #4
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4413      	add	r3, r2
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
							ModBUS_F03_Assign(&mb_eth,n,atoi(num,10));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	b2dc      	uxtb	r4, r3
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	210a      	movs	r1, #10
 8000f64:	4618      	mov	r0, r3
 8000f66:	f00d fb6a 	bl	800e63e <atoi>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4621      	mov	r1, r4
 8000f72:	4841      	ldr	r0, [pc, #260]	; (8001078 <main+0x9e4>)
 8000f74:	f00b f85d 	bl	800c032 <ModBUS_F03_Assign>
							n++;//Incremento posición  a almacenar
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
	  					while(i < lnn-1)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	3b01      	subs	r3, #1
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	db82      	blt.n	8000e8e <main+0x7fa>
	  					}
	  				}
	  				}

	  			if(lr.tmr_dly_ON==1)
 8000f88:	4b3a      	ldr	r3, [pc, #232]	; (8001074 <main+0x9e0>)
 8000f8a:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d147      	bne.n	8001022 <main+0x98e>
	  				{
	  					lr.tmr_dly_ON=0;
 8000f92:	4b38      	ldr	r3, [pc, #224]	; (8001074 <main+0x9e0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
	  					LoRa_reset_sndTIMER(&lr,3000);
 8000f9a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000f9e:	4835      	ldr	r0, [pc, #212]	; (8001074 <main+0x9e0>)
 8000fa0:	f00a fad0 	bl	800b544 <LoRa_reset_sndTIMER>
						lr.dest_address[0]='\0';
 8000fa4:	4b33      	ldr	r3, [pc, #204]	; (8001074 <main+0x9e0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	759a      	strb	r2, [r3, #22]
						lr.txbuff[0]='\0';
 8000faa:	4b32      	ldr	r3, [pc, #200]	; (8001074 <main+0x9e0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
			  			strncat(lr.dest_address,"1",1);
 8000fb2:	4832      	ldr	r0, [pc, #200]	; (800107c <main+0x9e8>)
 8000fb4:	f7ff f91e 	bl	80001f4 <strlen>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	; (800107c <main+0x9e8>)
 8000fbe:	4413      	add	r3, r2
 8000fc0:	492f      	ldr	r1, [pc, #188]	; (8001080 <main+0x9ec>)
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	8013      	strh	r3, [r2, #0]
			  			strncat(lr.txbuff,"prueba de envio de mensaje de texto",strlen("prueba de envio de mensaje de texto"));
 8000fca:	482e      	ldr	r0, [pc, #184]	; (8001084 <main+0x9f0>)
 8000fcc:	f7ff f912 	bl	80001f4 <strlen>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <main+0x9f0>)
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a2b      	ldr	r2, [pc, #172]	; (8001088 <main+0x9f4>)
 8000fda:	4614      	mov	r4, r2
 8000fdc:	469c      	mov	ip, r3
 8000fde:	f104 0e20 	add.w	lr, r4, #32
 8000fe2:	4665      	mov	r5, ip
 8000fe4:	4626      	mov	r6, r4
 8000fe6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000fe8:	6028      	str	r0, [r5, #0]
 8000fea:	6069      	str	r1, [r5, #4]
 8000fec:	60aa      	str	r2, [r5, #8]
 8000fee:	60eb      	str	r3, [r5, #12]
 8000ff0:	3410      	adds	r4, #16
 8000ff2:	f10c 0c10 	add.w	ip, ip, #16
 8000ff6:	4574      	cmp	r4, lr
 8000ff8:	d1f3      	bne.n	8000fe2 <main+0x94e>
 8000ffa:	4663      	mov	r3, ip
 8000ffc:	4622      	mov	r2, r4
 8000ffe:	6810      	ldr	r0, [r2, #0]
 8001000:	6018      	str	r0, [r3, #0]
			  			lr.txitems=strlen("prueba de envio de mensaje de texto");
 8001002:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <main+0x9e0>)
 8001004:	2223      	movs	r2, #35	; 0x23
 8001006:	f8c3 27e0 	str.w	r2, [r3, #2016]	; 0x7e0
		  				lr.estado=_SENT;										//
 800100a:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <main+0x9e0>)
 800100c:	2214      	movs	r2, #20
 800100e:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
			  			error=LoRa_Send(&lr,&huart2);
 8001012:	491e      	ldr	r1, [pc, #120]	; (800108c <main+0x9f8>)
 8001014:	4817      	ldr	r0, [pc, #92]	; (8001074 <main+0x9e0>)
 8001016:	f00a f9d9 	bl	800b3cc <LoRa_Send>
 800101a:	4603      	mov	r3, r0
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <main+0x9fc>)
 8001020:	701a      	strb	r2, [r3, #0]
	  				}
	  		}

	  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <main+0xa00>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d108      	bne.n	800103c <main+0x9a8>
	  			{
	  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 800102a:	2201      	movs	r2, #1
 800102c:	491a      	ldr	r1, [pc, #104]	; (8001098 <main+0xa04>)
 800102e:	481b      	ldr	r0, [pc, #108]	; (800109c <main+0xa08>)
 8001030:	f008 fbfa 	bl	8009828 <WiFi_Conn_ND>
 8001034:	4603      	mov	r3, r0
 8001036:	b2da      	uxtb	r2, r3
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <main+0xa0c>)
 800103a:	701a      	strb	r2, [r3, #0]
	  		// 		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	  		// 		ITM0_Write("\r\n ESP WAIT 5s AFT RST\r\n",strlen("\r\n ESP WAIT 5s AFT RST\r\n"));
	  		// 		HAL_Delay(5000);//210419
	  		// 		esp_restart=0;
	  		// 	}
	  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <main+0xa10>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b01      	cmp	r3, #1
 8001042:	f47f add4 	bne.w	8000bee <main+0x55a>
	  			{

	  				HW_RESET(&wf);
 8001046:	4815      	ldr	r0, [pc, #84]	; (800109c <main+0xa08>)
 8001048:	f005 fb52 	bl	80066f0 <HW_RESET>
	  				HAL_Delay(5000);//210419
 800104c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001050:	f001 fe34 	bl	8002cbc <HAL_Delay>
	  				esp_restart=0;
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <main+0xa10>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
	  				wf._estado=0;
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <main+0xa08>)
 800105c:	2200      	movs	r2, #0
 800105e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  				wf._estado_conexion=100;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <main+0xa08>)
 8001064:	2264      	movs	r2, #100	; 0x64
 8001066:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  				ConectarWIFI(&wf);
 800106a:	480c      	ldr	r0, [pc, #48]	; (800109c <main+0xa08>)
 800106c:	f005 fb94 	bl	8006798 <ConectarWIFI>
	  	  if (ESP_HW_Init==1)
 8001070:	e5bd      	b.n	8000bee <main+0x55a>
 8001072:	bf00      	nop
 8001074:	20000370 	.word	0x20000370
 8001078:	200018d8 	.word	0x200018d8
 800107c:	20000386 	.word	0x20000386
 8001080:	0800fc5c 	.word	0x0800fc5c
 8001084:	2000084c 	.word	0x2000084c
 8001088:	0800fc60 	.word	0x0800fc60
 800108c:	200002e0 	.word	0x200002e0
 8001090:	20000b74 	.word	0x20000b74
 8001094:	20003a6b 	.word	0x20003a6b
 8001098:	2000029c 	.word	0x2000029c
 800109c:	20000b78 	.word	0x20000b78
 80010a0:	20003a75 	.word	0x20003a75
 80010a4:	20003a74 	.word	0x20003a74

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b094      	sub	sp, #80	; 0x50
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0320 	add.w	r3, r7, #32
 80010b2:	2230      	movs	r2, #48	; 0x30
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f00d fcc1 	bl	800ea3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <SystemClock_Config+0xc8>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	4a26      	ldr	r2, [pc, #152]	; (8001170 <SystemClock_Config+0xc8>)
 80010d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010da:	6413      	str	r3, [r2, #64]	; 0x40
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <SystemClock_Config+0xc8>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e8:	2300      	movs	r3, #0
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	4b21      	ldr	r3, [pc, #132]	; (8001174 <SystemClock_Config+0xcc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a20      	ldr	r2, [pc, #128]	; (8001174 <SystemClock_Config+0xcc>)
 80010f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <SystemClock_Config+0xcc>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001104:	2301      	movs	r3, #1
 8001106:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001108:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110e:	2302      	movs	r3, #2
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001112:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001116:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001118:	230c      	movs	r3, #12
 800111a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800111c:	2360      	movs	r3, #96	; 0x60
 800111e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001120:	2302      	movs	r3, #2
 8001122:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001124:	2304      	movs	r3, #4
 8001126:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001128:	f107 0320 	add.w	r3, r7, #32
 800112c:	4618      	mov	r0, r3
 800112e:	f002 fa5b 	bl	80035e8 <HAL_RCC_OscConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001138:	f001 fa3a 	bl	80025b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113c:	230f      	movs	r3, #15
 800113e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001140:	2302      	movs	r3, #2
 8001142:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	2103      	movs	r1, #3
 8001158:	4618      	mov	r0, r3
 800115a:	f002 fcbd 	bl	8003ad8 <HAL_RCC_ClockConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001164:	f001 fa24 	bl	80025b0 <Error_Handler>
  }
}
 8001168:	bf00      	nop
 800116a:	3750      	adds	r7, #80	; 0x50
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40023800 	.word	0x40023800
 8001174:	40007000 	.word	0x40007000

08001178 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_SPI1_Init+0x64>)
 800117e:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <MX_SPI1_Init+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_SPI1_Init+0x64>)
 8001184:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001188:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_SPI1_Init+0x64>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_SPI1_Init+0x64>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_SPI1_Init+0x64>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_SPI1_Init+0x64>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_SPI1_Init+0x64>)
 80011a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_SPI1_Init+0x64>)
 80011ac:	2210      	movs	r2, #16
 80011ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MX_SPI1_Init+0x64>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_SPI1_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <MX_SPI1_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_SPI1_Init+0x64>)
 80011c4:	220a      	movs	r2, #10
 80011c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011c8:	4804      	ldr	r0, [pc, #16]	; (80011dc <MX_SPI1_Init+0x64>)
 80011ca:	f002 fe65 	bl	8003e98 <HAL_SPI_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011d4:	f001 f9ec 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200001b4 	.word	0x200001b4
 80011e0:	40013000 	.word	0x40013000

080011e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08e      	sub	sp, #56	; 0x38
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
 8001210:	615a      	str	r2, [r3, #20]
 8001212:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001214:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <MX_TIM2_Init+0xf4>)
 8001216:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800121a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 800121c:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <MX_TIM2_Init+0xf4>)
 800121e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001222:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <MX_TIM2_Init+0xf4>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 800122a:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <MX_TIM2_Init+0xf4>)
 800122c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001230:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <MX_TIM2_Init+0xf4>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001238:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <MX_TIM2_Init+0xf4>)
 800123a:	2280      	movs	r2, #128	; 0x80
 800123c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800123e:	4826      	ldr	r0, [pc, #152]	; (80012d8 <MX_TIM2_Init+0xf4>)
 8001240:	f003 f920 	bl	8004484 <HAL_TIM_Base_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800124a:	f001 f9b1 	bl	80025b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001254:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001258:	4619      	mov	r1, r3
 800125a:	481f      	ldr	r0, [pc, #124]	; (80012d8 <MX_TIM2_Init+0xf4>)
 800125c:	f003 fd28 	bl	8004cb0 <HAL_TIM_ConfigClockSource>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001266:	f001 f9a3 	bl	80025b0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800126a:	481b      	ldr	r0, [pc, #108]	; (80012d8 <MX_TIM2_Init+0xf4>)
 800126c:	f003 f959 	bl	8004522 <HAL_TIM_OC_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001276:	f001 f99b 	bl	80025b0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 800127a:	2108      	movs	r1, #8
 800127c:	4816      	ldr	r0, [pc, #88]	; (80012d8 <MX_TIM2_Init+0xf4>)
 800127e:	f003 fb59 	bl	8004934 <HAL_TIM_OnePulse_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001288:	f001 f992 	bl	80025b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001294:	f107 0320 	add.w	r3, r7, #32
 8001298:	4619      	mov	r1, r3
 800129a:	480f      	ldr	r0, [pc, #60]	; (80012d8 <MX_TIM2_Init+0xf4>)
 800129c:	f004 f8c4 	bl	8005428 <HAL_TIMEx_MasterConfigSynchronization>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80012a6:	f001 f983 	bl	80025b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 80012aa:	2320      	movs	r3, #32
 80012ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2200      	movs	r2, #0
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_TIM2_Init+0xf4>)
 80012c2:	f003 fc99 	bl	8004bf8 <HAL_TIM_OC_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80012cc:	f001 f970 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	3738      	adds	r7, #56	; 0x38
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000020c 	.word	0x2000020c

080012dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08e      	sub	sp, #56	; 0x38
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
 8001308:	615a      	str	r2, [r3, #20]
 800130a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800130c:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <MX_TIM3_Init+0xf0>)
 800130e:	4a30      	ldr	r2, [pc, #192]	; (80013d0 <MX_TIM3_Init+0xf4>)
 8001310:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8001312:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <MX_TIM3_Init+0xf0>)
 8001314:	2264      	movs	r2, #100	; 0x64
 8001316:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001318:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <MX_TIM3_Init+0xf0>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 800131e:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <MX_TIM3_Init+0xf0>)
 8001320:	2296      	movs	r2, #150	; 0x96
 8001322:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001324:	4b29      	ldr	r3, [pc, #164]	; (80013cc <MX_TIM3_Init+0xf0>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800132a:	4b28      	ldr	r3, [pc, #160]	; (80013cc <MX_TIM3_Init+0xf0>)
 800132c:	2280      	movs	r2, #128	; 0x80
 800132e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001330:	4826      	ldr	r0, [pc, #152]	; (80013cc <MX_TIM3_Init+0xf0>)
 8001332:	f003 f8a7 	bl	8004484 <HAL_TIM_Base_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800133c:	f001 f938 	bl	80025b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800134a:	4619      	mov	r1, r3
 800134c:	481f      	ldr	r0, [pc, #124]	; (80013cc <MX_TIM3_Init+0xf0>)
 800134e:	f003 fcaf 	bl	8004cb0 <HAL_TIM_ConfigClockSource>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001358:	f001 f92a 	bl	80025b0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800135c:	481b      	ldr	r0, [pc, #108]	; (80013cc <MX_TIM3_Init+0xf0>)
 800135e:	f003 f8e0 	bl	8004522 <HAL_TIM_OC_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001368:	f001 f922 	bl	80025b0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 800136c:	2108      	movs	r1, #8
 800136e:	4817      	ldr	r0, [pc, #92]	; (80013cc <MX_TIM3_Init+0xf0>)
 8001370:	f003 fae0 	bl	8004934 <HAL_TIM_OnePulse_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 800137a:	f001 f919 	bl	80025b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001386:	f107 0320 	add.w	r3, r7, #32
 800138a:	4619      	mov	r1, r3
 800138c:	480f      	ldr	r0, [pc, #60]	; (80013cc <MX_TIM3_Init+0xf0>)
 800138e:	f004 f84b 	bl	8005428 <HAL_TIMEx_MasterConfigSynchronization>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001398:	f001 f90a 	bl	80025b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 800139c:	2320      	movs	r3, #32
 800139e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	2200      	movs	r2, #0
 80013b0:	4619      	mov	r1, r3
 80013b2:	4806      	ldr	r0, [pc, #24]	; (80013cc <MX_TIM3_Init+0xf0>)
 80013b4:	f003 fc20 	bl	8004bf8 <HAL_TIM_OC_ConfigChannel>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80013be:	f001 f8f7 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	3738      	adds	r7, #56	; 0x38
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000254 	.word	0x20000254
 80013d0:	40000400 	.word	0x40000400

080013d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013da:	4a12      	ldr	r2, [pc, #72]	; (8001424 <MX_USART1_UART_Init+0x50>)
 80013dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013fa:	220c      	movs	r2, #12
 80013fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 800140c:	f004 f88e 	bl	800552c <HAL_UART_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001416:	f001 f8cb 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2000029c 	.word	0x2000029c
 8001424:	40011000 	.word	0x40011000

08001428 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_USART2_UART_Init+0x4c>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <MX_USART2_UART_Init+0x50>)
 8001430:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <MX_USART2_UART_Init+0x4c>)
 8001434:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001438:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_USART2_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_USART2_UART_Init+0x4c>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <MX_USART2_UART_Init+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_USART2_UART_Init+0x4c>)
 800144e:	220c      	movs	r2, #12
 8001450:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <MX_USART2_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_USART2_UART_Init+0x4c>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_USART2_UART_Init+0x4c>)
 8001460:	f004 f864 	bl	800552c <HAL_UART_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800146a:	f001 f8a1 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200002e0 	.word	0x200002e0
 8001478:	40004400 	.word	0x40004400

0800147c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_USART6_UART_Init+0x4c>)
 8001482:	4a12      	ldr	r2, [pc, #72]	; (80014cc <MX_USART6_UART_Init+0x50>)
 8001484:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <MX_USART6_UART_Init+0x4c>)
 8001488:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800148c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_USART6_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_USART6_UART_Init+0x4c>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <MX_USART6_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_USART6_UART_Init+0x4c>)
 80014a2:	220c      	movs	r2, #12
 80014a4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <MX_USART6_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_USART6_UART_Init+0x4c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_USART6_UART_Init+0x4c>)
 80014b4:	f004 f83a 	bl	800552c <HAL_UART_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80014be:	f001 f877 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000324 	.word	0x20000324
 80014cc:	40011400 	.word	0x40011400

080014d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	4b3f      	ldr	r3, [pc, #252]	; (80015e8 <MX_GPIO_Init+0x118>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a3e      	ldr	r2, [pc, #248]	; (80015e8 <MX_GPIO_Init+0x118>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b3c      	ldr	r3, [pc, #240]	; (80015e8 <MX_GPIO_Init+0x118>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b38      	ldr	r3, [pc, #224]	; (80015e8 <MX_GPIO_Init+0x118>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a37      	ldr	r2, [pc, #220]	; (80015e8 <MX_GPIO_Init+0x118>)
 800150c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b35      	ldr	r3, [pc, #212]	; (80015e8 <MX_GPIO_Init+0x118>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <MX_GPIO_Init+0x118>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a30      	ldr	r2, [pc, #192]	; (80015e8 <MX_GPIO_Init+0x118>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b2e      	ldr	r3, [pc, #184]	; (80015e8 <MX_GPIO_Init+0x118>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <MX_GPIO_Init+0x118>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a29      	ldr	r2, [pc, #164]	; (80015e8 <MX_GPIO_Init+0x118>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <MX_GPIO_Init+0x118>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800155c:	4823      	ldr	r0, [pc, #140]	; (80015ec <MX_GPIO_Init+0x11c>)
 800155e:	f002 f80f 	bl	8003580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|WIFI_EN_Pin, GPIO_PIN_SET);
 8001562:	2201      	movs	r2, #1
 8001564:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001568:	4821      	ldr	r0, [pc, #132]	; (80015f0 <MX_GPIO_Init+0x120>)
 800156a:	f002 f809 	bl	8003580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 800156e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001574:	2301      	movs	r3, #1
 8001576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4819      	ldr	r0, [pc, #100]	; (80015ec <MX_GPIO_Init+0x11c>)
 8001588:	f001 fd92 	bl	80030b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_BTN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin;
 800158c:	2301      	movs	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001590:	2300      	movs	r3, #0
 8001592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_BTN_GPIO_Port, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	4814      	ldr	r0, [pc, #80]	; (80015f0 <MX_GPIO_Init+0x120>)
 80015a0:	f001 fd86 	bl	80030b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80015a4:	2310      	movs	r3, #16
 80015a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	480d      	ldr	r0, [pc, #52]	; (80015f0 <MX_GPIO_Init+0x120>)
 80015bc:	f001 fd78 	bl	80030b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_EN_Pin */
  GPIO_InitStruct.Pin = WIFI_EN_Pin;
 80015c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_EN_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_GPIO_Init+0x120>)
 80015da:	f001 fd69 	bl	80030b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	; 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020800 	.word	0x40020800
 80015f0:	40020000 	.word	0x40020000

080015f4 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	e009      	b.n	8001618 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff f819 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3301      	adds	r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	429a      	cmp	r2, r3
 800161e:	dbf1      	blt.n	8001604 <ITM0_Write+0x10>
  }
  return len;
 8001620:	683b      	ldr	r3, [r7, #0]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <SysTick_Handler>:

void SysTick_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 8001632:	4b68      	ldr	r3, [pc, #416]	; (80017d4 <SysTick_Handler+0x1a8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	3301      	adds	r3, #1
 8001638:	4a66      	ldr	r2, [pc, #408]	; (80017d4 <SysTick_Handler+0x1a8>)
 800163a:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 800163c:	4b66      	ldr	r3, [pc, #408]	; (80017d8 <SysTick_Handler+0x1ac>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	4a65      	ldr	r2, [pc, #404]	; (80017d8 <SysTick_Handler+0x1ac>)
 8001644:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 8001646:	4b65      	ldr	r3, [pc, #404]	; (80017dc <SysTick_Handler+0x1b0>)
 8001648:	7a1b      	ldrb	r3, [r3, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d004      	beq.n	8001658 <SysTick_Handler+0x2c>
 800164e:	4b64      	ldr	r3, [pc, #400]	; (80017e0 <SysTick_Handler+0x1b4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	3301      	adds	r3, #1
 8001654:	4a62      	ldr	r2, [pc, #392]	; (80017e0 <SysTick_Handler+0x1b4>)
 8001656:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 8001658:	4b60      	ldr	r3, [pc, #384]	; (80017dc <SysTick_Handler+0x1b0>)
 800165a:	7a1b      	ldrb	r3, [r3, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00c      	beq.n	800167a <SysTick_Handler+0x4e>
 8001660:	4b5e      	ldr	r3, [pc, #376]	; (80017dc <SysTick_Handler+0x1b0>)
 8001662:	88db      	ldrh	r3, [r3, #6]
 8001664:	461a      	mov	r2, r3
 8001666:	4b5e      	ldr	r3, [pc, #376]	; (80017e0 <SysTick_Handler+0x1b4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	da05      	bge.n	800167a <SysTick_Handler+0x4e>
		{
			mb_eth._w_answer=0;
 800166e:	4b5b      	ldr	r3, [pc, #364]	; (80017dc <SysTick_Handler+0x1b0>)
 8001670:	2200      	movs	r2, #0
 8001672:	721a      	strb	r2, [r3, #8]
			MB_TOUT_ticks=0;
 8001674:	4b5a      	ldr	r3, [pc, #360]	; (80017e0 <SysTick_Handler+0x1b4>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
		esp_restart=1;
	}*/

// ENVIO DATOS LoRa ---------------------------------------------------------------//

	if(lr.tmr_dly_en==1)
 800167a:	4b5a      	ldr	r3, [pc, #360]	; (80017e4 <SysTick_Handler+0x1b8>)
 800167c:	f893 37ed 	ldrb.w	r3, [r3, #2029]	; 0x7ed
 8001680:	2b01      	cmp	r3, #1
 8001682:	d116      	bne.n	80016b2 <SysTick_Handler+0x86>
	{
		lr.tmr_dlyCNT++;
 8001684:	4b57      	ldr	r3, [pc, #348]	; (80017e4 <SysTick_Handler+0x1b8>)
 8001686:	f8d3 37f4 	ldr.w	r3, [r3, #2036]	; 0x7f4
 800168a:	3301      	adds	r3, #1
 800168c:	4a55      	ldr	r2, [pc, #340]	; (80017e4 <SysTick_Handler+0x1b8>)
 800168e:	f8c2 37f4 	str.w	r3, [r2, #2036]	; 0x7f4
		if(lr.tmr_dlyCNT > lr.tmr_dly)
 8001692:	4b54      	ldr	r3, [pc, #336]	; (80017e4 <SysTick_Handler+0x1b8>)
 8001694:	f8d3 27f4 	ldr.w	r2, [r3, #2036]	; 0x7f4
 8001698:	4b52      	ldr	r3, [pc, #328]	; (80017e4 <SysTick_Handler+0x1b8>)
 800169a:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
 800169e:	429a      	cmp	r2, r3
 80016a0:	dd07      	ble.n	80016b2 <SysTick_Handler+0x86>
		{
			lr.tmr_dly_ON=1;
 80016a2:	4b50      	ldr	r3, [pc, #320]	; (80017e4 <SysTick_Handler+0x1b8>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
			lr.tmr_dly_en=0;
 80016aa:	4b4e      	ldr	r3, [pc, #312]	; (80017e4 <SysTick_Handler+0x1b8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		}
	}
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 80016b2:	4b4d      	ldr	r3, [pc, #308]	; (80017e8 <SysTick_Handler+0x1bc>)
 80016b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016b8:	f240 2261 	movw	r2, #609	; 0x261
 80016bc:	4293      	cmp	r3, r2
 80016be:	d005      	beq.n	80016cc <SysTick_Handler+0xa0>
 80016c0:	4b49      	ldr	r3, [pc, #292]	; (80017e8 <SysTick_Handler+0x1bc>)
 80016c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016c6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80016ca:	d109      	bne.n	80016e0 <SysTick_Handler+0xb4>
 80016cc:	4b46      	ldr	r3, [pc, #280]	; (80017e8 <SysTick_Handler+0x1bc>)
 80016ce:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d104      	bne.n	80016e0 <SysTick_Handler+0xb4>
 80016d6:	4b45      	ldr	r3, [pc, #276]	; (80017ec <SysTick_Handler+0x1c0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	3301      	adds	r3, #1
 80016dc:	4a43      	ldr	r2, [pc, #268]	; (80017ec <SysTick_Handler+0x1c0>)
 80016de:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 2000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;
 80016e0:	4b42      	ldr	r3, [pc, #264]	; (80017ec <SysTick_Handler+0x1c0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016e8:	db0c      	blt.n	8001704 <SysTick_Handler+0xd8>
 80016ea:	4b3f      	ldr	r3, [pc, #252]	; (80017e8 <SysTick_Handler+0x1bc>)
 80016ec:	f8d3 3ab4 	ldr.w	r3, [r3, #2740]	; 0xab4
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d007      	beq.n	8001704 <SysTick_Handler+0xd8>
 80016f4:	4b3c      	ldr	r3, [pc, #240]	; (80017e8 <SysTick_Handler+0x1bc>)
 80016f6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d102      	bne.n	8001704 <SysTick_Handler+0xd8>
 80016fe:	4b3c      	ldr	r3, [pc, #240]	; (80017f0 <SysTick_Handler+0x1c4>)
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S0_status == 0)
 8001704:	4b3b      	ldr	r3, [pc, #236]	; (80017f4 <SysTick_Handler+0x1c8>)
 8001706:	7b9b      	ldrb	r3, [r3, #14]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10e      	bne.n	800172a <SysTick_Handler+0xfe>
	{
		ETH.ETH_WDG++;
 800170c:	4b39      	ldr	r3, [pc, #228]	; (80017f4 <SysTick_Handler+0x1c8>)
 800170e:	899b      	ldrh	r3, [r3, #12]
 8001710:	3301      	adds	r3, #1
 8001712:	b29a      	uxth	r2, r3
 8001714:	4b37      	ldr	r3, [pc, #220]	; (80017f4 <SysTick_Handler+0x1c8>)
 8001716:	819a      	strh	r2, [r3, #12]
		if (ETH.ETH_WDG>=64000)
 8001718:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <SysTick_Handler+0x1c8>)
 800171a:	899b      	ldrh	r3, [r3, #12]
 800171c:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001720:	d303      	bcc.n	800172a <SysTick_Handler+0xfe>
		{
			ETH.ETH_WDG=64000;
 8001722:	4b34      	ldr	r3, [pc, #208]	; (80017f4 <SysTick_Handler+0x1c8>)
 8001724:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001728:	819a      	strh	r2, [r3, #12]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <SysTick_Handler+0x1a8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2b64      	cmp	r3, #100	; 0x64
 8001730:	f040 8420 	bne.w	8001f74 <SysTick_Handler+0x948>
  {
	  dbgn++;
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <SysTick_Handler+0x1cc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	3301      	adds	r3, #1
 800173a:	4a2f      	ldr	r2, [pc, #188]	; (80017f8 <SysTick_Handler+0x1cc>)
 800173c:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 800173e:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <SysTick_Handler+0x1a8>)
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 8001744:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <SysTick_Handler+0x1d0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	4a2c      	ldr	r2, [pc, #176]	; (80017fc <SysTick_Handler+0x1d0>)
 800174c:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 800174e:	4b2c      	ldr	r3, [pc, #176]	; (8001800 <SysTick_Handler+0x1d4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001756:	d102      	bne.n	800175e <SysTick_Handler+0x132>
 8001758:	4b29      	ldr	r3, [pc, #164]	; (8001800 <SysTick_Handler+0x1d4>)
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 800175e:	4b29      	ldr	r3, [pc, #164]	; (8001804 <SysTick_Handler+0x1d8>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d104      	bne.n	8001770 <SysTick_Handler+0x144>
 8001766:	4b26      	ldr	r3, [pc, #152]	; (8001800 <SysTick_Handler+0x1d4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	4a24      	ldr	r2, [pc, #144]	; (8001800 <SysTick_Handler+0x1d4>)
 800176e:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 8001770:	4b23      	ldr	r3, [pc, #140]	; (8001800 <SysTick_Handler+0x1d4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b64      	cmp	r3, #100	; 0x64
 8001776:	d102      	bne.n	800177e <SysTick_Handler+0x152>
 8001778:	4b22      	ldr	r3, [pc, #136]	; (8001804 <SysTick_Handler+0x1d8>)
 800177a:	2201      	movs	r2, #1
 800177c:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 800177e:	4b21      	ldr	r3, [pc, #132]	; (8001804 <SysTick_Handler+0x1d8>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d104      	bne.n	8001790 <SysTick_Handler+0x164>
 8001786:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <SysTick_Handler+0x1d4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	3b01      	subs	r3, #1
 800178c:	4a1c      	ldr	r2, [pc, #112]	; (8001800 <SysTick_Handler+0x1d4>)
 800178e:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <SysTick_Handler+0x1d4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <SysTick_Handler+0x172>
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <SysTick_Handler+0x1d8>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]


	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800179e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a2:	4819      	ldr	r0, [pc, #100]	; (8001808 <SysTick_Handler+0x1dc>)
 80017a4:	f001 ff05 	bl	80035b2 <HAL_GPIO_TogglePin>
	  if(spi_no_debug)
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <SysTick_Handler+0x1e0>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 83d1 	beq.w	8001f54 <SysTick_Handler+0x928>
	  	  {
	  if(SPI_READ_EN)
 80017b2:	4b17      	ldr	r3, [pc, #92]	; (8001810 <SysTick_Handler+0x1e4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 83d0 	beq.w	8001f5c <SysTick_Handler+0x930>
	  {
	     ETH.S0_status=eth_rd_SOCKET_STAT(&ETH,0);
 80017bc:	2100      	movs	r1, #0
 80017be:	480d      	ldr	r0, [pc, #52]	; (80017f4 <SysTick_Handler+0x1c8>)
 80017c0:	f00c f912 	bl	800d9e8 <eth_rd_SOCKET_STAT>
 80017c4:	4603      	mov	r3, r0
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <SysTick_Handler+0x1c8>)
 80017ca:	739a      	strb	r2, [r3, #14]

		  switch(ETH.S0_status)	//Check Socket status
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <SysTick_Handler+0x1c8>)
 80017ce:	7b9b      	ldrb	r3, [r3, #14]
 80017d0:	e020      	b.n	8001814 <SysTick_Handler+0x1e8>
 80017d2:	bf00      	nop
 80017d4:	20000368 	.word	0x20000368
 80017d8:	20004494 	.word	0x20004494
 80017dc:	200018d8 	.word	0x200018d8
 80017e0:	2000449c 	.word	0x2000449c
 80017e4:	20000370 	.word	0x20000370
 80017e8:	20000b78 	.word	0x20000b78
 80017ec:	2000297c 	.word	0x2000297c
 80017f0:	20002979 	.word	0x20002979
 80017f4:	20002980 	.word	0x20002980
 80017f8:	200044c0 	.word	0x200044c0
 80017fc:	2000036c 	.word	0x2000036c
 8001800:	20004498 	.word	0x20004498
 8001804:	20003a76 	.word	0x20003a76
 8001808:	40020800 	.word	0x40020800
 800180c:	20003a68 	.word	0x20003a68
 8001810:	20003a78 	.word	0x20003a78
 8001814:	2b5f      	cmp	r3, #95	; 0x5f
 8001816:	f200 83a6 	bhi.w	8001f66 <SysTick_Handler+0x93a>
 800181a:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <SysTick_Handler+0x1f4>)
 800181c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001820:	080019a1 	.word	0x080019a1
 8001824:	08001f67 	.word	0x08001f67
 8001828:	08001f67 	.word	0x08001f67
 800182c:	08001f67 	.word	0x08001f67
 8001830:	08001f67 	.word	0x08001f67
 8001834:	08001f67 	.word	0x08001f67
 8001838:	08001f67 	.word	0x08001f67
 800183c:	08001f67 	.word	0x08001f67
 8001840:	08001f67 	.word	0x08001f67
 8001844:	08001f67 	.word	0x08001f67
 8001848:	08001f67 	.word	0x08001f67
 800184c:	08001f67 	.word	0x08001f67
 8001850:	08001f67 	.word	0x08001f67
 8001854:	08001f67 	.word	0x08001f67
 8001858:	08001f67 	.word	0x08001f67
 800185c:	08001f67 	.word	0x08001f67
 8001860:	08001f67 	.word	0x08001f67
 8001864:	08001f67 	.word	0x08001f67
 8001868:	08001f67 	.word	0x08001f67
 800186c:	080019d9 	.word	0x080019d9
 8001870:	08001a2b 	.word	0x08001a2b
 8001874:	08001a43 	.word	0x08001a43
 8001878:	08001a5b 	.word	0x08001a5b
 800187c:	08001a73 	.word	0x08001a73
 8001880:	08001dcf 	.word	0x08001dcf
 8001884:	08001f67 	.word	0x08001f67
 8001888:	08001de7 	.word	0x08001de7
 800188c:	08001dff 	.word	0x08001dff
 8001890:	08001e3d 	.word	0x08001e3d
 8001894:	08001e7b 	.word	0x08001e7b
 8001898:	08001f67 	.word	0x08001f67
 800189c:	08001f67 	.word	0x08001f67
 80018a0:	08001f67 	.word	0x08001f67
 80018a4:	08001f67 	.word	0x08001f67
 80018a8:	08001e93 	.word	0x08001e93
 80018ac:	08001f67 	.word	0x08001f67
 80018b0:	08001f67 	.word	0x08001f67
 80018b4:	08001f67 	.word	0x08001f67
 80018b8:	08001f67 	.word	0x08001f67
 80018bc:	08001f67 	.word	0x08001f67
 80018c0:	08001f67 	.word	0x08001f67
 80018c4:	08001f67 	.word	0x08001f67
 80018c8:	08001f67 	.word	0x08001f67
 80018cc:	08001f67 	.word	0x08001f67
 80018d0:	08001f67 	.word	0x08001f67
 80018d4:	08001f67 	.word	0x08001f67
 80018d8:	08001f67 	.word	0x08001f67
 80018dc:	08001f67 	.word	0x08001f67
 80018e0:	08001f67 	.word	0x08001f67
 80018e4:	08001f67 	.word	0x08001f67
 80018e8:	08001f0d 	.word	0x08001f0d
 80018ec:	08001f67 	.word	0x08001f67
 80018f0:	08001f67 	.word	0x08001f67
 80018f4:	08001f67 	.word	0x08001f67
 80018f8:	08001f67 	.word	0x08001f67
 80018fc:	08001f67 	.word	0x08001f67
 8001900:	08001f67 	.word	0x08001f67
 8001904:	08001f67 	.word	0x08001f67
 8001908:	08001f67 	.word	0x08001f67
 800190c:	08001f67 	.word	0x08001f67
 8001910:	08001f67 	.word	0x08001f67
 8001914:	08001f67 	.word	0x08001f67
 8001918:	08001f67 	.word	0x08001f67
 800191c:	08001f67 	.word	0x08001f67
 8001920:	08001f67 	.word	0x08001f67
 8001924:	08001f67 	.word	0x08001f67
 8001928:	08001f25 	.word	0x08001f25
 800192c:	08001f67 	.word	0x08001f67
 8001930:	08001f67 	.word	0x08001f67
 8001934:	08001f67 	.word	0x08001f67
 8001938:	08001f67 	.word	0x08001f67
 800193c:	08001f67 	.word	0x08001f67
 8001940:	08001f67 	.word	0x08001f67
 8001944:	08001f67 	.word	0x08001f67
 8001948:	08001f67 	.word	0x08001f67
 800194c:	08001f67 	.word	0x08001f67
 8001950:	08001f67 	.word	0x08001f67
 8001954:	08001f67 	.word	0x08001f67
 8001958:	08001f67 	.word	0x08001f67
 800195c:	08001f67 	.word	0x08001f67
 8001960:	08001f67 	.word	0x08001f67
 8001964:	08001f67 	.word	0x08001f67
 8001968:	08001f67 	.word	0x08001f67
 800196c:	08001f67 	.word	0x08001f67
 8001970:	08001f67 	.word	0x08001f67
 8001974:	08001f67 	.word	0x08001f67
 8001978:	08001f67 	.word	0x08001f67
 800197c:	08001f67 	.word	0x08001f67
 8001980:	08001f67 	.word	0x08001f67
 8001984:	08001f67 	.word	0x08001f67
 8001988:	08001f67 	.word	0x08001f67
 800198c:	08001f67 	.word	0x08001f67
 8001990:	08001f67 	.word	0x08001f67
 8001994:	08001f67 	.word	0x08001f67
 8001998:	08001f67 	.word	0x08001f67
 800199c:	08001f3d 	.word	0x08001f3d
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 80019a0:	4b82      	ldr	r3, [pc, #520]	; (8001bac <SysTick_Handler+0x580>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <SysTick_Handler+0x384>
 80019a8:	2113      	movs	r1, #19
 80019aa:	4881      	ldr	r0, [pc, #516]	; (8001bb0 <SysTick_Handler+0x584>)
 80019ac:	f7ff fe22 	bl	80015f4 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH, 0 ,OPEN );
 80019b0:	2201      	movs	r2, #1
 80019b2:	2100      	movs	r1, #0
 80019b4:	487f      	ldr	r0, [pc, #508]	; (8001bb4 <SysTick_Handler+0x588>)
 80019b6:	f00b ff2d 	bl	800d814 <eth_wr_SOCKET_CMD>
					 // Si no tengo intento de ARP por 5 segundos vuelvo a inicializar
					 if(ETH.ETH_WDG>=5000)
 80019ba:	4b7e      	ldr	r3, [pc, #504]	; (8001bb4 <SysTick_Handler+0x588>)
 80019bc:	899b      	ldrh	r3, [r3, #12]
 80019be:	f241 3287 	movw	r2, #4999	; 0x1387
 80019c2:	4293      	cmp	r3, r2
 80019c4:	f240 82cc 	bls.w	8001f60 <SysTick_Handler+0x934>
					 {
						 eth_init(&ETH);
 80019c8:	487a      	ldr	r0, [pc, #488]	; (8001bb4 <SysTick_Handler+0x588>)
 80019ca:	f00b ff5f 	bl	800d88c <eth_init>

						 eth_socket_init(&ETH,0);
 80019ce:	2100      	movs	r1, #0
 80019d0:	4878      	ldr	r0, [pc, #480]	; (8001bb4 <SysTick_Handler+0x588>)
 80019d2:	f00b ffb1 	bl	800d938 <eth_socket_init>
					 }

				 }
			 break;
 80019d6:	e2c3      	b.n	8001f60 <SysTick_Handler+0x934>
			 case  SOCK_INIT :
				 {
					 if(ETH.S0_ENserver == 1)
 80019d8:	4b76      	ldr	r3, [pc, #472]	; (8001bb4 <SysTick_Handler+0x588>)
 80019da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d110      	bne.n	8001a08 <SysTick_Handler+0x3dc>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 80019e6:	4b71      	ldr	r3, [pc, #452]	; (8001bac <SysTick_Handler+0x580>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <SysTick_Handler+0x3ca>
 80019ee:	2111      	movs	r1, #17
 80019f0:	4871      	ldr	r0, [pc, #452]	; (8001bb8 <SysTick_Handler+0x58c>)
 80019f2:	f7ff fdff 	bl	80015f4 <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, 0, LISTEN );
 80019f6:	2202      	movs	r2, #2
 80019f8:	2100      	movs	r1, #0
 80019fa:	486e      	ldr	r0, [pc, #440]	; (8001bb4 <SysTick_Handler+0x588>)
 80019fc:	f00b ff0a 	bl	800d814 <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 8001a00:	4b6c      	ldr	r3, [pc, #432]	; (8001bb4 <SysTick_Handler+0x588>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	819a      	strh	r2, [r3, #12]
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 8001a06:	e2ae      	b.n	8001f66 <SysTick_Handler+0x93a>
						 	eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
 8001a08:	2204      	movs	r2, #4
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4869      	ldr	r0, [pc, #420]	; (8001bb4 <SysTick_Handler+0x588>)
 8001a0e:	f00b ff01 	bl	800d814 <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
 8001a12:	4b66      	ldr	r3, [pc, #408]	; (8001bac <SysTick_Handler+0x580>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <SysTick_Handler+0x3f6>
 8001a1a:	2115      	movs	r1, #21
 8001a1c:	4867      	ldr	r0, [pc, #412]	; (8001bbc <SysTick_Handler+0x590>)
 8001a1e:	f7ff fde9 	bl	80015f4 <ITM0_Write>
						 	ETH.ETH_WDG=0;
 8001a22:	4b64      	ldr	r3, [pc, #400]	; (8001bb4 <SysTick_Handler+0x588>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	819a      	strh	r2, [r3, #12]
			 break;
 8001a28:	e29d      	b.n	8001f66 <SysTick_Handler+0x93a>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 8001a2a:	4b60      	ldr	r3, [pc, #384]	; (8001bac <SysTick_Handler+0x580>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <SysTick_Handler+0x40e>
 8001a32:	2113      	movs	r1, #19
 8001a34:	4862      	ldr	r0, [pc, #392]	; (8001bc0 <SysTick_Handler+0x594>)
 8001a36:	f7ff fddd 	bl	80015f4 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a3a:	4b5e      	ldr	r3, [pc, #376]	; (8001bb4 <SysTick_Handler+0x588>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001a40:	e291      	b.n	8001f66 <SysTick_Handler+0x93a>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 8001a42:	4b5a      	ldr	r3, [pc, #360]	; (8001bac <SysTick_Handler+0x580>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <SysTick_Handler+0x426>
 8001a4a:	2114      	movs	r1, #20
 8001a4c:	485d      	ldr	r0, [pc, #372]	; (8001bc4 <SysTick_Handler+0x598>)
 8001a4e:	f7ff fdd1 	bl	80015f4 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a52:	4b58      	ldr	r3, [pc, #352]	; (8001bb4 <SysTick_Handler+0x588>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001a58:	e285      	b.n	8001f66 <SysTick_Handler+0x93a>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 8001a5a:	4b54      	ldr	r3, [pc, #336]	; (8001bac <SysTick_Handler+0x580>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <SysTick_Handler+0x43e>
 8001a62:	2114      	movs	r1, #20
 8001a64:	4858      	ldr	r0, [pc, #352]	; (8001bc8 <SysTick_Handler+0x59c>)
 8001a66:	f7ff fdc5 	bl	80015f4 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a6a:	4b52      	ldr	r3, [pc, #328]	; (8001bb4 <SysTick_Handler+0x588>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001a70:	e279      	b.n	8001f66 <SysTick_Handler+0x93a>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 8001a72:	4b4e      	ldr	r3, [pc, #312]	; (8001bac <SysTick_Handler+0x580>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <SysTick_Handler+0x456>
 8001a7a:	2118      	movs	r1, #24
 8001a7c:	4853      	ldr	r0, [pc, #332]	; (8001bcc <SysTick_Handler+0x5a0>)
 8001a7e:	f7ff fdb9 	bl	80015f4 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a82:	4b4c      	ldr	r3, [pc, #304]	; (8001bb4 <SysTick_Handler+0x588>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	819a      	strh	r2, [r3, #12]

					if (ETH.S0_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 8001a88:	4b4a      	ldr	r3, [pc, #296]	; (8001bb4 <SysTick_Handler+0x588>)
 8001a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	f040 80b0 	bne.w	8001bf8 <SysTick_Handler+0x5cc>
					{

							S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001a98:	2302      	movs	r3, #2
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	4b4c      	ldr	r3, [pc, #304]	; (8001bd0 <SysTick_Handler+0x5a4>)
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	230f      	movs	r3, #15
 8001aa2:	2226      	movs	r2, #38	; 0x26
 8001aa4:	2104      	movs	r1, #4
 8001aa6:	4843      	ldr	r0, [pc, #268]	; (8001bb4 <SysTick_Handler+0x588>)
 8001aa8:	f00b fd89 	bl	800d5be <SPI_ETH_REG>
 8001aac:	4603      	mov	r3, r0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4b48      	ldr	r3, [pc, #288]	; (8001bd4 <SysTick_Handler+0x5a8>)
 8001ab2:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001ab4:	4b47      	ldr	r3, [pc, #284]	; (8001bd4 <SysTick_Handler+0x5a8>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 8253 	beq.w	8001f64 <SysTick_Handler+0x938>
							{
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001abe:	4b45      	ldr	r3, [pc, #276]	; (8001bd4 <SysTick_Handler+0x5a8>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	4a45      	ldr	r2, [pc, #276]	; (8001bd8 <SysTick_Handler+0x5ac>)
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	483b      	ldr	r0, [pc, #236]	; (8001bb4 <SysTick_Handler+0x588>)
 8001ac8:	f00b ffc8 	bl	800da5c <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001acc:	4b42      	ldr	r3, [pc, #264]	; (8001bd8 <SysTick_Handler+0x5ac>)
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001ad6:	4837      	ldr	r0, [pc, #220]	; (8001bb4 <SysTick_Handler+0x588>)
 8001ad8:	f00b fde9 	bl	800d6ae <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001adc:	2240      	movs	r2, #64	; 0x40
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4834      	ldr	r0, [pc, #208]	; (8001bb4 <SysTick_Handler+0x588>)
 8001ae2:	f00b fe97 	bl	800d814 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001ae6:	bf00      	nop
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4832      	ldr	r0, [pc, #200]	; (8001bb4 <SysTick_Handler+0x588>)
 8001aec:	f00b ff99 	bl	800da22 <eth_rd_SOCKET_CMD>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f8      	bne.n	8001ae8 <SysTick_Handler+0x4bc>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001af6:	4b37      	ldr	r3, [pc, #220]	; (8001bd4 <SysTick_Handler+0x5a8>)
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	2300      	movs	r3, #0
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2300      	movs	r3, #0
 8001b02:	4936      	ldr	r1, [pc, #216]	; (8001bdc <SysTick_Handler+0x5b0>)
 8001b04:	4836      	ldr	r0, [pc, #216]	; (8001be0 <SysTick_Handler+0x5b4>)
 8001b06:	f00c fd4f 	bl	800e5a8 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001b0a:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <SysTick_Handler+0x5a8>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b34      	ldr	r3, [pc, #208]	; (8001be4 <SysTick_Handler+0x5b8>)
 8001b12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}					//Flag data received
 8001b16:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <SysTick_Handler+0x5a8>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <SysTick_Handler+0x4f8>
 8001b1e:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <SysTick_Handler+0x588>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	749a      	strb	r2, [r3, #18]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001b24:	4b2f      	ldr	r3, [pc, #188]	; (8001be4 <SysTick_Handler+0x5b8>)
 8001b26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	482c      	ldr	r0, [pc, #176]	; (8001be0 <SysTick_Handler+0x5b4>)
 8001b2e:	f00a fa31 	bl	800bf94 <ModBUS_Check>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00d      	beq.n	8001b54 <SysTick_Handler+0x528>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001b38:	482a      	ldr	r0, [pc, #168]	; (8001be4 <SysTick_Handler+0x5b8>)
 8001b3a:	f00a fb2f 	bl	800c19c <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 8001b3e:	4b29      	ldr	r3, [pc, #164]	; (8001be4 <SysTick_Handler+0x5b8>)
 8001b40:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8001b44:	2300      	movs	r3, #0
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2300      	movs	r3, #0
 8001b4a:	4927      	ldr	r1, [pc, #156]	; (8001be8 <SysTick_Handler+0x5bc>)
 8001b4c:	4823      	ldr	r0, [pc, #140]	; (8001bdc <SysTick_Handler+0x5b0>)
 8001b4e:	f00c fd2b 	bl	800e5a8 <CopiaVector>
 8001b52:	e007      	b.n	8001b64 <SysTick_Handler+0x538>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001b54:	4b15      	ldr	r3, [pc, #84]	; (8001bac <SysTick_Handler+0x580>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <SysTick_Handler+0x538>
 8001b5c:	2111      	movs	r1, #17
 8001b5e:	4823      	ldr	r0, [pc, #140]	; (8001bec <SysTick_Handler+0x5c0>)
 8001b60:	f7ff fd48 	bl	80015f4 <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001b64:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <SysTick_Handler+0x5b8>)
 8001b66:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <SysTick_Handler+0x5c4>)
 8001b6e:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001b70:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <SysTick_Handler+0x5c4>)
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	4a1f      	ldr	r2, [pc, #124]	; (8001bf4 <SysTick_Handler+0x5c8>)
 8001b76:	2100      	movs	r1, #0
 8001b78:	480e      	ldr	r0, [pc, #56]	; (8001bb4 <SysTick_Handler+0x588>)
 8001b7a:	f00c f83f 	bl	800dbfc <eth_wr_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <SysTick_Handler+0x5c8>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	f240 4124 	movw	r1, #1060	; 0x424
 8001b88:	480a      	ldr	r0, [pc, #40]	; (8001bb4 <SysTick_Handler+0x588>)
 8001b8a:	f00b fd90 	bl	800d6ae <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001b8e:	2220      	movs	r2, #32
 8001b90:	2100      	movs	r1, #0
 8001b92:	4808      	ldr	r0, [pc, #32]	; (8001bb4 <SysTick_Handler+0x588>)
 8001b94:	f00b fe3e 	bl	800d814 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001b98:	bf00      	nop
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <SysTick_Handler+0x588>)
 8001b9e:	f00b ff40 	bl	800da22 <eth_rd_SOCKET_CMD>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f8      	bne.n	8001b9a <SysTick_Handler+0x56e>

							}
						}
					}
				 }
			 break;
 8001ba8:	e1dc      	b.n	8001f64 <SysTick_Handler+0x938>
 8001baa:	bf00      	nop
 8001bac:	20002978 	.word	0x20002978
 8001bb0:	0800fc84 	.word	0x0800fc84
 8001bb4:	20002980 	.word	0x20002980
 8001bb8:	0800fc98 	.word	0x0800fc98
 8001bbc:	0800fcac 	.word	0x0800fcac
 8001bc0:	0800fcc4 	.word	0x0800fcc4
 8001bc4:	0800fcd8 	.word	0x0800fcd8
 8001bc8:	0800fcf0 	.word	0x0800fcf0
 8001bcc:	0800fd08 	.word	0x0800fd08
 8001bd0:	20003a28 	.word	0x20003a28
 8001bd4:	200039e8 	.word	0x200039e8
 8001bd8:	200039ec 	.word	0x200039ec
 8001bdc:	2000299c 	.word	0x2000299c
 8001be0:	200018ea 	.word	0x200018ea
 8001be4:	200018d8 	.word	0x200018d8
 8001be8:	20001af0 	.word	0x20001af0
 8001bec:	0800fd24 	.word	0x0800fd24
 8001bf0:	200039ee 	.word	0x200039ee
 8001bf4:	200039ea 	.word	0x200039ea
						if (mb_eth._w_answer==0)
 8001bf8:	4bac      	ldr	r3, [pc, #688]	; (8001eac <SysTick_Handler+0x880>)
 8001bfa:	7a1b      	ldrb	r3, [r3, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d167      	bne.n	8001cd0 <SysTick_Handler+0x6a4>
							ETH.data[0]=0x00;
 8001c00:	4bab      	ldr	r3, [pc, #684]	; (8001eb0 <SysTick_Handler+0x884>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	771a      	strb	r2, [r3, #28]
							ETH.data[1]=0x00;
 8001c06:	4baa      	ldr	r3, [pc, #680]	; (8001eb0 <SysTick_Handler+0x884>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	775a      	strb	r2, [r3, #29]
							ETH.data[2]=0x00;
 8001c0c:	4ba8      	ldr	r3, [pc, #672]	; (8001eb0 <SysTick_Handler+0x884>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	779a      	strb	r2, [r3, #30]
							ETH.data[3]=0x00;
 8001c12:	4ba7      	ldr	r3, [pc, #668]	; (8001eb0 <SysTick_Handler+0x884>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	77da      	strb	r2, [r3, #31]
							ETH.data[4]=0x00;
 8001c18:	4ba5      	ldr	r3, [pc, #660]	; (8001eb0 <SysTick_Handler+0x884>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2020 	strb.w	r2, [r3, #32]
							ETH.data[5]=0x06;
 8001c20:	4ba3      	ldr	r3, [pc, #652]	; (8001eb0 <SysTick_Handler+0x884>)
 8001c22:	2206      	movs	r2, #6
 8001c24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
							ETH.data[6]=0x01;
 8001c28:	4ba1      	ldr	r3, [pc, #644]	; (8001eb0 <SysTick_Handler+0x884>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
							ETH.data[7]=0x03;
 8001c30:	4b9f      	ldr	r3, [pc, #636]	; (8001eb0 <SysTick_Handler+0x884>)
 8001c32:	2203      	movs	r2, #3
 8001c34:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							ETH.data[8]=0x00;
 8001c38:	4b9d      	ldr	r3, [pc, #628]	; (8001eb0 <SysTick_Handler+0x884>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[9]=0x00;
 8001c40:	4b9b      	ldr	r3, [pc, #620]	; (8001eb0 <SysTick_Handler+0x884>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[10]=0x00;
 8001c48:	4b99      	ldr	r3, [pc, #612]	; (8001eb0 <SysTick_Handler+0x884>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[11]=0x0A;
 8001c50:	4b97      	ldr	r3, [pc, #604]	; (8001eb0 <SysTick_Handler+0x884>)
 8001c52:	220a      	movs	r2, #10
 8001c54:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							send_size=12;
 8001c58:	4b96      	ldr	r3, [pc, #600]	; (8001eb4 <SysTick_Handler+0x888>)
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 8001c5e:	220f      	movs	r2, #15
 8001c60:	2100      	movs	r1, #0
 8001c62:	4892      	ldr	r0, [pc, #584]	; (8001eac <SysTick_Handler+0x880>)
 8001c64:	f00a fa43 	bl	800c0ee <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 8001c68:	2300      	movs	r3, #0
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	220c      	movs	r2, #12
 8001c70:	4991      	ldr	r1, [pc, #580]	; (8001eb8 <SysTick_Handler+0x88c>)
 8001c72:	4892      	ldr	r0, [pc, #584]	; (8001ebc <SysTick_Handler+0x890>)
 8001c74:	f00c fc98 	bl	800e5a8 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001c78:	4b8e      	ldr	r3, [pc, #568]	; (8001eb4 <SysTick_Handler+0x888>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	4a90      	ldr	r2, [pc, #576]	; (8001ec0 <SysTick_Handler+0x894>)
 8001c7e:	2100      	movs	r1, #0
 8001c80:	488b      	ldr	r0, [pc, #556]	; (8001eb0 <SysTick_Handler+0x884>)
 8001c82:	f00b ffbb 	bl	800dbfc <eth_wr_SOCKET_DATA>
							SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001c86:	4b8e      	ldr	r3, [pc, #568]	; (8001ec0 <SysTick_Handler+0x894>)
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	f240 4124 	movw	r1, #1060	; 0x424
 8001c90:	4887      	ldr	r0, [pc, #540]	; (8001eb0 <SysTick_Handler+0x884>)
 8001c92:	f00b fd0c 	bl	800d6ae <SPI_ETH_WR_REG_16>
							eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001c96:	2220      	movs	r2, #32
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4885      	ldr	r0, [pc, #532]	; (8001eb0 <SysTick_Handler+0x884>)
 8001c9c:	f00b fdba 	bl	800d814 <eth_wr_SOCKET_CMD>
							while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001ca0:	bf00      	nop
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4882      	ldr	r0, [pc, #520]	; (8001eb0 <SysTick_Handler+0x884>)
 8001ca6:	f00b febc 	bl	800da22 <eth_rd_SOCKET_CMD>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f8      	bne.n	8001ca2 <SysTick_Handler+0x676>
							mb_eth._w_answer=1;	// Waiting answer flag
 8001cb0:	4b7e      	ldr	r3, [pc, #504]	; (8001eac <SysTick_Handler+0x880>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	721a      	strb	r2, [r3, #8]
							MB_TOUT_ticks=0;	// restart counting
 8001cb6:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <SysTick_Handler+0x898>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001cbc:	4b82      	ldr	r3, [pc, #520]	; (8001ec8 <SysTick_Handler+0x89c>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 814f 	beq.w	8001f64 <SysTick_Handler+0x938>
 8001cc6:	2117      	movs	r1, #23
 8001cc8:	4880      	ldr	r0, [pc, #512]	; (8001ecc <SysTick_Handler+0x8a0>)
 8001cca:	f7ff fc93 	bl	80015f4 <ITM0_Write>
			 break;
 8001cce:	e149      	b.n	8001f64 <SysTick_Handler+0x938>
						S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	4b7e      	ldr	r3, [pc, #504]	; (8001ed0 <SysTick_Handler+0x8a4>)
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	230f      	movs	r3, #15
 8001cda:	2226      	movs	r2, #38	; 0x26
 8001cdc:	2104      	movs	r1, #4
 8001cde:	4874      	ldr	r0, [pc, #464]	; (8001eb0 <SysTick_Handler+0x884>)
 8001ce0:	f00b fc6d 	bl	800d5be <SPI_ETH_REG>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4b7a      	ldr	r3, [pc, #488]	; (8001ed4 <SysTick_Handler+0x8a8>)
 8001cea:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001cec:	4b79      	ldr	r3, [pc, #484]	; (8001ed4 <SysTick_Handler+0x8a8>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 8137 	beq.w	8001f64 <SysTick_Handler+0x938>
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001cf6:	4b77      	ldr	r3, [pc, #476]	; (8001ed4 <SysTick_Handler+0x8a8>)
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	4a77      	ldr	r2, [pc, #476]	; (8001ed8 <SysTick_Handler+0x8ac>)
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	486c      	ldr	r0, [pc, #432]	; (8001eb0 <SysTick_Handler+0x884>)
 8001d00:	f00b feac 	bl	800da5c <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001d04:	4b74      	ldr	r3, [pc, #464]	; (8001ed8 <SysTick_Handler+0x8ac>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001d0e:	4868      	ldr	r0, [pc, #416]	; (8001eb0 <SysTick_Handler+0x884>)
 8001d10:	f00b fccd 	bl	800d6ae <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001d14:	2240      	movs	r2, #64	; 0x40
 8001d16:	2100      	movs	r1, #0
 8001d18:	4865      	ldr	r0, [pc, #404]	; (8001eb0 <SysTick_Handler+0x884>)
 8001d1a:	f00b fd7b 	bl	800d814 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001d1e:	bf00      	nop
 8001d20:	2100      	movs	r1, #0
 8001d22:	4863      	ldr	r0, [pc, #396]	; (8001eb0 <SysTick_Handler+0x884>)
 8001d24:	f00b fe7d 	bl	800da22 <eth_rd_SOCKET_CMD>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f8      	bne.n	8001d20 <SysTick_Handler+0x6f4>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001d2e:	4b69      	ldr	r3, [pc, #420]	; (8001ed4 <SysTick_Handler+0x8a8>)
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	2300      	movs	r3, #0
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	4960      	ldr	r1, [pc, #384]	; (8001ebc <SysTick_Handler+0x890>)
 8001d3c:	4867      	ldr	r0, [pc, #412]	; (8001edc <SysTick_Handler+0x8b0>)
 8001d3e:	f00c fc33 	bl	800e5a8 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001d42:	4b64      	ldr	r3, [pc, #400]	; (8001ed4 <SysTick_Handler+0x8a8>)
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	4b58      	ldr	r3, [pc, #352]	; (8001eac <SysTick_Handler+0x880>)
 8001d4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}
 8001d4e:	4b61      	ldr	r3, [pc, #388]	; (8001ed4 <SysTick_Handler+0x8a8>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <SysTick_Handler+0x730>
 8001d56:	4b56      	ldr	r3, [pc, #344]	; (8001eb0 <SysTick_Handler+0x884>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	749a      	strb	r2, [r3, #18]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001d5c:	4b53      	ldr	r3, [pc, #332]	; (8001eac <SysTick_Handler+0x880>)
 8001d5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001d62:	4619      	mov	r1, r3
 8001d64:	485d      	ldr	r0, [pc, #372]	; (8001edc <SysTick_Handler+0x8b0>)
 8001d66:	f00a f915 	bl	800bf94 <ModBUS_Check>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d024      	beq.n	8001dba <SysTick_Handler+0x78e>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001d70:	4b4e      	ldr	r3, [pc, #312]	; (8001eac <SysTick_Handler+0x880>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	721a      	strb	r2, [r3, #8]
										MB_TOUT_ticks=0;
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <SysTick_Handler+0x898>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001d7c:	484b      	ldr	r0, [pc, #300]	; (8001eac <SysTick_Handler+0x880>)
 8001d7e:	f00a fa0d 	bl	800c19c <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001d82:	4b4a      	ldr	r3, [pc, #296]	; (8001eac <SysTick_Handler+0x880>)
 8001d84:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d88:	2300      	movs	r3, #0
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	4953      	ldr	r1, [pc, #332]	; (8001edc <SysTick_Handler+0x8b0>)
 8001d90:	4853      	ldr	r0, [pc, #332]	; (8001ee0 <SysTick_Handler+0x8b4>)
 8001d92:	f00c fc09 	bl	800e5a8 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001d96:	2300      	movs	r3, #0
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	2240      	movs	r2, #64	; 0x40
 8001d9e:	4951      	ldr	r1, [pc, #324]	; (8001ee4 <SysTick_Handler+0x8b8>)
 8001da0:	4851      	ldr	r0, [pc, #324]	; (8001ee8 <SysTick_Handler+0x8bc>)
 8001da2:	f00c fc01 	bl	800e5a8 <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));
 8001da6:	4b48      	ldr	r3, [pc, #288]	; (8001ec8 <SysTick_Handler+0x89c>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 80da 	beq.w	8001f64 <SysTick_Handler+0x938>
 8001db0:	2117      	movs	r1, #23
 8001db2:	484e      	ldr	r0, [pc, #312]	; (8001eec <SysTick_Handler+0x8c0>)
 8001db4:	f7ff fc1e 	bl	80015f4 <ITM0_Write>
			 break;
 8001db8:	e0d4      	b.n	8001f64 <SysTick_Handler+0x938>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001dba:	4b43      	ldr	r3, [pc, #268]	; (8001ec8 <SysTick_Handler+0x89c>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 80d0 	beq.w	8001f64 <SysTick_Handler+0x938>
 8001dc4:	2111      	movs	r1, #17
 8001dc6:	484a      	ldr	r0, [pc, #296]	; (8001ef0 <SysTick_Handler+0x8c4>)
 8001dc8:	f7ff fc14 	bl	80015f4 <ITM0_Write>
			 break;
 8001dcc:	e0ca      	b.n	8001f64 <SysTick_Handler+0x938>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001dce:	4b3e      	ldr	r3, [pc, #248]	; (8001ec8 <SysTick_Handler+0x89c>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <SysTick_Handler+0x7b2>
 8001dd6:	2115      	movs	r1, #21
 8001dd8:	4846      	ldr	r0, [pc, #280]	; (8001ef4 <SysTick_Handler+0x8c8>)
 8001dda:	f7ff fc0b 	bl	80015f4 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001dde:	4b34      	ldr	r3, [pc, #208]	; (8001eb0 <SysTick_Handler+0x884>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001de4:	e0bf      	b.n	8001f66 <SysTick_Handler+0x93a>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001de6:	4b38      	ldr	r3, [pc, #224]	; (8001ec8 <SysTick_Handler+0x89c>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <SysTick_Handler+0x7ca>
 8001dee:	2114      	movs	r1, #20
 8001df0:	4841      	ldr	r0, [pc, #260]	; (8001ef8 <SysTick_Handler+0x8cc>)
 8001df2:	f7ff fbff 	bl	80015f4 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001df6:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <SysTick_Handler+0x884>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001dfc:	e0b3      	b.n	8001f66 <SysTick_Handler+0x93a>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001dfe:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <SysTick_Handler+0x89c>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <SysTick_Handler+0x7e2>
 8001e06:	2116      	movs	r1, #22
 8001e08:	483c      	ldr	r0, [pc, #240]	; (8001efc <SysTick_Handler+0x8d0>)
 8001e0a:	f7ff fbf3 	bl	80015f4 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0, DISCON );
 8001e0e:	2208      	movs	r2, #8
 8001e10:	2100      	movs	r1, #0
 8001e12:	4827      	ldr	r0, [pc, #156]	; (8001eb0 <SysTick_Handler+0x884>)
 8001e14:	f00b fcfe 	bl	800d814 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001e18:	bf00      	nop
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	9301      	str	r3, [sp, #4]
 8001e1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <SysTick_Handler+0x8a4>)
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	230f      	movs	r3, #15
 8001e24:	2201      	movs	r2, #1
 8001e26:	2104      	movs	r1, #4
 8001e28:	4821      	ldr	r0, [pc, #132]	; (8001eb0 <SysTick_Handler+0x884>)
 8001e2a:	f00b fbc8 	bl	800d5be <SPI_ETH_REG>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1f2      	bne.n	8001e1a <SysTick_Handler+0x7ee>
					{}
					ETH.ETH_WDG=0;
 8001e34:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <SysTick_Handler+0x884>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e3a:	e094      	b.n	8001f66 <SysTick_Handler+0x93a>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001e3c:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <SysTick_Handler+0x89c>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <SysTick_Handler+0x820>
 8001e44:	2117      	movs	r1, #23
 8001e46:	482e      	ldr	r0, [pc, #184]	; (8001f00 <SysTick_Handler+0x8d4>)
 8001e48:	f7ff fbd4 	bl	80015f4 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0,DISCON );
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4817      	ldr	r0, [pc, #92]	; (8001eb0 <SysTick_Handler+0x884>)
 8001e52:	f00b fcdf 	bl	800d814 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001e56:	bf00      	nop
 8001e58:	2301      	movs	r3, #1
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <SysTick_Handler+0x8a4>)
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	230f      	movs	r3, #15
 8001e62:	2201      	movs	r2, #1
 8001e64:	2104      	movs	r1, #4
 8001e66:	4812      	ldr	r0, [pc, #72]	; (8001eb0 <SysTick_Handler+0x884>)
 8001e68:	f00b fba9 	bl	800d5be <SPI_ETH_REG>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f2      	bne.n	8001e58 <SysTick_Handler+0x82c>
					{}
					ETH.ETH_WDG=0;
 8001e72:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <SysTick_Handler+0x884>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e78:	e075      	b.n	8001f66 <SysTick_Handler+0x93a>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <SysTick_Handler+0x89c>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <SysTick_Handler+0x85e>
 8001e82:	2115      	movs	r1, #21
 8001e84:	481f      	ldr	r0, [pc, #124]	; (8001f04 <SysTick_Handler+0x8d8>)
 8001e86:	f7ff fbb5 	bl	80015f4 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <SysTick_Handler+0x884>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e90:	e069      	b.n	8001f66 <SysTick_Handler+0x93a>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));
 8001e92:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <SysTick_Handler+0x89c>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <SysTick_Handler+0x876>
 8001e9a:	2110      	movs	r1, #16
 8001e9c:	481a      	ldr	r0, [pc, #104]	; (8001f08 <SysTick_Handler+0x8dc>)
 8001e9e:	f7ff fba9 	bl	80015f4 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001ea2:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <SysTick_Handler+0x884>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ea8:	e05d      	b.n	8001f66 <SysTick_Handler+0x93a>
 8001eaa:	bf00      	nop
 8001eac:	200018d8 	.word	0x200018d8
 8001eb0:	20002980 	.word	0x20002980
 8001eb4:	200039ee 	.word	0x200039ee
 8001eb8:	20001af0 	.word	0x20001af0
 8001ebc:	2000299c 	.word	0x2000299c
 8001ec0:	200039ea 	.word	0x200039ea
 8001ec4:	2000449c 	.word	0x2000449c
 8001ec8:	20002978 	.word	0x20002978
 8001ecc:	0800fd34 	.word	0x0800fd34
 8001ed0:	20003a28 	.word	0x20003a28
 8001ed4:	200039e8 	.word	0x200039e8
 8001ed8:	200039ec 	.word	0x200039ec
 8001edc:	200018ea 	.word	0x200018ea
 8001ee0:	2000319c 	.word	0x2000319c
 8001ee4:	20001cfc 	.word	0x20001cfc
 8001ee8:	2000234c 	.word	0x2000234c
 8001eec:	0800fd48 	.word	0x0800fd48
 8001ef0:	0800fd24 	.word	0x0800fd24
 8001ef4:	0800fd5c 	.word	0x0800fd5c
 8001ef8:	0800fd74 	.word	0x0800fd74
 8001efc:	0800fd8c 	.word	0x0800fd8c
 8001f00:	0800fda4 	.word	0x0800fda4
 8001f04:	0800fdbc 	.word	0x0800fdbc
 8001f08:	0800fdd4 	.word	0x0800fdd4
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));
 8001f0c:	4b7e      	ldr	r3, [pc, #504]	; (8002108 <SysTick_Handler+0xadc>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <SysTick_Handler+0x8f0>
 8001f14:	2112      	movs	r1, #18
 8001f16:	487d      	ldr	r0, [pc, #500]	; (800210c <SysTick_Handler+0xae0>)
 8001f18:	f7ff fb6c 	bl	80015f4 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001f1c:	4b7c      	ldr	r3, [pc, #496]	; (8002110 <SysTick_Handler+0xae4>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001f22:	e020      	b.n	8001f66 <SysTick_Handler+0x93a>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));
 8001f24:	4b78      	ldr	r3, [pc, #480]	; (8002108 <SysTick_Handler+0xadc>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <SysTick_Handler+0x908>
 8001f2c:	2113      	movs	r1, #19
 8001f2e:	4879      	ldr	r0, [pc, #484]	; (8002114 <SysTick_Handler+0xae8>)
 8001f30:	f7ff fb60 	bl	80015f4 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001f34:	4b76      	ldr	r3, [pc, #472]	; (8002110 <SysTick_Handler+0xae4>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001f3a:	e014      	b.n	8001f66 <SysTick_Handler+0x93a>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));
 8001f3c:	4b72      	ldr	r3, [pc, #456]	; (8002108 <SysTick_Handler+0xadc>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <SysTick_Handler+0x920>
 8001f44:	2111      	movs	r1, #17
 8001f46:	4874      	ldr	r0, [pc, #464]	; (8002118 <SysTick_Handler+0xaec>)
 8001f48:	f7ff fb54 	bl	80015f4 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001f4c:	4b70      	ldr	r3, [pc, #448]	; (8002110 <SysTick_Handler+0xae4>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001f52:	e008      	b.n	8001f66 <SysTick_Handler+0x93a>
				 }
	     }
	  }
	  }else
	  	  {
		  SPI_ETH(&ETH);
 8001f54:	486e      	ldr	r0, [pc, #440]	; (8002110 <SysTick_Handler+0xae4>)
 8001f56:	f00b fb0b 	bl	800d570 <SPI_ETH>
 8001f5a:	e004      	b.n	8001f66 <SysTick_Handler+0x93a>
			 default:
 8001f5c:	bf00      	nop
 8001f5e:	e002      	b.n	8001f66 <SysTick_Handler+0x93a>
			 break;
 8001f60:	bf00      	nop
 8001f62:	e000      	b.n	8001f66 <SysTick_Handler+0x93a>
			 break;
 8001f64:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001f66:	4b6d      	ldr	r3, [pc, #436]	; (800211c <SysTick_Handler+0xaf0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d102      	bne.n	8001f74 <SysTick_Handler+0x948>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001f6e:	4b6b      	ldr	r3, [pc, #428]	; (800211c <SysTick_Handler+0xaf0>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 8001f74:	4b6a      	ldr	r3, [pc, #424]	; (8002120 <SysTick_Handler+0xaf4>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d104      	bne.n	8001f86 <SysTick_Handler+0x95a>
 8001f7c:	4b69      	ldr	r3, [pc, #420]	; (8002124 <SysTick_Handler+0xaf8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	4a68      	ldr	r2, [pc, #416]	; (8002124 <SysTick_Handler+0xaf8>)
 8001f84:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001f86:	4b67      	ldr	r3, [pc, #412]	; (8002124 <SysTick_Handler+0xaf8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	dd0f      	ble.n	8001fae <SysTick_Handler+0x982>
	{
		USART1_ticks=0;
 8001f8e:	4b65      	ldr	r3, [pc, #404]	; (8002124 <SysTick_Handler+0xaf8>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 8001f94:	4b64      	ldr	r3, [pc, #400]	; (8002128 <SysTick_Handler+0xafc>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 8001f9a:	4b61      	ldr	r3, [pc, #388]	; (8002120 <SysTick_Handler+0xaf4>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 8001fa0:	4b62      	ldr	r3, [pc, #392]	; (800212c <SysTick_Handler+0xb00>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a62      	ldr	r2, [pc, #392]	; (8002130 <SysTick_Handler+0xb04>)
 8001fa6:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 8001fa8:	4b60      	ldr	r3, [pc, #384]	; (800212c <SysTick_Handler+0xb00>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fae:	f000 fe65 	bl	8002c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 8001fb2:	4b60      	ldr	r3, [pc, #384]	; (8002134 <SysTick_Handler+0xb08>)
 8001fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d105      	bne.n	8001fc8 <SysTick_Handler+0x99c>
	{
		ticks++;
 8001fbc:	4b5e      	ldr	r3, [pc, #376]	; (8002138 <SysTick_Handler+0xb0c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	4a5d      	ldr	r2, [pc, #372]	; (8002138 <SysTick_Handler+0xb0c>)
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e002      	b.n	8001fce <SysTick_Handler+0x9a2>
	}
	else
	{
		ticks=0;
 8001fc8:	4b5b      	ldr	r3, [pc, #364]	; (8002138 <SysTick_Handler+0xb0c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
	}

    if((wf._estado_conexion==TCP_CONN_EN_CURSO) || (wf._estado_conexion==CONEXION_EN_CURSO)) wf._ticks2++;	//Conteo
 8001fce:	4b59      	ldr	r3, [pc, #356]	; (8002134 <SysTick_Handler+0xb08>)
 8001fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fd4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001fd8:	d004      	beq.n	8001fe4 <SysTick_Handler+0x9b8>
 8001fda:	4b56      	ldr	r3, [pc, #344]	; (8002134 <SysTick_Handler+0xb08>)
 8001fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fe0:	2bc8      	cmp	r3, #200	; 0xc8
 8001fe2:	d106      	bne.n	8001ff2 <SysTick_Handler+0x9c6>
 8001fe4:	4b53      	ldr	r3, [pc, #332]	; (8002134 <SysTick_Handler+0xb08>)
 8001fe6:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 8001fea:	3301      	adds	r3, #1
 8001fec:	4a51      	ldr	r2, [pc, #324]	; (8002134 <SysTick_Handler+0xb08>)
 8001fee:	f8c2 3cbc 	str.w	r3, [r2, #3260]	; 0xcbc

 	if((wf._estado_conexion==CONEXION_EN_CURSO) && (wf._ticks2 >10000))
 8001ff2:	4b50      	ldr	r3, [pc, #320]	; (8002134 <SysTick_Handler+0xb08>)
 8001ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ff8:	2bc8      	cmp	r3, #200	; 0xc8
 8001ffa:	d10d      	bne.n	8002018 <SysTick_Handler+0x9ec>
 8001ffc:	4b4d      	ldr	r3, [pc, #308]	; (8002134 <SysTick_Handler+0xb08>)
 8001ffe:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 8002002:	f242 7210 	movw	r2, #10000	; 0x2710
 8002006:	4293      	cmp	r3, r2
 8002008:	dd06      	ble.n	8002018 <SysTick_Handler+0x9ec>
 	{
 		wf._ticks2=0;
 800200a:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <SysTick_Handler+0xb08>)
 800200c:	2200      	movs	r2, #0
 800200e:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
 		esp_restart=1;
 8002012:	4b4a      	ldr	r3, [pc, #296]	; (800213c <SysTick_Handler+0xb10>)
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]
 		//HW_RESET(&wf);
 	}
 	if(wf._estado_conexion==TCP_CONN_ERROR || wf._estado_conexion==CONEXION_ERROR) wf._ticks2++;
 8002018:	4b46      	ldr	r3, [pc, #280]	; (8002134 <SysTick_Handler+0xb08>)
 800201a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800201e:	f240 225d 	movw	r2, #605	; 0x25d
 8002022:	4293      	cmp	r3, r2
 8002024:	d004      	beq.n	8002030 <SysTick_Handler+0xa04>
 8002026:	4b43      	ldr	r3, [pc, #268]	; (8002134 <SysTick_Handler+0xb08>)
 8002028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800202c:	2bcd      	cmp	r3, #205	; 0xcd
 800202e:	d106      	bne.n	800203e <SysTick_Handler+0xa12>
 8002030:	4b40      	ldr	r3, [pc, #256]	; (8002134 <SysTick_Handler+0xb08>)
 8002032:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 8002036:	3301      	adds	r3, #1
 8002038:	4a3e      	ldr	r2, [pc, #248]	; (8002134 <SysTick_Handler+0xb08>)
 800203a:	f8c2 3cbc 	str.w	r3, [r2, #3260]	; 0xcbc

if(wf._ejecucion==1)
 800203e:	4b3d      	ldr	r3, [pc, #244]	; (8002134 <SysTick_Handler+0xb08>)
 8002040:	f8d3 3ab4 	ldr.w	r3, [r3, #2740]	; 0xab4
 8002044:	2b01      	cmp	r3, #1
 8002046:	d158      	bne.n	80020fa <SysTick_Handler+0xace>
	{
		if (FLAG_TIMEOUT!=1)
 8002048:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <SysTick_Handler+0xb14>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d017      	beq.n	8002080 <SysTick_Handler+0xa54>
		{
			if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 8002050:	4b38      	ldr	r3, [pc, #224]	; (8002134 <SysTick_Handler+0xb08>)
 8002052:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8002056:	2b02      	cmp	r3, #2
 8002058:	d006      	beq.n	8002068 <SysTick_Handler+0xa3c>
 800205a:	4b36      	ldr	r3, [pc, #216]	; (8002134 <SysTick_Handler+0xb08>)
 800205c:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8002060:	3301      	adds	r3, #1
 8002062:	4a34      	ldr	r2, [pc, #208]	; (8002134 <SysTick_Handler+0xb08>)
 8002064:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
			if(wf._instruccion==2) wf._ticks2++;
 8002068:	4b32      	ldr	r3, [pc, #200]	; (8002134 <SysTick_Handler+0xb08>)
 800206a:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 800206e:	2b02      	cmp	r3, #2
 8002070:	d106      	bne.n	8002080 <SysTick_Handler+0xa54>
 8002072:	4b30      	ldr	r3, [pc, #192]	; (8002134 <SysTick_Handler+0xb08>)
 8002074:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 8002078:	3301      	adds	r3, #1
 800207a:	4a2e      	ldr	r2, [pc, #184]	; (8002134 <SysTick_Handler+0xb08>)
 800207c:	f8c2 3cbc 	str.w	r3, [r2, #3260]	; 0xcbc
		}


		if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 8002080:	4b2c      	ldr	r3, [pc, #176]	; (8002134 <SysTick_Handler+0xb08>)
 8002082:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8002086:	2b02      	cmp	r3, #2
 8002088:	d018      	beq.n	80020bc <SysTick_Handler+0xa90>
 800208a:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <SysTick_Handler+0xb08>)
 800208c:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8002090:	f241 527c 	movw	r2, #5500	; 0x157c
 8002094:	4293      	cmp	r3, r2
 8002096:	dd11      	ble.n	80020bc <SysTick_Handler+0xa90>
		{
			FLAG_TIMEOUT=1;
 8002098:	4b29      	ldr	r3, [pc, #164]	; (8002140 <SysTick_Handler+0xb14>)
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 800209e:	4b29      	ldr	r3, [pc, #164]	; (8002144 <SysTick_Handler+0xb18>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f242 020c 	movw	r2, #8204	; 0x200c
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d107      	bne.n	80020bc <SysTick_Handler+0xa90>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 80020ac:	2201      	movs	r2, #1
 80020ae:	4926      	ldr	r1, [pc, #152]	; (8002148 <SysTick_Handler+0xb1c>)
 80020b0:	4824      	ldr	r0, [pc, #144]	; (8002144 <SysTick_Handler+0xb18>)
 80020b2:	f003 fb8e 	bl	80057d2 <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 80020b6:	4b25      	ldr	r3, [pc, #148]	; (800214c <SysTick_Handler+0xb20>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
			}
			//wf._ticks=0;
		}
		if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 80020bc:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <SysTick_Handler+0xb08>)
 80020be:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d11d      	bne.n	8002102 <SysTick_Handler+0xad6>
 80020c6:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <SysTick_Handler+0xb08>)
 80020c8:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 80020cc:	f245 0214 	movw	r2, #20500	; 0x5014
 80020d0:	4293      	cmp	r3, r2
 80020d2:	dd16      	ble.n	8002102 <SysTick_Handler+0xad6>
		{
			FLAG_TIMEOUT=1;
 80020d4:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <SysTick_Handler+0xb14>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 80020da:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <SysTick_Handler+0xb18>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f242 020c 	movw	r2, #8204	; 0x200c
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d10c      	bne.n	8002102 <SysTick_Handler+0xad6>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 80020e8:	2201      	movs	r2, #1
 80020ea:	4917      	ldr	r1, [pc, #92]	; (8002148 <SysTick_Handler+0xb1c>)
 80020ec:	4815      	ldr	r0, [pc, #84]	; (8002144 <SysTick_Handler+0xb18>)
 80020ee:	f003 fb70 	bl	80057d2 <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 80020f2:	4b16      	ldr	r3, [pc, #88]	; (800214c <SysTick_Handler+0xb20>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
	else
	{
		wf._ticks=0;
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 80020f8:	e003      	b.n	8002102 <SysTick_Handler+0xad6>
		wf._ticks=0;
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <SysTick_Handler+0xb08>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
}
 8002102:	bf00      	nop
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20002978 	.word	0x20002978
 800210c:	0800fde8 	.word	0x0800fde8
 8002110:	20002980 	.word	0x20002980
 8002114:	0800fdfc 	.word	0x0800fdfc
 8002118:	0800fe10 	.word	0x0800fe10
 800211c:	2000036c 	.word	0x2000036c
 8002120:	20003a6e 	.word	0x20003a6e
 8002124:	200044ac 	.word	0x200044ac
 8002128:	200044b0 	.word	0x200044b0
 800212c:	200044a8 	.word	0x200044a8
 8002130:	200044b4 	.word	0x200044b4
 8002134:	20000b78 	.word	0x20000b78
 8002138:	200044a0 	.word	0x200044a0
 800213c:	20003a74 	.word	0x20003a74
 8002140:	20003a6f 	.word	0x20003a6f
 8002144:	2000029c 	.word	0x2000029c
 8002148:	20004480 	.word	0x20004480
 800214c:	20003a6c 	.word	0x20003a6c

08002150 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <HAL_UART_ErrorCallback+0x98>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d11c      	bne.n	800219c <HAL_UART_ErrorCallback+0x4c>
	{
		 volatile int aore=0;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <HAL_UART_ErrorCallback+0x9c>)
 800216c:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8002170:	3301      	adds	r3, #1
 8002172:	4a1e      	ldr	r2, [pc, #120]	; (80021ec <HAL_UART_ErrorCallback+0x9c>)
 8002174:	f8c2 3d28 	str.w	r3, [r2, #3368]	; 0xd28
			aore=ERRUART->Instance->SR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	613b      	str	r3, [r7, #16]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f003 fa1c 	bl	80055c6 <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 800218e:	f7ff f921 	bl	80013d4 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8002192:	2201      	movs	r2, #1
 8002194:	4916      	ldr	r1, [pc, #88]	; (80021f0 <HAL_UART_ErrorCallback+0xa0>)
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f003 fb1b 	bl	80057d2 <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <HAL_UART_ErrorCallback+0xa4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d11c      	bne.n	80021e0 <HAL_UART_ErrorCallback+0x90>
	{
		 volatile int aore=0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <HAL_UART_ErrorCallback+0x9c>)
 80021b0:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 80021b4:	3301      	adds	r3, #1
 80021b6:	4a0d      	ldr	r2, [pc, #52]	; (80021ec <HAL_UART_ErrorCallback+0x9c>)
 80021b8:	f8c2 3d28 	str.w	r3, [r2, #3368]	; 0xd28
			aore=ERRUART->Instance->SR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	60bb      	str	r3, [r7, #8]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f003 f9fa 	bl	80055c6 <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 80021d2:	f7ff f929 	bl	8001428 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART2_RX_byte,1);
 80021d6:	2201      	movs	r2, #1
 80021d8:	4907      	ldr	r1, [pc, #28]	; (80021f8 <HAL_UART_ErrorCallback+0xa8>)
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f003 faf9 	bl	80057d2 <HAL_UART_Receive_IT>
	}
}
 80021e0:	bf00      	nop
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40011000 	.word	0x40011000
 80021ec:	20000b78 	.word	0x20000b78
 80021f0:	20004480 	.word	0x20004480
 80021f4:	40004400 	.word	0x40004400
 80021f8:	20004484 	.word	0x20004484

080021fc <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a2c      	ldr	r2, [pc, #176]	; (80022bc <HAL_UART_RxCpltCallback+0xc0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d124      	bne.n	8002258 <HAL_UART_RxCpltCallback+0x5c>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 800220e:	4b2c      	ldr	r3, [pc, #176]	; (80022c0 <HAL_UART_RxCpltCallback+0xc4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2c      	ldr	r2, [pc, #176]	; (80022c4 <HAL_UART_RxCpltCallback+0xc8>)
 8002214:	7811      	ldrb	r1, [r2, #0]
 8002216:	4a2c      	ldr	r2, [pc, #176]	; (80022c8 <HAL_UART_RxCpltCallback+0xcc>)
 8002218:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 800221a:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <HAL_UART_RxCpltCallback+0xc4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3301      	adds	r3, #1
 8002220:	4a27      	ldr	r2, [pc, #156]	; (80022c0 <HAL_UART_RxCpltCallback+0xc4>)
 8002222:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=1022) UART_RX_pos=1022;
 8002224:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <HAL_UART_RxCpltCallback+0xc4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f240 32fd 	movw	r2, #1021	; 0x3fd
 800222c:	4293      	cmp	r3, r2
 800222e:	dd03      	ble.n	8002238 <HAL_UART_RxCpltCallback+0x3c>
 8002230:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <HAL_UART_RxCpltCallback+0xc4>)
 8002232:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8002236:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8002238:	2100      	movs	r1, #0
 800223a:	4824      	ldr	r0, [pc, #144]	; (80022cc <HAL_UART_RxCpltCallback+0xd0>)
 800223c:	f002 f9ca 	bl	80045d4 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 8002240:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002244:	2201      	movs	r2, #1
 8002246:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 8002248:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <HAL_UART_RxCpltCallback+0xd4>)
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 800224e:	2201      	movs	r2, #1
 8002250:	491c      	ldr	r1, [pc, #112]	; (80022c4 <HAL_UART_RxCpltCallback+0xc8>)
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f003 fabd 	bl	80057d2 <HAL_UART_Receive_IT>
		 }
// LoRa USART2 TIMER3
	if(INTSERIE->Instance==USART2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1d      	ldr	r2, [pc, #116]	; (80022d4 <HAL_UART_RxCpltCallback+0xd8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d128      	bne.n	80022b4 <HAL_UART_RxCpltCallback+0xb8>
		 {
			UART2_RX_vect[UART2_RX_pos]=UART2_RX_byte[0];
 8002262:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <HAL_UART_RxCpltCallback+0xdc>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <HAL_UART_RxCpltCallback+0xe0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	b2d1      	uxtb	r1, r2
 800226c:	4a1c      	ldr	r2, [pc, #112]	; (80022e0 <HAL_UART_RxCpltCallback+0xe4>)
 800226e:	54d1      	strb	r1, [r2, r3]
			UART2_RX_pos++;
 8002270:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <HAL_UART_RxCpltCallback+0xe0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3301      	adds	r3, #1
 8002276:	4a19      	ldr	r2, [pc, #100]	; (80022dc <HAL_UART_RxCpltCallback+0xe0>)
 8002278:	6013      	str	r3, [r2, #0]
			if(UART2_RX_pos>=512) UART2_RX_pos=512;
 800227a:	4b18      	ldr	r3, [pc, #96]	; (80022dc <HAL_UART_RxCpltCallback+0xe0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002282:	db03      	blt.n	800228c <HAL_UART_RxCpltCallback+0x90>
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <HAL_UART_RxCpltCallback+0xe0>)
 8002286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800228a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 800228c:	2201      	movs	r2, #1
 800228e:	2102      	movs	r1, #2
 8002290:	4814      	ldr	r0, [pc, #80]	; (80022e4 <HAL_UART_RxCpltCallback+0xe8>)
 8002292:	f001 f975 	bl	8003580 <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8002296:	2100      	movs	r1, #0
 8002298:	4813      	ldr	r0, [pc, #76]	; (80022e8 <HAL_UART_RxCpltCallback+0xec>)
 800229a:	f002 f99b 	bl	80045d4 <HAL_TIM_OC_Start_IT>
			TIM3->CNT=1;
 800229e:	4b13      	ldr	r3, [pc, #76]	; (80022ec <HAL_UART_RxCpltCallback+0xf0>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART2_TMR=1;	//Habilito Timeout de software
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_UART_RxCpltCallback+0xf4>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART2_RX_byte,1);
 80022aa:	2201      	movs	r2, #1
 80022ac:	490a      	ldr	r1, [pc, #40]	; (80022d8 <HAL_UART_RxCpltCallback+0xdc>)
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f003 fa8f 	bl	80057d2 <HAL_UART_Receive_IT>
		 }
 }
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40011000 	.word	0x40011000
 80022c0:	200044b8 	.word	0x200044b8
 80022c4:	20004480 	.word	0x20004480
 80022c8:	20003a7c 	.word	0x20003a7c
 80022cc:	2000020c 	.word	0x2000020c
 80022d0:	20003a6c 	.word	0x20003a6c
 80022d4:	40004400 	.word	0x40004400
 80022d8:	20004484 	.word	0x20004484
 80022dc:	200044bc 	.word	0x200044bc
 80022e0:	20003e7c 	.word	0x20003e7c
 80022e4:	40020000 	.word	0x40020000
 80022e8:	20000254 	.word	0x20000254
 80022ec:	40000400 	.word	0x40000400
 80022f0:	20003a6d 	.word	0x20003a6d

080022f4 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	6078      	str	r0, [r7, #4]
// WiFi	USART 1 TIMER2
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM2)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002304:	d12d      	bne.n	8002362 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8002306:	2100      	movs	r1, #0
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f002 fa61 	bl	80047d0 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 800230e:	4b39      	ldr	r3, [pc, #228]	; (80023f4 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 8002314:	4b38      	ldr	r3, [pc, #224]	; (80023f8 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 800231a:	4b38      	ldr	r3, [pc, #224]	; (80023fc <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a38      	ldr	r2, [pc, #224]	; (8002400 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002320:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 8002322:	4b36      	ldr	r3, [pc, #216]	; (80023fc <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[1022]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8002328:	4b36      	ldr	r3, [pc, #216]	; (8002404 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 800232a:	2200      	movs	r2, #0
 800232c:	f883 23fe 	strb.w	r2, [r3, #1022]	; 0x3fe
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 8002330:	4b33      	ldr	r3, [pc, #204]	; (8002400 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b34      	ldr	r3, [pc, #208]	; (8002408 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	2301      	movs	r3, #1
 800233a:	4932      	ldr	r1, [pc, #200]	; (8002404 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 800233c:	4833      	ldr	r0, [pc, #204]	; (800240c <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 800233e:	f00c f933 	bl	800e5a8 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8002342:	2201      	movs	r2, #1
 8002344:	4932      	ldr	r1, [pc, #200]	; (8002410 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8002346:	4833      	ldr	r0, [pc, #204]	; (8002414 <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 8002348:	f003 fa43 	bl	80057d2 <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 800234c:	4b32      	ldr	r3, [pc, #200]	; (8002418 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 800234e:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8002352:	2b01      	cmp	r3, #1
 8002354:	d105      	bne.n	8002362 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 8002356:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4619      	mov	r1, r3
 800235c:	482b      	ldr	r0, [pc, #172]	; (800240c <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 800235e:	f7ff f949 	bl	80015f4 <ITM0_Write>
				 }
		}
		// LoRa USART2 TIMER3
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM3)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a2d      	ldr	r2, [pc, #180]	; (800241c <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d13f      	bne.n	80023ec <HAL_TIM_OC_DelayElapsedCallback+0xf8>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 800236c:	2100      	movs	r1, #0
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f002 fa2e 	bl	80047d0 <HAL_TIM_OC_Stop_IT>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8002374:	2200      	movs	r2, #0
 8002376:	2102      	movs	r1, #2
 8002378:	4829      	ldr	r0, [pc, #164]	; (8002420 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 800237a:	f001 f901 	bl	8003580 <HAL_GPIO_WritePin>
				 FLAG_UART2=1;
 800237e:	4b29      	ldr	r3, [pc, #164]	; (8002424 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8002380:	2201      	movs	r2, #1
 8002382:	701a      	strb	r2, [r3, #0]
				 EN_UART2_TMR=0;
 8002384:	4b28      	ldr	r3, [pc, #160]	; (8002428 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
				 UART2_RX_items=UART2_RX_pos;
 800238a:	4b28      	ldr	r3, [pc, #160]	; (800242c <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a28      	ldr	r2, [pc, #160]	; (8002430 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8002390:	6013      	str	r3, [r2, #0]
				 UART2_RX_pos=0;
 8002392:	4b26      	ldr	r3, [pc, #152]	; (800242c <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
				 //UART2_RX_vect[UART2_RX_items]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
				 UART2_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8002398:	4b26      	ldr	r3, [pc, #152]	; (8002434 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(lr.rxbuff,UART2_RX_vect,UART2_RX_items,1,CMP_VECT);
 80023a0:	4b23      	ldr	r3, [pc, #140]	; (8002430 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b18      	ldr	r3, [pc, #96]	; (8002408 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	2301      	movs	r3, #1
 80023aa:	4922      	ldr	r1, [pc, #136]	; (8002434 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 80023ac:	4822      	ldr	r0, [pc, #136]	; (8002438 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 80023ae:	f00c f8fb 	bl	800e5a8 <CopiaVector>
				 lr.rxitems=UART2_RX_items;
 80023b2:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a21      	ldr	r2, [pc, #132]	; (800243c <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 80023b8:	f8c2 37dc 	str.w	r3, [r2, #2012]	; 0x7dc
				 HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 80023bc:	2201      	movs	r2, #1
 80023be:	4920      	ldr	r1, [pc, #128]	; (8002440 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 80023c0:	4820      	ldr	r0, [pc, #128]	; (8002444 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 80023c2:	f003 fa06 	bl	80057d2 <HAL_UART_Receive_IT>
				// ITM0_Write("\r\nRecepcion LoRa \r\n",strlen("Recepcion LoRa \r\n"));
				 if (wf._DBG_EN==1)
 80023c6:	4b14      	ldr	r3, [pc, #80]	; (8002418 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 80023c8:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d10d      	bne.n	80023ec <HAL_TIM_OC_DelayElapsedCallback+0xf8>
				 {
					 ITM0_Write("\r\nData LoRa recibida = ",strlen("\r\nData LoRa recibida = "));
 80023d0:	2117      	movs	r1, #23
 80023d2:	481d      	ldr	r0, [pc, #116]	; (8002448 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 80023d4:	f7ff f90e 	bl	80015f4 <ITM0_Write>
					 ITM0_Write((uint8_t *)UART2_RX_vect,UART2_RX_items);
 80023d8:	4b15      	ldr	r3, [pc, #84]	; (8002430 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4619      	mov	r1, r3
 80023de:	4815      	ldr	r0, [pc, #84]	; (8002434 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 80023e0:	f7ff f908 	bl	80015f4 <ITM0_Write>
					 ITM0_Write("\r\n",strlen("\r\n"));
 80023e4:	2102      	movs	r1, #2
 80023e6:	4819      	ldr	r0, [pc, #100]	; (800244c <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 80023e8:	f7ff f904 	bl	80015f4 <ITM0_Write>
				 }
		}
}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20003a70 	.word	0x20003a70
 80023f8:	20003a6c 	.word	0x20003a6c
 80023fc:	200044b8 	.word	0x200044b8
 8002400:	2000448c 	.word	0x2000448c
 8002404:	20003a7c 	.word	0x20003a7c
 8002408:	2000447c 	.word	0x2000447c
 800240c:	2000407c 	.word	0x2000407c
 8002410:	20004480 	.word	0x20004480
 8002414:	2000029c 	.word	0x2000029c
 8002418:	20000b78 	.word	0x20000b78
 800241c:	40000400 	.word	0x40000400
 8002420:	40020000 	.word	0x40020000
 8002424:	20003a71 	.word	0x20003a71
 8002428:	20003a6d 	.word	0x20003a6d
 800242c:	200044bc 	.word	0x200044bc
 8002430:	20004490 	.word	0x20004490
 8002434:	20003e7c 	.word	0x20003e7c
 8002438:	200003c6 	.word	0x200003c6
 800243c:	20000370 	.word	0x20000370
 8002440:	20004484 	.word	0x20004484
 8002444:	200002e0 	.word	0x200002e0
 8002448:	0800fe24 	.word	0x0800fe24
 800244c:	0800fe3c 	.word	0x0800fe3c

08002450 <ESP8266_HW_Init>:
// 	  HAL_Delay(2000);											//Tiempo de reset del módulo
// 	  ITM0_Write("\r\n ESP ResetT\r\n",strlen("\r\n ESP ResetT\r\n"));
// 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//Habilito módulo
// }
uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af06      	add	r7, sp, #24
 8002456:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 8002458:	2364      	movs	r3, #100	; 0x64
 800245a:	220c      	movs	r2, #12
 800245c:	4945      	ldr	r1, [pc, #276]	; (8002574 <ESP8266_HW_Init+0x124>)
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f003 f8e0 	bl	8005624 <HAL_UART_Transmit>
		  HAL_Delay(500);
 8002464:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002468:	f000 fc28 	bl	8002cbc <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 800246c:	4b42      	ldr	r3, [pc, #264]	; (8002578 <ESP8266_HW_Init+0x128>)
 800246e:	2205      	movs	r2, #5
 8002470:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
		  wf._n_orig=UART_RX_items;
 8002474:	4b41      	ldr	r3, [pc, #260]	; (800257c <ESP8266_HW_Init+0x12c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a3f      	ldr	r2, [pc, #252]	; (8002578 <ESP8266_HW_Init+0x128>)
 800247a:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 800247e:	e00e      	b.n	800249e <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 8002480:	4b3e      	ldr	r3, [pc, #248]	; (800257c <ESP8266_HW_Init+0x12c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a3c      	ldr	r2, [pc, #240]	; (8002578 <ESP8266_HW_Init+0x128>)
 8002486:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
			  	  if (ESP_ticks>=5000)
 800248a:	4b3d      	ldr	r3, [pc, #244]	; (8002580 <ESP8266_HW_Init+0x130>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002492:	4293      	cmp	r3, r2
 8002494:	dd03      	ble.n	800249e <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 8002496:	4b3b      	ldr	r3, [pc, #236]	; (8002584 <ESP8266_HW_Init+0x134>)
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]
			  		 break;
 800249c:	e014      	b.n	80024c8 <ESP8266_HW_Init+0x78>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 800249e:	4b3a      	ldr	r3, [pc, #232]	; (8002588 <ESP8266_HW_Init+0x138>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	9205      	str	r2, [sp, #20]
 80024a4:	9304      	str	r3, [sp, #16]
 80024a6:	4b39      	ldr	r3, [pc, #228]	; (800258c <ESP8266_HW_Init+0x13c>)
 80024a8:	9303      	str	r3, [sp, #12]
 80024aa:	4b39      	ldr	r3, [pc, #228]	; (8002590 <ESP8266_HW_Init+0x140>)
 80024ac:	9302      	str	r3, [sp, #8]
 80024ae:	4b39      	ldr	r3, [pc, #228]	; (8002594 <ESP8266_HW_Init+0x144>)
 80024b0:	9301      	str	r3, [sp, #4]
 80024b2:	4b39      	ldr	r3, [pc, #228]	; (8002598 <ESP8266_HW_Init+0x148>)
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	4b39      	ldr	r3, [pc, #228]	; (800259c <ESP8266_HW_Init+0x14c>)
 80024b8:	4a39      	ldr	r2, [pc, #228]	; (80025a0 <ESP8266_HW_Init+0x150>)
 80024ba:	493a      	ldr	r1, [pc, #232]	; (80025a4 <ESP8266_HW_Init+0x154>)
 80024bc:	483a      	ldr	r0, [pc, #232]	; (80025a8 <ESP8266_HW_Init+0x158>)
 80024be:	f00b fc81 	bl	800ddc4 <FT_String_ND>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d1db      	bne.n	8002480 <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 80024c8:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <ESP8266_HW_Init+0x134>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d12b      	bne.n	8002528 <ESP8266_HW_Init+0xd8>
		  {
			  wf._n_fcomp=strlen("ready");
 80024d0:	4b29      	ldr	r3, [pc, #164]	; (8002578 <ESP8266_HW_Init+0x128>)
 80024d2:	2205      	movs	r2, #5
 80024d4:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
			  wf._n_orig=UART_RX_items;
 80024d8:	4b28      	ldr	r3, [pc, #160]	; (800257c <ESP8266_HW_Init+0x12c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a26      	ldr	r2, [pc, #152]	; (8002578 <ESP8266_HW_Init+0x128>)
 80024de:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 80024e2:	e00a      	b.n	80024fa <ESP8266_HW_Init+0xaa>
			  {
				  wf._n_orig=UART_RX_items;
 80024e4:	4b25      	ldr	r3, [pc, #148]	; (800257c <ESP8266_HW_Init+0x12c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a23      	ldr	r2, [pc, #140]	; (8002578 <ESP8266_HW_Init+0x128>)
 80024ea:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
				  if (ESP_ticks>=5000)
 80024ee:	4b24      	ldr	r3, [pc, #144]	; (8002580 <ESP8266_HW_Init+0x130>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f241 3287 	movw	r2, #4999	; 0x1387
 80024f6:	4293      	cmp	r3, r2
 80024f8:	dc15      	bgt.n	8002526 <ESP8266_HW_Init+0xd6>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 80024fa:	4b23      	ldr	r3, [pc, #140]	; (8002588 <ESP8266_HW_Init+0x138>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	9205      	str	r2, [sp, #20]
 8002500:	9304      	str	r3, [sp, #16]
 8002502:	4b22      	ldr	r3, [pc, #136]	; (800258c <ESP8266_HW_Init+0x13c>)
 8002504:	9303      	str	r3, [sp, #12]
 8002506:	4b22      	ldr	r3, [pc, #136]	; (8002590 <ESP8266_HW_Init+0x140>)
 8002508:	9302      	str	r3, [sp, #8]
 800250a:	4b22      	ldr	r3, [pc, #136]	; (8002594 <ESP8266_HW_Init+0x144>)
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	4b22      	ldr	r3, [pc, #136]	; (8002598 <ESP8266_HW_Init+0x148>)
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	4b22      	ldr	r3, [pc, #136]	; (800259c <ESP8266_HW_Init+0x14c>)
 8002514:	4a22      	ldr	r2, [pc, #136]	; (80025a0 <ESP8266_HW_Init+0x150>)
 8002516:	4923      	ldr	r1, [pc, #140]	; (80025a4 <ESP8266_HW_Init+0x154>)
 8002518:	4823      	ldr	r0, [pc, #140]	; (80025a8 <ESP8266_HW_Init+0x158>)
 800251a:	f00b fc53 	bl	800ddc4 <FT_String_ND>
 800251e:	4603      	mov	r3, r0
 8002520:	2b01      	cmp	r3, #1
 8002522:	d1df      	bne.n	80024e4 <ESP8266_HW_Init+0x94>
 8002524:	e000      	b.n	8002528 <ESP8266_HW_Init+0xd8>
					 {
					 break;
 8002526:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 8002528:	4b15      	ldr	r3, [pc, #84]	; (8002580 <ESP8266_HW_Init+0x130>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002530:	4293      	cmp	r3, r2
 8002532:	dc06      	bgt.n	8002542 <ESP8266_HW_Init+0xf2>
		  {
			  ESP_REinit=10;
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <ESP8266_HW_Init+0x15c>)
 8002536:	220a      	movs	r2, #10
 8002538:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800253a:	4b11      	ldr	r3, [pc, #68]	; (8002580 <ESP8266_HW_Init+0x130>)
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e008      	b.n	8002554 <ESP8266_HW_Init+0x104>
		  }
		  else
		  {
			  ESP_REinit++;
 8002542:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <ESP8266_HW_Init+0x15c>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	3301      	adds	r3, #1
 8002548:	b2da      	uxtb	r2, r3
 800254a:	4b18      	ldr	r3, [pc, #96]	; (80025ac <ESP8266_HW_Init+0x15c>)
 800254c:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800254e:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <ESP8266_HW_Init+0x130>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 8002554:	4b15      	ldr	r3, [pc, #84]	; (80025ac <ESP8266_HW_Init+0x15c>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b05      	cmp	r3, #5
 800255a:	f67f af7d 	bls.w	8002458 <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 800255e:	4b13      	ldr	r3, [pc, #76]	; (80025ac <ESP8266_HW_Init+0x15c>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b0a      	cmp	r3, #10
 8002564:	d101      	bne.n	800256a <ESP8266_HW_Init+0x11a>
	  {
		  return(1);
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <ESP8266_HW_Init+0x11c>
	  }
	  else
	  {
		  return(0);
 800256a:	2300      	movs	r3, #0
	  }
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	0800fe40 	.word	0x0800fe40
 8002578:	20000b78 	.word	0x20000b78
 800257c:	2000448c 	.word	0x2000448c
 8002580:	20004494 	.word	0x20004494
 8002584:	20003a6a 	.word	0x20003a6a
 8002588:	200018cc 	.word	0x200018cc
 800258c:	20001610 	.word	0x20001610
 8002590:	200044a4 	.word	0x200044a4
 8002594:	20001864 	.word	0x20001864
 8002598:	20001410 	.word	0x20001410
 800259c:	20001870 	.word	0x20001870
 80025a0:	0800fe50 	.word	0x0800fe50
 80025a4:	2000185c 	.word	0x2000185c
 80025a8:	2000407c 	.word	0x2000407c
 80025ac:	20003a69 	.word	0x20003a69

080025b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b4:	b672      	cpsid	i
}
 80025b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025b8:	e7fe      	b.n	80025b8 <Error_Handler+0x8>
	...

080025bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <HAL_MspInit+0x4c>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	4a0f      	ldr	r2, [pc, #60]	; (8002608 <HAL_MspInit+0x4c>)
 80025cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d0:	6453      	str	r3, [r2, #68]	; 0x44
 80025d2:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <HAL_MspInit+0x4c>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025da:	607b      	str	r3, [r7, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_MspInit+0x4c>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a08      	ldr	r2, [pc, #32]	; (8002608 <HAL_MspInit+0x4c>)
 80025e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_MspInit+0x4c>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800

0800260c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	; 0x28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a19      	ldr	r2, [pc, #100]	; (8002690 <HAL_SPI_MspInit+0x84>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d12b      	bne.n	8002686 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	4b18      	ldr	r3, [pc, #96]	; (8002694 <HAL_SPI_MspInit+0x88>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	4a17      	ldr	r2, [pc, #92]	; (8002694 <HAL_SPI_MspInit+0x88>)
 8002638:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800263c:	6453      	str	r3, [r2, #68]	; 0x44
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <HAL_SPI_MspInit+0x88>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	4b11      	ldr	r3, [pc, #68]	; (8002694 <HAL_SPI_MspInit+0x88>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	4a10      	ldr	r2, [pc, #64]	; (8002694 <HAL_SPI_MspInit+0x88>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6313      	str	r3, [r2, #48]	; 0x30
 800265a:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <HAL_SPI_MspInit+0x88>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002666:	23e0      	movs	r3, #224	; 0xe0
 8002668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002672:	2303      	movs	r3, #3
 8002674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002676:	2305      	movs	r3, #5
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	4619      	mov	r1, r3
 8002680:	4805      	ldr	r0, [pc, #20]	; (8002698 <HAL_SPI_MspInit+0x8c>)
 8002682:	f000 fd15 	bl	80030b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002686:	bf00      	nop
 8002688:	3728      	adds	r7, #40	; 0x28
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40013000 	.word	0x40013000
 8002694:	40023800 	.word	0x40023800
 8002698:	40020000 	.word	0x40020000

0800269c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ac:	d116      	bne.n	80026dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	4b1a      	ldr	r3, [pc, #104]	; (800271c <HAL_TIM_Base_MspInit+0x80>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	4a19      	ldr	r2, [pc, #100]	; (800271c <HAL_TIM_Base_MspInit+0x80>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	6413      	str	r3, [r2, #64]	; 0x40
 80026be:	4b17      	ldr	r3, [pc, #92]	; (800271c <HAL_TIM_Base_MspInit+0x80>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	201c      	movs	r0, #28
 80026d0:	f000 fc17 	bl	8002f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026d4:	201c      	movs	r0, #28
 80026d6:	f000 fc30 	bl	8002f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026da:	e01a      	b.n	8002712 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0f      	ldr	r2, [pc, #60]	; (8002720 <HAL_TIM_Base_MspInit+0x84>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d115      	bne.n	8002712 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <HAL_TIM_Base_MspInit+0x80>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a0b      	ldr	r2, [pc, #44]	; (800271c <HAL_TIM_Base_MspInit+0x80>)
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_TIM_Base_MspInit+0x80>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002702:	2200      	movs	r2, #0
 8002704:	2100      	movs	r1, #0
 8002706:	201d      	movs	r0, #29
 8002708:	f000 fbfb 	bl	8002f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800270c:	201d      	movs	r0, #29
 800270e:	f000 fc14 	bl	8002f3a <HAL_NVIC_EnableIRQ>
}
 8002712:	bf00      	nop
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800
 8002720:	40000400 	.word	0x40000400

08002724 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08e      	sub	sp, #56	; 0x38
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a54      	ldr	r2, [pc, #336]	; (8002894 <HAL_UART_MspInit+0x170>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d135      	bne.n	80027b2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	623b      	str	r3, [r7, #32]
 800274a:	4b53      	ldr	r3, [pc, #332]	; (8002898 <HAL_UART_MspInit+0x174>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	4a52      	ldr	r2, [pc, #328]	; (8002898 <HAL_UART_MspInit+0x174>)
 8002750:	f043 0310 	orr.w	r3, r3, #16
 8002754:	6453      	str	r3, [r2, #68]	; 0x44
 8002756:	4b50      	ldr	r3, [pc, #320]	; (8002898 <HAL_UART_MspInit+0x174>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	623b      	str	r3, [r7, #32]
 8002760:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
 8002766:	4b4c      	ldr	r3, [pc, #304]	; (8002898 <HAL_UART_MspInit+0x174>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a4b      	ldr	r2, [pc, #300]	; (8002898 <HAL_UART_MspInit+0x174>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b49      	ldr	r3, [pc, #292]	; (8002898 <HAL_UART_MspInit+0x174>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	61fb      	str	r3, [r7, #28]
 800277c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_WF_Pin|USART1_RX_WF_Pin;
 800277e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002784:	2302      	movs	r3, #2
 8002786:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278c:	2303      	movs	r3, #3
 800278e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002790:	2307      	movs	r3, #7
 8002792:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002798:	4619      	mov	r1, r3
 800279a:	4840      	ldr	r0, [pc, #256]	; (800289c <HAL_UART_MspInit+0x178>)
 800279c:	f000 fc88 	bl	80030b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027a0:	2200      	movs	r2, #0
 80027a2:	2100      	movs	r1, #0
 80027a4:	2025      	movs	r0, #37	; 0x25
 80027a6:	f000 fbac 	bl	8002f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027aa:	2025      	movs	r0, #37	; 0x25
 80027ac:	f000 fbc5 	bl	8002f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80027b0:	e06b      	b.n	800288a <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a3a      	ldr	r2, [pc, #232]	; (80028a0 <HAL_UART_MspInit+0x17c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d134      	bne.n	8002826 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027bc:	2300      	movs	r3, #0
 80027be:	61bb      	str	r3, [r7, #24]
 80027c0:	4b35      	ldr	r3, [pc, #212]	; (8002898 <HAL_UART_MspInit+0x174>)
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	4a34      	ldr	r2, [pc, #208]	; (8002898 <HAL_UART_MspInit+0x174>)
 80027c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ca:	6413      	str	r3, [r2, #64]	; 0x40
 80027cc:	4b32      	ldr	r3, [pc, #200]	; (8002898 <HAL_UART_MspInit+0x174>)
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	4b2e      	ldr	r3, [pc, #184]	; (8002898 <HAL_UART_MspInit+0x174>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	4a2d      	ldr	r2, [pc, #180]	; (8002898 <HAL_UART_MspInit+0x174>)
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	6313      	str	r3, [r2, #48]	; 0x30
 80027e8:	4b2b      	ldr	r3, [pc, #172]	; (8002898 <HAL_UART_MspInit+0x174>)
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART2_TX_LR_Pin|USART2_RX_LR_Pin;
 80027f4:	230c      	movs	r3, #12
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f8:	2302      	movs	r3, #2
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002800:	2303      	movs	r3, #3
 8002802:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002804:	2307      	movs	r3, #7
 8002806:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800280c:	4619      	mov	r1, r3
 800280e:	4823      	ldr	r0, [pc, #140]	; (800289c <HAL_UART_MspInit+0x178>)
 8002810:	f000 fc4e 	bl	80030b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002814:	2200      	movs	r2, #0
 8002816:	2100      	movs	r1, #0
 8002818:	2026      	movs	r0, #38	; 0x26
 800281a:	f000 fb72 	bl	8002f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800281e:	2026      	movs	r0, #38	; 0x26
 8002820:	f000 fb8b 	bl	8002f3a <HAL_NVIC_EnableIRQ>
}
 8002824:	e031      	b.n	800288a <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a1e      	ldr	r2, [pc, #120]	; (80028a4 <HAL_UART_MspInit+0x180>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d12c      	bne.n	800288a <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002830:	2300      	movs	r3, #0
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	4b18      	ldr	r3, [pc, #96]	; (8002898 <HAL_UART_MspInit+0x174>)
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	4a17      	ldr	r2, [pc, #92]	; (8002898 <HAL_UART_MspInit+0x174>)
 800283a:	f043 0320 	orr.w	r3, r3, #32
 800283e:	6453      	str	r3, [r2, #68]	; 0x44
 8002840:	4b15      	ldr	r3, [pc, #84]	; (8002898 <HAL_UART_MspInit+0x174>)
 8002842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002844:	f003 0320 	and.w	r3, r3, #32
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <HAL_UART_MspInit+0x174>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	4a10      	ldr	r2, [pc, #64]	; (8002898 <HAL_UART_MspInit+0x174>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6313      	str	r3, [r2, #48]	; 0x30
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <HAL_UART_MspInit+0x174>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002868:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002876:	2303      	movs	r3, #3
 8002878:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800287a:	2308      	movs	r3, #8
 800287c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002882:	4619      	mov	r1, r3
 8002884:	4805      	ldr	r0, [pc, #20]	; (800289c <HAL_UART_MspInit+0x178>)
 8002886:	f000 fc13 	bl	80030b0 <HAL_GPIO_Init>
}
 800288a:	bf00      	nop
 800288c:	3738      	adds	r7, #56	; 0x38
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40011000 	.word	0x40011000
 8002898:	40023800 	.word	0x40023800
 800289c:	40020000 	.word	0x40020000
 80028a0:	40004400 	.word	0x40004400
 80028a4:	40011400 	.word	0x40011400

080028a8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a1c      	ldr	r2, [pc, #112]	; (8002928 <HAL_UART_MspDeInit+0x80>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10e      	bne.n	80028d8 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80028ba:	4b1c      	ldr	r3, [pc, #112]	; (800292c <HAL_UART_MspDeInit+0x84>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	4a1b      	ldr	r2, [pc, #108]	; (800292c <HAL_UART_MspDeInit+0x84>)
 80028c0:	f023 0310 	bic.w	r3, r3, #16
 80028c4:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART1_TX_WF_Pin|USART1_RX_WF_Pin);
 80028c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80028ca:	4819      	ldr	r0, [pc, #100]	; (8002930 <HAL_UART_MspDeInit+0x88>)
 80028cc:	f000 fd74 	bl	80033b8 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80028d0:	2025      	movs	r0, #37	; 0x25
 80028d2:	f000 fb40 	bl	8002f56 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 80028d6:	e022      	b.n	800291e <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART2)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a15      	ldr	r2, [pc, #84]	; (8002934 <HAL_UART_MspDeInit+0x8c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10d      	bne.n	80028fe <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 80028e2:	4b12      	ldr	r3, [pc, #72]	; (800292c <HAL_UART_MspDeInit+0x84>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	4a11      	ldr	r2, [pc, #68]	; (800292c <HAL_UART_MspDeInit+0x84>)
 80028e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80028ec:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART2_TX_LR_Pin|USART2_RX_LR_Pin);
 80028ee:	210c      	movs	r1, #12
 80028f0:	480f      	ldr	r0, [pc, #60]	; (8002930 <HAL_UART_MspDeInit+0x88>)
 80028f2:	f000 fd61 	bl	80033b8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80028f6:	2026      	movs	r0, #38	; 0x26
 80028f8:	f000 fb2d 	bl	8002f56 <HAL_NVIC_DisableIRQ>
}
 80028fc:	e00f      	b.n	800291e <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART6)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a0d      	ldr	r2, [pc, #52]	; (8002938 <HAL_UART_MspDeInit+0x90>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d10a      	bne.n	800291e <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART6_CLK_DISABLE();
 8002908:	4b08      	ldr	r3, [pc, #32]	; (800292c <HAL_UART_MspDeInit+0x84>)
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	4a07      	ldr	r2, [pc, #28]	; (800292c <HAL_UART_MspDeInit+0x84>)
 800290e:	f023 0320 	bic.w	r3, r3, #32
 8002912:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8002914:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002918:	4805      	ldr	r0, [pc, #20]	; (8002930 <HAL_UART_MspDeInit+0x88>)
 800291a:	f000 fd4d 	bl	80033b8 <HAL_GPIO_DeInit>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40011000 	.word	0x40011000
 800292c:	40023800 	.word	0x40023800
 8002930:	40020000 	.word	0x40020000
 8002934:	40004400 	.word	0x40004400
 8002938:	40011400 	.word	0x40011400

0800293c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002940:	e7fe      	b.n	8002940 <NMI_Handler+0x4>

08002942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002946:	e7fe      	b.n	8002946 <HardFault_Handler+0x4>

08002948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800294c:	e7fe      	b.n	800294c <MemManage_Handler+0x4>

0800294e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002952:	e7fe      	b.n	8002952 <BusFault_Handler+0x4>

08002954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002958:	e7fe      	b.n	8002958 <UsageFault_Handler+0x4>

0800295a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002988:	4802      	ldr	r0, [pc, #8]	; (8002994 <TIM2_IRQHandler+0x10>)
 800298a:	f002 f82d 	bl	80049e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	2000020c 	.word	0x2000020c

08002998 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800299c:	4802      	ldr	r0, [pc, #8]	; (80029a8 <TIM3_IRQHandler+0x10>)
 800299e:	f002 f823 	bl	80049e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000254 	.word	0x20000254

080029ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029b0:	4802      	ldr	r0, [pc, #8]	; (80029bc <USART1_IRQHandler+0x10>)
 80029b2:	f002 ff3f 	bl	8005834 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	2000029c 	.word	0x2000029c

080029c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029c4:	4802      	ldr	r0, [pc, #8]	; (80029d0 <USART2_IRQHandler+0x10>)
 80029c6:	f002 ff35 	bl	8005834 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	200002e0 	.word	0x200002e0

080029d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
	return 1;
 80029d8:	2301      	movs	r3, #1
}
 80029da:	4618      	mov	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <_kill>:

int _kill(int pid, int sig)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029ee:	f00c f8e3 	bl	800ebb8 <__errno>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2216      	movs	r2, #22
 80029f6:	601a      	str	r2, [r3, #0]
	return -1;
 80029f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <_exit>:

void _exit (int status)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff ffe7 	bl	80029e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a16:	e7fe      	b.n	8002a16 <_exit+0x12>

08002a18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	e00a      	b.n	8002a40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a2a:	f3af 8000 	nop.w
 8002a2e:	4601      	mov	r1, r0
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	60ba      	str	r2, [r7, #8]
 8002a36:	b2ca      	uxtb	r2, r1
 8002a38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	dbf0      	blt.n	8002a2a <_read+0x12>
	}

return len;
 8002a48:	687b      	ldr	r3, [r7, #4]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b086      	sub	sp, #24
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	e009      	b.n	8002a78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	60ba      	str	r2, [r7, #8]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	3301      	adds	r3, #1
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	dbf1      	blt.n	8002a64 <_write+0x12>
	}
	return len;
 8002a80:	687b      	ldr	r3, [r7, #4]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <_close>:

int _close(int file)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
	return -1;
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ab2:	605a      	str	r2, [r3, #4]
	return 0;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <_isatty>:

int _isatty(int file)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
	return 1;
 8002aca:	2301      	movs	r3, #1
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
	return 0;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002afc:	4a14      	ldr	r2, [pc, #80]	; (8002b50 <_sbrk+0x5c>)
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <_sbrk+0x60>)
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b08:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <_sbrk+0x64>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d102      	bne.n	8002b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b10:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <_sbrk+0x64>)
 8002b12:	4a12      	ldr	r2, [pc, #72]	; (8002b5c <_sbrk+0x68>)
 8002b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b16:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <_sbrk+0x64>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d207      	bcs.n	8002b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b24:	f00c f848 	bl	800ebb8 <__errno>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	220c      	movs	r2, #12
 8002b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b32:	e009      	b.n	8002b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b34:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <_sbrk+0x64>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b3a:	4b07      	ldr	r3, [pc, #28]	; (8002b58 <_sbrk+0x64>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4413      	add	r3, r2
 8002b42:	4a05      	ldr	r2, [pc, #20]	; (8002b58 <_sbrk+0x64>)
 8002b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b46:	68fb      	ldr	r3, [r7, #12]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20020000 	.word	0x20020000
 8002b54:	00000400 	.word	0x00000400
 8002b58:	200044c4 	.word	0x200044c4
 8002b5c:	20004618 	.word	0x20004618

08002b60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <SystemInit+0x20>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6a:	4a05      	ldr	r2, [pc, #20]	; (8002b80 <SystemInit+0x20>)
 8002b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b88:	480d      	ldr	r0, [pc, #52]	; (8002bc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b8a:	490e      	ldr	r1, [pc, #56]	; (8002bc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b8c:	4a0e      	ldr	r2, [pc, #56]	; (8002bc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b90:	e002      	b.n	8002b98 <LoopCopyDataInit>

08002b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b96:	3304      	adds	r3, #4

08002b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b9c:	d3f9      	bcc.n	8002b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b9e:	4a0b      	ldr	r2, [pc, #44]	; (8002bcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ba0:	4c0b      	ldr	r4, [pc, #44]	; (8002bd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba4:	e001      	b.n	8002baa <LoopFillZerobss>

08002ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ba8:	3204      	adds	r2, #4

08002baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bac:	d3fb      	bcc.n	8002ba6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bae:	f7ff ffd7 	bl	8002b60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bb2:	f00c f807 	bl	800ebc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bb6:	f7fd fd6d 	bl	8000694 <main>
  bx  lr    
 8002bba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bc4:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8002bc8:	080105c8 	.word	0x080105c8
  ldr r2, =_sbss
 8002bcc:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8002bd0:	20004618 	.word	0x20004618

08002bd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bd4:	e7fe      	b.n	8002bd4 <ADC_IRQHandler>
	...

08002bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <HAL_Init+0x40>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0d      	ldr	r2, [pc, #52]	; (8002c18 <HAL_Init+0x40>)
 8002be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002be6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_Init+0x40>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <HAL_Init+0x40>)
 8002bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bf4:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <HAL_Init+0x40>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a07      	ldr	r2, [pc, #28]	; (8002c18 <HAL_Init+0x40>)
 8002bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c00:	2003      	movs	r0, #3
 8002c02:	f000 f973 	bl	8002eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c06:	200f      	movs	r0, #15
 8002c08:	f000 f808 	bl	8002c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c0c:	f7ff fcd6 	bl	80025bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023c00 	.word	0x40023c00

08002c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c24:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_InitTick+0x54>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <HAL_InitTick+0x58>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 f999 	bl	8002f72 <HAL_SYSTICK_Config>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e00e      	b.n	8002c68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b0f      	cmp	r3, #15
 8002c4e:	d80a      	bhi.n	8002c66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c50:	2200      	movs	r2, #0
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	f04f 30ff 	mov.w	r0, #4294967295
 8002c58:	f000 f953 	bl	8002f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c5c:	4a06      	ldr	r2, [pc, #24]	; (8002c78 <HAL_InitTick+0x5c>)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e000      	b.n	8002c68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20000084 	.word	0x20000084
 8002c74:	2000008c 	.word	0x2000008c
 8002c78:	20000088 	.word	0x20000088

08002c7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <HAL_IncTick+0x20>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_IncTick+0x24>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <HAL_IncTick+0x24>)
 8002c8e:	6013      	str	r3, [r2, #0]
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	2000008c 	.word	0x2000008c
 8002ca0:	200044c8 	.word	0x200044c8

08002ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ca8:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <HAL_GetTick+0x14>)
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	200044c8 	.word	0x200044c8

08002cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cc4:	f7ff ffee 	bl	8002ca4 <HAL_GetTick>
 8002cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd4:	d005      	beq.n	8002ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <HAL_Delay+0x44>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4413      	add	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ce2:	bf00      	nop
 8002ce4:	f7ff ffde 	bl	8002ca4 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d8f7      	bhi.n	8002ce4 <HAL_Delay+0x28>
  {
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	2000008c 	.word	0x2000008c

08002d04 <__NVIC_SetPriorityGrouping>:
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <__NVIC_SetPriorityGrouping+0x44>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d20:	4013      	ands	r3, r2
 8002d22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d36:	4a04      	ldr	r2, [pc, #16]	; (8002d48 <__NVIC_SetPriorityGrouping+0x44>)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	60d3      	str	r3, [r2, #12]
}
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <__NVIC_GetPriorityGrouping>:
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d50:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <__NVIC_GetPriorityGrouping+0x18>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	0a1b      	lsrs	r3, r3, #8
 8002d56:	f003 0307 	and.w	r3, r3, #7
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <__NVIC_EnableIRQ>:
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	db0b      	blt.n	8002d92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	f003 021f 	and.w	r2, r3, #31
 8002d80:	4907      	ldr	r1, [pc, #28]	; (8002da0 <__NVIC_EnableIRQ+0x38>)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	2001      	movs	r0, #1
 8002d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	e000e100 	.word	0xe000e100

08002da4 <__NVIC_DisableIRQ>:
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	db12      	blt.n	8002ddc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	f003 021f 	and.w	r2, r3, #31
 8002dbc:	490a      	ldr	r1, [pc, #40]	; (8002de8 <__NVIC_DisableIRQ+0x44>)
 8002dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	2001      	movs	r0, #1
 8002dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dca:	3320      	adds	r3, #32
 8002dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002dd0:	f3bf 8f4f 	dsb	sy
}
 8002dd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002dd6:	f3bf 8f6f 	isb	sy
}
 8002dda:	bf00      	nop
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000e100 	.word	0xe000e100

08002dec <__NVIC_SetPriority>:
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	6039      	str	r1, [r7, #0]
 8002df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	db0a      	blt.n	8002e16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	490c      	ldr	r1, [pc, #48]	; (8002e38 <__NVIC_SetPriority+0x4c>)
 8002e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0a:	0112      	lsls	r2, r2, #4
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	440b      	add	r3, r1
 8002e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e14:	e00a      	b.n	8002e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4908      	ldr	r1, [pc, #32]	; (8002e3c <__NVIC_SetPriority+0x50>)
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	3b04      	subs	r3, #4
 8002e24:	0112      	lsls	r2, r2, #4
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	440b      	add	r3, r1
 8002e2a:	761a      	strb	r2, [r3, #24]
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000e100 	.word	0xe000e100
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <NVIC_EncodePriority>:
{
 8002e40:	b480      	push	{r7}
 8002e42:	b089      	sub	sp, #36	; 0x24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f1c3 0307 	rsb	r3, r3, #7
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	bf28      	it	cs
 8002e5e:	2304      	movcs	r3, #4
 8002e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3304      	adds	r3, #4
 8002e66:	2b06      	cmp	r3, #6
 8002e68:	d902      	bls.n	8002e70 <NVIC_EncodePriority+0x30>
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	3b03      	subs	r3, #3
 8002e6e:	e000      	b.n	8002e72 <NVIC_EncodePriority+0x32>
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e74:	f04f 32ff 	mov.w	r2, #4294967295
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43da      	mvns	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	401a      	ands	r2, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e88:	f04f 31ff 	mov.w	r1, #4294967295
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e92:	43d9      	mvns	r1, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e98:	4313      	orrs	r3, r2
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3724      	adds	r7, #36	; 0x24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <SysTick_Config>:
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eb8:	d301      	bcc.n	8002ebe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e00f      	b.n	8002ede <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <SysTick_Config+0x40>)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ec6:	210f      	movs	r1, #15
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ecc:	f7ff ff8e 	bl	8002dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <SysTick_Config+0x40>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ed6:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <SysTick_Config+0x40>)
 8002ed8:	2207      	movs	r2, #7
 8002eda:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	e000e010 	.word	0xe000e010

08002eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff ff05 	bl	8002d04 <__NVIC_SetPriorityGrouping>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b086      	sub	sp, #24
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	4603      	mov	r3, r0
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f14:	f7ff ff1a 	bl	8002d4c <__NVIC_GetPriorityGrouping>
 8002f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	6978      	ldr	r0, [r7, #20]
 8002f20:	f7ff ff8e 	bl	8002e40 <NVIC_EncodePriority>
 8002f24:	4602      	mov	r2, r0
 8002f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff ff5d 	bl	8002dec <__NVIC_SetPriority>
}
 8002f32:	bf00      	nop
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	4603      	mov	r3, r0
 8002f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff ff0d 	bl	8002d68 <__NVIC_EnableIRQ>
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff ff1d 	bl	8002da4 <__NVIC_DisableIRQ>
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff ff94 	bl	8002ea8 <SysTick_Config>
 8002f80:	4603      	mov	r3, r0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f98:	f7ff fe84 	bl	8002ca4 <HAL_GetTick>
 8002f9c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d008      	beq.n	8002fbc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2280      	movs	r2, #128	; 0x80
 8002fae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e052      	b.n	8003062 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0216 	bic.w	r2, r2, #22
 8002fca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fda:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d103      	bne.n	8002fec <HAL_DMA_Abort+0x62>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d007      	beq.n	8002ffc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0208 	bic.w	r2, r2, #8
 8002ffa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800300c:	e013      	b.n	8003036 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800300e:	f7ff fe49 	bl	8002ca4 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b05      	cmp	r3, #5
 800301a:	d90c      	bls.n	8003036 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2203      	movs	r2, #3
 8003026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e015      	b.n	8003062 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1e4      	bne.n	800300e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003048:	223f      	movs	r2, #63	; 0x3f
 800304a:	409a      	lsls	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d004      	beq.n	8003088 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2280      	movs	r2, #128	; 0x80
 8003082:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e00c      	b.n	80030a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2205      	movs	r2, #5
 800308c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0201 	bic.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b089      	sub	sp, #36	; 0x24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030c6:	2300      	movs	r3, #0
 80030c8:	61fb      	str	r3, [r7, #28]
 80030ca:	e159      	b.n	8003380 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030cc:	2201      	movs	r2, #1
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	f040 8148 	bne.w	800337a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d005      	beq.n	8003102 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d130      	bne.n	8003164 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	2203      	movs	r2, #3
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003138:	2201      	movs	r2, #1
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 0201 	and.w	r2, r3, #1
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	2b03      	cmp	r3, #3
 800316e:	d017      	beq.n	80031a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	2203      	movs	r2, #3
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d123      	bne.n	80031f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	08da      	lsrs	r2, r3, #3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3208      	adds	r2, #8
 80031b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	220f      	movs	r2, #15
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	08da      	lsrs	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3208      	adds	r2, #8
 80031ee:	69b9      	ldr	r1, [r7, #24]
 80031f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	2203      	movs	r2, #3
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0203 	and.w	r2, r3, #3
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80a2 	beq.w	800337a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	4b57      	ldr	r3, [pc, #348]	; (8003398 <HAL_GPIO_Init+0x2e8>)
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	4a56      	ldr	r2, [pc, #344]	; (8003398 <HAL_GPIO_Init+0x2e8>)
 8003240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003244:	6453      	str	r3, [r2, #68]	; 0x44
 8003246:	4b54      	ldr	r3, [pc, #336]	; (8003398 <HAL_GPIO_Init+0x2e8>)
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003252:	4a52      	ldr	r2, [pc, #328]	; (800339c <HAL_GPIO_Init+0x2ec>)
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	089b      	lsrs	r3, r3, #2
 8003258:	3302      	adds	r3, #2
 800325a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	220f      	movs	r2, #15
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43db      	mvns	r3, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4013      	ands	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a49      	ldr	r2, [pc, #292]	; (80033a0 <HAL_GPIO_Init+0x2f0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d019      	beq.n	80032b2 <HAL_GPIO_Init+0x202>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a48      	ldr	r2, [pc, #288]	; (80033a4 <HAL_GPIO_Init+0x2f4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d013      	beq.n	80032ae <HAL_GPIO_Init+0x1fe>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a47      	ldr	r2, [pc, #284]	; (80033a8 <HAL_GPIO_Init+0x2f8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00d      	beq.n	80032aa <HAL_GPIO_Init+0x1fa>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a46      	ldr	r2, [pc, #280]	; (80033ac <HAL_GPIO_Init+0x2fc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d007      	beq.n	80032a6 <HAL_GPIO_Init+0x1f6>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a45      	ldr	r2, [pc, #276]	; (80033b0 <HAL_GPIO_Init+0x300>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <HAL_GPIO_Init+0x1f2>
 800329e:	2304      	movs	r3, #4
 80032a0:	e008      	b.n	80032b4 <HAL_GPIO_Init+0x204>
 80032a2:	2307      	movs	r3, #7
 80032a4:	e006      	b.n	80032b4 <HAL_GPIO_Init+0x204>
 80032a6:	2303      	movs	r3, #3
 80032a8:	e004      	b.n	80032b4 <HAL_GPIO_Init+0x204>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e002      	b.n	80032b4 <HAL_GPIO_Init+0x204>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <HAL_GPIO_Init+0x204>
 80032b2:	2300      	movs	r3, #0
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	f002 0203 	and.w	r2, r2, #3
 80032ba:	0092      	lsls	r2, r2, #2
 80032bc:	4093      	lsls	r3, r2
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032c4:	4935      	ldr	r1, [pc, #212]	; (800339c <HAL_GPIO_Init+0x2ec>)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	089b      	lsrs	r3, r3, #2
 80032ca:	3302      	adds	r3, #2
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032d2:	4b38      	ldr	r3, [pc, #224]	; (80033b4 <HAL_GPIO_Init+0x304>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032f6:	4a2f      	ldr	r2, [pc, #188]	; (80033b4 <HAL_GPIO_Init+0x304>)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032fc:	4b2d      	ldr	r3, [pc, #180]	; (80033b4 <HAL_GPIO_Init+0x304>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003320:	4a24      	ldr	r2, [pc, #144]	; (80033b4 <HAL_GPIO_Init+0x304>)
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003326:	4b23      	ldr	r3, [pc, #140]	; (80033b4 <HAL_GPIO_Init+0x304>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	43db      	mvns	r3, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800334a:	4a1a      	ldr	r2, [pc, #104]	; (80033b4 <HAL_GPIO_Init+0x304>)
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003350:	4b18      	ldr	r3, [pc, #96]	; (80033b4 <HAL_GPIO_Init+0x304>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003374:	4a0f      	ldr	r2, [pc, #60]	; (80033b4 <HAL_GPIO_Init+0x304>)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3301      	adds	r3, #1
 800337e:	61fb      	str	r3, [r7, #28]
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	2b0f      	cmp	r3, #15
 8003384:	f67f aea2 	bls.w	80030cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	3724      	adds	r7, #36	; 0x24
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800
 800339c:	40013800 	.word	0x40013800
 80033a0:	40020000 	.word	0x40020000
 80033a4:	40020400 	.word	0x40020400
 80033a8:	40020800 	.word	0x40020800
 80033ac:	40020c00 	.word	0x40020c00
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40013c00 	.word	0x40013c00

080033b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e0bb      	b.n	800354c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033d4:	2201      	movs	r2, #1
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	f040 80ab 	bne.w	8003546 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80033f0:	4a5c      	ldr	r2, [pc, #368]	; (8003564 <HAL_GPIO_DeInit+0x1ac>)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	3302      	adds	r3, #2
 80033f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033fc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	220f      	movs	r2, #15
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	4013      	ands	r3, r2
 8003410:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a54      	ldr	r2, [pc, #336]	; (8003568 <HAL_GPIO_DeInit+0x1b0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d019      	beq.n	800344e <HAL_GPIO_DeInit+0x96>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a53      	ldr	r2, [pc, #332]	; (800356c <HAL_GPIO_DeInit+0x1b4>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d013      	beq.n	800344a <HAL_GPIO_DeInit+0x92>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a52      	ldr	r2, [pc, #328]	; (8003570 <HAL_GPIO_DeInit+0x1b8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00d      	beq.n	8003446 <HAL_GPIO_DeInit+0x8e>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a51      	ldr	r2, [pc, #324]	; (8003574 <HAL_GPIO_DeInit+0x1bc>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d007      	beq.n	8003442 <HAL_GPIO_DeInit+0x8a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a50      	ldr	r2, [pc, #320]	; (8003578 <HAL_GPIO_DeInit+0x1c0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d101      	bne.n	800343e <HAL_GPIO_DeInit+0x86>
 800343a:	2304      	movs	r3, #4
 800343c:	e008      	b.n	8003450 <HAL_GPIO_DeInit+0x98>
 800343e:	2307      	movs	r3, #7
 8003440:	e006      	b.n	8003450 <HAL_GPIO_DeInit+0x98>
 8003442:	2303      	movs	r3, #3
 8003444:	e004      	b.n	8003450 <HAL_GPIO_DeInit+0x98>
 8003446:	2302      	movs	r3, #2
 8003448:	e002      	b.n	8003450 <HAL_GPIO_DeInit+0x98>
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <HAL_GPIO_DeInit+0x98>
 800344e:	2300      	movs	r3, #0
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	f002 0203 	and.w	r2, r2, #3
 8003456:	0092      	lsls	r2, r2, #2
 8003458:	4093      	lsls	r3, r2
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	429a      	cmp	r2, r3
 800345e:	d132      	bne.n	80034c6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003460:	4b46      	ldr	r3, [pc, #280]	; (800357c <HAL_GPIO_DeInit+0x1c4>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	43db      	mvns	r3, r3
 8003468:	4944      	ldr	r1, [pc, #272]	; (800357c <HAL_GPIO_DeInit+0x1c4>)
 800346a:	4013      	ands	r3, r2
 800346c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800346e:	4b43      	ldr	r3, [pc, #268]	; (800357c <HAL_GPIO_DeInit+0x1c4>)
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	43db      	mvns	r3, r3
 8003476:	4941      	ldr	r1, [pc, #260]	; (800357c <HAL_GPIO_DeInit+0x1c4>)
 8003478:	4013      	ands	r3, r2
 800347a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800347c:	4b3f      	ldr	r3, [pc, #252]	; (800357c <HAL_GPIO_DeInit+0x1c4>)
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	43db      	mvns	r3, r3
 8003484:	493d      	ldr	r1, [pc, #244]	; (800357c <HAL_GPIO_DeInit+0x1c4>)
 8003486:	4013      	ands	r3, r2
 8003488:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800348a:	4b3c      	ldr	r3, [pc, #240]	; (800357c <HAL_GPIO_DeInit+0x1c4>)
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	43db      	mvns	r3, r3
 8003492:	493a      	ldr	r1, [pc, #232]	; (800357c <HAL_GPIO_DeInit+0x1c4>)
 8003494:	4013      	ands	r3, r2
 8003496:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	220f      	movs	r2, #15
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80034a8:	4a2e      	ldr	r2, [pc, #184]	; (8003564 <HAL_GPIO_DeInit+0x1ac>)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	089b      	lsrs	r3, r3, #2
 80034ae:	3302      	adds	r3, #2
 80034b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	43da      	mvns	r2, r3
 80034b8:	482a      	ldr	r0, [pc, #168]	; (8003564 <HAL_GPIO_DeInit+0x1ac>)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	089b      	lsrs	r3, r3, #2
 80034be:	400a      	ands	r2, r1
 80034c0:	3302      	adds	r3, #2
 80034c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	2103      	movs	r1, #3
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	401a      	ands	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	08da      	lsrs	r2, r3, #3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3208      	adds	r2, #8
 80034e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	220f      	movs	r2, #15
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	08d2      	lsrs	r2, r2, #3
 80034fc:	4019      	ands	r1, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3208      	adds	r2, #8
 8003502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	2103      	movs	r1, #3
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	401a      	ands	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	2101      	movs	r1, #1
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	fa01 f303 	lsl.w	r3, r1, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	401a      	ands	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	2103      	movs	r1, #3
 800353a:	fa01 f303 	lsl.w	r3, r1, r3
 800353e:	43db      	mvns	r3, r3
 8003540:	401a      	ands	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	3301      	adds	r3, #1
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2b0f      	cmp	r3, #15
 8003550:	f67f af40 	bls.w	80033d4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003554:	bf00      	nop
 8003556:	bf00      	nop
 8003558:	371c      	adds	r7, #28
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40013800 	.word	0x40013800
 8003568:	40020000 	.word	0x40020000
 800356c:	40020400 	.word	0x40020400
 8003570:	40020800 	.word	0x40020800
 8003574:	40020c00 	.word	0x40020c00
 8003578:	40021000 	.word	0x40021000
 800357c:	40013c00 	.word	0x40013c00

08003580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]
 800358c:	4613      	mov	r3, r2
 800358e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003590:	787b      	ldrb	r3, [r7, #1]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003596:	887a      	ldrh	r2, [r7, #2]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800359c:	e003      	b.n	80035a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800359e:	887b      	ldrh	r3, [r7, #2]
 80035a0:	041a      	lsls	r2, r3, #16
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	619a      	str	r2, [r3, #24]
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b085      	sub	sp, #20
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	460b      	mov	r3, r1
 80035bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035c4:	887a      	ldrh	r2, [r7, #2]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4013      	ands	r3, r2
 80035ca:	041a      	lsls	r2, r3, #16
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	43d9      	mvns	r1, r3
 80035d0:	887b      	ldrh	r3, [r7, #2]
 80035d2:	400b      	ands	r3, r1
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	619a      	str	r2, [r3, #24]
}
 80035da:	bf00      	nop
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e267      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d075      	beq.n	80036f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003606:	4b88      	ldr	r3, [pc, #544]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b04      	cmp	r3, #4
 8003610:	d00c      	beq.n	800362c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003612:	4b85      	ldr	r3, [pc, #532]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800361a:	2b08      	cmp	r3, #8
 800361c:	d112      	bne.n	8003644 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800361e:	4b82      	ldr	r3, [pc, #520]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800362a:	d10b      	bne.n	8003644 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362c:	4b7e      	ldr	r3, [pc, #504]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d05b      	beq.n	80036f0 <HAL_RCC_OscConfig+0x108>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d157      	bne.n	80036f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e242      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800364c:	d106      	bne.n	800365c <HAL_RCC_OscConfig+0x74>
 800364e:	4b76      	ldr	r3, [pc, #472]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a75      	ldr	r2, [pc, #468]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e01d      	b.n	8003698 <HAL_RCC_OscConfig+0xb0>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0x98>
 8003666:	4b70      	ldr	r3, [pc, #448]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a6f      	ldr	r2, [pc, #444]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 800366c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b6d      	ldr	r3, [pc, #436]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a6c      	ldr	r2, [pc, #432]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e00b      	b.n	8003698 <HAL_RCC_OscConfig+0xb0>
 8003680:	4b69      	ldr	r3, [pc, #420]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a68      	ldr	r2, [pc, #416]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	4b66      	ldr	r3, [pc, #408]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a65      	ldr	r2, [pc, #404]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d013      	beq.n	80036c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7ff fb00 	bl	8002ca4 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036a8:	f7ff fafc 	bl	8002ca4 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b64      	cmp	r3, #100	; 0x64
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e207      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ba:	4b5b      	ldr	r3, [pc, #364]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0xc0>
 80036c6:	e014      	b.n	80036f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c8:	f7ff faec 	bl	8002ca4 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036d0:	f7ff fae8 	bl	8002ca4 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b64      	cmp	r3, #100	; 0x64
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e1f3      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e2:	4b51      	ldr	r3, [pc, #324]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0xe8>
 80036ee:	e000      	b.n	80036f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d063      	beq.n	80037c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036fe:	4b4a      	ldr	r3, [pc, #296]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800370a:	4b47      	ldr	r3, [pc, #284]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003712:	2b08      	cmp	r3, #8
 8003714:	d11c      	bne.n	8003750 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003716:	4b44      	ldr	r3, [pc, #272]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d116      	bne.n	8003750 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003722:	4b41      	ldr	r3, [pc, #260]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_RCC_OscConfig+0x152>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d001      	beq.n	800373a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e1c7      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373a:	4b3b      	ldr	r3, [pc, #236]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	4937      	ldr	r1, [pc, #220]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374e:	e03a      	b.n	80037c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d020      	beq.n	800379a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003758:	4b34      	ldr	r3, [pc, #208]	; (800382c <HAL_RCC_OscConfig+0x244>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375e:	f7ff faa1 	bl	8002ca4 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003766:	f7ff fa9d 	bl	8002ca4 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e1a8      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003778:	4b2b      	ldr	r3, [pc, #172]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003784:	4b28      	ldr	r3, [pc, #160]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4925      	ldr	r1, [pc, #148]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003794:	4313      	orrs	r3, r2
 8003796:	600b      	str	r3, [r1, #0]
 8003798:	e015      	b.n	80037c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800379a:	4b24      	ldr	r3, [pc, #144]	; (800382c <HAL_RCC_OscConfig+0x244>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7ff fa80 	bl	8002ca4 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a8:	f7ff fa7c 	bl	8002ca4 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e187      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ba:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d036      	beq.n	8003840 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d016      	beq.n	8003808 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037da:	4b15      	ldr	r3, [pc, #84]	; (8003830 <HAL_RCC_OscConfig+0x248>)
 80037dc:	2201      	movs	r2, #1
 80037de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e0:	f7ff fa60 	bl	8002ca4 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e8:	f7ff fa5c 	bl	8002ca4 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e167      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037fa:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 80037fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0x200>
 8003806:	e01b      	b.n	8003840 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003808:	4b09      	ldr	r3, [pc, #36]	; (8003830 <HAL_RCC_OscConfig+0x248>)
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800380e:	f7ff fa49 	bl	8002ca4 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003814:	e00e      	b.n	8003834 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003816:	f7ff fa45 	bl	8002ca4 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d907      	bls.n	8003834 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e150      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
 8003828:	40023800 	.word	0x40023800
 800382c:	42470000 	.word	0x42470000
 8003830:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003834:	4b88      	ldr	r3, [pc, #544]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1ea      	bne.n	8003816 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 8097 	beq.w	800397c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800384e:	2300      	movs	r3, #0
 8003850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003852:	4b81      	ldr	r3, [pc, #516]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10f      	bne.n	800387e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	4b7d      	ldr	r3, [pc, #500]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	4a7c      	ldr	r2, [pc, #496]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386c:	6413      	str	r3, [r2, #64]	; 0x40
 800386e:	4b7a      	ldr	r3, [pc, #488]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800387a:	2301      	movs	r3, #1
 800387c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387e:	4b77      	ldr	r3, [pc, #476]	; (8003a5c <HAL_RCC_OscConfig+0x474>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003886:	2b00      	cmp	r3, #0
 8003888:	d118      	bne.n	80038bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800388a:	4b74      	ldr	r3, [pc, #464]	; (8003a5c <HAL_RCC_OscConfig+0x474>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a73      	ldr	r2, [pc, #460]	; (8003a5c <HAL_RCC_OscConfig+0x474>)
 8003890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003896:	f7ff fa05 	bl	8002ca4 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389e:	f7ff fa01 	bl	8002ca4 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e10c      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b0:	4b6a      	ldr	r3, [pc, #424]	; (8003a5c <HAL_RCC_OscConfig+0x474>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f0      	beq.n	800389e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d106      	bne.n	80038d2 <HAL_RCC_OscConfig+0x2ea>
 80038c4:	4b64      	ldr	r3, [pc, #400]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 80038c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c8:	4a63      	ldr	r2, [pc, #396]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	6713      	str	r3, [r2, #112]	; 0x70
 80038d0:	e01c      	b.n	800390c <HAL_RCC_OscConfig+0x324>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	2b05      	cmp	r3, #5
 80038d8:	d10c      	bne.n	80038f4 <HAL_RCC_OscConfig+0x30c>
 80038da:	4b5f      	ldr	r3, [pc, #380]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 80038dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038de:	4a5e      	ldr	r2, [pc, #376]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 80038e0:	f043 0304 	orr.w	r3, r3, #4
 80038e4:	6713      	str	r3, [r2, #112]	; 0x70
 80038e6:	4b5c      	ldr	r3, [pc, #368]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ea:	4a5b      	ldr	r2, [pc, #364]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	6713      	str	r3, [r2, #112]	; 0x70
 80038f2:	e00b      	b.n	800390c <HAL_RCC_OscConfig+0x324>
 80038f4:	4b58      	ldr	r3, [pc, #352]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 80038f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f8:	4a57      	ldr	r2, [pc, #348]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 80038fa:	f023 0301 	bic.w	r3, r3, #1
 80038fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003900:	4b55      	ldr	r3, [pc, #340]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003904:	4a54      	ldr	r2, [pc, #336]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003906:	f023 0304 	bic.w	r3, r3, #4
 800390a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d015      	beq.n	8003940 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003914:	f7ff f9c6 	bl	8002ca4 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391a:	e00a      	b.n	8003932 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800391c:	f7ff f9c2 	bl	8002ca4 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	f241 3288 	movw	r2, #5000	; 0x1388
 800392a:	4293      	cmp	r3, r2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e0cb      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003932:	4b49      	ldr	r3, [pc, #292]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0ee      	beq.n	800391c <HAL_RCC_OscConfig+0x334>
 800393e:	e014      	b.n	800396a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003940:	f7ff f9b0 	bl	8002ca4 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003946:	e00a      	b.n	800395e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003948:	f7ff f9ac 	bl	8002ca4 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f241 3288 	movw	r2, #5000	; 0x1388
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e0b5      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800395e:	4b3e      	ldr	r3, [pc, #248]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1ee      	bne.n	8003948 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800396a:	7dfb      	ldrb	r3, [r7, #23]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d105      	bne.n	800397c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003970:	4b39      	ldr	r3, [pc, #228]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	4a38      	ldr	r2, [pc, #224]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800397a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80a1 	beq.w	8003ac8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003986:	4b34      	ldr	r3, [pc, #208]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b08      	cmp	r3, #8
 8003990:	d05c      	beq.n	8003a4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d141      	bne.n	8003a1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800399a:	4b31      	ldr	r3, [pc, #196]	; (8003a60 <HAL_RCC_OscConfig+0x478>)
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a0:	f7ff f980 	bl	8002ca4 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a8:	f7ff f97c 	bl	8002ca4 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e087      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ba:	4b27      	ldr	r3, [pc, #156]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69da      	ldr	r2, [r3, #28]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	019b      	lsls	r3, r3, #6
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	085b      	lsrs	r3, r3, #1
 80039de:	3b01      	subs	r3, #1
 80039e0:	041b      	lsls	r3, r3, #16
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	061b      	lsls	r3, r3, #24
 80039ea:	491b      	ldr	r1, [pc, #108]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039f0:	4b1b      	ldr	r3, [pc, #108]	; (8003a60 <HAL_RCC_OscConfig+0x478>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f6:	f7ff f955 	bl	8002ca4 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039fe:	f7ff f951 	bl	8002ca4 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e05c      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a10:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0f0      	beq.n	80039fe <HAL_RCC_OscConfig+0x416>
 8003a1c:	e054      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1e:	4b10      	ldr	r3, [pc, #64]	; (8003a60 <HAL_RCC_OscConfig+0x478>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7ff f93e 	bl	8002ca4 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a2c:	f7ff f93a 	bl	8002ca4 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e045      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3e:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1f0      	bne.n	8003a2c <HAL_RCC_OscConfig+0x444>
 8003a4a:	e03d      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d107      	bne.n	8003a64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e038      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40007000 	.word	0x40007000
 8003a60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a64:	4b1b      	ldr	r3, [pc, #108]	; (8003ad4 <HAL_RCC_OscConfig+0x4ec>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d028      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d121      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d11a      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a94:	4013      	ands	r3, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d111      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	085b      	lsrs	r3, r3, #1
 8003aac:	3b01      	subs	r3, #1
 8003aae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d107      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e000      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3718      	adds	r7, #24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40023800 	.word	0x40023800

08003ad8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0cc      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003aec:	4b68      	ldr	r3, [pc, #416]	; (8003c90 <HAL_RCC_ClockConfig+0x1b8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d90c      	bls.n	8003b14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afa:	4b65      	ldr	r3, [pc, #404]	; (8003c90 <HAL_RCC_ClockConfig+0x1b8>)
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b02:	4b63      	ldr	r3, [pc, #396]	; (8003c90 <HAL_RCC_ClockConfig+0x1b8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0b8      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d020      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b2c:	4b59      	ldr	r3, [pc, #356]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	4a58      	ldr	r2, [pc, #352]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d005      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b44:	4b53      	ldr	r3, [pc, #332]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	4a52      	ldr	r2, [pc, #328]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b50:	4b50      	ldr	r3, [pc, #320]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	494d      	ldr	r1, [pc, #308]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d044      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d107      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b76:	4b47      	ldr	r3, [pc, #284]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d119      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e07f      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d003      	beq.n	8003b96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d107      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b96:	4b3f      	ldr	r3, [pc, #252]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d109      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e06f      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba6:	4b3b      	ldr	r3, [pc, #236]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e067      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bb6:	4b37      	ldr	r3, [pc, #220]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f023 0203 	bic.w	r2, r3, #3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	4934      	ldr	r1, [pc, #208]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bc8:	f7ff f86c 	bl	8002ca4 <HAL_GetTick>
 8003bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bce:	e00a      	b.n	8003be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd0:	f7ff f868 	bl	8002ca4 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e04f      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be6:	4b2b      	ldr	r3, [pc, #172]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 020c 	and.w	r2, r3, #12
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d1eb      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf8:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <HAL_RCC_ClockConfig+0x1b8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d20c      	bcs.n	8003c20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c06:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <HAL_RCC_ClockConfig+0x1b8>)
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c0e:	4b20      	ldr	r3, [pc, #128]	; (8003c90 <HAL_RCC_ClockConfig+0x1b8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d001      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e032      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d008      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c2c:	4b19      	ldr	r3, [pc, #100]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	4916      	ldr	r1, [pc, #88]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d009      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c4a:	4b12      	ldr	r3, [pc, #72]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	490e      	ldr	r1, [pc, #56]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c5e:	f000 f821 	bl	8003ca4 <HAL_RCC_GetSysClockFreq>
 8003c62:	4602      	mov	r2, r0
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	490a      	ldr	r1, [pc, #40]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003c70:	5ccb      	ldrb	r3, [r1, r3]
 8003c72:	fa22 f303 	lsr.w	r3, r2, r3
 8003c76:	4a09      	ldr	r2, [pc, #36]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c7a:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fe ffcc 	bl	8002c1c <HAL_InitTick>

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40023c00 	.word	0x40023c00
 8003c94:	40023800 	.word	0x40023800
 8003c98:	08010398 	.word	0x08010398
 8003c9c:	20000084 	.word	0x20000084
 8003ca0:	20000088 	.word	0x20000088

08003ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ca8:	b090      	sub	sp, #64	; 0x40
 8003caa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	637b      	str	r3, [r7, #52]	; 0x34
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cbc:	4b59      	ldr	r3, [pc, #356]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 030c 	and.w	r3, r3, #12
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d00d      	beq.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x40>
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	f200 80a1 	bhi.w	8003e10 <HAL_RCC_GetSysClockFreq+0x16c>
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d003      	beq.n	8003cde <HAL_RCC_GetSysClockFreq+0x3a>
 8003cd6:	e09b      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cd8:	4b53      	ldr	r3, [pc, #332]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cda:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003cdc:	e09b      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cde:	4b53      	ldr	r3, [pc, #332]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x188>)
 8003ce0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ce2:	e098      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ce4:	4b4f      	ldr	r3, [pc, #316]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cee:	4b4d      	ldr	r3, [pc, #308]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d028      	beq.n	8003d4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cfa:	4b4a      	ldr	r3, [pc, #296]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	099b      	lsrs	r3, r3, #6
 8003d00:	2200      	movs	r2, #0
 8003d02:	623b      	str	r3, [r7, #32]
 8003d04:	627a      	str	r2, [r7, #36]	; 0x24
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4b47      	ldr	r3, [pc, #284]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x188>)
 8003d10:	fb03 f201 	mul.w	r2, r3, r1
 8003d14:	2300      	movs	r3, #0
 8003d16:	fb00 f303 	mul.w	r3, r0, r3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	4a43      	ldr	r2, [pc, #268]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x188>)
 8003d1e:	fba0 1202 	umull	r1, r2, r0, r2
 8003d22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d24:	460a      	mov	r2, r1
 8003d26:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d2a:	4413      	add	r3, r2
 8003d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d30:	2200      	movs	r2, #0
 8003d32:	61bb      	str	r3, [r7, #24]
 8003d34:	61fa      	str	r2, [r7, #28]
 8003d36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d3e:	f7fc fab7 	bl	80002b0 <__aeabi_uldivmod>
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4613      	mov	r3, r2
 8003d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d4a:	e053      	b.n	8003df4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d4c:	4b35      	ldr	r3, [pc, #212]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	099b      	lsrs	r3, r3, #6
 8003d52:	2200      	movs	r2, #0
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	617a      	str	r2, [r7, #20]
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d5e:	f04f 0b00 	mov.w	fp, #0
 8003d62:	4652      	mov	r2, sl
 8003d64:	465b      	mov	r3, fp
 8003d66:	f04f 0000 	mov.w	r0, #0
 8003d6a:	f04f 0100 	mov.w	r1, #0
 8003d6e:	0159      	lsls	r1, r3, #5
 8003d70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d74:	0150      	lsls	r0, r2, #5
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	ebb2 080a 	subs.w	r8, r2, sl
 8003d7e:	eb63 090b 	sbc.w	r9, r3, fp
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d96:	ebb2 0408 	subs.w	r4, r2, r8
 8003d9a:	eb63 0509 	sbc.w	r5, r3, r9
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	00eb      	lsls	r3, r5, #3
 8003da8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dac:	00e2      	lsls	r2, r4, #3
 8003dae:	4614      	mov	r4, r2
 8003db0:	461d      	mov	r5, r3
 8003db2:	eb14 030a 	adds.w	r3, r4, sl
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	eb45 030b 	adc.w	r3, r5, fp
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dca:	4629      	mov	r1, r5
 8003dcc:	028b      	lsls	r3, r1, #10
 8003dce:	4621      	mov	r1, r4
 8003dd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	028a      	lsls	r2, r1, #10
 8003dd8:	4610      	mov	r0, r2
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dde:	2200      	movs	r2, #0
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	60fa      	str	r2, [r7, #12]
 8003de4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003de8:	f7fc fa62 	bl	80002b0 <__aeabi_uldivmod>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4613      	mov	r3, r2
 8003df2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003df4:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	0c1b      	lsrs	r3, r3, #16
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	3301      	adds	r3, #1
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003e04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e0e:	e002      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e10:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e12:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3740      	adds	r7, #64	; 0x40
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e22:	bf00      	nop
 8003e24:	40023800 	.word	0x40023800
 8003e28:	00f42400 	.word	0x00f42400
 8003e2c:	017d7840 	.word	0x017d7840

08003e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e34:	4b03      	ldr	r3, [pc, #12]	; (8003e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e36:	681b      	ldr	r3, [r3, #0]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	20000084 	.word	0x20000084

08003e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e4c:	f7ff fff0 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 8003e50:	4602      	mov	r2, r0
 8003e52:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	0a9b      	lsrs	r3, r3, #10
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	4903      	ldr	r1, [pc, #12]	; (8003e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e5e:	5ccb      	ldrb	r3, [r1, r3]
 8003e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	080103a8 	.word	0x080103a8

08003e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e74:	f7ff ffdc 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	0b5b      	lsrs	r3, r3, #13
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	4903      	ldr	r1, [pc, #12]	; (8003e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e86:	5ccb      	ldrb	r3, [r1, r3]
 8003e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40023800 	.word	0x40023800
 8003e94:	080103a8 	.word	0x080103a8

08003e98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e07b      	b.n	8003fa2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d108      	bne.n	8003ec4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eba:	d009      	beq.n	8003ed0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	61da      	str	r2, [r3, #28]
 8003ec2:	e005      	b.n	8003ed0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fe fb8e 	bl	800260c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f54:	ea42 0103 	orr.w	r1, r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	0c1b      	lsrs	r3, r3, #16
 8003f6e:	f003 0104 	and.w	r1, r3, #4
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	f003 0210 	and.w	r2, r3, #16
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69da      	ldr	r2, [r3, #28]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b08c      	sub	sp, #48	; 0x30
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	607a      	str	r2, [r7, #4]
 8003fb6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_SPI_TransmitReceive+0x26>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e18a      	b.n	80042e6 <HAL_SPI_TransmitReceive+0x33c>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fd8:	f7fe fe64 	bl	8002ca4 <HAL_GetTick>
 8003fdc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fe4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003fee:	887b      	ldrh	r3, [r7, #2]
 8003ff0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ff2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d00f      	beq.n	800401a <HAL_SPI_TransmitReceive+0x70>
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004000:	d107      	bne.n	8004012 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d103      	bne.n	8004012 <HAL_SPI_TransmitReceive+0x68>
 800400a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800400e:	2b04      	cmp	r3, #4
 8004010:	d003      	beq.n	800401a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004012:	2302      	movs	r3, #2
 8004014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004018:	e15b      	b.n	80042d2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_SPI_TransmitReceive+0x82>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_SPI_TransmitReceive+0x82>
 8004026:	887b      	ldrh	r3, [r7, #2]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d103      	bne.n	8004034 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004032:	e14e      	b.n	80042d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b04      	cmp	r3, #4
 800403e:	d003      	beq.n	8004048 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2205      	movs	r2, #5
 8004044:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	887a      	ldrh	r2, [r7, #2]
 8004058:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	887a      	ldrh	r2, [r7, #2]
 800405e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	887a      	ldrh	r2, [r7, #2]
 800406a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	887a      	ldrh	r2, [r7, #2]
 8004070:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004088:	2b40      	cmp	r3, #64	; 0x40
 800408a:	d007      	beq.n	800409c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800409a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040a4:	d178      	bne.n	8004198 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <HAL_SPI_TransmitReceive+0x10a>
 80040ae:	8b7b      	ldrh	r3, [r7, #26]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d166      	bne.n	8004182 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	881a      	ldrh	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	1c9a      	adds	r2, r3, #2
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040d8:	e053      	b.n	8004182 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d11b      	bne.n	8004120 <HAL_SPI_TransmitReceive+0x176>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d016      	beq.n	8004120 <HAL_SPI_TransmitReceive+0x176>
 80040f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d113      	bne.n	8004120 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	881a      	ldrh	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	1c9a      	adds	r2, r3, #2
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b01      	cmp	r3, #1
 800412c:	d119      	bne.n	8004162 <HAL_SPI_TransmitReceive+0x1b8>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d014      	beq.n	8004162 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004142:	b292      	uxth	r2, r2
 8004144:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	1c9a      	adds	r2, r3, #2
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800415e:	2301      	movs	r3, #1
 8004160:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004162:	f7fe fd9f 	bl	8002ca4 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800416e:	429a      	cmp	r2, r3
 8004170:	d807      	bhi.n	8004182 <HAL_SPI_TransmitReceive+0x1d8>
 8004172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004178:	d003      	beq.n	8004182 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004180:	e0a7      	b.n	80042d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1a6      	bne.n	80040da <HAL_SPI_TransmitReceive+0x130>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1a1      	bne.n	80040da <HAL_SPI_TransmitReceive+0x130>
 8004196:	e07c      	b.n	8004292 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <HAL_SPI_TransmitReceive+0x1fc>
 80041a0:	8b7b      	ldrh	r3, [r7, #26]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d16b      	bne.n	800427e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	330c      	adds	r3, #12
 80041b0:	7812      	ldrb	r2, [r2, #0]
 80041b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041cc:	e057      	b.n	800427e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d11c      	bne.n	8004216 <HAL_SPI_TransmitReceive+0x26c>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d017      	beq.n	8004216 <HAL_SPI_TransmitReceive+0x26c>
 80041e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d114      	bne.n	8004216 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	330c      	adds	r3, #12
 80041f6:	7812      	ldrb	r2, [r2, #0]
 80041f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004208:	b29b      	uxth	r3, r3
 800420a:	3b01      	subs	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b01      	cmp	r3, #1
 8004222:	d119      	bne.n	8004258 <HAL_SPI_TransmitReceive+0x2ae>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d014      	beq.n	8004258 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004254:	2301      	movs	r3, #1
 8004256:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004258:	f7fe fd24 	bl	8002ca4 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004264:	429a      	cmp	r2, r3
 8004266:	d803      	bhi.n	8004270 <HAL_SPI_TransmitReceive+0x2c6>
 8004268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426e:	d102      	bne.n	8004276 <HAL_SPI_TransmitReceive+0x2cc>
 8004270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004272:	2b00      	cmp	r3, #0
 8004274:	d103      	bne.n	800427e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800427c:	e029      	b.n	80042d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1a2      	bne.n	80041ce <HAL_SPI_TransmitReceive+0x224>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d19d      	bne.n	80041ce <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004294:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 f8b2 	bl	8004400 <SPI_EndRxTxTransaction>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d006      	beq.n	80042b0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2220      	movs	r2, #32
 80042ac:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80042ae:	e010      	b.n	80042d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10b      	bne.n	80042d0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	e000      	b.n	80042d2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80042d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3730      	adds	r7, #48	; 0x30
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004300:	f7fe fcd0 	bl	8002ca4 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	4413      	add	r3, r2
 800430e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004310:	f7fe fcc8 	bl	8002ca4 <HAL_GetTick>
 8004314:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004316:	4b39      	ldr	r3, [pc, #228]	; (80043fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	015b      	lsls	r3, r3, #5
 800431c:	0d1b      	lsrs	r3, r3, #20
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	fb02 f303 	mul.w	r3, r2, r3
 8004324:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004326:	e054      	b.n	80043d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432e:	d050      	beq.n	80043d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004330:	f7fe fcb8 	bl	8002ca4 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	429a      	cmp	r2, r3
 800433e:	d902      	bls.n	8004346 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d13d      	bne.n	80043c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004354:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800435e:	d111      	bne.n	8004384 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004368:	d004      	beq.n	8004374 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004372:	d107      	bne.n	8004384 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004382:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800438c:	d10f      	bne.n	80043ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e017      	b.n	80043f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4013      	ands	r3, r2
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	429a      	cmp	r2, r3
 80043e0:	bf0c      	ite	eq
 80043e2:	2301      	moveq	r3, #1
 80043e4:	2300      	movne	r3, #0
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	461a      	mov	r2, r3
 80043ea:	79fb      	ldrb	r3, [r7, #7]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d19b      	bne.n	8004328 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3720      	adds	r7, #32
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20000084 	.word	0x20000084

08004400 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800440c:	4b1b      	ldr	r3, [pc, #108]	; (800447c <SPI_EndRxTxTransaction+0x7c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1b      	ldr	r2, [pc, #108]	; (8004480 <SPI_EndRxTxTransaction+0x80>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	0d5b      	lsrs	r3, r3, #21
 8004418:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800441c:	fb02 f303 	mul.w	r3, r2, r3
 8004420:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800442a:	d112      	bne.n	8004452 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2200      	movs	r2, #0
 8004434:	2180      	movs	r1, #128	; 0x80
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f7ff ff5a 	bl	80042f0 <SPI_WaitFlagStateUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d016      	beq.n	8004470 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004446:	f043 0220 	orr.w	r2, r3, #32
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e00f      	b.n	8004472 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00a      	beq.n	800446e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	3b01      	subs	r3, #1
 800445c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004468:	2b80      	cmp	r3, #128	; 0x80
 800446a:	d0f2      	beq.n	8004452 <SPI_EndRxTxTransaction+0x52>
 800446c:	e000      	b.n	8004470 <SPI_EndRxTxTransaction+0x70>
        break;
 800446e:	bf00      	nop
  }

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20000084 	.word	0x20000084
 8004480:	165e9f81 	.word	0x165e9f81

08004484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e041      	b.n	800451a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7fe f8f6 	bl	800269c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3304      	adds	r3, #4
 80044c0:	4619      	mov	r1, r3
 80044c2:	4610      	mov	r0, r2
 80044c4:	f000 fce4 	bl	8004e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b082      	sub	sp, #8
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e041      	b.n	80045b8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d106      	bne.n	800454e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f839 	bl	80045c0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2202      	movs	r2, #2
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3304      	adds	r3, #4
 800455e:	4619      	mov	r1, r3
 8004560:	4610      	mov	r0, r2
 8004562:	f000 fc95 	bl	8004e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d109      	bne.n	80045fc <HAL_TIM_OC_Start_IT+0x28>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	bf14      	ite	ne
 80045f4:	2301      	movne	r3, #1
 80045f6:	2300      	moveq	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	e022      	b.n	8004642 <HAL_TIM_OC_Start_IT+0x6e>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d109      	bne.n	8004616 <HAL_TIM_OC_Start_IT+0x42>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b01      	cmp	r3, #1
 800460c:	bf14      	ite	ne
 800460e:	2301      	movne	r3, #1
 8004610:	2300      	moveq	r3, #0
 8004612:	b2db      	uxtb	r3, r3
 8004614:	e015      	b.n	8004642 <HAL_TIM_OC_Start_IT+0x6e>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b08      	cmp	r3, #8
 800461a:	d109      	bne.n	8004630 <HAL_TIM_OC_Start_IT+0x5c>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b01      	cmp	r3, #1
 8004626:	bf14      	ite	ne
 8004628:	2301      	movne	r3, #1
 800462a:	2300      	moveq	r3, #0
 800462c:	b2db      	uxtb	r3, r3
 800462e:	e008      	b.n	8004642 <HAL_TIM_OC_Start_IT+0x6e>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	bf14      	ite	ne
 800463c:	2301      	movne	r3, #1
 800463e:	2300      	moveq	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e0b3      	b.n	80047b2 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d104      	bne.n	800465a <HAL_TIM_OC_Start_IT+0x86>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004658:	e013      	b.n	8004682 <HAL_TIM_OC_Start_IT+0xae>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b04      	cmp	r3, #4
 800465e:	d104      	bne.n	800466a <HAL_TIM_OC_Start_IT+0x96>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004668:	e00b      	b.n	8004682 <HAL_TIM_OC_Start_IT+0xae>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b08      	cmp	r3, #8
 800466e:	d104      	bne.n	800467a <HAL_TIM_OC_Start_IT+0xa6>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004678:	e003      	b.n	8004682 <HAL_TIM_OC_Start_IT+0xae>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2202      	movs	r2, #2
 800467e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b0c      	cmp	r3, #12
 8004686:	d841      	bhi.n	800470c <HAL_TIM_OC_Start_IT+0x138>
 8004688:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <HAL_TIM_OC_Start_IT+0xbc>)
 800468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468e:	bf00      	nop
 8004690:	080046c5 	.word	0x080046c5
 8004694:	0800470d 	.word	0x0800470d
 8004698:	0800470d 	.word	0x0800470d
 800469c:	0800470d 	.word	0x0800470d
 80046a0:	080046d7 	.word	0x080046d7
 80046a4:	0800470d 	.word	0x0800470d
 80046a8:	0800470d 	.word	0x0800470d
 80046ac:	0800470d 	.word	0x0800470d
 80046b0:	080046e9 	.word	0x080046e9
 80046b4:	0800470d 	.word	0x0800470d
 80046b8:	0800470d 	.word	0x0800470d
 80046bc:	0800470d 	.word	0x0800470d
 80046c0:	080046fb 	.word	0x080046fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0202 	orr.w	r2, r2, #2
 80046d2:	60da      	str	r2, [r3, #12]
      break;
 80046d4:	e01d      	b.n	8004712 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f042 0204 	orr.w	r2, r2, #4
 80046e4:	60da      	str	r2, [r3, #12]
      break;
 80046e6:	e014      	b.n	8004712 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0208 	orr.w	r2, r2, #8
 80046f6:	60da      	str	r2, [r3, #12]
      break;
 80046f8:	e00b      	b.n	8004712 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0210 	orr.w	r2, r2, #16
 8004708:	60da      	str	r2, [r3, #12]
      break;
 800470a:	e002      	b.n	8004712 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	73fb      	strb	r3, [r7, #15]
      break;
 8004710:	bf00      	nop
  }

  if (status == HAL_OK)
 8004712:	7bfb      	ldrb	r3, [r7, #15]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d14b      	bne.n	80047b0 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2201      	movs	r2, #1
 800471e:	6839      	ldr	r1, [r7, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fe5b 	bl	80053dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a24      	ldr	r2, [pc, #144]	; (80047bc <HAL_TIM_OC_Start_IT+0x1e8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d107      	bne.n	8004740 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800473e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a1d      	ldr	r2, [pc, #116]	; (80047bc <HAL_TIM_OC_Start_IT+0x1e8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d018      	beq.n	800477c <HAL_TIM_OC_Start_IT+0x1a8>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004752:	d013      	beq.n	800477c <HAL_TIM_OC_Start_IT+0x1a8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a19      	ldr	r2, [pc, #100]	; (80047c0 <HAL_TIM_OC_Start_IT+0x1ec>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00e      	beq.n	800477c <HAL_TIM_OC_Start_IT+0x1a8>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a18      	ldr	r2, [pc, #96]	; (80047c4 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d009      	beq.n	800477c <HAL_TIM_OC_Start_IT+0x1a8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a16      	ldr	r2, [pc, #88]	; (80047c8 <HAL_TIM_OC_Start_IT+0x1f4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <HAL_TIM_OC_Start_IT+0x1a8>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a15      	ldr	r2, [pc, #84]	; (80047cc <HAL_TIM_OC_Start_IT+0x1f8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d111      	bne.n	80047a0 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b06      	cmp	r3, #6
 800478c:	d010      	beq.n	80047b0 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0201 	orr.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479e:	e007      	b.n	80047b0 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0201 	orr.w	r2, r2, #1
 80047ae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40010000 	.word	0x40010000
 80047c0:	40000400 	.word	0x40000400
 80047c4:	40000800 	.word	0x40000800
 80047c8:	40000c00 	.word	0x40000c00
 80047cc:	40014000 	.word	0x40014000

080047d0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b0c      	cmp	r3, #12
 80047e2:	d841      	bhi.n	8004868 <HAL_TIM_OC_Stop_IT+0x98>
 80047e4:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <HAL_TIM_OC_Stop_IT+0x1c>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	08004821 	.word	0x08004821
 80047f0:	08004869 	.word	0x08004869
 80047f4:	08004869 	.word	0x08004869
 80047f8:	08004869 	.word	0x08004869
 80047fc:	08004833 	.word	0x08004833
 8004800:	08004869 	.word	0x08004869
 8004804:	08004869 	.word	0x08004869
 8004808:	08004869 	.word	0x08004869
 800480c:	08004845 	.word	0x08004845
 8004810:	08004869 	.word	0x08004869
 8004814:	08004869 	.word	0x08004869
 8004818:	08004869 	.word	0x08004869
 800481c:	08004857 	.word	0x08004857
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0202 	bic.w	r2, r2, #2
 800482e:	60da      	str	r2, [r3, #12]
      break;
 8004830:	e01d      	b.n	800486e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0204 	bic.w	r2, r2, #4
 8004840:	60da      	str	r2, [r3, #12]
      break;
 8004842:	e014      	b.n	800486e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0208 	bic.w	r2, r2, #8
 8004852:	60da      	str	r2, [r3, #12]
      break;
 8004854:	e00b      	b.n	800486e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0210 	bic.w	r2, r2, #16
 8004864:	60da      	str	r2, [r3, #12]
      break;
 8004866:	e002      	b.n	800486e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	73fb      	strb	r3, [r7, #15]
      break;
 800486c:	bf00      	nop
  }

  if (status == HAL_OK)
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d157      	bne.n	8004924 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2200      	movs	r2, #0
 800487a:	6839      	ldr	r1, [r7, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fdad 	bl	80053dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a2a      	ldr	r2, [pc, #168]	; (8004930 <HAL_TIM_OC_Stop_IT+0x160>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d117      	bne.n	80048bc <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6a1a      	ldr	r2, [r3, #32]
 8004892:	f241 1311 	movw	r3, #4369	; 0x1111
 8004896:	4013      	ands	r3, r2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10f      	bne.n	80048bc <HAL_TIM_OC_Stop_IT+0xec>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6a1a      	ldr	r2, [r3, #32]
 80048a2:	f240 4344 	movw	r3, #1092	; 0x444
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d107      	bne.n	80048bc <HAL_TIM_OC_Stop_IT+0xec>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048ba:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6a1a      	ldr	r2, [r3, #32]
 80048c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80048c6:	4013      	ands	r3, r2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10f      	bne.n	80048ec <HAL_TIM_OC_Stop_IT+0x11c>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6a1a      	ldr	r2, [r3, #32]
 80048d2:	f240 4344 	movw	r3, #1092	; 0x444
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d107      	bne.n	80048ec <HAL_TIM_OC_Stop_IT+0x11c>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0201 	bic.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d104      	bne.n	80048fc <HAL_TIM_OC_Stop_IT+0x12c>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048fa:	e013      	b.n	8004924 <HAL_TIM_OC_Stop_IT+0x154>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d104      	bne.n	800490c <HAL_TIM_OC_Stop_IT+0x13c>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800490a:	e00b      	b.n	8004924 <HAL_TIM_OC_Stop_IT+0x154>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b08      	cmp	r3, #8
 8004910:	d104      	bne.n	800491c <HAL_TIM_OC_Stop_IT+0x14c>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800491a:	e003      	b.n	8004924 <HAL_TIM_OC_Stop_IT+0x154>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004924:	7bfb      	ldrb	r3, [r7, #15]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40010000 	.word	0x40010000

08004934 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e041      	b.n	80049cc <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d106      	bne.n	8004962 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f839 	bl	80049d4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3304      	adds	r3, #4
 8004972:	4619      	mov	r1, r3
 8004974:	4610      	mov	r0, r2
 8004976:	f000 fa8b 	bl	8004e90 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0208 	bic.w	r2, r2, #8
 8004988:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6819      	ldr	r1, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d122      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d11b      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f06f 0202 	mvn.w	r2, #2
 8004a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fa11 	bl	8004e52 <HAL_TIM_IC_CaptureCallback>
 8004a30:	e005      	b.n	8004a3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fd fc5e 	bl	80022f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 fa14 	bl	8004e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f003 0304 	and.w	r3, r3, #4
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d122      	bne.n	8004a98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d11b      	bne.n	8004a98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0204 	mvn.w	r2, #4
 8004a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f9e7 	bl	8004e52 <HAL_TIM_IC_CaptureCallback>
 8004a84:	e005      	b.n	8004a92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fd fc34 	bl	80022f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f9ea 	bl	8004e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f003 0308 	and.w	r3, r3, #8
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d122      	bne.n	8004aec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f003 0308 	and.w	r3, r3, #8
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d11b      	bne.n	8004aec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f06f 0208 	mvn.w	r2, #8
 8004abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f9bd 	bl	8004e52 <HAL_TIM_IC_CaptureCallback>
 8004ad8:	e005      	b.n	8004ae6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7fd fc0a 	bl	80022f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f9c0 	bl	8004e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f003 0310 	and.w	r3, r3, #16
 8004af6:	2b10      	cmp	r3, #16
 8004af8:	d122      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	2b10      	cmp	r3, #16
 8004b06:	d11b      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f06f 0210 	mvn.w	r2, #16
 8004b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2208      	movs	r2, #8
 8004b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f993 	bl	8004e52 <HAL_TIM_IC_CaptureCallback>
 8004b2c:	e005      	b.n	8004b3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fd fbe0 	bl	80022f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f996 	bl	8004e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d10e      	bne.n	8004b6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d107      	bne.n	8004b6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f06f 0201 	mvn.w	r2, #1
 8004b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f969 	bl	8004e3e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b76:	2b80      	cmp	r3, #128	; 0x80
 8004b78:	d10e      	bne.n	8004b98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b84:	2b80      	cmp	r3, #128	; 0x80
 8004b86:	d107      	bne.n	8004b98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fcc0 	bl	8005518 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba2:	2b40      	cmp	r3, #64	; 0x40
 8004ba4:	d10e      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb0:	2b40      	cmp	r3, #64	; 0x40
 8004bb2:	d107      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f95b 	bl	8004e7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f003 0320 	and.w	r3, r3, #32
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	d10e      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0320 	and.w	r3, r3, #32
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	d107      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0220 	mvn.w	r2, #32
 8004be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fc8a 	bl	8005504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bf0:	bf00      	nop
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c04:	2300      	movs	r3, #0
 8004c06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e048      	b.n	8004ca8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b0c      	cmp	r3, #12
 8004c22:	d839      	bhi.n	8004c98 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004c24:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2a:	bf00      	nop
 8004c2c:	08004c61 	.word	0x08004c61
 8004c30:	08004c99 	.word	0x08004c99
 8004c34:	08004c99 	.word	0x08004c99
 8004c38:	08004c99 	.word	0x08004c99
 8004c3c:	08004c6f 	.word	0x08004c6f
 8004c40:	08004c99 	.word	0x08004c99
 8004c44:	08004c99 	.word	0x08004c99
 8004c48:	08004c99 	.word	0x08004c99
 8004c4c:	08004c7d 	.word	0x08004c7d
 8004c50:	08004c99 	.word	0x08004c99
 8004c54:	08004c99 	.word	0x08004c99
 8004c58:	08004c99 	.word	0x08004c99
 8004c5c:	08004c8b 	.word	0x08004c8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 f992 	bl	8004f90 <TIM_OC1_SetConfig>
      break;
 8004c6c:	e017      	b.n	8004c9e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 f9f1 	bl	800505c <TIM_OC2_SetConfig>
      break;
 8004c7a:	e010      	b.n	8004c9e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68b9      	ldr	r1, [r7, #8]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 fa56 	bl	8005134 <TIM_OC3_SetConfig>
      break;
 8004c88:	e009      	b.n	8004c9e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 fab9 	bl	8005208 <TIM_OC4_SetConfig>
      break;
 8004c96:	e002      	b.n	8004c9e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d101      	bne.n	8004ccc <HAL_TIM_ConfigClockSource+0x1c>
 8004cc8:	2302      	movs	r3, #2
 8004cca:	e0b4      	b.n	8004e36 <HAL_TIM_ConfigClockSource+0x186>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d04:	d03e      	beq.n	8004d84 <HAL_TIM_ConfigClockSource+0xd4>
 8004d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d0a:	f200 8087 	bhi.w	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d12:	f000 8086 	beq.w	8004e22 <HAL_TIM_ConfigClockSource+0x172>
 8004d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1a:	d87f      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d1c:	2b70      	cmp	r3, #112	; 0x70
 8004d1e:	d01a      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0xa6>
 8004d20:	2b70      	cmp	r3, #112	; 0x70
 8004d22:	d87b      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d24:	2b60      	cmp	r3, #96	; 0x60
 8004d26:	d050      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x11a>
 8004d28:	2b60      	cmp	r3, #96	; 0x60
 8004d2a:	d877      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d2c:	2b50      	cmp	r3, #80	; 0x50
 8004d2e:	d03c      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0xfa>
 8004d30:	2b50      	cmp	r3, #80	; 0x50
 8004d32:	d873      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d34:	2b40      	cmp	r3, #64	; 0x40
 8004d36:	d058      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x13a>
 8004d38:	2b40      	cmp	r3, #64	; 0x40
 8004d3a:	d86f      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d3c:	2b30      	cmp	r3, #48	; 0x30
 8004d3e:	d064      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x15a>
 8004d40:	2b30      	cmp	r3, #48	; 0x30
 8004d42:	d86b      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d060      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x15a>
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d867      	bhi.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d05c      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x15a>
 8004d50:	2b10      	cmp	r3, #16
 8004d52:	d05a      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x15a>
 8004d54:	e062      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6899      	ldr	r1, [r3, #8]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f000 fb19 	bl	800539c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	609a      	str	r2, [r3, #8]
      break;
 8004d82:	e04f      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6818      	ldr	r0, [r3, #0]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	6899      	ldr	r1, [r3, #8]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f000 fb02 	bl	800539c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004da6:	609a      	str	r2, [r3, #8]
      break;
 8004da8:	e03c      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6818      	ldr	r0, [r3, #0]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	6859      	ldr	r1, [r3, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	461a      	mov	r2, r3
 8004db8:	f000 fa76 	bl	80052a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2150      	movs	r1, #80	; 0x50
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 facf 	bl	8005366 <TIM_ITRx_SetConfig>
      break;
 8004dc8:	e02c      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6818      	ldr	r0, [r3, #0]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	6859      	ldr	r1, [r3, #4]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f000 fa95 	bl	8005306 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2160      	movs	r1, #96	; 0x60
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fabf 	bl	8005366 <TIM_ITRx_SetConfig>
      break;
 8004de8:	e01c      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	6859      	ldr	r1, [r3, #4]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	461a      	mov	r2, r3
 8004df8:	f000 fa56 	bl	80052a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2140      	movs	r1, #64	; 0x40
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 faaf 	bl	8005366 <TIM_ITRx_SetConfig>
      break;
 8004e08:	e00c      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4619      	mov	r1, r3
 8004e14:	4610      	mov	r0, r2
 8004e16:	f000 faa6 	bl	8005366 <TIM_ITRx_SetConfig>
      break;
 8004e1a:	e003      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e20:	e000      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
	...

08004e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a34      	ldr	r2, [pc, #208]	; (8004f74 <TIM_Base_SetConfig+0xe4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00f      	beq.n	8004ec8 <TIM_Base_SetConfig+0x38>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eae:	d00b      	beq.n	8004ec8 <TIM_Base_SetConfig+0x38>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a31      	ldr	r2, [pc, #196]	; (8004f78 <TIM_Base_SetConfig+0xe8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d007      	beq.n	8004ec8 <TIM_Base_SetConfig+0x38>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a30      	ldr	r2, [pc, #192]	; (8004f7c <TIM_Base_SetConfig+0xec>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d003      	beq.n	8004ec8 <TIM_Base_SetConfig+0x38>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a2f      	ldr	r2, [pc, #188]	; (8004f80 <TIM_Base_SetConfig+0xf0>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d108      	bne.n	8004eda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a25      	ldr	r2, [pc, #148]	; (8004f74 <TIM_Base_SetConfig+0xe4>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d01b      	beq.n	8004f1a <TIM_Base_SetConfig+0x8a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee8:	d017      	beq.n	8004f1a <TIM_Base_SetConfig+0x8a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a22      	ldr	r2, [pc, #136]	; (8004f78 <TIM_Base_SetConfig+0xe8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d013      	beq.n	8004f1a <TIM_Base_SetConfig+0x8a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a21      	ldr	r2, [pc, #132]	; (8004f7c <TIM_Base_SetConfig+0xec>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00f      	beq.n	8004f1a <TIM_Base_SetConfig+0x8a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a20      	ldr	r2, [pc, #128]	; (8004f80 <TIM_Base_SetConfig+0xf0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00b      	beq.n	8004f1a <TIM_Base_SetConfig+0x8a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a1f      	ldr	r2, [pc, #124]	; (8004f84 <TIM_Base_SetConfig+0xf4>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d007      	beq.n	8004f1a <TIM_Base_SetConfig+0x8a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a1e      	ldr	r2, [pc, #120]	; (8004f88 <TIM_Base_SetConfig+0xf8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d003      	beq.n	8004f1a <TIM_Base_SetConfig+0x8a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a1d      	ldr	r2, [pc, #116]	; (8004f8c <TIM_Base_SetConfig+0xfc>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d108      	bne.n	8004f2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a08      	ldr	r2, [pc, #32]	; (8004f74 <TIM_Base_SetConfig+0xe4>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d103      	bne.n	8004f60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	615a      	str	r2, [r3, #20]
}
 8004f66:	bf00      	nop
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	40010000 	.word	0x40010000
 8004f78:	40000400 	.word	0x40000400
 8004f7c:	40000800 	.word	0x40000800
 8004f80:	40000c00 	.word	0x40000c00
 8004f84:	40014000 	.word	0x40014000
 8004f88:	40014400 	.word	0x40014400
 8004f8c:	40014800 	.word	0x40014800

08004f90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	f023 0201 	bic.w	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0303 	bic.w	r3, r3, #3
 8004fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f023 0302 	bic.w	r3, r3, #2
 8004fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a1c      	ldr	r2, [pc, #112]	; (8005058 <TIM_OC1_SetConfig+0xc8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d10c      	bne.n	8005006 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f023 0308 	bic.w	r3, r3, #8
 8004ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f023 0304 	bic.w	r3, r3, #4
 8005004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a13      	ldr	r2, [pc, #76]	; (8005058 <TIM_OC1_SetConfig+0xc8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d111      	bne.n	8005032 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005014:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800501c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	4313      	orrs	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	621a      	str	r2, [r3, #32]
}
 800504c:	bf00      	nop
 800504e:	371c      	adds	r7, #28
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	40010000 	.word	0x40010000

0800505c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	f023 0210 	bic.w	r2, r3, #16
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	021b      	lsls	r3, r3, #8
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4313      	orrs	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f023 0320 	bic.w	r3, r3, #32
 80050a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a1e      	ldr	r2, [pc, #120]	; (8005130 <TIM_OC2_SetConfig+0xd4>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d10d      	bne.n	80050d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a15      	ldr	r2, [pc, #84]	; (8005130 <TIM_OC2_SetConfig+0xd4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d113      	bne.n	8005108 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	621a      	str	r2, [r3, #32]
}
 8005122:	bf00      	nop
 8005124:	371c      	adds	r7, #28
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40010000 	.word	0x40010000

08005134 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0303 	bic.w	r3, r3, #3
 800516a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800517c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	021b      	lsls	r3, r3, #8
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a1d      	ldr	r2, [pc, #116]	; (8005204 <TIM_OC3_SetConfig+0xd0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d10d      	bne.n	80051ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005198:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a14      	ldr	r2, [pc, #80]	; (8005204 <TIM_OC3_SetConfig+0xd0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d113      	bne.n	80051de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	621a      	str	r2, [r3, #32]
}
 80051f8:	bf00      	nop
 80051fa:	371c      	adds	r7, #28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	40010000 	.word	0x40010000

08005208 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800523e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	021b      	lsls	r3, r3, #8
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005252:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	031b      	lsls	r3, r3, #12
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	4313      	orrs	r3, r2
 800525e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a10      	ldr	r2, [pc, #64]	; (80052a4 <TIM_OC4_SetConfig+0x9c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d109      	bne.n	800527c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800526e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	019b      	lsls	r3, r3, #6
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	621a      	str	r2, [r3, #32]
}
 8005296:	bf00      	nop
 8005298:	371c      	adds	r7, #28
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40010000 	.word	0x40010000

080052a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	f023 0201 	bic.w	r2, r3, #1
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f023 030a 	bic.w	r3, r3, #10
 80052e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	621a      	str	r2, [r3, #32]
}
 80052fa:	bf00      	nop
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005306:	b480      	push	{r7}
 8005308:	b087      	sub	sp, #28
 800530a:	af00      	add	r7, sp, #0
 800530c:	60f8      	str	r0, [r7, #12]
 800530e:	60b9      	str	r1, [r7, #8]
 8005310:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f023 0210 	bic.w	r2, r3, #16
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005330:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	031b      	lsls	r3, r3, #12
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005342:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	621a      	str	r2, [r3, #32]
}
 800535a:	bf00      	nop
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005366:	b480      	push	{r7}
 8005368:	b085      	sub	sp, #20
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	f043 0307 	orr.w	r3, r3, #7
 8005388:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	609a      	str	r2, [r3, #8]
}
 8005390:	bf00      	nop
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	021a      	lsls	r2, r3, #8
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	431a      	orrs	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	609a      	str	r2, [r3, #8]
}
 80053d0:	bf00      	nop
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f003 031f 	and.w	r3, r3, #31
 80053ee:	2201      	movs	r2, #1
 80053f0:	fa02 f303 	lsl.w	r3, r2, r3
 80053f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a1a      	ldr	r2, [r3, #32]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	43db      	mvns	r3, r3
 80053fe:	401a      	ands	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1a      	ldr	r2, [r3, #32]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f003 031f 	and.w	r3, r3, #31
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	fa01 f303 	lsl.w	r3, r1, r3
 8005414:	431a      	orrs	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	621a      	str	r2, [r3, #32]
}
 800541a:	bf00      	nop
 800541c:	371c      	adds	r7, #28
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
	...

08005428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005438:	2b01      	cmp	r3, #1
 800543a:	d101      	bne.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800543c:	2302      	movs	r3, #2
 800543e:	e050      	b.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005466:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a1c      	ldr	r2, [pc, #112]	; (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d018      	beq.n	80054b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548c:	d013      	beq.n	80054b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a18      	ldr	r2, [pc, #96]	; (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00e      	beq.n	80054b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a16      	ldr	r2, [pc, #88]	; (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d009      	beq.n	80054b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a15      	ldr	r2, [pc, #84]	; (80054fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d004      	beq.n	80054b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a13      	ldr	r2, [pc, #76]	; (8005500 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d10c      	bne.n	80054d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40010000 	.word	0x40010000
 80054f4:	40000400 	.word	0x40000400
 80054f8:	40000800 	.word	0x40000800
 80054fc:	40000c00 	.word	0x40000c00
 8005500:	40014000 	.word	0x40014000

08005504 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e03f      	b.n	80055be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d106      	bne.n	8005558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7fd f8e6 	bl	8002724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2224      	movs	r2, #36	; 0x24
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800556e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fe49 	bl	8006208 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	691a      	ldr	r2, [r3, #16]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695a      	ldr	r2, [r3, #20]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005594:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b082      	sub	sp, #8
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e021      	b.n	800561c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2224      	movs	r2, #36	; 0x24
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055ee:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7fd f959 	bl	80028a8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b08a      	sub	sp, #40	; 0x28
 8005628:	af02      	add	r7, sp, #8
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	603b      	str	r3, [r7, #0]
 8005630:	4613      	mov	r3, r2
 8005632:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b20      	cmp	r3, #32
 8005642:	d17c      	bne.n	800573e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_UART_Transmit+0x2c>
 800564a:	88fb      	ldrh	r3, [r7, #6]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e075      	b.n	8005740 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <HAL_UART_Transmit+0x3e>
 800565e:	2302      	movs	r3, #2
 8005660:	e06e      	b.n	8005740 <HAL_UART_Transmit+0x11c>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2221      	movs	r2, #33	; 0x21
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005678:	f7fd fb14 	bl	8002ca4 <HAL_GetTick>
 800567c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	88fa      	ldrh	r2, [r7, #6]
 8005682:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	88fa      	ldrh	r2, [r7, #6]
 8005688:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005692:	d108      	bne.n	80056a6 <HAL_UART_Transmit+0x82>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d104      	bne.n	80056a6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800569c:	2300      	movs	r3, #0
 800569e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	61bb      	str	r3, [r7, #24]
 80056a4:	e003      	b.n	80056ae <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80056b6:	e02a      	b.n	800570e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2200      	movs	r2, #0
 80056c0:	2180      	movs	r1, #128	; 0x80
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 fb5a 	bl	8005d7c <UART_WaitOnFlagUntilTimeout>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e036      	b.n	8005740 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10b      	bne.n	80056f0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	461a      	mov	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056e6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	3302      	adds	r3, #2
 80056ec:	61bb      	str	r3, [r7, #24]
 80056ee:	e007      	b.n	8005700 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	781a      	ldrb	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	3301      	adds	r3, #1
 80056fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005704:	b29b      	uxth	r3, r3
 8005706:	3b01      	subs	r3, #1
 8005708:	b29a      	uxth	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005712:	b29b      	uxth	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1cf      	bne.n	80056b8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2200      	movs	r2, #0
 8005720:	2140      	movs	r1, #64	; 0x40
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 fb2a 	bl	8005d7c <UART_WaitOnFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e006      	b.n	8005740 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	e000      	b.n	8005740 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800573e:	2302      	movs	r3, #2
  }
}
 8005740:	4618      	mov	r0, r3
 8005742:	3720      	adds	r7, #32
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	4613      	mov	r3, r2
 8005754:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b20      	cmp	r3, #32
 8005760:	d130      	bne.n	80057c4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <HAL_UART_Transmit_IT+0x26>
 8005768:	88fb      	ldrh	r3, [r7, #6]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e029      	b.n	80057c6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_UART_Transmit_IT+0x38>
 800577c:	2302      	movs	r3, #2
 800577e:	e022      	b.n	80057c6 <HAL_UART_Transmit_IT+0x7e>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	88fa      	ldrh	r2, [r7, #6]
 8005792:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	88fa      	ldrh	r2, [r7, #6]
 8005798:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2221      	movs	r2, #33	; 0x21
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057be:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	e000      	b.n	80057c6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80057c4:	2302      	movs	r3, #2
  }
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b084      	sub	sp, #16
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	4613      	mov	r3, r2
 80057de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	d11d      	bne.n	8005828 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d002      	beq.n	80057f8 <HAL_UART_Receive_IT+0x26>
 80057f2:	88fb      	ldrh	r3, [r7, #6]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e016      	b.n	800582a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005802:	2b01      	cmp	r3, #1
 8005804:	d101      	bne.n	800580a <HAL_UART_Receive_IT+0x38>
 8005806:	2302      	movs	r3, #2
 8005808:	e00f      	b.n	800582a <HAL_UART_Receive_IT+0x58>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005818:	88fb      	ldrh	r3, [r7, #6]
 800581a:	461a      	mov	r2, r3
 800581c:	68b9      	ldr	r1, [r7, #8]
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 fb1a 	bl	8005e58 <UART_Start_Receive_IT>
 8005824:	4603      	mov	r3, r0
 8005826:	e000      	b.n	800582a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005828:	2302      	movs	r3, #2
  }
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
	...

08005834 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b0ba      	sub	sp, #232	; 0xe8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800585a:	2300      	movs	r3, #0
 800585c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005860:	2300      	movs	r3, #0
 8005862:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005872:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10f      	bne.n	800589a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800587a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b00      	cmp	r3, #0
 8005884:	d009      	beq.n	800589a <HAL_UART_IRQHandler+0x66>
 8005886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800588a:	f003 0320 	and.w	r3, r3, #32
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fbfd 	bl	8006092 <UART_Receive_IT>
      return;
 8005898:	e256      	b.n	8005d48 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800589a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 80de 	beq.w	8005a60 <HAL_UART_IRQHandler+0x22c>
 80058a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d106      	bne.n	80058be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 80d1 	beq.w	8005a60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00b      	beq.n	80058e2 <HAL_UART_IRQHandler+0xae>
 80058ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d005      	beq.n	80058e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	f043 0201 	orr.w	r2, r3, #1
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e6:	f003 0304 	and.w	r3, r3, #4
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00b      	beq.n	8005906 <HAL_UART_IRQHandler+0xd2>
 80058ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d005      	beq.n	8005906 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	f043 0202 	orr.w	r2, r3, #2
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00b      	beq.n	800592a <HAL_UART_IRQHandler+0xf6>
 8005912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	f043 0204 	orr.w	r2, r3, #4
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800592a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d011      	beq.n	800595a <HAL_UART_IRQHandler+0x126>
 8005936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	2b00      	cmp	r3, #0
 8005940:	d105      	bne.n	800594e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d005      	beq.n	800595a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	f043 0208 	orr.w	r2, r3, #8
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 81ed 	beq.w	8005d3e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b00      	cmp	r3, #0
 800596e:	d008      	beq.n	8005982 <HAL_UART_IRQHandler+0x14e>
 8005970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fb88 	bl	8006092 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598c:	2b40      	cmp	r3, #64	; 0x40
 800598e:	bf0c      	ite	eq
 8005990:	2301      	moveq	r3, #1
 8005992:	2300      	movne	r3, #0
 8005994:	b2db      	uxtb	r3, r3
 8005996:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d103      	bne.n	80059ae <HAL_UART_IRQHandler+0x17a>
 80059a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d04f      	beq.n	8005a4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fa90 	bl	8005ed4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059be:	2b40      	cmp	r3, #64	; 0x40
 80059c0:	d141      	bne.n	8005a46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3314      	adds	r3, #20
 80059c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059d0:	e853 3f00 	ldrex	r3, [r3]
 80059d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3314      	adds	r3, #20
 80059ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059fe:	e841 2300 	strex	r3, r2, [r1]
 8005a02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1d9      	bne.n	80059c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d013      	beq.n	8005a3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1a:	4a7d      	ldr	r2, [pc, #500]	; (8005c10 <HAL_UART_IRQHandler+0x3dc>)
 8005a1c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fd fb21 	bl	800306a <HAL_DMA_Abort_IT>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d016      	beq.n	8005a5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a38:	4610      	mov	r0, r2
 8005a3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a3c:	e00e      	b.n	8005a5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fc fb86 	bl	8002150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a44:	e00a      	b.n	8005a5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7fc fb82 	bl	8002150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4c:	e006      	b.n	8005a5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7fc fb7e 	bl	8002150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a5a:	e170      	b.n	8005d3e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a5c:	bf00      	nop
    return;
 8005a5e:	e16e      	b.n	8005d3e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	f040 814a 	bne.w	8005cfe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a6e:	f003 0310 	and.w	r3, r3, #16
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 8143 	beq.w	8005cfe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a7c:	f003 0310 	and.w	r3, r3, #16
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 813c 	beq.w	8005cfe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a86:	2300      	movs	r3, #0
 8005a88:	60bb      	str	r3, [r7, #8]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	60bb      	str	r3, [r7, #8]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	60bb      	str	r3, [r7, #8]
 8005a9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa6:	2b40      	cmp	r3, #64	; 0x40
 8005aa8:	f040 80b4 	bne.w	8005c14 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ab8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 8140 	beq.w	8005d42 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ac6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005aca:	429a      	cmp	r2, r3
 8005acc:	f080 8139 	bcs.w	8005d42 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ad6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ae2:	f000 8088 	beq.w	8005bf6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	330c      	adds	r3, #12
 8005aec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005af4:	e853 3f00 	ldrex	r3, [r3]
 8005af8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005afc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	330c      	adds	r3, #12
 8005b0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1d9      	bne.n	8005ae6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3314      	adds	r3, #20
 8005b38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b3c:	e853 3f00 	ldrex	r3, [r3]
 8005b40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b44:	f023 0301 	bic.w	r3, r3, #1
 8005b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	3314      	adds	r3, #20
 8005b52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e1      	bne.n	8005b32 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3314      	adds	r3, #20
 8005b74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3314      	adds	r3, #20
 8005b8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b9a:	e841 2300 	strex	r3, r2, [r1]
 8005b9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1e3      	bne.n	8005b6e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	330c      	adds	r3, #12
 8005bba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bbe:	e853 3f00 	ldrex	r3, [r3]
 8005bc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bc6:	f023 0310 	bic.w	r3, r3, #16
 8005bca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	330c      	adds	r3, #12
 8005bd4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005bd8:	65ba      	str	r2, [r7, #88]	; 0x58
 8005bda:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005be0:	e841 2300 	strex	r3, r2, [r1]
 8005be4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1e3      	bne.n	8005bb4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7fd f9ca 	bl	8002f8a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	4619      	mov	r1, r3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f8ac 	bl	8005d64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c0c:	e099      	b.n	8005d42 <HAL_UART_IRQHandler+0x50e>
 8005c0e:	bf00      	nop
 8005c10:	08005f9b 	.word	0x08005f9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 808b 	beq.w	8005d46 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 8086 	beq.w	8005d46 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	330c      	adds	r3, #12
 8005c40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c44:	e853 3f00 	ldrex	r3, [r3]
 8005c48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	330c      	adds	r3, #12
 8005c5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c5e:	647a      	str	r2, [r7, #68]	; 0x44
 8005c60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c66:	e841 2300 	strex	r3, r2, [r1]
 8005c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1e3      	bne.n	8005c3a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3314      	adds	r3, #20
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	623b      	str	r3, [r7, #32]
   return(result);
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	f023 0301 	bic.w	r3, r3, #1
 8005c88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3314      	adds	r3, #20
 8005c92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c96:	633a      	str	r2, [r7, #48]	; 0x30
 8005c98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e3      	bne.n	8005c72 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	330c      	adds	r3, #12
 8005cbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	e853 3f00 	ldrex	r3, [r3]
 8005cc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 0310 	bic.w	r3, r3, #16
 8005cce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	330c      	adds	r3, #12
 8005cd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005cdc:	61fa      	str	r2, [r7, #28]
 8005cde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce0:	69b9      	ldr	r1, [r7, #24]
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	e841 2300 	strex	r3, r2, [r1]
 8005ce8:	617b      	str	r3, [r7, #20]
   return(result);
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e3      	bne.n	8005cb8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f834 	bl	8005d64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cfc:	e023      	b.n	8005d46 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d009      	beq.n	8005d1e <HAL_UART_IRQHandler+0x4ea>
 8005d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f953 	bl	8005fc2 <UART_Transmit_IT>
    return;
 8005d1c:	e014      	b.n	8005d48 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00e      	beq.n	8005d48 <HAL_UART_IRQHandler+0x514>
 8005d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d008      	beq.n	8005d48 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f993 	bl	8006062 <UART_EndTransmit_IT>
    return;
 8005d3c:	e004      	b.n	8005d48 <HAL_UART_IRQHandler+0x514>
    return;
 8005d3e:	bf00      	nop
 8005d40:	e002      	b.n	8005d48 <HAL_UART_IRQHandler+0x514>
      return;
 8005d42:	bf00      	nop
 8005d44:	e000      	b.n	8005d48 <HAL_UART_IRQHandler+0x514>
      return;
 8005d46:	bf00      	nop
  }
}
 8005d48:	37e8      	adds	r7, #232	; 0xe8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop

08005d50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b090      	sub	sp, #64	; 0x40
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	603b      	str	r3, [r7, #0]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d8c:	e050      	b.n	8005e30 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d94:	d04c      	beq.n	8005e30 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d007      	beq.n	8005dac <UART_WaitOnFlagUntilTimeout+0x30>
 8005d9c:	f7fc ff82 	bl	8002ca4 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d241      	bcs.n	8005e30 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	330c      	adds	r3, #12
 8005db2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	e853 3f00 	ldrex	r3, [r3]
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	330c      	adds	r3, #12
 8005dca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005dcc:	637a      	str	r2, [r7, #52]	; 0x34
 8005dce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e5      	bne.n	8005dac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3314      	adds	r3, #20
 8005de6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	e853 3f00 	ldrex	r3, [r3]
 8005dee:	613b      	str	r3, [r7, #16]
   return(result);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f023 0301 	bic.w	r3, r3, #1
 8005df6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3314      	adds	r3, #20
 8005dfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e00:	623a      	str	r2, [r7, #32]
 8005e02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e04:	69f9      	ldr	r1, [r7, #28]
 8005e06:	6a3a      	ldr	r2, [r7, #32]
 8005e08:	e841 2300 	strex	r3, r2, [r1]
 8005e0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1e5      	bne.n	8005de0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e00f      	b.n	8005e50 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	bf0c      	ite	eq
 8005e40:	2301      	moveq	r3, #1
 8005e42:	2300      	movne	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	461a      	mov	r2, r3
 8005e48:	79fb      	ldrb	r3, [r7, #7]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d09f      	beq.n	8005d8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3740      	adds	r7, #64	; 0x40
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	4613      	mov	r3, r2
 8005e64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	88fa      	ldrh	r2, [r7, #6]
 8005e70:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	88fa      	ldrh	r2, [r7, #6]
 8005e76:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2222      	movs	r2, #34	; 0x22
 8005e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d007      	beq.n	8005ea6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68da      	ldr	r2, [r3, #12]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ea4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	695a      	ldr	r2, [r3, #20]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f042 0201 	orr.w	r2, r2, #1
 8005eb4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68da      	ldr	r2, [r3, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f042 0220 	orr.w	r2, r2, #32
 8005ec4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b095      	sub	sp, #84	; 0x54
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	330c      	adds	r3, #12
 8005ee2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee6:	e853 3f00 	ldrex	r3, [r3]
 8005eea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	330c      	adds	r3, #12
 8005efa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005efc:	643a      	str	r2, [r7, #64]	; 0x40
 8005efe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f04:	e841 2300 	strex	r3, r2, [r1]
 8005f08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1e5      	bne.n	8005edc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3314      	adds	r3, #20
 8005f16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	f023 0301 	bic.w	r3, r3, #1
 8005f26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3314      	adds	r3, #20
 8005f2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f38:	e841 2300 	strex	r3, r2, [r1]
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e5      	bne.n	8005f10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d119      	bne.n	8005f80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	330c      	adds	r3, #12
 8005f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f023 0310 	bic.w	r3, r3, #16
 8005f62:	647b      	str	r3, [r7, #68]	; 0x44
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	330c      	adds	r3, #12
 8005f6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f6c:	61ba      	str	r2, [r7, #24]
 8005f6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f70:	6979      	ldr	r1, [r7, #20]
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	e841 2300 	strex	r3, r2, [r1]
 8005f78:	613b      	str	r3, [r7, #16]
   return(result);
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e5      	bne.n	8005f4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f8e:	bf00      	nop
 8005f90:	3754      	adds	r7, #84	; 0x54
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b084      	sub	sp, #16
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f7fc f8cb 	bl	8002150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fba:	bf00      	nop
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b21      	cmp	r3, #33	; 0x21
 8005fd4:	d13e      	bne.n	8006054 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fde:	d114      	bne.n	800600a <UART_Transmit_IT+0x48>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d110      	bne.n	800600a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ffc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	1c9a      	adds	r2, r3, #2
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	621a      	str	r2, [r3, #32]
 8006008:	e008      	b.n	800601c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	1c59      	adds	r1, r3, #1
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6211      	str	r1, [r2, #32]
 8006014:	781a      	ldrb	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006020:	b29b      	uxth	r3, r3
 8006022:	3b01      	subs	r3, #1
 8006024:	b29b      	uxth	r3, r3
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	4619      	mov	r1, r3
 800602a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10f      	bne.n	8006050 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800603e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800604e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	e000      	b.n	8006056 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006054:	2302      	movs	r3, #2
  }
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b082      	sub	sp, #8
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68da      	ldr	r2, [r3, #12]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006078:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff fe64 	bl	8005d50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b08c      	sub	sp, #48	; 0x30
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b22      	cmp	r3, #34	; 0x22
 80060a4:	f040 80ab 	bne.w	80061fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b0:	d117      	bne.n	80060e2 <UART_Receive_IT+0x50>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d113      	bne.n	80060e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	1c9a      	adds	r2, r3, #2
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	629a      	str	r2, [r3, #40]	; 0x28
 80060e0:	e026      	b.n	8006130 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80060e8:	2300      	movs	r3, #0
 80060ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f4:	d007      	beq.n	8006106 <UART_Receive_IT+0x74>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10a      	bne.n	8006114 <UART_Receive_IT+0x82>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d106      	bne.n	8006114 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	b2da      	uxtb	r2, r3
 800610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	e008      	b.n	8006126 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	b2db      	uxtb	r3, r3
 800611c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006120:	b2da      	uxtb	r2, r3
 8006122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006124:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006134:	b29b      	uxth	r3, r3
 8006136:	3b01      	subs	r3, #1
 8006138:	b29b      	uxth	r3, r3
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	4619      	mov	r1, r3
 800613e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006140:	2b00      	cmp	r3, #0
 8006142:	d15a      	bne.n	80061fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0220 	bic.w	r2, r2, #32
 8006152:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006162:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695a      	ldr	r2, [r3, #20]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0201 	bic.w	r2, r2, #1
 8006172:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2220      	movs	r2, #32
 8006178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006180:	2b01      	cmp	r3, #1
 8006182:	d135      	bne.n	80061f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	330c      	adds	r3, #12
 8006190:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	613b      	str	r3, [r7, #16]
   return(result);
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f023 0310 	bic.w	r3, r3, #16
 80061a0:	627b      	str	r3, [r7, #36]	; 0x24
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	330c      	adds	r3, #12
 80061a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061aa:	623a      	str	r2, [r7, #32]
 80061ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	69f9      	ldr	r1, [r7, #28]
 80061b0:	6a3a      	ldr	r2, [r7, #32]
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1e5      	bne.n	800618a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0310 	and.w	r3, r3, #16
 80061c8:	2b10      	cmp	r3, #16
 80061ca:	d10a      	bne.n	80061e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061cc:	2300      	movs	r3, #0
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff fdbb 	bl	8005d64 <HAL_UARTEx_RxEventCallback>
 80061ee:	e002      	b.n	80061f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7fc f803 	bl	80021fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	e002      	b.n	8006200 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	e000      	b.n	8006200 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80061fe:	2302      	movs	r3, #2
  }
}
 8006200:	4618      	mov	r0, r3
 8006202:	3730      	adds	r7, #48	; 0x30
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800620c:	b0c0      	sub	sp, #256	; 0x100
 800620e:	af00      	add	r7, sp, #0
 8006210:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006224:	68d9      	ldr	r1, [r3, #12]
 8006226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	ea40 0301 	orr.w	r3, r0, r1
 8006230:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	431a      	orrs	r2, r3
 8006240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	431a      	orrs	r2, r3
 8006248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	4313      	orrs	r3, r2
 8006250:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006260:	f021 010c 	bic.w	r1, r1, #12
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800626e:	430b      	orrs	r3, r1
 8006270:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800627e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006282:	6999      	ldr	r1, [r3, #24]
 8006284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	ea40 0301 	orr.w	r3, r0, r1
 800628e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	4b8f      	ldr	r3, [pc, #572]	; (80064d4 <UART_SetConfig+0x2cc>)
 8006298:	429a      	cmp	r2, r3
 800629a:	d005      	beq.n	80062a8 <UART_SetConfig+0xa0>
 800629c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	4b8d      	ldr	r3, [pc, #564]	; (80064d8 <UART_SetConfig+0x2d0>)
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d104      	bne.n	80062b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062a8:	f7fd fde2 	bl	8003e70 <HAL_RCC_GetPCLK2Freq>
 80062ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062b0:	e003      	b.n	80062ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062b2:	f7fd fdc9 	bl	8003e48 <HAL_RCC_GetPCLK1Freq>
 80062b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c4:	f040 810c 	bne.w	80064e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062cc:	2200      	movs	r2, #0
 80062ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062da:	4622      	mov	r2, r4
 80062dc:	462b      	mov	r3, r5
 80062de:	1891      	adds	r1, r2, r2
 80062e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80062e2:	415b      	adcs	r3, r3
 80062e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80062ea:	4621      	mov	r1, r4
 80062ec:	eb12 0801 	adds.w	r8, r2, r1
 80062f0:	4629      	mov	r1, r5
 80062f2:	eb43 0901 	adc.w	r9, r3, r1
 80062f6:	f04f 0200 	mov.w	r2, #0
 80062fa:	f04f 0300 	mov.w	r3, #0
 80062fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006302:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006306:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800630a:	4690      	mov	r8, r2
 800630c:	4699      	mov	r9, r3
 800630e:	4623      	mov	r3, r4
 8006310:	eb18 0303 	adds.w	r3, r8, r3
 8006314:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006318:	462b      	mov	r3, r5
 800631a:	eb49 0303 	adc.w	r3, r9, r3
 800631e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800632e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006332:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006336:	460b      	mov	r3, r1
 8006338:	18db      	adds	r3, r3, r3
 800633a:	653b      	str	r3, [r7, #80]	; 0x50
 800633c:	4613      	mov	r3, r2
 800633e:	eb42 0303 	adc.w	r3, r2, r3
 8006342:	657b      	str	r3, [r7, #84]	; 0x54
 8006344:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006348:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800634c:	f7f9 ffb0 	bl	80002b0 <__aeabi_uldivmod>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4b61      	ldr	r3, [pc, #388]	; (80064dc <UART_SetConfig+0x2d4>)
 8006356:	fba3 2302 	umull	r2, r3, r3, r2
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	011c      	lsls	r4, r3, #4
 800635e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006362:	2200      	movs	r2, #0
 8006364:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006368:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800636c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006370:	4642      	mov	r2, r8
 8006372:	464b      	mov	r3, r9
 8006374:	1891      	adds	r1, r2, r2
 8006376:	64b9      	str	r1, [r7, #72]	; 0x48
 8006378:	415b      	adcs	r3, r3
 800637a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800637c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006380:	4641      	mov	r1, r8
 8006382:	eb12 0a01 	adds.w	sl, r2, r1
 8006386:	4649      	mov	r1, r9
 8006388:	eb43 0b01 	adc.w	fp, r3, r1
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	f04f 0300 	mov.w	r3, #0
 8006394:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006398:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800639c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063a0:	4692      	mov	sl, r2
 80063a2:	469b      	mov	fp, r3
 80063a4:	4643      	mov	r3, r8
 80063a6:	eb1a 0303 	adds.w	r3, sl, r3
 80063aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063ae:	464b      	mov	r3, r9
 80063b0:	eb4b 0303 	adc.w	r3, fp, r3
 80063b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063cc:	460b      	mov	r3, r1
 80063ce:	18db      	adds	r3, r3, r3
 80063d0:	643b      	str	r3, [r7, #64]	; 0x40
 80063d2:	4613      	mov	r3, r2
 80063d4:	eb42 0303 	adc.w	r3, r2, r3
 80063d8:	647b      	str	r3, [r7, #68]	; 0x44
 80063da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80063e2:	f7f9 ff65 	bl	80002b0 <__aeabi_uldivmod>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4611      	mov	r1, r2
 80063ec:	4b3b      	ldr	r3, [pc, #236]	; (80064dc <UART_SetConfig+0x2d4>)
 80063ee:	fba3 2301 	umull	r2, r3, r3, r1
 80063f2:	095b      	lsrs	r3, r3, #5
 80063f4:	2264      	movs	r2, #100	; 0x64
 80063f6:	fb02 f303 	mul.w	r3, r2, r3
 80063fa:	1acb      	subs	r3, r1, r3
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006402:	4b36      	ldr	r3, [pc, #216]	; (80064dc <UART_SetConfig+0x2d4>)
 8006404:	fba3 2302 	umull	r2, r3, r3, r2
 8006408:	095b      	lsrs	r3, r3, #5
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006410:	441c      	add	r4, r3
 8006412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006416:	2200      	movs	r2, #0
 8006418:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800641c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006420:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006424:	4642      	mov	r2, r8
 8006426:	464b      	mov	r3, r9
 8006428:	1891      	adds	r1, r2, r2
 800642a:	63b9      	str	r1, [r7, #56]	; 0x38
 800642c:	415b      	adcs	r3, r3
 800642e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006430:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006434:	4641      	mov	r1, r8
 8006436:	1851      	adds	r1, r2, r1
 8006438:	6339      	str	r1, [r7, #48]	; 0x30
 800643a:	4649      	mov	r1, r9
 800643c:	414b      	adcs	r3, r1
 800643e:	637b      	str	r3, [r7, #52]	; 0x34
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800644c:	4659      	mov	r1, fp
 800644e:	00cb      	lsls	r3, r1, #3
 8006450:	4651      	mov	r1, sl
 8006452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006456:	4651      	mov	r1, sl
 8006458:	00ca      	lsls	r2, r1, #3
 800645a:	4610      	mov	r0, r2
 800645c:	4619      	mov	r1, r3
 800645e:	4603      	mov	r3, r0
 8006460:	4642      	mov	r2, r8
 8006462:	189b      	adds	r3, r3, r2
 8006464:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006468:	464b      	mov	r3, r9
 800646a:	460a      	mov	r2, r1
 800646c:	eb42 0303 	adc.w	r3, r2, r3
 8006470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006480:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006484:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006488:	460b      	mov	r3, r1
 800648a:	18db      	adds	r3, r3, r3
 800648c:	62bb      	str	r3, [r7, #40]	; 0x28
 800648e:	4613      	mov	r3, r2
 8006490:	eb42 0303 	adc.w	r3, r2, r3
 8006494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006496:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800649a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800649e:	f7f9 ff07 	bl	80002b0 <__aeabi_uldivmod>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	4b0d      	ldr	r3, [pc, #52]	; (80064dc <UART_SetConfig+0x2d4>)
 80064a8:	fba3 1302 	umull	r1, r3, r3, r2
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	2164      	movs	r1, #100	; 0x64
 80064b0:	fb01 f303 	mul.w	r3, r1, r3
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	3332      	adds	r3, #50	; 0x32
 80064ba:	4a08      	ldr	r2, [pc, #32]	; (80064dc <UART_SetConfig+0x2d4>)
 80064bc:	fba2 2303 	umull	r2, r3, r2, r3
 80064c0:	095b      	lsrs	r3, r3, #5
 80064c2:	f003 0207 	and.w	r2, r3, #7
 80064c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4422      	add	r2, r4
 80064ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064d0:	e106      	b.n	80066e0 <UART_SetConfig+0x4d8>
 80064d2:	bf00      	nop
 80064d4:	40011000 	.word	0x40011000
 80064d8:	40011400 	.word	0x40011400
 80064dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064e4:	2200      	movs	r2, #0
 80064e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80064ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80064f2:	4642      	mov	r2, r8
 80064f4:	464b      	mov	r3, r9
 80064f6:	1891      	adds	r1, r2, r2
 80064f8:	6239      	str	r1, [r7, #32]
 80064fa:	415b      	adcs	r3, r3
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
 80064fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006502:	4641      	mov	r1, r8
 8006504:	1854      	adds	r4, r2, r1
 8006506:	4649      	mov	r1, r9
 8006508:	eb43 0501 	adc.w	r5, r3, r1
 800650c:	f04f 0200 	mov.w	r2, #0
 8006510:	f04f 0300 	mov.w	r3, #0
 8006514:	00eb      	lsls	r3, r5, #3
 8006516:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800651a:	00e2      	lsls	r2, r4, #3
 800651c:	4614      	mov	r4, r2
 800651e:	461d      	mov	r5, r3
 8006520:	4643      	mov	r3, r8
 8006522:	18e3      	adds	r3, r4, r3
 8006524:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006528:	464b      	mov	r3, r9
 800652a:	eb45 0303 	adc.w	r3, r5, r3
 800652e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800653e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	f04f 0300 	mov.w	r3, #0
 800654a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800654e:	4629      	mov	r1, r5
 8006550:	008b      	lsls	r3, r1, #2
 8006552:	4621      	mov	r1, r4
 8006554:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006558:	4621      	mov	r1, r4
 800655a:	008a      	lsls	r2, r1, #2
 800655c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006560:	f7f9 fea6 	bl	80002b0 <__aeabi_uldivmod>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4b60      	ldr	r3, [pc, #384]	; (80066ec <UART_SetConfig+0x4e4>)
 800656a:	fba3 2302 	umull	r2, r3, r3, r2
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	011c      	lsls	r4, r3, #4
 8006572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006576:	2200      	movs	r2, #0
 8006578:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800657c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006580:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006584:	4642      	mov	r2, r8
 8006586:	464b      	mov	r3, r9
 8006588:	1891      	adds	r1, r2, r2
 800658a:	61b9      	str	r1, [r7, #24]
 800658c:	415b      	adcs	r3, r3
 800658e:	61fb      	str	r3, [r7, #28]
 8006590:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006594:	4641      	mov	r1, r8
 8006596:	1851      	adds	r1, r2, r1
 8006598:	6139      	str	r1, [r7, #16]
 800659a:	4649      	mov	r1, r9
 800659c:	414b      	adcs	r3, r1
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065ac:	4659      	mov	r1, fp
 80065ae:	00cb      	lsls	r3, r1, #3
 80065b0:	4651      	mov	r1, sl
 80065b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065b6:	4651      	mov	r1, sl
 80065b8:	00ca      	lsls	r2, r1, #3
 80065ba:	4610      	mov	r0, r2
 80065bc:	4619      	mov	r1, r3
 80065be:	4603      	mov	r3, r0
 80065c0:	4642      	mov	r2, r8
 80065c2:	189b      	adds	r3, r3, r2
 80065c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065c8:	464b      	mov	r3, r9
 80065ca:	460a      	mov	r2, r1
 80065cc:	eb42 0303 	adc.w	r3, r2, r3
 80065d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80065de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	f04f 0300 	mov.w	r3, #0
 80065e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80065ec:	4649      	mov	r1, r9
 80065ee:	008b      	lsls	r3, r1, #2
 80065f0:	4641      	mov	r1, r8
 80065f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065f6:	4641      	mov	r1, r8
 80065f8:	008a      	lsls	r2, r1, #2
 80065fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80065fe:	f7f9 fe57 	bl	80002b0 <__aeabi_uldivmod>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	4611      	mov	r1, r2
 8006608:	4b38      	ldr	r3, [pc, #224]	; (80066ec <UART_SetConfig+0x4e4>)
 800660a:	fba3 2301 	umull	r2, r3, r3, r1
 800660e:	095b      	lsrs	r3, r3, #5
 8006610:	2264      	movs	r2, #100	; 0x64
 8006612:	fb02 f303 	mul.w	r3, r2, r3
 8006616:	1acb      	subs	r3, r1, r3
 8006618:	011b      	lsls	r3, r3, #4
 800661a:	3332      	adds	r3, #50	; 0x32
 800661c:	4a33      	ldr	r2, [pc, #204]	; (80066ec <UART_SetConfig+0x4e4>)
 800661e:	fba2 2303 	umull	r2, r3, r2, r3
 8006622:	095b      	lsrs	r3, r3, #5
 8006624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006628:	441c      	add	r4, r3
 800662a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800662e:	2200      	movs	r2, #0
 8006630:	673b      	str	r3, [r7, #112]	; 0x70
 8006632:	677a      	str	r2, [r7, #116]	; 0x74
 8006634:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006638:	4642      	mov	r2, r8
 800663a:	464b      	mov	r3, r9
 800663c:	1891      	adds	r1, r2, r2
 800663e:	60b9      	str	r1, [r7, #8]
 8006640:	415b      	adcs	r3, r3
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006648:	4641      	mov	r1, r8
 800664a:	1851      	adds	r1, r2, r1
 800664c:	6039      	str	r1, [r7, #0]
 800664e:	4649      	mov	r1, r9
 8006650:	414b      	adcs	r3, r1
 8006652:	607b      	str	r3, [r7, #4]
 8006654:	f04f 0200 	mov.w	r2, #0
 8006658:	f04f 0300 	mov.w	r3, #0
 800665c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006660:	4659      	mov	r1, fp
 8006662:	00cb      	lsls	r3, r1, #3
 8006664:	4651      	mov	r1, sl
 8006666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800666a:	4651      	mov	r1, sl
 800666c:	00ca      	lsls	r2, r1, #3
 800666e:	4610      	mov	r0, r2
 8006670:	4619      	mov	r1, r3
 8006672:	4603      	mov	r3, r0
 8006674:	4642      	mov	r2, r8
 8006676:	189b      	adds	r3, r3, r2
 8006678:	66bb      	str	r3, [r7, #104]	; 0x68
 800667a:	464b      	mov	r3, r9
 800667c:	460a      	mov	r2, r1
 800667e:	eb42 0303 	adc.w	r3, r2, r3
 8006682:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	663b      	str	r3, [r7, #96]	; 0x60
 800668e:	667a      	str	r2, [r7, #100]	; 0x64
 8006690:	f04f 0200 	mov.w	r2, #0
 8006694:	f04f 0300 	mov.w	r3, #0
 8006698:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800669c:	4649      	mov	r1, r9
 800669e:	008b      	lsls	r3, r1, #2
 80066a0:	4641      	mov	r1, r8
 80066a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066a6:	4641      	mov	r1, r8
 80066a8:	008a      	lsls	r2, r1, #2
 80066aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066ae:	f7f9 fdff 	bl	80002b0 <__aeabi_uldivmod>
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	4b0d      	ldr	r3, [pc, #52]	; (80066ec <UART_SetConfig+0x4e4>)
 80066b8:	fba3 1302 	umull	r1, r3, r3, r2
 80066bc:	095b      	lsrs	r3, r3, #5
 80066be:	2164      	movs	r1, #100	; 0x64
 80066c0:	fb01 f303 	mul.w	r3, r1, r3
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	3332      	adds	r3, #50	; 0x32
 80066ca:	4a08      	ldr	r2, [pc, #32]	; (80066ec <UART_SetConfig+0x4e4>)
 80066cc:	fba2 2303 	umull	r2, r3, r2, r3
 80066d0:	095b      	lsrs	r3, r3, #5
 80066d2:	f003 020f 	and.w	r2, r3, #15
 80066d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4422      	add	r2, r4
 80066de:	609a      	str	r2, [r3, #8]
}
 80066e0:	bf00      	nop
 80066e2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80066e6:	46bd      	mov	sp, r7
 80066e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066ec:	51eb851f 	.word	0x51eb851f

080066f0 <HW_RESET>:
#include "main.h"

//No se puede quedar esperando en las funciones, hay que detectar a situaci�n y salir del bucle.
//pensar que solo entra cuando recibe datos, si no vuelve a entrar queda ah� eternamentes.
void HW_RESET(struct WIFI *a)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_RESET);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6818      	ldr	r0, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	889b      	ldrh	r3, [r3, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	4619      	mov	r1, r3
 8006704:	f7fc ff3c 	bl	8003580 <HAL_GPIO_WritePin>
    ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8006708:	2115      	movs	r1, #21
 800670a:	480b      	ldr	r0, [pc, #44]	; (8006738 <HW_RESET+0x48>)
 800670c:	f7fa ff72 	bl	80015f4 <ITM0_Write>
    HAL_Delay(2000);											//Tiempo de reset del módulo
 8006710:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006714:	f7fc fad2 	bl	8002cbc <HAL_Delay>
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
 8006718:	210e      	movs	r1, #14
 800671a:	4808      	ldr	r0, [pc, #32]	; (800673c <HW_RESET+0x4c>)
 800671c:	f7fa ff6a 	bl	80015f4 <ITM0_Write>
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6818      	ldr	r0, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	889b      	ldrh	r3, [r3, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	4619      	mov	r1, r3
 800672c:	f7fc ff28 	bl	8003580 <HAL_GPIO_WritePin>
}
 8006730:	bf00      	nop
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	0800fe58 	.word	0x0800fe58
 800673c:	0800fe70 	.word	0x0800fe70

08006740 <NOP>:
void NOP(struct WIFI *a)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=0;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <MUX>:
void MUX(struct WIFI *a)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2204      	movs	r2, #4
 80067d0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <IPDef>:
void IPDef(struct WIFI *a)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2205      	movs	r2, #5
 80067fc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2206      	movs	r2, #6
 8006854:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2208      	movs	r2, #8
 8006880:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2209      	movs	r2, #9
 80068ac:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2207      	movs	r2, #7
 80068d8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <Inicializar>:
void Inicializar(struct WIFI *a)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[1024]='\0'; //a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
a->_data2SND[64]='\0';			//Data a enviar por TCP
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
a->_uart2snd[1024]='\0';//a->_uart2snd[512]='\0';			//Datos a enviar por UART
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 2898 	strb.w	r2, [r3, #2200]	; 0x898
a->_uartRCVD[1024]='\0';//a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2a98 	strb.w	r2, [r3, #2712]	; 0xa98
a->_uartRCVD_tok[1024]='\0';//a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2c98 	strb.w	r2, [r3, #3224]	; 0xc98
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_instruccion=0;				//Funcion que se desea realizar
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_ejecucion=0;				//Funcion en ejecucion	
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2af8 	strb.w	r2, [r3, #2808]	; 0xaf8
a->_ticks=0;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_ticks2=0;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug=0;					//utilizada par fines de debugging
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_str=0;				//utilizada par fines de debugging
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_pos=0;				//utilizada par fines de debugging
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
a->_debug_chrs=0;				//utilizada par fines de debugging
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_rx_ok=0;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
a->_debug_rx_no_ok=0;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
a->_debug_SEND_OK=0;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_CLOSED=0;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38
a->_debug_WF_DISCONNECT=0;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
a->_debug_FAIL=0;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
a->_debug_CONNECT=0;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_count=0;				//Cuento la catidad de ipds	
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count_old=0;			//Cuento la catidad de ipds
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count2=0;				//SEND OK para enviar datos
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count4=0;				//SEDN OK recibido directo
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count5=0;				//Cuento la catidad de ipds	
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count6=0;				//Cuento la catidad de ipds	
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count7=0;				//Cuento la catidad de ipds
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_debug_count8=0;				//Cuento la catidad de ipds
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_count9=0;				//Cuento la catidad de ipds
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count10=0;			//Cuento la catidad de ipds
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_subpaso=0;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
a->_overflowVector=512;			//Maximo tamaño del vector al procesar un +IPD
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a86:	f8c3 2d54 	str.w	r2, [r3, #3412]	; 0xd54
}
 8006a8a:	bf00      	nop
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
	...

08006a98 <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 8006a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a9a:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006a9e:	af06      	add	r7, sp, #24
 8006aa0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006aa4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006aa8:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8006abc:	2300      	movs	r3, #0
 8006abe:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 8006ac8:	2320      	movs	r3, #32
 8006aca:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 8006ace:	2322      	movs	r3, #34	; 0x22
 8006ad0:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 8006ad4:	4b7c      	ldr	r3, [pc, #496]	; (8006cc8 <AT_ESP8266_ND+0x230>)
 8006ad6:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 8006ada:	4a7c      	ldr	r2, [pc, #496]	; (8006ccc <AT_ESP8266_ND+0x234>)
 8006adc:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8006ae0:	6812      	ldr	r2, [r2, #0]
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	8019      	strh	r1, [r3, #0]
 8006ae6:	3302      	adds	r3, #2
 8006ae8:	0c12      	lsrs	r2, r2, #16
 8006aea:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 8006aec:	f642 4322 	movw	r3, #11298	; 0x2c22
 8006af0:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 8006af4:	f640 230d 	movw	r3, #2573	; 0xa0d
 8006af8:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8006b02:	2300      	movs	r3, #0
 8006b04:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 8006b08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 8006b18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7f9 fb64 	bl	80001f4 <strlen>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 8006b3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 8006b4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7f9 fb49 	bl	80001f4 <strlen>
 8006b62:	4603      	mov	r3, r0
 8006b64:	461a      	mov	r2, r3
 8006b66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
	 // Si tiene datos recibidos los +IPD proceso = saco lo correspondiente al +IPD a->_uartRCVD_tok y dejo el vector original a->_uartRCVD




	 a->_n_fcomp=strlen("\r\n+IPD");
 8006b74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2206      	movs	r2, #6
 8006b80:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006b84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006b92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006ba0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ba4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006bae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006bbc:	603b      	str	r3, [r7, #0]
 8006bbe:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006bc2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006bc6:	6812      	ldr	r2, [r2, #0]
 8006bc8:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006bcc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006bd0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006bd4:	6809      	ldr	r1, [r1, #0]
 8006bd6:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006bda:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006bde:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006be2:	6800      	ldr	r0, [r0, #0]
 8006be4:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006be8:	2300      	movs	r3, #0
 8006bea:	9305      	str	r3, [sp, #20]
 8006bec:	9004      	str	r0, [sp, #16]
 8006bee:	9103      	str	r1, [sp, #12]
 8006bf0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006bf4:	9102      	str	r1, [sp, #8]
 8006bf6:	9201      	str	r2, [sp, #4]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	4633      	mov	r3, r6
 8006bfe:	4a34      	ldr	r2, [pc, #208]	; (8006cd0 <AT_ESP8266_ND+0x238>)
 8006c00:	4629      	mov	r1, r5
 8006c02:	4620      	mov	r0, r4
 8006c04:	f007 f8de 	bl	800ddc4 <FT_String_ND>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	f040 8140 	bne.w	8006e90 <AT_ESP8266_ND+0x3f8>
		 {
			a->_n_fcomp=strlen("\r\n+IPD");
 8006c10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2206      	movs	r2, #6
 8006c1c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
			if(a->_TCP_Local_Server_EN==0)
 8006c20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d150      	bne.n	8006cd4 <AT_ESP8266_ND+0x23c>
				{
					a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATA);
 8006c32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006c40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006c4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006c5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006c70:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006c74:	6812      	ldr	r2, [r2, #0]
 8006c76:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006c7a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006c7e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006c82:	6809      	ldr	r1, [r1, #0]
 8006c84:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006c88:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006c8c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006c90:	6800      	ldr	r0, [r0, #0]
 8006c92:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006c96:	2304      	movs	r3, #4
 8006c98:	9305      	str	r3, [sp, #20]
 8006c9a:	9004      	str	r0, [sp, #16]
 8006c9c:	9103      	str	r1, [sp, #12]
 8006c9e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ca2:	9102      	str	r1, [sp, #8]
 8006ca4:	9201      	str	r2, [sp, #4]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	4633      	mov	r3, r6
 8006cac:	4a08      	ldr	r2, [pc, #32]	; (8006cd0 <AT_ESP8266_ND+0x238>)
 8006cae:	4629      	mov	r1, r5
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f007 f887 	bl	800ddc4 <FT_String_ND>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
 8006cc6:	e04f      	b.n	8006d68 <AT_ESP8266_ND+0x2d0>
 8006cc8:	00222c22 	.word	0x00222c22
 8006ccc:	080100dc 	.word	0x080100dc
 8006cd0:	0800fe80 	.word	0x0800fe80
				}
				else
				{
					a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATASRVR);
 8006cd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006ce2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ce6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006cf0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cf4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006cfe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006d0c:	603b      	str	r3, [r7, #0]
 8006d0e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d12:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d16:	6812      	ldr	r2, [r2, #0]
 8006d18:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006d1c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d20:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d24:	6809      	ldr	r1, [r1, #0]
 8006d26:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006d2a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006d2e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006d32:	6800      	ldr	r0, [r0, #0]
 8006d34:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006d38:	2305      	movs	r3, #5
 8006d3a:	9305      	str	r3, [sp, #20]
 8006d3c:	9004      	str	r0, [sp, #16]
 8006d3e:	9103      	str	r1, [sp, #12]
 8006d40:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d44:	9102      	str	r1, [sp, #8]
 8006d46:	9201      	str	r2, [sp, #4]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	4633      	mov	r3, r6
 8006d4e:	4acb      	ldr	r2, [pc, #812]	; (800707c <AT_ESP8266_ND+0x5e4>)
 8006d50:	4629      	mov	r1, r5
 8006d52:	4620      	mov	r0, r4
 8006d54:	f007 f836 	bl	800ddc4 <FT_String_ND>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
				}

			if(a->_estado_data==4)
 8006d68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8006d76:	2b04      	cmp	r3, #4
 8006d78:	d15a      	bne.n	8006e30 <AT_ESP8266_ND+0x398>
				{
					a->_estado_rcv_data=99;
 8006d7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2263      	movs	r2, #99	; 0x63
 8006d86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					a->_n_dataRCV=a->_n_tok;
 8006d8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f8d3 2cec 	ldr.w	r2, [r3, #3308]	; 0xcec
 8006d98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
					CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006da6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006daa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8006db4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006db8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f603 0198 	addw	r1, r3, #2200	; 0x898
 8006dc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f8d3 2cec 	ldr.w	r2, [r3, #3308]	; 0xcec
 8006dd0:	2341      	movs	r3, #65	; 0x41
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	f007 fbe7 	bl	800e5a8 <CopiaVector>
					CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8006dda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f503 7026 	add.w	r0, r3, #664	; 0x298
 8006de8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f603 0198 	addw	r1, r3, #2200	; 0x898
 8006df6:	2341      	movs	r3, #65	; 0x41
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	2205      	movs	r2, #5
 8006dfe:	f007 fbd3 	bl	800e5a8 <CopiaVector>

					a->_debug_rx_ok++;
 8006e02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f8d3 3cd8 	ldr.w	r3, [r3, #3288]	; 0xcd8
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					a->_new_data_rcv=1;
 8006e20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
				}
			if(a->_estado_data==5)
 8006e30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8006e3e:	2b05      	cmp	r3, #5
 8006e40:	d126      	bne.n	8006e90 <AT_ESP8266_ND+0x3f8>
				{
					a->_estado_rcv_data=55;
 8006e42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2237      	movs	r2, #55	; 0x37
 8006e4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					a->_n_dataRCV=0;
 8006e52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
					a->_debug_rx_no_ok++;
 8006e62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
					a->_new_data_rcv=1;
 8006e80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//

	//------------------RECIBO CAMBIO DE MODO OK ------------------//
	 a->_n_fcomp=strlen("AT+CWMODE=1\r\n\r\nOK\r\n");
 8006e90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2213      	movs	r2, #19
 8006e9c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=1\r\n\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006ea0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ea4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006eae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006ebc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ec0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006eca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ece:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006ed8:	603b      	str	r3, [r7, #0]
 8006eda:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ede:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006ee2:	6812      	ldr	r2, [r2, #0]
 8006ee4:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006ee8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006eec:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ef0:	6809      	ldr	r1, [r1, #0]
 8006ef2:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006ef6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006efa:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006efe:	6800      	ldr	r0, [r0, #0]
 8006f00:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006f04:	2300      	movs	r3, #0
 8006f06:	9305      	str	r3, [sp, #20]
 8006f08:	9004      	str	r0, [sp, #16]
 8006f0a:	9103      	str	r1, [sp, #12]
 8006f0c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f10:	9102      	str	r1, [sp, #8]
 8006f12:	9201      	str	r2, [sp, #4]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	4633      	mov	r3, r6
 8006f1a:	4a59      	ldr	r2, [pc, #356]	; (8007080 <AT_ESP8266_ND+0x5e8>)
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f006 ff50 	bl	800ddc4 <FT_String_ND>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d104      	bne.n	8006f34 <AT_ESP8266_ND+0x49c>
		{AT_decode=at_cambiar_modo1_ok;}
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006f30:	f000 bf80 	b.w	8007e34 <AT_ESP8266_ND+0x139c>
		else
		//------------------RECIBO CAMBIO DE MODO MAL ------------------//
			{
			a->_n_fcomp=strlen("AT+CWMODE=1\r\n\r\nERROR\r\n");
 8006f34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2216      	movs	r2, #22
 8006f40:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=1\r\n\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006f44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006f52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006f60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006f6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006f7c:	603b      	str	r3, [r7, #0]
 8006f7e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f82:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f86:	6812      	ldr	r2, [r2, #0]
 8006f88:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006f8c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f90:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f94:	6809      	ldr	r1, [r1, #0]
 8006f96:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006f9a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006f9e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006fa2:	6800      	ldr	r0, [r0, #0]
 8006fa4:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006fa8:	2300      	movs	r3, #0
 8006faa:	9305      	str	r3, [sp, #20]
 8006fac:	9004      	str	r0, [sp, #16]
 8006fae:	9103      	str	r1, [sp, #12]
 8006fb0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006fb4:	9102      	str	r1, [sp, #8]
 8006fb6:	9201      	str	r2, [sp, #4]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	4633      	mov	r3, r6
 8006fbe:	4a30      	ldr	r2, [pc, #192]	; (8007080 <AT_ESP8266_ND+0x5e8>)
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f006 fefe 	bl	800ddc4 <FT_String_ND>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d104      	bne.n	8006fd8 <AT_ESP8266_ND+0x540>
				{AT_decode=at_cambiar_modo1_err;}
 8006fce:	2303      	movs	r3, #3
 8006fd0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006fd4:	f000 bf2e 	b.w	8007e34 <AT_ESP8266_ND+0x139c>
			else
			//------------------MULTIPLES CONEXIONES ------------------//
				{
				a->_n_fcomp=strlen("AT+CIPMUX=0\r\n\r\nOK\r\n");
 8006fd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2213      	movs	r2, #19
 8006fe4:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0\r\n\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006fe8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006ff6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ffa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007004:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007008:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007012:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007016:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007020:	603b      	str	r3, [r7, #0]
 8007022:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007026:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800702a:	6812      	ldr	r2, [r2, #0]
 800702c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007030:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007034:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007038:	6809      	ldr	r1, [r1, #0]
 800703a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800703e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007042:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007046:	6800      	ldr	r0, [r0, #0]
 8007048:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800704c:	2300      	movs	r3, #0
 800704e:	9305      	str	r3, [sp, #20]
 8007050:	9004      	str	r0, [sp, #16]
 8007052:	9103      	str	r1, [sp, #12]
 8007054:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007058:	9102      	str	r1, [sp, #8]
 800705a:	9201      	str	r2, [sp, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	4633      	mov	r3, r6
 8007062:	4a08      	ldr	r2, [pc, #32]	; (8007084 <AT_ESP8266_ND+0x5ec>)
 8007064:	4629      	mov	r1, r5
 8007066:	4620      	mov	r0, r4
 8007068:	f006 feac 	bl	800ddc4 <FT_String_ND>
 800706c:	4603      	mov	r3, r0
 800706e:	2b01      	cmp	r3, #1
 8007070:	d10a      	bne.n	8007088 <AT_ESP8266_ND+0x5f0>
					{AT_decode=at_no_multiple_conn_ok;}
 8007072:	2304      	movs	r3, #4
 8007074:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007078:	f000 bedc 	b.w	8007e34 <AT_ESP8266_ND+0x139c>
 800707c:	0800fe80 	.word	0x0800fe80
 8007080:	0800fe88 	.word	0x0800fe88
 8007084:	0800fe9c 	.word	0x0800fe9c
				else
				//------------------MULTIPLES CONEXIONES ERROR------------------//
					{
					a->_n_fcomp=strlen("AT+CIPMUX=0\r\n\r\nERROR\r\n");
 8007088:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800708c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2216      	movs	r2, #22
 8007094:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
					if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0\r\n\r\nERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007098:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800709c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80070a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80070b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80070c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80070d0:	603b      	str	r3, [r7, #0]
 80070d2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80070d6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80070da:	6812      	ldr	r2, [r2, #0]
 80070dc:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80070e0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80070e4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80070e8:	6809      	ldr	r1, [r1, #0]
 80070ea:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80070ee:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80070f2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80070f6:	6800      	ldr	r0, [r0, #0]
 80070f8:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80070fc:	2300      	movs	r3, #0
 80070fe:	9305      	str	r3, [sp, #20]
 8007100:	9004      	str	r0, [sp, #16]
 8007102:	9103      	str	r1, [sp, #12]
 8007104:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007108:	9102      	str	r1, [sp, #8]
 800710a:	9201      	str	r2, [sp, #4]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	4633      	mov	r3, r6
 8007112:	4aaa      	ldr	r2, [pc, #680]	; (80073bc <AT_ESP8266_ND+0x924>)
 8007114:	4629      	mov	r1, r5
 8007116:	4620      	mov	r0, r4
 8007118:	f006 fe54 	bl	800ddc4 <FT_String_ND>
 800711c:	4603      	mov	r3, r0
 800711e:	2b01      	cmp	r3, #1
 8007120:	d104      	bne.n	800712c <AT_ESP8266_ND+0x694>
						{AT_decode=at_no_multiple_conn_err;}
 8007122:	2305      	movs	r3, #5
 8007124:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007128:	f000 be84 	b.w	8007e34 <AT_ESP8266_ND+0x139c>
					else
					//------------------CONEXIÓN OK------------------//
						{
						a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 800712c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007130:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	220d      	movs	r2, #13
 8007138:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
						if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800713c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007140:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800714a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800714e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007158:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800715c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007166:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800716a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007174:	603b      	str	r3, [r7, #0]
 8007176:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800717a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800717e:	6812      	ldr	r2, [r2, #0]
 8007180:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007184:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007188:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800718c:	6809      	ldr	r1, [r1, #0]
 800718e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007192:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007196:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800719a:	6800      	ldr	r0, [r0, #0]
 800719c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80071a0:	2300      	movs	r3, #0
 80071a2:	9305      	str	r3, [sp, #20]
 80071a4:	9004      	str	r0, [sp, #16]
 80071a6:	9103      	str	r1, [sp, #12]
 80071a8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80071ac:	9102      	str	r1, [sp, #8]
 80071ae:	9201      	str	r2, [sp, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	4633      	mov	r3, r6
 80071b6:	4a82      	ldr	r2, [pc, #520]	; (80073c0 <AT_ESP8266_ND+0x928>)
 80071b8:	4629      	mov	r1, r5
 80071ba:	4620      	mov	r0, r4
 80071bc:	f006 fe02 	bl	800ddc4 <FT_String_ND>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d104      	bne.n	80071d0 <AT_ESP8266_ND+0x738>
							{AT_decode=at_wifi_gotip;}
 80071c6:	2306      	movs	r3, #6
 80071c8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80071cc:	f000 be32 	b.w	8007e34 <AT_ESP8266_ND+0x139c>
						else
						//------------------CONEXIÓN ERROR------------------//
							{
							a->_n_fcomp=strlen("\"\r\n\r\nERROR\r\n");
 80071d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	220c      	movs	r2, #12
 80071dc:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\"\r\n\r\nERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80071e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80071ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80071fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007200:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800720a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800720e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007218:	603b      	str	r3, [r7, #0]
 800721a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800721e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007222:	6812      	ldr	r2, [r2, #0]
 8007224:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007228:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800722c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007230:	6809      	ldr	r1, [r1, #0]
 8007232:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007236:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800723a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800723e:	6800      	ldr	r0, [r0, #0]
 8007240:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007244:	2300      	movs	r3, #0
 8007246:	9305      	str	r3, [sp, #20]
 8007248:	9004      	str	r0, [sp, #16]
 800724a:	9103      	str	r1, [sp, #12]
 800724c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007250:	9102      	str	r1, [sp, #8]
 8007252:	9201      	str	r2, [sp, #4]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	4633      	mov	r3, r6
 800725a:	4a5a      	ldr	r2, [pc, #360]	; (80073c4 <AT_ESP8266_ND+0x92c>)
 800725c:	4629      	mov	r1, r5
 800725e:	4620      	mov	r0, r4
 8007260:	f006 fdb0 	bl	800ddc4 <FT_String_ND>
 8007264:	4603      	mov	r3, r0
 8007266:	2b01      	cmp	r3, #1
 8007268:	d104      	bne.n	8007274 <AT_ESP8266_ND+0x7dc>
								{AT_decode=at_wifi_err;}
 800726a:	2307      	movs	r3, #7
 800726c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007270:	f000 bde0 	b.w	8007e34 <AT_ESP8266_ND+0x139c>
							else
							//------------------CONEXIÓN TIMEOUT ERROR------------------//
								{
								a->_n_fcomp=strlen("+CWJAP:1\r\n\r\nFAIL\r\n");
 8007274:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007278:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2212      	movs	r2, #18
 8007280:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
								if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"+CWJAP:1\r\n\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007284:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007288:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007292:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007296:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80072a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80072ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80072bc:	603b      	str	r3, [r7, #0]
 80072be:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80072c2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80072c6:	6812      	ldr	r2, [r2, #0]
 80072c8:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80072cc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80072d0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80072d4:	6809      	ldr	r1, [r1, #0]
 80072d6:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80072da:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80072de:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80072e2:	6800      	ldr	r0, [r0, #0]
 80072e4:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80072e8:	2300      	movs	r3, #0
 80072ea:	9305      	str	r3, [sp, #20]
 80072ec:	9004      	str	r0, [sp, #16]
 80072ee:	9103      	str	r1, [sp, #12]
 80072f0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80072f4:	9102      	str	r1, [sp, #8]
 80072f6:	9201      	str	r2, [sp, #4]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	4633      	mov	r3, r6
 80072fe:	4a32      	ldr	r2, [pc, #200]	; (80073c8 <AT_ESP8266_ND+0x930>)
 8007300:	4629      	mov	r1, r5
 8007302:	4620      	mov	r0, r4
 8007304:	f006 fd5e 	bl	800ddc4 <FT_String_ND>
 8007308:	4603      	mov	r3, r0
 800730a:	2b01      	cmp	r3, #1
 800730c:	d104      	bne.n	8007318 <AT_ESP8266_ND+0x880>
									{AT_decode=at_wifi_tout_err;}
 800730e:	2308      	movs	r3, #8
 8007310:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007314:	f000 bd8e 	b.w	8007e34 <AT_ESP8266_ND+0x139c>
								else
								//------------------CONEXIÓN PASSWORD ERROR------------------//
									{
									a->_n_fcomp=strlen("+CWJAP:2\r\n\r\nFAIL\r\n");
 8007318:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800731c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2212      	movs	r2, #18
 8007324:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
									if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"+CWJAP:2\r\n\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007328:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800732c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007336:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800733a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007344:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007348:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007352:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007356:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007360:	603b      	str	r3, [r7, #0]
 8007362:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007366:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800736a:	6812      	ldr	r2, [r2, #0]
 800736c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007370:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007374:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007378:	6809      	ldr	r1, [r1, #0]
 800737a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800737e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007382:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007386:	6800      	ldr	r0, [r0, #0]
 8007388:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800738c:	2300      	movs	r3, #0
 800738e:	9305      	str	r3, [sp, #20]
 8007390:	9004      	str	r0, [sp, #16]
 8007392:	9103      	str	r1, [sp, #12]
 8007394:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007398:	9102      	str	r1, [sp, #8]
 800739a:	9201      	str	r2, [sp, #4]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	4633      	mov	r3, r6
 80073a2:	4a0a      	ldr	r2, [pc, #40]	; (80073cc <AT_ESP8266_ND+0x934>)
 80073a4:	4629      	mov	r1, r5
 80073a6:	4620      	mov	r0, r4
 80073a8:	f006 fd0c 	bl	800ddc4 <FT_String_ND>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d10e      	bne.n	80073d0 <AT_ESP8266_ND+0x938>
										{AT_decode=at_wifi_pass_err;}
 80073b2:	2309      	movs	r3, #9
 80073b4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80073b8:	f000 bd3c 	b.w	8007e34 <AT_ESP8266_ND+0x139c>
 80073bc:	0800feb0 	.word	0x0800feb0
 80073c0:	0800fec8 	.word	0x0800fec8
 80073c4:	0800fed8 	.word	0x0800fed8
 80073c8:	0800fee8 	.word	0x0800fee8
 80073cc:	0800fefc 	.word	0x0800fefc
									else
									//------------------CONEXIÓN NET NAME ERROR------------------//
										{
										a->_n_fcomp=strlen("+CWJAP:3\r\n\r\nFAIL\r\n");
 80073d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2212      	movs	r2, #18
 80073dc:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
										if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"+CWJAP:3\r\n\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80073e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80073ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80073fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007400:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800740a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800740e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007418:	603b      	str	r3, [r7, #0]
 800741a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800741e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007422:	6812      	ldr	r2, [r2, #0]
 8007424:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007428:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800742c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007430:	6809      	ldr	r1, [r1, #0]
 8007432:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007436:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800743a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800743e:	6800      	ldr	r0, [r0, #0]
 8007440:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007444:	2300      	movs	r3, #0
 8007446:	9305      	str	r3, [sp, #20]
 8007448:	9004      	str	r0, [sp, #16]
 800744a:	9103      	str	r1, [sp, #12]
 800744c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007450:	9102      	str	r1, [sp, #8]
 8007452:	9201      	str	r2, [sp, #4]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	4633      	mov	r3, r6
 800745a:	4aa9      	ldr	r2, [pc, #676]	; (8007700 <AT_ESP8266_ND+0xc68>)
 800745c:	4629      	mov	r1, r5
 800745e:	4620      	mov	r0, r4
 8007460:	f006 fcb0 	bl	800ddc4 <FT_String_ND>
 8007464:	4603      	mov	r3, r0
 8007466:	2b01      	cmp	r3, #1
 8007468:	d104      	bne.n	8007474 <AT_ESP8266_ND+0x9dc>
											{AT_decode=at_wifi_name_err;}
 800746a:	230a      	movs	r3, #10
 800746c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007470:	f000 bce0 	b.w	8007e34 <AT_ESP8266_ND+0x139c>
										else
										//------------------CONEXIÓN CONN ERROR------------------//
											{
											a->_n_fcomp=strlen("+CWJAP:4\r\n\r\nFAIL\r\n");
 8007474:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007478:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2212      	movs	r2, #18
 8007480:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
											if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"+CWJAP:4\r\n\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007484:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007488:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007492:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007496:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80074a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80074ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80074bc:	603b      	str	r3, [r7, #0]
 80074be:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80074c2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80074c6:	6812      	ldr	r2, [r2, #0]
 80074c8:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80074cc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80074d0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80074d4:	6809      	ldr	r1, [r1, #0]
 80074d6:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80074da:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80074de:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80074e2:	6800      	ldr	r0, [r0, #0]
 80074e4:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80074e8:	2300      	movs	r3, #0
 80074ea:	9305      	str	r3, [sp, #20]
 80074ec:	9004      	str	r0, [sp, #16]
 80074ee:	9103      	str	r1, [sp, #12]
 80074f0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80074f4:	9102      	str	r1, [sp, #8]
 80074f6:	9201      	str	r2, [sp, #4]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	4633      	mov	r3, r6
 80074fe:	4a81      	ldr	r2, [pc, #516]	; (8007704 <AT_ESP8266_ND+0xc6c>)
 8007500:	4629      	mov	r1, r5
 8007502:	4620      	mov	r0, r4
 8007504:	f006 fc5e 	bl	800ddc4 <FT_String_ND>
 8007508:	4603      	mov	r3, r0
 800750a:	2b01      	cmp	r3, #1
 800750c:	d104      	bne.n	8007518 <AT_ESP8266_ND+0xa80>
												{AT_decode=at_wifi_conn_err;}
 800750e:	230b      	movs	r3, #11
 8007510:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007514:	f000 bc8e 	b.w	8007e34 <AT_ESP8266_ND+0x139c>
											else
											//------------------WIFI DISCONNECT------------------//
												{
												a->_n_fcomp=strlen("WIFI DISCONNECT\r\n");
 8007518:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800751c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2211      	movs	r2, #17
 8007524:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
												if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007528:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800752c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007536:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800753a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007544:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007548:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007552:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007556:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007560:	603b      	str	r3, [r7, #0]
 8007562:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007566:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800756a:	6812      	ldr	r2, [r2, #0]
 800756c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007570:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007574:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007578:	6809      	ldr	r1, [r1, #0]
 800757a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800757e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007582:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007586:	6800      	ldr	r0, [r0, #0]
 8007588:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800758c:	2300      	movs	r3, #0
 800758e:	9305      	str	r3, [sp, #20]
 8007590:	9004      	str	r0, [sp, #16]
 8007592:	9103      	str	r1, [sp, #12]
 8007594:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007598:	9102      	str	r1, [sp, #8]
 800759a:	9201      	str	r2, [sp, #4]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	4633      	mov	r3, r6
 80075a2:	4a59      	ldr	r2, [pc, #356]	; (8007708 <AT_ESP8266_ND+0xc70>)
 80075a4:	4629      	mov	r1, r5
 80075a6:	4620      	mov	r0, r4
 80075a8:	f006 fc0c 	bl	800ddc4 <FT_String_ND>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d104      	bne.n	80075bc <AT_ESP8266_ND+0xb24>
													{AT_decode=at_wifi_disconnect;}
 80075b2:	230c      	movs	r3, #12
 80075b4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80075b8:	f000 bc3c 	b.w	8007e34 <AT_ESP8266_ND+0x139c>
												else
												//------------------WIFI CONNECTED------------------//
													{
													a->_n_fcomp=strlen("WIFI CONNECTED\r\n");
 80075bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2210      	movs	r2, #16
 80075c8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
													if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80075cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80075da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80075e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80075f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007604:	603b      	str	r3, [r7, #0]
 8007606:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800760a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800760e:	6812      	ldr	r2, [r2, #0]
 8007610:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007614:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007618:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800761c:	6809      	ldr	r1, [r1, #0]
 800761e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007622:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007626:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800762a:	6800      	ldr	r0, [r0, #0]
 800762c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007630:	2300      	movs	r3, #0
 8007632:	9305      	str	r3, [sp, #20]
 8007634:	9004      	str	r0, [sp, #16]
 8007636:	9103      	str	r1, [sp, #12]
 8007638:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800763c:	9102      	str	r1, [sp, #8]
 800763e:	9201      	str	r2, [sp, #4]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	4633      	mov	r3, r6
 8007646:	4a31      	ldr	r2, [pc, #196]	; (800770c <AT_ESP8266_ND+0xc74>)
 8007648:	4629      	mov	r1, r5
 800764a:	4620      	mov	r0, r4
 800764c:	f006 fbba 	bl	800ddc4 <FT_String_ND>
 8007650:	4603      	mov	r3, r0
 8007652:	2b01      	cmp	r3, #1
 8007654:	d103      	bne.n	800765e <AT_ESP8266_ND+0xbc6>
														{AT_decode=at_wifi_connected;}
 8007656:	230d      	movs	r3, #13
 8007658:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800765c:	e3ea      	b.n	8007e34 <AT_ESP8266_ND+0x139c>
													else
													//------------------TCP CONECTADO------------------//
														{
														a->_n_fcomp=strlen("CONNECT\r\n\r\nOK\r\n");
 800765e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007662:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	220f      	movs	r2, #15
 800766a:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
														if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT\r\n\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800766e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007672:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800767c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007680:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 800768a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800768e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007698:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800769c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80076a6:	603b      	str	r3, [r7, #0]
 80076a8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80076ac:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80076b0:	6812      	ldr	r2, [r2, #0]
 80076b2:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80076b6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80076ba:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80076be:	6809      	ldr	r1, [r1, #0]
 80076c0:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80076c4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80076c8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80076cc:	6800      	ldr	r0, [r0, #0]
 80076ce:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80076d2:	2300      	movs	r3, #0
 80076d4:	9305      	str	r3, [sp, #20]
 80076d6:	9004      	str	r0, [sp, #16]
 80076d8:	9103      	str	r1, [sp, #12]
 80076da:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80076de:	9102      	str	r1, [sp, #8]
 80076e0:	9201      	str	r2, [sp, #4]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	4633      	mov	r3, r6
 80076e8:	4a09      	ldr	r2, [pc, #36]	; (8007710 <AT_ESP8266_ND+0xc78>)
 80076ea:	4629      	mov	r1, r5
 80076ec:	4620      	mov	r0, r4
 80076ee:	f006 fb69 	bl	800ddc4 <FT_String_ND>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d10d      	bne.n	8007714 <AT_ESP8266_ND+0xc7c>
															{AT_decode=at_tcp_conectado;}
 80076f8:	230e      	movs	r3, #14
 80076fa:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80076fe:	e399      	b.n	8007e34 <AT_ESP8266_ND+0x139c>
 8007700:	0800ff10 	.word	0x0800ff10
 8007704:	0800ff24 	.word	0x0800ff24
 8007708:	0800ff38 	.word	0x0800ff38
 800770c:	0800ff4c 	.word	0x0800ff4c
 8007710:	0800ff60 	.word	0x0800ff60
														else
														//------------------TCP ERROR CLOSED------------------//
															{
															a->_n_fcomp=strlen("ERROR\r\nCLOSED\r\n");
 8007714:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007718:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	220f      	movs	r2, #15
 8007720:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
															if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\nCLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007724:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007728:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007732:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007736:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007740:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007744:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800774e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007752:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800775c:	603b      	str	r3, [r7, #0]
 800775e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007762:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007766:	6812      	ldr	r2, [r2, #0]
 8007768:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800776c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007770:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007774:	6809      	ldr	r1, [r1, #0]
 8007776:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800777a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800777e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007782:	6800      	ldr	r0, [r0, #0]
 8007784:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007788:	2300      	movs	r3, #0
 800778a:	9305      	str	r3, [sp, #20]
 800778c:	9004      	str	r0, [sp, #16]
 800778e:	9103      	str	r1, [sp, #12]
 8007790:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007794:	9102      	str	r1, [sp, #8]
 8007796:	9201      	str	r2, [sp, #4]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	4633      	mov	r3, r6
 800779e:	4aa8      	ldr	r2, [pc, #672]	; (8007a40 <AT_ESP8266_ND+0xfa8>)
 80077a0:	4629      	mov	r1, r5
 80077a2:	4620      	mov	r0, r4
 80077a4:	f006 fb0e 	bl	800ddc4 <FT_String_ND>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d103      	bne.n	80077b6 <AT_ESP8266_ND+0xd1e>
																{AT_decode=at_tcp_conn_err;}
 80077ae:	230f      	movs	r3, #15
 80077b0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80077b4:	e33e      	b.n	8007e34 <AT_ESP8266_ND+0x139c>
															else
															//------------------TCP ERROR ALREADY CONNECTED------------------//
																{
																a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n\r\nERROR\r\n");
 80077b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	221e      	movs	r2, #30
 80077c2:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n\r\nERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80077c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80077d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80077e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80077f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007804:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007808:	6812      	ldr	r2, [r2, #0]
 800780a:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800780e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007812:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007816:	6809      	ldr	r1, [r1, #0]
 8007818:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800781c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007820:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007824:	6800      	ldr	r0, [r0, #0]
 8007826:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800782a:	2300      	movs	r3, #0
 800782c:	9305      	str	r3, [sp, #20]
 800782e:	9004      	str	r0, [sp, #16]
 8007830:	9103      	str	r1, [sp, #12]
 8007832:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007836:	9102      	str	r1, [sp, #8]
 8007838:	9201      	str	r2, [sp, #4]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	4633      	mov	r3, r6
 8007840:	4a80      	ldr	r2, [pc, #512]	; (8007a44 <AT_ESP8266_ND+0xfac>)
 8007842:	4629      	mov	r1, r5
 8007844:	4620      	mov	r0, r4
 8007846:	f006 fabd 	bl	800ddc4 <FT_String_ND>
 800784a:	4603      	mov	r3, r0
 800784c:	2b01      	cmp	r3, #1
 800784e:	d103      	bne.n	8007858 <AT_ESP8266_ND+0xdc0>
																	{AT_decode=at_tcp_alrdy_cnntd_err;}
 8007850:	2310      	movs	r3, #16
 8007852:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007856:	e2ed      	b.n	8007e34 <AT_ESP8266_ND+0x139c>
																else
																//------------------TCP ERROR no ip------------------//
																	{
																	a->_n_fcomp=strlen("\r\nno ip\r\n\r\nERROR\r\n");
 8007858:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800785c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2212      	movs	r2, #18
 8007864:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nno ip\r\n\r\nERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007868:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800786c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007876:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800787a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007884:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007888:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007892:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007896:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80078a0:	603b      	str	r3, [r7, #0]
 80078a2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80078a6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80078aa:	6812      	ldr	r2, [r2, #0]
 80078ac:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80078b0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80078b4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80078b8:	6809      	ldr	r1, [r1, #0]
 80078ba:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80078be:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80078c2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80078c6:	6800      	ldr	r0, [r0, #0]
 80078c8:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80078cc:	2300      	movs	r3, #0
 80078ce:	9305      	str	r3, [sp, #20]
 80078d0:	9004      	str	r0, [sp, #16]
 80078d2:	9103      	str	r1, [sp, #12]
 80078d4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80078d8:	9102      	str	r1, [sp, #8]
 80078da:	9201      	str	r2, [sp, #4]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	4633      	mov	r3, r6
 80078e2:	4a59      	ldr	r2, [pc, #356]	; (8007a48 <AT_ESP8266_ND+0xfb0>)
 80078e4:	4629      	mov	r1, r5
 80078e6:	4620      	mov	r0, r4
 80078e8:	f006 fa6c 	bl	800ddc4 <FT_String_ND>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d103      	bne.n	80078fa <AT_ESP8266_ND+0xe62>
																		{AT_decode=at_tcp_noip_err;}
 80078f2:	2311      	movs	r3, #17
 80078f4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80078f8:	e29c      	b.n	8007e34 <AT_ESP8266_ND+0x139c>
																	else
																	//------------------CIPCLOSE OK------------------//
																		{
																		a->_n_fcomp=strlen("AT+CIPCLOSE\r\nCLOSED\r\n\r\nOK\r\n");
 80078fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	221b      	movs	r2, #27
 8007906:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE\r\nCLOSED\r\n\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800790a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800790e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007918:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800791c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007926:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800792a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007934:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007938:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007942:	603b      	str	r3, [r7, #0]
 8007944:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007948:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800794c:	6812      	ldr	r2, [r2, #0]
 800794e:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007952:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007956:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800795a:	6809      	ldr	r1, [r1, #0]
 800795c:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007960:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007964:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007968:	6800      	ldr	r0, [r0, #0]
 800796a:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800796e:	2300      	movs	r3, #0
 8007970:	9305      	str	r3, [sp, #20]
 8007972:	9004      	str	r0, [sp, #16]
 8007974:	9103      	str	r1, [sp, #12]
 8007976:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800797a:	9102      	str	r1, [sp, #8]
 800797c:	9201      	str	r2, [sp, #4]
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	4633      	mov	r3, r6
 8007984:	4a31      	ldr	r2, [pc, #196]	; (8007a4c <AT_ESP8266_ND+0xfb4>)
 8007986:	4629      	mov	r1, r5
 8007988:	4620      	mov	r0, r4
 800798a:	f006 fa1b 	bl	800ddc4 <FT_String_ND>
 800798e:	4603      	mov	r3, r0
 8007990:	2b01      	cmp	r3, #1
 8007992:	d103      	bne.n	800799c <AT_ESP8266_ND+0xf04>
																			{AT_decode=at_tcp_closed_ok;}
 8007994:	2312      	movs	r3, #18
 8007996:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800799a:	e24b      	b.n	8007e34 <AT_ESP8266_ND+0x139c>
																		else
																		//------------------CIPCLOSE ERROR------------------//
																			{
																			a->_n_fcomp=strlen("AT+CIPCLOSE\r\n\r\nERROR\r\n");
 800799c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2216      	movs	r2, #22
 80079a8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE\r\n\r\nERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80079ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80079ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80079c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80079d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80079e4:	603b      	str	r3, [r7, #0]
 80079e6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80079ea:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80079ee:	6812      	ldr	r2, [r2, #0]
 80079f0:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80079f4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80079f8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80079fc:	6809      	ldr	r1, [r1, #0]
 80079fe:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007a02:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007a06:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007a0a:	6800      	ldr	r0, [r0, #0]
 8007a0c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007a10:	2300      	movs	r3, #0
 8007a12:	9305      	str	r3, [sp, #20]
 8007a14:	9004      	str	r0, [sp, #16]
 8007a16:	9103      	str	r1, [sp, #12]
 8007a18:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a1c:	9102      	str	r1, [sp, #8]
 8007a1e:	9201      	str	r2, [sp, #4]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	4633      	mov	r3, r6
 8007a26:	4a0a      	ldr	r2, [pc, #40]	; (8007a50 <AT_ESP8266_ND+0xfb8>)
 8007a28:	4629      	mov	r1, r5
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f006 f9ca 	bl	800ddc4 <FT_String_ND>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d10e      	bne.n	8007a54 <AT_ESP8266_ND+0xfbc>
																				{AT_decode=at_tcp_close_err;}
 8007a36:	2313      	movs	r3, #19
 8007a38:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007a3c:	e1fa      	b.n	8007e34 <AT_ESP8266_ND+0x139c>
 8007a3e:	bf00      	nop
 8007a40:	0800ff70 	.word	0x0800ff70
 8007a44:	0800ff80 	.word	0x0800ff80
 8007a48:	0800ffa0 	.word	0x0800ffa0
 8007a4c:	0800ffb4 	.word	0x0800ffb4
 8007a50:	0800ffd0 	.word	0x0800ffd0
																			else
																			//------------------TCP CLOSED------------------//
																				{
																				a->_n_fcomp=strlen("CLOSED\r\n");
 8007a54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2208      	movs	r2, #8
 8007a60:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007a64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007a72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007a80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007a8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007a9c:	603b      	str	r3, [r7, #0]
 8007a9e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007aa2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007aa6:	6812      	ldr	r2, [r2, #0]
 8007aa8:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007aac:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007ab0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007ab4:	6809      	ldr	r1, [r1, #0]
 8007ab6:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007aba:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007abe:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007ac2:	6800      	ldr	r0, [r0, #0]
 8007ac4:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007ac8:	2300      	movs	r3, #0
 8007aca:	9305      	str	r3, [sp, #20]
 8007acc:	9004      	str	r0, [sp, #16]
 8007ace:	9103      	str	r1, [sp, #12]
 8007ad0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007ad4:	9102      	str	r1, [sp, #8]
 8007ad6:	9201      	str	r2, [sp, #4]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	4633      	mov	r3, r6
 8007ade:	4aa8      	ldr	r2, [pc, #672]	; (8007d80 <AT_ESP8266_ND+0x12e8>)
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f006 f96e 	bl	800ddc4 <FT_String_ND>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d103      	bne.n	8007af6 <AT_ESP8266_ND+0x105e>
																					{AT_decode=at_tcp_client_desc;}
 8007aee:	2314      	movs	r3, #20
 8007af0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007af4:	e19e      	b.n	8007e34 <AT_ESP8266_ND+0x139c>
																				else
																				//------------------TCP OK TO SEND------------------//
																					{
																					a->_n_fcomp=strlen("\r\n\r\nOK\r\n>");
 8007af6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007afa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2209      	movs	r2, #9
 8007b02:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																					if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n\r\nOK\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007b06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007b14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007b22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007b30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007b3e:	603b      	str	r3, [r7, #0]
 8007b40:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b44:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b48:	6812      	ldr	r2, [r2, #0]
 8007b4a:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007b4e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b52:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b56:	6809      	ldr	r1, [r1, #0]
 8007b58:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007b5c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007b60:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007b64:	6800      	ldr	r0, [r0, #0]
 8007b66:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	9305      	str	r3, [sp, #20]
 8007b6e:	9004      	str	r0, [sp, #16]
 8007b70:	9103      	str	r1, [sp, #12]
 8007b72:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b76:	9102      	str	r1, [sp, #8]
 8007b78:	9201      	str	r2, [sp, #4]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	4633      	mov	r3, r6
 8007b80:	4a80      	ldr	r2, [pc, #512]	; (8007d84 <AT_ESP8266_ND+0x12ec>)
 8007b82:	4629      	mov	r1, r5
 8007b84:	4620      	mov	r0, r4
 8007b86:	f006 f91d 	bl	800ddc4 <FT_String_ND>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d103      	bne.n	8007b98 <AT_ESP8266_ND+0x1100>
																						{AT_decode=at_tcp_ok_to_send;}
 8007b90:	2315      	movs	r3, #21
 8007b92:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007b96:	e14d      	b.n	8007e34 <AT_ESP8266_ND+0x139c>
																					else
																					//------------------TCP SEND OK ------------------//
																						{
																						a->_n_fcomp=strlen("\r\n\r\nSEND OK\r\n");
 8007b98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	220d      	movs	r2, #13
 8007ba4:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																						if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n\r\nSEND OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007ba8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007bb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007bc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007bd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007be0:	603b      	str	r3, [r7, #0]
 8007be2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007be6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007bea:	6812      	ldr	r2, [r2, #0]
 8007bec:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007bf0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007bf4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007bf8:	6809      	ldr	r1, [r1, #0]
 8007bfa:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007bfe:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007c02:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007c06:	6800      	ldr	r0, [r0, #0]
 8007c08:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	9305      	str	r3, [sp, #20]
 8007c10:	9004      	str	r0, [sp, #16]
 8007c12:	9103      	str	r1, [sp, #12]
 8007c14:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007c18:	9102      	str	r1, [sp, #8]
 8007c1a:	9201      	str	r2, [sp, #4]
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	4633      	mov	r3, r6
 8007c22:	4a59      	ldr	r2, [pc, #356]	; (8007d88 <AT_ESP8266_ND+0x12f0>)
 8007c24:	4629      	mov	r1, r5
 8007c26:	4620      	mov	r0, r4
 8007c28:	f006 f8cc 	bl	800ddc4 <FT_String_ND>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d103      	bne.n	8007c3a <AT_ESP8266_ND+0x11a2>
																							{AT_decode=at_tcp_enviado_ok;}
 8007c32:	2316      	movs	r3, #22
 8007c34:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007c38:	e0fc      	b.n	8007e34 <AT_ESP8266_ND+0x139c>
																						else
																						//------------------TCP link not valid ------------------//
																							{
																							a->_n_fcomp=strlen("\r\nlink is not valid\r\n\r\nERROR\r\n");
 8007c3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	221e      	movs	r2, #30
 8007c46:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nlink is not valid\r\n\r\nERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007c4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007c58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007c66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007c74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c88:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007c8c:	6812      	ldr	r2, [r2, #0]
 8007c8e:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007c92:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c96:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c9a:	6809      	ldr	r1, [r1, #0]
 8007c9c:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007ca0:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007ca4:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007ca8:	6800      	ldr	r0, [r0, #0]
 8007caa:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007cae:	2300      	movs	r3, #0
 8007cb0:	9305      	str	r3, [sp, #20]
 8007cb2:	9004      	str	r0, [sp, #16]
 8007cb4:	9103      	str	r1, [sp, #12]
 8007cb6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007cba:	9102      	str	r1, [sp, #8]
 8007cbc:	9201      	str	r2, [sp, #4]
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	4633      	mov	r3, r6
 8007cc4:	4a31      	ldr	r2, [pc, #196]	; (8007d8c <AT_ESP8266_ND+0x12f4>)
 8007cc6:	4629      	mov	r1, r5
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f006 f87b 	bl	800ddc4 <FT_String_ND>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d103      	bne.n	8007cdc <AT_ESP8266_ND+0x1244>
																								{AT_decode=at_tcp_snd_err;}
 8007cd4:	2317      	movs	r3, #23
 8007cd6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007cda:	e0ab      	b.n	8007e34 <AT_ESP8266_ND+0x139c>
																							else
																							//------------------TCP SEND FAIL ------------------//
																								{
																								a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8007cdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ce0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	220d      	movs	r2, #13
 8007ce8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																								if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007cec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cf0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007cfa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cfe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007d08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007d16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007d24:	603b      	str	r3, [r7, #0]
 8007d26:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d2a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d2e:	6812      	ldr	r2, [r2, #0]
 8007d30:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007d34:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007d38:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007d3c:	6809      	ldr	r1, [r1, #0]
 8007d3e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007d42:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007d46:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007d4a:	6800      	ldr	r0, [r0, #0]
 8007d4c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007d50:	2300      	movs	r3, #0
 8007d52:	9305      	str	r3, [sp, #20]
 8007d54:	9004      	str	r0, [sp, #16]
 8007d56:	9103      	str	r1, [sp, #12]
 8007d58:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007d5c:	9102      	str	r1, [sp, #8]
 8007d5e:	9201      	str	r2, [sp, #4]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	4633      	mov	r3, r6
 8007d66:	4a0a      	ldr	r2, [pc, #40]	; (8007d90 <AT_ESP8266_ND+0x12f8>)
 8007d68:	4629      	mov	r1, r5
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f006 f82a 	bl	800ddc4 <FT_String_ND>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d10e      	bne.n	8007d94 <AT_ESP8266_ND+0x12fc>
																									{AT_decode=at_tcp_enviado_error;}
 8007d76:	2318      	movs	r3, #24
 8007d78:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007d7c:	e05a      	b.n	8007e34 <AT_ESP8266_ND+0x139c>
 8007d7e:	bf00      	nop
 8007d80:	0800ffe8 	.word	0x0800ffe8
 8007d84:	0800fff4 	.word	0x0800fff4
 8007d88:	08010000 	.word	0x08010000
 8007d8c:	08010010 	.word	0x08010010
 8007d90:	08010030 	.word	0x08010030
																								else
																								//------------------ready ON RESET ------------------//
																									{
																									a->_n_fcomp=strlen("ready");
 8007d94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2205      	movs	r2, #5
 8007da0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																									if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ready",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007da4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007da8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007db2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007db6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007dc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007dce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007ddc:	603b      	str	r3, [r7, #0]
 8007dde:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007de2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007de6:	6812      	ldr	r2, [r2, #0]
 8007de8:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007dec:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007df0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007df4:	6809      	ldr	r1, [r1, #0]
 8007df6:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007dfa:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007dfe:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007e02:	6800      	ldr	r0, [r0, #0]
 8007e04:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007e08:	2300      	movs	r3, #0
 8007e0a:	9305      	str	r3, [sp, #20]
 8007e0c:	9004      	str	r0, [sp, #16]
 8007e0e:	9103      	str	r1, [sp, #12]
 8007e10:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007e14:	9102      	str	r1, [sp, #8]
 8007e16:	9201      	str	r2, [sp, #4]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	4633      	mov	r3, r6
 8007e1e:	4a6a      	ldr	r2, [pc, #424]	; (8007fc8 <AT_ESP8266_ND+0x1530>)
 8007e20:	4629      	mov	r1, r5
 8007e22:	4620      	mov	r0, r4
 8007e24:	f005 ffce 	bl	800ddc4 <FT_String_ND>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d102      	bne.n	8007e34 <AT_ESP8266_ND+0x139c>
																										{AT_decode=at_ready;}
 8007e2e:	2301      	movs	r3, #1
 8007e30:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				}	
			}

 //Evaluo todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 8007e34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8007e42:	3b01      	subs	r3, #1
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	f201 84b7 	bhi.w	80097b8 <AT_ESP8266_ND+0x2d20>
 8007e4a:	a201      	add	r2, pc, #4	; (adr r2, 8007e50 <AT_ESP8266_ND+0x13b8>)
 8007e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e50:	08007e75 	.word	0x08007e75
 8007e54:	08007fd1 	.word	0x08007fd1
 8007e58:	08008249 	.word	0x08008249
 8007e5c:	080083c7 	.word	0x080083c7
 8007e60:	080085ed 	.word	0x080085ed
 8007e64:	080088cd 	.word	0x080088cd
 8007e68:	08008b2b 	.word	0x08008b2b
 8007e6c:	08009027 	.word	0x08009027
 8007e70:	08009207 	.word	0x08009207
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007e74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if( a->_enviaruart==1)	//Solo se llama durante b->_estado!=, luego no entra mas en ambos.
 8007e84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d13f      	bne.n	8007f16 <AT_ESP8266_ND+0x147e>
						{
						a->_pasos=0;
 8007e96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8007ea6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eaa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 8007eb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f7f8 f995 	bl	80001f4 <strlen>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	4423      	add	r3, r4
 8007ece:	4a3f      	ldr	r2, [pc, #252]	; (8007fcc <AT_ESP8266_ND+0x1534>)
 8007ed0:	461c      	mov	r4, r3
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007ed6:	6020      	str	r0, [r4, #0]
 8007ed8:	6061      	str	r1, [r4, #4]
 8007eda:	60a2      	str	r2, [r4, #8]
 8007edc:	881b      	ldrh	r3, [r3, #0]
 8007ede:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8007ee0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ee4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7f8 f980 	bl	80001f4 <strlen>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007efc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=CAMBIAR_MODO_EN_CURSO;
 8007f06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2264      	movs	r2, #100	; 0x64
 8007f12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}


				a->_pasos++;
 8007f16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8007f24:	1c5a      	adds	r2, r3, #1
 8007f26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo1_ok)
 8007f34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d10b      	bne.n	8007f5e <AT_ESP8266_ND+0x14c6>
 8007f46:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d018      	beq.n	8007f80 <AT_ESP8266_ND+0x14e8>
 8007f4e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d014      	beq.n	8007f80 <AT_ESP8266_ND+0x14e8>
															 ||(AT_decode==at_cambiar_modo1_err)))
 8007f56:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d010      	beq.n	8007f80 <AT_ESP8266_ND+0x14e8>
															 ||(a->_ticks > a->_wtchdog))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 8007f5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 8007f6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	f341 8426 	ble.w	80097cc <AT_ESP8266_ND+0x2d34>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8007f80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8007f8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8007f92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8007fa2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fa6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8007fb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 8007fc2:	f001 bc03 	b.w	80097cc <AT_ESP8266_ND+0x2d34>
 8007fc6:	bf00      	nop
 8007fc8:	08010040 	.word	0x08010040
 8007fcc:	08010048 	.word	0x08010048
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007fd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
				if(( a->_enviaruart==1)&&((AT_decode > at_wifi_connected)||(AT_decode==0)))
 8007fe0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fe4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	f040 80ae 	bne.w	8008150 <AT_ESP8266_ND+0x16b8>
 8007ff4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007ff8:	2b0d      	cmp	r3, #13
 8007ffa:	dc04      	bgt.n	8008006 <AT_ESP8266_ND+0x156e>
 8007ffc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008000:	2b00      	cmp	r3, #0
 8008002:	f040 80a5 	bne.w	8008150 <AT_ESP8266_ND+0x16b8>
									   &&(AT_decode!=at_wifi_err)
									   &&(AT_decode!=at_wifi_disconnect)
									   &&(AT_decode!=at_wifi_connected)
									   &&(AT_decode!=at_wifi_gotip))*/
						{
						a->_pasos=0;
 8008006:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800800a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2200      	movs	r2, #0
 8008012:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8008016:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800801a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2201      	movs	r2, #1
 8008022:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 8008026:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800802a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008034:	4620      	mov	r0, r4
 8008036:	f7f8 f8dd 	bl	80001f4 <strlen>
 800803a:	4603      	mov	r3, r0
 800803c:	4423      	add	r3, r4
 800803e:	4981      	ldr	r1, [pc, #516]	; (8008244 <AT_ESP8266_ND+0x17ac>)
 8008040:	461a      	mov	r2, r3
 8008042:	460b      	mov	r3, r1
 8008044:	cb03      	ldmia	r3!, {r0, r1}
 8008046:	6010      	str	r0, [r2, #0]
 8008048:	6051      	str	r1, [r2, #4]
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 800804e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008052:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800805c:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008060:	2201      	movs	r2, #1
 8008062:	4618      	mov	r0, r3
 8008064:	f006 fcf3 	bl	800ea4e <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 8008068:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800806c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008076:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800807a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	1d9d      	adds	r5, r3, #6
 8008082:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008086:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	3306      	adds	r3, #6
 800808e:	4618      	mov	r0, r3
 8008090:	f7f8 f8b0 	bl	80001f4 <strlen>
 8008094:	4603      	mov	r3, r0
 8008096:	461a      	mov	r2, r3
 8008098:	4629      	mov	r1, r5
 800809a:	4620      	mov	r0, r4
 800809c:	f006 fcd7 	bl	800ea4e <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 80080a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80080ae:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7f8 f89e 	bl	80001f4 <strlen>
 80080b8:	4602      	mov	r2, r0
 80080ba:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80080be:	4619      	mov	r1, r3
 80080c0:	4620      	mov	r0, r4
 80080c2:	f006 fcc4 	bl	800ea4e <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 80080c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80080d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80080e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3326      	adds	r3, #38	; 0x26
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7f8 f880 	bl	80001f4 <strlen>
 80080f4:	4603      	mov	r3, r0
 80080f6:	461a      	mov	r2, r3
 80080f8:	4629      	mov	r1, r5
 80080fa:	4620      	mov	r0, r4
 80080fc:	f006 fca7 	bl	800ea4e <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 8008100:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008104:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800810e:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8008112:	2203      	movs	r2, #3
 8008114:	4618      	mov	r0, r3
 8008116:	f006 fc9a 	bl	800ea4e <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 800811a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800811e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008128:	4618      	mov	r0, r3
 800812a:	f7f8 f863 	bl	80001f4 <strlen>
 800812e:	4603      	mov	r3, r0
 8008130:	461a      	mov	r2, r3
 8008132:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008136:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=CONEXION_EN_CURSO;
 8008140:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008144:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	22c8      	movs	r2, #200	; 0xc8
 800814c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}
				a->_pasos++;
 8008150:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008154:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800815e:	1c5a      	adds	r2, r3, #1
 8008160:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008164:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				//La primera vez no entra
				if ((a->_enviaruart==0)&&((AT_decode <= at_wifi_connected)||(AT_decode==0)||(a->_ticks2 > 20000)))  //Que analice luego de enviar por uart
 800816e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008172:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800817c:	2b00      	cmp	r3, #0
 800817e:	f041 8327 	bne.w	80097d0 <AT_ESP8266_ND+0x2d38>
 8008182:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008186:	2b0d      	cmp	r3, #13
 8008188:	dd0f      	ble.n	80081aa <AT_ESP8266_ND+0x1712>
 800818a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00b      	beq.n	80081aa <AT_ESP8266_ND+0x1712>
 8008192:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008196:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 80081a0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80081a4:	4293      	cmp	r3, r2
 80081a6:	f341 8313 	ble.w	80097d0 <AT_ESP8266_ND+0x2d38>
															||(AT_decode==at_wifi_connected)
															||(AT_decode==at_wifi_gotip))||(a->_ticks2 > 20000))*/

					{

						if((AT_decode==at_wifi_disconnect)&&(a->_ticks2 > 3000)) a->_estado=AT_decode;
 80081aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081ae:	2b0c      	cmp	r3, #12
 80081b0:	d113      	bne.n	80081da <AT_ESP8266_ND+0x1742>
 80081b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 80081c0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80081c4:	4293      	cmp	r3, r2
 80081c6:	dd08      	ble.n	80081da <AT_ESP8266_ND+0x1742>
 80081c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80081d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//Al conectar cuando esta conectado lo primero que hace es desconectar, esta desconexión, es una desconexió forzada por
						//el mòdulo por ello es que la tenemos que ignorar, primero se desconecta y luego de aprox 3 seg continua con el WIFI CONNECTED
						//y luego con el WIFI GOT IP.
						if(AT_decode!=at_wifi_disconnect)
 80081da:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081de:	2b0c      	cmp	r3, #12
 80081e0:	d025      	beq.n	800822e <AT_ESP8266_ND+0x1796>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 80081e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							a->_ejecucion=0;
 80081f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
							if (AT_decode==0)
 8008202:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008206:	2b00      	cmp	r3, #0
 8008208:	d108      	bne.n	800821c <AT_ESP8266_ND+0x1784>
							{
								a->_estado=CONEXION_EN_CURSO;
 800820a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800820e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	22c8      	movs	r2, #200	; 0xc8
 8008216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800821a:	e008      	b.n	800822e <AT_ESP8266_ND+0x1796>
							}
							else
								{
								a->_estado=AT_decode;
 800821c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008220:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800822a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								}
							
						}

						a->_ticks2=0;
 800822e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008232:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2200      	movs	r2, #0
 800823a:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
					}

			}
			break;
 800823e:	f001 bac7 	b.w	80097d0 <AT_ESP8266_ND+0x2d38>
 8008242:	bf00      	nop
 8008244:	08010058 	.word	0x08010058
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008248:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800824c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 8008258:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800825c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008266:	2b01      	cmp	r3, #1
 8008268:	d14d      	bne.n	8008306 <AT_ESP8266_ND+0x186e>
 800826a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800826e:	2b04      	cmp	r3, #4
 8008270:	d049      	beq.n	8008306 <AT_ESP8266_ND+0x186e>
 8008272:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008276:	2b0c      	cmp	r3, #12
 8008278:	d045      	beq.n	8008306 <AT_ESP8266_ND+0x186e>
 800827a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800827e:	2b0d      	cmp	r3, #13
 8008280:	d041      	beq.n	8008306 <AT_ESP8266_ND+0x186e>
						{
						a->_pasos=0;
 8008282:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008286:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2200      	movs	r2, #0
 800828e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8008292:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008296:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2201      	movs	r2, #1
 800829e:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",10);
 80082a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80082b0:	4620      	mov	r0, r4
 80082b2:	f7f7 ff9f 	bl	80001f4 <strlen>
 80082b6:	4603      	mov	r3, r0
 80082b8:	4423      	add	r3, r4
 80082ba:	49c9      	ldr	r1, [pc, #804]	; (80085e0 <AT_ESP8266_ND+0x1b48>)
 80082bc:	461a      	mov	r2, r3
 80082be:	460b      	mov	r3, r1
 80082c0:	cb03      	ldmia	r3!, {r0, r1}
 80082c2:	6010      	str	r0, [r2, #0]
 80082c4:	6051      	str	r1, [r2, #4]
 80082c6:	8819      	ldrh	r1, [r3, #0]
 80082c8:	789b      	ldrb	r3, [r3, #2]
 80082ca:	8111      	strh	r1, [r2, #8]
 80082cc:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 80082ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80082dc:	4618      	mov	r0, r3
 80082de:	f7f7 ff89 	bl	80001f4 <strlen>
 80082e2:	4603      	mov	r3, r0
 80082e4:	461a      	mov	r2, r3
 80082e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						//------Generacion del comando para desconectar---------//
						a->_estado=DESCONEXION_EN_CURSO;
 80082f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008306:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800830a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008314:	1c5a      	adds	r2, r3, #1
 8008316:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800831a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008324:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008328:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008332:	2b00      	cmp	r3, #0
 8008334:	d113      	bne.n	800835e <AT_ESP8266_ND+0x18c6>
 8008336:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800833a:	2b0c      	cmp	r3, #12
 800833c:	d020      	beq.n	8008380 <AT_ESP8266_ND+0x18e8>
 800833e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008342:	2b0d      	cmp	r3, #13
 8008344:	d01c      	beq.n	8008380 <AT_ESP8266_ND+0x18e8>
																		  ||(AT_decode==at_wifi_gotip)
 8008346:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800834a:	2b06      	cmp	r3, #6
 800834c:	d018      	beq.n	8008380 <AT_ESP8266_ND+0x18e8>
																		  ||(AT_decode==at_restart	)
 800834e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008352:	2b04      	cmp	r3, #4
 8008354:	d014      	beq.n	8008380 <AT_ESP8266_ND+0x18e8>
																		  ||(AT_decode==at_deconectar_ok )))
 8008356:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800835a:	2b0d      	cmp	r3, #13
 800835c:	d010      	beq.n	8008380 <AT_ESP8266_ND+0x18e8>
																		  ||(a->_ticks > a->_wtchdog))  //Que analice luego de enviar por uart
 800835e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008362:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 800836c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008370:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 800837a:	429a      	cmp	r2, r3
 800837c:	f341 822a 	ble.w	80097d4 <AT_ESP8266_ND+0x2d3c>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008380:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008384:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800838e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008392:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008396:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2200      	movs	r2, #0
 800839e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 80083a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 80083b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2200      	movs	r2, #0
 80083be:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 80083c2:	f001 ba07 	b.w	80097d4 <AT_ESP8266_ND+0x2d3c>
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80083c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_ready)
 80083d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d17f      	bne.n	80084e8 <AT_ESP8266_ND+0x1a50>
 80083e8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d07b      	beq.n	80084e8 <AT_ESP8266_ND+0x1a50>
									   &&(AT_decode!=at_wifi_tout_err)
 80083f0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083f4:	2b08      	cmp	r3, #8
 80083f6:	d077      	beq.n	80084e8 <AT_ESP8266_ND+0x1a50>
									   &&(AT_decode!=at_wifi_pass_err)
 80083f8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083fc:	2b09      	cmp	r3, #9
 80083fe:	d073      	beq.n	80084e8 <AT_ESP8266_ND+0x1a50>
									   &&(AT_decode!=at_wifi_name_err)
 8008400:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008404:	2b0a      	cmp	r3, #10
 8008406:	d06f      	beq.n	80084e8 <AT_ESP8266_ND+0x1a50>
									   &&(AT_decode!=at_wifi_err)
 8008408:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800840c:	2b07      	cmp	r3, #7
 800840e:	d06b      	beq.n	80084e8 <AT_ESP8266_ND+0x1a50>
									   &&(AT_decode!=at_wifi_disconnect)
 8008410:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008414:	2b0c      	cmp	r3, #12
 8008416:	d067      	beq.n	80084e8 <AT_ESP8266_ND+0x1a50>
									   &&(AT_decode!=at_wifi_connected)
 8008418:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800841c:	2b0d      	cmp	r3, #13
 800841e:	d063      	beq.n	80084e8 <AT_ESP8266_ND+0x1a50>
									   &&(AT_decode!=at_wifi_gotip))
 8008420:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008424:	2b06      	cmp	r3, #6
 8008426:	d05f      	beq.n	80084e8 <AT_ESP8266_ND+0x1a50>
						{
						a->_pasos=0;
 8008428:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800842c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2200      	movs	r2, #0
 8008434:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8008438:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800843c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2201      	movs	r2, #1
 8008444:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 8008448:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800844c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8008456:	2b01      	cmp	r3, #1
 8008458:	d115      	bne.n	8008486 <AT_ESP8266_ND+0x19ee>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 800845a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800845e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008468:	4620      	mov	r0, r4
 800846a:	f7f7 fec3 	bl	80001f4 <strlen>
 800846e:	4603      	mov	r3, r0
 8008470:	4423      	add	r3, r4
 8008472:	4a5c      	ldr	r2, [pc, #368]	; (80085e4 <AT_ESP8266_ND+0x1b4c>)
 8008474:	461c      	mov	r4, r3
 8008476:	4613      	mov	r3, r2
 8008478:	cb07      	ldmia	r3!, {r0, r1, r2}
 800847a:	6020      	str	r0, [r4, #0]
 800847c:	6061      	str	r1, [r4, #4]
 800847e:	60a2      	str	r2, [r4, #8]
 8008480:	881b      	ldrh	r3, [r3, #0]
 8008482:	81a3      	strh	r3, [r4, #12]
 8008484:	e014      	b.n	80084b0 <AT_ESP8266_ND+0x1a18>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 8008486:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800848a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008494:	4620      	mov	r0, r4
 8008496:	f7f7 fead 	bl	80001f4 <strlen>
 800849a:	4603      	mov	r3, r0
 800849c:	4423      	add	r3, r4
 800849e:	4a52      	ldr	r2, [pc, #328]	; (80085e8 <AT_ESP8266_ND+0x1b50>)
 80084a0:	461c      	mov	r4, r3
 80084a2:	4613      	mov	r3, r2
 80084a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80084a6:	6020      	str	r0, [r4, #0]
 80084a8:	6061      	str	r1, [r4, #4]
 80084aa:	60a2      	str	r2, [r4, #8]
 80084ac:	881b      	ldrh	r3, [r3, #0]
 80084ae:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 80084b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80084be:	4618      	mov	r0, r3
 80084c0:	f7f7 fe98 	bl	80001f4 <strlen>
 80084c4:	4603      	mov	r3, r0
 80084c6:	461a      	mov	r2, r3
 80084c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						//------Generacion del comando para desconectar---------//
						a->_estado=MUX_CONN_EN_CURSO;
 80084d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80084e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 80084e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80084f6:	1c5a      	adds	r2, r3, #1
 80084f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				//Se deja pasar todo lo anterior para que pueda tomar decisiones en función a lo recibido, ya que si solo escucha lo referente a la
				//conexiones múltiples no puede volver al estado anterior de conexión, cuando mas se avanza, mas condiciones hay, claramente podemos separar
				// los if por casos de exitos para acelerar y  luego por todos los demás.
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_tout_err)
 8008506:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800850a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008514:	2b00      	cmp	r3, #0
 8008516:	d12f      	bne.n	8008578 <AT_ESP8266_ND+0x1ae0>
 8008518:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800851c:	2b01      	cmp	r3, #1
 800851e:	d03c      	beq.n	800859a <AT_ESP8266_ND+0x1b02>
 8008520:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008524:	2b08      	cmp	r3, #8
 8008526:	d038      	beq.n	800859a <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_wifi_pass_err)
 8008528:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800852c:	2b09      	cmp	r3, #9
 800852e:	d034      	beq.n	800859a <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_wifi_name_err)
 8008530:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008534:	2b0a      	cmp	r3, #10
 8008536:	d030      	beq.n	800859a <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_wifi_err)
 8008538:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800853c:	2b07      	cmp	r3, #7
 800853e:	d02c      	beq.n	800859a <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_wifi_disconnect)
 8008540:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008544:	2b0c      	cmp	r3, #12
 8008546:	d028      	beq.n	800859a <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_wifi_connected)
 8008548:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800854c:	2b0d      	cmp	r3, #13
 800854e:	d024      	beq.n	800859a <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_wifi_gotip)
 8008550:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008554:	2b06      	cmp	r3, #6
 8008556:	d020      	beq.n	800859a <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_multiple_conn_ok)
 8008558:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800855c:	2b07      	cmp	r3, #7
 800855e:	d01c      	beq.n	800859a <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_no_multiple_conn_ok)
 8008560:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008564:	2b04      	cmp	r3, #4
 8008566:	d018      	beq.n	800859a <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_multiple_conn_err)
 8008568:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800856c:	2b1e      	cmp	r3, #30
 800856e:	d014      	beq.n	800859a <AT_ESP8266_ND+0x1b02>
															||(AT_decode==at_no_multiple_conn_err)))
 8008570:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008574:	2b05      	cmp	r3, #5
 8008576:	d010      	beq.n	800859a <AT_ESP8266_ND+0x1b02>
															||(a->_ticks > a->_wtchdog))  //Que analice luego de enviar por uart
 8008578:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800857c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 8008586:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800858a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8008594:	429a      	cmp	r2, r3
 8008596:	f341 811f 	ble.w	80097d8 <AT_ESP8266_ND+0x2d40>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800859a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800859e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80085a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80085ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 80085bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 80085cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 80085dc:	f001 b8fc 	b.w	80097d8 <AT_ESP8266_ND+0x2d40>
 80085e0:	08010064 	.word	0x08010064
 80085e4:	08010070 	.word	0x08010070
 80085e8:	08010080 	.word	0x08010080
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80085ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 80085fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008600:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800860a:	2b01      	cmp	r3, #1
 800860c:	f040 80f3 	bne.w	80087f6 <AT_ESP8266_ND+0x1d5e>
 8008610:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008614:	2b04      	cmp	r3, #4
 8008616:	f000 80ee 	beq.w	80087f6 <AT_ESP8266_ND+0x1d5e>
									   &&(AT_decode!=at_ok)
 800861a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800861e:	2b01      	cmp	r3, #1
 8008620:	f000 80e9 	beq.w	80087f6 <AT_ESP8266_ND+0x1d5e>
									   &&(AT_decode!=at_error)
 8008624:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008628:	2b02      	cmp	r3, #2
 800862a:	f000 80e4 	beq.w	80087f6 <AT_ESP8266_ND+0x1d5e>
									   &&(AT_decode!=at_def_ip_err)
 800862e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008632:	2b21      	cmp	r3, #33	; 0x21
 8008634:	f000 80df 	beq.w	80087f6 <AT_ESP8266_ND+0x1d5e>
									   &&(AT_decode!=at_def_ip_ok))
 8008638:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800863c:	2b1b      	cmp	r3, #27
 800863e:	f000 80da 	beq.w	80087f6 <AT_ESP8266_ND+0x1d5e>
						{
						a->_pasos=0;
 8008642:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008646:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2200      	movs	r2, #0
 800864e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8008652:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008656:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2201      	movs	r2, #1
 800865e:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 8008662:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008666:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008670:	4620      	mov	r0, r4
 8008672:	f7f7 fdbf 	bl	80001f4 <strlen>
 8008676:	4603      	mov	r3, r0
 8008678:	4423      	add	r3, r4
 800867a:	4993      	ldr	r1, [pc, #588]	; (80088c8 <AT_ESP8266_ND+0x1e30>)
 800867c:	461a      	mov	r2, r3
 800867e:	460b      	mov	r3, r1
 8008680:	cb03      	ldmia	r3!, {r0, r1}
 8008682:	6010      	str	r0, [r2, #0]
 8008684:	6051      	str	r1, [r2, #4]
 8008686:	8819      	ldrh	r1, [r3, #0]
 8008688:	789b      	ldrb	r3, [r3, #2]
 800868a:	8111      	strh	r1, [r2, #8]
 800868c:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 800868e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008692:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800869c:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80086a0:	2201      	movs	r2, #1
 80086a2:	4618      	mov	r0, r3
 80086a4:	f006 f9d3 	bl	800ea4e <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 80086a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80086b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 80086c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	334c      	adds	r3, #76	; 0x4c
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7f7 fd8f 	bl	80001f4 <strlen>
 80086d6:	4603      	mov	r3, r0
 80086d8:	461a      	mov	r2, r3
 80086da:	4629      	mov	r1, r5
 80086dc:	4620      	mov	r0, r4
 80086de:	f006 f9b6 	bl	800ea4e <strncat>
						strncat(a->_uart2snd,separador,3);
 80086e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80086f0:	f507 710a 	add.w	r1, r7, #552	; 0x228
 80086f4:	2203      	movs	r2, #3
 80086f6:	4618      	mov	r0, r3
 80086f8:	f006 f9a9 	bl	800ea4e <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 80086fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008700:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800870a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800870e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f103 0562 	add.w	r5, r3, #98	; 0x62
 8008718:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800871c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3362      	adds	r3, #98	; 0x62
 8008724:	4618      	mov	r0, r3
 8008726:	f7f7 fd65 	bl	80001f4 <strlen>
 800872a:	4603      	mov	r3, r0
 800872c:	461a      	mov	r2, r3
 800872e:	4629      	mov	r1, r5
 8008730:	4620      	mov	r0, r4
 8008732:	f006 f98c 	bl	800ea4e <strncat>
						strncat(a->_uart2snd,separador,3);
 8008736:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800873a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008744:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008748:	2203      	movs	r2, #3
 800874a:	4618      	mov	r0, r3
 800874c:	f006 f97f 	bl	800ea4e <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8008750:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008754:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800875e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008762:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f103 0572 	add.w	r5, r3, #114	; 0x72
 800876c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008770:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3372      	adds	r3, #114	; 0x72
 8008778:	4618      	mov	r0, r3
 800877a:	f7f7 fd3b 	bl	80001f4 <strlen>
 800877e:	4603      	mov	r3, r0
 8008780:	461a      	mov	r2, r3
 8008782:	4629      	mov	r1, r5
 8008784:	4620      	mov	r0, r4
 8008786:	f006 f962 	bl	800ea4e <strncat>
						strncat(a->_uart2snd,&comillas,1);
 800878a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800878e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008798:	f207 212f 	addw	r1, r7, #559	; 0x22f
 800879c:	2201      	movs	r2, #1
 800879e:	4618      	mov	r0, r3
 80087a0:	f006 f955 	bl	800ea4e <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80087a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80087b2:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 80087b6:	2202      	movs	r2, #2
 80087b8:	4618      	mov	r0, r3
 80087ba:	f006 f948 	bl	800ea4e <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 80087be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7f7 fd11 	bl	80001f4 <strlen>
 80087d2:	4603      	mov	r3, r0
 80087d4:	461a      	mov	r2, r3
 80087d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						//------Generacion del comando para desconectar---------//
						a->_estado=DEF_IP_EN_CURSO;
 80087e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80087f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 80087f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008804:	1c5a      	adds	r2, r3, #1
 8008806:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800880a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008814:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008818:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008822:	2b00      	cmp	r3, #0
 8008824:	d11b      	bne.n	800885e <AT_ESP8266_ND+0x1dc6>
 8008826:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800882a:	2b01      	cmp	r3, #1
 800882c:	d028      	beq.n	8008880 <AT_ESP8266_ND+0x1de8>
 800882e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008832:	2b0d      	cmp	r3, #13
 8008834:	d024      	beq.n	8008880 <AT_ESP8266_ND+0x1de8>
															 ||(AT_decode==at_wifi_gotip)
 8008836:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800883a:	2b06      	cmp	r3, #6
 800883c:	d020      	beq.n	8008880 <AT_ESP8266_ND+0x1de8>
															 ||(AT_decode==at_restart)
 800883e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008842:	2b04      	cmp	r3, #4
 8008844:	d01c      	beq.n	8008880 <AT_ESP8266_ND+0x1de8>
															 ||(AT_decode==at_error)
 8008846:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800884a:	2b02      	cmp	r3, #2
 800884c:	d018      	beq.n	8008880 <AT_ESP8266_ND+0x1de8>
															 ||(AT_decode==at_def_ip_err)
 800884e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008852:	2b21      	cmp	r3, #33	; 0x21
 8008854:	d014      	beq.n	8008880 <AT_ESP8266_ND+0x1de8>
															 ||(AT_decode==at_def_ip_ok)))
 8008856:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800885a:	2b1b      	cmp	r3, #27
 800885c:	d010      	beq.n	8008880 <AT_ESP8266_ND+0x1de8>
															 ||(a->_ticks > a->_wtchdog))  //Que analice luego de enviar por uart
 800885e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008862:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 800886c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008870:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 800887a:	429a      	cmp	r2, r3
 800887c:	f340 87ae 	ble.w	80097dc <AT_ESP8266_ND+0x2d44>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008880:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008884:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800888e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008892:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008896:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2200      	movs	r2, #0
 800889e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 80088a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 80088b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2200      	movs	r2, #0
 80088be:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 80088c2:	f000 bf8b 	b.w	80097dc <AT_ESP8266_ND+0x2d44>
 80088c6:	bf00      	nop
 80088c8:	08010090 	.word	0x08010090
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80088cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
				//Al entrar en teoría AT_decode es 0 ya que no se enviaron datos por puerto serie aún, en el caso
				// que llegaran datos se analiza mediante la otra rama de la OR.
				if(( a->_enviaruart==1)&&((AT_decode > at_tcp_client_desc)||(AT_decode==0)))
 80088dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	f040 80cd 	bne.w	8008a8a <AT_ESP8266_ND+0x1ff2>
 80088f0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088f4:	2b14      	cmp	r3, #20
 80088f6:	dc04      	bgt.n	8008902 <AT_ESP8266_ND+0x1e6a>
 80088f8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f040 80c4 	bne.w	8008a8a <AT_ESP8266_ND+0x1ff2>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
									   &&(AT_decode!=at_tcp_conectado)
									   &&(AT_decode!=at_tcp_client_desc)
									   &&(AT_decode!=at_error))*/
						{
						a->_pasos=0;
 8008902:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008906:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2200      	movs	r2, #0
 800890e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8008912:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008916:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2201      	movs	r2, #1
 800891e:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8008922:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008926:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008930:	4620      	mov	r0, r4
 8008932:	f7f7 fc5f 	bl	80001f4 <strlen>
 8008936:	4603      	mov	r3, r0
 8008938:	4423      	add	r3, r4
 800893a:	4a99      	ldr	r2, [pc, #612]	; (8008ba0 <AT_ESP8266_ND+0x2108>)
 800893c:	461c      	mov	r4, r3
 800893e:	4613      	mov	r3, r2
 8008940:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008942:	6020      	str	r0, [r4, #0]
 8008944:	6061      	str	r1, [r4, #4]
 8008946:	60a2      	str	r2, [r4, #8]
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 800894c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008950:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800895a:	f207 212f 	addw	r1, r7, #559	; 0x22f
 800895e:	2201      	movs	r2, #1
 8008960:	4618      	mov	r0, r3
 8008962:	f006 f874 	bl	800ea4e <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8008966:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800896a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008974:	4620      	mov	r0, r4
 8008976:	f7f7 fc3d 	bl	80001f4 <strlen>
 800897a:	4603      	mov	r3, r0
 800897c:	4423      	add	r3, r4
 800897e:	4a89      	ldr	r2, [pc, #548]	; (8008ba4 <AT_ESP8266_ND+0x210c>)
 8008980:	6810      	ldr	r0, [r2, #0]
 8008982:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8008984:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008988:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008992:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008996:	2203      	movs	r2, #3
 8008998:	4618      	mov	r0, r3
 800899a:	f006 f858 	bl	800ea4e <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 800899e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80089ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f103 0536 	add.w	r5, r3, #54	; 0x36
 80089ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	3336      	adds	r3, #54	; 0x36
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7f7 fc14 	bl	80001f4 <strlen>
 80089cc:	4603      	mov	r3, r0
 80089ce:	461a      	mov	r2, r3
 80089d0:	4629      	mov	r1, r5
 80089d2:	4620      	mov	r0, r4
 80089d4:	f006 f83b 	bl	800ea4e <strncat>
						strncat(a->_uart2snd,separador2,2);
 80089d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80089e6:	f507 7108 	add.w	r1, r7, #544	; 0x220
 80089ea:	2202      	movs	r2, #2
 80089ec:	4618      	mov	r0, r3
 80089ee:	f006 f82e 	bl	800ea4e <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 80089f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008a00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8008a0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	3346      	adds	r3, #70	; 0x46
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7f7 fbea 	bl	80001f4 <strlen>
 8008a20:	4603      	mov	r3, r0
 8008a22:	461a      	mov	r2, r3
 8008a24:	4629      	mov	r1, r5
 8008a26:	4620      	mov	r0, r4
 8008a28:	f006 f811 	bl	800ea4e <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008a2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008a3a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7f7 fbd8 	bl	80001f4 <strlen>
 8008a44:	4602      	mov	r2, r0
 8008a46:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f005 fffe 	bl	800ea4e <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008a52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7f7 fbc7 	bl	80001f4 <strlen>
 8008a66:	4603      	mov	r3, r0
 8008a68:	461a      	mov	r2, r3
 8008a6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=TCP_CONN_EN_CURSO;
 8008a78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008a86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8008a8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008a98:	1c5a      	adds	r2, r3, #1
 8008a9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				//No dejo que entre por AT_decode=0. Si recibo info erronea ingreso porque al no encontrar un cadena que se corresponda
				// con los valores fijados AT_decode va a valer 0. Si ese if devuelve a->_estado=0, se vuelve a enviar la petición de 
				// conexión a TCP por puerto serie, la cual queda en loop porque lo primero que se recibe de la comunicación al intentar
				// conectar a un servidor TCP es la misma instrucción AT+CIPSTART . .. .  y esto vale 0.
				if ((a->_enviaruart==0)&&(((AT_decode <= at_tcp_client_desc)&&(AT_decode!=0))||(a->_ticks2 > 10000))) //a->_wtchdog)))
 8008aa8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	f040 8692 	bne.w	80097e0 <AT_ESP8266_ND+0x2d48>
 8008abc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ac0:	2b14      	cmp	r3, #20
 8008ac2:	dc03      	bgt.n	8008acc <AT_ESP8266_ND+0x2034>
 8008ac4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10b      	bne.n	8008ae4 <AT_ESP8266_ND+0x204c>
 8008acc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ad0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 8008ada:	f242 7210 	movw	r2, #10000	; 0x2710
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	f340 867e 	ble.w	80097e0 <AT_ESP8266_ND+0x2d48>
																		  ||(AT_decode==at_tcp_client_desc)
																		  ||(AT_decode==at_error)
																		  ||(AT_decode==at_busy_p)))
																		  ||(a->_ticks > a->_wtchdog))*///210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > a->_wtchdog))  //Que analice luego de enviar por uart
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008ae4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ae8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008af2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008af6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008afa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8008b06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8008b16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008b26:	f000 be5b 	b.w	80097e0 <AT_ESP8266_ND+0x2d48>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 8008b2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b2e:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8008b32:	2200      	movs	r2, #0
 8008b34:	601a      	str	r2, [r3, #0]
 8008b36:	2200      	movs	r2, #0
 8008b38:	605a      	str	r2, [r3, #4]


				if((AT_decode <= at_tcp_client_desc)&&(AT_decode!=at_tcp_alrdy_cnntd_err)&&(AT_decode!=at_tcp_conectado)&&(AT_decode!=0))
 8008b3a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b3e:	2b14      	cmp	r3, #20
 8008b40:	dc32      	bgt.n	8008ba8 <AT_ESP8266_ND+0x2110>
 8008b42:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b46:	2b10      	cmp	r3, #16
 8008b48:	d02e      	beq.n	8008ba8 <AT_ESP8266_ND+0x2110>
 8008b4a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b4e:	2b0e      	cmp	r3, #14
 8008b50:	d02a      	beq.n	8008ba8 <AT_ESP8266_ND+0x2110>
 8008b52:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d026      	beq.n	8008ba8 <AT_ESP8266_ND+0x2110>
				/*if((AT_decode==at_tcp_client_desc)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail)
						||(AT_decode==at_error))*/ //240420
				{
					a->_estado=AT_decode;
 8008b5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8008b6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_ejecucion=0;
 8008b7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
					a->_subpaso=0;
 8008b8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
									a->_ejecucion=0;
									a->_subpaso=0;
								}
				}
			}
			break;
 8008b9c:	f000 be22 	b.w	80097e4 <AT_ESP8266_ND+0x2d4c>
 8008ba0:	0801009c 	.word	0x0801009c
 8008ba4:	080100ac 	.word	0x080100ac
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8008ba8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	f040 80d1 	bne.w	8008d5e <AT_ESP8266_ND+0x22c6>
 8008bbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f040 80c7 	bne.w	8008d5e <AT_ESP8266_ND+0x22c6>
										a->_ejecucion=1;
 8008bd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
										a->_estado=24;
 8008be0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008be4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2218      	movs	r2, #24
 8008bec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008bf0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bf4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8008c00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008c0e:	1c5a      	adds	r2, r3, #1
 8008c10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_pasos=0;
 8008c1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8008c2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 2ab8 	strb.w	r2, [r3, #2744]	; 0xab8
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 8008c3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f7f7 fad1 	bl	80001f4 <strlen>
 8008c52:	4603      	mov	r3, r0
 8008c54:	4423      	add	r3, r4
 8008c56:	4ab1      	ldr	r2, [pc, #708]	; (8008f1c <AT_ESP8266_ND+0x2484>)
 8008c58:	461c      	mov	r4, r3
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008c5e:	6020      	str	r0, [r4, #0]
 8008c60:	6061      	str	r1, [r4, #4]
 8008c62:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8008c64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8008c72:	f107 0214 	add.w	r2, r7, #20
 8008c76:	4611      	mov	r1, r2
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f005 fbeb 	bl	800e454 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8008c7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008c8c:	f107 0314 	add.w	r3, r7, #20
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7f7 faaf 	bl	80001f4 <strlen>
 8008c96:	4602      	mov	r2, r0
 8008c98:	f107 0314 	add.w	r3, r7, #20
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f005 fed5 	bl	800ea4e <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8008ca4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ca8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f603 22b8 	addw	r2, r3, #2744	; 0xab8
 8008cb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	4610      	mov	r0, r2
 8008cc4:	f005 ffa4 	bl	800ec10 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008cc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ccc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008cd6:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008cda:	2202      	movs	r2, #2
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f005 feb6 	bl	800ea4e <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8008ce2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ce6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7f7 fa7f 	bl	80001f4 <strlen>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cfe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8008d08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f603 24b8 	addw	r4, r3, #2744	; 0xab8
 8008d16:	4620      	mov	r0, r4
 8008d18:	f7f7 fa6c 	bl	80001f4 <strlen>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	4423      	add	r3, r4
 8008d20:	4a7f      	ldr	r2, [pc, #508]	; (8008f20 <AT_ESP8266_ND+0x2488>)
 8008d22:	461c      	mov	r4, r3
 8008d24:	4613      	mov	r3, r2
 8008d26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008d28:	6020      	str	r0, [r4, #0]
 8008d2a:	6061      	str	r1, [r4, #4]
 8008d2c:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8008d2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 8008d3c:	1c5a      	adds	r2, r3, #1
 8008d3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
										a->_estado=TCP_SND_EN_CURSO;
 8008d4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8008d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8008d5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008d6c:	1c5a      	adds	r2, r3, #1
 8008d6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_tcp_ok_to_send)
 8008d7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f040 80ac 	bne.w	8008ee8 <AT_ESP8266_ND+0x2450>
 8008d90:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d94:	2b16      	cmp	r3, #22
 8008d96:	f000 80a7 	beq.w	8008ee8 <AT_ESP8266_ND+0x2450>
 8008d9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f503 62d3 	add.w	r2, r3, #1688	; 0x698
 8008da8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 8008db6:	4619      	mov	r1, r3
 8008db8:	4610      	mov	r0, r2
 8008dba:	f7f7 fa11 	bl	80001e0 <strcmp>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d01c      	beq.n	8008dfe <AT_ESP8266_ND+0x2366>
 8008dc4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008dc8:	2b15      	cmp	r3, #21
 8008dca:	d018      	beq.n	8008dfe <AT_ESP8266_ND+0x2366>
												   ||((a->_ticks > a->_wtchdog)&&(a->_subpaso==1))))
 8008dcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 8008dda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8008de8:	429a      	cmp	r2, r3
 8008dea:	dd7d      	ble.n	8008ee8 <AT_ESP8266_ND+0x2450>
 8008dec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008df0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d174      	bne.n	8008ee8 <AT_ESP8266_ND+0x2450>
								if(a->_ticks > a->_wtchdog)//if((a->_ticks > a->_wtchdog)||(a->_subpaso==1))//((a->_ticks > a->_wtchdog)&&(a->_subpaso==1))
 8008dfe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 8008e0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	dd0e      	ble.n	8008e3c <AT_ESP8266_ND+0x23a4>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8008e1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
 8008e2c:	1c5a      	adds	r2, r3, #1
 8008e2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
								a->_debug_count4++;
 8008e3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8008e4a:	1c5a      	adds	r2, r3, #1
 8008e4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_subpaso++;
 8008e5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008e68:	1c5a      	adds	r2, r3, #1
 8008e6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
								a->_enviaruart=1;
 8008e78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8008e88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f503 6093 	add.w	r0, r3, #1176	; 0x498
 8008e96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8008ea4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ea8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 8008eb2:	2361      	movs	r3, #97	; 0x61
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	f005 fb76 	bl	800e5a8 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8008ebc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ec0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 8008eca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ece:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8008ed8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008edc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
							if(((AT_decode <= at_tcp_enviado_error)&&(AT_decode!=0))||(a->_ticks > a->_wtchdog))
 8008ee8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008eec:	2b18      	cmp	r3, #24
 8008eee:	dc03      	bgt.n	8008ef8 <AT_ESP8266_ND+0x2460>
 8008ef0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d115      	bne.n	8008f24 <AT_ESP8266_ND+0x248c>
 8008ef8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008efc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 8008f06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8008f14:	429a      	cmp	r2, r3
 8008f16:	f340 8465 	ble.w	80097e4 <AT_ESP8266_ND+0x2d4c>
 8008f1a:	e003      	b.n	8008f24 <AT_ESP8266_ND+0x248c>
 8008f1c:	080100b0 	.word	0x080100b0
 8008f20:	080100bc 	.word	0x080100bc
									a->_debug_count5++;
 8008f24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8008f32:	1c5a      	adds	r2, r3, #1
 8008f34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
									if(a->_ticks > a->_wtchdog)
 8008f42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 8008f50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	dd25      	ble.n	8008fae <AT_ESP8266_ND+0x2516>
										a->_debug_count8++;
 8008f62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8008f70:	1c5a      	adds	r2, r3, #1
 8008f72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
										a->_subpaso++;
 8008f80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008f8e:	1c5a      	adds	r2, r3, #1
 8008f90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_ticks=0;
 8008f9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fa2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_client_desc)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8008fae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	dd10      	ble.n	8008fe2 <AT_ESP8266_ND+0x254a>
 8008fc0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008fc4:	2b14      	cmp	r3, #20
 8008fc6:	d00c      	beq.n	8008fe2 <AT_ESP8266_ND+0x254a>
 8008fc8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008fcc:	2b0c      	cmp	r3, #12
 8008fce:	d008      	beq.n	8008fe2 <AT_ESP8266_ND+0x254a>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 8008fd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	220f      	movs	r2, #15
 8008fdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8008fe0:	e008      	b.n	8008ff4 <AT_ESP8266_ND+0x255c>
										a->_estado=AT_decode;	//Devuelvo el estado
 8008fe2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fe6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8008ff4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ff8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_ejecucion=0;
 8009004:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009008:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2200      	movs	r2, #0
 8009010:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
									a->_subpaso=0;
 8009014:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009018:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2200      	movs	r2, #0
 8009020:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
			break;
 8009024:	e3de      	b.n	80097e4 <AT_ESP8266_ND+0x2d4c>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009026:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800902a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2200      	movs	r2, #0
 8009032:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if( a->_enviaruart==1)
 8009036:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800903a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009044:	2b01      	cmp	r3, #1
 8009046:	d16f      	bne.n	8009128 <AT_ESP8266_ND+0x2690>
						{
						a->_pasos=0;
 8009048:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800904c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2200      	movs	r2, #0
 8009054:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8009058:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800905c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2201      	movs	r2, #1
 8009064:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 8009068:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800906c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8009076:	4620      	mov	r0, r4
 8009078:	f7f7 f8bc 	bl	80001f4 <strlen>
 800907c:	4603      	mov	r3, r0
 800907e:	4423      	add	r3, r4
 8009080:	4a7c      	ldr	r2, [pc, #496]	; (8009274 <AT_ESP8266_ND+0x27dc>)
 8009082:	461c      	mov	r4, r3
 8009084:	4615      	mov	r5, r2
 8009086:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009088:	6020      	str	r0, [r4, #0]
 800908a:	6061      	str	r1, [r4, #4]
 800908c:	60a2      	str	r2, [r4, #8]
 800908e:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 8009090:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009094:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800909e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 80090ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	335c      	adds	r3, #92	; 0x5c
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7f7 f89b 	bl	80001f4 <strlen>
 80090be:	4603      	mov	r3, r0
 80090c0:	461a      	mov	r2, r3
 80090c2:	4629      	mov	r1, r5
 80090c4:	4620      	mov	r0, r4
 80090c6:	f005 fcc2 	bl	800ea4e <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80090ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80090d8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80090dc:	4618      	mov	r0, r3
 80090de:	f7f7 f889 	bl	80001f4 <strlen>
 80090e2:	4602      	mov	r2, r0
 80090e4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80090e8:	4619      	mov	r1, r3
 80090ea:	4620      	mov	r0, r4
 80090ec:	f005 fcaf 	bl	800ea4e <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 80090f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80090fe:	4618      	mov	r0, r3
 8009100:	f7f7 f878 	bl	80001f4 <strlen>
 8009104:	4603      	mov	r3, r0
 8009106:	461a      	mov	r2, r3
 8009108:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800910c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=800;
 8009116:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800911a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 8009128:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800912c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8009136:	1c5a      	adds	r2, r3, #1
 8009138:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800913c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_client_desc)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > a->_wtchdog))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > a->_wtchdog))  //Que analice luego de enviar por uart
 8009146:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800914a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009154:	2b00      	cmp	r3, #0
 8009156:	d123      	bne.n	80091a0 <AT_ESP8266_ND+0x2708>
 8009158:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800915c:	2b0c      	cmp	r3, #12
 800915e:	d030      	beq.n	80091c2 <AT_ESP8266_ND+0x272a>
 8009160:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009164:	2b0d      	cmp	r3, #13
 8009166:	d02c      	beq.n	80091c2 <AT_ESP8266_ND+0x272a>
 8009168:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800916c:	2b06      	cmp	r3, #6
 800916e:	d028      	beq.n	80091c2 <AT_ESP8266_ND+0x272a>
 8009170:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009174:	2b10      	cmp	r3, #16
 8009176:	d024      	beq.n	80091c2 <AT_ESP8266_ND+0x272a>
 8009178:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800917c:	2b0e      	cmp	r3, #14
 800917e:	d020      	beq.n	80091c2 <AT_ESP8266_ND+0x272a>
 8009180:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009184:	2b14      	cmp	r3, #20
 8009186:	d01c      	beq.n	80091c2 <AT_ESP8266_ND+0x272a>
 8009188:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800918c:	2b15      	cmp	r3, #21
 800918e:	d018      	beq.n	80091c2 <AT_ESP8266_ND+0x272a>
 8009190:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009194:	2b16      	cmp	r3, #22
 8009196:	d014      	beq.n	80091c2 <AT_ESP8266_ND+0x272a>
 8009198:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800919c:	2b17      	cmp	r3, #23
 800919e:	d010      	beq.n	80091c2 <AT_ESP8266_ND+0x272a>
 80091a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 80091ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 80091bc:	429a      	cmp	r2, r3
 80091be:	f340 8313 	ble.w	80097e8 <AT_ESP8266_ND+0x2d50>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80091c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80091d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80091d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2200      	movs	r2, #0
 80091e0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 80091e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 80091f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2200      	movs	r2, #0
 8009200:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
			}
			break;
 8009204:	e2f0      	b.n	80097e8 <AT_ESP8266_ND+0x2d50>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 8009206:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800920a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800920e:	2200      	movs	r2, #0
 8009210:	601a      	str	r2, [r3, #0]
 8009212:	2200      	movs	r2, #0
 8009214:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_client_desc)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail))
 8009216:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800921a:	2b14      	cmp	r3, #20
 800921c:	d007      	beq.n	800922e <AT_ESP8266_ND+0x2796>
 800921e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009222:	2b0c      	cmp	r3, #12
 8009224:	d003      	beq.n	800922e <AT_ESP8266_ND+0x2796>
 8009226:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800922a:	2b03      	cmp	r3, #3
 800922c:	d124      	bne.n	8009278 <AT_ESP8266_ND+0x27e0>
				{
					a->_estado=AT_decode;
 800922e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009232:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800923c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8009240:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009244:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2200      	movs	r2, #0
 800924c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_ejecucion=0;
 8009250:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009254:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2200      	movs	r2, #0
 800925c:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
					a->_subpaso=0;
 8009260:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009264:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2200      	movs	r2, #0
 800926c:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8009270:	e2bc      	b.n	80097ec <AT_ESP8266_ND+0x2d54>
 8009272:	bf00      	nop
 8009274:	080100c8 	.word	0x080100c8
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8009278:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800927c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009286:	2b01      	cmp	r3, #1
 8009288:	f040 8102 	bne.w	8009490 <AT_ESP8266_ND+0x29f8>
 800928c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009290:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800929a:	2b00      	cmp	r3, #0
 800929c:	f040 80f8 	bne.w	8009490 <AT_ESP8266_ND+0x29f8>
										a->_ejecucion=1;
 80092a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
										a->_estado=24;
 80092b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2218      	movs	r2, #24
 80092bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80092c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 80092d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 80092de:	1c5a      	adds	r2, r3, #1
 80092e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_pasos=0;
 80092ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 80092fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009302:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2200      	movs	r2, #0
 800930a:	f883 2ab8 	strb.w	r2, [r3, #2744]	; 0xab8
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 800930e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009312:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800931c:	4620      	mov	r0, r4
 800931e:	f7f6 ff69 	bl	80001f4 <strlen>
 8009322:	4603      	mov	r3, r0
 8009324:	4423      	add	r3, r4
 8009326:	4a86      	ldr	r2, [pc, #536]	; (8009540 <AT_ESP8266_ND+0x2aa8>)
 8009328:	461c      	mov	r4, r3
 800932a:	4613      	mov	r3, r2
 800932c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800932e:	6020      	str	r0, [r4, #0]
 8009330:	6061      	str	r1, [r4, #4]
 8009332:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 8009334:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009338:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 8009342:	f107 020c 	add.w	r2, r7, #12
 8009346:	4611      	mov	r1, r2
 8009348:	4618      	mov	r0, r3
 800934a:	f005 f883 	bl	800e454 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 800934e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009352:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800935c:	f107 030c 	add.w	r3, r7, #12
 8009360:	4618      	mov	r0, r3
 8009362:	f7f6 ff47 	bl	80001f4 <strlen>
 8009366:	4602      	mov	r2, r0
 8009368:	f107 030c 	add.w	r3, r7, #12
 800936c:	4619      	mov	r1, r3
 800936e:	4620      	mov	r0, r4
 8009370:	f005 fb6d 	bl	800ea4e <strncat>
										strncat(a->_uart2snd,",",1);
 8009374:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009378:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8009382:	4620      	mov	r0, r4
 8009384:	f7f6 ff36 	bl	80001f4 <strlen>
 8009388:	4603      	mov	r3, r0
 800938a:	4423      	add	r3, r4
 800938c:	496d      	ldr	r1, [pc, #436]	; (8009544 <AT_ESP8266_ND+0x2aac>)
 800938e:	461a      	mov	r2, r3
 8009390:	460b      	mov	r3, r1
 8009392:	881b      	ldrh	r3, [r3, #0]
 8009394:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8009396:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800939a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 80093a4:	f107 020c 	add.w	r2, r7, #12
 80093a8:	4611      	mov	r1, r2
 80093aa:	4618      	mov	r0, r3
 80093ac:	f005 f852 	bl	800e454 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 80093b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80093be:	f107 030c 	add.w	r3, r7, #12
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7f6 ff16 	bl	80001f4 <strlen>
 80093c8:	4602      	mov	r2, r0
 80093ca:	f107 030c 	add.w	r3, r7, #12
 80093ce:	4619      	mov	r1, r3
 80093d0:	4620      	mov	r0, r4
 80093d2:	f005 fb3c 	bl	800ea4e <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 80093d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f603 22b8 	addw	r2, r3, #2744	; 0xab8
 80093e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80093f2:	4619      	mov	r1, r3
 80093f4:	4610      	mov	r0, r2
 80093f6:	f005 fc0b 	bl	800ec10 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80093fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009408:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800940c:	2202      	movs	r2, #2
 800940e:	4618      	mov	r0, r3
 8009410:	f005 fb1d 	bl	800ea4e <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8009414:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009418:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009422:	4618      	mov	r0, r3
 8009424:	f7f6 fee6 	bl	80001f4 <strlen>
 8009428:	4603      	mov	r3, r0
 800942a:	461a      	mov	r2, r3
 800942c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009430:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 800943a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800943e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f603 24b8 	addw	r4, r3, #2744	; 0xab8
 8009448:	4620      	mov	r0, r4
 800944a:	f7f6 fed3 	bl	80001f4 <strlen>
 800944e:	4603      	mov	r3, r0
 8009450:	4423      	add	r3, r4
 8009452:	4a3d      	ldr	r2, [pc, #244]	; (8009548 <AT_ESP8266_ND+0x2ab0>)
 8009454:	461c      	mov	r4, r3
 8009456:	4613      	mov	r3, r2
 8009458:	cb07      	ldmia	r3!, {r0, r1, r2}
 800945a:	6020      	str	r0, [r4, #0]
 800945c:	6061      	str	r1, [r4, #4]
 800945e:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8009460:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009464:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800946e:	1c5a      	adds	r2, r3, #1
 8009470:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009474:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
										a->_estado=900;
 800947e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009482:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f44f 7261 	mov.w	r2, #900	; 0x384
 800948c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8009490:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009494:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800949e:	1c5a      	adds	r2, r3, #1
 80094a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > a->_wtchdog)&&(a->_subpaso==1))))
 80094ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f040 80c3 	bne.w	8009648 <AT_ESP8266_ND+0x2bb0>
 80094c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094c6:	2b16      	cmp	r3, #22
 80094c8:	f000 80be 	beq.w	8009648 <AT_ESP8266_ND+0x2bb0>
 80094cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f503 62d3 	add.w	r2, r3, #1688	; 0x698
 80094da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 80094e8:	4619      	mov	r1, r3
 80094ea:	4610      	mov	r0, r2
 80094ec:	f7f6 fe78 	bl	80001e0 <strcmp>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d02a      	beq.n	800954c <AT_ESP8266_ND+0x2ab4>
 80094f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d026      	beq.n	800954c <AT_ESP8266_ND+0x2ab4>
 80094fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009502:	2b14      	cmp	r3, #20
 8009504:	d022      	beq.n	800954c <AT_ESP8266_ND+0x2ab4>
 8009506:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800950a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 8009514:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009518:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8009522:	429a      	cmp	r2, r3
 8009524:	f340 8090 	ble.w	8009648 <AT_ESP8266_ND+0x2bb0>
 8009528:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800952c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009536:	2b01      	cmp	r3, #1
 8009538:	f040 8086 	bne.w	8009648 <AT_ESP8266_ND+0x2bb0>
 800953c:	e006      	b.n	800954c <AT_ESP8266_ND+0x2ab4>
 800953e:	bf00      	nop
 8009540:	080100b0 	.word	0x080100b0
 8009544:	080100d8 	.word	0x080100d8
 8009548:	080100bc 	.word	0x080100bc
								if((a->_ticks > a->_wtchdog)&&(a->_subpaso==1))
 800954c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009550:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 800955a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800955e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8009568:	429a      	cmp	r2, r3
 800956a:	dd17      	ble.n	800959c <AT_ESP8266_ND+0x2b04>
 800956c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009570:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800957a:	2b01      	cmp	r3, #1
 800957c:	d10e      	bne.n	800959c <AT_ESP8266_ND+0x2b04>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 800957e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009582:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
 800958c:	1c5a      	adds	r2, r3, #1
 800958e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009592:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
								a->_debug_count4++;
 800959c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 80095aa:	1c5a      	adds	r2, r3, #1
 80095ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_subpaso++;
 80095ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 80095c8:	1c5a      	adds	r2, r3, #1
 80095ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
								a->_enviaruart=1;
 80095d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 80095e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f503 6093 	add.w	r0, r3, #1176	; 0x498
 80095f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8009604:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009608:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 8009612:	2361      	movs	r3, #97	; 0x61
 8009614:	9300      	str	r3, [sp, #0]
 8009616:	2301      	movs	r3, #1
 8009618:	f004 ffc6 	bl	800e5a8 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 800961c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009620:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 800962a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800962e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009638:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800963c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2200      	movs	r2, #0
 8009644:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > a->_wtchdog)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_client_desc)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 8009648:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800964c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009656:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800965a:	f040 80c7 	bne.w	80097ec <AT_ESP8266_ND+0x2d54>
 800965e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009662:	2b16      	cmp	r3, #22
 8009664:	d030      	beq.n	80096c8 <AT_ESP8266_ND+0x2c30>
 8009666:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800966a:	2b0d      	cmp	r3, #13
 800966c:	d02c      	beq.n	80096c8 <AT_ESP8266_ND+0x2c30>
 800966e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009672:	2b06      	cmp	r3, #6
 8009674:	d028      	beq.n	80096c8 <AT_ESP8266_ND+0x2c30>
 8009676:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800967a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 8009684:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009688:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8009692:	429a      	cmp	r2, r3
 8009694:	dc18      	bgt.n	80096c8 <AT_ESP8266_ND+0x2c30>
 8009696:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800969a:	2b0c      	cmp	r3, #12
 800969c:	d014      	beq.n	80096c8 <AT_ESP8266_ND+0x2c30>
 800969e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096a2:	2b14      	cmp	r3, #20
 80096a4:	d010      	beq.n	80096c8 <AT_ESP8266_ND+0x2c30>
 80096a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096aa:	2b17      	cmp	r3, #23
 80096ac:	d00c      	beq.n	80096c8 <AT_ESP8266_ND+0x2c30>
 80096ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096b2:	2b18      	cmp	r3, #24
 80096b4:	d008      	beq.n	80096c8 <AT_ESP8266_ND+0x2c30>
 80096b6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096ba:	2b16      	cmp	r3, #22
 80096bc:	d004      	beq.n	80096c8 <AT_ESP8266_ND+0x2c30>
 80096be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096c2:	2b19      	cmp	r3, #25
 80096c4:	f040 8092 	bne.w	80097ec <AT_ESP8266_ND+0x2d54>
									a->_debug_count5++;
 80096c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 80096d6:	1c5a      	adds	r2, r3, #1
 80096d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
									if(a->_ticks > a->_wtchdog)
 80096e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f8d3 2cb8 	ldr.w	r2, [r3, #3256]	; 0xcb8
 80096f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8009702:	429a      	cmp	r2, r3
 8009704:	dd25      	ble.n	8009752 <AT_ESP8266_ND+0x2cba>
										a->_debug_count8++;
 8009706:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800970a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8009714:	1c5a      	adds	r2, r3, #1
 8009716:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800971a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
										a->_subpaso++;
 8009724:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009728:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009732:	1c5a      	adds	r2, r3, #1
 8009734:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009738:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_ticks=0;
 8009742:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009746:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2200      	movs	r2, #0
 800974e:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_client_desc)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009752:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009756:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009760:	2b02      	cmp	r3, #2
 8009762:	dd07      	ble.n	8009774 <AT_ESP8266_ND+0x2cdc>
 8009764:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009768:	2b14      	cmp	r3, #20
 800976a:	d003      	beq.n	8009774 <AT_ESP8266_ND+0x2cdc>
 800976c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009770:	2b0c      	cmp	r3, #12
 8009772:	d108      	bne.n	8009786 <AT_ESP8266_ND+0x2cee>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009774:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009778:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009786:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800978a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2200      	movs	r2, #0
 8009792:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_ejecucion=0;
 8009796:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800979a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
									a->_subpaso=0;
 80097a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
			break;
 80097b6:	e019      	b.n	80097ec <AT_ESP8266_ND+0x2d54>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 80097b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80097c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 80097ca:	e010      	b.n	80097ee <AT_ESP8266_ND+0x2d56>
			break;
 80097cc:	bf00      	nop
 80097ce:	e00e      	b.n	80097ee <AT_ESP8266_ND+0x2d56>
			break;
 80097d0:	bf00      	nop
 80097d2:	e00c      	b.n	80097ee <AT_ESP8266_ND+0x2d56>
			break;
 80097d4:	bf00      	nop
 80097d6:	e00a      	b.n	80097ee <AT_ESP8266_ND+0x2d56>
			break;
 80097d8:	bf00      	nop
 80097da:	e008      	b.n	80097ee <AT_ESP8266_ND+0x2d56>
			break;
 80097dc:	bf00      	nop
 80097de:	e006      	b.n	80097ee <AT_ESP8266_ND+0x2d56>
			break;
 80097e0:	bf00      	nop
 80097e2:	e004      	b.n	80097ee <AT_ESP8266_ND+0x2d56>
			break;
 80097e4:	bf00      	nop
 80097e6:	e002      	b.n	80097ee <AT_ESP8266_ND+0x2d56>
			break;
 80097e8:	bf00      	nop
 80097ea:	e000      	b.n	80097ee <AT_ESP8266_ND+0x2d56>
			break;
 80097ec:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 80097ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
		a->_n_orig=0;
 80097fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009802:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2200      	movs	r2, #0
 800980a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

		return (a->_estado);
 800980e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009812:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 800981c:	4618      	mov	r0, r3
 800981e:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8009822:	46bd      	mov	sp, r7
 8009824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009826:	bf00      	nop

08009828 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

// ACÁ ENTRO SIEMPRE ENTRO NO DEPENDO DE RECIBIR LOS DATOS
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800983a:	f240 328d 	movw	r2, #909	; 0x38d
 800983e:	4293      	cmp	r3, r2
 8009840:	f001 83bc 	beq.w	800afbc <WiFi_Conn_ND+0x1794>
 8009844:	f240 328d 	movw	r2, #909	; 0x38d
 8009848:	4293      	cmp	r3, r2
 800984a:	f301 8451 	bgt.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 800984e:	f240 3289 	movw	r2, #905	; 0x389
 8009852:	4293      	cmp	r3, r2
 8009854:	f001 8329 	beq.w	800aeaa <WiFi_Conn_ND+0x1682>
 8009858:	f240 3289 	movw	r2, #905	; 0x389
 800985c:	4293      	cmp	r3, r2
 800985e:	f301 8447 	bgt.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 8009862:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009866:	f001 8218 	beq.w	800ac9a <WiFi_Conn_ND+0x1472>
 800986a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800986e:	f301 843f 	bgt.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 8009872:	f240 3229 	movw	r2, #809	; 0x329
 8009876:	4293      	cmp	r3, r2
 8009878:	f301 843a 	bgt.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 800987c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009880:	f280 80a4 	bge.w	80099cc <WiFi_Conn_ND+0x1a4>
 8009884:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009888:	4293      	cmp	r3, r2
 800988a:	f000 874c 	beq.w	800a726 <WiFi_Conn_ND+0xefe>
 800988e:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009892:	4293      	cmp	r3, r2
 8009894:	f301 842c 	bgt.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 8009898:	f240 22c1 	movw	r2, #705	; 0x2c1
 800989c:	4293      	cmp	r3, r2
 800989e:	f000 86c3 	beq.w	800a628 <WiFi_Conn_ND+0xe00>
 80098a2:	f240 22c1 	movw	r2, #705	; 0x2c1
 80098a6:	4293      	cmp	r3, r2
 80098a8:	f301 8422 	bgt.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 80098ac:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80098b0:	f000 8602 	beq.w	800a4b8 <WiFi_Conn_ND+0xc90>
 80098b4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80098b8:	f301 841a 	bgt.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 80098bc:	f240 2261 	movw	r2, #609	; 0x261
 80098c0:	4293      	cmp	r3, r2
 80098c2:	f000 8588 	beq.w	800a3d6 <WiFi_Conn_ND+0xbae>
 80098c6:	f240 2261 	movw	r2, #609	; 0x261
 80098ca:	4293      	cmp	r3, r2
 80098cc:	f301 8410 	bgt.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 80098d0:	f240 225d 	movw	r2, #605	; 0x25d
 80098d4:	4293      	cmp	r3, r2
 80098d6:	f000 851d 	beq.w	800a314 <WiFi_Conn_ND+0xaec>
 80098da:	f240 225d 	movw	r2, #605	; 0x25d
 80098de:	4293      	cmp	r3, r2
 80098e0:	f301 8406 	bgt.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 80098e4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80098e8:	f000 84b9 	beq.w	800a25e <WiFi_Conn_ND+0xa36>
 80098ec:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80098f0:	f301 83fe 	bgt.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 80098f4:	f240 12fd 	movw	r2, #509	; 0x1fd
 80098f8:	4293      	cmp	r3, r2
 80098fa:	f000 844f 	beq.w	800a19c <WiFi_Conn_ND+0x974>
 80098fe:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009902:	f281 83f5 	bge.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 8009906:	f240 12f9 	movw	r2, #505	; 0x1f9
 800990a:	4293      	cmp	r3, r2
 800990c:	f000 8405 	beq.w	800a11a <WiFi_Conn_ND+0x8f2>
 8009910:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8009914:	f281 83ec 	bge.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 8009918:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800991c:	f000 8390 	beq.w	800a040 <WiFi_Conn_ND+0x818>
 8009920:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009924:	f301 83e4 	bgt.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 8009928:	f240 1299 	movw	r2, #409	; 0x199
 800992c:	4293      	cmp	r3, r2
 800992e:	f000 8331 	beq.w	8009f94 <WiFi_Conn_ND+0x76c>
 8009932:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8009936:	f281 83db 	bge.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 800993a:	f240 1295 	movw	r2, #405	; 0x195
 800993e:	4293      	cmp	r3, r2
 8009940:	f000 82ec 	beq.w	8009f1c <WiFi_Conn_ND+0x6f4>
 8009944:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8009948:	f281 83d2 	bge.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 800994c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009950:	f000 8263 	beq.w	8009e1a <WiFi_Conn_ND+0x5f2>
 8009954:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009958:	f301 83ca 	bgt.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 800995c:	f240 1235 	movw	r2, #309	; 0x135
 8009960:	4293      	cmp	r3, r2
 8009962:	f000 8234 	beq.w	8009dce <WiFi_Conn_ND+0x5a6>
 8009966:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800996a:	f281 83c1 	bge.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 800996e:	f240 1231 	movw	r2, #305	; 0x131
 8009972:	4293      	cmp	r3, r2
 8009974:	f000 8226 	beq.w	8009dc4 <WiFi_Conn_ND+0x59c>
 8009978:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800997c:	f281 83b8 	bge.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 8009980:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009984:	f000 81ca 	beq.w	8009d1c <WiFi_Conn_ND+0x4f4>
 8009988:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800998c:	f301 83b0 	bgt.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 8009990:	2bd1      	cmp	r3, #209	; 0xd1
 8009992:	f000 8163 	beq.w	8009c5c <WiFi_Conn_ND+0x434>
 8009996:	2bd1      	cmp	r3, #209	; 0xd1
 8009998:	f301 83aa 	bgt.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 800999c:	2bcd      	cmp	r3, #205	; 0xcd
 800999e:	f000 8123 	beq.w	8009be8 <WiFi_Conn_ND+0x3c0>
 80099a2:	2bcd      	cmp	r3, #205	; 0xcd
 80099a4:	f301 83a4 	bgt.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 80099a8:	2bc8      	cmp	r3, #200	; 0xc8
 80099aa:	f000 80c6 	beq.w	8009b3a <WiFi_Conn_ND+0x312>
 80099ae:	2bc8      	cmp	r3, #200	; 0xc8
 80099b0:	f301 839e 	bgt.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 80099b4:	2b6d      	cmp	r3, #109	; 0x6d
 80099b6:	f000 8088 	beq.w	8009aca <WiFi_Conn_ND+0x2a2>
 80099ba:	2b6d      	cmp	r3, #109	; 0x6d
 80099bc:	f301 8398 	bgt.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 80099c0:	2b64      	cmp	r3, #100	; 0x64
 80099c2:	d01f      	beq.n	8009a04 <WiFi_Conn_ND+0x1dc>
 80099c4:	2b69      	cmp	r3, #105	; 0x69
 80099c6:	d06b      	beq.n	8009aa0 <WiFi_Conn_ND+0x278>
 80099c8:	f001 bb92 	b.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 80099cc:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80099d0:	2b09      	cmp	r3, #9
 80099d2:	f201 838d 	bhi.w	800b0f0 <WiFi_Conn_ND+0x18c8>
 80099d6:	a201      	add	r2, pc, #4	; (adr r2, 80099dc <WiFi_Conn_ND+0x1b4>)
 80099d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099dc:	0800a83d 	.word	0x0800a83d
 80099e0:	0800b0f1 	.word	0x0800b0f1
 80099e4:	0800b0f1 	.word	0x0800b0f1
 80099e8:	0800b0f1 	.word	0x0800b0f1
 80099ec:	0800b0f1 	.word	0x0800b0f1
 80099f0:	0800a90b 	.word	0x0800a90b
 80099f4:	0800a9b5 	.word	0x0800a9b5
 80099f8:	0800aa5f 	.word	0x0800aa5f
 80099fc:	0800ab09 	.word	0x0800ab09
 8009a00:	0800abb3 	.word	0x0800abb3
				//la manda por puerto serie, hasta que no se reciba info, b->_estado_conexion seguirá con el valor CAMBIAR MODO EN CURSO ya que//
				//al no recibirse info, no se procesa el AT_ESP8266_ND y no se le asigna valores leidos a b->_estado que no es mas que lo que //
				//se está recbibiendo por puerto serie. Los valores leídos de b->_estado son leidos por WiFi_COnn_ND donde se asiga _estado_conexion																				  //
				//Una vez recibido datos por puerto serie, se toma la decisión de realizar el cambio de estado								  //
				//----------------------------------------------------------------------------------------------------------------------------//
				if((b->_estado!=CAMBIAR_MODO_EN_CURSO)&&(b->_estado!=at_cambiar_modo1_ok)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a0a:	2b64      	cmp	r3, #100	; 0x64
 8009a0c:	d033      	beq.n	8009a76 <WiFi_Conn_ND+0x24e>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	d02e      	beq.n	8009a76 <WiFi_Conn_ND+0x24e>
													  &&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a1e:	2b16      	cmp	r3, #22
 8009a20:	d029      	beq.n	8009a76 <WiFi_Conn_ND+0x24e>
				{
						Cambiar_CWMODE(b);
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f7fc fea2 	bl	800676c <Cambiar_CWMODE>
						//if(b->_enviaruart==1)
							//{
						b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar, aquí estado ya es CAMBIAR MODO EN CURSO, siguiente ingreso no vengo por aquí.
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f7fd f835 	bl	8006a98 <AT_ESP8266_ND>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_enviaruart=0;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d109      	bne.n	8009a5c <WiFi_Conn_ND+0x234>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009a54:	4619      	mov	r1, r3
 8009a56:	4610      	mov	r0, r2
 8009a58:	f7f7 fdcc 	bl	80015f4 <ITM0_Write>
						HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	2364      	movs	r3, #100	; 0x64
 8009a6c:	68b8      	ldr	r0, [r7, #8]
 8009a6e:	f7fb fdd9 	bl	8005624 <HAL_UART_Transmit>
					if((b->_estado==at_cambiar_modo1_err)) b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo

					//----Condiciones de cambio de estado
				}
			}
			break;
 8009a72:	f001 bb0e 	b.w	800b092 <WiFi_Conn_ND+0x186a>
					if((b->_estado==at_cambiar_modo1_ok)) b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d103      	bne.n	8009a88 <WiFi_Conn_ND+0x260>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	226d      	movs	r2, #109	; 0x6d
 8009a84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					if((b->_estado==at_cambiar_modo1_err)) b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a8e:	2b03      	cmp	r3, #3
 8009a90:	f041 82ff 	bne.w	800b092 <WiFi_Conn_ND+0x186a>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2269      	movs	r2, #105	; 0x69
 8009a98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8009a9c:	f001 baf9 	b.w	800b092 <WiFi_Conn_ND+0x186a>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f7fc fe63 	bl	800676c <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2264      	movs	r2, #100	; 0x64
 8009aaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 8009ac6:	f001 bb13 	b.w	800b0f0 <WiFi_Conn_ND+0x18c8>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00c      	beq.n	8009aee <WiFi_Conn_ND+0x2c6>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f7fc fe75 	bl	80067c4 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009ae0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009aec:	e00e      	b.n	8009b0c <WiFi_Conn_ND+0x2e4>

				}//
				else//
				{//
					ConectarWIFI(b);
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f7fc fe52 	bl	8006798 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	22c8      	movs	r2, #200	; 0xc8
 8009af8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b12:	2b04      	cmp	r3, #4
 8009b14:	f041 82bf 	bne.w	800b096 <WiFi_Conn_ND+0x186e>
					{
						Cambiar_CWMODE(b);
 8009b18:	68f8      	ldr	r0, [r7, #12]
 8009b1a:	f7fc fe27 	bl	800676c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2264      	movs	r2, #100	; 0x64
 8009b22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009b36:	f001 baae 	b.w	800b096 <WiFi_Conn_ND+0x186e>
													&&(b->_estado!=at_wifi_pass_err)
													&&(b->_estado!=at_wifi_name_err)
													&&(b->_estado!=at_wifi_disconnect)
													&&(b->_estado!=at_wifi_connected)
													&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.*/
				if((b->_estado!=CONEXION_EN_CURSO)&&((b->_estado > at_wifi_connected)||(b->_estado==0)))
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b40:	2bc8      	cmp	r3, #200	; 0xc8
 8009b42:	d036      	beq.n	8009bb2 <WiFi_Conn_ND+0x38a>
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b4a:	2b0d      	cmp	r3, #13
 8009b4c:	dc04      	bgt.n	8009b58 <WiFi_Conn_ND+0x330>
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d12c      	bne.n	8009bb2 <WiFi_Conn_ND+0x38a>
				{
						ConectarWIFI(b);
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f7fc fe1d 	bl	8006798 <ConectarWIFI>
						if(b->_enviaruart==1)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d124      	bne.n	8009bb2 <WiFi_Conn_ND+0x38a>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f7fc ff95 	bl	8006a98 <AT_ESP8266_ND>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d109      	bne.n	8009b9c <WiFi_Conn_ND+0x374>
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009b94:	4619      	mov	r1, r3
 8009b96:	4610      	mov	r0, r2
 8009b98:	f7f7 fd2c 	bl	80015f4 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	2364      	movs	r3, #100	; 0x64
 8009bac:	68b8      	ldr	r0, [r7, #8]
 8009bae:	f7fb fd39 	bl	8005624 <HAL_UART_Transmit>
				}

				//----Condiciones de cambio de estado
				//OJO, luego de esto el módulo arroja un OK, si se envía algo antes del OK aparece un busy p....
				//la conexión OK se podría definir con el OK el tema es que tarda en aparecer y se puede tambien confundir con otros.
				if((b->_estado==at_wifi_gotip))//||(b->_estado==at_wifi_connected))
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bb8:	2b06      	cmp	r3, #6
 8009bba:	d103      	bne.n	8009bc4 <WiFi_Conn_ND+0x39c>
					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	22d1      	movs	r2, #209	; 0xd1
 8009bc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
										 ||(b->_estado==at_wifi_tout_err)
										 ||(b->_estado==at_wifi_pass_err)
										 ||(b->_estado==at_wifi_name_err)
										 ||(b->_estado==at_wifi_conn_err)
										 ||(b->_estado==at_wifi_disconnect))*/ 
				if((b->_estado >=at_wifi_err)&&(b->_estado <=at_wifi_conn_err))//240509
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bca:	2b06      	cmp	r3, #6
 8009bcc:	f341 8265 	ble.w	800b09a <WiFi_Conn_ND+0x1872>
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bd6:	2b0b      	cmp	r3, #11
 8009bd8:	f301 825f 	bgt.w	800b09a <WiFi_Conn_ND+0x1872>
				//if(((b->_estado >=at_wifi_err)&&(b->_estado <=at_wifi_conn_err))&&(b->_ticks2 > 2000))
										 {
											b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	22cd      	movs	r2, #205	; 0xcd
 8009be0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
										 }
				//----Condiciones de cambio de estado
			}
			break;
 8009be4:	f001 ba59 	b.w	800b09a <WiFi_Conn_ND+0x1872>
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				//240509 Con esta modificación, por cada error se demora 2 segundos
				if(((b->_estado >=at_wifi_err)&&(b->_estado <=at_wifi_conn_err))&&(b->_ticks2 > 2000))
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bee:	2b06      	cmp	r3, #6
 8009bf0:	dd1d      	ble.n	8009c2e <WiFi_Conn_ND+0x406>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bf8:	2b0b      	cmp	r3, #11
 8009bfa:	dc18      	bgt.n	8009c2e <WiFi_Conn_ND+0x406>
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 8009c02:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009c06:	dd12      	ble.n	8009c2e <WiFi_Conn_ND+0x406>
				{
					ConectarWIFI(b);
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f7fc fdc5 	bl	8006798 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	22c8      	movs	r2, #200	; 0xc8
 8009c12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					b->_ticks2=0;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
				}

				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c34:	2b04      	cmp	r3, #4
 8009c36:	f041 8232 	bne.w	800b09e <WiFi_Conn_ND+0x1876>
					{
						Cambiar_CWMODE(b);
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f7fc fd96 	bl	800676c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2264      	movs	r2, #100	; 0x64
 8009c44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009c58:	f001 ba21 	b.w	800b09e <WiFi_Conn_ND+0x1876>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d108      	bne.n	8009c80 <WiFi_Conn_ND+0x458>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f240 3229 	movw	r2, #809	; 0x329
 8009c74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}
				//if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
				if((b->_estado >=at_wifi_err)&&(b->_estado <=at_wifi_conn_err))  // Si se genera cualquier error de conexión, vuevlo a conectar	
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c86:	2b06      	cmp	r3, #6
 8009c88:	dd0f      	ble.n	8009caa <WiFi_Conn_ND+0x482>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c90:	2b0b      	cmp	r3, #11
 8009c92:	dc0a      	bgt.n	8009caa <WiFi_Conn_ND+0x482>
				{
					ConectarWIFI(b);
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f7fc fd7f 	bl	8006798 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	22c8      	movs	r2, #200	; 0xc8
 8009c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}
				if(b->_estado==at_ready)					  //Reinicio involuntario de módulo
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d10e      	bne.n	8009cd2 <WiFi_Conn_ND+0x4aa>
					{
						Cambiar_CWMODE(b);
 8009cb4:	68f8      	ldr	r0, [r7, #12]
 8009cb6:	f7fc fd59 	bl	800676c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2264      	movs	r2, #100	; 0x64
 8009cbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d011      	beq.n	8009d00 <WiFi_Conn_ND+0x4d8>
				{//
					CrearServidorTCP(b);
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f7fc fdc9 	bl	8006874 <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009ce8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 8009cfc:	f001 b9f8 	b.w	800b0f0 <WiFi_Conn_ND+0x18c8>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 8009d00:	68f8      	ldr	r0, [r7, #12]
 8009d02:	f7fc fd5f 	bl	80067c4 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009d0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8009d18:	f001 b9ea 	b.w	800b0f0 <WiFi_Conn_ND+0x18c8>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=DESCONEXION_EN_CURSO)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d22:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009d26:	d03b      	beq.n	8009da0 <WiFi_Conn_ND+0x578>
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d2e:	2b04      	cmp	r3, #4
 8009d30:	d036      	beq.n	8009da0 <WiFi_Conn_ND+0x578>
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d38:	2b0c      	cmp	r3, #12
 8009d3a:	d031      	beq.n	8009da0 <WiFi_Conn_ND+0x578>
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d42:	2b0d      	cmp	r3, #13
 8009d44:	d02c      	beq.n	8009da0 <WiFi_Conn_ND+0x578>
				{
						DesconectarWIFI(b);
 8009d46:	68f8      	ldr	r0, [r7, #12]
 8009d48:	f7fc fd68 	bl	800681c <DesconectarWIFI>
						if(b->_enviaruart==1)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d124      	bne.n	8009da0 <WiFi_Conn_ND+0x578>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f7fc fe9e 	bl	8006a98 <AT_ESP8266_ND>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d109      	bne.n	8009d8a <WiFi_Conn_ND+0x562>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009d82:	4619      	mov	r1, r3
 8009d84:	4610      	mov	r0, r2
 8009d86:	f7f7 fc35 	bl	80015f4 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	2364      	movs	r3, #100	; 0x64
 8009d9a:	68b8      	ldr	r0, [r7, #8]
 8009d9c:	f7fb fc42 	bl	8005624 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009da6:	2b0c      	cmp	r3, #12
 8009da8:	d005      	beq.n	8009db6 <WiFi_Conn_ND+0x58e>
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009db0:	2b0d      	cmp	r3, #13
 8009db2:	f041 8176 	bne.w	800b0a2 <WiFi_Conn_ND+0x187a>
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f240 1235 	movw	r2, #309	; 0x135
 8009dbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009dc0:	f001 b96f 	b.w	800b0a2 <WiFi_Conn_ND+0x187a>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f7fc fcbb 	bl	8006740 <NOP>
			}
			break;
 8009dca:	f001 b991 	b.w	800b0f0 <WiFi_Conn_ND+0x18c8>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

				ConectarWIFI(b);
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f7fc fcde 	bl	8006798 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	22c8      	movs	r2, #200	; 0xc8
 8009de0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009df2:	2b04      	cmp	r3, #4
 8009df4:	f041 8157 	bne.w	800b0a6 <WiFi_Conn_ND+0x187e>
					{
						Cambiar_CWMODE(b);
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f7fc fcb7 	bl	800676c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2264      	movs	r2, #100	; 0x64
 8009e02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009e16:	f001 b946 	b.w	800b0a6 <WiFi_Conn_ND+0x187e>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=MUX_CONN_EN_CURSO)&&(b->_estado!=at_restart)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e20:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009e24:	d04f      	beq.n	8009ec6 <WiFi_Conn_ND+0x69e>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e2c:	2b04      	cmp	r3, #4
 8009e2e:	d04a      	beq.n	8009ec6 <WiFi_Conn_ND+0x69e>
									&&(b->_estado!=at_ok)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d045      	beq.n	8009ec6 <WiFi_Conn_ND+0x69e>
									&&(b->_estado!=at_error)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e40:	2b02      	cmp	r3, #2
 8009e42:	d040      	beq.n	8009ec6 <WiFi_Conn_ND+0x69e>
									&&(b->_estado!=at_multiple_conn_ok)
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e4a:	2b07      	cmp	r3, #7
 8009e4c:	d03b      	beq.n	8009ec6 <WiFi_Conn_ND+0x69e>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e54:	2b04      	cmp	r3, #4
 8009e56:	d036      	beq.n	8009ec6 <WiFi_Conn_ND+0x69e>
									&&(b->_estado!=at_multiple_conn_err)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e5e:	2b1e      	cmp	r3, #30
 8009e60:	d031      	beq.n	8009ec6 <WiFi_Conn_ND+0x69e>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e68:	2b05      	cmp	r3, #5
 8009e6a:	d02c      	beq.n	8009ec6 <WiFi_Conn_ND+0x69e>
				{
						MUX(b);
 8009e6c:	68f8      	ldr	r0, [r7, #12]
 8009e6e:	f7fc fca9 	bl	80067c4 <MUX>
						if(b->_enviaruart==1)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d124      	bne.n	8009ec6 <WiFi_Conn_ND+0x69e>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f7fc fe0b 	bl	8006a98 <AT_ESP8266_ND>
 8009e82:	4602      	mov	r2, r0
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d109      	bne.n	8009eb0 <WiFi_Conn_ND+0x688>
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	4610      	mov	r0, r2
 8009eac:	f7f7 fba2 	bl	80015f4 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	2364      	movs	r3, #100	; 0x64
 8009ec0:	68b8      	ldr	r0, [r7, #8]
 8009ec2:	f7fb fbaf 	bl	8005624 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d009      	beq.n	8009ee4 <WiFi_Conn_ND+0x6bc>
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ed6:	2b07      	cmp	r3, #7
 8009ed8:	d004      	beq.n	8009ee4 <WiFi_Conn_ND+0x6bc>
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ee0:	2b04      	cmp	r3, #4
 8009ee2:	d104      	bne.n	8009eee <WiFi_Conn_ND+0x6c6>
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f240 1299 	movw	r2, #409	; 0x199
 8009eea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err))
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d00a      	beq.n	8009f0e <WiFi_Conn_ND+0x6e6>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009efe:	2b1e      	cmp	r3, #30
 8009f00:	d005      	beq.n	8009f0e <WiFi_Conn_ND+0x6e6>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f08:	2b05      	cmp	r3, #5
 8009f0a:	f041 80ce 	bne.w	800b0aa <WiFi_Conn_ND+0x1882>
					{
					b->_estado_conexion=MUX_CONN_ERROR;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f240 1295 	movw	r2, #405	; 0x195
 8009f14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				//----Condiciones de cambio de estado
			}
			break;
 8009f18:	f001 b8c7 	b.w	800b0aa <WiFi_Conn_ND+0x1882>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f7fc fc0f 	bl	8006740 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f28:	2b04      	cmp	r3, #4
 8009f2a:	d112      	bne.n	8009f52 <WiFi_Conn_ND+0x72a>
				{
					Cambiar_CWMODE(b);
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f7fc fc1d 	bl	800676c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2264      	movs	r2, #100	; 0x64
 8009f36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f58:	2b0c      	cmp	r3, #12
 8009f5a:	d00a      	beq.n	8009f72 <WiFi_Conn_ND+0x74a>
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f62:	2b0d      	cmp	r3, #13
 8009f64:	d005      	beq.n	8009f72 <WiFi_Conn_ND+0x74a>
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f6c:	2b03      	cmp	r3, #3
 8009f6e:	f041 809e 	bne.w	800b0ae <WiFi_Conn_ND+0x1886>
				{
					ConectarWIFI(b);
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f7fc fc10 	bl	8006798 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	22c8      	movs	r2, #200	; 0xc8
 8009f7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 8009f90:	f001 b88d 	b.w	800b0ae <WiFi_Conn_ND+0x1886>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f7fc fbd3 	bl	8006740 <NOP>
				b->_n_orig=0; //Borro el vector RX
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fa8:	2b04      	cmp	r3, #4
 8009faa:	d10e      	bne.n	8009fca <WiFi_Conn_ND+0x7a2>
					{
						Cambiar_CWMODE(b);
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f7fc fbdd 	bl	800676c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2264      	movs	r2, #100	; 0x64
 8009fb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fd0:	2b0c      	cmp	r3, #12
 8009fd2:	d009      	beq.n	8009fe8 <WiFi_Conn_ND+0x7c0>
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fda:	2b0d      	cmp	r3, #13
 8009fdc:	d004      	beq.n	8009fe8 <WiFi_Conn_ND+0x7c0>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fe4:	2b03      	cmp	r3, #3
 8009fe6:	d10a      	bne.n	8009ffe <WiFi_Conn_ND+0x7d6>
					{
						ConectarWIFI(b);
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f7fc fbd5 	bl	8006798 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	22c8      	movs	r2, #200	; 0xc8
 8009ff2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}
					if(b->_NO_IP==0)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f8d3 3d58 	ldr.w	r3, [r3, #3416]	; 0xd58
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10d      	bne.n	800a024 <WiFi_Conn_ND+0x7fc>
					{
						IPDef(b);
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f7fc fbf1 	bl	80067f0 <IPDef>
						b->_estado_conexion=DEF_IP_EN_CURSO;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_estado=0;
					}


			}
			break;
 800a020:	f001 b866 	b.w	800b0f0 <WiFi_Conn_ND+0x18c8>
						IPDef(b);
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f7fc fbe3 	bl	80067f0 <IPDef>
						b->_estado_conexion=DEF_IP_OK;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2200      	movs	r2, #0
 800a038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a03c:	f001 b858 	b.w	800b0f0 <WiFi_Conn_ND+0x18c8>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=DEF_IP_EN_CURSO)&&(b->_estado!=at_restart)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a046:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a04a:	d045      	beq.n	800a0d8 <WiFi_Conn_ND+0x8b0>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a052:	2b04      	cmp	r3, #4
 800a054:	d040      	beq.n	800a0d8 <WiFi_Conn_ND+0x8b0>
									&&(b->_estado!=at_ok)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d03b      	beq.n	800a0d8 <WiFi_Conn_ND+0x8b0>
									&&(b->_estado!=at_error)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a066:	2b02      	cmp	r3, #2
 800a068:	d036      	beq.n	800a0d8 <WiFi_Conn_ND+0x8b0>
									&&(b->_estado!=at_def_ip_ok)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a070:	2b1b      	cmp	r3, #27
 800a072:	d031      	beq.n	800a0d8 <WiFi_Conn_ND+0x8b0>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a07a:	2b21      	cmp	r3, #33	; 0x21
 800a07c:	d02c      	beq.n	800a0d8 <WiFi_Conn_ND+0x8b0>
				{
						IPDef(b);
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f7fc fbb6 	bl	80067f0 <IPDef>
						if(b->_enviaruart==1)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d124      	bne.n	800a0d8 <WiFi_Conn_ND+0x8b0>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f7fc fd02 	bl	8006a98 <AT_ESP8266_ND>
 800a094:	4602      	mov	r2, r0
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d109      	bne.n	800a0c2 <WiFi_Conn_ND+0x89a>
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	4610      	mov	r0, r2
 800a0be:	f7f7 fa99 	bl	80015f4 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a0ce:	b29a      	uxth	r2, r3
 800a0d0:	2364      	movs	r3, #100	; 0x64
 800a0d2:	68b8      	ldr	r0, [r7, #8]
 800a0d4:	f7fb faa6 	bl	8005624 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d004      	beq.n	800a0ec <WiFi_Conn_ND+0x8c4>
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e8:	2b1b      	cmp	r3, #27
 800a0ea:	d104      	bne.n	800a0f6 <WiFi_Conn_ND+0x8ce>
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a0f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d005      	beq.n	800a10c <WiFi_Conn_ND+0x8e4>
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a106:	2b21      	cmp	r3, #33	; 0x21
 800a108:	f040 87d3 	bne.w	800b0b2 <WiFi_Conn_ND+0x188a>
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a112:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a116:	f000 bfcc 	b.w	800b0b2 <WiFi_Conn_ND+0x188a>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f7fc fb10 	bl	8006740 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a126:	2b04      	cmp	r3, #4
 800a128:	d004      	beq.n	800a134 <WiFi_Conn_ND+0x90c>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a130:	2b02      	cmp	r3, #2
 800a132:	d112      	bne.n	800a15a <WiFi_Conn_ND+0x932>
				{
					Cambiar_CWMODE(b);
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f7fc fb19 	bl	800676c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2264      	movs	r2, #100	; 0x64
 800a13e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2200      	movs	r2, #0
 800a156:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a160:	2b0c      	cmp	r3, #12
 800a162:	d00a      	beq.n	800a17a <WiFi_Conn_ND+0x952>
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a16a:	2b0d      	cmp	r3, #13
 800a16c:	d005      	beq.n	800a17a <WiFi_Conn_ND+0x952>
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a174:	2b03      	cmp	r3, #3
 800a176:	f040 879e 	bne.w	800b0b6 <WiFi_Conn_ND+0x188e>
				{
					ConectarWIFI(b);
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f7fc fb0c 	bl	8006798 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	22c8      	movs	r2, #200	; 0xc8
 800a184:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2200      	movs	r2, #0
 800a194:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 800a198:	f000 bf8d 	b.w	800b0b6 <WiFi_Conn_ND+0x188e>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f7fc facf 	bl	8006740 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a8:	2b04      	cmp	r3, #4
 800a1aa:	d112      	bne.n	800a1d2 <WiFi_Conn_ND+0x9aa>
					{
						Cambiar_CWMODE(b);
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f7fc fadd 	bl	800676c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2264      	movs	r2, #100	; 0x64
 800a1b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1d8:	2b0c      	cmp	r3, #12
 800a1da:	d009      	beq.n	800a1f0 <WiFi_Conn_ND+0x9c8>
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1e2:	2b0d      	cmp	r3, #13
 800a1e4:	d004      	beq.n	800a1f0 <WiFi_Conn_ND+0x9c8>
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ec:	2b03      	cmp	r3, #3
 800a1ee:	d10e      	bne.n	800a20e <WiFi_Conn_ND+0x9e6>
					{
						ConectarWIFI(b);
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f7fc fad1 	bl	8006798 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	22c8      	movs	r2, #200	; 0xc8
 800a1fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2200      	movs	r2, #0
 800a20a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a214:	2b00      	cmp	r3, #0
 800a216:	d111      	bne.n	800a23c <WiFi_Conn_ND+0xa14>
					{
						ConectarTCP(b);
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f7fc fb15 	bl	8006848 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a224:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
						b->_estado=0;//
						b->_n_orig=0;// //Borro el vector RX

					}
			}
			break;
 800a238:	f000 bf5a 	b.w	800b0f0 <WiFi_Conn_ND+0x18c8>
						ConectarWIFI(b);//
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	f7fc faab 	bl	8006798 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	22c8      	movs	r2, #200	; 0xc8
 800a246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			break;
 800a25a:	f000 bf49 	b.w	800b0f0 <WiFi_Conn_ND+0x18c8>
									&&(b->_estado!=at_ready)
									&&(b->_estado!=at_wifi_disconnect)
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
									&&(b->_estado!=at_tcp_conectado)
									&&(b->_estado!=at_tcp_client_desc))*/	//Si estoy conectando, no vuelvo a conectar.
				if((b->_estado!=TCP_CONN_EN_CURSO)&&((b->_estado > at_tcp_close_err)||(b->_estado==0))) //||(b->_estado==0)))
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a264:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a268:	d036      	beq.n	800a2d8 <WiFi_Conn_ND+0xab0>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a270:	2b13      	cmp	r3, #19
 800a272:	dc04      	bgt.n	800a27e <WiFi_Conn_ND+0xa56>
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d12c      	bne.n	800a2d8 <WiFi_Conn_ND+0xab0>
				{
					ConectarTCP(b);
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f7fc fae2 	bl	8006848 <ConectarTCP>
						if(b->_enviaruart==1)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d124      	bne.n	800a2d8 <WiFi_Conn_ND+0xab0>
							{
								b->_estado=AT_ESP8266_ND(b);  //a partir de ahora b->_estado vale TCP_CONN_EN_CURSO
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f7fc fc02 	bl	8006a98 <AT_ESP8266_ND>
 800a294:	4602      	mov	r2, r0
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d109      	bne.n	800a2c2 <WiFi_Conn_ND+0xa9a>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	4610      	mov	r0, r2
 800a2be:	f7f7 f999 	bl	80015f4 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a2ce:	b29a      	uxth	r2, r3
 800a2d0:	2364      	movs	r3, #100	; 0x64
 800a2d2:	68b8      	ldr	r0, [r7, #8]
 800a2d4:	f7fb f9a6 	bl	8005624 <HAL_UART_Transmit>
							}
				}
				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado)) 	
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2de:	2b10      	cmp	r3, #16
 800a2e0:	d004      	beq.n	800a2ec <WiFi_Conn_ND+0xac4>
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2e8:	2b0e      	cmp	r3, #14
 800a2ea:	d106      	bne.n	800a2fa <WiFi_Conn_ND+0xad2>
					{
						b->_estado_conexion=TCP_CONN_OK;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f240 2261 	movw	r2, #609	; 0x261
 800a2f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

				//if((b->_estado==at_error)||(b->_estado==at_tcp_client_desc))  				b->_estado_conexion=TCP_CONN_ERROR;
				//----Condiciones de cambio de estado
			}
			break;
 800a2f6:	f000 bee0 	b.w	800b0ba <WiFi_Conn_ND+0x1892>
						if(b->_estado<= at_tcp_client_desc)  b->_estado_conexion=TCP_CONN_ERROR;	
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a300:	2b14      	cmp	r3, #20
 800a302:	f300 86da 	bgt.w	800b0ba <WiFi_Conn_ND+0x1892>
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f240 225d 	movw	r2, #605	; 0x25d
 800a30c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800a310:	f000 bed3 	b.w	800b0ba <WiFi_Conn_ND+0x1892>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800a314:	68f8      	ldr	r0, [r7, #12]
 800a316:	f7fc fa13 	bl	8006740 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a320:	2b04      	cmp	r3, #4
 800a322:	d112      	bne.n	800a34a <WiFi_Conn_ND+0xb22>
				{
					Cambiar_CWMODE(b);
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f7fc fa21 	bl	800676c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2264      	movs	r2, #100	; 0x64
 800a32e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2200      	movs	r2, #0
 800a336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2200      	movs	r2, #0
 800a33e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_ready)||(b->_estado==at_tcp_noip_err)) //Si me desconecto, me vuelvo a conectar
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a350:	2b0c      	cmp	r3, #12
 800a352:	d009      	beq.n	800a368 <WiFi_Conn_ND+0xb40>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d004      	beq.n	800a368 <WiFi_Conn_ND+0xb40>
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a364:	2b11      	cmp	r3, #17
 800a366:	d10e      	bne.n	800a386 <WiFi_Conn_ND+0xb5e>
				{
					ConectarWIFI(b);
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f7fc fa15 	bl	8006798 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	22c8      	movs	r2, #200	; 0xc8
 800a372:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2200      	movs	r2, #0
 800a37a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}

				if(((b->_estado==at_tcp_client_desc)||(b->_estado==at_tcp_conn_err))&&(b->_ticks2 > 2000)) //Si se cierra la conexión vuelvo a conectar
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a38c:	2b14      	cmp	r3, #20
 800a38e:	d005      	beq.n	800a39c <WiFi_Conn_ND+0xb74>
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a396:	2b0f      	cmp	r3, #15
 800a398:	f040 8691 	bne.w	800b0be <WiFi_Conn_ND+0x1896>
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 800a3a2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a3a6:	f340 868a 	ble.w	800b0be <WiFi_Conn_ND+0x1896>
				{
					ConectarTCP(b);
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f7fc fa4c 	bl	8006848 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a3b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					b->_ticks2=0;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
				}
			}
			break;
 800a3d2:	f000 be74 	b.w	800b0be <WiFi_Conn_ND+0x1896>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f7fc f9b2 	bl	8006740 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3e2:	2b04      	cmp	r3, #4
 800a3e4:	d112      	bne.n	800a40c <WiFi_Conn_ND+0xbe4>
					{
						Cambiar_CWMODE(b);
 800a3e6:	68f8      	ldr	r0, [r7, #12]
 800a3e8:	f7fc f9c0 	bl	800676c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2264      	movs	r2, #100	; 0x64
 800a3f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_ready)||(b->_estado==at_tcp_noip_err)) //Si me desconecto, me vuelvo a conectar
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a412:	2b0c      	cmp	r3, #12
 800a414:	d009      	beq.n	800a42a <WiFi_Conn_ND+0xc02>
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d004      	beq.n	800a42a <WiFi_Conn_ND+0xc02>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a426:	2b11      	cmp	r3, #17
 800a428:	d10e      	bne.n	800a448 <WiFi_Conn_ND+0xc20>
					{
						ConectarWIFI(b);
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f7fc f9b4 	bl	8006798 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	22c8      	movs	r2, #200	; 0xc8
 800a434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2200      	movs	r2, #0
 800a444:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}

					if((b->_estado==at_tcp_client_desc))	//Si se cierra la conexión vuelvo a conectar
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a44e:	2b14      	cmp	r3, #20
 800a450:	d10f      	bne.n	800a472 <WiFi_Conn_ND+0xc4a>
					{
						ConectarTCP(b);
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f7fc f9f8 	bl	8006848 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a45e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2200      	movs	r2, #0
 800a466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a478:	2b10      	cmp	r3, #16
 800a47a:	d005      	beq.n	800a488 <WiFi_Conn_ND+0xc60>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a482:	2b0e      	cmp	r3, #14
 800a484:	f040 861d 	bne.w	800b0c2 <WiFi_Conn_ND+0x189a>
					{
						if(b->_automatizacion >= WF_SEND )
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a48e:	2b02      	cmp	r3, #2
 800a490:	f240 8617 	bls.w	800b0c2 <WiFi_Conn_ND+0x189a>
						{
							EnviarDatos(b);
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f7fc fa19 	bl	80068cc <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800a4a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
						}
					}
			}
			break;
 800a4b4:	f000 be05 	b.w	800b0c2 <WiFi_Conn_ND+0x189a>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=TCP_SND_EN_CURSO)&&(b->_estado!=at_error)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4be:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a4c2:	d054      	beq.n	800a56e <WiFi_Conn_ND+0xd46>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ca:	2b02      	cmp	r3, #2
 800a4cc:	d04f      	beq.n	800a56e <WiFi_Conn_ND+0xd46>
									&&(b->_estado!=at_wifi_disconnect)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4d4:	2b0c      	cmp	r3, #12
 800a4d6:	d04a      	beq.n	800a56e <WiFi_Conn_ND+0xd46>
									&&(b->_estado!=at_tcp_client_desc)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4de:	2b14      	cmp	r3, #20
 800a4e0:	d045      	beq.n	800a56e <WiFi_Conn_ND+0xd46>
									&&(b->_estado!=at_tcp_snd_err)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e8:	2b17      	cmp	r3, #23
 800a4ea:	d040      	beq.n	800a56e <WiFi_Conn_ND+0xd46>
									&&(b->_estado!=at_tcp_ok_to_send)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4f2:	2b15      	cmp	r3, #21
 800a4f4:	d03b      	beq.n	800a56e <WiFi_Conn_ND+0xd46>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4fc:	2b18      	cmp	r3, #24
 800a4fe:	d036      	beq.n	800a56e <WiFi_Conn_ND+0xd46>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a506:	2b02      	cmp	r3, #2
 800a508:	d907      	bls.n	800a51a <WiFi_Conn_ND+0xcf2>
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d002      	beq.n	800a51a <WiFi_Conn_ND+0xcf2>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f7fc f9d9 	bl	80068cc <EnviarDatos>
					}
						if(b->_enviaruart==1)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a520:	2b01      	cmp	r3, #1
 800a522:	d124      	bne.n	800a56e <WiFi_Conn_ND+0xd46>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	f7fc fab7 	bl	8006a98 <AT_ESP8266_ND>
 800a52a:	4602      	mov	r2, r0
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2200      	movs	r2, #0
 800a536:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a540:	2b01      	cmp	r3, #1
 800a542:	d109      	bne.n	800a558 <WiFi_Conn_ND+0xd30>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a550:	4619      	mov	r1, r3
 800a552:	4610      	mov	r0, r2
 800a554:	f7f7 f84e 	bl	80015f4 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a564:	b29a      	uxth	r2, r3
 800a566:	2364      	movs	r3, #100	; 0x64
 800a568:	68b8      	ldr	r0, [r7, #8]
 800a56a:	f7fb f85b 	bl	8005624 <HAL_UART_Transmit>
				&&(b->_estado!=at_tcp_client_desc)
				&&(b->_estado!=at_fail)		//240419
				&&(b->_estado!=at_tcp_snd_err)
				&&(b->_estado!=at_tcp_enviado_error))*/
				//if((b->_estado==TCP_SND_EN_CURSO)&&(b->_enviaruart==1)&&(b->_estado==at_tcp_ok_to_send))
				if((b->_enviaruart==1)&&(b->_estado==at_tcp_ok_to_send))
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a574:	2b01      	cmp	r3, #1
 800a576:	d122      	bne.n	800a5be <WiFi_Conn_ND+0xd96>
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a57e:	2b15      	cmp	r3, #21
 800a580:	d11d      	bne.n	800a5be <WiFi_Conn_ND+0xd96>

							{
								b->_enviaruart=0;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2200      	movs	r2, #0
 800a586:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a590:	2b01      	cmp	r3, #1
 800a592:	d109      	bne.n	800a5a8 <WiFi_Conn_ND+0xd80>
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	4610      	mov	r0, r2
 800a5a4:	f7f7 f826 	bl	80015f4 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	2364      	movs	r3, #100	; 0x64
 800a5b8:	68b8      	ldr	r0, [r7, #8]
 800a5ba:	f7fb f833 	bl	8005624 <HAL_UART_Transmit>
							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5c4:	2b16      	cmp	r3, #22
 800a5c6:	d104      	bne.n	800a5d2 <WiFi_Conn_ND+0xdaa>
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f240 22c5 	movw	r2, #709	; 0x2c5
 800a5ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d8:	2b02      	cmp	r3, #2
 800a5da:	d01e      	beq.n	800a61a <WiFi_Conn_ND+0xdf2>
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e2:	2b0c      	cmp	r3, #12
 800a5e4:	d019      	beq.n	800a61a <WiFi_Conn_ND+0xdf2>
										 ||(b->_estado==at_fail)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ec:	2b03      	cmp	r3, #3
 800a5ee:	d014      	beq.n	800a61a <WiFi_Conn_ND+0xdf2>
										 ||(b->_estado==at_tcp_noip_err)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f6:	2b11      	cmp	r3, #17
 800a5f8:	d00f      	beq.n	800a61a <WiFi_Conn_ND+0xdf2>
										 ||(b->_estado==at_tcp_client_desc)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a600:	2b14      	cmp	r3, #20
 800a602:	d00a      	beq.n	800a61a <WiFi_Conn_ND+0xdf2>
										 ||(b->_estado==at_tcp_snd_err)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a60a:	2b17      	cmp	r3, #23
 800a60c:	d005      	beq.n	800a61a <WiFi_Conn_ND+0xdf2>
										 ||(b->_estado==at_tcp_enviado_error))
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a614:	2b18      	cmp	r3, #24
 800a616:	f040 8556 	bne.w	800b0c6 <WiFi_Conn_ND+0x189e>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a620:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800a624:	f000 bd4f 	b.w	800b0c6 <WiFi_Conn_ND+0x189e>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	f7fc f889 	bl	8006740 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a634:	2b04      	cmp	r3, #4
 800a636:	d112      	bne.n	800a65e <WiFi_Conn_ND+0xe36>
				{
					Cambiar_CWMODE(b);
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	f7fc f897 	bl	800676c <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2264      	movs	r2, #100	; 0x64
 800a642:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2200      	movs	r2, #0
 800a64a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2200      	movs	r2, #0
 800a652:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2200      	movs	r2, #0
 800a65a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a664:	2b0c      	cmp	r3, #12
 800a666:	d013      	beq.n	800a690 <WiFi_Conn_ND+0xe68>
						||(b->_estado==at_deconectar_ok )
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a66e:	2b0d      	cmp	r3, #13
 800a670:	d00e      	beq.n	800a690 <WiFi_Conn_ND+0xe68>
						||(b->_estado==at_fail)
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a678:	2b03      	cmp	r3, #3
 800a67a:	d009      	beq.n	800a690 <WiFi_Conn_ND+0xe68>
						||(b->_estado!=at_error)
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a682:	2b02      	cmp	r3, #2
 800a684:	d104      	bne.n	800a690 <WiFi_Conn_ND+0xe68>
						||(b->_estado!=at_tcp_noip_err)) //Si me desconecto, me vuelvo a conectar 240419
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a68c:	2b11      	cmp	r3, #17
 800a68e:	d00e      	beq.n	800a6ae <WiFi_Conn_ND+0xe86>
				{
					ConectarWIFI(b);
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	f7fc f881 	bl	8006798 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	22c8      	movs	r2, #200	; 0xc8
 800a69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6b4:	2b06      	cmp	r3, #6
 800a6b6:	d10f      	bne.n	800a6d8 <WiFi_Conn_ND+0xeb0>
				{
					ConectarTCP(b);
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f7fc f8c5 	bl	8006848 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a6c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_client_desc)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6de:	2b02      	cmp	r3, #2
 800a6e0:	d00f      	beq.n	800a702 <WiFi_Conn_ND+0xeda>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6e8:	2b14      	cmp	r3, #20
 800a6ea:	d00a      	beq.n	800a702 <WiFi_Conn_ND+0xeda>
										 ||(b->_estado==at_tcp_snd_err)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6f2:	2b17      	cmp	r3, #23
 800a6f4:	d005      	beq.n	800a702 <WiFi_Conn_ND+0xeda>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6fc:	2b18      	cmp	r3, #24
 800a6fe:	f040 84e4 	bne.w	800b0ca <WiFi_Conn_ND+0x18a2>
				{
					ConectarTCP(b);
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	f7fc f8a0 	bl	8006848 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a70e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 800a722:	f000 bcd2 	b.w	800b0ca <WiFi_Conn_ND+0x18a2>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f7fc f80a 	bl	8006740 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a732:	2b04      	cmp	r3, #4
 800a734:	d112      	bne.n	800a75c <WiFi_Conn_ND+0xf34>
					{
						Cambiar_CWMODE(b);
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f7fc f818 	bl	800676c <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2264      	movs	r2, #100	; 0x64
 800a740:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2200      	movs	r2, #0
 800a750:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2200      	movs	r2, #0
 800a758:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a762:	2b0c      	cmp	r3, #12
 800a764:	d009      	beq.n	800a77a <WiFi_Conn_ND+0xf52>
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a76c:	2b0d      	cmp	r3, #13
 800a76e:	d004      	beq.n	800a77a <WiFi_Conn_ND+0xf52>
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a776:	2b03      	cmp	r3, #3
 800a778:	d10e      	bne.n	800a798 <WiFi_Conn_ND+0xf70>
					{
						ConectarWIFI(b);
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f7fc f80c 	bl	8006798 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	22c8      	movs	r2, #200	; 0xc8
 800a784:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_client_desc))	//Si se cierra la conexión vuelvo a conectar
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	d00e      	beq.n	800a7c0 <WiFi_Conn_ND+0xf98>
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7a8:	2b0d      	cmp	r3, #13
 800a7aa:	d009      	beq.n	800a7c0 <WiFi_Conn_ND+0xf98>
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7b2:	2b06      	cmp	r3, #6
 800a7b4:	d004      	beq.n	800a7c0 <WiFi_Conn_ND+0xf98>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7bc:	2b14      	cmp	r3, #20
 800a7be:	d10f      	bne.n	800a7e0 <WiFi_Conn_ND+0xfb8>
					{
						ConectarTCP(b);
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f7fc f841 	bl	8006848 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a7cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800a7e0:	20c8      	movs	r0, #200	; 0xc8
 800a7e2:	f7f8 fa6b 	bl	8002cbc <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a7ec:	2b02      	cmp	r3, #2
 800a7ee:	d916      	bls.n	800a81e <WiFi_Conn_ND+0xff6>
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d011      	beq.n	800a81e <WiFi_Conn_ND+0xff6>
					{
							EnviarDatos(b);
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f7fc f866 	bl	80068cc <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800a806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2200      	movs	r2, #0
 800a816:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800a81a:	f000 bc69 	b.w	800b0f0 <WiFi_Conn_ND+0x18c8>
							b->_estado_conexion=TCP_CONN_OK;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f240 2261 	movw	r2, #609	; 0x261
 800a824:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2200      	movs	r2, #0
 800a834:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			break;
 800a838:	f000 bc5a 	b.w	800b0f0 <WiFi_Conn_ND+0x18c8>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=TCP_SRVR_EN_CURSO)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a842:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800a846:	d045      	beq.n	800a8d4 <WiFi_Conn_ND+0x10ac>
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a84e:	2b02      	cmp	r3, #2
 800a850:	d040      	beq.n	800a8d4 <WiFi_Conn_ND+0x10ac>
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a858:	2b0c      	cmp	r3, #12
 800a85a:	d03b      	beq.n	800a8d4 <WiFi_Conn_ND+0x10ac>
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a862:	2b15      	cmp	r3, #21
 800a864:	d036      	beq.n	800a8d4 <WiFi_Conn_ND+0x10ac>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a86c:	2b16      	cmp	r3, #22
 800a86e:	d031      	beq.n	800a8d4 <WiFi_Conn_ND+0x10ac>
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a876:	2b17      	cmp	r3, #23
 800a878:	d02c      	beq.n	800a8d4 <WiFi_Conn_ND+0x10ac>
							{
								CrearServidorTCP(b);
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	f7fb fffa 	bl	8006874 <CrearServidorTCP>
									if(b->_enviaruart==1)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a886:	2b01      	cmp	r3, #1
 800a888:	d124      	bne.n	800a8d4 <WiFi_Conn_ND+0x10ac>
										{
											b->_estado=AT_ESP8266_ND(b);
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f7fc f904 	bl	8006a98 <AT_ESP8266_ND>
 800a890:	4602      	mov	r2, r0
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2200      	movs	r2, #0
 800a89c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d109      	bne.n	800a8be <WiFi_Conn_ND+0x1096>
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	4610      	mov	r0, r2
 800a8ba:	f7f6 fe9b 	bl	80015f4 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	2364      	movs	r3, #100	; 0x64
 800a8ce:	68b8      	ldr	r0, [r7, #8]
 800a8d0:	f7fa fea8 	bl	8005624 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8da:	2b15      	cmp	r3, #21
 800a8dc:	d004      	beq.n	800a8e8 <WiFi_Conn_ND+0x10c0>
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8e4:	2b17      	cmp	r3, #23
 800a8e6:	d104      	bne.n	800a8f2 <WiFi_Conn_ND+0x10ca>
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f240 3229 	movw	r2, #809	; 0x329
 800a8ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8f8:	2b16      	cmp	r3, #22
 800a8fa:	f040 83e8 	bne.w	800b0ce <WiFi_Conn_ND+0x18a6>
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f240 3225 	movw	r2, #805	; 0x325
 800a904:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800a908:	e3e1      	b.n	800b0ce <WiFi_Conn_ND+0x18a6>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f7fb ff18 	bl	8006740 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a916:	2b04      	cmp	r3, #4
 800a918:	d112      	bne.n	800a940 <WiFi_Conn_ND+0x1118>
							{
								Cambiar_CWMODE(b);
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f7fb ff26 	bl	800676c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2264      	movs	r2, #100	; 0x64
 800a924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2200      	movs	r2, #0
 800a934:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2200      	movs	r2, #0
 800a93c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a946:	2b0c      	cmp	r3, #12
 800a948:	d009      	beq.n	800a95e <WiFi_Conn_ND+0x1136>
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a950:	2b0d      	cmp	r3, #13
 800a952:	d004      	beq.n	800a95e <WiFi_Conn_ND+0x1136>
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a95a:	2b03      	cmp	r3, #3
 800a95c:	d10e      	bne.n	800a97c <WiFi_Conn_ND+0x1154>
							{
								ConectarWIFI(b);
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f7fb ff1a 	bl	8006798 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	22c8      	movs	r2, #200	; 0xc8
 800a968:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2200      	movs	r2, #0
 800a970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_client_desc))	//Si se cierra la conexión vuelvo a conectar
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a982:	2b02      	cmp	r3, #2
 800a984:	d005      	beq.n	800a992 <WiFi_Conn_ND+0x116a>
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a98c:	2b14      	cmp	r3, #20
 800a98e:	f040 83a0 	bne.w	800b0d2 <WiFi_Conn_ND+0x18aa>
							{
								ConectarTCP(b);
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f7fb ff58 	bl	8006848 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a99e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800a9b2:	e38e      	b.n	800b0d2 <WiFi_Conn_ND+0x18aa>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f7fb fec3 	bl	8006740 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9c0:	2b04      	cmp	r3, #4
 800a9c2:	d112      	bne.n	800a9ea <WiFi_Conn_ND+0x11c2>
							{
								Cambiar_CWMODE(b);
 800a9c4:	68f8      	ldr	r0, [r7, #12]
 800a9c6:	f7fb fed1 	bl	800676c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2264      	movs	r2, #100	; 0x64
 800a9ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9f0:	2b0c      	cmp	r3, #12
 800a9f2:	d009      	beq.n	800aa08 <WiFi_Conn_ND+0x11e0>
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9fa:	2b0d      	cmp	r3, #13
 800a9fc:	d004      	beq.n	800aa08 <WiFi_Conn_ND+0x11e0>
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa04:	2b03      	cmp	r3, #3
 800aa06:	d10e      	bne.n	800aa26 <WiFi_Conn_ND+0x11fe>
							{
								ConectarWIFI(b);
 800aa08:	68f8      	ldr	r0, [r7, #12]
 800aa0a:	f7fb fec5 	bl	8006798 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	22c8      	movs	r2, #200	; 0xc8
 800aa12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_client_desc))	//Si se cierra la conexión vuelvo a conectar
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d005      	beq.n	800aa3c <WiFi_Conn_ND+0x1214>
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa36:	2b14      	cmp	r3, #20
 800aa38:	f040 834d 	bne.w	800b0d6 <WiFi_Conn_ND+0x18ae>
							{
								ConectarTCP(b);
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f7fb ff03 	bl	8006848 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aa48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}
						}
						break;
 800aa5c:	e33b      	b.n	800b0d6 <WiFi_Conn_ND+0x18ae>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f7fb fe6e 	bl	8006740 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa6a:	2b04      	cmp	r3, #4
 800aa6c:	d112      	bne.n	800aa94 <WiFi_Conn_ND+0x126c>
							{
								Cambiar_CWMODE(b);
 800aa6e:	68f8      	ldr	r0, [r7, #12]
 800aa70:	f7fb fe7c 	bl	800676c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2264      	movs	r2, #100	; 0x64
 800aa78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa9a:	2b0c      	cmp	r3, #12
 800aa9c:	d009      	beq.n	800aab2 <WiFi_Conn_ND+0x128a>
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaa4:	2b0d      	cmp	r3, #13
 800aaa6:	d004      	beq.n	800aab2 <WiFi_Conn_ND+0x128a>
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaae:	2b03      	cmp	r3, #3
 800aab0:	d10e      	bne.n	800aad0 <WiFi_Conn_ND+0x12a8>
							{
								ConectarWIFI(b);
 800aab2:	68f8      	ldr	r0, [r7, #12]
 800aab4:	f7fb fe70 	bl	8006798 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	22c8      	movs	r2, #200	; 0xc8
 800aabc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2200      	movs	r2, #0
 800aacc:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_client_desc))	//Si se cierra la conexión vuelvo a conectar
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d005      	beq.n	800aae6 <WiFi_Conn_ND+0x12be>
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aae0:	2b14      	cmp	r3, #20
 800aae2:	f040 82fa 	bne.w	800b0da <WiFi_Conn_ND+0x18b2>
							{
								ConectarTCP(b);
 800aae6:	68f8      	ldr	r0, [r7, #12]
 800aae8:	f7fb feae 	bl	8006848 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aaf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}
						}
						break;
 800ab06:	e2e8      	b.n	800b0da <WiFi_Conn_ND+0x18b2>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f7fb fe19 	bl	8006740 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab14:	2b04      	cmp	r3, #4
 800ab16:	d112      	bne.n	800ab3e <WiFi_Conn_ND+0x1316>
							{
								Cambiar_CWMODE(b);
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f7fb fe27 	bl	800676c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2264      	movs	r2, #100	; 0x64
 800ab22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab44:	2b0c      	cmp	r3, #12
 800ab46:	d009      	beq.n	800ab5c <WiFi_Conn_ND+0x1334>
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab4e:	2b0d      	cmp	r3, #13
 800ab50:	d004      	beq.n	800ab5c <WiFi_Conn_ND+0x1334>
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab58:	2b03      	cmp	r3, #3
 800ab5a:	d10e      	bne.n	800ab7a <WiFi_Conn_ND+0x1352>
							{
								ConectarWIFI(b);
 800ab5c:	68f8      	ldr	r0, [r7, #12]
 800ab5e:	f7fb fe1b 	bl	8006798 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	22c8      	movs	r2, #200	; 0xc8
 800ab66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2200      	movs	r2, #0
 800ab76:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_client_desc))	//Si se cierra la conexión vuelvo a conectar
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d005      	beq.n	800ab90 <WiFi_Conn_ND+0x1368>
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab8a:	2b14      	cmp	r3, #20
 800ab8c:	f040 82a7 	bne.w	800b0de <WiFi_Conn_ND+0x18b6>
							{
								ConectarTCP(b);
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	f7fb fe59 	bl	8006848 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ab9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2200      	movs	r2, #0
 800abac:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}
						}
						break;
 800abb0:	e295      	b.n	800b0de <WiFi_Conn_ND+0x18b6>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f7fb fdc4 	bl	8006740 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abc6:	2b04      	cmp	r3, #4
 800abc8:	d112      	bne.n	800abf0 <WiFi_Conn_ND+0x13c8>
								{
									Cambiar_CWMODE(b);
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	f7fb fdce 	bl	800676c <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2264      	movs	r2, #100	; 0x64
 800abd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2200      	movs	r2, #0
 800abdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2200      	movs	r2, #0
 800abec:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf6:	2b0c      	cmp	r3, #12
 800abf8:	d009      	beq.n	800ac0e <WiFi_Conn_ND+0x13e6>
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac00:	2b0d      	cmp	r3, #13
 800ac02:	d004      	beq.n	800ac0e <WiFi_Conn_ND+0x13e6>
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac0a:	2b03      	cmp	r3, #3
 800ac0c:	d10e      	bne.n	800ac2c <WiFi_Conn_ND+0x1404>
								{
									ConectarWIFI(b);
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	f7fb fdc2 	bl	8006798 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	22c8      	movs	r2, #200	; 0xc8
 800ac18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_client_desc))	//Si se cierra la conexión vuelvo a conectar
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	d004      	beq.n	800ac40 <WiFi_Conn_ND+0x1418>
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac3c:	2b14      	cmp	r3, #20
 800ac3e:	d10f      	bne.n	800ac60 <WiFi_Conn_ND+0x1438>
								{
									ConectarTCP(b);
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	f7fb fe01 	bl	8006848 <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ac4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2200      	movs	r2, #0
 800ac54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	f040 823b 	bne.w	800b0e2 <WiFi_Conn_ND+0x18ba>
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f000 8235 	beq.w	800b0e2 <WiFi_Conn_ND+0x18ba>
								{
									EnviarDatosSRVR(b);
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f7fb fe11 	bl	80068a0 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f44f 7261 	mov.w	r2, #900	; 0x384
 800ac84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800ac98:	e223      	b.n	800b0e2 <WiFi_Conn_ND+0x18ba>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=TCP_SRVR_TX_EN_CURSO)&&(b->_estado!=at_error)&&
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aca0:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800aca4:	d063      	beq.n	800ad6e <WiFi_Conn_ND+0x1546>
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acac:	2b02      	cmp	r3, #2
 800acae:	d05e      	beq.n	800ad6e <WiFi_Conn_ND+0x1546>
							   (b->_estado!=at_wifi_disconnect)&&
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=TCP_SRVR_TX_EN_CURSO)&&(b->_estado!=at_error)&&
 800acb6:	2b0c      	cmp	r3, #12
 800acb8:	d059      	beq.n	800ad6e <WiFi_Conn_ND+0x1546>
							   (b->_estado!=at_wifi_connected)&&
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800acc0:	2b0d      	cmp	r3, #13
 800acc2:	d054      	beq.n	800ad6e <WiFi_Conn_ND+0x1546>
							   (b->_estado!=at_wifi_gotip)&&
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800acca:	2b06      	cmp	r3, #6
 800accc:	d04f      	beq.n	800ad6e <WiFi_Conn_ND+0x1546>
							   (b->_estado!=at_tcp_client_desc)&&
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800acd4:	2b14      	cmp	r3, #20
 800acd6:	d04a      	beq.n	800ad6e <WiFi_Conn_ND+0x1546>
							   (b->_estado!=at_tcp_snd_err)&&
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_client_desc)&&
 800acde:	2b17      	cmp	r3, #23
 800ace0:	d045      	beq.n	800ad6e <WiFi_Conn_ND+0x1546>
							   (b->_estado!=at_tcp_enviado_error)&&
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800ace8:	2b18      	cmp	r3, #24
 800acea:	d040      	beq.n	800ad6e <WiFi_Conn_ND+0x1546>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800acf2:	2b16      	cmp	r3, #22
 800acf4:	d03b      	beq.n	800ad6e <WiFi_Conn_ND+0x1546>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800acfc:	2b16      	cmp	r3, #22
 800acfe:	d036      	beq.n	800ad6e <WiFi_Conn_ND+0x1546>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad06:	2b19      	cmp	r3, #25
 800ad08:	d031      	beq.n	800ad6e <WiFi_Conn_ND+0x1546>
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d02c      	beq.n	800ad6e <WiFi_Conn_ND+0x1546>
								{
								EnviarDatosSRVR(b);
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f7fb fdc3 	bl	80068a0 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d124      	bne.n	800ad6e <WiFi_Conn_ND+0x1546>
										{
											b->_estado=AT_ESP8266_ND(b);
 800ad24:	68f8      	ldr	r0, [r7, #12]
 800ad26:	f7fb feb7 	bl	8006a98 <AT_ESP8266_ND>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2200      	movs	r2, #0
 800ad36:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d109      	bne.n	800ad58 <WiFi_Conn_ND+0x1530>
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800ad50:	4619      	mov	r1, r3
 800ad52:	4610      	mov	r0, r2
 800ad54:	f7f6 fc4e 	bl	80015f4 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	2364      	movs	r3, #100	; 0x64
 800ad68:	68b8      	ldr	r0, [r7, #8]
 800ad6a:	f7fa fc5b 	bl	8005624 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==TCP_SRVR_TX_EN_CURSO)&&(b->_enviaruart==1)&&
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad74:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800ad78:	d154      	bne.n	800ae24 <WiFi_Conn_ND+0x15fc>
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d14f      	bne.n	800ae24 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_error)&&
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==TCP_SRVR_TX_EN_CURSO)&&(b->_enviaruart==1)&&
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	d04a      	beq.n	800ae24 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_wifi_disconnect)&&
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800ad94:	2b0c      	cmp	r3, #12
 800ad96:	d045      	beq.n	800ae24 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_wifi_connected)&&
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800ad9e:	2b0d      	cmp	r3, #13
 800ada0:	d040      	beq.n	800ae24 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_wifi_gotip)&&
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800ada8:	2b06      	cmp	r3, #6
 800adaa:	d03b      	beq.n	800ae24 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_tcp_client_desc)&&
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800adb2:	2b14      	cmp	r3, #20
 800adb4:	d036      	beq.n	800ae24 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_tcp_snd_err)&&
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_client_desc)&&
 800adbc:	2b17      	cmp	r3, #23
 800adbe:	d031      	beq.n	800ae24 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_tcp_enviado_error)&&
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800adc6:	2b18      	cmp	r3, #24
 800adc8:	d02c      	beq.n	800ae24 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800add0:	2b16      	cmp	r3, #22
 800add2:	d027      	beq.n	800ae24 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800adda:	2b16      	cmp	r3, #22
 800addc:	d022      	beq.n	800ae24 <WiFi_Conn_ND+0x15fc>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ade4:	2b19      	cmp	r3, #25
 800ade6:	d01d      	beq.n	800ae24 <WiFi_Conn_ND+0x15fc>
										{
											b->_enviaruart=0;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2200      	movs	r2, #0
 800adec:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d109      	bne.n	800ae0e <WiFi_Conn_ND+0x15e6>
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800ae06:	4619      	mov	r1, r3
 800ae08:	4610      	mov	r0, r2
 800ae0a:	f7f6 fbf3 	bl	80015f4 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800ae1a:	b29a      	uxth	r2, r3
 800ae1c:	2364      	movs	r3, #100	; 0x64
 800ae1e:	68b8      	ldr	r0, [r7, #8]
 800ae20:	f7fa fc00 	bl	8005624 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae2a:	2b16      	cmp	r3, #22
 800ae2c:	d104      	bne.n	800ae38 <WiFi_Conn_ND+0x1610>
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f240 328d 	movw	r2, #909	; 0x38d
 800ae34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	d02d      	beq.n	800ae9e <WiFi_Conn_ND+0x1676>
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae48:	2b04      	cmp	r3, #4
 800ae4a:	d028      	beq.n	800ae9e <WiFi_Conn_ND+0x1676>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800ae52:	2b0c      	cmp	r3, #12
 800ae54:	d023      	beq.n	800ae9e <WiFi_Conn_ND+0x1676>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae5c:	2b0d      	cmp	r3, #13
 800ae5e:	d01e      	beq.n	800ae9e <WiFi_Conn_ND+0x1676>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_client_desc)||
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800ae66:	2b06      	cmp	r3, #6
 800ae68:	d019      	beq.n	800ae9e <WiFi_Conn_ND+0x1676>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_client_desc)||
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae70:	2b14      	cmp	r3, #20
 800ae72:	d014      	beq.n	800ae9e <WiFi_Conn_ND+0x1676>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_client_desc)||
 800ae7a:	2b17      	cmp	r3, #23
 800ae7c:	d00f      	beq.n	800ae9e <WiFi_Conn_ND+0x1676>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae84:	2b18      	cmp	r3, #24
 800ae86:	d00a      	beq.n	800ae9e <WiFi_Conn_ND+0x1676>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800ae8e:	2b16      	cmp	r3, #22
 800ae90:	d005      	beq.n	800ae9e <WiFi_Conn_ND+0x1676>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae98:	2b19      	cmp	r3, #25
 800ae9a:	f040 8124 	bne.w	800b0e6 <WiFi_Conn_ND+0x18be>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f240 3289 	movw	r2, #905	; 0x389
 800aea4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800aea8:	e11d      	b.n	800b0e6 <WiFi_Conn_ND+0x18be>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	f7fb fc48 	bl	8006740 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeb6:	2b04      	cmp	r3, #4
 800aeb8:	d009      	beq.n	800aece <WiFi_Conn_ND+0x16a6>
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aec0:	2b0d      	cmp	r3, #13
 800aec2:	d004      	beq.n	800aece <WiFi_Conn_ND+0x16a6>
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeca:	2b06      	cmp	r3, #6
 800aecc:	d112      	bne.n	800aef4 <WiFi_Conn_ND+0x16cc>
							{
								Cambiar_CWMODE(b);
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f7fb fc4c 	bl	800676c <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2264      	movs	r2, #100	; 0x64
 800aed8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2200      	movs	r2, #0
 800aee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2200      	movs	r2, #0
 800aef0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aefa:	2b0c      	cmp	r3, #12
 800aefc:	d009      	beq.n	800af12 <WiFi_Conn_ND+0x16ea>
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af04:	2b0d      	cmp	r3, #13
 800af06:	d004      	beq.n	800af12 <WiFi_Conn_ND+0x16ea>
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af0e:	2b03      	cmp	r3, #3
 800af10:	d10e      	bne.n	800af30 <WiFi_Conn_ND+0x1708>
							{
								ConectarWIFI(b);
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f7fb fc40 	bl	8006798 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	22c8      	movs	r2, #200	; 0xc8
 800af1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2200      	movs	r2, #0
 800af24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af36:	2b16      	cmp	r3, #22
 800af38:	d10c      	bne.n	800af54 <WiFi_Conn_ND+0x172c>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f240 3225 	movw	r2, #805	; 0x325
 800af40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2200      	movs	r2, #0
 800af48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2200      	movs	r2, #0
 800af50:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af5a:	2b18      	cmp	r3, #24
 800af5c:	d10c      	bne.n	800af78 <WiFi_Conn_ND+0x1750>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f240 3229 	movw	r2, #809	; 0x329
 800af64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2200      	movs	r2, #0
 800af74:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af7e:	2b19      	cmp	r3, #25
 800af80:	d008      	beq.n	800af94 <WiFi_Conn_ND+0x176c>
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af88:	2b17      	cmp	r3, #23
 800af8a:	d003      	beq.n	800af94 <WiFi_Conn_ND+0x176c>
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2218      	movs	r2, #24
 800af90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	f040 80a5 	bne.w	800b0ea <WiFi_Conn_ND+0x18c2>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f44f 7261 	mov.w	r2, #900	; 0x384
 800afa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2200      	movs	r2, #0
 800afae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

							}


						}
						break;
 800afba:	e096      	b.n	800b0ea <WiFi_Conn_ND+0x18c2>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	f7fb fbbf 	bl	8006740 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afc8:	2b04      	cmp	r3, #4
 800afca:	d009      	beq.n	800afe0 <WiFi_Conn_ND+0x17b8>
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afd2:	2b0d      	cmp	r3, #13
 800afd4:	d004      	beq.n	800afe0 <WiFi_Conn_ND+0x17b8>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afdc:	2b06      	cmp	r3, #6
 800afde:	d112      	bne.n	800b006 <WiFi_Conn_ND+0x17de>
								{
									Cambiar_CWMODE(b);
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f7fb fbc3 	bl	800676c <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2264      	movs	r2, #100	; 0x64
 800afea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2200      	movs	r2, #0
 800aff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2200      	movs	r2, #0
 800affa:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2200      	movs	r2, #0
 800b002:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b00c:	2b0c      	cmp	r3, #12
 800b00e:	d009      	beq.n	800b024 <WiFi_Conn_ND+0x17fc>
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b016:	2b0d      	cmp	r3, #13
 800b018:	d004      	beq.n	800b024 <WiFi_Conn_ND+0x17fc>
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b020:	2b03      	cmp	r3, #3
 800b022:	d10e      	bne.n	800b042 <WiFi_Conn_ND+0x181a>
								{
									ConectarWIFI(b);
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f7fb fbb7 	bl	8006798 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	22c8      	movs	r2, #200	; 0xc8
 800b02e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2200      	movs	r2, #0
 800b036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d004      	beq.n	800b056 <WiFi_Conn_ND+0x182e>
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800b052:	2b01      	cmp	r3, #1
 800b054:	d14b      	bne.n	800b0ee <WiFi_Conn_ND+0x18c6>
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d046      	beq.n	800b0ee <WiFi_Conn_ND+0x18c6>
								{
									EnviarDatosSRVR(b);
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	f7fb fc1d 	bl	80068a0 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b06c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2200      	movs	r2, #0
 800b074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
									b->_new_data_rcv=0;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
									b->_send_data=0;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
								}

						}
						break;
 800b090:	e02d      	b.n	800b0ee <WiFi_Conn_ND+0x18c6>
			break;
 800b092:	bf00      	nop
 800b094:	e02c      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
			break;
 800b096:	bf00      	nop
 800b098:	e02a      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
			break;
 800b09a:	bf00      	nop
 800b09c:	e028      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
			break;
 800b09e:	bf00      	nop
 800b0a0:	e026      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
			break;
 800b0a2:	bf00      	nop
 800b0a4:	e024      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
			break;
 800b0a6:	bf00      	nop
 800b0a8:	e022      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
			break;
 800b0aa:	bf00      	nop
 800b0ac:	e020      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
			break;
 800b0ae:	bf00      	nop
 800b0b0:	e01e      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
			break;
 800b0b2:	bf00      	nop
 800b0b4:	e01c      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
			break;
 800b0b6:	bf00      	nop
 800b0b8:	e01a      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
			break;
 800b0ba:	bf00      	nop
 800b0bc:	e018      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
			break;
 800b0be:	bf00      	nop
 800b0c0:	e016      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
			break;
 800b0c2:	bf00      	nop
 800b0c4:	e014      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
			break;
 800b0c6:	bf00      	nop
 800b0c8:	e012      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
			break;
 800b0ca:	bf00      	nop
 800b0cc:	e010      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
						break;
 800b0ce:	bf00      	nop
 800b0d0:	e00e      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
						break;
 800b0d2:	bf00      	nop
 800b0d4:	e00c      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
						break;
 800b0d6:	bf00      	nop
 800b0d8:	e00a      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
						break;
 800b0da:	bf00      	nop
 800b0dc:	e008      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
						break;
 800b0de:	bf00      	nop
 800b0e0:	e006      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
						break;
 800b0e2:	bf00      	nop
 800b0e4:	e004      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
						break;
 800b0e6:	bf00      	nop
 800b0e8:	e002      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
						break;
 800b0ea:	bf00      	nop
 800b0ec:	e000      	b.n	800b0f0 <WiFi_Conn_ND+0x18c8>
						break;
 800b0ee:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop

0800b100 <httpPOST2>:
			return 0;
		}
}

httpPOST2(char * endpoint, char* server_ip, char * port,  uint16_t * vect_data, uint8_t * decimal,int cdad, uint16_t devId, char  * post, char * body, int max_char)
{
 800b100:	b5b0      	push	{r4, r5, r7, lr}
 800b102:	b08c      	sub	sp, #48	; 0x30
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
 800b10c:	603b      	str	r3, [r7, #0]
	post[0]='\0';
 800b10e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b110:	2200      	movs	r2, #0
 800b112:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b116:	2200      	movs	r2, #0
 800b118:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b11a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b11c:	f7f5 f86a 	bl	80001f4 <strlen>
 800b120:	4603      	mov	r3, r0
 800b122:	461a      	mov	r2, r3
 800b124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b126:	4413      	add	r3, r2
 800b128:	4a9d      	ldr	r2, [pc, #628]	; (800b3a0 <httpPOST2+0x2a0>)
 800b12a:	6810      	ldr	r0, [r2, #0]
 800b12c:	6018      	str	r0, [r3, #0]
 800b12e:	8892      	ldrh	r2, [r2, #4]
 800b130:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b132:	68f8      	ldr	r0, [r7, #12]
 800b134:	f7f5 f85e 	bl	80001f4 <strlen>
 800b138:	4603      	mov	r3, r0
 800b13a:	461a      	mov	r2, r3
 800b13c:	68f9      	ldr	r1, [r7, #12]
 800b13e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b140:	f003 fc85 	bl	800ea4e <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b144:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b146:	f7f5 f855 	bl	80001f4 <strlen>
 800b14a:	4603      	mov	r3, r0
 800b14c:	461a      	mov	r2, r3
 800b14e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b150:	4413      	add	r3, r2
 800b152:	4994      	ldr	r1, [pc, #592]	; (800b3a4 <httpPOST2+0x2a4>)
 800b154:	461a      	mov	r2, r3
 800b156:	460b      	mov	r3, r1
 800b158:	cb03      	ldmia	r3!, {r0, r1}
 800b15a:	6010      	str	r0, [r2, #0]
 800b15c:	6051      	str	r1, [r2, #4]
 800b15e:	8819      	ldrh	r1, [r3, #0]
 800b160:	789b      	ldrb	r3, [r3, #2]
 800b162:	8111      	strh	r1, [r2, #8]
 800b164:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b166:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b168:	f7f5 f844 	bl	80001f4 <strlen>
 800b16c:	4603      	mov	r3, r0
 800b16e:	461a      	mov	r2, r3
 800b170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b172:	4413      	add	r3, r2
 800b174:	4a8c      	ldr	r2, [pc, #560]	; (800b3a8 <httpPOST2+0x2a8>)
 800b176:	8811      	ldrh	r1, [r2, #0]
 800b178:	7892      	ldrb	r2, [r2, #2]
 800b17a:	8019      	strh	r1, [r3, #0]
 800b17c:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b17e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b180:	f7f5 f838 	bl	80001f4 <strlen>
 800b184:	4603      	mov	r3, r0
 800b186:	461a      	mov	r2, r3
 800b188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b18a:	4413      	add	r3, r2
 800b18c:	4a87      	ldr	r2, [pc, #540]	; (800b3ac <httpPOST2+0x2ac>)
 800b18e:	6810      	ldr	r0, [r2, #0]
 800b190:	6018      	str	r0, [r3, #0]
 800b192:	8891      	ldrh	r1, [r2, #4]
 800b194:	7992      	ldrb	r2, [r2, #6]
 800b196:	8099      	strh	r1, [r3, #4]
 800b198:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b19a:	68b8      	ldr	r0, [r7, #8]
 800b19c:	f7f5 f82a 	bl	80001f4 <strlen>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	68b9      	ldr	r1, [r7, #8]
 800b1a6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b1a8:	f003 fc51 	bl	800ea4e <strncat>
	strncat(post,":",1);
 800b1ac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b1ae:	f7f5 f821 	bl	80001f4 <strlen>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1b8:	4413      	add	r3, r2
 800b1ba:	497d      	ldr	r1, [pc, #500]	; (800b3b0 <httpPOST2+0x2b0>)
 800b1bc:	461a      	mov	r2, r3
 800b1be:	460b      	mov	r3, r1
 800b1c0:	881b      	ldrh	r3, [r3, #0]
 800b1c2:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f7f5 f815 	bl	80001f4 <strlen>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	6879      	ldr	r1, [r7, #4]
 800b1d0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b1d2:	f003 fc3c 	bl	800ea4e <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b1d6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b1d8:	f7f5 f80c 	bl	80001f4 <strlen>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	461a      	mov	r2, r3
 800b1e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1e2:	4413      	add	r3, r2
 800b1e4:	4a70      	ldr	r2, [pc, #448]	; (800b3a8 <httpPOST2+0x2a8>)
 800b1e6:	8811      	ldrh	r1, [r2, #0]
 800b1e8:	7892      	ldrb	r2, [r2, #2]
 800b1ea:	8019      	strh	r1, [r3, #0]
 800b1ec:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b1ee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b1f0:	f7f5 f800 	bl	80001f4 <strlen>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1fa:	4413      	add	r3, r2
 800b1fc:	4a6d      	ldr	r2, [pc, #436]	; (800b3b4 <httpPOST2+0x2b4>)
 800b1fe:	461d      	mov	r5, r3
 800b200:	4614      	mov	r4, r2
 800b202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b204:	6028      	str	r0, [r5, #0]
 800b206:	6069      	str	r1, [r5, #4]
 800b208:	60aa      	str	r2, [r5, #8]
 800b20a:	60eb      	str	r3, [r5, #12]
 800b20c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b20e:	6128      	str	r0, [r5, #16]
 800b210:	6169      	str	r1, [r5, #20]
 800b212:	61aa      	str	r2, [r5, #24]
 800b214:	8823      	ldrh	r3, [r4, #0]
 800b216:	78a2      	ldrb	r2, [r4, #2]
 800b218:	83ab      	strh	r3, [r5, #28]
 800b21a:	4613      	mov	r3, r2
 800b21c:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b21e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b220:	f7f4 ffe8 	bl	80001f4 <strlen>
 800b224:	4603      	mov	r3, r0
 800b226:	461a      	mov	r2, r3
 800b228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b22a:	4413      	add	r3, r2
 800b22c:	4a5e      	ldr	r2, [pc, #376]	; (800b3a8 <httpPOST2+0x2a8>)
 800b22e:	8811      	ldrh	r1, [r2, #0]
 800b230:	7892      	ldrb	r2, [r2, #2]
 800b232:	8019      	strh	r1, [r3, #0]
 800b234:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b236:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b238:	f7f4 ffdc 	bl	80001f4 <strlen>
 800b23c:	4603      	mov	r3, r0
 800b23e:	461a      	mov	r2, r3
 800b240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b242:	4413      	add	r3, r2
 800b244:	4a5c      	ldr	r2, [pc, #368]	; (800b3b8 <httpPOST2+0x2b8>)
 800b246:	461c      	mov	r4, r3
 800b248:	4615      	mov	r5, r2
 800b24a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b24c:	6020      	str	r0, [r4, #0]
 800b24e:	6061      	str	r1, [r4, #4]
 800b250:	60a2      	str	r2, [r4, #8]
 800b252:	60e3      	str	r3, [r4, #12]

	char _devId[8];
	_devId[0]='\0';
 800b254:	2300      	movs	r3, #0
 800b256:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	INTOA(devId, _devId);
 800b25a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b25e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b262:	4611      	mov	r1, r2
 800b264:	4618      	mov	r0, r3
 800b266:	f003 f8f5 	bl	800e454 <INTOA>
	char d[8];
	d[0]='\0';
 800b26a:	2300      	movs	r3, #0
 800b26c:	773b      	strb	r3, [r7, #28]
	for (int i=0; i < cdad;i++)
 800b26e:	2300      	movs	r3, #0
 800b270:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b272:	e037      	b.n	800b2e4 <httpPOST2+0x1e4>
	{
		FTOA(vect_data[i],d,decimal[i]);
 800b274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b276:	005b      	lsls	r3, r3, #1
 800b278:	683a      	ldr	r2, [r7, #0]
 800b27a:	4413      	add	r3, r2
 800b27c:	881b      	ldrh	r3, [r3, #0]
 800b27e:	4618      	mov	r0, r3
 800b280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b282:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b284:	4413      	add	r3, r2
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	461a      	mov	r2, r3
 800b28a:	f107 031c 	add.w	r3, r7, #28
 800b28e:	4619      	mov	r1, r3
 800b290:	f003 f914 	bl	800e4bc <FTOA>
		strncat(body,data[i],strlen(data[i]));
 800b294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b296:	4613      	mov	r3, r2
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	4413      	add	r3, r2
 800b29c:	005b      	lsls	r3, r3, #1
 800b29e:	4a47      	ldr	r2, [pc, #284]	; (800b3bc <httpPOST2+0x2bc>)
 800b2a0:	189c      	adds	r4, r3, r2
 800b2a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	4413      	add	r3, r2
 800b2aa:	005b      	lsls	r3, r3, #1
 800b2ac:	4a43      	ldr	r2, [pc, #268]	; (800b3bc <httpPOST2+0x2bc>)
 800b2ae:	4413      	add	r3, r2
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7f4 ff9f 	bl	80001f4 <strlen>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	4621      	mov	r1, r4
 800b2bc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b2be:	f003 fbc6 	bl	800ea4e <strncat>
		strncat(body,d,strlen(d));
 800b2c2:	f107 031c 	add.w	r3, r7, #28
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7f4 ff94 	bl	80001f4 <strlen>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	f107 031c 	add.w	r3, r7, #28
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b2d6:	f003 fbba 	bl	800ea4e <strncat>
		d[0]='\0';
 800b2da:	2300      	movs	r3, #0
 800b2dc:	773b      	strb	r3, [r7, #28]
	for (int i=0; i < cdad;i++)
 800b2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	dbc3      	blt.n	800b274 <httpPOST2+0x174>
	}
	// Conversión de datos recibido por ModBUS

	strncat(body,deviceId,strlen(deviceId));
 800b2ec:	4834      	ldr	r0, [pc, #208]	; (800b3c0 <httpPOST2+0x2c0>)
 800b2ee:	f7f4 ff81 	bl	80001f4 <strlen>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	4932      	ldr	r1, [pc, #200]	; (800b3c0 <httpPOST2+0x2c0>)
 800b2f8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b2fa:	f003 fba8 	bl	800ea4e <strncat>
	strncat(body,_devId,strlen(_devId));
 800b2fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b302:	4618      	mov	r0, r3
 800b304:	f7f4 ff76 	bl	80001f4 <strlen>
 800b308:	4602      	mov	r2, r0
 800b30a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b30e:	4619      	mov	r1, r3
 800b310:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b312:	f003 fb9c 	bl	800ea4e <strncat>

	strncat(body,"}",strlen("}"));
 800b316:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b318:	f7f4 ff6c 	bl	80001f4 <strlen>
 800b31c:	4603      	mov	r3, r0
 800b31e:	461a      	mov	r2, r3
 800b320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b322:	4413      	add	r3, r2
 800b324:	4927      	ldr	r1, [pc, #156]	; (800b3c4 <httpPOST2+0x2c4>)
 800b326:	461a      	mov	r2, r3
 800b328:	460b      	mov	r3, r1
 800b32a:	881b      	ldrh	r3, [r3, #0]
 800b32c:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800b32e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b330:	f7f4 ff60 	bl	80001f4 <strlen>
 800b334:	4602      	mov	r2, r0
 800b336:	f107 0314 	add.w	r3, r7, #20
 800b33a:	4619      	mov	r1, r3
 800b33c:	4610      	mov	r0, r2
 800b33e:	f003 f889 	bl	800e454 <INTOA>
	strncat(post,length,strlen(length));
 800b342:	f107 0314 	add.w	r3, r7, #20
 800b346:	4618      	mov	r0, r3
 800b348:	f7f4 ff54 	bl	80001f4 <strlen>
 800b34c:	4602      	mov	r2, r0
 800b34e:	f107 0314 	add.w	r3, r7, #20
 800b352:	4619      	mov	r1, r3
 800b354:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b356:	f003 fb7a 	bl	800ea4e <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800b35a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b35c:	f7f4 ff4a 	bl	80001f4 <strlen>
 800b360:	4603      	mov	r3, r0
 800b362:	461a      	mov	r2, r3
 800b364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b366:	4413      	add	r3, r2
 800b368:	4a17      	ldr	r2, [pc, #92]	; (800b3c8 <httpPOST2+0x2c8>)
 800b36a:	6810      	ldr	r0, [r2, #0]
 800b36c:	6018      	str	r0, [r3, #0]
 800b36e:	7912      	ldrb	r2, [r2, #4]
 800b370:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800b372:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b374:	f7f4 ff3e 	bl	80001f4 <strlen>
 800b378:	4602      	mov	r2, r0
 800b37a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d20a      	bcs.n	800b396 <httpPOST2+0x296>
	{
		strncat(post,body,strlen(body));
 800b380:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b382:	f7f4 ff37 	bl	80001f4 <strlen>
 800b386:	4603      	mov	r3, r0
 800b388:	461a      	mov	r2, r3
 800b38a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b38c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b38e:	f003 fb5e 	bl	800ea4e <strncat>
		return 1 ;
 800b392:	2301      	movs	r3, #1
 800b394:	e000      	b.n	800b398 <httpPOST2+0x298>
	}
		else
		{
			return 0;
 800b396:	2300      	movs	r3, #0
		}
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3730      	adds	r7, #48	; 0x30
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bdb0      	pop	{r4, r5, r7, pc}
 800b3a0:	080100f0 	.word	0x080100f0
 800b3a4:	080100f8 	.word	0x080100f8
 800b3a8:	08010104 	.word	0x08010104
 800b3ac:	08010108 	.word	0x08010108
 800b3b0:	08010110 	.word	0x08010110
 800b3b4:	08010114 	.word	0x08010114
 800b3b8:	08010134 	.word	0x08010134
 800b3bc:	20000090 	.word	0x20000090
 800b3c0:	20000130 	.word	0x20000130
 800b3c4:	08010144 	.word	0x08010144
 800b3c8:	08010148 	.word	0x08010148

0800b3cc <LoRa_Send>:
#include "RYLR896.h"
#include "string.h"
#include "STR_Chelo.h"

int LoRa_Send(struct LoRa *a, UART_HandleTypeDef * SERIAL)
{
 800b3cc:	b5b0      	push	{r4, r5, r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]

	char items[4];

	if(a->txitems > 241)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800b3dc:	2bf1      	cmp	r3, #241	; 0xf1
 800b3de:	dd01      	ble.n	800b3e4 <LoRa_Send+0x18>
	{
		return ERROR_BUFFER_SIZE;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e0a4      	b.n	800b52e <LoRa_Send+0x162>
	}
	else
	{

		items[0]='\0';
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	723b      	strb	r3, [r7, #8]
		itoa(a->txitems, items,10);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800b3ee:	f107 0108 	add.w	r1, r7, #8
 800b3f2:	220a      	movs	r2, #10
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f003 f93e 	bl	800e676 <itoa>
		a->txbuff2SND[0]='\0'; 													//Borro el vector
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		strncat(a->txbuff2SND,"AT+SEND=",strlen("AT+SEND="));					//AT+SEND=
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800b408:	4620      	mov	r0, r4
 800b40a:	f7f4 fef3 	bl	80001f4 <strlen>
 800b40e:	4603      	mov	r3, r0
 800b410:	4423      	add	r3, r4
 800b412:	4949      	ldr	r1, [pc, #292]	; (800b538 <LoRa_Send+0x16c>)
 800b414:	461a      	mov	r2, r3
 800b416:	460b      	mov	r3, r1
 800b418:	cb03      	ldmia	r3!, {r0, r1}
 800b41a:	6010      	str	r0, [r2, #0]
 800b41c:	6051      	str	r1, [r2, #4]
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	7213      	strb	r3, [r2, #8]
		strncat(a->txbuff2SND,a->dest_address,strlen(a->dest_address));			//AT+SEND=1
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f103 0516 	add.w	r5, r3, #22
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	3316      	adds	r3, #22
 800b432:	4618      	mov	r0, r3
 800b434:	f7f4 fede 	bl	80001f4 <strlen>
 800b438:	4603      	mov	r3, r0
 800b43a:	461a      	mov	r2, r3
 800b43c:	4629      	mov	r1, r5
 800b43e:	4620      	mov	r0, r4
 800b440:	f003 fb05 	bl	800ea4e <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800b44a:	4620      	mov	r0, r4
 800b44c:	f7f4 fed2 	bl	80001f4 <strlen>
 800b450:	4603      	mov	r3, r0
 800b452:	4423      	add	r3, r4
 800b454:	4939      	ldr	r1, [pc, #228]	; (800b53c <LoRa_Send+0x170>)
 800b456:	461a      	mov	r2, r3
 800b458:	460b      	mov	r3, r1
 800b45a:	881b      	ldrh	r3, [r3, #0]
 800b45c:	8013      	strh	r3, [r2, #0]
		strncat(a->txbuff2SND,items,strlen(items));								//AT+SEND=1,4
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800b464:	f107 0308 	add.w	r3, r7, #8
 800b468:	4618      	mov	r0, r3
 800b46a:	f7f4 fec3 	bl	80001f4 <strlen>
 800b46e:	4602      	mov	r2, r0
 800b470:	f107 0308 	add.w	r3, r7, #8
 800b474:	4619      	mov	r1, r3
 800b476:	4620      	mov	r0, r4
 800b478:	f003 fae9 	bl	800ea4e <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,4,
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800b482:	4620      	mov	r0, r4
 800b484:	f7f4 feb6 	bl	80001f4 <strlen>
 800b488:	4603      	mov	r3, r0
 800b48a:	4423      	add	r3, r4
 800b48c:	492b      	ldr	r1, [pc, #172]	; (800b53c <LoRa_Send+0x170>)
 800b48e:	461a      	mov	r2, r3
 800b490:	460b      	mov	r3, r1
 800b492:	881b      	ldrh	r3, [r3, #0]
 800b494:	8013      	strh	r3, [r2, #0]

		int la=strlen(a->txbuff2SND);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800b49c:	4618      	mov	r0, r3
 800b49e:	f7f4 fea9 	bl	80001f4 <strlen>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	617b      	str	r3, [r7, #20]
		int lb=la+a->txitems;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800b4ac:	697a      	ldr	r2, [r7, #20]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	60fb      	str	r3, [r7, #12]
		int lc=0;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800b4b6:	e012      	b.n	800b4de <LoRa_Send+0x112>
		{
			a->txbuff2SND[la]=a->txbuff[lc];
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	4413      	add	r3, r2
 800b4be:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 800b4c2:	7819      	ldrb	r1, [r3, #0]
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800b4ce:	460a      	mov	r2, r1
 800b4d0:	701a      	strb	r2, [r3, #0]
			la++;
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	617b      	str	r3, [r7, #20]
			lc++;
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	3301      	adds	r3, #1
 800b4dc:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800b4de:	697a      	ldr	r2, [r7, #20]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	dbe8      	blt.n	800b4b8 <LoRa_Send+0xec>
		}
		a->txbuff2SND[la++]='\r';
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	1c5a      	adds	r2, r3, #1
 800b4ea:	617a      	str	r2, [r7, #20]
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	220d      	movs	r2, #13
 800b4f2:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		a->txbuff2SND[la++]='\n';
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	1c5a      	adds	r2, r3, #1
 800b4fa:	617a      	str	r2, [r7, #20]
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	4413      	add	r3, r2
 800b500:	220a      	movs	r2, #10
 800b502:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		HAL_UART_Transmit_IT(SERIAL, a->txbuff2SND, la);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800b50c:	697a      	ldr	r2, [r7, #20]
 800b50e:	b292      	uxth	r2, r2
 800b510:	4619      	mov	r1, r3
 800b512:	6838      	ldr	r0, [r7, #0]
 800b514:	f7fa f918 	bl	8005748 <HAL_UART_Transmit_IT>
		ITM0_Write("\r\nLora _data\r\n",strlen("\r\nLora _data\r\n"));
 800b518:	210e      	movs	r1, #14
 800b51a:	4809      	ldr	r0, [pc, #36]	; (800b540 <LoRa_Send+0x174>)
 800b51c:	f7f6 f86a 	bl	80015f4 <ITM0_Write>
		ITM0_Write(a->txbuff2SND,la);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800b526:	6979      	ldr	r1, [r7, #20]
 800b528:	4618      	mov	r0, r3
 800b52a:	f7f6 f863 	bl	80015f4 <ITM0_Write>

	}

}
 800b52e:	4618      	mov	r0, r3
 800b530:	3718      	adds	r7, #24
 800b532:	46bd      	mov	sp, r7
 800b534:	bdb0      	pop	{r4, r5, r7, pc}
 800b536:	bf00      	nop
 800b538:	08010150 	.word	0x08010150
 800b53c:	0801015c 	.word	0x0801015c
 800b540:	08010160 	.word	0x08010160

0800b544 <LoRa_reset_sndTIMER>:
		a->tmr_dly_en=1;
		a->tmr_dlyCNT=0;
 }

void LoRa_reset_sndTIMER(struct LoRa *a,int msec)
 {
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
	 	a->tmr_dly_ON=0;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
		a->tmr_dly=msec;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	683a      	ldr	r2, [r7, #0]
 800b55a:	f8c3 27f0 	str.w	r2, [r3, #2032]	; 0x7f0
		a->tmr_dly_en=0;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		a->tmr_dlyCNT=0;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2200      	movs	r2, #0
 800b56a:	f8c3 27f4 	str.w	r2, [r3, #2036]	; 0x7f4
 }
 800b56e:	bf00      	nop
 800b570:	370c      	adds	r7, #12
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr
	...

0800b57c <LoRa_decode>:
		break;
	}
}

void LoRa_decode(struct LoRa *b)
 {
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b086      	sub	sp, #24
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
	switch (Lora_idSTR(b))
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 fa25 	bl	800b9d4 <Lora_idSTR>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b10      	cmp	r3, #16
 800b58e:	f200 820c 	bhi.w	800b9aa <LoRa_decode+0x42e>
 800b592:	a201      	add	r2, pc, #4	; (adr r2, 800b598 <LoRa_decode+0x1c>)
 800b594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b598:	0800b5dd 	.word	0x0800b5dd
 800b59c:	0800b6b5 	.word	0x0800b6b5
 800b5a0:	0800b8e9 	.word	0x0800b8e9
 800b5a4:	0800b8f3 	.word	0x0800b8f3
 800b5a8:	0800b8fd 	.word	0x0800b8fd
 800b5ac:	0800b907 	.word	0x0800b907
 800b5b0:	0800b911 	.word	0x0800b911
 800b5b4:	0800b91b 	.word	0x0800b91b
 800b5b8:	0800b925 	.word	0x0800b925
 800b5bc:	0800b92f 	.word	0x0800b92f
 800b5c0:	0800b939 	.word	0x0800b939
 800b5c4:	0800b979 	.word	0x0800b979
 800b5c8:	0800b983 	.word	0x0800b983
 800b5cc:	0800b997 	.word	0x0800b997
 800b5d0:	0800b98d 	.word	0x0800b98d
 800b5d4:	0800b8df 	.word	0x0800b8df
 800b5d8:	0800b9a1 	.word	0x0800b9a1
	{
		case _OK:
		{
			switch(b->estado)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 800b5e2:	3b01      	subs	r3, #1
 800b5e4:	2b13      	cmp	r3, #19
 800b5e6:	d860      	bhi.n	800b6aa <LoRa_decode+0x12e>
 800b5e8:	a201      	add	r2, pc, #4	; (adr r2, 800b5f0 <LoRa_decode+0x74>)
 800b5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ee:	bf00      	nop
 800b5f0:	0800b641 	.word	0x0800b641
 800b5f4:	0800b6ab 	.word	0x0800b6ab
 800b5f8:	0800b6ab 	.word	0x0800b6ab
 800b5fc:	0800b6ab 	.word	0x0800b6ab
 800b600:	0800b6ab 	.word	0x0800b6ab
 800b604:	0800b6ab 	.word	0x0800b6ab
 800b608:	0800b64b 	.word	0x0800b64b
 800b60c:	0800b655 	.word	0x0800b655
 800b610:	0800b6ab 	.word	0x0800b6ab
 800b614:	0800b65f 	.word	0x0800b65f
 800b618:	0800b6ab 	.word	0x0800b6ab
 800b61c:	0800b669 	.word	0x0800b669
 800b620:	0800b6ab 	.word	0x0800b6ab
 800b624:	0800b673 	.word	0x0800b673
 800b628:	0800b6ab 	.word	0x0800b6ab
 800b62c:	0800b67d 	.word	0x0800b67d
 800b630:	0800b6ab 	.word	0x0800b6ab
 800b634:	0800b687 	.word	0x0800b687
 800b638:	0800b6ab 	.word	0x0800b6ab
 800b63c:	0800b691 	.word	0x0800b691
			{
				case _AT_SENT:
					b->estado=_IDLE;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2200      	movs	r2, #0
 800b644:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800b648:	e02f      	b.n	800b6aa <LoRa_decode+0x12e>
				case _MODE_SENT:
					b->estado=_MODE_OK;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2206      	movs	r2, #6
 800b64e:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800b652:	e02a      	b.n	800b6aa <LoRa_decode+0x12e>
				case _PARAMETER_SENT:
					b->estado=_PARAMETER_OK;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2209      	movs	r2, #9
 800b658:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800b65c:	e025      	b.n	800b6aa <LoRa_decode+0x12e>
				case _BAND_SENT:
					b->estado=_BAND_OK;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	220b      	movs	r2, #11
 800b662:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800b666:	e020      	b.n	800b6aa <LoRa_decode+0x12e>
				case _ADDR_SENT:
					b->estado=_ADDR_OK;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	220d      	movs	r2, #13
 800b66c:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800b670:	e01b      	b.n	800b6aa <LoRa_decode+0x12e>
				case _NETWORK_SENT:
					b->estado=_NETWORK_OK;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	220f      	movs	r2, #15
 800b676:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800b67a:	e016      	b.n	800b6aa <LoRa_decode+0x12e>
				case _CPIN_SENT:
					b->estado=_CPIN_OK;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2211      	movs	r2, #17
 800b680:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800b684:	e011      	b.n	800b6aa <LoRa_decode+0x12e>
				case _CRFOP_SENT:
					b->estado=_CRFOP_OK;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2213      	movs	r2, #19
 800b68a:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800b68e:	e00c      	b.n	800b6aa <LoRa_decode+0x12e>
				case _SENT:
					{
						b->estado=_SENT_OK;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2215      	movs	r2, #21
 800b694:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
						b->rxbuff[0]='\0';
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
						ITM0_Write("\r\nLora _SENT_OK\r\n",strlen("\r\nLora _SENT_OK\r\n"));
 800b6a0:	2111      	movs	r1, #17
 800b6a2:	48a8      	ldr	r0, [pc, #672]	; (800b944 <LoRa_decode+0x3c8>)
 800b6a4:	f7f5 ffa6 	bl	80015f4 <ITM0_Write>
					}
					break;
 800b6a8:	bf00      	nop

			}

			ITM0_Write("\r\nLora _OK\r\n",strlen("\r\nLora _OK\r\n"));
 800b6aa:	210c      	movs	r1, #12
 800b6ac:	48a6      	ldr	r0, [pc, #664]	; (800b948 <LoRa_decode+0x3cc>)
 800b6ae:	f7f5 ffa1 	bl	80015f4 <ITM0_Write>
						//Clean rxbuff_hld
		}
			break;
 800b6b2:	e17f      	b.n	800b9b4 <LoRa_decode+0x438>
		case _RCV:
		{
			ITM0_Write("\r\nLora _RCV\r\n",strlen("\r\nLora _RCV\r\n"));
 800b6b4:	210d      	movs	r1, #13
 800b6b6:	48a5      	ldr	r0, [pc, #660]	; (800b94c <LoRa_decode+0x3d0>)
 800b6b8:	f7f5 ff9c 	bl	80015f4 <ITM0_Write>
				b->estado=_DATO_RECIBIDO;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	221a      	movs	r2, #26
 800b6c0:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
				b->_data_available=1;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
					int i=0;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	617b      	str	r3, [r7, #20]
					int j=0;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	613b      	str	r3, [r7, #16]
					int lngt=0;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	60fb      	str	r3, [r7, #12]
					while (b->rxbuff[i] != '=')
 800b6d8:	e002      	b.n	800b6e0 <LoRa_decode+0x164>
					{ i++;}
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i] != '=')
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	3356      	adds	r3, #86	; 0x56
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	2b3d      	cmp	r3, #61	; 0x3d
 800b6ec:	d1f5      	bne.n	800b6da <LoRa_decode+0x15e>
					i++;
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800b6f4:	e017      	b.n	800b726 <LoRa_decode+0x1aa>
					{
						b->rxaddress[j]=b->rxbuff[i];			//Save the address
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	4413      	add	r3, r2
 800b6fc:	3356      	adds	r3, #86	; 0x56
 800b6fe:	7819      	ldrb	r1, [r3, #0]
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	4413      	add	r3, r2
 800b706:	3306      	adds	r3, #6
 800b708:	460a      	mov	r2, r1
 800b70a:	701a      	strb	r2, [r3, #0]
						i++;
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	3301      	adds	r3, #1
 800b710:	617b      	str	r3, [r7, #20]
						j++;
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	3301      	adds	r3, #1
 800b716:	613b      	str	r3, [r7, #16]
						if (j > 6)
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	2b06      	cmp	r3, #6
 800b71c:	dd03      	ble.n	800b726 <LoRa_decode+0x1aa>
						{
							Lora_rx_del(b);
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 fbca 	bl	800beb8 <Lora_rx_del>
							break;
 800b724:	e006      	b.n	800b734 <LoRa_decode+0x1b8>
					while (b->rxbuff[i]!= ',')
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	4413      	add	r3, r2
 800b72c:	3356      	adds	r3, #86	; 0x56
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	2b2c      	cmp	r3, #44	; 0x2c
 800b732:	d1e0      	bne.n	800b6f6 <LoRa_decode+0x17a>
						}
					}
					b->rxaddress[j]='\0';
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	4413      	add	r3, r2
 800b73a:	3306      	adds	r3, #6
 800b73c:	2200      	movs	r2, #0
 800b73e:	701a      	strb	r2, [r3, #0]
					j=0;
 800b740:	2300      	movs	r3, #0
 800b742:	613b      	str	r3, [r7, #16]
					i++;
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	3301      	adds	r3, #1
 800b748:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800b74a:	e017      	b.n	800b77c <LoRa_decode+0x200>
					{
						b->rx_items[j]=b->rxbuff[i];			//Save the qty of data
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	4413      	add	r3, r2
 800b752:	3356      	adds	r3, #86	; 0x56
 800b754:	7819      	ldrb	r1, [r3, #0]
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	4413      	add	r3, r2
 800b75c:	330c      	adds	r3, #12
 800b75e:	460a      	mov	r2, r1
 800b760:	701a      	strb	r2, [r3, #0]
						i++;
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	3301      	adds	r3, #1
 800b766:	617b      	str	r3, [r7, #20]
						j++;
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	3301      	adds	r3, #1
 800b76c:	613b      	str	r3, [r7, #16]
						if (j > 4)
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	2b04      	cmp	r3, #4
 800b772:	dd03      	ble.n	800b77c <LoRa_decode+0x200>
						{
							Lora_rx_del(b);
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 fb9f 	bl	800beb8 <Lora_rx_del>
							break;
 800b77a:	e006      	b.n	800b78a <LoRa_decode+0x20e>
					while (b->rxbuff[i]!= ',')
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	4413      	add	r3, r2
 800b782:	3356      	adds	r3, #86	; 0x56
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	2b2c      	cmp	r3, #44	; 0x2c
 800b788:	d1e0      	bne.n	800b74c <LoRa_decode+0x1d0>
						}
					}
					b->rx_items[j]='\0';
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	4413      	add	r3, r2
 800b790:	330c      	adds	r3, #12
 800b792:	2200      	movs	r2, #0
 800b794:	701a      	strb	r2, [r3, #0]
					j=0;
 800b796:	2300      	movs	r3, #0
 800b798:	613b      	str	r3, [r7, #16]
					i++;
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	3301      	adds	r3, #1
 800b79e:	617b      	str	r3, [r7, #20]
					lngt=atoi(b->rx_items,10);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	330c      	adds	r3, #12
 800b7a4:	210a      	movs	r1, #10
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f002 ff49 	bl	800e63e <atoi>
 800b7ac:	60f8      	str	r0, [r7, #12]
					//lngt=lngt+i;
					//while(lngt>i)   //Ahota busco leer lo datos recibid y luego verificar si ok
					while (b->rxbuff[i]!= ',')
 800b7ae:	e019      	b.n	800b7e4 <LoRa_decode+0x268>
					{
						b->dataRCV[j]=b->rxbuff[i];			//Save the data
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	3356      	adds	r3, #86	; 0x56
 800b7b8:	7819      	ldrb	r1, [r3, #0]
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	4413      	add	r3, r2
 800b7c0:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800b7c4:	460a      	mov	r2, r1
 800b7c6:	701a      	strb	r2, [r3, #0]
						j++;
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	613b      	str	r3, [r7, #16]
						i++;
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	617b      	str	r3, [r7, #20]
						if (j > lngt)
 800b7d4:	693a      	ldr	r2, [r7, #16]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	dd03      	ble.n	800b7e4 <LoRa_decode+0x268>
						{
							Lora_rx_del(b);
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 fb6b 	bl	800beb8 <Lora_rx_del>
							break;
 800b7e2:	e006      	b.n	800b7f2 <LoRa_decode+0x276>
					while (b->rxbuff[i]!= ',')
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	3356      	adds	r3, #86	; 0x56
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	2b2c      	cmp	r3, #44	; 0x2c
 800b7f0:	d1de      	bne.n	800b7b0 <LoRa_decode+0x234>
						}
					}
					b->_n_dataRCV=j;							//Save amount of data received
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	693a      	ldr	r2, [r7, #16]
 800b7f6:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
					j=0;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	613b      	str	r3, [r7, #16]
					i++;
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	3301      	adds	r3, #1
 800b802:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800b804:	e017      	b.n	800b836 <LoRa_decode+0x2ba>
					{
						b->rx_convert[j]=b->rxbuff[i];			//save RSSI
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	4413      	add	r3, r2
 800b80c:	3356      	adds	r3, #86	; 0x56
 800b80e:	7819      	ldrb	r1, [r3, #0]
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	4413      	add	r3, r2
 800b816:	3310      	adds	r3, #16
 800b818:	460a      	mov	r2, r1
 800b81a:	701a      	strb	r2, [r3, #0]
						i++;
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	3301      	adds	r3, #1
 800b820:	617b      	str	r3, [r7, #20]
						j++;
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	3301      	adds	r3, #1
 800b826:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	2b05      	cmp	r3, #5
 800b82c:	dd03      	ble.n	800b836 <LoRa_decode+0x2ba>
						{
							Lora_rx_del(b);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 fb42 	bl	800beb8 <Lora_rx_del>
							break;
 800b834:	e006      	b.n	800b844 <LoRa_decode+0x2c8>
					while (b->rxbuff[i]!= ',')
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	4413      	add	r3, r2
 800b83c:	3356      	adds	r3, #86	; 0x56
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	2b2c      	cmp	r3, #44	; 0x2c
 800b842:	d1e0      	bne.n	800b806 <LoRa_decode+0x28a>
						}
					}
					b->rxRSSI=atoi(b->rx_convert,10);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	3310      	adds	r3, #16
 800b848:	210a      	movs	r1, #10
 800b84a:	4618      	mov	r0, r3
 800b84c:	f002 fef7 	bl	800e63e <atoi>
 800b850:	4602      	mov	r2, r0
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
					b->rx_convert[j]='\0';
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	4413      	add	r3, r2
 800b85e:	3310      	adds	r3, #16
 800b860:	2200      	movs	r2, #0
 800b862:	701a      	strb	r2, [r3, #0]
					j=0;
 800b864:	2300      	movs	r3, #0
 800b866:	613b      	str	r3, [r7, #16]
					i++;
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	3301      	adds	r3, #1
 800b86c:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= '\r')
 800b86e:	e017      	b.n	800b8a0 <LoRa_decode+0x324>
					{
						b->rx_convert[j]=b->rxbuff[i];			// Save SNR
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	4413      	add	r3, r2
 800b876:	3356      	adds	r3, #86	; 0x56
 800b878:	7819      	ldrb	r1, [r3, #0]
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	4413      	add	r3, r2
 800b880:	3310      	adds	r3, #16
 800b882:	460a      	mov	r2, r1
 800b884:	701a      	strb	r2, [r3, #0]
						i++;
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	3301      	adds	r3, #1
 800b88a:	617b      	str	r3, [r7, #20]
						j++;
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	3301      	adds	r3, #1
 800b890:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	2b05      	cmp	r3, #5
 800b896:	dd03      	ble.n	800b8a0 <LoRa_decode+0x324>
						{
							Lora_rx_del(b);
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f000 fb0d 	bl	800beb8 <Lora_rx_del>
							break;
 800b89e:	e006      	b.n	800b8ae <LoRa_decode+0x332>
					while (b->rxbuff[i]!= '\r')
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	4413      	add	r3, r2
 800b8a6:	3356      	adds	r3, #86	; 0x56
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	2b0d      	cmp	r3, #13
 800b8ac:	d1e0      	bne.n	800b870 <LoRa_decode+0x2f4>
						}
					}

					b->rx_convert[j]='\0';
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	3310      	adds	r3, #16
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	701a      	strb	r2, [r3, #0]
					b->rxSNR=atoi(b->rx_convert,10);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	3310      	adds	r3, #16
 800b8be:	210a      	movs	r1, #10
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f002 febc 	bl	800e63e <atoi>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
					b->rx_convert[0]='\0';
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	741a      	strb	r2, [r3, #16]


			    //Timer de enviar data cuando antes se recibe
				//LoRa_set_sndTIMER(b, 3000);
				b->rxbuff[0]='\0';
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		}
			break;
 800b8dc:	e06a      	b.n	800b9b4 <LoRa_decode+0x438>
		case _ERR:
			ITM0_Write("\r\nLora _ERR\r\n",strlen("\r\nLora _ERR\r\n"));
 800b8de:	210d      	movs	r1, #13
 800b8e0:	481b      	ldr	r0, [pc, #108]	; (800b950 <LoRa_decode+0x3d4>)
 800b8e2:	f7f5 fe87 	bl	80015f4 <ITM0_Write>
			break;
 800b8e6:	e065      	b.n	800b9b4 <LoRa_decode+0x438>
		case _RESET:
			ITM0_Write("\r\nLora _RESET\r\n",strlen("\r\nLora _RESET\r\n"));
 800b8e8:	210f      	movs	r1, #15
 800b8ea:	481a      	ldr	r0, [pc, #104]	; (800b954 <LoRa_decode+0x3d8>)
 800b8ec:	f7f5 fe82 	bl	80015f4 <ITM0_Write>
			break;
 800b8f0:	e060      	b.n	800b9b4 <LoRa_decode+0x438>
		case _READY:
			ITM0_Write("\r\nLora _READY\r\n",strlen("\r\nLora _READY\r\n"));
 800b8f2:	210f      	movs	r1, #15
 800b8f4:	4818      	ldr	r0, [pc, #96]	; (800b958 <LoRa_decode+0x3dc>)
 800b8f6:	f7f5 fe7d 	bl	80015f4 <ITM0_Write>
			break;
 800b8fa:	e05b      	b.n	800b9b4 <LoRa_decode+0x438>
		case _MODE:
			ITM0_Write("\r\nLora _MODE\r\n",strlen("\r\nLora _MODE\r\n"));
 800b8fc:	210e      	movs	r1, #14
 800b8fe:	4817      	ldr	r0, [pc, #92]	; (800b95c <LoRa_decode+0x3e0>)
 800b900:	f7f5 fe78 	bl	80015f4 <ITM0_Write>
			break;
 800b904:	e056      	b.n	800b9b4 <LoRa_decode+0x438>
		case _IPR:
			ITM0_Write("\r\nLora _IPR\r\n",strlen("\r\nLora _IPR\r\n"));
 800b906:	210d      	movs	r1, #13
 800b908:	4815      	ldr	r0, [pc, #84]	; (800b960 <LoRa_decode+0x3e4>)
 800b90a:	f7f5 fe73 	bl	80015f4 <ITM0_Write>
			break;
 800b90e:	e051      	b.n	800b9b4 <LoRa_decode+0x438>
		case _PARAMETER:
			ITM0_Write("\r\nLora _PARAMETER\r\n",strlen("\r\nLora _PARAMETER\r\n"));
 800b910:	2113      	movs	r1, #19
 800b912:	4814      	ldr	r0, [pc, #80]	; (800b964 <LoRa_decode+0x3e8>)
 800b914:	f7f5 fe6e 	bl	80015f4 <ITM0_Write>
			break;
 800b918:	e04c      	b.n	800b9b4 <LoRa_decode+0x438>
		case _BAND:
			ITM0_Write("\r\nLora _BAND\r\n",strlen("\r\nLora _BAND\r\n"));
 800b91a:	210e      	movs	r1, #14
 800b91c:	4812      	ldr	r0, [pc, #72]	; (800b968 <LoRa_decode+0x3ec>)
 800b91e:	f7f5 fe69 	bl	80015f4 <ITM0_Write>
			break;
 800b922:	e047      	b.n	800b9b4 <LoRa_decode+0x438>
		case _ADDRESS:
			ITM0_Write("\r\nLora _ADDRESS\r\n",strlen("\r\nLora _ADDRESS\r\n"));
 800b924:	2111      	movs	r1, #17
 800b926:	4811      	ldr	r0, [pc, #68]	; (800b96c <LoRa_decode+0x3f0>)
 800b928:	f7f5 fe64 	bl	80015f4 <ITM0_Write>
			break;
 800b92c:	e042      	b.n	800b9b4 <LoRa_decode+0x438>
		case _NETWORK:
			ITM0_Write("\r\nLora _NETWORK\r\n",strlen("\r\nLora _NETWORK\r\n"));
 800b92e:	2111      	movs	r1, #17
 800b930:	480f      	ldr	r0, [pc, #60]	; (800b970 <LoRa_decode+0x3f4>)
 800b932:	f7f5 fe5f 	bl	80015f4 <ITM0_Write>
			break;
 800b936:	e03d      	b.n	800b9b4 <LoRa_decode+0x438>
		case _CPIN:
			ITM0_Write("\r\nLora _CPIN\r\n",strlen("\r\nLora _CPIN\r\n"));
 800b938:	210e      	movs	r1, #14
 800b93a:	480e      	ldr	r0, [pc, #56]	; (800b974 <LoRa_decode+0x3f8>)
 800b93c:	f7f5 fe5a 	bl	80015f4 <ITM0_Write>
			break;
 800b940:	e038      	b.n	800b9b4 <LoRa_decode+0x438>
 800b942:	bf00      	nop
 800b944:	0801019c 	.word	0x0801019c
 800b948:	080101b0 	.word	0x080101b0
 800b94c:	080101c0 	.word	0x080101c0
 800b950:	080101d0 	.word	0x080101d0
 800b954:	080101e0 	.word	0x080101e0
 800b958:	080101f0 	.word	0x080101f0
 800b95c:	08010200 	.word	0x08010200
 800b960:	08010210 	.word	0x08010210
 800b964:	08010220 	.word	0x08010220
 800b968:	08010234 	.word	0x08010234
 800b96c:	08010244 	.word	0x08010244
 800b970:	08010258 	.word	0x08010258
 800b974:	0801026c 	.word	0x0801026c
		case _CRFOP:
			ITM0_Write("\r\nLora _CRFOP\r\n",strlen("\r\nLora _CRFOP\r\n"));
 800b978:	210f      	movs	r1, #15
 800b97a:	4810      	ldr	r0, [pc, #64]	; (800b9bc <LoRa_decode+0x440>)
 800b97c:	f7f5 fe3a 	bl	80015f4 <ITM0_Write>
			break;
 800b980:	e018      	b.n	800b9b4 <LoRa_decode+0x438>
		case _SEND:
			ITM0_Write("\r\nLora _SEND\r\n",strlen("\r\nLora _SEND\r\n"));
 800b982:	210e      	movs	r1, #14
 800b984:	480e      	ldr	r0, [pc, #56]	; (800b9c0 <LoRa_decode+0x444>)
 800b986:	f7f5 fe35 	bl	80015f4 <ITM0_Write>
			break;
 800b98a:	e013      	b.n	800b9b4 <LoRa_decode+0x438>
		case _UID:
			ITM0_Write("\r\nLora _UID\r\n",strlen("\r\nLora _UID\r\n"));
 800b98c:	210d      	movs	r1, #13
 800b98e:	480d      	ldr	r0, [pc, #52]	; (800b9c4 <LoRa_decode+0x448>)
 800b990:	f7f5 fe30 	bl	80015f4 <ITM0_Write>
			break;
 800b994:	e00e      	b.n	800b9b4 <LoRa_decode+0x438>
		case _VER:
			ITM0_Write("\r\nLora _VER\r\n",strlen("\r\nLora _VER\r\n"));
 800b996:	210d      	movs	r1, #13
 800b998:	480b      	ldr	r0, [pc, #44]	; (800b9c8 <LoRa_decode+0x44c>)
 800b99a:	f7f5 fe2b 	bl	80015f4 <ITM0_Write>
			break;
 800b99e:	e009      	b.n	800b9b4 <LoRa_decode+0x438>
		case _ERR_RCV_OF:
			ITM0_Write("\r\nLora _ERR_RCV_OF\r\n",strlen("\r\nLora _ERR_RCV_OF\r\n"));
 800b9a0:	2114      	movs	r1, #20
 800b9a2:	480a      	ldr	r0, [pc, #40]	; (800b9cc <LoRa_decode+0x450>)
 800b9a4:	f7f5 fe26 	bl	80015f4 <ITM0_Write>
			break;
 800b9a8:	e004      	b.n	800b9b4 <LoRa_decode+0x438>
		default:
			ITM0_Write("\r\nLora default\r\n",strlen("\r\nLora default\r\n"));
 800b9aa:	2110      	movs	r1, #16
 800b9ac:	4808      	ldr	r0, [pc, #32]	; (800b9d0 <LoRa_decode+0x454>)
 800b9ae:	f7f5 fe21 	bl	80015f4 <ITM0_Write>
			break;
 800b9b2:	bf00      	nop
	}
 }
 800b9b4:	bf00      	nop
 800b9b6:	3718      	adds	r7, #24
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	0801027c 	.word	0x0801027c
 800b9c0:	0801028c 	.word	0x0801028c
 800b9c4:	0801029c 	.word	0x0801029c
 800b9c8:	080102ac 	.word	0x080102ac
 800b9cc:	080102bc 	.word	0x080102bc
 800b9d0:	080102d4 	.word	0x080102d4

0800b9d4 <Lora_idSTR>:
int Lora_idSTR(struct LoRa *a)
{		int f,g,h,i;
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b090      	sub	sp, #64	; 0x40
 800b9d8:	af06      	add	r7, sp, #24
 800b9da:	6078      	str	r0, [r7, #4]
		if(a->rxitems > 270) return _ERR_RCV_OF;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 800b9e2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b9e6:	dd01      	ble.n	800b9ec <Lora_idSTR+0x18>
 800b9e8:	2310      	movs	r3, #16
 800b9ea:	e257      	b.n	800be9c <Lora_idSTR+0x4c8>
		char data[10];
		int ndata=0;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	60fb      	str	r3, [r7, #12]
		i=strlen("+OK=");
 800b9f0:	2304      	movs	r3, #4
 800b9f2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+OK=",&i,data,&ndata,&g,&h,512, 0)==1) return _OK ;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800ba00:	f107 021c 	add.w	r2, r7, #28
 800ba04:	2300      	movs	r3, #0
 800ba06:	9305      	str	r3, [sp, #20]
 800ba08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba0c:	9304      	str	r3, [sp, #16]
 800ba0e:	f107 0320 	add.w	r3, r7, #32
 800ba12:	9303      	str	r3, [sp, #12]
 800ba14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba18:	9302      	str	r3, [sp, #8]
 800ba1a:	f107 030c 	add.w	r3, r7, #12
 800ba1e:	9301      	str	r3, [sp, #4]
 800ba20:	f107 0310 	add.w	r3, r7, #16
 800ba24:	9300      	str	r3, [sp, #0]
 800ba26:	4613      	mov	r3, r2
 800ba28:	4ab7      	ldr	r2, [pc, #732]	; (800bd08 <Lora_idSTR+0x334>)
 800ba2a:	f002 f9cb 	bl	800ddc4 <FT_String_ND>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d101      	bne.n	800ba38 <Lora_idSTR+0x64>
 800ba34:	2300      	movs	r3, #0
 800ba36:	e231      	b.n	800be9c <Lora_idSTR+0x4c8>
		i=strlen("+RCV=");
 800ba38:	2305      	movs	r3, #5
 800ba3a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RCV=",&i,data,&ndata,&g,&h,512, 0)==1) return _RCV ;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800ba48:	f107 021c 	add.w	r2, r7, #28
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	9305      	str	r3, [sp, #20]
 800ba50:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba54:	9304      	str	r3, [sp, #16]
 800ba56:	f107 0320 	add.w	r3, r7, #32
 800ba5a:	9303      	str	r3, [sp, #12]
 800ba5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba60:	9302      	str	r3, [sp, #8]
 800ba62:	f107 030c 	add.w	r3, r7, #12
 800ba66:	9301      	str	r3, [sp, #4]
 800ba68:	f107 0310 	add.w	r3, r7, #16
 800ba6c:	9300      	str	r3, [sp, #0]
 800ba6e:	4613      	mov	r3, r2
 800ba70:	4aa6      	ldr	r2, [pc, #664]	; (800bd0c <Lora_idSTR+0x338>)
 800ba72:	f002 f9a7 	bl	800ddc4 <FT_String_ND>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d101      	bne.n	800ba80 <Lora_idSTR+0xac>
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e20d      	b.n	800be9c <Lora_idSTR+0x4c8>
		i=strlen("+ERR=");
 800ba80:	2305      	movs	r3, #5
 800ba82:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ERR=",&i,data,&ndata,&g,&h,512, 0)==1) return _ERR ;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800ba90:	f107 021c 	add.w	r2, r7, #28
 800ba94:	2300      	movs	r3, #0
 800ba96:	9305      	str	r3, [sp, #20]
 800ba98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba9c:	9304      	str	r3, [sp, #16]
 800ba9e:	f107 0320 	add.w	r3, r7, #32
 800baa2:	9303      	str	r3, [sp, #12]
 800baa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800baa8:	9302      	str	r3, [sp, #8]
 800baaa:	f107 030c 	add.w	r3, r7, #12
 800baae:	9301      	str	r3, [sp, #4]
 800bab0:	f107 0310 	add.w	r3, r7, #16
 800bab4:	9300      	str	r3, [sp, #0]
 800bab6:	4613      	mov	r3, r2
 800bab8:	4a95      	ldr	r2, [pc, #596]	; (800bd10 <Lora_idSTR+0x33c>)
 800baba:	f002 f983 	bl	800ddc4 <FT_String_ND>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d101      	bne.n	800bac8 <Lora_idSTR+0xf4>
 800bac4:	230f      	movs	r3, #15
 800bac6:	e1e9      	b.n	800be9c <Lora_idSTR+0x4c8>
		i=strlen("+RESET");
 800bac8:	2306      	movs	r3, #6
 800baca:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RESET",&i,data,&ndata,&g,&h,512, 0)==1)return _RESET;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800bad8:	f107 021c 	add.w	r2, r7, #28
 800badc:	2300      	movs	r3, #0
 800bade:	9305      	str	r3, [sp, #20]
 800bae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bae4:	9304      	str	r3, [sp, #16]
 800bae6:	f107 0320 	add.w	r3, r7, #32
 800baea:	9303      	str	r3, [sp, #12]
 800baec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800baf0:	9302      	str	r3, [sp, #8]
 800baf2:	f107 030c 	add.w	r3, r7, #12
 800baf6:	9301      	str	r3, [sp, #4]
 800baf8:	f107 0310 	add.w	r3, r7, #16
 800bafc:	9300      	str	r3, [sp, #0]
 800bafe:	4613      	mov	r3, r2
 800bb00:	4a84      	ldr	r2, [pc, #528]	; (800bd14 <Lora_idSTR+0x340>)
 800bb02:	f002 f95f 	bl	800ddc4 <FT_String_ND>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d101      	bne.n	800bb10 <Lora_idSTR+0x13c>
 800bb0c:	2302      	movs	r3, #2
 800bb0e:	e1c5      	b.n	800be9c <Lora_idSTR+0x4c8>
		i=strlen("+READY");
 800bb10:	2306      	movs	r3, #6
 800bb12:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+READY",&i,data,&ndata,&g,&h,512, 0)==1) return _READY ;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800bb20:	f107 021c 	add.w	r2, r7, #28
 800bb24:	2300      	movs	r3, #0
 800bb26:	9305      	str	r3, [sp, #20]
 800bb28:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb2c:	9304      	str	r3, [sp, #16]
 800bb2e:	f107 0320 	add.w	r3, r7, #32
 800bb32:	9303      	str	r3, [sp, #12]
 800bb34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb38:	9302      	str	r3, [sp, #8]
 800bb3a:	f107 030c 	add.w	r3, r7, #12
 800bb3e:	9301      	str	r3, [sp, #4]
 800bb40:	f107 0310 	add.w	r3, r7, #16
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	4613      	mov	r3, r2
 800bb48:	4a73      	ldr	r2, [pc, #460]	; (800bd18 <Lora_idSTR+0x344>)
 800bb4a:	f002 f93b 	bl	800ddc4 <FT_String_ND>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	d101      	bne.n	800bb58 <Lora_idSTR+0x184>
 800bb54:	2303      	movs	r3, #3
 800bb56:	e1a1      	b.n	800be9c <Lora_idSTR+0x4c8>
		i=strlen("+MODE=");
 800bb58:	2306      	movs	r3, #6
 800bb5a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+MODE=",&i,data,&ndata,&g,&h,512, 0)==1) return _MODE ;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800bb68:	f107 021c 	add.w	r2, r7, #28
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	9305      	str	r3, [sp, #20]
 800bb70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb74:	9304      	str	r3, [sp, #16]
 800bb76:	f107 0320 	add.w	r3, r7, #32
 800bb7a:	9303      	str	r3, [sp, #12]
 800bb7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb80:	9302      	str	r3, [sp, #8]
 800bb82:	f107 030c 	add.w	r3, r7, #12
 800bb86:	9301      	str	r3, [sp, #4]
 800bb88:	f107 0310 	add.w	r3, r7, #16
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	4613      	mov	r3, r2
 800bb90:	4a62      	ldr	r2, [pc, #392]	; (800bd1c <Lora_idSTR+0x348>)
 800bb92:	f002 f917 	bl	800ddc4 <FT_String_ND>
 800bb96:	4603      	mov	r3, r0
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d101      	bne.n	800bba0 <Lora_idSTR+0x1cc>
 800bb9c:	2304      	movs	r3, #4
 800bb9e:	e17d      	b.n	800be9c <Lora_idSTR+0x4c8>
		i=strlen("+IPR=");
 800bba0:	2305      	movs	r3, #5
 800bba2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+IPR=",&i,data,&ndata,&g,&h,512, 0)==1) return _IPR ;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800bbb0:	f107 021c 	add.w	r2, r7, #28
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	9305      	str	r3, [sp, #20]
 800bbb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbbc:	9304      	str	r3, [sp, #16]
 800bbbe:	f107 0320 	add.w	r3, r7, #32
 800bbc2:	9303      	str	r3, [sp, #12]
 800bbc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbc8:	9302      	str	r3, [sp, #8]
 800bbca:	f107 030c 	add.w	r3, r7, #12
 800bbce:	9301      	str	r3, [sp, #4]
 800bbd0:	f107 0310 	add.w	r3, r7, #16
 800bbd4:	9300      	str	r3, [sp, #0]
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	4a51      	ldr	r2, [pc, #324]	; (800bd20 <Lora_idSTR+0x34c>)
 800bbda:	f002 f8f3 	bl	800ddc4 <FT_String_ND>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d101      	bne.n	800bbe8 <Lora_idSTR+0x214>
 800bbe4:	2305      	movs	r3, #5
 800bbe6:	e159      	b.n	800be9c <Lora_idSTR+0x4c8>
		i=strlen("+PARAMETER=");
 800bbe8:	230b      	movs	r3, #11
 800bbea:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+PARAMETER=",&i,data,&ndata,&g,&h,512, 0)==1) return _PARAMETER ;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800bbf8:	f107 021c 	add.w	r2, r7, #28
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	9305      	str	r3, [sp, #20]
 800bc00:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc04:	9304      	str	r3, [sp, #16]
 800bc06:	f107 0320 	add.w	r3, r7, #32
 800bc0a:	9303      	str	r3, [sp, #12]
 800bc0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc10:	9302      	str	r3, [sp, #8]
 800bc12:	f107 030c 	add.w	r3, r7, #12
 800bc16:	9301      	str	r3, [sp, #4]
 800bc18:	f107 0310 	add.w	r3, r7, #16
 800bc1c:	9300      	str	r3, [sp, #0]
 800bc1e:	4613      	mov	r3, r2
 800bc20:	4a40      	ldr	r2, [pc, #256]	; (800bd24 <Lora_idSTR+0x350>)
 800bc22:	f002 f8cf 	bl	800ddc4 <FT_String_ND>
 800bc26:	4603      	mov	r3, r0
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d101      	bne.n	800bc30 <Lora_idSTR+0x25c>
 800bc2c:	2306      	movs	r3, #6
 800bc2e:	e135      	b.n	800be9c <Lora_idSTR+0x4c8>
		i=strlen("+BAND=");
 800bc30:	2306      	movs	r3, #6
 800bc32:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+BAND=",&i,data,&ndata,&g,&h,512, 0)==1) return _BAND ;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800bc40:	f107 021c 	add.w	r2, r7, #28
 800bc44:	2300      	movs	r3, #0
 800bc46:	9305      	str	r3, [sp, #20]
 800bc48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc4c:	9304      	str	r3, [sp, #16]
 800bc4e:	f107 0320 	add.w	r3, r7, #32
 800bc52:	9303      	str	r3, [sp, #12]
 800bc54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc58:	9302      	str	r3, [sp, #8]
 800bc5a:	f107 030c 	add.w	r3, r7, #12
 800bc5e:	9301      	str	r3, [sp, #4]
 800bc60:	f107 0310 	add.w	r3, r7, #16
 800bc64:	9300      	str	r3, [sp, #0]
 800bc66:	4613      	mov	r3, r2
 800bc68:	4a2f      	ldr	r2, [pc, #188]	; (800bd28 <Lora_idSTR+0x354>)
 800bc6a:	f002 f8ab 	bl	800ddc4 <FT_String_ND>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d101      	bne.n	800bc78 <Lora_idSTR+0x2a4>
 800bc74:	2307      	movs	r3, #7
 800bc76:	e111      	b.n	800be9c <Lora_idSTR+0x4c8>
		i=strlen("+ADDRESS=");
 800bc78:	2309      	movs	r3, #9
 800bc7a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ADDRESS=",&i,data,&ndata,&g,&h,512, 0)==1) return _ADDRESS ;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800bc88:	f107 021c 	add.w	r2, r7, #28
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	9305      	str	r3, [sp, #20]
 800bc90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc94:	9304      	str	r3, [sp, #16]
 800bc96:	f107 0320 	add.w	r3, r7, #32
 800bc9a:	9303      	str	r3, [sp, #12]
 800bc9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bca0:	9302      	str	r3, [sp, #8]
 800bca2:	f107 030c 	add.w	r3, r7, #12
 800bca6:	9301      	str	r3, [sp, #4]
 800bca8:	f107 0310 	add.w	r3, r7, #16
 800bcac:	9300      	str	r3, [sp, #0]
 800bcae:	4613      	mov	r3, r2
 800bcb0:	4a1e      	ldr	r2, [pc, #120]	; (800bd2c <Lora_idSTR+0x358>)
 800bcb2:	f002 f887 	bl	800ddc4 <FT_String_ND>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d101      	bne.n	800bcc0 <Lora_idSTR+0x2ec>
 800bcbc:	2308      	movs	r3, #8
 800bcbe:	e0ed      	b.n	800be9c <Lora_idSTR+0x4c8>
		i=strlen("+NETWORK=");
 800bcc0:	2309      	movs	r3, #9
 800bcc2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+NETWORK=",&i,data,&ndata,&g,&h,512, 0)==1) return _NETWORK ;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800bcd0:	f107 021c 	add.w	r2, r7, #28
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	9305      	str	r3, [sp, #20]
 800bcd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bcdc:	9304      	str	r3, [sp, #16]
 800bcde:	f107 0320 	add.w	r3, r7, #32
 800bce2:	9303      	str	r3, [sp, #12]
 800bce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bce8:	9302      	str	r3, [sp, #8]
 800bcea:	f107 030c 	add.w	r3, r7, #12
 800bcee:	9301      	str	r3, [sp, #4]
 800bcf0:	f107 0310 	add.w	r3, r7, #16
 800bcf4:	9300      	str	r3, [sp, #0]
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	4a0d      	ldr	r2, [pc, #52]	; (800bd30 <Lora_idSTR+0x35c>)
 800bcfa:	f002 f863 	bl	800ddc4 <FT_String_ND>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d117      	bne.n	800bd34 <Lora_idSTR+0x360>
 800bd04:	2309      	movs	r3, #9
 800bd06:	e0c9      	b.n	800be9c <Lora_idSTR+0x4c8>
 800bd08:	080102e8 	.word	0x080102e8
 800bd0c:	080102f0 	.word	0x080102f0
 800bd10:	080102f8 	.word	0x080102f8
 800bd14:	08010300 	.word	0x08010300
 800bd18:	08010308 	.word	0x08010308
 800bd1c:	08010310 	.word	0x08010310
 800bd20:	08010318 	.word	0x08010318
 800bd24:	08010320 	.word	0x08010320
 800bd28:	0801032c 	.word	0x0801032c
 800bd2c:	08010334 	.word	0x08010334
 800bd30:	08010340 	.word	0x08010340
		i=strlen("+CPIN=");
 800bd34:	2306      	movs	r3, #6
 800bd36:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CPIN=",&i,data,&ndata,&g,&h,512, 0)==1) return _CPIN ;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800bd44:	f107 021c 	add.w	r2, r7, #28
 800bd48:	2300      	movs	r3, #0
 800bd4a:	9305      	str	r3, [sp, #20]
 800bd4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd50:	9304      	str	r3, [sp, #16]
 800bd52:	f107 0320 	add.w	r3, r7, #32
 800bd56:	9303      	str	r3, [sp, #12]
 800bd58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd5c:	9302      	str	r3, [sp, #8]
 800bd5e:	f107 030c 	add.w	r3, r7, #12
 800bd62:	9301      	str	r3, [sp, #4]
 800bd64:	f107 0310 	add.w	r3, r7, #16
 800bd68:	9300      	str	r3, [sp, #0]
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	4a4d      	ldr	r2, [pc, #308]	; (800bea4 <Lora_idSTR+0x4d0>)
 800bd6e:	f002 f829 	bl	800ddc4 <FT_String_ND>
 800bd72:	4603      	mov	r3, r0
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d101      	bne.n	800bd7c <Lora_idSTR+0x3a8>
 800bd78:	230a      	movs	r3, #10
 800bd7a:	e08f      	b.n	800be9c <Lora_idSTR+0x4c8>
		i=strlen("+CRFOP=");
 800bd7c:	2307      	movs	r3, #7
 800bd7e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CRFOP=",&i,data,&ndata,&g,&h,512, 0)==1) return _CRFOP ;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800bd8c:	f107 021c 	add.w	r2, r7, #28
 800bd90:	2300      	movs	r3, #0
 800bd92:	9305      	str	r3, [sp, #20]
 800bd94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd98:	9304      	str	r3, [sp, #16]
 800bd9a:	f107 0320 	add.w	r3, r7, #32
 800bd9e:	9303      	str	r3, [sp, #12]
 800bda0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bda4:	9302      	str	r3, [sp, #8]
 800bda6:	f107 030c 	add.w	r3, r7, #12
 800bdaa:	9301      	str	r3, [sp, #4]
 800bdac:	f107 0310 	add.w	r3, r7, #16
 800bdb0:	9300      	str	r3, [sp, #0]
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	4a3c      	ldr	r2, [pc, #240]	; (800bea8 <Lora_idSTR+0x4d4>)
 800bdb6:	f002 f805 	bl	800ddc4 <FT_String_ND>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d101      	bne.n	800bdc4 <Lora_idSTR+0x3f0>
 800bdc0:	230b      	movs	r3, #11
 800bdc2:	e06b      	b.n	800be9c <Lora_idSTR+0x4c8>
		i=strlen("+SEND=");
 800bdc4:	2306      	movs	r3, #6
 800bdc6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+SEND=",&i,data,&ndata,&g,&h,512, 0)==1) return _SEND ;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800bdd4:	f107 021c 	add.w	r2, r7, #28
 800bdd8:	2300      	movs	r3, #0
 800bdda:	9305      	str	r3, [sp, #20]
 800bddc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bde0:	9304      	str	r3, [sp, #16]
 800bde2:	f107 0320 	add.w	r3, r7, #32
 800bde6:	9303      	str	r3, [sp, #12]
 800bde8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bdec:	9302      	str	r3, [sp, #8]
 800bdee:	f107 030c 	add.w	r3, r7, #12
 800bdf2:	9301      	str	r3, [sp, #4]
 800bdf4:	f107 0310 	add.w	r3, r7, #16
 800bdf8:	9300      	str	r3, [sp, #0]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	4a2b      	ldr	r2, [pc, #172]	; (800beac <Lora_idSTR+0x4d8>)
 800bdfe:	f001 ffe1 	bl	800ddc4 <FT_String_ND>
 800be02:	4603      	mov	r3, r0
 800be04:	2b01      	cmp	r3, #1
 800be06:	d101      	bne.n	800be0c <Lora_idSTR+0x438>
 800be08:	230c      	movs	r3, #12
 800be0a:	e047      	b.n	800be9c <Lora_idSTR+0x4c8>
		i=strlen("+UID=");
 800be0c:	2305      	movs	r3, #5
 800be0e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+UID=",&i,data,&ndata,&g,&h,512, 0)==1) return _UID ;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800be1c:	f107 021c 	add.w	r2, r7, #28
 800be20:	2300      	movs	r3, #0
 800be22:	9305      	str	r3, [sp, #20]
 800be24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be28:	9304      	str	r3, [sp, #16]
 800be2a:	f107 0320 	add.w	r3, r7, #32
 800be2e:	9303      	str	r3, [sp, #12]
 800be30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be34:	9302      	str	r3, [sp, #8]
 800be36:	f107 030c 	add.w	r3, r7, #12
 800be3a:	9301      	str	r3, [sp, #4]
 800be3c:	f107 0310 	add.w	r3, r7, #16
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	4613      	mov	r3, r2
 800be44:	4a1a      	ldr	r2, [pc, #104]	; (800beb0 <Lora_idSTR+0x4dc>)
 800be46:	f001 ffbd 	bl	800ddc4 <FT_String_ND>
 800be4a:	4603      	mov	r3, r0
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d101      	bne.n	800be54 <Lora_idSTR+0x480>
 800be50:	230e      	movs	r3, #14
 800be52:	e023      	b.n	800be9c <Lora_idSTR+0x4c8>
		i=strlen("+VER=");
 800be54:	2305      	movs	r3, #5
 800be56:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+VER=",&i,data,&ndata,&g,&h,512, 0)==1) return _VER ;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800be64:	f107 021c 	add.w	r2, r7, #28
 800be68:	2300      	movs	r3, #0
 800be6a:	9305      	str	r3, [sp, #20]
 800be6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be70:	9304      	str	r3, [sp, #16]
 800be72:	f107 0320 	add.w	r3, r7, #32
 800be76:	9303      	str	r3, [sp, #12]
 800be78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be7c:	9302      	str	r3, [sp, #8]
 800be7e:	f107 030c 	add.w	r3, r7, #12
 800be82:	9301      	str	r3, [sp, #4]
 800be84:	f107 0310 	add.w	r3, r7, #16
 800be88:	9300      	str	r3, [sp, #0]
 800be8a:	4613      	mov	r3, r2
 800be8c:	4a09      	ldr	r2, [pc, #36]	; (800beb4 <Lora_idSTR+0x4e0>)
 800be8e:	f001 ff99 	bl	800ddc4 <FT_String_ND>
 800be92:	4603      	mov	r3, r0
 800be94:	2b01      	cmp	r3, #1
 800be96:	d101      	bne.n	800be9c <Lora_idSTR+0x4c8>
 800be98:	230d      	movs	r3, #13
 800be9a:	e7ff      	b.n	800be9c <Lora_idSTR+0x4c8>
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3728      	adds	r7, #40	; 0x28
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	0801034c 	.word	0x0801034c
 800bea8:	08010354 	.word	0x08010354
 800beac:	0801035c 	.word	0x0801035c
 800beb0:	08010364 	.word	0x08010364
 800beb4:	0801036c 	.word	0x0801036c

0800beb8 <Lora_rx_del>:
void Lora_rx_del(struct LoRa *a)
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
	a->rxbuff[0]='\0';
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	a->rx_items[0]='\0';
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	731a      	strb	r2, [r3, #12]
	//a->dataRCV[0]='\0';
	a->rxRSSI=0;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2200      	movs	r2, #0
 800bed2:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
	a->rxSNR=0;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2200      	movs	r2, #0
 800beda:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
}
 800bede:	bf00      	nop
 800bee0:	370c      	adds	r7, #12
 800bee2:	46bd      	mov	sp, r7
 800bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee8:	4770      	bx	lr
	...

0800beec <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2201      	movs	r2, #1
 800bef8:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2200      	movs	r2, #0
 800befe:	711a      	strb	r2, [r3, #4]
	m->_timeout=500;						//Timeout para la recepción de respuesta.
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800bf06:	80da      	strh	r2, [r3, #6]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	729a      	strb	r2, [r3, #10]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2220      	movs	r2, #32
 800bf12:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
	m->_Coils=0xF0F0AF5A;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	4a1c      	ldr	r2, [pc, #112]	; (800bf8c <ModBUS_Config+0xa0>)
 800bf1a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2201      	movs	r2, #1
 800bf22:	72da      	strb	r2, [r3, #11]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2220      	movs	r2, #32
 800bf28:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
	m->_Inputs=0xA5FA0F0F;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	4a18      	ldr	r2, [pc, #96]	; (800bf90 <ModBUS_Config+0xa4>)
 800bf30:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2201      	movs	r2, #1
 800bf38:	731a      	strb	r2, [r3, #12]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2210      	movs	r2, #16
 800bf3e:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2201      	movs	r2, #1
 800bf46:	735a      	strb	r2, [r3, #13]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2210      	movs	r2, #16
 800bf4c:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2201      	movs	r2, #1
 800bf54:	739a      	strb	r2, [r3, #14]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2220      	movs	r2, #32
 800bf5a:	f883 2638 	strb.w	r2, [r3, #1592]	; 0x638

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2201      	movs	r2, #1
 800bf62:	73da      	strb	r2, [r3, #15]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2201      	movs	r2, #1
 800bf68:	741a      	strb	r2, [r3, #16]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2220      	movs	r2, #32
 800bf6e:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2201      	movs	r2, #1
 800bf76:	745a      	strb	r2, [r3, #17]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2220      	movs	r2, #32
 800bf7c:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
}
 800bf80:	bf00      	nop
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr
 800bf8c:	f0f0af5a 	.word	0xf0f0af5a
 800bf90:	a5fa0f0f 	.word	0xa5fa0f0f

0800bf94 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	3305      	adds	r3, #5
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	3306      	adds	r3, #6
 800bfa6:	683a      	ldr	r2, [r7, #0]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d10b      	bne.n	800bfc4 <ModBUS_Check+0x30>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	3302      	adds	r3, #2
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	3303      	adds	r3, #3
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	4413      	add	r3, r2
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d101      	bne.n	800bfc4 <ModBUS_Check+0x30>
	{
		return(1);
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e000      	b.n	800bfc6 <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800bfc4:	2300      	movs	r3, #0
	}
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	370c      	adds	r7, #12
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr

0800bfd2 <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800bfd2:	b480      	push	{r7}
 800bfd4:	b083      	sub	sp, #12
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f893 2218 	ldrb.w	r2, [r3, #536]	; 0x218
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	7c9b      	ldrb	r3, [r3, #18]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d11d      	bne.n	800c024 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f893 2219 	ldrb.w	r2, [r3, #537]	; 0x219
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	7cdb      	ldrb	r3, [r3, #19]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d116      	bne.n	800c024 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800c000:	429a      	cmp	r2, r3
 800c002:	d10f      	bne.n	800c024 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f893 221b 	ldrb.w	r2, [r3, #539]	; 0x21b
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	7d5b      	ldrb	r3, [r3, #21]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800c00e:	429a      	cmp	r2, r3
 800c010:	d108      	bne.n	800c024 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f893 221f 	ldrb.w	r2, [r3, #543]	; 0x21f
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	7e5b      	ldrb	r3, [r3, #25]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d101      	bne.n	800c024 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800c020:	2301      	movs	r3, #1
 800c022:	e000      	b.n	800c026 <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800c024:	2300      	movs	r3, #0
	}
}
 800c026:	4618      	mov	r0, r3
 800c028:	370c      	adds	r7, #12
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr

0800c032 <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t address, uint16_t data)
{
 800c032:	b480      	push	{r7}
 800c034:	b085      	sub	sp, #20
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
 800c03a:	460b      	mov	r3, r1
 800c03c:	70fb      	strb	r3, [r7, #3]
 800c03e:	4613      	mov	r3, r2
 800c040:	803b      	strh	r3, [r7, #0]

	uint8_t c=0;
 800c042:	2300      	movs	r3, #0
 800c044:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800c04c:	78fa      	ldrb	r2, [r7, #3]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d901      	bls.n	800c056 <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800c052:	2301      	movs	r3, #1
 800c054:	e016      	b.n	800c084 <ModBUS_F03_Assign+0x52>
	}
	else
	{
		address=address*2;
 800c056:	78fb      	ldrb	r3, [r7, #3]
 800c058:	005b      	lsls	r3, r3, #1
 800c05a:	70fb      	strb	r3, [r7, #3]
		m2->_Holding_Registers[(address)+1]=data;
 800c05c:	78fb      	ldrb	r3, [r7, #3]
 800c05e:	3301      	adds	r3, #1
 800c060:	883a      	ldrh	r2, [r7, #0]
 800c062:	b2d1      	uxtb	r1, r2
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	4413      	add	r3, r2
 800c068:	460a      	mov	r2, r1
 800c06a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
		c=data>>8;
 800c06e:	883b      	ldrh	r3, [r7, #0]
 800c070:	0a1b      	lsrs	r3, r3, #8
 800c072:	b29b      	uxth	r3, r3
 800c074:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(address)]=c;
 800c076:	78fb      	ldrb	r3, [r7, #3]
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	4413      	add	r3, r2
 800c07c:	7bfa      	ldrb	r2, [r7, #15]
 800c07e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

		return(0);
 800c082:	2300      	movs	r3, #0
	}
}
 800c084:	4618      	mov	r0, r3
 800c086:	3714      	adds	r7, #20
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t address)
{
 800c090:	b480      	push	{r7}
 800c092:	b085      	sub	sp, #20
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	460b      	mov	r3, r1
 800c09a:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800c09c:	2300      	movs	r3, #0
 800c09e:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800c0aa:	78fa      	ldrb	r2, [r7, #3]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d901      	bls.n	800c0b4 <ModBUS_F03_Read+0x24>
	{
		return(1);
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	e016      	b.n	800c0e2 <ModBUS_F03_Read+0x52>
	}
	else
	{
		address=address*2;
 800c0b4:	78fb      	ldrb	r3, [r7, #3]
 800c0b6:	005b      	lsls	r3, r3, #1
 800c0b8:	70fb      	strb	r3, [r7, #3]
		n=m2->_Holding_Registers[(address)];
 800c0ba:	78fb      	ldrb	r3, [r7, #3]
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	4413      	add	r3, r2
 800c0c0:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800c0c4:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800c0c6:	89fb      	ldrh	r3, [r7, #14]
 800c0c8:	021b      	lsls	r3, r3, #8
 800c0ca:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(address)+1];
 800c0cc:	78fb      	ldrb	r3, [r7, #3]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	4413      	add	r3, r2
 800c0d4:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800c0d8:	b29a      	uxth	r2, r3
 800c0da:	89fb      	ldrh	r3, [r7, #14]
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	81fb      	strh	r3, [r7, #14]
		return(n);
 800c0e0:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3714      	adds	r7, #20
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr

0800c0ee <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800c0ee:	b480      	push	{r7}
 800c0f0:	b083      	sub	sp, #12
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	807b      	strh	r3, [r7, #2]
 800c0fa:	4613      	mov	r3, r2
 800c0fc:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800c0fe:	887b      	ldrh	r3, [r7, #2]
 800c100:	2b00      	cmp	r3, #0
 800c102:	bf14      	ite	ne
 800c104:	2301      	movne	r3, #1
 800c106:	2300      	moveq	r3, #0
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	461a      	mov	r2, r3
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
	addr&=0xF0;
 800c112:	887b      	ldrh	r3, [r7, #2]
 800c114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c118:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800c11a:	887b      	ldrh	r3, [r7, #2]
 800c11c:	0a1b      	lsrs	r3, r3, #8
 800c11e:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800c120:	887b      	ldrh	r3, [r7, #2]
 800c122:	f003 030f 	and.w	r3, r3, #15
 800c126:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	m2->_MBUS_2SND[1]=0x00;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2200      	movs	r2, #0
 800c134:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
	m2->_MBUS_2SND[2]=0x00;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
	m2->_MBUS_2SND[3]=0x00;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2200      	movs	r2, #0
 800c144:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
	m2->_MBUS_2SND[4]=0x00;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2200      	movs	r2, #0
 800c14c:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	m2->_MBUS_2SND[5]=0x06;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2206      	movs	r2, #6
 800c154:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	m2->_MBUS_2SND[6]=m2->_address;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	781a      	ldrb	r2, [r3, #0]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
	m2->_MBUS_2SND[7]=0x03;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2203      	movs	r2, #3
 800c166:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
	m2->_MBUS_2SND[8]=addr;
 800c16a:	887b      	ldrh	r3, [r7, #2]
 800c16c:	b2da      	uxtb	r2, r3
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220

	m2->_MBUS_2SND[10]=0x00;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
	m2->_MBUS_2SND[11]=qty;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	787a      	ldrb	r2, [r7, #1]
 800c180:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	220c      	movs	r2, #12
 800c188:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

}
 800c18c:	bf00      	nop
 800c18e:	4618      	mov	r0, r3
 800c190:	370c      	adds	r7, #12
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr
	...

0800c19c <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b09c      	sub	sp, #112	; 0x70
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	791b      	ldrb	r3, [r3, #4]
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	f041 813f 	bne.w	800d42c <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f103 0212 	add.w	r2, r3, #18
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	4610      	mov	r0, r2
 800c1be:	f7ff fee9 	bl	800bf94 <ModBUS_Check>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f001 812f 	beq.w	800d428 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	7e5b      	ldrb	r3, [r3, #25]
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	2b0f      	cmp	r3, #15
 800c1d2:	f201 80f3 	bhi.w	800d3bc <ModBUS+0x1220>
 800c1d6:	a201      	add	r2, pc, #4	; (adr r2, 800c1dc <ModBUS+0x40>)
 800c1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1dc:	0800c21d 	.word	0x0800c21d
 800c1e0:	0800c45d 	.word	0x0800c45d
 800c1e4:	0800c69d 	.word	0x0800c69d
 800c1e8:	0800c8d5 	.word	0x0800c8d5
 800c1ec:	0800cb0d 	.word	0x0800cb0d
 800c1f0:	0800cd23 	.word	0x0800cd23
 800c1f4:	0800d3bd 	.word	0x0800d3bd
 800c1f8:	0800d3bd 	.word	0x0800d3bd
 800c1fc:	0800d3bd 	.word	0x0800d3bd
 800c200:	0800d3bd 	.word	0x0800d3bd
 800c204:	0800d3bd 	.word	0x0800d3bd
 800c208:	0800d3bd 	.word	0x0800d3bd
 800c20c:	0800d3bd 	.word	0x0800d3bd
 800c210:	0800d3bd 	.word	0x0800d3bd
 800c214:	0800cedf 	.word	0x0800cedf
 800c218:	0800d16f 	.word	0x0800d16f

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	7d9a      	ldrb	r2, [r3, #22]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	7d5a      	ldrb	r2, [r3, #21]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	7d1a      	ldrb	r2, [r3, #20]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	7cda      	ldrb	r2, [r3, #19]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	7c9a      	ldrb	r2, [r3, #18]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c24e:	2300      	movs	r3, #0
 800c250:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	7a9b      	ldrb	r3, [r3, #10]
 800c256:	2b01      	cmp	r3, #1
 800c258:	f040 80e6 	bne.w	800c428 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	7e9b      	ldrb	r3, [r3, #26]
 800c260:	b29a      	uxth	r2, r3
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800c26e:	021b      	lsls	r3, r3, #8
 800c270:	b29a      	uxth	r2, r3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800c27e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c282:	b29a      	uxth	r2, r3
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8b3 2622 	ldrh.w	r2, [r3, #1570]	; 0x622
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	7edb      	ldrb	r3, [r3, #27]
 800c294:	b29b      	uxth	r3, r3
 800c296:	4313      	orrs	r3, r2
 800c298:	b29a      	uxth	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	7f1b      	ldrb	r3, [r3, #28]
 800c2a4:	b29a      	uxth	r2, r3
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800c2b2:	021b      	lsls	r3, r3, #8
 800c2b4:	b29a      	uxth	r2, r3
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800c2c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c2c6:	b29a      	uxth	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	7f5b      	ldrb	r3, [r3, #29]
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	b29a      	uxth	r2, r3
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d87e      	bhi.n	800c3f4 <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800c304:	4413      	add	r3, r2
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	f892 2620 	ldrb.w	r2, [r2, #1568]	; 0x620
 800c30c:	4293      	cmp	r3, r2
 800c30e:	dc57      	bgt.n	800c3c0 <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800c310:	2300      	movs	r3, #0
 800c312:	613b      	str	r3, [r7, #16]
 800c314:	2300      	movs	r3, #0
 800c316:	60fb      	str	r3, [r7, #12]
 800c318:	2300      	movs	r3, #0
 800c31a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c31c:	2300      	movs	r3, #0
 800c31e:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800c320:	2300      	movs	r3, #0
 800c322:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	f8b2 2622 	ldrh.w	r2, [r2, #1570]	; 0x622
 800c330:	40d3      	lsrs	r3, r2
 800c332:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800c33a:	08db      	lsrs	r3, r3, #3
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800c346:	f003 0307 	and.w	r3, r3, #7
 800c34a:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d102      	bne.n	800c358 <ModBUS+0x1bc>
									{
										bytes=div;
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c356:	e002      	b.n	800c35e <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	3301      	adds	r3, #1
 800c35c:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800c35e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c360:	b2da      	uxtb	r2, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800c368:	e00e      	b.n	800c388 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800c36a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c36c:	3308      	adds	r3, #8
 800c36e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c370:	b2d1      	uxtb	r1, r2
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	4413      	add	r3, r2
 800c376:	460a      	mov	r2, r1
 800c378:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800c37c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c37e:	0a1b      	lsrs	r3, r3, #8
 800c380:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800c382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c384:	3b01      	subs	r3, #1
 800c386:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800c388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	dced      	bgt.n	800c36a <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2201      	movs	r2, #1
 800c392:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2201      	movs	r2, #1
 800c39a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c3a4:	3303      	adds	r3, #3
 800c3a6:	b2da      	uxtb	r2, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c3b4:	1d9a      	adds	r2, r3, #6
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c3bc:	f001 b8d4 	b.w	800d568 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2202      	movs	r2, #2
 800c3c4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x81;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2281      	movs	r2, #129	; 0x81
 800c3cc:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2203      	movs	r2, #3
 800c3dc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c3e6:	1d9a      	adds	r2, r3, #6
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c3ee:	2302      	movs	r3, #2
 800c3f0:	f001 b8ba 	b.w	800d568 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2203      	movs	r2, #3
 800c3f8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x81;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2281      	movs	r2, #129	; 0x81
 800c400:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2201      	movs	r2, #1
 800c408:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2203      	movs	r2, #3
 800c410:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c41a:	1d9a      	adds	r2, r3, #6
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c422:	2303      	movs	r3, #3
 800c424:	f001 b8a0 	b.w	800d568 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2201      	movs	r2, #1
 800c42c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x81;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2281      	movs	r2, #129	; 0x81
 800c434:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2201      	movs	r2, #1
 800c43c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2203      	movs	r2, #3
 800c444:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c44e:	1d9a      	adds	r2, r3, #6
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c456:	2301      	movs	r3, #1
 800c458:	f001 b886 	b.w	800d568 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	7d9a      	ldrb	r2, [r3, #22]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	7d5a      	ldrb	r2, [r3, #21]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	7d1a      	ldrb	r2, [r3, #20]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	7cda      	ldrb	r2, [r3, #19]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	7c9a      	ldrb	r2, [r3, #18]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c48e:	2300      	movs	r3, #0
 800c490:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	7adb      	ldrb	r3, [r3, #11]
 800c496:	2b01      	cmp	r3, #1
 800c498:	f040 80e6 	bne.w	800c668 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	7e9b      	ldrb	r3, [r3, #26]
 800c4a0:	b29a      	uxth	r2, r3
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800c4ae:	021b      	lsls	r3, r3, #8
 800c4b0:	b29a      	uxth	r2, r3
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800c4be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c4c2:	b29a      	uxth	r2, r3
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	7edb      	ldrb	r3, [r3, #27]
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	b29a      	uxth	r2, r3
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	7f1b      	ldrb	r3, [r3, #28]
 800c4e4:	b29a      	uxth	r2, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c4f2:	021b      	lsls	r3, r3, #8
 800c4f4:	b29a      	uxth	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c502:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c506:	b29a      	uxth	r2, r3
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	7f5b      	ldrb	r3, [r3, #29]
 800c518:	b29b      	uxth	r3, r3
 800c51a:	4313      	orrs	r3, r2
 800c51c:	b29a      	uxth	r2, r3
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
 800c530:	b29b      	uxth	r3, r3
 800c532:	429a      	cmp	r2, r3
 800c534:	d87e      	bhi.n	800c634 <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800c53c:	461a      	mov	r2, r3
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c544:	4413      	add	r3, r2
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	f892 2626 	ldrb.w	r2, [r2, #1574]	; 0x626
 800c54c:	4293      	cmp	r3, r2
 800c54e:	dc57      	bgt.n	800c600 <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800c550:	2300      	movs	r3, #0
 800c552:	623b      	str	r3, [r7, #32]
 800c554:	2300      	movs	r3, #0
 800c556:	61fb      	str	r3, [r7, #28]
 800c558:	2300      	movs	r3, #0
 800c55a:	667b      	str	r3, [r7, #100]	; 0x64
 800c55c:	2300      	movs	r3, #0
 800c55e:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800c560:	2300      	movs	r3, #0
 800c562:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	f8b2 2628 	ldrh.w	r2, [r2, #1576]	; 0x628
 800c570:	40d3      	lsrs	r3, r2
 800c572:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c57a:	08db      	lsrs	r3, r3, #3
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c586:	f003 0307 	and.w	r3, r3, #7
 800c58a:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800c58c:	69fb      	ldr	r3, [r7, #28]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d102      	bne.n	800c598 <ModBUS+0x3fc>
									{
										bytes=div;
 800c592:	6a3b      	ldr	r3, [r7, #32]
 800c594:	667b      	str	r3, [r7, #100]	; 0x64
 800c596:	e002      	b.n	800c59e <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800c598:	6a3b      	ldr	r3, [r7, #32]
 800c59a:	3301      	adds	r3, #1
 800c59c:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800c59e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5a0:	b2da      	uxtb	r2, r3
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800c5a8:	e00e      	b.n	800c5c8 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800c5aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5ac:	3308      	adds	r3, #8
 800c5ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c5b0:	b2d1      	uxtb	r1, r2
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	460a      	mov	r2, r1
 800c5b8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800c5bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5be:	0a1b      	lsrs	r3, r3, #8
 800c5c0:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800c5c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5c4:	3b01      	subs	r3, #1
 800c5c6:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800c5c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	dced      	bgt.n	800c5aa <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2202      	movs	r2, #2
 800c5d2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2201      	movs	r2, #1
 800c5da:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c5e4:	3303      	adds	r3, #3
 800c5e6:	b2da      	uxtb	r2, r3
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c5f4:	1d9a      	adds	r2, r3, #6
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c5fc:	f000 bfb4 	b.w	800d568 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2202      	movs	r2, #2
 800c604:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x82;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2282      	movs	r2, #130	; 0x82
 800c60c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2201      	movs	r2, #1
 800c614:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2203      	movs	r2, #3
 800c61c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c626:	1d9a      	adds	r2, r3, #6
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c62e:	2302      	movs	r3, #2
 800c630:	f000 bf9a 	b.w	800d568 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2203      	movs	r2, #3
 800c638:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x82;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2282      	movs	r2, #130	; 0x82
 800c640:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2201      	movs	r2, #1
 800c648:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2203      	movs	r2, #3
 800c650:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c65a:	1d9a      	adds	r2, r3, #6
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c662:	2303      	movs	r3, #3
 800c664:	f000 bf80 	b.w	800d568 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2201      	movs	r2, #1
 800c66c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x82;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2282      	movs	r2, #130	; 0x82
 800c674:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2201      	movs	r2, #1
 800c67c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2203      	movs	r2, #3
 800c684:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c68e:	1d9a      	adds	r2, r3, #6
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c696:	2301      	movs	r3, #1
 800c698:	f000 bf66 	b.w	800d568 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	7d9a      	ldrb	r2, [r3, #22]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	7d5a      	ldrb	r2, [r3, #21]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	7d1a      	ldrb	r2, [r3, #20]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	7cda      	ldrb	r2, [r3, #19]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	7c9a      	ldrb	r2, [r3, #18]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	7b1b      	ldrb	r3, [r3, #12]
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	f040 80e2 	bne.w	800c8a0 <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	7e9b      	ldrb	r3, [r3, #26]
 800c6e0:	b29a      	uxth	r2, r3
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c6ee:	021b      	lsls	r3, r3, #8
 800c6f0:	b29a      	uxth	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c6fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c702:	b29a      	uxth	r2, r3
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f8b3 262e 	ldrh.w	r2, [r3, #1582]	; 0x62e
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	7edb      	ldrb	r3, [r3, #27]
 800c714:	b29b      	uxth	r3, r3
 800c716:	4313      	orrs	r3, r2
 800c718:	b29a      	uxth	r2, r3
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	7f1b      	ldrb	r3, [r3, #28]
 800c724:	b29a      	uxth	r2, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c732:	021b      	lsls	r3, r3, #8
 800c734:	b29a      	uxth	r2, r3
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c742:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c746:	b29a      	uxth	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	7f5b      	ldrb	r3, [r3, #29]
 800c758:	b29b      	uxth	r3, r3
 800c75a:	4313      	orrs	r3, r2
 800c75c:	b29a      	uxth	r2, r3
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800c770:	b29b      	uxth	r3, r3
 800c772:	429a      	cmp	r2, r3
 800c774:	d87a      	bhi.n	800c86c <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c77c:	461a      	mov	r2, r3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c784:	4413      	add	r3, r2
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	f892 262c 	ldrb.w	r2, [r2, #1580]	; 0x62c
 800c78c:	4293      	cmp	r3, r2
 800c78e:	dc53      	bgt.n	800c838 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800c790:	e029      	b.n	800c7e6 <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c798:	461a      	mov	r2, r3
 800c79a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c79c:	4413      	add	r3, r2
 800c79e:	005a      	lsls	r2, r3, #1
 800c7a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7a2:	005b      	lsls	r3, r3, #1
 800c7a4:	3309      	adds	r3, #9
 800c7a6:	6879      	ldr	r1, [r7, #4]
 800c7a8:	440a      	add	r2, r1
 800c7aa:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	4413      	add	r3, r2
 800c7b2:	460a      	mov	r2, r1
 800c7b4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c7be:	461a      	mov	r2, r3
 800c7c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7c2:	4413      	add	r3, r2
 800c7c4:	005b      	lsls	r3, r3, #1
 800c7c6:	1c5a      	adds	r2, r3, #1
 800c7c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7ca:	3305      	adds	r3, #5
 800c7cc:	005b      	lsls	r3, r3, #1
 800c7ce:	6879      	ldr	r1, [r7, #4]
 800c7d0:	440a      	add	r2, r1
 800c7d2:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	4413      	add	r3, r2
 800c7da:	460a      	mov	r2, r1
 800c7dc:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800c7e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	dbce      	blt.n	800c792 <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	005b      	lsls	r3, r3, #1
 800c7fe:	b2da      	uxtb	r2, r3
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x03;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2203      	movs	r2, #3
 800c80a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2201      	movs	r2, #1
 800c812:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c81c:	3303      	adds	r3, #3
 800c81e:	b2da      	uxtb	r2, r3
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c82c:	1d9a      	adds	r2, r3, #6
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c834:	f000 be98 	b.w	800d568 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2202      	movs	r2, #2
 800c83c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x83;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2283      	movs	r2, #131	; 0x83
 800c844:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2203      	movs	r2, #3
 800c854:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c85e:	1d9a      	adds	r2, r3, #6
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c866:	2302      	movs	r3, #2
 800c868:	f000 be7e 	b.w	800d568 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2203      	movs	r2, #3
 800c870:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x83;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2283      	movs	r2, #131	; 0x83
 800c878:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2201      	movs	r2, #1
 800c880:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2203      	movs	r2, #3
 800c888:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c892:	1d9a      	adds	r2, r3, #6
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c89a:	2303      	movs	r3, #3
 800c89c:	f000 be64 	b.w	800d568 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x83;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2283      	movs	r2, #131	; 0x83
 800c8ac:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2203      	movs	r2, #3
 800c8bc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c8c6:	1d9a      	adds	r2, r3, #6
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	f000 be4a 	b.w	800d568 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	7d9a      	ldrb	r2, [r3, #22]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	7d5a      	ldrb	r2, [r3, #21]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	7d1a      	ldrb	r2, [r3, #20]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	7cda      	ldrb	r2, [r3, #19]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	7c9a      	ldrb	r2, [r3, #18]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c906:	2300      	movs	r3, #0
 800c908:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	7b5b      	ldrb	r3, [r3, #13]
 800c90e:	2b01      	cmp	r3, #1
 800c910:	f040 80e2 	bne.w	800cad8 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	7e9b      	ldrb	r3, [r3, #26]
 800c918:	b29a      	uxth	r2, r3
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c926:	021b      	lsls	r3, r3, #8
 800c928:	b29a      	uxth	r2, r3
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c936:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c93a:	b29a      	uxth	r2, r3
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8b3 2634 	ldrh.w	r2, [r3, #1588]	; 0x634
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	7edb      	ldrb	r3, [r3, #27]
 800c94c:	b29b      	uxth	r3, r3
 800c94e:	4313      	orrs	r3, r2
 800c950:	b29a      	uxth	r2, r3
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	7f1b      	ldrb	r3, [r3, #28]
 800c95c:	b29a      	uxth	r2, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c96a:	021b      	lsls	r3, r3, #8
 800c96c:	b29a      	uxth	r2, r3
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c97a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c97e:	b29a      	uxth	r2, r3
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	7f5b      	ldrb	r3, [r3, #29]
 800c990:	b29b      	uxth	r3, r3
 800c992:	4313      	orrs	r3, r2
 800c994:	b29a      	uxth	r2, r3
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f893 3632 	ldrb.w	r3, [r3, #1586]	; 0x632
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d87a      	bhi.n	800caa4 <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c9bc:	4413      	add	r3, r2
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	f892 2632 	ldrb.w	r2, [r2, #1586]	; 0x632
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	dc53      	bgt.n	800ca70 <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c9c8:	e029      	b.n	800ca1e <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9d4:	4413      	add	r3, r2
 800c9d6:	005a      	lsls	r2, r3, #1
 800c9d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9da:	005b      	lsls	r3, r3, #1
 800c9dc:	3309      	adds	r3, #9
 800c9de:	6879      	ldr	r1, [r7, #4]
 800c9e0:	440a      	add	r2, r1
 800c9e2:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800c9e6:	687a      	ldr	r2, [r7, #4]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	460a      	mov	r2, r1
 800c9ec:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9fa:	4413      	add	r3, r2
 800c9fc:	005b      	lsls	r3, r3, #1
 800c9fe:	1c5a      	adds	r2, r3, #1
 800ca00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca02:	3305      	adds	r3, #5
 800ca04:	005b      	lsls	r3, r3, #1
 800ca06:	6879      	ldr	r1, [r7, #4]
 800ca08:	440a      	add	r2, r1
 800ca0a:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	4413      	add	r3, r2
 800ca12:	460a      	mov	r2, r1
 800ca14:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800ca18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800ca24:	461a      	mov	r2, r3
 800ca26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	dbce      	blt.n	800c9ca <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	005b      	lsls	r3, r3, #1
 800ca36:	b2da      	uxtb	r2, r3
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x04;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2204      	movs	r2, #4
 800ca42:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2201      	movs	r2, #1
 800ca4a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800ca54:	3303      	adds	r3, #3
 800ca56:	b2da      	uxtb	r2, r3
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ca64:	1d9a      	adds	r2, r3, #6
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800ca6c:	f000 bd7c 	b.w	800d568 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2202      	movs	r2, #2
 800ca74:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x84;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2284      	movs	r2, #132	; 0x84
 800ca7c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2201      	movs	r2, #1
 800ca84:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2203      	movs	r2, #3
 800ca8c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ca96:	1d9a      	adds	r2, r3, #6
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800ca9e:	2302      	movs	r3, #2
 800caa0:	f000 bd62 	b.w	800d568 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2203      	movs	r2, #3
 800caa8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x84;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2284      	movs	r2, #132	; 0x84
 800cab0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2201      	movs	r2, #1
 800cab8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2203      	movs	r2, #3
 800cac0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800caca:	1d9a      	adds	r2, r3, #6
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800cad2:	2303      	movs	r3, #3
 800cad4:	f000 bd48 	b.w	800d568 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2201      	movs	r2, #1
 800cadc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x84;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2284      	movs	r2, #132	; 0x84
 800cae4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2201      	movs	r2, #1
 800caec:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2203      	movs	r2, #3
 800caf4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cafe:	1d9a      	adds	r2, r3, #6
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800cb06:	2301      	movs	r3, #1
 800cb08:	f000 bd2e 	b.w	800d568 <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	7d9a      	ldrb	r2, [r3, #22]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	7d5a      	ldrb	r2, [r3, #21]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	7d1a      	ldrb	r2, [r3, #20]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	7cda      	ldrb	r2, [r3, #19]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	7c9a      	ldrb	r2, [r3, #18]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

								int qty_reg=0;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	7b9b      	ldrb	r3, [r3, #14]
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	f040 80d1 	bne.w	800ccee <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	7e9b      	ldrb	r3, [r3, #26]
 800cb50:	b29a      	uxth	r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800cb5e:	021b      	lsls	r3, r3, #8
 800cb60:	b29a      	uxth	r2, r3
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800cb6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cb72:	b29a      	uxth	r2, r3
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8b3 263a 	ldrh.w	r2, [r3, #1594]	; 0x63a
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	7edb      	ldrb	r3, [r3, #27]
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	4313      	orrs	r3, r2
 800cb88:	b29a      	uxth	r2, r3
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	7f1b      	ldrb	r3, [r3, #28]
 800cb94:	b29a      	uxth	r2, r3
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800cba2:	021b      	lsls	r3, r3, #8
 800cba4:	b29a      	uxth	r2, r3
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800cbb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8b3 263c 	ldrh.w	r2, [r3, #1596]	; 0x63c
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	7f5b      	ldrb	r3, [r3, #29]
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	b29a      	uxth	r2, r3
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f893 3638 	ldrb.w	r3, [r3, #1592]	; 0x638
 800cbda:	461a      	mov	r2, r3
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	dd69      	ble.n	800ccba <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d005      	beq.n	800cbfc <ModBUS+0xa60>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800cbf6:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800cbfa:	d144      	bne.n	800cc86 <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800cc02:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800cc06:	d10d      	bne.n	800cc24 <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	f8b2 263a 	ldrh.w	r2, [r2, #1594]	; 0x63a
 800cc14:	4611      	mov	r1, r2
 800cc16:	2201      	movs	r2, #1
 800cc18:	408a      	lsls	r2, r1
 800cc1a:	431a      	orrs	r2, r3
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800cc22:	e003      	b.n	800cc2c <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2200      	movs	r2, #0
 800cc28:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	7f5a      	ldrb	r2, [r3, #29]
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	7f1a      	ldrb	r2, [r3, #28]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	7eda      	ldrb	r2, [r3, #27]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	7e9a      	ldrb	r2, [r3, #26]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x05;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2205      	movs	r2, #5
 800cc58:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2201      	movs	r2, #1
 800cc60:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800cc6a:	3306      	adds	r3, #6
 800cc6c:	b2da      	uxtb	r2, r3
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cc7a:	1d9a      	adds	r2, r3, #6
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800cc82:	f000 bc71 	b.w	800d568 <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2202      	movs	r2, #2
 800cc8a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x85;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2285      	movs	r2, #133	; 0x85
 800cc92:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2201      	movs	r2, #1
 800cc9a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2203      	movs	r2, #3
 800cca2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ccac:	1d9a      	adds	r2, r3, #6
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
												return(2);//Error excepcion 02
 800ccb4:	2302      	movs	r3, #2
 800ccb6:	f000 bc57 	b.w	800d568 <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2203      	movs	r2, #3
 800ccbe:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
											m3->_MBUS_2SND[7]=0x85;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2285      	movs	r2, #133	; 0x85
 800ccc6:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2201      	movs	r2, #1
 800ccce:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2203      	movs	r2, #3
 800ccd6:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cce0:	1d9a      	adds	r2, r3, #6
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
											return(3);//Erroe excepcion 03
 800cce8:	2303      	movs	r3, #3
 800ccea:	f000 bc3d 	b.w	800d568 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x85;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2285      	movs	r2, #133	; 0x85
 800ccfa:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2201      	movs	r2, #1
 800cd02:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2203      	movs	r2, #3
 800cd0a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cd14:	1d9a      	adds	r2, r3, #6
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(1);//Error excepcion 01
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	f000 bc23 	b.w	800d568 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	7d9a      	ldrb	r2, [r3, #22]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	7d5a      	ldrb	r2, [r3, #21]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	7d1a      	ldrb	r2, [r3, #20]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	7cda      	ldrb	r2, [r3, #19]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	7c9a      	ldrb	r2, [r3, #18]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800cd54:	2300      	movs	r3, #0
 800cd56:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cd58:	2300      	movs	r3, #0
 800cd5a:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	7bdb      	ldrb	r3, [r3, #15]
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	f040 80a3 	bne.w	800ceac <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	7e9b      	ldrb	r3, [r3, #26]
 800cd6a:	b29a      	uxth	r2, r3
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800cd78:	021b      	lsls	r3, r3, #8
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800cd88:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cd8c:	b29a      	uxth	r2, r3
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	7edb      	ldrb	r3, [r3, #27]
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	4313      	orrs	r3, r2
 800cda2:	b29a      	uxth	r2, r3
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646

							start_address=m3->_06_WriteSingleRegister_Addr;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800cdb0:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	7f1b      	ldrb	r3, [r3, #28]
 800cdb6:	b29a      	uxth	r2, r3
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800cdc4:	021b      	lsls	r3, r3, #8
 800cdc6:	b29a      	uxth	r2, r3
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800cdd4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cdd8:	b29a      	uxth	r2, r3
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8b3 2648 	ldrh.w	r2, [r3, #1608]	; 0x648
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	7f5b      	ldrb	r3, [r3, #29]
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	4313      	orrs	r3, r2
 800cdee:	b29a      	uxth	r2, r3
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d838      	bhi.n	800ce7a <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800ce08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	7f11      	ldrb	r1, [r2, #28]
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	4413      	add	r3, r2
 800ce12:	460a      	mov	r2, r1
 800ce14:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800ce18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	7f51      	ldrb	r1, [r2, #29]
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	4413      	add	r3, r2
 800ce24:	460a      	mov	r2, r1
 800ce26:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	7f5a      	ldrb	r2, [r3, #29]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	7f1a      	ldrb	r2, [r3, #28]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	7eda      	ldrb	r2, [r3, #27]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	7e9a      	ldrb	r2, [r3, #26]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x06;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2206      	movs	r2, #6
 800ce56:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2206      	movs	r2, #6
 800ce66:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ce70:	1d9a      	adds	r2, r3, #6
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800ce78:	e376      	b.n	800d568 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2202      	movs	r2, #2
 800ce7e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x86;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2286      	movs	r2, #134	; 0x86
 800ce86:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2201      	movs	r2, #1
 800ce8e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2203      	movs	r2, #3
 800ce96:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cea0:	1d9a      	adds	r2, r3, #6
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800cea8:	2302      	movs	r3, #2
 800ceaa:	e35d      	b.n	800d568 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x86;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2286      	movs	r2, #134	; 0x86
 800ceb8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2201      	movs	r2, #1
 800cec0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2203      	movs	r2, #3
 800cec8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ced2:	1d9a      	adds	r2, r3, #6
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800ceda:	2301      	movs	r3, #1
 800cedc:	e344      	b.n	800d568 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	7d9a      	ldrb	r2, [r3, #22]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	7d5a      	ldrb	r2, [r3, #21]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	7d1a      	ldrb	r2, [r3, #20]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	7cda      	ldrb	r2, [r3, #19]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	7c9a      	ldrb	r2, [r3, #18]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800cf10:	2300      	movs	r3, #0
 800cf12:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	7c1b      	ldrb	r3, [r3, #16]
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	f040 810f 	bne.w	800d13c <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	7e9b      	ldrb	r3, [r3, #26]
 800cf22:	b29a      	uxth	r2, r3
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cf30:	021b      	lsls	r3, r3, #8
 800cf32:	b29a      	uxth	r2, r3
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cf40:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cf44:	b29a      	uxth	r2, r3
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8b3 2640 	ldrh.w	r2, [r3, #1600]	; 0x640
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	7edb      	ldrb	r3, [r3, #27]
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	b29a      	uxth	r2, r3
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	7f1b      	ldrb	r3, [r3, #28]
 800cf66:	b29a      	uxth	r2, r3
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cf74:	021b      	lsls	r3, r3, #8
 800cf76:	b29a      	uxth	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cf84:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cf88:	b29a      	uxth	r2, r3
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	7f5b      	ldrb	r3, [r3, #29]
 800cf9a:	b29b      	uxth	r3, r3
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	b29a      	uxth	r2, r3
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f893 363e 	ldrb.w	r3, [r3, #1598]	; 0x63e
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	f200 80a8 	bhi.w	800d10a <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cfc0:	461a      	mov	r2, r3
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cfc8:	4413      	add	r3, r2
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	f892 263e 	ldrb.w	r2, [r2, #1598]	; 0x63e
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	f300 8081 	bgt.w	800d0d8 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	657b      	str	r3, [r7, #84]	; 0x54
 800cfda:	2300      	movs	r3, #0
 800cfdc:	653b      	str	r3, [r7, #80]	; 0x50
 800cfde:	2300      	movs	r3, #0
 800cfe0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	7f9b      	ldrb	r3, [r3, #30]
 800cfea:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800cfec:	e00e      	b.n	800d00c <ModBUS+0xe70>
									{
										data=data<<8;
 800cfee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cff0:	021b      	lsls	r3, r3, #8
 800cff2:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800cff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cff6:	330c      	adds	r3, #12
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	4413      	add	r3, r2
 800cffc:	7c9b      	ldrb	r3, [r3, #18]
 800cffe:	461a      	mov	r2, r3
 800d000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d002:	4313      	orrs	r3, r2
 800d004:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800d006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d008:	3b01      	subs	r3, #1
 800d00a:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800d00c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d1ed      	bne.n	800cfee <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800d018:	461a      	mov	r2, r3
 800d01a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d01c:	4093      	lsls	r3, r2
 800d01e:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800d020:	e00f      	b.n	800d042 <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800d028:	461a      	mov	r2, r3
 800d02a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d02c:	4413      	add	r3, r2
 800d02e:	2201      	movs	r2, #1
 800d030:	fa02 f303 	lsl.w	r3, r2, r3
 800d034:	461a      	mov	r2, r3
 800d036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d038:	4313      	orrs	r3, r2
 800d03a:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800d03c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d03e:	3301      	adds	r3, #1
 800d040:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800d048:	461a      	mov	r2, r3
 800d04a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d3e8      	bcc.n	800d022 <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800d050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d052:	43db      	mvns	r3, r3
 800d054:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800d05c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d05e:	401a      	ands	r2, r3
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c


									data &= ~mascara;
 800d066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d068:	43db      	mvns	r3, r3
 800d06a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d06c:	4013      	ands	r3, r2
 800d06e:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800d076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d078:	431a      	orrs	r2, r3
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	7f5a      	ldrb	r2, [r3, #29]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	7f1a      	ldrb	r2, [r3, #28]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	7eda      	ldrb	r2, [r3, #27]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	7e9a      	ldrb	r2, [r3, #26]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x0F;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	220f      	movs	r2, #15
 800d0ac:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d0be:	3306      	adds	r3, #6
 800d0c0:	b2da      	uxtb	r2, r3
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d0ce:	1d9a      	adds	r2, r3, #6
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d0d6:	e247      	b.n	800d568 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2202      	movs	r2, #2
 800d0dc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x8F;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	228f      	movs	r2, #143	; 0x8f
 800d0e4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2203      	movs	r2, #3
 800d0f4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d0fe:	1d9a      	adds	r2, r3, #6
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800d106:	2302      	movs	r3, #2
 800d108:	e22e      	b.n	800d568 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2203      	movs	r2, #3
 800d10e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x8F;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	228f      	movs	r2, #143	; 0x8f
 800d116:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2201      	movs	r2, #1
 800d11e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2203      	movs	r2, #3
 800d126:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d130:	1d9a      	adds	r2, r3, #6
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800d138:	2303      	movs	r3, #3
 800d13a:	e215      	b.n	800d568 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2201      	movs	r2, #1
 800d140:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x8F;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	228f      	movs	r2, #143	; 0x8f
 800d148:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2201      	movs	r2, #1
 800d150:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2203      	movs	r2, #3
 800d158:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d162:	1d9a      	adds	r2, r3, #6
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d16a:	2301      	movs	r3, #1
 800d16c:	e1fc      	b.n	800d568 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	7d9a      	ldrb	r2, [r3, #22]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	7d5a      	ldrb	r2, [r3, #21]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	7d1a      	ldrb	r2, [r3, #20]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	7cda      	ldrb	r2, [r3, #19]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	7c9a      	ldrb	r2, [r3, #18]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	7c5b      	ldrb	r3, [r3, #17]
 800d1ae:	2b01      	cmp	r3, #1
 800d1b0:	f040 80eb 	bne.w	800d38a <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	7e9b      	ldrb	r3, [r3, #26]
 800d1b8:	b29a      	uxth	r2, r3
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800d1c6:	021b      	lsls	r3, r3, #8
 800d1c8:	b29a      	uxth	r2, r3
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800d1d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d1da:	b29a      	uxth	r2, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8b3 264c 	ldrh.w	r2, [r3, #1612]	; 0x64c
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	7edb      	ldrb	r3, [r3, #27]
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	4313      	orrs	r3, r2
 800d1f0:	b29a      	uxth	r2, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800d1fe:	005b      	lsls	r3, r3, #1
 800d200:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	7f1b      	ldrb	r3, [r3, #28]
 800d206:	b29a      	uxth	r2, r3
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800d214:	021b      	lsls	r3, r3, #8
 800d216:	b29a      	uxth	r2, r3
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800d224:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d228:	b29a      	uxth	r2, r3
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	7f5b      	ldrb	r3, [r3, #29]
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	4313      	orrs	r3, r2
 800d23e:	b29a      	uxth	r2, r3
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 800d252:	b29b      	uxth	r3, r3
 800d254:	429a      	cmp	r2, r3
 800d256:	d87f      	bhi.n	800d358 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800d25e:	461a      	mov	r2, r3
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800d266:	4413      	add	r3, r2
 800d268:	687a      	ldr	r2, [r7, #4]
 800d26a:	f892 264a 	ldrb.w	r2, [r2, #1610]	; 0x64a
 800d26e:	4293      	cmp	r3, r2
 800d270:	dc59      	bgt.n	800d326 <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800d272:	e029      	b.n	800d2c8 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800d274:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d278:	f103 020d 	add.w	r2, r3, #13
 800d27c:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800d27e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d282:	440b      	add	r3, r1
 800d284:	6879      	ldr	r1, [r7, #4]
 800d286:	440a      	add	r2, r1
 800d288:	7c91      	ldrb	r1, [r2, #18]
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	4413      	add	r3, r2
 800d28e:	460a      	mov	r2, r1
 800d290:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800d294:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d298:	3301      	adds	r3, #1
 800d29a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800d29e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d2a2:	f103 020d 	add.w	r2, r3, #13
 800d2a6:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800d2a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d2ac:	440b      	add	r3, r1
 800d2ae:	6879      	ldr	r1, [r7, #4]
 800d2b0:	440a      	add	r2, r1
 800d2b2:	7c91      	ldrb	r1, [r2, #18]
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	460a      	mov	r2, r1
 800d2ba:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										qty_reg++;
 800d2be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	7f9b      	ldrb	r3, [r3, #30]
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d3ce      	bcc.n	800d274 <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	7f5a      	ldrb	r2, [r3, #29]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	7f1a      	ldrb	r2, [r3, #28]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	7eda      	ldrb	r2, [r3, #27]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	7e9a      	ldrb	r2, [r3, #26]
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x10;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2210      	movs	r2, #16
 800d302:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2201      	movs	r2, #1
 800d30a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2206      	movs	r2, #6
 800d312:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d31c:	1d9a      	adds	r2, r3, #6
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d324:	e120      	b.n	800d568 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2202      	movs	r2, #2
 800d32a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x90;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2290      	movs	r2, #144	; 0x90
 800d332:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2201      	movs	r2, #1
 800d33a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2203      	movs	r2, #3
 800d342:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d34c:	1d9a      	adds	r2, r3, #6
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800d354:	2302      	movs	r3, #2
 800d356:	e107      	b.n	800d568 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2203      	movs	r2, #3
 800d35c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x90;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2290      	movs	r2, #144	; 0x90
 800d364:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2201      	movs	r2, #1
 800d36c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2203      	movs	r2, #3
 800d374:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d37e:	1d9a      	adds	r2, r3, #6
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800d386:	2303      	movs	r3, #3
 800d388:	e0ee      	b.n	800d568 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2201      	movs	r2, #1
 800d38e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x90;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2290      	movs	r2, #144	; 0x90
 800d396:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2201      	movs	r2, #1
 800d39e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2203      	movs	r2, #3
 800d3a6:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d3b0:	1d9a      	adds	r2, r3, #6
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	e0d5      	b.n	800d568 <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2201      	movs	r2, #1
 800d3c0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	7e5b      	ldrb	r3, [r3, #25]
 800d3c8:	3b80      	subs	r3, #128	; 0x80
 800d3ca:	b2da      	uxtb	r2, r3
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	7e1a      	ldrb	r2, [r3, #24]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
					m3->_MBUS_2SND[5]=0x03;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2203      	movs	r2, #3
 800d3e0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	7d9a      	ldrb	r2, [r3, #22]
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	7d5a      	ldrb	r2, [r3, #21]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	7d1a      	ldrb	r2, [r3, #20]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	7cda      	ldrb	r2, [r3, #19]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	7c9a      	ldrb	r2, [r3, #18]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d41c:	1d9a      	adds	r2, r3, #6
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
					return(1);
 800d424:	2301      	movs	r3, #1
 800d426:	e09f      	b.n	800d568 <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800d428:	2301      	movs	r3, #1
 800d42a:	e09d      	b.n	800d568 <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	791b      	ldrb	r3, [r3, #4]
 800d430:	2b00      	cmp	r3, #0
 800d432:	f040 8099 	bne.w	800d568 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f103 0212 	add.w	r2, r3, #18
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d442:	4619      	mov	r1, r3
 800d444:	4610      	mov	r0, r2
 800d446:	f7fe fda5 	bl	800bf94 <ModBUS_Check>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	f000 808b 	beq.w	800d568 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f7fe fdbd 	bl	800bfd2 <ModBUS_Check_tid>
 800d458:	4603      	mov	r3, r0
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d04f      	beq.n	800d4fe <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	7e5b      	ldrb	r3, [r3, #25]
 800d462:	2b03      	cmp	r3, #3
 800d464:	d143      	bne.n	800d4ee <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800d466:	2300      	movs	r3, #0
 800d468:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800d46a:	2300      	movs	r3, #0
 800d46c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d476:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800d478:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d47a:	021b      	lsls	r3, r3, #8
 800d47c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
 800d484:	b29a      	uxth	r2, r3
 800d486:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d488:	4313      	orrs	r3, r2
 800d48a:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 800d492:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800d496:	2300      	movs	r3, #0
 800d498:	643b      	str	r3, [r7, #64]	; 0x40
 800d49a:	e022      	b.n	800d4e2 <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800d49c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d49e:	005b      	lsls	r3, r3, #1
 800d4a0:	f103 0209 	add.w	r2, r3, #9
 800d4a4:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d4a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4a8:	440b      	add	r3, r1
 800d4aa:	005b      	lsls	r3, r3, #1
 800d4ac:	6879      	ldr	r1, [r7, #4]
 800d4ae:	440a      	add	r2, r1
 800d4b0:	7c91      	ldrb	r1, [r2, #18]
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	4413      	add	r3, r2
 800d4b6:	460a      	mov	r2, r1
 800d4b8:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800d4bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4be:	3305      	adds	r3, #5
 800d4c0:	005a      	lsls	r2, r3, #1
 800d4c2:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d4c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4c6:	440b      	add	r3, r1
 800d4c8:	005b      	lsls	r3, r3, #1
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	6879      	ldr	r1, [r7, #4]
 800d4ce:	440a      	add	r2, r1
 800d4d0:	7c91      	ldrb	r1, [r2, #18]
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	4413      	add	r3, r2
 800d4d6:	460a      	mov	r2, r1
 800d4d8:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
						for (int i=0;i< qty; i++)
 800d4dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4de:	3301      	adds	r3, #1
 800d4e0:	643b      	str	r3, [r7, #64]	; 0x40
 800d4e2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d4e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	dbd7      	blt.n	800d49c <ModBUS+0x1300>

						}


					}
					break;
 800d4ec:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	7ddb      	ldrb	r3, [r3, #23]
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	7e9b      	ldrb	r3, [r3, #26]
 800d4f8:	1ad3      	subs	r3, r2, r3
 800d4fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800d4fc:	e034      	b.n	800d568 <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	7e5b      	ldrb	r3, [r3, #25]
 800d502:	3b81      	subs	r3, #129	; 0x81
 800d504:	2b15      	cmp	r3, #21
 800d506:	d82f      	bhi.n	800d568 <ModBUS+0x13cc>
 800d508:	a201      	add	r2, pc, #4	; (adr r2, 800d510 <ModBUS+0x1374>)
 800d50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d50e:	bf00      	nop
 800d510:	0800d569 	.word	0x0800d569
 800d514:	0800d569 	.word	0x0800d569
 800d518:	0800d569 	.word	0x0800d569
 800d51c:	0800d569 	.word	0x0800d569
 800d520:	0800d569 	.word	0x0800d569
 800d524:	0800d569 	.word	0x0800d569
 800d528:	0800d569 	.word	0x0800d569
 800d52c:	0800d569 	.word	0x0800d569
 800d530:	0800d569 	.word	0x0800d569
 800d534:	0800d569 	.word	0x0800d569
 800d538:	0800d569 	.word	0x0800d569
 800d53c:	0800d569 	.word	0x0800d569
 800d540:	0800d569 	.word	0x0800d569
 800d544:	0800d569 	.word	0x0800d569
 800d548:	0800d569 	.word	0x0800d569
 800d54c:	0800d569 	.word	0x0800d569
 800d550:	0800d569 	.word	0x0800d569
 800d554:	0800d569 	.word	0x0800d569
 800d558:	0800d569 	.word	0x0800d569
 800d55c:	0800d569 	.word	0x0800d569
 800d560:	0800d569 	.word	0x0800d569
 800d564:	0800d569 	.word	0x0800d569
			}
		}
	}


}
 800d568:	4618      	mov	r0, r3
 800d56a:	3770      	adds	r7, #112	; 0x70
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <SPI_ETH>:

#include "ETH_W5100.h"


uint8_t  SPI_ETH(struct  W5100_SPI * x )
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af02      	add	r7, sp, #8
 800d576:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6858      	ldr	r0, [r3, #4]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	891b      	ldrh	r3, [r3, #8]
 800d580:	2200      	movs	r2, #0
 800d582:	4619      	mov	r1, r3
 800d584:	f7f5 fffc 	bl	8003580 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6818      	ldr	r0, [r3, #0]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f103 0114 	add.w	r1, r3, #20
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f103 0218 	add.w	r2, r3, #24
 800d598:	2364      	movs	r3, #100	; 0x64
 800d59a:	9300      	str	r3, [sp, #0]
 800d59c:	2304      	movs	r3, #4
 800d59e:	f7f6 fd04 	bl	8003faa <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6858      	ldr	r0, [r3, #4]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	891b      	ldrh	r3, [r3, #8]
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	f7f5 ffe7 	bl	8003580 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	7edb      	ldrb	r3, [r3, #27]
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3708      	adds	r7, #8
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}

0800d5be <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5100_SPI * x, uint8_t addrh, uint8_t addrl, uint8_t op, uint8_t * data, uint8_t lnght)
{
 800d5be:	b580      	push	{r7, lr}
 800d5c0:	b086      	sub	sp, #24
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
 800d5c6:	4608      	mov	r0, r1
 800d5c8:	4611      	mov	r1, r2
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	70fb      	strb	r3, [r7, #3]
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	70bb      	strb	r3, [r7, #2]
 800d5d4:	4613      	mov	r3, r2
 800d5d6:	707b      	strb	r3, [r7, #1]
 uint16_t res=0;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	82fb      	strh	r3, [r7, #22]

 x->TX[0]= op; //asigno lectura o escritura
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	787a      	ldrb	r2, [r7, #1]
 800d5e0:	751a      	strb	r2, [r3, #20]
 x->TX[1]= addrh;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	78fa      	ldrb	r2, [r7, #3]
 800d5e6:	755a      	strb	r2, [r3, #21]
 x->TX[2]= addrl;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	78ba      	ldrb	r2, [r7, #2]
 800d5ec:	759a      	strb	r2, [r3, #22]
 x->TX[3]=0x00;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	75da      	strb	r2, [r3, #23]
 if(op == SPI_WRITE)
 800d5f4:	787b      	ldrb	r3, [r7, #1]
 800d5f6:	2bf0      	cmp	r3, #240	; 0xf0
 800d5f8:	d11d      	bne.n	800d636 <SPI_ETH_REG+0x78>
 {
	 for(int i=0; i<(lnght); i++)
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	613b      	str	r3, [r7, #16]
 800d5fe:	e013      	b.n	800d628 <SPI_ETH_REG+0x6a>
	 {
		x->TX[3]=data[i];
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	6a3a      	ldr	r2, [r7, #32]
 800d604:	4413      	add	r3, r2
 800d606:	781a      	ldrb	r2, [r3, #0]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f7ff ffaf 	bl	800d570 <SPI_ETH>
 800d612:	4603      	mov	r3, r0
 800d614:	82fb      	strh	r3, [r7, #22]
		x->TX[2]++;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	7d9b      	ldrb	r3, [r3, #22]
 800d61a:	3301      	adds	r3, #1
 800d61c:	b2da      	uxtb	r2, r3
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	759a      	strb	r2, [r3, #22]
	 for(int i=0; i<(lnght); i++)
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	3301      	adds	r3, #1
 800d626:	613b      	str	r3, [r7, #16]
 800d628:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d62c:	693a      	ldr	r2, [r7, #16]
 800d62e:	429a      	cmp	r2, r3
 800d630:	dbe6      	blt.n	800d600 <SPI_ETH_REG+0x42>
	 }
	 return(res);
 800d632:	8afb      	ldrh	r3, [r7, #22]
 800d634:	e037      	b.n	800d6a6 <SPI_ETH_REG+0xe8>
 }
	 if(op == SPI_READ)
 800d636:	787b      	ldrb	r3, [r7, #1]
 800d638:	2b0f      	cmp	r3, #15
 800d63a:	d134      	bne.n	800d6a6 <SPI_ETH_REG+0xe8>
	 {
		 x->TX[3]=0x00;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2200      	movs	r2, #0
 800d640:	75da      	strb	r2, [r3, #23]
		 if (lnght==2)
 800d642:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d646:	2b02      	cmp	r3, #2
 800d648:	d120      	bne.n	800d68c <SPI_ETH_REG+0xce>
		{
		for(int i=0; i<(lnght); i++)
 800d64a:	2300      	movs	r3, #0
 800d64c:	60fb      	str	r3, [r7, #12]
 800d64e:	e016      	b.n	800d67e <SPI_ETH_REG+0xc0>
			{
			res|=SPI_ETH(x);
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f7ff ff8d 	bl	800d570 <SPI_ETH>
 800d656:	4603      	mov	r3, r0
 800d658:	b29a      	uxth	r2, r3
 800d65a:	8afb      	ldrh	r3, [r7, #22]
 800d65c:	4313      	orrs	r3, r2
 800d65e:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	7d9b      	ldrb	r3, [r3, #22]
 800d664:	3301      	adds	r3, #1
 800d666:	b2da      	uxtb	r2, r3
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	759a      	strb	r2, [r3, #22]
			if (i==0)res=res<<8;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d102      	bne.n	800d678 <SPI_ETH_REG+0xba>
 800d672:	8afb      	ldrh	r3, [r7, #22]
 800d674:	021b      	lsls	r3, r3, #8
 800d676:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	3301      	adds	r3, #1
 800d67c:	60fb      	str	r3, [r7, #12]
 800d67e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d682:	68fa      	ldr	r2, [r7, #12]
 800d684:	429a      	cmp	r2, r3
 800d686:	dbe3      	blt.n	800d650 <SPI_ETH_REG+0x92>
			}
		 return(res);
 800d688:	8afb      	ldrh	r3, [r7, #22]
 800d68a:	e00c      	b.n	800d6a6 <SPI_ETH_REG+0xe8>
		}else
		{
			res=SPI_ETH(x);
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f7ff ff6f 	bl	800d570 <SPI_ETH>
 800d692:	4603      	mov	r3, r0
 800d694:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	7d9b      	ldrb	r3, [r3, #22]
 800d69a:	3301      	adds	r3, #1
 800d69c:	b2da      	uxtb	r2, r3
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	759a      	strb	r2, [r3, #22]
			return(res);
 800d6a2:	8afb      	ldrh	r3, [r7, #22]
 800d6a4:	e7ff      	b.n	800d6a6 <SPI_ETH_REG+0xe8>
		}
 	 }
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3718      	adds	r7, #24
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5100_SPI * x, uint16_t addr, uint16_t  data)
{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b086      	sub	sp, #24
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
 800d6b6:	460b      	mov	r3, r1
 800d6b8:	807b      	strh	r3, [r7, #2]
 800d6ba:	4613      	mov	r3, r2
 800d6bc:	803b      	strh	r3, [r7, #0]
 uint16_t res=0;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	82fb      	strh	r3, [r7, #22]
 uint8_t num[2];

 x->TX[0]= SPI_WRITE; //asigno lectura o escritura
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	22f0      	movs	r2, #240	; 0xf0
 800d6c6:	751a      	strb	r2, [r3, #20]

 num[1] = data & 0x00FF ;
 800d6c8:	883b      	ldrh	r3, [r7, #0]
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	737b      	strb	r3, [r7, #13]
 num[0] = (data & 0xFF00)>>8 ;
 800d6ce:	883b      	ldrh	r3, [r7, #0]
 800d6d0:	0a1b      	lsrs	r3, r3, #8
 800d6d2:	b29b      	uxth	r3, r3
 800d6d4:	b2db      	uxtb	r3, r3
 800d6d6:	733b      	strb	r3, [r7, #12]

	 for(int i=0; i<(2); i++)
 800d6d8:	2300      	movs	r3, #0
 800d6da:	613b      	str	r3, [r7, #16]
 800d6dc:	e01b      	b.n	800d716 <SPI_ETH_WR_REG_16+0x68>
	 {
		x->TX[2]= addr & 0x00FF;
 800d6de:	887b      	ldrh	r3, [r7, #2]
 800d6e0:	b2da      	uxtb	r2, r3
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	759a      	strb	r2, [r3, #22]
		x->TX[1]=(addr & 0xFF00)>>8;
 800d6e6:	887b      	ldrh	r3, [r7, #2]
 800d6e8:	0a1b      	lsrs	r3, r3, #8
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	b2da      	uxtb	r2, r3
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	755a      	strb	r2, [r3, #21]
		addr++;
 800d6f2:	887b      	ldrh	r3, [r7, #2]
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	807b      	strh	r3, [r7, #2]
		x->TX[3]=num[i];
 800d6f8:	f107 020c 	add.w	r2, r7, #12
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	4413      	add	r3, r2
 800d700:	781a      	ldrb	r2, [r3, #0]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f7ff ff32 	bl	800d570 <SPI_ETH>
 800d70c:	4603      	mov	r3, r0
 800d70e:	82fb      	strh	r3, [r7, #22]
	 for(int i=0; i<(2); i++)
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	3301      	adds	r3, #1
 800d714:	613b      	str	r3, [r7, #16]
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	2b01      	cmp	r3, #1
 800d71a:	dde0      	ble.n	800d6de <SPI_ETH_WR_REG_16+0x30>
	 }
	 return(res);
 800d71c:	8afb      	ldrh	r3, [r7, #22]
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3718      	adds	r7, #24
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}

0800d726 <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800d726:	b590      	push	{r4, r7, lr}
 800d728:	b087      	sub	sp, #28
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	60f8      	str	r0, [r7, #12]
 800d72e:	607a      	str	r2, [r7, #4]
 800d730:	461a      	mov	r2, r3
 800d732:	460b      	mov	r3, r1
 800d734:	817b      	strh	r3, [r7, #10]
 800d736:	4613      	mov	r3, r2
 800d738:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0x0F; //read operation
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	220f      	movs	r2, #15
 800d73e:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800d740:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d746:	d226      	bcs.n	800d796 <SPI_ETH_RD_RCV_REG_16+0x70>
	{
			x->TX[3]=0x00;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	2200      	movs	r2, #0
 800d74c:	75da      	strb	r2, [r3, #23]
			for(int i=0; i<(lnght); i++)
 800d74e:	2300      	movs	r3, #0
 800d750:	617b      	str	r3, [r7, #20]
 800d752:	e01a      	b.n	800d78a <SPI_ETH_RD_RCV_REG_16+0x64>
				{
				x->TX[2] = addr & 0x00FF;
 800d754:	897b      	ldrh	r3, [r7, #10]
 800d756:	b2da      	uxtb	r2, r3
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800d75c:	897b      	ldrh	r3, [r7, #10]
 800d75e:	0a1b      	lsrs	r3, r3, #8
 800d760:	b29b      	uxth	r3, r3
 800d762:	b2da      	uxtb	r2, r3
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	755a      	strb	r2, [r3, #21]
				data[i+offset]=SPI_ETH(x);
 800d768:	893a      	ldrh	r2, [r7, #8]
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	4413      	add	r3, r2
 800d76e:	461a      	mov	r2, r3
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	189c      	adds	r4, r3, r2
 800d774:	68f8      	ldr	r0, [r7, #12]
 800d776:	f7ff fefb 	bl	800d570 <SPI_ETH>
 800d77a:	4603      	mov	r3, r0
 800d77c:	7023      	strb	r3, [r4, #0]
				addr++;
 800d77e:	897b      	ldrh	r3, [r7, #10]
 800d780:	3301      	adds	r3, #1
 800d782:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	3301      	adds	r3, #1
 800d788:	617b      	str	r3, [r7, #20]
 800d78a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d78c:	697a      	ldr	r2, [r7, #20]
 800d78e:	429a      	cmp	r2, r3
 800d790:	dbe0      	blt.n	800d754 <SPI_ETH_RD_RCV_REG_16+0x2e>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800d792:	2300      	movs	r3, #0
 800d794:	e000      	b.n	800d798 <SPI_ETH_RD_RCV_REG_16+0x72>
	}
	else
	{
	return(1);
 800d796:	2301      	movs	r3, #1
	}
}
 800d798:	4618      	mov	r0, r3
 800d79a:	371c      	adds	r7, #28
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd90      	pop	{r4, r7, pc}

0800d7a0 <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b086      	sub	sp, #24
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	60f8      	str	r0, [r7, #12]
 800d7a8:	607a      	str	r2, [r7, #4]
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	460b      	mov	r3, r1
 800d7ae:	817b      	strh	r3, [r7, #10]
 800d7b0:	4613      	mov	r3, r2
 800d7b2:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0xF0; //write operation
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	22f0      	movs	r2, #240	; 0xf0
 800d7b8:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800d7ba:	8c3b      	ldrh	r3, [r7, #32]
 800d7bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d7c0:	d223      	bcs.n	800d80a <SPI_ETH_WR_TX_REG_16+0x6a>
	{

			for(int i=0; i<(lnght); i++)
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	617b      	str	r3, [r7, #20]
 800d7c6:	e01a      	b.n	800d7fe <SPI_ETH_WR_TX_REG_16+0x5e>
				{
				x->TX[2] = addr & 0x00FF;
 800d7c8:	897b      	ldrh	r3, [r7, #10]
 800d7ca:	b2da      	uxtb	r2, r3
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800d7d0:	897b      	ldrh	r3, [r7, #10]
 800d7d2:	0a1b      	lsrs	r3, r3, #8
 800d7d4:	b29b      	uxth	r3, r3
 800d7d6:	b2da      	uxtb	r2, r3
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	755a      	strb	r2, [r3, #21]
				x->TX[3]= x->data[i+offset];
 800d7dc:	893a      	ldrh	r2, [r7, #8]
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	4413      	add	r3, r2
 800d7e2:	68fa      	ldr	r2, [r7, #12]
 800d7e4:	4413      	add	r3, r2
 800d7e6:	7f1a      	ldrb	r2, [r3, #28]
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	75da      	strb	r2, [r3, #23]
				SPI_ETH(x);
 800d7ec:	68f8      	ldr	r0, [r7, #12]
 800d7ee:	f7ff febf 	bl	800d570 <SPI_ETH>
				addr++;
 800d7f2:	897b      	ldrh	r3, [r7, #10]
 800d7f4:	3301      	adds	r3, #1
 800d7f6:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	617b      	str	r3, [r7, #20]
 800d7fe:	8c3b      	ldrh	r3, [r7, #32]
 800d800:	697a      	ldr	r2, [r7, #20]
 800d802:	429a      	cmp	r2, r3
 800d804:	dbe0      	blt.n	800d7c8 <SPI_ETH_WR_TX_REG_16+0x28>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800d806:	2300      	movs	r3, #0
 800d808:	e000      	b.n	800d80c <SPI_ETH_WR_TX_REG_16+0x6c>
	}
	else
	{
	return(1);
 800d80a:	2301      	movs	r3, #1
	}
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3718      	adds	r7, #24
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b082      	sub	sp, #8
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	460b      	mov	r3, r1
 800d81e:	70fb      	strb	r3, [r7, #3]
 800d820:	4613      	mov	r3, r2
 800d822:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	22f0      	movs	r2, #240	; 0xf0
 800d828:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_CR_ADDR_BASEH + s;
 800d82a:	78fb      	ldrb	r3, [r7, #3]
 800d82c:	3304      	adds	r3, #4
 800d82e:	b2da      	uxtb	r2, r3
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_CR_ADDR_BASEL ;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2201      	movs	r2, #1
 800d838:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	78ba      	ldrb	r2, [r7, #2]
 800d83e:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f7ff fe95 	bl	800d570 <SPI_ETH>
}
 800d846:	bf00      	nop
 800d848:	4618      	mov	r0, r3
 800d84a:	3708      	adds	r7, #8
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}

0800d850 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b082      	sub	sp, #8
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	460b      	mov	r3, r1
 800d85a:	70fb      	strb	r3, [r7, #3]
 800d85c:	4613      	mov	r3, r2
 800d85e:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	22f0      	movs	r2, #240	; 0xf0
 800d864:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_MR_ADDR_BASEH + s;
 800d866:	78fb      	ldrb	r3, [r7, #3]
 800d868:	3304      	adds	r3, #4
 800d86a:	b2da      	uxtb	r2, r3
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_MR_ADDR_BASEL ;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2200      	movs	r2, #0
 800d874:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	78ba      	ldrb	r2, [r7, #2]
 800d87a:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f7ff fe77 	bl	800d570 <SPI_ETH>
}
 800d882:	bf00      	nop
 800d884:	4618      	mov	r0, r3
 800d886:	3708      	adds	r7, #8
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <eth_init>:


uint8_t eth_init(struct W5100_SPI * ETH)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af02      	add	r7, sp, #8
 800d892:	6078      	str	r0, [r7, #4]
	 SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d89a:	331c      	adds	r3, #28
 800d89c:	2204      	movs	r2, #4
 800d89e:	9201      	str	r2, [sp, #4]
 800d8a0:	9300      	str	r3, [sp, #0]
 800d8a2:	23f0      	movs	r3, #240	; 0xf0
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	2100      	movs	r1, #0
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f7ff fe88 	bl	800d5be <SPI_ETH_REG>
	 // ITM0_Write("\r\nETH-W5100-GATEWAY SET\r\n",strlen("\r\nETH-W5100-GATEWAY SET\r\n"));									//same for server and client
	 SPI_ETH_REG(ETH, SUBR_ADDR_BASEH,SUBR_ADDR_BASEL,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d8b4:	2204      	movs	r2, #4
 800d8b6:	9201      	str	r2, [sp, #4]
 800d8b8:	9300      	str	r3, [sp, #0]
 800d8ba:	23f0      	movs	r3, #240	; 0xf0
 800d8bc:	2205      	movs	r2, #5
 800d8be:	2100      	movs	r1, #0
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f7ff fe7c 	bl	800d5be <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-SUBNET SET\r\n",strlen("\r\nETH-W5100-SUBNET SET"));											//same for server and client
	 SPI_ETH_REG(ETH, SHAR_ADDR_BASEH,SHAR_ADDR_BASEL,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d8cc:	3304      	adds	r3, #4
 800d8ce:	2206      	movs	r2, #6
 800d8d0:	9201      	str	r2, [sp, #4]
 800d8d2:	9300      	str	r3, [sp, #0]
 800d8d4:	23f0      	movs	r3, #240	; 0xf0
 800d8d6:	2209      	movs	r2, #9
 800d8d8:	2100      	movs	r1, #0
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f7ff fe6f 	bl	800d5be <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-MAC SET\r\n",strlen("\r\nETH-W5100-MAC SET"));												//same for server and client
	 SPI_ETH_REG(ETH, SIPR_ADDR_BASEH,SIPR_ADDR_BASEL,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d8e6:	330a      	adds	r3, #10
 800d8e8:	2204      	movs	r2, #4
 800d8ea:	9201      	str	r2, [sp, #4]
 800d8ec:	9300      	str	r3, [sp, #0]
 800d8ee:	23f0      	movs	r3, #240	; 0xf0
 800d8f0:	220f      	movs	r2, #15
 800d8f2:	2100      	movs	r1, #0
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f7ff fe62 	bl	800d5be <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-IP SET\r\n",strlen("\r\nETH-W5100-IP SET"));													//same for server and client
	 SPI_ETH_REG(ETH, RMSR_ADDR_BASEH,RMSR_ADDR_BASEL,SPI_WRITE, &ETH->RMSR,1);												//same for server and client
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d900:	330e      	adds	r3, #14
 800d902:	2201      	movs	r2, #1
 800d904:	9201      	str	r2, [sp, #4]
 800d906:	9300      	str	r3, [sp, #0]
 800d908:	23f0      	movs	r3, #240	; 0xf0
 800d90a:	221a      	movs	r2, #26
 800d90c:	2100      	movs	r1, #0
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f7ff fe55 	bl	800d5be <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n")); 	//same for server and client
	 SPI_ETH_REG(ETH, TMSR_ADDR_BASEH,TMSR_ADDR_BASEL,SPI_WRITE, &ETH->TMSR,1);												//same for server and client
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d91a:	330f      	adds	r3, #15
 800d91c:	2201      	movs	r2, #1
 800d91e:	9201      	str	r2, [sp, #4]
 800d920:	9300      	str	r3, [sp, #0]
 800d922:	23f0      	movs	r3, #240	; 0xf0
 800d924:	221b      	movs	r2, #27
 800d926:	2100      	movs	r1, #0
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f7ff fe48 	bl	800d5be <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n"));		//same for server and client

}
 800d92e:	bf00      	nop
 800d930:	4618      	mov	r0, r3
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <eth_socket_init>:

uint8_t eth_socket_init(struct W5100_SPI * ETH, uint8_t socket)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af02      	add	r7, sp, #8
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	460b      	mov	r3, r1
 800d942:	70fb      	strb	r3, [r7, #3]
	 eth_wr_SOCKET_MODE(ETH,socket, MODE_TCP);																				//same for server and client
 800d944:	78fb      	ldrb	r3, [r7, #3]
 800d946:	2201      	movs	r2, #1
 800d948:	4619      	mov	r1, r3
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f7ff ff80 	bl	800d850 <eth_wr_SOCKET_MODE>
	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP SET"));									//same for server and client
	 SPI_ETH_REG(ETH, S0_PORT_ADDR_BASELH,S0_PORT_ADDR_BASELL,SPI_WRITE, ETH->S0_PORT,2);									//same for server and client
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d956:	331a      	adds	r3, #26
 800d958:	2202      	movs	r2, #2
 800d95a:	9201      	str	r2, [sp, #4]
 800d95c:	9300      	str	r3, [sp, #0]
 800d95e:	23f0      	movs	r3, #240	; 0xf0
 800d960:	2204      	movs	r2, #4
 800d962:	2104      	movs	r1, #4
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f7ff fe2a 	bl	800d5be <SPI_ETH_REG>

	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
	 SPI_ETH_REG(ETH, 0x04,0x0C,SPI_WRITE, ETH->S0_DIPR,4);									// client
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d970:	331c      	adds	r3, #28
 800d972:	2204      	movs	r2, #4
 800d974:	9201      	str	r2, [sp, #4]
 800d976:	9300      	str	r3, [sp, #0]
 800d978:	23f0      	movs	r3, #240	; 0xf0
 800d97a:	220c      	movs	r2, #12
 800d97c:	2104      	movs	r1, #4
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f7ff fe1d 	bl	800d5be <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
	 SPI_ETH_REG(ETH, 0x04,0x10,SPI_WRITE, ETH->S0_DPORT,2);									// client
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d98a:	2202      	movs	r2, #2
 800d98c:	9201      	str	r2, [sp, #4]
 800d98e:	9300      	str	r3, [sp, #0]
 800d990:	23f0      	movs	r3, #240	; 0xf0
 800d992:	2210      	movs	r2, #16
 800d994:	2104      	movs	r1, #4
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f7ff fe11 	bl	800d5be <SPI_ETH_REG>


	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n"));						//same for server and client
	 eth_wr_SOCKET_CMD(ETH,socket, OPEN);																					//same for server and client
 800d99c:	78fb      	ldrb	r3, [r7, #3]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f7ff ff36 	bl	800d814 <eth_wr_SOCKET_CMD>
	 //ITM0_Write("\r\nETH-W5100-OPEN SOCKET\r\n",strlen("\r\nETH-W5100-OPEN SOCKET\r\n"));									//same for server and client

	 if(ETH->S0_ENserver == 1)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	d106      	bne.n	800d9c4 <eth_socket_init+0x8c>
	 {
		 eth_wr_SOCKET_CMD(ETH,socket, LISTEN);																				//only for server
 800d9b6:	78fb      	ldrb	r3, [r7, #3]
 800d9b8:	2202      	movs	r2, #2
 800d9ba:	4619      	mov	r1, r3
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f7ff ff29 	bl	800d814 <eth_wr_SOCKET_CMD>
 800d9c2:	e009      	b.n	800d9d8 <eth_socket_init+0xa0>
		 //ITM0_Write("\r\nETH-W5100-LISTEN SOCKET\r\n",strlen("\r\nETH-W5100-LISTEN SOCKET\r\n"));							//only for server
	 }
	 else
	 {

		 	 eth_wr_SOCKET_CMD(ETH,socket, CONNECT);																				//only for server
 800d9c4:	78fb      	ldrb	r3, [r7, #3]
 800d9c6:	2204      	movs	r2, #4
 800d9c8:	4619      	mov	r1, r3
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f7ff ff22 	bl	800d814 <eth_wr_SOCKET_CMD>
			 ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));											//only fir server
 800d9d0:	2115      	movs	r1, #21
 800d9d2:	4804      	ldr	r0, [pc, #16]	; (800d9e4 <eth_socket_init+0xac>)
 800d9d4:	f7f3 fe0e 	bl	80015f4 <ITM0_Write>
	 }
}
 800d9d8:	bf00      	nop
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3708      	adds	r7, #8
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	08010374 	.word	0x08010374

0800d9e8 <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5100_SPI * y, uint8_t socket)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b082      	sub	sp, #8
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	220f      	movs	r2, #15
 800d9f8:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_SR_ADDR_BASEH + socket;
 800d9fa:	78fb      	ldrb	r3, [r7, #3]
 800d9fc:	3304      	adds	r3, #4
 800d9fe:	b2da      	uxtb	r2, r3
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_SR_ADDR_BASEL ;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2203      	movs	r2, #3
 800da08:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2200      	movs	r2, #0
 800da0e:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f7ff fdad 	bl	800d570 <SPI_ETH>
	return(y->RX[3]);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	7edb      	ldrb	r3, [r3, #27]
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3708      	adds	r7, #8
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}

0800da22 <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5100_SPI * y, uint8_t socket)
{
 800da22:	b580      	push	{r7, lr}
 800da24:	b082      	sub	sp, #8
 800da26:	af00      	add	r7, sp, #0
 800da28:	6078      	str	r0, [r7, #4]
 800da2a:	460b      	mov	r3, r1
 800da2c:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	220f      	movs	r2, #15
 800da32:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_CR_ADDR_BASEH + socket;
 800da34:	78fb      	ldrb	r3, [r7, #3]
 800da36:	3304      	adds	r3, #4
 800da38:	b2da      	uxtb	r2, r3
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_CR_ADDR_BASEL ;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2201      	movs	r2, #1
 800da42:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2200      	movs	r2, #0
 800da48:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f7ff fd90 	bl	800d570 <SPI_ETH>
	return(y->RX[3]);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	7edb      	ldrb	r3, [r3, #27]
}
 800da54:	4618      	mov	r0, r3
 800da56:	3708      	adds	r7, #8
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b08c      	sub	sp, #48	; 0x30
 800da60:	af02      	add	r7, sp, #8
 800da62:	60f8      	str	r0, [r7, #12]
 800da64:	607a      	str	r2, [r7, #4]
 800da66:	461a      	mov	r2, r3
 800da68:	460b      	mov	r3, r1
 800da6a:	72fb      	strb	r3, [r7, #11]
 800da6c:	4613      	mov	r3, r2
 800da6e:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800da70:	2300      	movs	r3, #0
 800da72:	847b      	strh	r3, [r7, #34]	; 0x22
			 left_size=0,
 800da74:	2300      	movs	r3, #0
 800da76:	843b      	strh	r3, [r7, #32]
			 upper_size=0,
 800da78:	2300      	movs	r3, #0
 800da7a:	83fb      	strh	r3, [r7, #30]
			 destination_addr=0,
 800da7c:	2300      	movs	r3, #0
 800da7e:	83bb      	strh	r3, [r7, #28]
			 S0_RX_RD=0,
 800da80:	2300      	movs	r3, #0
 800da82:	837b      	strh	r3, [r7, #26]
			 S0_get_offset=0,
 800da84:	2300      	movs	r3, #0
 800da86:	833b      	strh	r3, [r7, #24]
			 S0_get_start_address=0,
 800da88:	2300      	movs	r3, #0
 800da8a:	82fb      	strh	r3, [r7, #22]
			 S0_mem_pointer=0,
 800da8c:	2300      	movs	r3, #0
 800da8e:	82bb      	strh	r3, [r7, #20]
			 RX_MASK=0,
 800da90:	2300      	movs	r3, #0
 800da92:	84fb      	strh	r3, [r7, #38]	; 0x26
			 RX_BASE=0;
 800da94:	2300      	movs	r3, #0
 800da96:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t spi_Data[2];

	switch (socket)
 800da98:	7afb      	ldrb	r3, [r7, #11]
 800da9a:	2b03      	cmp	r3, #3
 800da9c:	d83e      	bhi.n	800db1c <eth_rd_SOCKET_DATA+0xc0>
 800da9e:	a201      	add	r2, pc, #4	; (adr r2, 800daa4 <eth_rd_SOCKET_DATA+0x48>)
 800daa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa4:	0800dab5 	.word	0x0800dab5
 800daa8:	0800dacf 	.word	0x0800dacf
 800daac:	0800dae9 	.word	0x0800dae9
 800dab0:	0800db03 	.word	0x0800db03
	{
		case 0 :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800daba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dabe:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dac6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800daca:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800dacc:	e033      	b.n	800db36 <eth_rd_SOCKET_DATA+0xda>
		case 1 :
		{
			RX_MASK=ETH->gS1_RX_MASK;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dad4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800dad8:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS1_RX_BASE;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dae0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dae4:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800dae6:	e026      	b.n	800db36 <eth_rd_SOCKET_DATA+0xda>
		case 2 :
		{
			RX_MASK=ETH->gS2_RX_MASK;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800daee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800daf2:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS2_RX_BASE;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dafa:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800dafe:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800db00:	e019      	b.n	800db36 <eth_rd_SOCKET_DATA+0xda>
		case 3 :
		{
			RX_MASK=ETH->gS3_RX_MASK;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db08:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800db0c:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS3_RX_BASE;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800db18:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800db1a:	e00c      	b.n	800db36 <eth_rd_SOCKET_DATA+0xda>
		default :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db22:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800db26:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800db32:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800db34:	bf00      	nop
	}

	S0_RX_RD = SPI_ETH_REG(ETH, S0_RX_RD_ADDR_BASEHH + socket ,S0_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800db36:	7afb      	ldrb	r3, [r7, #11]
 800db38:	3304      	adds	r3, #4
 800db3a:	b2d9      	uxtb	r1, r3
 800db3c:	2302      	movs	r3, #2
 800db3e:	9301      	str	r3, [sp, #4]
 800db40:	f107 0310 	add.w	r3, r7, #16
 800db44:	9300      	str	r3, [sp, #0]
 800db46:	230f      	movs	r3, #15
 800db48:	2228      	movs	r2, #40	; 0x28
 800db4a:	68f8      	ldr	r0, [r7, #12]
 800db4c:	f7ff fd37 	bl	800d5be <SPI_ETH_REG>
 800db50:	4603      	mov	r3, r0
 800db52:	837b      	strh	r3, [r7, #26]
	S0_get_offset = S0_RX_RD & RX_MASK;
 800db54:	8b7a      	ldrh	r2, [r7, #26]
 800db56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800db58:	4013      	ands	r3, r2
 800db5a:	833b      	strh	r3, [r7, #24]
	S0_get_start_address  = RX_BASE + S0_get_offset;
 800db5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db5e:	8b3b      	ldrh	r3, [r7, #24]
 800db60:	4413      	add	r3, r2
 800db62:	82fb      	strh	r3, [r7, #22]
	if((S0_get_offset  + sizedata )>(RX_MASK + 1))
 800db64:	8b3a      	ldrh	r2, [r7, #24]
 800db66:	893b      	ldrh	r3, [r7, #8]
 800db68:	441a      	add	r2, r3
 800db6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800db6c:	3301      	adds	r3, #1
 800db6e:	429a      	cmp	r2, r3
 800db70:	dd2c      	ble.n	800dbcc <eth_rd_SOCKET_DATA+0x170>
		{
			upper_size = (RX_MASK + 1) - S0_get_offset ;
 800db72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800db74:	8b3b      	ldrh	r3, [r7, #24]
 800db76:	1ad3      	subs	r3, r2, r3
 800db78:	b29b      	uxth	r3, r3
 800db7a:	3301      	adds	r3, #1
 800db7c:	83fb      	strh	r3, [r7, #30]
			SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f103 021c 	add.w	r2, r3, #28
 800db84:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800db86:	8af9      	ldrh	r1, [r7, #22]
 800db88:	8bfb      	ldrh	r3, [r7, #30]
 800db8a:	9300      	str	r3, [sp, #0]
 800db8c:	4603      	mov	r3, r0
 800db8e:	68f8      	ldr	r0, [r7, #12]
 800db90:	f7ff fdc9 	bl	800d726 <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800db94:	8bba      	ldrh	r2, [r7, #28]
 800db96:	8bfb      	ldrh	r3, [r7, #30]
 800db98:	4413      	add	r3, r2
 800db9a:	83bb      	strh	r3, [r7, #28]
			left_size=sizedata-upper_size;
 800db9c:	893a      	ldrh	r2, [r7, #8]
 800db9e:	8bfb      	ldrh	r3, [r7, #30]
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	843b      	strh	r3, [r7, #32]
			S0_bf_rcv_offset=upper_size;
 800dba4:	8bfb      	ldrh	r3, [r7, #30]
 800dba6:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f103 021c 	add.w	r2, r3, #28
 800dbae:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800dbb0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800dbb2:	8c3b      	ldrh	r3, [r7, #32]
 800dbb4:	9300      	str	r3, [sp, #0]
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	68f8      	ldr	r0, [r7, #12]
 800dbba:	f7ff fdb4 	bl	800d726 <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S0_RX_RD + sizedata;
 800dbbe:	8b7a      	ldrh	r2, [r7, #26]
 800dbc0:	893b      	ldrh	r3, [r7, #8]
 800dbc2:	4413      	add	r3, r2
 800dbc4:	b29a      	uxth	r2, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	801a      	strh	r2, [r3, #0]
 800dbca:	e010      	b.n	800dbee <eth_rd_SOCKET_DATA+0x192>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, sizedata);
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f103 021c 	add.w	r2, r3, #28
 800dbd2:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800dbd4:	8af9      	ldrh	r1, [r7, #22]
 800dbd6:	893b      	ldrh	r3, [r7, #8]
 800dbd8:	9300      	str	r3, [sp, #0]
 800dbda:	4603      	mov	r3, r0
 800dbdc:	68f8      	ldr	r0, [r7, #12]
 800dbde:	f7ff fda2 	bl	800d726 <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S0_RX_RD + sizedata;
 800dbe2:	8b7a      	ldrh	r2, [r7, #26]
 800dbe4:	893b      	ldrh	r3, [r7, #8]
 800dbe6:	4413      	add	r3, r2
 800dbe8:	b29a      	uxth	r2, r3
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	b29b      	uxth	r3, r3
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3728      	adds	r7, #40	; 0x28
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop

0800dbfc <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b08c      	sub	sp, #48	; 0x30
 800dc00:	af02      	add	r7, sp, #8
 800dc02:	60f8      	str	r0, [r7, #12]
 800dc04:	607a      	str	r2, [r7, #4]
 800dc06:	461a      	mov	r2, r3
 800dc08:	460b      	mov	r3, r1
 800dc0a:	72fb      	strb	r3, [r7, #11]
 800dc0c:	4613      	mov	r3, r2
 800dc0e:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800dc10:	2300      	movs	r3, #0
 800dc12:	843b      	strh	r3, [r7, #32]
			 left_size=0,
 800dc14:	2300      	movs	r3, #0
 800dc16:	83fb      	strh	r3, [r7, #30]
			 upper_size=0,
 800dc18:	2300      	movs	r3, #0
 800dc1a:	83bb      	strh	r3, [r7, #28]
			 source_addr=0,
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	837b      	strh	r3, [r7, #26]
			 Sn_TX_WR=0,
 800dc20:	2300      	movs	r3, #0
 800dc22:	833b      	strh	r3, [r7, #24]
			 get_offset=0,
 800dc24:	2300      	movs	r3, #0
 800dc26:	82fb      	strh	r3, [r7, #22]
			 get_free_size=0,
 800dc28:	2300      	movs	r3, #0
 800dc2a:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	82bb      	strh	r3, [r7, #20]
			 S0_mem_pointer=0,
 800dc30:	2300      	movs	r3, #0
 800dc32:	827b      	strh	r3, [r7, #18]
			 TX_MASK=0,
 800dc34:	2300      	movs	r3, #0
 800dc36:	84bb      	strh	r3, [r7, #36]	; 0x24
			 TX_BASE=0;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t spi_Data[2];

	switch (socket)
 800dc3c:	7afb      	ldrb	r3, [r7, #11]
 800dc3e:	2b03      	cmp	r3, #3
 800dc40:	d83e      	bhi.n	800dcc0 <eth_wr_SOCKET_DATA+0xc4>
 800dc42:	a201      	add	r2, pc, #4	; (adr r2, 800dc48 <eth_wr_SOCKET_DATA+0x4c>)
 800dc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc48:	0800dc59 	.word	0x0800dc59
 800dc4c:	0800dc73 	.word	0x0800dc73
 800dc50:	0800dc8d 	.word	0x0800dc8d
 800dc54:	0800dca7 	.word	0x0800dca7
	{
		case 0 :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dc62:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dc6e:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800dc70:	e033      	b.n	800dcda <eth_wr_SOCKET_DATA+0xde>
		case 1 :
		{
			TX_MASK=ETH->gS1_TX_MASK;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dc7c:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS1_TX_BASE;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dc88:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800dc8a:	e026      	b.n	800dcda <eth_wr_SOCKET_DATA+0xde>
		case 2 :
		{
			TX_MASK=ETH->gS2_TX_MASK;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dc96:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS2_TX_BASE;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dca2:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800dca4:	e019      	b.n	800dcda <eth_wr_SOCKET_DATA+0xde>
		case 3 :
		{
			TX_MASK=ETH->gS3_TX_MASK;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcac:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dcb0:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS3_TX_BASE;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dcbc:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800dcbe:	e00c      	b.n	800dcda <eth_wr_SOCKET_DATA+0xde>
		default :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcc6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dcca:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dcd6:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800dcd8:	bf00      	nop
	}

	while(get_free_size<send_size)
 800dcda:	e00e      	b.n	800dcfa <eth_wr_SOCKET_DATA+0xfe>
			{
				get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S0_TX_FSR	=   0x420,
 800dcdc:	7afb      	ldrb	r3, [r7, #11]
 800dcde:	3304      	adds	r3, #4
 800dce0:	b2d9      	uxtb	r1, r3
 800dce2:	2302      	movs	r3, #2
 800dce4:	9301      	str	r3, [sp, #4]
 800dce6:	f107 0310 	add.w	r3, r7, #16
 800dcea:	9300      	str	r3, [sp, #0]
 800dcec:	230f      	movs	r3, #15
 800dcee:	2220      	movs	r2, #32
 800dcf0:	68f8      	ldr	r0, [r7, #12]
 800dcf2:	f7ff fc64 	bl	800d5be <SPI_ETH_REG>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800dcfa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dcfc:	893b      	ldrh	r3, [r7, #8]
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d3ec      	bcc.n	800dcdc <eth_wr_SOCKET_DATA+0xe0>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S0_TX_RD =   0x424,
 800dd02:	7afb      	ldrb	r3, [r7, #11]
 800dd04:	3304      	adds	r3, #4
 800dd06:	b2d9      	uxtb	r1, r3
 800dd08:	2302      	movs	r3, #2
 800dd0a:	9301      	str	r3, [sp, #4]
 800dd0c:	f107 0310 	add.w	r3, r7, #16
 800dd10:	9300      	str	r3, [sp, #0]
 800dd12:	230f      	movs	r3, #15
 800dd14:	2224      	movs	r2, #36	; 0x24
 800dd16:	68f8      	ldr	r0, [r7, #12]
 800dd18:	f7ff fc51 	bl	800d5be <SPI_ETH_REG>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	833b      	strh	r3, [r7, #24]
				get_offset= Sn_TX_WR & TX_MASK;
 800dd20:	8b3a      	ldrh	r2, [r7, #24]
 800dd22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd24:	4013      	ands	r3, r2
 800dd26:	82fb      	strh	r3, [r7, #22]
				get_start_address=TX_BASE + get_offset;
 800dd28:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dd2a:	8afb      	ldrh	r3, [r7, #22]
 800dd2c:	4413      	add	r3, r2
 800dd2e:	82bb      	strh	r3, [r7, #20]

				if((get_offset + send_size)>(TX_MASK + 1))
 800dd30:	8afa      	ldrh	r2, [r7, #22]
 800dd32:	893b      	ldrh	r3, [r7, #8]
 800dd34:	441a      	add	r2, r3
 800dd36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd38:	3301      	adds	r3, #1
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	dd2c      	ble.n	800dd98 <eth_wr_SOCKET_DATA+0x19c>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800dd3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dd40:	8afb      	ldrh	r3, [r7, #22]
 800dd42:	1ad3      	subs	r3, r2, r3
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	3301      	adds	r3, #1
 800dd48:	83bb      	strh	r3, [r7, #28]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	f103 021c 	add.w	r2, r3, #28
 800dd50:	8c38      	ldrh	r0, [r7, #32]
 800dd52:	8ab9      	ldrh	r1, [r7, #20]
 800dd54:	8bbb      	ldrh	r3, [r7, #28]
 800dd56:	9300      	str	r3, [sp, #0]
 800dd58:	4603      	mov	r3, r0
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	f7ff fd20 	bl	800d7a0 <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800dd60:	8b7a      	ldrh	r2, [r7, #26]
 800dd62:	8bbb      	ldrh	r3, [r7, #28]
 800dd64:	4413      	add	r3, r2
 800dd66:	837b      	strh	r3, [r7, #26]
						left_size=send_size-upper_size;
 800dd68:	893a      	ldrh	r2, [r7, #8]
 800dd6a:	8bbb      	ldrh	r3, [r7, #28]
 800dd6c:	1ad3      	subs	r3, r2, r3
 800dd6e:	83fb      	strh	r3, [r7, #30]
						S0_bf_rcv_offset=upper_size;
 800dd70:	8bbb      	ldrh	r3, [r7, #28]
 800dd72:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	f103 021c 	add.w	r2, r3, #28
 800dd7a:	8c38      	ldrh	r0, [r7, #32]
 800dd7c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800dd7e:	8bfb      	ldrh	r3, [r7, #30]
 800dd80:	9300      	str	r3, [sp, #0]
 800dd82:	4603      	mov	r3, r0
 800dd84:	68f8      	ldr	r0, [r7, #12]
 800dd86:	f7ff fd0b 	bl	800d7a0 <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800dd8a:	8b3a      	ldrh	r2, [r7, #24]
 800dd8c:	893b      	ldrh	r3, [r7, #8]
 800dd8e:	4413      	add	r3, r2
 800dd90:	b29a      	uxth	r2, r3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	801a      	strh	r2, [r3, #0]
 800dd96:	e010      	b.n	800ddba <eth_wr_SOCKET_DATA+0x1be>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, send_size);
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f103 021c 	add.w	r2, r3, #28
 800dd9e:	8c38      	ldrh	r0, [r7, #32]
 800dda0:	8ab9      	ldrh	r1, [r7, #20]
 800dda2:	893b      	ldrh	r3, [r7, #8]
 800dda4:	9300      	str	r3, [sp, #0]
 800dda6:	4603      	mov	r3, r0
 800dda8:	68f8      	ldr	r0, [r7, #12]
 800ddaa:	f7ff fcf9 	bl	800d7a0 <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800ddae:	8b3a      	ldrh	r2, [r7, #24]
 800ddb0:	893b      	ldrh	r3, [r7, #8]
 800ddb2:	4413      	add	r3, r2
 800ddb4:	b29a      	uxth	r2, r3
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	801a      	strh	r2, [r3, #0]
					}

}
 800ddba:	bf00      	nop
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3728      	adds	r7, #40	; 0x28
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int of, int tf)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b090      	sub	sp, #64	; 0x40
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	60b9      	str	r1, [r7, #8]
 800ddce:	607a      	str	r2, [r7, #4]
 800ddd0:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	63bb      	str	r3, [r7, #56]	; 0x38
 800ddda:	2300      	movs	r3, #0
 800dddc:	637b      	str	r3, [r7, #52]	; 0x34
 800ddde:	2300      	movs	r3, #0
 800dde0:	633b      	str	r3, [r7, #48]	; 0x30
 800dde2:	2300      	movs	r3, #0
 800dde4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dde6:	2300      	movs	r3, #0
 800dde8:	61fb      	str	r3, [r7, #28]
 800ddea:	2300      	movs	r3, #0
 800ddec:	61bb      	str	r3, [r7, #24]
 800ddee:	2300      	movs	r3, #0
 800ddf0:	62bb      	str	r3, [r7, #40]	; 0x28
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	627b      	str	r3, [r7, #36]	; 0x24
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	617b      	str	r3, [r7, #20]
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	623b      	str	r3, [r7, #32]
 800ddfe:	2300      	movs	r3, #0
 800de00:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	61fb      	str	r3, [r7, #28]
	lngb=*bn;
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	61bb      	str	r3, [r7, #24]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800de0e:	69fa      	ldr	r2, [r7, #28]
 800de10:	69bb      	ldr	r3, [r7, #24]
 800de12:	429a      	cmp	r2, r3
 800de14:	f2c0 8315 	blt.w	800e442 <FT_String_ND+0x67e>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800de18:	2300      	movs	r3, #0
 800de1a:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800de1c:	e00c      	b.n	800de38 <FT_String_ND+0x74>
							{
								n++;
 800de1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de20:	3301      	adds	r3, #1
 800de22:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800de24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800de26:	69bb      	ldr	r3, [r7, #24]
 800de28:	441a      	add	r2, r3
 800de2a:	69fb      	ldr	r3, [r7, #28]
 800de2c:	3301      	adds	r3, #1
 800de2e:	429a      	cmp	r2, r3
 800de30:	dd02      	ble.n	800de38 <FT_String_ND+0x74>
								{
									estado=0;
 800de32:	2300      	movs	r3, #0
 800de34:	623b      	str	r3, [r7, #32]
									break;
 800de36:	e009      	b.n	800de4c <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800de38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de3a:	68fa      	ldr	r2, [r7, #12]
 800de3c:	4413      	add	r3, r2
 800de3e:	781a      	ldrb	r2, [r3, #0]
 800de40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de42:	6879      	ldr	r1, [r7, #4]
 800de44:	440b      	add	r3, r1
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	429a      	cmp	r2, r3
 800de4a:	d1e8      	bne.n	800de1e <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800de4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de4e:	3301      	adds	r3, #1
 800de50:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800de52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de54:	3301      	adds	r3, #1
 800de56:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800de58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de5a:	69bb      	ldr	r3, [r7, #24]
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d108      	bne.n	800de72 <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800de60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800de62:	69bb      	ldr	r3, [r7, #24]
 800de64:	1ad3      	subs	r3, r2, r3
 800de66:	1c5a      	adds	r2, r3, #1
 800de68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de6a:	601a      	str	r2, [r3, #0]
									estado=1;
 800de6c:	2301      	movs	r3, #1
 800de6e:	623b      	str	r3, [r7, #32]
									break;
 800de70:	e010      	b.n	800de94 <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800de72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de74:	69bb      	ldr	r3, [r7, #24]
 800de76:	429a      	cmp	r2, r3
 800de78:	dd02      	ble.n	800de80 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800de7a:	2300      	movs	r3, #0
 800de7c:	623b      	str	r3, [r7, #32]
									 break;
 800de7e:	e009      	b.n	800de94 <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800de80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de82:	68fa      	ldr	r2, [r7, #12]
 800de84:	4413      	add	r3, r2
 800de86:	781a      	ldrb	r2, [r3, #0]
 800de88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de8a:	6879      	ldr	r1, [r7, #4]
 800de8c:	440b      	add	r3, r1
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	429a      	cmp	r2, r3
 800de92:	d0db      	beq.n	800de4c <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800de94:	69bb      	ldr	r3, [r7, #24]
 800de96:	1e5a      	subs	r2, r3, #1
 800de98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de9a:	4413      	add	r3, r2
 800de9c:	69fa      	ldr	r2, [r7, #28]
 800de9e:	429a      	cmp	r2, r3
 800dea0:	dd02      	ble.n	800dea8 <FT_String_ND+0xe4>
 800dea2:	6a3b      	ldr	r3, [r7, #32]
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d1b7      	bne.n	800de18 <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800dea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d101      	bne.n	800deb2 <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800deae:	6a3b      	ldr	r3, [r7, #32]
 800deb0:	e2c8      	b.n	800e444 <FT_String_ND+0x680>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800deb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800deb4:	2b01      	cmp	r3, #1
 800deb6:	d12c      	bne.n	800df12 <FT_String_ND+0x14e>
 800deb8:	6a3b      	ldr	r3, [r7, #32]
 800deba:	2b01      	cmp	r3, #1
 800debc:	d129      	bne.n	800df12 <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800debe:	e014      	b.n	800deea <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800dec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dec2:	681a      	ldr	r2, [r3, #0]
 800dec4:	69bb      	ldr	r3, [r7, #24]
 800dec6:	441a      	add	r2, r3
 800dec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deca:	4413      	add	r3, r2
 800decc:	3b01      	subs	r3, #1
 800dece:	68fa      	ldr	r2, [r7, #12]
 800ded0:	441a      	add	r2, r3
 800ded2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ded4:	6819      	ldr	r1, [r3, #0]
 800ded6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ded8:	440b      	add	r3, r1
 800deda:	3b01      	subs	r3, #1
 800dedc:	68f9      	ldr	r1, [r7, #12]
 800dede:	440b      	add	r3, r1
 800dee0:	7812      	ldrb	r2, [r2, #0]
 800dee2:	701a      	strb	r2, [r3, #0]
										n3++;
 800dee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dee6:	3301      	adds	r3, #1
 800dee8:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800deea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800deec:	681a      	ldr	r2, [r3, #0]
 800deee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800def0:	441a      	add	r2, r3
 800def2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800def4:	4413      	add	r3, r2
 800def6:	69fa      	ldr	r2, [r7, #28]
 800def8:	429a      	cmp	r2, r3
 800defa:	dae1      	bge.n	800dec0 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800defc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800defe:	681a      	ldr	r2, [r3, #0]
 800df00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df02:	4413      	add	r3, r2
 800df04:	1e5a      	subs	r2, r3, #1
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	601a      	str	r2, [r3, #0]
							estado=3;
 800df0a:	2303      	movs	r3, #3
 800df0c:	623b      	str	r3, [r7, #32]
							return(estado);
 800df0e:	6a3b      	ldr	r3, [r7, #32]
 800df10:	e298      	b.n	800e444 <FT_String_ND+0x680>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800df12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df14:	2b02      	cmp	r3, #2
 800df16:	f040 80be 	bne.w	800e096 <FT_String_ND+0x2d2>
 800df1a:	6a3b      	ldr	r3, [r7, #32]
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	f040 80ba 	bne.w	800e096 <FT_String_ND+0x2d2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800df22:	e012      	b.n	800df4a <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800df24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df26:	69bb      	ldr	r3, [r7, #24]
 800df28:	1ad2      	subs	r2, r2, r3
 800df2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df2c:	4413      	add	r3, r2
 800df2e:	461a      	mov	r2, r3
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	441a      	add	r2, r3
 800df34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df36:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800df38:	440b      	add	r3, r1
 800df3a:	7812      	ldrb	r2, [r2, #0]
 800df3c:	701a      	strb	r2, [r3, #0]
								n4++;
 800df3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df40:	3301      	adds	r3, #1
 800df42:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800df44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df48:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800df4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df4c:	69bb      	ldr	r3, [r7, #24]
 800df4e:	1ad2      	subs	r2, r2, r3
 800df50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df52:	4413      	add	r3, r2
 800df54:	69fa      	ldr	r2, [r7, #28]
 800df56:	429a      	cmp	r2, r3
 800df58:	dae4      	bge.n	800df24 <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800df5a:	499d      	ldr	r1, [pc, #628]	; (800e1d0 <FT_String_ND+0x40c>)
 800df5c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800df5e:	f000 fd89 	bl	800ea74 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800df62:	499c      	ldr	r1, [pc, #624]	; (800e1d4 <FT_String_ND+0x410>)
 800df64:	2000      	movs	r0, #0
 800df66:	f000 fd85 	bl	800ea74 <strtok>
 800df6a:	4603      	mov	r3, r0
 800df6c:	4618      	mov	r0, r3
 800df6e:	f000 fb66 	bl	800e63e <atoi>
 800df72:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800df74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df76:	3b01      	subs	r3, #1
 800df78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df7a:	429a      	cmp	r2, r3
 800df7c:	db02      	blt.n	800df84 <FT_String_ND+0x1c0>
							{
								lngd=of-1;
 800df7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df80:	3b01      	subs	r3, #1
 800df82:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800df84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df86:	3306      	adds	r3, #6
 800df88:	222c      	movs	r2, #44	; 0x2c
 800df8a:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800df8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df8e:	2b09      	cmp	r3, #9
 800df90:	dc0d      	bgt.n	800dfae <FT_String_ND+0x1ea>
											{
												c[8]=':';
 800df92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df94:	3308      	adds	r3, #8
 800df96:	223a      	movs	r2, #58	; 0x3a
 800df98:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800df9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9c:	3309      	adds	r3, #9
 800df9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dfa0:	4413      	add	r3, r2
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800dfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa8:	3309      	adds	r3, #9
 800dfaa:	627b      	str	r3, [r7, #36]	; 0x24
 800dfac:	e021      	b.n	800dff2 <FT_String_ND+0x22e>
											}
											else{
														if (lngd< 100)
 800dfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb0:	2b63      	cmp	r3, #99	; 0x63
 800dfb2:	dc0d      	bgt.n	800dfd0 <FT_String_ND+0x20c>
														{
															c[9]=':';
 800dfb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfb6:	3309      	adds	r3, #9
 800dfb8:	223a      	movs	r2, #58	; 0x3a
 800dfba:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800dfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfbe:	330a      	adds	r3, #10
 800dfc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dfc2:	4413      	add	r3, r2
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800dfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfca:	330a      	adds	r3, #10
 800dfcc:	627b      	str	r3, [r7, #36]	; 0x24
 800dfce:	e010      	b.n	800dff2 <FT_String_ND+0x22e>
														}
														else
														{
														if (lngd < 1000)
 800dfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dfd6:	da0c      	bge.n	800dff2 <FT_String_ND+0x22e>
														{
															c[10]=':';
 800dfd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfda:	330a      	adds	r3, #10
 800dfdc:	223a      	movs	r2, #58	; 0x3a
 800dfde:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800dfe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe2:	330b      	adds	r3, #11
 800dfe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dfe6:	4413      	add	r3, r2
 800dfe8:	2200      	movs	r2, #0
 800dfea:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800dfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfee:	330b      	adds	r3, #11
 800dff0:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800dff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dff6:	601a      	str	r2, [r3, #0]
							n4=0;
 800dff8:	2300      	movs	r3, #0
 800dffa:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800dffc:	e016      	b.n	800e02c <FT_String_ND+0x268>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800dffe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e000:	69bb      	ldr	r3, [r7, #24]
 800e002:	1ad2      	subs	r2, r2, r3
 800e004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e006:	441a      	add	r2, r3
 800e008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e00a:	4413      	add	r3, r2
 800e00c:	461a      	mov	r2, r3
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	441a      	add	r2, r3
 800e012:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e014:	69bb      	ldr	r3, [r7, #24]
 800e016:	1ac9      	subs	r1, r1, r3
 800e018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e01a:	440b      	add	r3, r1
 800e01c:	4619      	mov	r1, r3
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	440b      	add	r3, r1
 800e022:	7812      	ldrb	r2, [r2, #0]
 800e024:	701a      	strb	r2, [r3, #0]
								n4++;
 800e026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e028:	3301      	adds	r3, #1
 800e02a:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e02c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e02e:	69bb      	ldr	r3, [r7, #24]
 800e030:	1ad2      	subs	r2, r2, r3
 800e032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e034:	441a      	add	r2, r3
 800e036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e038:	4413      	add	r3, r2
 800e03a:	69fa      	ldr	r2, [r7, #28]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	dade      	bge.n	800dffe <FT_String_ND+0x23a>
							}
							*an=n+n4-lngb-1;
 800e040:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e044:	441a      	add	r2, r3
 800e046:	69bb      	ldr	r3, [r7, #24]
 800e048:	1ad3      	subs	r3, r2, r3
 800e04a:	1e5a      	subs	r2, r3, #1
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800e050:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e052:	69bb      	ldr	r3, [r7, #24]
 800e054:	1ad2      	subs	r2, r2, r3
 800e056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e058:	441a      	add	r2, r3
 800e05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05c:	4413      	add	r3, r2
 800e05e:	461a      	mov	r2, r3
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	4413      	add	r3, r2
 800e064:	2200      	movs	r2, #0
 800e066:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800e068:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e06a:	69bb      	ldr	r3, [r7, #24]
 800e06c:	1ad2      	subs	r2, r2, r3
 800e06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e070:	4413      	add	r3, r2
 800e072:	461a      	mov	r2, r3
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	4413      	add	r3, r2
 800e078:	2200      	movs	r2, #0
 800e07a:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800e07c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e07e:	69bb      	ldr	r3, [r7, #24]
 800e080:	1ad2      	subs	r2, r2, r3
 800e082:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e086:	440b      	add	r3, r1
 800e088:	429a      	cmp	r2, r3
 800e08a:	d102      	bne.n	800e092 <FT_String_ND+0x2ce>
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2200      	movs	r2, #0
 800e090:	701a      	strb	r2, [r3, #0]
							estado=3;
 800e092:	2303      	movs	r3, #3
 800e094:	623b      	str	r3, [r7, #32]

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800e096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e098:	2b03      	cmp	r3, #3
 800e09a:	d146      	bne.n	800e12a <FT_String_ND+0x366>
 800e09c:	6a3b      	ldr	r3, [r7, #32]
 800e09e:	2b01      	cmp	r3, #1
 800e0a0:	d143      	bne.n	800e12a <FT_String_ND+0x366>
						{
						n3=0;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e0a6:	e00e      	b.n	800e0c6 <FT_String_ND+0x302>
									{
										c[n3]=a[*ubicacion+n3-1];
 800e0a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0ae:	4413      	add	r3, r2
 800e0b0:	3b01      	subs	r3, #1
 800e0b2:	68fa      	ldr	r2, [r7, #12]
 800e0b4:	441a      	add	r2, r3
 800e0b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e0ba:	440b      	add	r3, r1
 800e0bc:	7812      	ldrb	r2, [r2, #0]
 800e0be:	701a      	strb	r2, [r3, #0]
										n3++;
 800e0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e0c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0c8:	69bb      	ldr	r3, [r7, #24]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	dbec      	blt.n	800e0a8 <FT_String_ND+0x2e4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e0d2:	e014      	b.n	800e0fe <FT_String_ND+0x33a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800e0d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0d6:	681a      	ldr	r2, [r3, #0]
 800e0d8:	69bb      	ldr	r3, [r7, #24]
 800e0da:	441a      	add	r2, r3
 800e0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0de:	4413      	add	r3, r2
 800e0e0:	3b01      	subs	r3, #1
 800e0e2:	68fa      	ldr	r2, [r7, #12]
 800e0e4:	441a      	add	r2, r3
 800e0e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0e8:	6819      	ldr	r1, [r3, #0]
 800e0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ec:	440b      	add	r3, r1
 800e0ee:	3b01      	subs	r3, #1
 800e0f0:	68f9      	ldr	r1, [r7, #12]
 800e0f2:	440b      	add	r3, r1
 800e0f4:	7812      	ldrb	r2, [r2, #0]
 800e0f6:	701a      	strb	r2, [r3, #0]
										n5++;
 800e0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e0fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	69bb      	ldr	r3, [r7, #24]
 800e104:	441a      	add	r2, r3
 800e106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e108:	441a      	add	r2, r3
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	429a      	cmp	r2, r3
 800e110:	dde0      	ble.n	800e0d4 <FT_String_ND+0x310>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800e112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e114:	681a      	ldr	r2, [r3, #0]
 800e116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e118:	4413      	add	r3, r2
 800e11a:	1e5a      	subs	r2, r3, #1
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800e120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e124:	601a      	str	r2, [r3, #0]
							estado=3;
 800e126:	2303      	movs	r3, #3
 800e128:	623b      	str	r3, [r7, #32]
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800e12a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e12c:	2b04      	cmp	r3, #4
 800e12e:	f040 80bd 	bne.w	800e2ac <FT_String_ND+0x4e8>
 800e132:	6a3b      	ldr	r3, [r7, #32]
 800e134:	2b01      	cmp	r3, #1
 800e136:	f040 80b9 	bne.w	800e2ac <FT_String_ND+0x4e8>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e13a:	e012      	b.n	800e162 <FT_String_ND+0x39e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e13c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e13e:	69bb      	ldr	r3, [r7, #24]
 800e140:	1ad2      	subs	r2, r2, r3
 800e142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e144:	4413      	add	r3, r2
 800e146:	461a      	mov	r2, r3
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	441a      	add	r2, r3
 800e14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e14e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e150:	440b      	add	r3, r1
 800e152:	7812      	ldrb	r2, [r2, #0]
 800e154:	701a      	strb	r2, [r3, #0]
								n4++;
 800e156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e158:	3301      	adds	r3, #1
 800e15a:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XX:
 800e15c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e15e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e160:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e162:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e164:	69bb      	ldr	r3, [r7, #24]
 800e166:	1ad2      	subs	r2, r2, r3
 800e168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e16a:	4413      	add	r3, r2
 800e16c:	69fa      	ldr	r2, [r7, #28]
 800e16e:	429a      	cmp	r2, r3
 800e170:	dae4      	bge.n	800e13c <FT_String_ND+0x378>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800e172:	4917      	ldr	r1, [pc, #92]	; (800e1d0 <FT_String_ND+0x40c>)
 800e174:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e176:	f000 fc7d 	bl	800ea74 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800e17a:	4916      	ldr	r1, [pc, #88]	; (800e1d4 <FT_String_ND+0x410>)
 800e17c:	2000      	movs	r0, #0
 800e17e:	f000 fc79 	bl	800ea74 <strtok>
 800e182:	4603      	mov	r3, r0
 800e184:	4618      	mov	r0, r3
 800e186:	f000 fa5a 	bl	800e63e <atoi>
 800e18a:	62b8      	str	r0, [r7, #40]	; 0x28

							if(lngd>=of-1)//if(lngd>=of-1)
 800e18c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e18e:	3b01      	subs	r3, #1
 800e190:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e192:	429a      	cmp	r2, r3
 800e194:	db02      	blt.n	800e19c <FT_String_ND+0x3d8>
							{
								lngd=of-1;
 800e196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e198:	3b01      	subs	r3, #1
 800e19a:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800e19c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e19e:	3306      	adds	r3, #6
 800e1a0:	222c      	movs	r2, #44	; 0x2c
 800e1a2:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a6:	2b09      	cmp	r3, #9
 800e1a8:	dc07      	bgt.n	800e1ba <FT_String_ND+0x3f6>
											{
												c[8]=':';
 800e1aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1ac:	3308      	adds	r3, #8
 800e1ae:	223a      	movs	r2, #58	; 0x3a
 800e1b0:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800e1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b4:	3309      	adds	r3, #9
 800e1b6:	627b      	str	r3, [r7, #36]	; 0x24
 800e1b8:	e019      	b.n	800e1ee <FT_String_ND+0x42a>
											}
											else{
														if (lngd< 100)
 800e1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1bc:	2b63      	cmp	r3, #99	; 0x63
 800e1be:	dc0b      	bgt.n	800e1d8 <FT_String_ND+0x414>
														{
															c[9]=':';
 800e1c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1c2:	3309      	adds	r3, #9
 800e1c4:	223a      	movs	r2, #58	; 0x3a
 800e1c6:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800e1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ca:	330a      	adds	r3, #10
 800e1cc:	627b      	str	r3, [r7, #36]	; 0x24
 800e1ce:	e00e      	b.n	800e1ee <FT_String_ND+0x42a>
 800e1d0:	0801038c 	.word	0x0801038c
 800e1d4:	08010390 	.word	0x08010390
														}
														else
														{
														if (lngd < 1000)
 800e1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e1de:	da06      	bge.n	800e1ee <FT_String_ND+0x42a>
														{
															c[10]=':';
 800e1e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1e2:	330a      	adds	r3, #10
 800e1e4:	223a      	movs	r2, #58	; 0x3a
 800e1e6:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800e1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ea:	330b      	adds	r3, #11
 800e1ec:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800e1ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1f2:	601a      	str	r2, [r3, #0]
							n4=0;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e1f8:	e016      	b.n	800e228 <FT_String_ND+0x464>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e1fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e1fc:	69bb      	ldr	r3, [r7, #24]
 800e1fe:	1ad2      	subs	r2, r2, r3
 800e200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e202:	441a      	add	r2, r3
 800e204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e206:	4413      	add	r3, r2
 800e208:	461a      	mov	r2, r3
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	441a      	add	r2, r3
 800e20e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e210:	69bb      	ldr	r3, [r7, #24]
 800e212:	1ac9      	subs	r1, r1, r3
 800e214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e216:	440b      	add	r3, r1
 800e218:	4619      	mov	r1, r3
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	440b      	add	r3, r1
 800e21e:	7812      	ldrb	r2, [r2, #0]
 800e220:	701a      	strb	r2, [r3, #0]
								n4++;
 800e222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e224:	3301      	adds	r3, #1
 800e226:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e228:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e22a:	69bb      	ldr	r3, [r7, #24]
 800e22c:	1ad2      	subs	r2, r2, r3
 800e22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e230:	441a      	add	r2, r3
 800e232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e234:	4413      	add	r3, r2
 800e236:	69fa      	ldr	r2, [r7, #28]
 800e238:	429a      	cmp	r2, r3
 800e23a:	dade      	bge.n	800e1fa <FT_String_ND+0x436>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800e23c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e240:	441a      	add	r2, r3
 800e242:	69bb      	ldr	r3, [r7, #24]
 800e244:	1ad3      	subs	r3, r2, r3
 800e246:	1e5a      	subs	r2, r3, #1
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	601a      	str	r2, [r3, #0]
							n5=0;
 800e24c:	2300      	movs	r3, #0
 800e24e:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e250:	e00f      	b.n	800e272 <FT_String_ND+0x4ae>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800e252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e256:	1ad2      	subs	r2, r2, r3
 800e258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25a:	4413      	add	r3, r2
 800e25c:	461a      	mov	r2, r3
 800e25e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e260:	441a      	add	r2, r3
 800e262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e264:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e266:	440b      	add	r3, r1
 800e268:	7812      	ldrb	r2, [r2, #0]
 800e26a:	701a      	strb	r2, [r3, #0]
								n5++;
 800e26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26e:	3301      	adds	r3, #1
 800e270:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e276:	1ad2      	subs	r2, r2, r3
 800e278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e27a:	441a      	add	r2, r3
 800e27c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	429a      	cmp	r2, r3
 800e282:	dbe6      	blt.n	800e252 <FT_String_ND+0x48e>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800e284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e288:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800e28a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e28c:	681a      	ldr	r2, [r3, #0]
 800e28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e290:	441a      	add	r2, r3
 800e292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e294:	1ad2      	subs	r2, r2, r3
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	4413      	add	r3, r2
 800e29c:	69fa      	ldr	r2, [r7, #28]
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d102      	bne.n	800e2a8 <FT_String_ND+0x4e4>
							{
								estado=4;
 800e2a2:	2304      	movs	r3, #4
 800e2a4:	623b      	str	r3, [r7, #32]
 800e2a6:	e001      	b.n	800e2ac <FT_String_ND+0x4e8>

							}
							else
							{
								estado=5;
 800e2a8:	2305      	movs	r3, #5
 800e2aa:	623b      	str	r3, [r7, #32]
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800e2ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e2ae:	2b05      	cmp	r3, #5
 800e2b0:	f040 80c5 	bne.w	800e43e <FT_String_ND+0x67a>
 800e2b4:	6a3b      	ldr	r3, [r7, #32]
 800e2b6:	2b01      	cmp	r3, #1
 800e2b8:	f040 80c1 	bne.w	800e43e <FT_String_ND+0x67a>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e2bc:	e012      	b.n	800e2e4 <FT_String_ND+0x520>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e2be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e2c0:	69bb      	ldr	r3, [r7, #24]
 800e2c2:	1ad2      	subs	r2, r2, r3
 800e2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c6:	4413      	add	r3, r2
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	441a      	add	r2, r3
 800e2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e2d2:	440b      	add	r3, r1
 800e2d4:	7812      	ldrb	r2, [r2, #0]
 800e2d6:	701a      	strb	r2, [r3, #0]
								n4++;
 800e2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2da:	3301      	adds	r3, #1
 800e2dc:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800e2de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2e2:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e2e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e2e6:	69bb      	ldr	r3, [r7, #24]
 800e2e8:	1ad2      	subs	r2, r2, r3
 800e2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ec:	4413      	add	r3, r2
 800e2ee:	69fa      	ldr	r2, [r7, #28]
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	dae4      	bge.n	800e2be <FT_String_ND+0x4fa>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800e2f4:	4955      	ldr	r1, [pc, #340]	; (800e44c <FT_String_ND+0x688>)
 800e2f6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e2f8:	f000 fbbc 	bl	800ea74 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800e2fc:	4954      	ldr	r1, [pc, #336]	; (800e450 <FT_String_ND+0x68c>)
 800e2fe:	2000      	movs	r0, #0
 800e300:	f000 fbb8 	bl	800ea74 <strtok>
 800e304:	4603      	mov	r3, r0
 800e306:	4618      	mov	r0, r3
 800e308:	f000 f999 	bl	800e63e <atoi>
 800e30c:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800e30e:	4950      	ldr	r1, [pc, #320]	; (800e450 <FT_String_ND+0x68c>)
 800e310:	2000      	movs	r0, #0
 800e312:	f000 fbaf 	bl	800ea74 <strtok>
 800e316:	4603      	mov	r3, r0
 800e318:	4618      	mov	r0, r3
 800e31a:	f000 f990 	bl	800e63e <atoi>
 800e31e:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800e320:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e322:	3b01      	subs	r3, #1
 800e324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e326:	429a      	cmp	r2, r3
 800e328:	db02      	blt.n	800e330 <FT_String_ND+0x56c>
							{
								lngd=of-1;
 800e32a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e32c:	3b01      	subs	r3, #1
 800e32e:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800e330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e332:	3306      	adds	r3, #6
 800e334:	222c      	movs	r2, #44	; 0x2c
 800e336:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e33a:	2b09      	cmp	r3, #9
 800e33c:	dc07      	bgt.n	800e34e <FT_String_ND+0x58a>
											{
												c[10]=':';
 800e33e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e340:	330a      	adds	r3, #10
 800e342:	223a      	movs	r2, #58	; 0x3a
 800e344:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800e346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e348:	330b      	adds	r3, #11
 800e34a:	627b      	str	r3, [r7, #36]	; 0x24
 800e34c:	e015      	b.n	800e37a <FT_String_ND+0x5b6>
											}
											else{
														if (lngd< 100)
 800e34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e350:	2b63      	cmp	r3, #99	; 0x63
 800e352:	dc07      	bgt.n	800e364 <FT_String_ND+0x5a0>
														{
															c[11]=':';
 800e354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e356:	330b      	adds	r3, #11
 800e358:	223a      	movs	r2, #58	; 0x3a
 800e35a:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800e35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35e:	330c      	adds	r3, #12
 800e360:	627b      	str	r3, [r7, #36]	; 0x24
 800e362:	e00a      	b.n	800e37a <FT_String_ND+0x5b6>
														}
														else
														{
														if (lngd < 1000)
 800e364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e366:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e36a:	da06      	bge.n	800e37a <FT_String_ND+0x5b6>
														{
															c[12]=':';
 800e36c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e36e:	330c      	adds	r3, #12
 800e370:	223a      	movs	r2, #58	; 0x3a
 800e372:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800e374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e376:	330d      	adds	r3, #13
 800e378:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800e37a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e37c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e37e:	601a      	str	r2, [r3, #0]
							n4=0;
 800e380:	2300      	movs	r3, #0
 800e382:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e384:	e016      	b.n	800e3b4 <FT_String_ND+0x5f0>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e386:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e388:	69bb      	ldr	r3, [r7, #24]
 800e38a:	1ad2      	subs	r2, r2, r3
 800e38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38e:	441a      	add	r2, r3
 800e390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e392:	4413      	add	r3, r2
 800e394:	461a      	mov	r2, r3
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	441a      	add	r2, r3
 800e39a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e39c:	69bb      	ldr	r3, [r7, #24]
 800e39e:	1ac9      	subs	r1, r1, r3
 800e3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a2:	440b      	add	r3, r1
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	440b      	add	r3, r1
 800e3aa:	7812      	ldrb	r2, [r2, #0]
 800e3ac:	701a      	strb	r2, [r3, #0]
								n4++;
 800e3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e3b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e3b6:	69bb      	ldr	r3, [r7, #24]
 800e3b8:	1ad2      	subs	r2, r2, r3
 800e3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3bc:	441a      	add	r2, r3
 800e3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c0:	4413      	add	r3, r2
 800e3c2:	69fa      	ldr	r2, [r7, #28]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	dade      	bge.n	800e386 <FT_String_ND+0x5c2>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800e3c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3cc:	441a      	add	r2, r3
 800e3ce:	69bb      	ldr	r3, [r7, #24]
 800e3d0:	1ad3      	subs	r3, r2, r3
 800e3d2:	1e5a      	subs	r2, r3, #1
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	601a      	str	r2, [r3, #0]
							n5=0;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e3dc:	e00f      	b.n	800e3fe <FT_String_ND+0x63a>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800e3de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e2:	1ad2      	subs	r2, r2, r3
 800e3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e6:	4413      	add	r3, r2
 800e3e8:	461a      	mov	r2, r3
 800e3ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3ec:	441a      	add	r2, r3
 800e3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e3f2:	440b      	add	r3, r1
 800e3f4:	7812      	ldrb	r2, [r2, #0]
 800e3f6:	701a      	strb	r2, [r3, #0]
								n5++;
 800e3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e3fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e402:	1ad2      	subs	r2, r2, r3
 800e404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e406:	441a      	add	r2, r3
 800e408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	429a      	cmp	r2, r3
 800e40e:	dbe6      	blt.n	800e3de <FT_String_ND+0x61a>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800e410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e414:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800e416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e418:	681a      	ldr	r2, [r3, #0]
 800e41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41c:	441a      	add	r2, r3
 800e41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e420:	1ad2      	subs	r2, r2, r3
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	4413      	add	r3, r2
 800e428:	69fa      	ldr	r2, [r7, #28]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d105      	bne.n	800e43a <FT_String_ND+0x676>
							{
								estado=4;
 800e42e:	2304      	movs	r3, #4
 800e430:	623b      	str	r3, [r7, #32]
								*idcom=cliente;
 800e432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e434:	693a      	ldr	r2, [r7, #16]
 800e436:	601a      	str	r2, [r3, #0]
 800e438:	e001      	b.n	800e43e <FT_String_ND+0x67a>
							}
							else
							{
								estado=5;
 800e43a:	2305      	movs	r3, #5
 800e43c:	623b      	str	r3, [r7, #32]
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800e43e:	6a3b      	ldr	r3, [r7, #32]
 800e440:	e000      	b.n	800e444 <FT_String_ND+0x680>
					}
			}
			else
			{
				return(2);
 800e442:	2302      	movs	r3, #2
			}
}
 800e444:	4618      	mov	r0, r3
 800e446:	3740      	adds	r7, #64	; 0x40
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	0801038c 	.word	0x0801038c
 800e450:	08010390 	.word	0x08010390

0800e454 <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b088      	sub	sp, #32
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800e45e:	2330      	movs	r3, #48	; 0x30
 800e460:	60bb      	str	r3, [r7, #8]
 800e462:	f107 030c 	add.w	r3, r7, #12
 800e466:	2200      	movs	r2, #0
 800e468:	601a      	str	r2, [r3, #0]
 800e46a:	605a      	str	r2, [r3, #4]
 800e46c:	609a      	str	r2, [r3, #8]
 800e46e:	60da      	str	r2, [r3, #12]
int i=0;	
 800e470:	2300      	movs	r3, #0
 800e472:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800e474:	f107 0308 	add.w	r3, r7, #8
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	490f      	ldr	r1, [pc, #60]	; (800e4b8 <INTOA+0x64>)
 800e47c:	4618      	mov	r0, r3
 800e47e:	f000 fa7b 	bl	800e978 <siprintf>
		while(i<=strlen(origbuff))
 800e482:	e00b      	b.n	800e49c <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	1c5a      	adds	r2, r3, #1
 800e488:	603a      	str	r2, [r7, #0]
 800e48a:	f107 0108 	add.w	r1, r7, #8
 800e48e:	69fa      	ldr	r2, [r7, #28]
 800e490:	440a      	add	r2, r1
 800e492:	7812      	ldrb	r2, [r2, #0]
 800e494:	701a      	strb	r2, [r3, #0]
		i++;
 800e496:	69fb      	ldr	r3, [r7, #28]
 800e498:	3301      	adds	r3, #1
 800e49a:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800e49c:	f107 0308 	add.w	r3, r7, #8
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f7f1 fea7 	bl	80001f4 <strlen>
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	69fb      	ldr	r3, [r7, #28]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d2ea      	bcs.n	800e484 <INTOA+0x30>
		}
		return(i);
 800e4ae:	69fb      	ldr	r3, [r7, #28]
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3720      	adds	r7, #32
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}
 800e4b8:	08010394 	.word	0x08010394

0800e4bc <FTOA>:

int FTOA( int a,  unsigned char *v1, int comma)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b08c      	sub	sp, #48	; 0x30
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	607a      	str	r2, [r7, #4]
//char origbuff[20]="0";
char origbuff[20];
origbuff[0]='\0';
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	753b      	strb	r3, [r7, #20]

int i=0;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	62fb      	str	r3, [r7, #44]	; 0x2c
int b=0;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	62bb      	str	r3, [r7, #40]	; 0x28

		sprintf(origbuff,"%i",a); 	//Paso el entreo a cadena de caracteres
 800e4d4:	f107 0314 	add.w	r3, r7, #20
 800e4d8:	68fa      	ldr	r2, [r7, #12]
 800e4da:	4932      	ldr	r1, [pc, #200]	; (800e5a4 <FTOA+0xe8>)
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f000 fa4b 	bl	800e978 <siprintf>
		b=strlen(origbuff);
 800e4e2:	f107 0314 	add.w	r3, r7, #20
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7f1 fe84 	bl	80001f4 <strlen>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	62bb      	str	r3, [r7, #40]	; 0x28
		if(comma<b)					//Si la posición de la coma es menor a la posición de los caracteres ejemplo int= 2 comma=0 resultado = 0,02
 800e4f0:	687a      	ldr	r2, [r7, #4]
 800e4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	da25      	bge.n	800e544 <FTOA+0x88>
		{
			while(i<=((b)+1))
 800e4f8:	e01d      	b.n	800e536 <FTOA+0x7a>
			{
				if((i==(b-comma))&&(comma<(b))&&(comma!=0))
 800e4fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	1ad3      	subs	r3, r2, r3
 800e500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e502:	429a      	cmp	r2, r3
 800e504:	d10b      	bne.n	800e51e <FTOA+0x62>
 800e506:	687a      	ldr	r2, [r7, #4]
 800e508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e50a:	429a      	cmp	r2, r3
 800e50c:	da07      	bge.n	800e51e <FTOA+0x62>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d004      	beq.n	800e51e <FTOA+0x62>
				{
					*v1++='.';
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	1c5a      	adds	r2, r3, #1
 800e518:	60ba      	str	r2, [r7, #8]
 800e51a:	222e      	movs	r2, #46	; 0x2e
 800e51c:	701a      	strb	r2, [r3, #0]
				}
				*v1++=(unsigned char)origbuff[i];
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	1c5a      	adds	r2, r3, #1
 800e522:	60ba      	str	r2, [r7, #8]
 800e524:	f107 0114 	add.w	r1, r7, #20
 800e528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e52a:	440a      	add	r2, r1
 800e52c:	7812      	ldrb	r2, [r2, #0]
 800e52e:	701a      	strb	r2, [r3, #0]
				i++;
 800e530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e532:	3301      	adds	r3, #1
 800e534:	62fb      	str	r3, [r7, #44]	; 0x2c
			while(i<=((b)+1))
 800e536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e538:	3301      	adds	r3, #1
 800e53a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e53c:	429a      	cmp	r2, r3
 800e53e:	dddc      	ble.n	800e4fa <FTOA+0x3e>
			}
			//*v1++='\0';
			return(i);
 800e540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e542:	e02a      	b.n	800e59a <FTOA+0xde>
		  }
		else
		{
			if(b==1)
 800e544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e546:	2b01      	cmp	r3, #1
 800e548:	d10f      	bne.n	800e56a <FTOA+0xae>
			{
				v1[0]='0';
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	2230      	movs	r2, #48	; 0x30
 800e54e:	701a      	strb	r2, [r3, #0]
				v1[1]='.';
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	3301      	adds	r3, #1
 800e554:	222e      	movs	r2, #46	; 0x2e
 800e556:	701a      	strb	r2, [r3, #0]
				v1[2]=origbuff[0];
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	3302      	adds	r3, #2
 800e55c:	7d3a      	ldrb	r2, [r7, #20]
 800e55e:	701a      	strb	r2, [r3, #0]
				v1[3]='\0';
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	3303      	adds	r3, #3
 800e564:	2200      	movs	r2, #0
 800e566:	701a      	strb	r2, [r3, #0]
 800e568:	e016      	b.n	800e598 <FTOA+0xdc>
			}
			else
			{
				if(b==0)
 800e56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d113      	bne.n	800e598 <FTOA+0xdc>
				{
					*v1++='0';
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	1c5a      	adds	r2, r3, #1
 800e574:	60ba      	str	r2, [r7, #8]
 800e576:	2230      	movs	r2, #48	; 0x30
 800e578:	701a      	strb	r2, [r3, #0]
					*v1++='.';
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	1c5a      	adds	r2, r3, #1
 800e57e:	60ba      	str	r2, [r7, #8]
 800e580:	222e      	movs	r2, #46	; 0x2e
 800e582:	701a      	strb	r2, [r3, #0]
					*v1++='0';
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	1c5a      	adds	r2, r3, #1
 800e588:	60ba      	str	r2, [r7, #8]
 800e58a:	2230      	movs	r2, #48	; 0x30
 800e58c:	701a      	strb	r2, [r3, #0]
					*v1++='\0';
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	1c5a      	adds	r2, r3, #1
 800e592:	60ba      	str	r2, [r7, #8]
 800e594:	2200      	movs	r2, #0
 800e596:	701a      	strb	r2, [r3, #0]
				}
			}

		}

		return(0);
 800e598:	2300      	movs	r3, #0
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3730      	adds	r7, #48	; 0x30
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}
 800e5a2:	bf00      	nop
 800e5a4:	08010394 	.word	0x08010394

0800e5a8 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b088      	sub	sp, #32
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	60f8      	str	r0, [r7, #12]
 800e5b0:	60b9      	str	r1, [r7, #8]
 800e5b2:	607a      	str	r2, [r7, #4]
 800e5b4:	603b      	str	r3, [r7, #0]
int x =0;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800e5be:	f107 0310 	add.w	r3, r7, #16
 800e5c2:	617b      	str	r3, [r7, #20]
if (c==0) x=strlen(b);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d105      	bne.n	800e5d6 <CopiaVector+0x2e>
 800e5ca:	68b8      	ldr	r0, [r7, #8]
 800e5cc:	f7f1 fe12 	bl	80001f4 <strlen>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	61bb      	str	r3, [r7, #24]
 800e5d4:	e02e      	b.n	800e634 <CopiaVector+0x8c>
else
	{
		x=c;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	61bb      	str	r3, [r7, #24]
		if (x>1024)// OJO SOLO HTTP if (x>128) (x>512)
 800e5da:	69bb      	ldr	r3, [r7, #24]
 800e5dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e5e0:	dd01      	ble.n	800e5e6 <CopiaVector+0x3e>
			{
				return(1);
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	e027      	b.n	800e636 <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800e5ea:	e00a      	b.n	800e602 <CopiaVector+0x5a>
				{
					*a++=*b++;
 800e5ec:	68ba      	ldr	r2, [r7, #8]
 800e5ee:	1c53      	adds	r3, r2, #1
 800e5f0:	60bb      	str	r3, [r7, #8]
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	1c59      	adds	r1, r3, #1
 800e5f6:	60f9      	str	r1, [r7, #12]
 800e5f8:	7812      	ldrb	r2, [r2, #0]
 800e5fa:	701a      	strb	r2, [r3, #0]
					p++;
 800e5fc:	69fb      	ldr	r3, [r7, #28]
 800e5fe:	3301      	adds	r3, #1
 800e600:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800e602:	69fa      	ldr	r2, [r7, #28]
 800e604:	69bb      	ldr	r3, [r7, #24]
 800e606:	429a      	cmp	r2, r3
 800e608:	dbf0      	blt.n	800e5ec <CopiaVector+0x44>
				}
				if (d==1)
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d111      	bne.n	800e634 <CopiaVector+0x8c>
				{
				  p=c;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800e614:	e008      	b.n	800e628 <CopiaVector+0x80>
				  {
					  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	1c5a      	adds	r2, r3, #1
 800e61a:	60fa      	str	r2, [r7, #12]
 800e61c:	697a      	ldr	r2, [r7, #20]
 800e61e:	7812      	ldrb	r2, [r2, #0]
 800e620:	701a      	strb	r2, [r3, #0]
					  p++;
 800e622:	69fb      	ldr	r3, [r7, #28]
 800e624:	3301      	adds	r3, #1
 800e626:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800e628:	687a      	ldr	r2, [r7, #4]
 800e62a:	69fb      	ldr	r3, [r7, #28]
 800e62c:	429a      	cmp	r2, r3
 800e62e:	daf2      	bge.n	800e616 <CopiaVector+0x6e>
				  }
				return (0);
 800e630:	2300      	movs	r3, #0
 800e632:	e000      	b.n	800e636 <CopiaVector+0x8e>
				}
			}
	}
return (1);
 800e634:	2301      	movs	r3, #1
}
 800e636:	4618      	mov	r0, r3
 800e638:	3720      	adds	r7, #32
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}

0800e63e <atoi>:
 800e63e:	220a      	movs	r2, #10
 800e640:	2100      	movs	r1, #0
 800e642:	f000 b89d 	b.w	800e780 <strtol>

0800e646 <__itoa>:
 800e646:	1e93      	subs	r3, r2, #2
 800e648:	2b22      	cmp	r3, #34	; 0x22
 800e64a:	b510      	push	{r4, lr}
 800e64c:	460c      	mov	r4, r1
 800e64e:	d904      	bls.n	800e65a <__itoa+0x14>
 800e650:	2300      	movs	r3, #0
 800e652:	700b      	strb	r3, [r1, #0]
 800e654:	461c      	mov	r4, r3
 800e656:	4620      	mov	r0, r4
 800e658:	bd10      	pop	{r4, pc}
 800e65a:	2a0a      	cmp	r2, #10
 800e65c:	d109      	bne.n	800e672 <__itoa+0x2c>
 800e65e:	2800      	cmp	r0, #0
 800e660:	da07      	bge.n	800e672 <__itoa+0x2c>
 800e662:	232d      	movs	r3, #45	; 0x2d
 800e664:	700b      	strb	r3, [r1, #0]
 800e666:	4240      	negs	r0, r0
 800e668:	2101      	movs	r1, #1
 800e66a:	4421      	add	r1, r4
 800e66c:	f000 f892 	bl	800e794 <__utoa>
 800e670:	e7f1      	b.n	800e656 <__itoa+0x10>
 800e672:	2100      	movs	r1, #0
 800e674:	e7f9      	b.n	800e66a <__itoa+0x24>

0800e676 <itoa>:
 800e676:	f7ff bfe6 	b.w	800e646 <__itoa>
	...

0800e67c <_strtol_l.constprop.0>:
 800e67c:	2b01      	cmp	r3, #1
 800e67e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e682:	d001      	beq.n	800e688 <_strtol_l.constprop.0+0xc>
 800e684:	2b24      	cmp	r3, #36	; 0x24
 800e686:	d906      	bls.n	800e696 <_strtol_l.constprop.0+0x1a>
 800e688:	f000 fa96 	bl	800ebb8 <__errno>
 800e68c:	2316      	movs	r3, #22
 800e68e:	6003      	str	r3, [r0, #0]
 800e690:	2000      	movs	r0, #0
 800e692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e696:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e77c <_strtol_l.constprop.0+0x100>
 800e69a:	460d      	mov	r5, r1
 800e69c:	462e      	mov	r6, r5
 800e69e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e6a2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e6a6:	f017 0708 	ands.w	r7, r7, #8
 800e6aa:	d1f7      	bne.n	800e69c <_strtol_l.constprop.0+0x20>
 800e6ac:	2c2d      	cmp	r4, #45	; 0x2d
 800e6ae:	d132      	bne.n	800e716 <_strtol_l.constprop.0+0x9a>
 800e6b0:	782c      	ldrb	r4, [r5, #0]
 800e6b2:	2701      	movs	r7, #1
 800e6b4:	1cb5      	adds	r5, r6, #2
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d05b      	beq.n	800e772 <_strtol_l.constprop.0+0xf6>
 800e6ba:	2b10      	cmp	r3, #16
 800e6bc:	d109      	bne.n	800e6d2 <_strtol_l.constprop.0+0x56>
 800e6be:	2c30      	cmp	r4, #48	; 0x30
 800e6c0:	d107      	bne.n	800e6d2 <_strtol_l.constprop.0+0x56>
 800e6c2:	782c      	ldrb	r4, [r5, #0]
 800e6c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e6c8:	2c58      	cmp	r4, #88	; 0x58
 800e6ca:	d14d      	bne.n	800e768 <_strtol_l.constprop.0+0xec>
 800e6cc:	786c      	ldrb	r4, [r5, #1]
 800e6ce:	2310      	movs	r3, #16
 800e6d0:	3502      	adds	r5, #2
 800e6d2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e6d6:	f108 38ff 	add.w	r8, r8, #4294967295
 800e6da:	f04f 0e00 	mov.w	lr, #0
 800e6de:	fbb8 f9f3 	udiv	r9, r8, r3
 800e6e2:	4676      	mov	r6, lr
 800e6e4:	fb03 8a19 	mls	sl, r3, r9, r8
 800e6e8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e6ec:	f1bc 0f09 	cmp.w	ip, #9
 800e6f0:	d816      	bhi.n	800e720 <_strtol_l.constprop.0+0xa4>
 800e6f2:	4664      	mov	r4, ip
 800e6f4:	42a3      	cmp	r3, r4
 800e6f6:	dd24      	ble.n	800e742 <_strtol_l.constprop.0+0xc6>
 800e6f8:	f1be 3fff 	cmp.w	lr, #4294967295
 800e6fc:	d008      	beq.n	800e710 <_strtol_l.constprop.0+0x94>
 800e6fe:	45b1      	cmp	r9, r6
 800e700:	d31c      	bcc.n	800e73c <_strtol_l.constprop.0+0xc0>
 800e702:	d101      	bne.n	800e708 <_strtol_l.constprop.0+0x8c>
 800e704:	45a2      	cmp	sl, r4
 800e706:	db19      	blt.n	800e73c <_strtol_l.constprop.0+0xc0>
 800e708:	fb06 4603 	mla	r6, r6, r3, r4
 800e70c:	f04f 0e01 	mov.w	lr, #1
 800e710:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e714:	e7e8      	b.n	800e6e8 <_strtol_l.constprop.0+0x6c>
 800e716:	2c2b      	cmp	r4, #43	; 0x2b
 800e718:	bf04      	itt	eq
 800e71a:	782c      	ldrbeq	r4, [r5, #0]
 800e71c:	1cb5      	addeq	r5, r6, #2
 800e71e:	e7ca      	b.n	800e6b6 <_strtol_l.constprop.0+0x3a>
 800e720:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e724:	f1bc 0f19 	cmp.w	ip, #25
 800e728:	d801      	bhi.n	800e72e <_strtol_l.constprop.0+0xb2>
 800e72a:	3c37      	subs	r4, #55	; 0x37
 800e72c:	e7e2      	b.n	800e6f4 <_strtol_l.constprop.0+0x78>
 800e72e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e732:	f1bc 0f19 	cmp.w	ip, #25
 800e736:	d804      	bhi.n	800e742 <_strtol_l.constprop.0+0xc6>
 800e738:	3c57      	subs	r4, #87	; 0x57
 800e73a:	e7db      	b.n	800e6f4 <_strtol_l.constprop.0+0x78>
 800e73c:	f04f 3eff 	mov.w	lr, #4294967295
 800e740:	e7e6      	b.n	800e710 <_strtol_l.constprop.0+0x94>
 800e742:	f1be 3fff 	cmp.w	lr, #4294967295
 800e746:	d105      	bne.n	800e754 <_strtol_l.constprop.0+0xd8>
 800e748:	2322      	movs	r3, #34	; 0x22
 800e74a:	6003      	str	r3, [r0, #0]
 800e74c:	4646      	mov	r6, r8
 800e74e:	b942      	cbnz	r2, 800e762 <_strtol_l.constprop.0+0xe6>
 800e750:	4630      	mov	r0, r6
 800e752:	e79e      	b.n	800e692 <_strtol_l.constprop.0+0x16>
 800e754:	b107      	cbz	r7, 800e758 <_strtol_l.constprop.0+0xdc>
 800e756:	4276      	negs	r6, r6
 800e758:	2a00      	cmp	r2, #0
 800e75a:	d0f9      	beq.n	800e750 <_strtol_l.constprop.0+0xd4>
 800e75c:	f1be 0f00 	cmp.w	lr, #0
 800e760:	d000      	beq.n	800e764 <_strtol_l.constprop.0+0xe8>
 800e762:	1e69      	subs	r1, r5, #1
 800e764:	6011      	str	r1, [r2, #0]
 800e766:	e7f3      	b.n	800e750 <_strtol_l.constprop.0+0xd4>
 800e768:	2430      	movs	r4, #48	; 0x30
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d1b1      	bne.n	800e6d2 <_strtol_l.constprop.0+0x56>
 800e76e:	2308      	movs	r3, #8
 800e770:	e7af      	b.n	800e6d2 <_strtol_l.constprop.0+0x56>
 800e772:	2c30      	cmp	r4, #48	; 0x30
 800e774:	d0a5      	beq.n	800e6c2 <_strtol_l.constprop.0+0x46>
 800e776:	230a      	movs	r3, #10
 800e778:	e7ab      	b.n	800e6d2 <_strtol_l.constprop.0+0x56>
 800e77a:	bf00      	nop
 800e77c:	080103d6 	.word	0x080103d6

0800e780 <strtol>:
 800e780:	4613      	mov	r3, r2
 800e782:	460a      	mov	r2, r1
 800e784:	4601      	mov	r1, r0
 800e786:	4802      	ldr	r0, [pc, #8]	; (800e790 <strtol+0x10>)
 800e788:	6800      	ldr	r0, [r0, #0]
 800e78a:	f7ff bf77 	b.w	800e67c <_strtol_l.constprop.0>
 800e78e:	bf00      	nop
 800e790:	20000194 	.word	0x20000194

0800e794 <__utoa>:
 800e794:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e796:	4c1f      	ldr	r4, [pc, #124]	; (800e814 <__utoa+0x80>)
 800e798:	b08b      	sub	sp, #44	; 0x2c
 800e79a:	4605      	mov	r5, r0
 800e79c:	460b      	mov	r3, r1
 800e79e:	466e      	mov	r6, sp
 800e7a0:	f104 0c20 	add.w	ip, r4, #32
 800e7a4:	6820      	ldr	r0, [r4, #0]
 800e7a6:	6861      	ldr	r1, [r4, #4]
 800e7a8:	4637      	mov	r7, r6
 800e7aa:	c703      	stmia	r7!, {r0, r1}
 800e7ac:	3408      	adds	r4, #8
 800e7ae:	4564      	cmp	r4, ip
 800e7b0:	463e      	mov	r6, r7
 800e7b2:	d1f7      	bne.n	800e7a4 <__utoa+0x10>
 800e7b4:	7921      	ldrb	r1, [r4, #4]
 800e7b6:	7139      	strb	r1, [r7, #4]
 800e7b8:	1e91      	subs	r1, r2, #2
 800e7ba:	6820      	ldr	r0, [r4, #0]
 800e7bc:	6038      	str	r0, [r7, #0]
 800e7be:	2922      	cmp	r1, #34	; 0x22
 800e7c0:	f04f 0100 	mov.w	r1, #0
 800e7c4:	d904      	bls.n	800e7d0 <__utoa+0x3c>
 800e7c6:	7019      	strb	r1, [r3, #0]
 800e7c8:	460b      	mov	r3, r1
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	b00b      	add	sp, #44	; 0x2c
 800e7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7d0:	1e58      	subs	r0, r3, #1
 800e7d2:	4684      	mov	ip, r0
 800e7d4:	fbb5 f7f2 	udiv	r7, r5, r2
 800e7d8:	fb02 5617 	mls	r6, r2, r7, r5
 800e7dc:	3628      	adds	r6, #40	; 0x28
 800e7de:	446e      	add	r6, sp
 800e7e0:	460c      	mov	r4, r1
 800e7e2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800e7e6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800e7ea:	462e      	mov	r6, r5
 800e7ec:	42b2      	cmp	r2, r6
 800e7ee:	f101 0101 	add.w	r1, r1, #1
 800e7f2:	463d      	mov	r5, r7
 800e7f4:	d9ee      	bls.n	800e7d4 <__utoa+0x40>
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	545a      	strb	r2, [r3, r1]
 800e7fa:	1919      	adds	r1, r3, r4
 800e7fc:	1aa5      	subs	r5, r4, r2
 800e7fe:	42aa      	cmp	r2, r5
 800e800:	dae3      	bge.n	800e7ca <__utoa+0x36>
 800e802:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800e806:	780e      	ldrb	r6, [r1, #0]
 800e808:	7006      	strb	r6, [r0, #0]
 800e80a:	3201      	adds	r2, #1
 800e80c:	f801 5901 	strb.w	r5, [r1], #-1
 800e810:	e7f4      	b.n	800e7fc <__utoa+0x68>
 800e812:	bf00      	nop
 800e814:	080103b0 	.word	0x080103b0

0800e818 <std>:
 800e818:	2300      	movs	r3, #0
 800e81a:	b510      	push	{r4, lr}
 800e81c:	4604      	mov	r4, r0
 800e81e:	e9c0 3300 	strd	r3, r3, [r0]
 800e822:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e826:	6083      	str	r3, [r0, #8]
 800e828:	8181      	strh	r1, [r0, #12]
 800e82a:	6643      	str	r3, [r0, #100]	; 0x64
 800e82c:	81c2      	strh	r2, [r0, #14]
 800e82e:	6183      	str	r3, [r0, #24]
 800e830:	4619      	mov	r1, r3
 800e832:	2208      	movs	r2, #8
 800e834:	305c      	adds	r0, #92	; 0x5c
 800e836:	f000 f902 	bl	800ea3e <memset>
 800e83a:	4b05      	ldr	r3, [pc, #20]	; (800e850 <std+0x38>)
 800e83c:	6263      	str	r3, [r4, #36]	; 0x24
 800e83e:	4b05      	ldr	r3, [pc, #20]	; (800e854 <std+0x3c>)
 800e840:	62a3      	str	r3, [r4, #40]	; 0x28
 800e842:	4b05      	ldr	r3, [pc, #20]	; (800e858 <std+0x40>)
 800e844:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e846:	4b05      	ldr	r3, [pc, #20]	; (800e85c <std+0x44>)
 800e848:	6224      	str	r4, [r4, #32]
 800e84a:	6323      	str	r3, [r4, #48]	; 0x30
 800e84c:	bd10      	pop	{r4, pc}
 800e84e:	bf00      	nop
 800e850:	0800e9b9 	.word	0x0800e9b9
 800e854:	0800e9db 	.word	0x0800e9db
 800e858:	0800ea13 	.word	0x0800ea13
 800e85c:	0800ea37 	.word	0x0800ea37

0800e860 <stdio_exit_handler>:
 800e860:	4a02      	ldr	r2, [pc, #8]	; (800e86c <stdio_exit_handler+0xc>)
 800e862:	4903      	ldr	r1, [pc, #12]	; (800e870 <stdio_exit_handler+0x10>)
 800e864:	4803      	ldr	r0, [pc, #12]	; (800e874 <stdio_exit_handler+0x14>)
 800e866:	f000 b869 	b.w	800e93c <_fwalk_sglue>
 800e86a:	bf00      	nop
 800e86c:	2000013c 	.word	0x2000013c
 800e870:	0800f539 	.word	0x0800f539
 800e874:	20000148 	.word	0x20000148

0800e878 <cleanup_stdio>:
 800e878:	6841      	ldr	r1, [r0, #4]
 800e87a:	4b0c      	ldr	r3, [pc, #48]	; (800e8ac <cleanup_stdio+0x34>)
 800e87c:	4299      	cmp	r1, r3
 800e87e:	b510      	push	{r4, lr}
 800e880:	4604      	mov	r4, r0
 800e882:	d001      	beq.n	800e888 <cleanup_stdio+0x10>
 800e884:	f000 fe58 	bl	800f538 <_fflush_r>
 800e888:	68a1      	ldr	r1, [r4, #8]
 800e88a:	4b09      	ldr	r3, [pc, #36]	; (800e8b0 <cleanup_stdio+0x38>)
 800e88c:	4299      	cmp	r1, r3
 800e88e:	d002      	beq.n	800e896 <cleanup_stdio+0x1e>
 800e890:	4620      	mov	r0, r4
 800e892:	f000 fe51 	bl	800f538 <_fflush_r>
 800e896:	68e1      	ldr	r1, [r4, #12]
 800e898:	4b06      	ldr	r3, [pc, #24]	; (800e8b4 <cleanup_stdio+0x3c>)
 800e89a:	4299      	cmp	r1, r3
 800e89c:	d004      	beq.n	800e8a8 <cleanup_stdio+0x30>
 800e89e:	4620      	mov	r0, r4
 800e8a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8a4:	f000 be48 	b.w	800f538 <_fflush_r>
 800e8a8:	bd10      	pop	{r4, pc}
 800e8aa:	bf00      	nop
 800e8ac:	200044cc 	.word	0x200044cc
 800e8b0:	20004534 	.word	0x20004534
 800e8b4:	2000459c 	.word	0x2000459c

0800e8b8 <global_stdio_init.part.0>:
 800e8b8:	b510      	push	{r4, lr}
 800e8ba:	4b0b      	ldr	r3, [pc, #44]	; (800e8e8 <global_stdio_init.part.0+0x30>)
 800e8bc:	4c0b      	ldr	r4, [pc, #44]	; (800e8ec <global_stdio_init.part.0+0x34>)
 800e8be:	4a0c      	ldr	r2, [pc, #48]	; (800e8f0 <global_stdio_init.part.0+0x38>)
 800e8c0:	601a      	str	r2, [r3, #0]
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	2104      	movs	r1, #4
 800e8c8:	f7ff ffa6 	bl	800e818 <std>
 800e8cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e8d0:	2201      	movs	r2, #1
 800e8d2:	2109      	movs	r1, #9
 800e8d4:	f7ff ffa0 	bl	800e818 <std>
 800e8d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e8dc:	2202      	movs	r2, #2
 800e8de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8e2:	2112      	movs	r1, #18
 800e8e4:	f7ff bf98 	b.w	800e818 <std>
 800e8e8:	20004604 	.word	0x20004604
 800e8ec:	200044cc 	.word	0x200044cc
 800e8f0:	0800e861 	.word	0x0800e861

0800e8f4 <__sfp_lock_acquire>:
 800e8f4:	4801      	ldr	r0, [pc, #4]	; (800e8fc <__sfp_lock_acquire+0x8>)
 800e8f6:	f000 b989 	b.w	800ec0c <__retarget_lock_acquire_recursive>
 800e8fa:	bf00      	nop
 800e8fc:	2000460d 	.word	0x2000460d

0800e900 <__sfp_lock_release>:
 800e900:	4801      	ldr	r0, [pc, #4]	; (800e908 <__sfp_lock_release+0x8>)
 800e902:	f000 b984 	b.w	800ec0e <__retarget_lock_release_recursive>
 800e906:	bf00      	nop
 800e908:	2000460d 	.word	0x2000460d

0800e90c <__sinit>:
 800e90c:	b510      	push	{r4, lr}
 800e90e:	4604      	mov	r4, r0
 800e910:	f7ff fff0 	bl	800e8f4 <__sfp_lock_acquire>
 800e914:	6a23      	ldr	r3, [r4, #32]
 800e916:	b11b      	cbz	r3, 800e920 <__sinit+0x14>
 800e918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e91c:	f7ff bff0 	b.w	800e900 <__sfp_lock_release>
 800e920:	4b04      	ldr	r3, [pc, #16]	; (800e934 <__sinit+0x28>)
 800e922:	6223      	str	r3, [r4, #32]
 800e924:	4b04      	ldr	r3, [pc, #16]	; (800e938 <__sinit+0x2c>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d1f5      	bne.n	800e918 <__sinit+0xc>
 800e92c:	f7ff ffc4 	bl	800e8b8 <global_stdio_init.part.0>
 800e930:	e7f2      	b.n	800e918 <__sinit+0xc>
 800e932:	bf00      	nop
 800e934:	0800e879 	.word	0x0800e879
 800e938:	20004604 	.word	0x20004604

0800e93c <_fwalk_sglue>:
 800e93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e940:	4607      	mov	r7, r0
 800e942:	4688      	mov	r8, r1
 800e944:	4614      	mov	r4, r2
 800e946:	2600      	movs	r6, #0
 800e948:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e94c:	f1b9 0901 	subs.w	r9, r9, #1
 800e950:	d505      	bpl.n	800e95e <_fwalk_sglue+0x22>
 800e952:	6824      	ldr	r4, [r4, #0]
 800e954:	2c00      	cmp	r4, #0
 800e956:	d1f7      	bne.n	800e948 <_fwalk_sglue+0xc>
 800e958:	4630      	mov	r0, r6
 800e95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e95e:	89ab      	ldrh	r3, [r5, #12]
 800e960:	2b01      	cmp	r3, #1
 800e962:	d907      	bls.n	800e974 <_fwalk_sglue+0x38>
 800e964:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e968:	3301      	adds	r3, #1
 800e96a:	d003      	beq.n	800e974 <_fwalk_sglue+0x38>
 800e96c:	4629      	mov	r1, r5
 800e96e:	4638      	mov	r0, r7
 800e970:	47c0      	blx	r8
 800e972:	4306      	orrs	r6, r0
 800e974:	3568      	adds	r5, #104	; 0x68
 800e976:	e7e9      	b.n	800e94c <_fwalk_sglue+0x10>

0800e978 <siprintf>:
 800e978:	b40e      	push	{r1, r2, r3}
 800e97a:	b500      	push	{lr}
 800e97c:	b09c      	sub	sp, #112	; 0x70
 800e97e:	ab1d      	add	r3, sp, #116	; 0x74
 800e980:	9002      	str	r0, [sp, #8]
 800e982:	9006      	str	r0, [sp, #24]
 800e984:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e988:	4809      	ldr	r0, [pc, #36]	; (800e9b0 <siprintf+0x38>)
 800e98a:	9107      	str	r1, [sp, #28]
 800e98c:	9104      	str	r1, [sp, #16]
 800e98e:	4909      	ldr	r1, [pc, #36]	; (800e9b4 <siprintf+0x3c>)
 800e990:	f853 2b04 	ldr.w	r2, [r3], #4
 800e994:	9105      	str	r1, [sp, #20]
 800e996:	6800      	ldr	r0, [r0, #0]
 800e998:	9301      	str	r3, [sp, #4]
 800e99a:	a902      	add	r1, sp, #8
 800e99c:	f000 fab8 	bl	800ef10 <_svfiprintf_r>
 800e9a0:	9b02      	ldr	r3, [sp, #8]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	701a      	strb	r2, [r3, #0]
 800e9a6:	b01c      	add	sp, #112	; 0x70
 800e9a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9ac:	b003      	add	sp, #12
 800e9ae:	4770      	bx	lr
 800e9b0:	20000194 	.word	0x20000194
 800e9b4:	ffff0208 	.word	0xffff0208

0800e9b8 <__sread>:
 800e9b8:	b510      	push	{r4, lr}
 800e9ba:	460c      	mov	r4, r1
 800e9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9c0:	f000 f8d6 	bl	800eb70 <_read_r>
 800e9c4:	2800      	cmp	r0, #0
 800e9c6:	bfab      	itete	ge
 800e9c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e9ca:	89a3      	ldrhlt	r3, [r4, #12]
 800e9cc:	181b      	addge	r3, r3, r0
 800e9ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e9d2:	bfac      	ite	ge
 800e9d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e9d6:	81a3      	strhlt	r3, [r4, #12]
 800e9d8:	bd10      	pop	{r4, pc}

0800e9da <__swrite>:
 800e9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9de:	461f      	mov	r7, r3
 800e9e0:	898b      	ldrh	r3, [r1, #12]
 800e9e2:	05db      	lsls	r3, r3, #23
 800e9e4:	4605      	mov	r5, r0
 800e9e6:	460c      	mov	r4, r1
 800e9e8:	4616      	mov	r6, r2
 800e9ea:	d505      	bpl.n	800e9f8 <__swrite+0x1e>
 800e9ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9f0:	2302      	movs	r3, #2
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	f000 f8aa 	bl	800eb4c <_lseek_r>
 800e9f8:	89a3      	ldrh	r3, [r4, #12]
 800e9fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ea02:	81a3      	strh	r3, [r4, #12]
 800ea04:	4632      	mov	r2, r6
 800ea06:	463b      	mov	r3, r7
 800ea08:	4628      	mov	r0, r5
 800ea0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea0e:	f000 b8c1 	b.w	800eb94 <_write_r>

0800ea12 <__sseek>:
 800ea12:	b510      	push	{r4, lr}
 800ea14:	460c      	mov	r4, r1
 800ea16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea1a:	f000 f897 	bl	800eb4c <_lseek_r>
 800ea1e:	1c43      	adds	r3, r0, #1
 800ea20:	89a3      	ldrh	r3, [r4, #12]
 800ea22:	bf15      	itete	ne
 800ea24:	6560      	strne	r0, [r4, #84]	; 0x54
 800ea26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ea2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ea2e:	81a3      	strheq	r3, [r4, #12]
 800ea30:	bf18      	it	ne
 800ea32:	81a3      	strhne	r3, [r4, #12]
 800ea34:	bd10      	pop	{r4, pc}

0800ea36 <__sclose>:
 800ea36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea3a:	f000 b877 	b.w	800eb2c <_close_r>

0800ea3e <memset>:
 800ea3e:	4402      	add	r2, r0
 800ea40:	4603      	mov	r3, r0
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d100      	bne.n	800ea48 <memset+0xa>
 800ea46:	4770      	bx	lr
 800ea48:	f803 1b01 	strb.w	r1, [r3], #1
 800ea4c:	e7f9      	b.n	800ea42 <memset+0x4>

0800ea4e <strncat>:
 800ea4e:	b530      	push	{r4, r5, lr}
 800ea50:	4604      	mov	r4, r0
 800ea52:	7825      	ldrb	r5, [r4, #0]
 800ea54:	4623      	mov	r3, r4
 800ea56:	3401      	adds	r4, #1
 800ea58:	2d00      	cmp	r5, #0
 800ea5a:	d1fa      	bne.n	800ea52 <strncat+0x4>
 800ea5c:	3a01      	subs	r2, #1
 800ea5e:	d304      	bcc.n	800ea6a <strncat+0x1c>
 800ea60:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea64:	f803 4b01 	strb.w	r4, [r3], #1
 800ea68:	b904      	cbnz	r4, 800ea6c <strncat+0x1e>
 800ea6a:	bd30      	pop	{r4, r5, pc}
 800ea6c:	2a00      	cmp	r2, #0
 800ea6e:	d1f5      	bne.n	800ea5c <strncat+0xe>
 800ea70:	701a      	strb	r2, [r3, #0]
 800ea72:	e7f3      	b.n	800ea5c <strncat+0xe>

0800ea74 <strtok>:
 800ea74:	4b16      	ldr	r3, [pc, #88]	; (800ead0 <strtok+0x5c>)
 800ea76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ea78:	681e      	ldr	r6, [r3, #0]
 800ea7a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800ea7c:	4605      	mov	r5, r0
 800ea7e:	b9fc      	cbnz	r4, 800eac0 <strtok+0x4c>
 800ea80:	2050      	movs	r0, #80	; 0x50
 800ea82:	9101      	str	r1, [sp, #4]
 800ea84:	f000 f936 	bl	800ecf4 <malloc>
 800ea88:	9901      	ldr	r1, [sp, #4]
 800ea8a:	6470      	str	r0, [r6, #68]	; 0x44
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	b920      	cbnz	r0, 800ea9a <strtok+0x26>
 800ea90:	4b10      	ldr	r3, [pc, #64]	; (800ead4 <strtok+0x60>)
 800ea92:	4811      	ldr	r0, [pc, #68]	; (800ead8 <strtok+0x64>)
 800ea94:	215b      	movs	r1, #91	; 0x5b
 800ea96:	f000 f8c3 	bl	800ec20 <__assert_func>
 800ea9a:	e9c0 4400 	strd	r4, r4, [r0]
 800ea9e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800eaa2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800eaa6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800eaaa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800eaae:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800eab2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800eab6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800eaba:	6184      	str	r4, [r0, #24]
 800eabc:	7704      	strb	r4, [r0, #28]
 800eabe:	6244      	str	r4, [r0, #36]	; 0x24
 800eac0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800eac2:	2301      	movs	r3, #1
 800eac4:	4628      	mov	r0, r5
 800eac6:	b002      	add	sp, #8
 800eac8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eacc:	f000 b806 	b.w	800eadc <__strtok_r>
 800ead0:	20000194 	.word	0x20000194
 800ead4:	080104d6 	.word	0x080104d6
 800ead8:	080104ed 	.word	0x080104ed

0800eadc <__strtok_r>:
 800eadc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eade:	b908      	cbnz	r0, 800eae4 <__strtok_r+0x8>
 800eae0:	6810      	ldr	r0, [r2, #0]
 800eae2:	b188      	cbz	r0, 800eb08 <__strtok_r+0x2c>
 800eae4:	4604      	mov	r4, r0
 800eae6:	4620      	mov	r0, r4
 800eae8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800eaec:	460f      	mov	r7, r1
 800eaee:	f817 6b01 	ldrb.w	r6, [r7], #1
 800eaf2:	b91e      	cbnz	r6, 800eafc <__strtok_r+0x20>
 800eaf4:	b965      	cbnz	r5, 800eb10 <__strtok_r+0x34>
 800eaf6:	6015      	str	r5, [r2, #0]
 800eaf8:	4628      	mov	r0, r5
 800eafa:	e005      	b.n	800eb08 <__strtok_r+0x2c>
 800eafc:	42b5      	cmp	r5, r6
 800eafe:	d1f6      	bne.n	800eaee <__strtok_r+0x12>
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d1f0      	bne.n	800eae6 <__strtok_r+0xa>
 800eb04:	6014      	str	r4, [r2, #0]
 800eb06:	7003      	strb	r3, [r0, #0]
 800eb08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb0a:	461c      	mov	r4, r3
 800eb0c:	e00c      	b.n	800eb28 <__strtok_r+0x4c>
 800eb0e:	b915      	cbnz	r5, 800eb16 <__strtok_r+0x3a>
 800eb10:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eb14:	460e      	mov	r6, r1
 800eb16:	f816 5b01 	ldrb.w	r5, [r6], #1
 800eb1a:	42ab      	cmp	r3, r5
 800eb1c:	d1f7      	bne.n	800eb0e <__strtok_r+0x32>
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d0f3      	beq.n	800eb0a <__strtok_r+0x2e>
 800eb22:	2300      	movs	r3, #0
 800eb24:	f804 3c01 	strb.w	r3, [r4, #-1]
 800eb28:	6014      	str	r4, [r2, #0]
 800eb2a:	e7ed      	b.n	800eb08 <__strtok_r+0x2c>

0800eb2c <_close_r>:
 800eb2c:	b538      	push	{r3, r4, r5, lr}
 800eb2e:	4d06      	ldr	r5, [pc, #24]	; (800eb48 <_close_r+0x1c>)
 800eb30:	2300      	movs	r3, #0
 800eb32:	4604      	mov	r4, r0
 800eb34:	4608      	mov	r0, r1
 800eb36:	602b      	str	r3, [r5, #0]
 800eb38:	f7f3 ffa7 	bl	8002a8a <_close>
 800eb3c:	1c43      	adds	r3, r0, #1
 800eb3e:	d102      	bne.n	800eb46 <_close_r+0x1a>
 800eb40:	682b      	ldr	r3, [r5, #0]
 800eb42:	b103      	cbz	r3, 800eb46 <_close_r+0x1a>
 800eb44:	6023      	str	r3, [r4, #0]
 800eb46:	bd38      	pop	{r3, r4, r5, pc}
 800eb48:	20004608 	.word	0x20004608

0800eb4c <_lseek_r>:
 800eb4c:	b538      	push	{r3, r4, r5, lr}
 800eb4e:	4d07      	ldr	r5, [pc, #28]	; (800eb6c <_lseek_r+0x20>)
 800eb50:	4604      	mov	r4, r0
 800eb52:	4608      	mov	r0, r1
 800eb54:	4611      	mov	r1, r2
 800eb56:	2200      	movs	r2, #0
 800eb58:	602a      	str	r2, [r5, #0]
 800eb5a:	461a      	mov	r2, r3
 800eb5c:	f7f3 ffbc 	bl	8002ad8 <_lseek>
 800eb60:	1c43      	adds	r3, r0, #1
 800eb62:	d102      	bne.n	800eb6a <_lseek_r+0x1e>
 800eb64:	682b      	ldr	r3, [r5, #0]
 800eb66:	b103      	cbz	r3, 800eb6a <_lseek_r+0x1e>
 800eb68:	6023      	str	r3, [r4, #0]
 800eb6a:	bd38      	pop	{r3, r4, r5, pc}
 800eb6c:	20004608 	.word	0x20004608

0800eb70 <_read_r>:
 800eb70:	b538      	push	{r3, r4, r5, lr}
 800eb72:	4d07      	ldr	r5, [pc, #28]	; (800eb90 <_read_r+0x20>)
 800eb74:	4604      	mov	r4, r0
 800eb76:	4608      	mov	r0, r1
 800eb78:	4611      	mov	r1, r2
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	602a      	str	r2, [r5, #0]
 800eb7e:	461a      	mov	r2, r3
 800eb80:	f7f3 ff4a 	bl	8002a18 <_read>
 800eb84:	1c43      	adds	r3, r0, #1
 800eb86:	d102      	bne.n	800eb8e <_read_r+0x1e>
 800eb88:	682b      	ldr	r3, [r5, #0]
 800eb8a:	b103      	cbz	r3, 800eb8e <_read_r+0x1e>
 800eb8c:	6023      	str	r3, [r4, #0]
 800eb8e:	bd38      	pop	{r3, r4, r5, pc}
 800eb90:	20004608 	.word	0x20004608

0800eb94 <_write_r>:
 800eb94:	b538      	push	{r3, r4, r5, lr}
 800eb96:	4d07      	ldr	r5, [pc, #28]	; (800ebb4 <_write_r+0x20>)
 800eb98:	4604      	mov	r4, r0
 800eb9a:	4608      	mov	r0, r1
 800eb9c:	4611      	mov	r1, r2
 800eb9e:	2200      	movs	r2, #0
 800eba0:	602a      	str	r2, [r5, #0]
 800eba2:	461a      	mov	r2, r3
 800eba4:	f7f3 ff55 	bl	8002a52 <_write>
 800eba8:	1c43      	adds	r3, r0, #1
 800ebaa:	d102      	bne.n	800ebb2 <_write_r+0x1e>
 800ebac:	682b      	ldr	r3, [r5, #0]
 800ebae:	b103      	cbz	r3, 800ebb2 <_write_r+0x1e>
 800ebb0:	6023      	str	r3, [r4, #0]
 800ebb2:	bd38      	pop	{r3, r4, r5, pc}
 800ebb4:	20004608 	.word	0x20004608

0800ebb8 <__errno>:
 800ebb8:	4b01      	ldr	r3, [pc, #4]	; (800ebc0 <__errno+0x8>)
 800ebba:	6818      	ldr	r0, [r3, #0]
 800ebbc:	4770      	bx	lr
 800ebbe:	bf00      	nop
 800ebc0:	20000194 	.word	0x20000194

0800ebc4 <__libc_init_array>:
 800ebc4:	b570      	push	{r4, r5, r6, lr}
 800ebc6:	4d0d      	ldr	r5, [pc, #52]	; (800ebfc <__libc_init_array+0x38>)
 800ebc8:	4c0d      	ldr	r4, [pc, #52]	; (800ec00 <__libc_init_array+0x3c>)
 800ebca:	1b64      	subs	r4, r4, r5
 800ebcc:	10a4      	asrs	r4, r4, #2
 800ebce:	2600      	movs	r6, #0
 800ebd0:	42a6      	cmp	r6, r4
 800ebd2:	d109      	bne.n	800ebe8 <__libc_init_array+0x24>
 800ebd4:	4d0b      	ldr	r5, [pc, #44]	; (800ec04 <__libc_init_array+0x40>)
 800ebd6:	4c0c      	ldr	r4, [pc, #48]	; (800ec08 <__libc_init_array+0x44>)
 800ebd8:	f001 f800 	bl	800fbdc <_init>
 800ebdc:	1b64      	subs	r4, r4, r5
 800ebde:	10a4      	asrs	r4, r4, #2
 800ebe0:	2600      	movs	r6, #0
 800ebe2:	42a6      	cmp	r6, r4
 800ebe4:	d105      	bne.n	800ebf2 <__libc_init_array+0x2e>
 800ebe6:	bd70      	pop	{r4, r5, r6, pc}
 800ebe8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebec:	4798      	blx	r3
 800ebee:	3601      	adds	r6, #1
 800ebf0:	e7ee      	b.n	800ebd0 <__libc_init_array+0xc>
 800ebf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebf6:	4798      	blx	r3
 800ebf8:	3601      	adds	r6, #1
 800ebfa:	e7f2      	b.n	800ebe2 <__libc_init_array+0x1e>
 800ebfc:	080105c0 	.word	0x080105c0
 800ec00:	080105c0 	.word	0x080105c0
 800ec04:	080105c0 	.word	0x080105c0
 800ec08:	080105c4 	.word	0x080105c4

0800ec0c <__retarget_lock_acquire_recursive>:
 800ec0c:	4770      	bx	lr

0800ec0e <__retarget_lock_release_recursive>:
 800ec0e:	4770      	bx	lr

0800ec10 <strcpy>:
 800ec10:	4603      	mov	r3, r0
 800ec12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec16:	f803 2b01 	strb.w	r2, [r3], #1
 800ec1a:	2a00      	cmp	r2, #0
 800ec1c:	d1f9      	bne.n	800ec12 <strcpy+0x2>
 800ec1e:	4770      	bx	lr

0800ec20 <__assert_func>:
 800ec20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec22:	4614      	mov	r4, r2
 800ec24:	461a      	mov	r2, r3
 800ec26:	4b09      	ldr	r3, [pc, #36]	; (800ec4c <__assert_func+0x2c>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	4605      	mov	r5, r0
 800ec2c:	68d8      	ldr	r0, [r3, #12]
 800ec2e:	b14c      	cbz	r4, 800ec44 <__assert_func+0x24>
 800ec30:	4b07      	ldr	r3, [pc, #28]	; (800ec50 <__assert_func+0x30>)
 800ec32:	9100      	str	r1, [sp, #0]
 800ec34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec38:	4906      	ldr	r1, [pc, #24]	; (800ec54 <__assert_func+0x34>)
 800ec3a:	462b      	mov	r3, r5
 800ec3c:	f000 fca4 	bl	800f588 <fiprintf>
 800ec40:	f000 fcec 	bl	800f61c <abort>
 800ec44:	4b04      	ldr	r3, [pc, #16]	; (800ec58 <__assert_func+0x38>)
 800ec46:	461c      	mov	r4, r3
 800ec48:	e7f3      	b.n	800ec32 <__assert_func+0x12>
 800ec4a:	bf00      	nop
 800ec4c:	20000194 	.word	0x20000194
 800ec50:	08010547 	.word	0x08010547
 800ec54:	08010554 	.word	0x08010554
 800ec58:	08010582 	.word	0x08010582

0800ec5c <_free_r>:
 800ec5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec5e:	2900      	cmp	r1, #0
 800ec60:	d044      	beq.n	800ecec <_free_r+0x90>
 800ec62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec66:	9001      	str	r0, [sp, #4]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	f1a1 0404 	sub.w	r4, r1, #4
 800ec6e:	bfb8      	it	lt
 800ec70:	18e4      	addlt	r4, r4, r3
 800ec72:	f000 f8e7 	bl	800ee44 <__malloc_lock>
 800ec76:	4a1e      	ldr	r2, [pc, #120]	; (800ecf0 <_free_r+0x94>)
 800ec78:	9801      	ldr	r0, [sp, #4]
 800ec7a:	6813      	ldr	r3, [r2, #0]
 800ec7c:	b933      	cbnz	r3, 800ec8c <_free_r+0x30>
 800ec7e:	6063      	str	r3, [r4, #4]
 800ec80:	6014      	str	r4, [r2, #0]
 800ec82:	b003      	add	sp, #12
 800ec84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec88:	f000 b8e2 	b.w	800ee50 <__malloc_unlock>
 800ec8c:	42a3      	cmp	r3, r4
 800ec8e:	d908      	bls.n	800eca2 <_free_r+0x46>
 800ec90:	6825      	ldr	r5, [r4, #0]
 800ec92:	1961      	adds	r1, r4, r5
 800ec94:	428b      	cmp	r3, r1
 800ec96:	bf01      	itttt	eq
 800ec98:	6819      	ldreq	r1, [r3, #0]
 800ec9a:	685b      	ldreq	r3, [r3, #4]
 800ec9c:	1949      	addeq	r1, r1, r5
 800ec9e:	6021      	streq	r1, [r4, #0]
 800eca0:	e7ed      	b.n	800ec7e <_free_r+0x22>
 800eca2:	461a      	mov	r2, r3
 800eca4:	685b      	ldr	r3, [r3, #4]
 800eca6:	b10b      	cbz	r3, 800ecac <_free_r+0x50>
 800eca8:	42a3      	cmp	r3, r4
 800ecaa:	d9fa      	bls.n	800eca2 <_free_r+0x46>
 800ecac:	6811      	ldr	r1, [r2, #0]
 800ecae:	1855      	adds	r5, r2, r1
 800ecb0:	42a5      	cmp	r5, r4
 800ecb2:	d10b      	bne.n	800eccc <_free_r+0x70>
 800ecb4:	6824      	ldr	r4, [r4, #0]
 800ecb6:	4421      	add	r1, r4
 800ecb8:	1854      	adds	r4, r2, r1
 800ecba:	42a3      	cmp	r3, r4
 800ecbc:	6011      	str	r1, [r2, #0]
 800ecbe:	d1e0      	bne.n	800ec82 <_free_r+0x26>
 800ecc0:	681c      	ldr	r4, [r3, #0]
 800ecc2:	685b      	ldr	r3, [r3, #4]
 800ecc4:	6053      	str	r3, [r2, #4]
 800ecc6:	440c      	add	r4, r1
 800ecc8:	6014      	str	r4, [r2, #0]
 800ecca:	e7da      	b.n	800ec82 <_free_r+0x26>
 800eccc:	d902      	bls.n	800ecd4 <_free_r+0x78>
 800ecce:	230c      	movs	r3, #12
 800ecd0:	6003      	str	r3, [r0, #0]
 800ecd2:	e7d6      	b.n	800ec82 <_free_r+0x26>
 800ecd4:	6825      	ldr	r5, [r4, #0]
 800ecd6:	1961      	adds	r1, r4, r5
 800ecd8:	428b      	cmp	r3, r1
 800ecda:	bf04      	itt	eq
 800ecdc:	6819      	ldreq	r1, [r3, #0]
 800ecde:	685b      	ldreq	r3, [r3, #4]
 800ece0:	6063      	str	r3, [r4, #4]
 800ece2:	bf04      	itt	eq
 800ece4:	1949      	addeq	r1, r1, r5
 800ece6:	6021      	streq	r1, [r4, #0]
 800ece8:	6054      	str	r4, [r2, #4]
 800ecea:	e7ca      	b.n	800ec82 <_free_r+0x26>
 800ecec:	b003      	add	sp, #12
 800ecee:	bd30      	pop	{r4, r5, pc}
 800ecf0:	20004610 	.word	0x20004610

0800ecf4 <malloc>:
 800ecf4:	4b02      	ldr	r3, [pc, #8]	; (800ed00 <malloc+0xc>)
 800ecf6:	4601      	mov	r1, r0
 800ecf8:	6818      	ldr	r0, [r3, #0]
 800ecfa:	f000 b823 	b.w	800ed44 <_malloc_r>
 800ecfe:	bf00      	nop
 800ed00:	20000194 	.word	0x20000194

0800ed04 <sbrk_aligned>:
 800ed04:	b570      	push	{r4, r5, r6, lr}
 800ed06:	4e0e      	ldr	r6, [pc, #56]	; (800ed40 <sbrk_aligned+0x3c>)
 800ed08:	460c      	mov	r4, r1
 800ed0a:	6831      	ldr	r1, [r6, #0]
 800ed0c:	4605      	mov	r5, r0
 800ed0e:	b911      	cbnz	r1, 800ed16 <sbrk_aligned+0x12>
 800ed10:	f000 fc66 	bl	800f5e0 <_sbrk_r>
 800ed14:	6030      	str	r0, [r6, #0]
 800ed16:	4621      	mov	r1, r4
 800ed18:	4628      	mov	r0, r5
 800ed1a:	f000 fc61 	bl	800f5e0 <_sbrk_r>
 800ed1e:	1c43      	adds	r3, r0, #1
 800ed20:	d00a      	beq.n	800ed38 <sbrk_aligned+0x34>
 800ed22:	1cc4      	adds	r4, r0, #3
 800ed24:	f024 0403 	bic.w	r4, r4, #3
 800ed28:	42a0      	cmp	r0, r4
 800ed2a:	d007      	beq.n	800ed3c <sbrk_aligned+0x38>
 800ed2c:	1a21      	subs	r1, r4, r0
 800ed2e:	4628      	mov	r0, r5
 800ed30:	f000 fc56 	bl	800f5e0 <_sbrk_r>
 800ed34:	3001      	adds	r0, #1
 800ed36:	d101      	bne.n	800ed3c <sbrk_aligned+0x38>
 800ed38:	f04f 34ff 	mov.w	r4, #4294967295
 800ed3c:	4620      	mov	r0, r4
 800ed3e:	bd70      	pop	{r4, r5, r6, pc}
 800ed40:	20004614 	.word	0x20004614

0800ed44 <_malloc_r>:
 800ed44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed48:	1ccd      	adds	r5, r1, #3
 800ed4a:	f025 0503 	bic.w	r5, r5, #3
 800ed4e:	3508      	adds	r5, #8
 800ed50:	2d0c      	cmp	r5, #12
 800ed52:	bf38      	it	cc
 800ed54:	250c      	movcc	r5, #12
 800ed56:	2d00      	cmp	r5, #0
 800ed58:	4607      	mov	r7, r0
 800ed5a:	db01      	blt.n	800ed60 <_malloc_r+0x1c>
 800ed5c:	42a9      	cmp	r1, r5
 800ed5e:	d905      	bls.n	800ed6c <_malloc_r+0x28>
 800ed60:	230c      	movs	r3, #12
 800ed62:	603b      	str	r3, [r7, #0]
 800ed64:	2600      	movs	r6, #0
 800ed66:	4630      	mov	r0, r6
 800ed68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ee40 <_malloc_r+0xfc>
 800ed70:	f000 f868 	bl	800ee44 <__malloc_lock>
 800ed74:	f8d8 3000 	ldr.w	r3, [r8]
 800ed78:	461c      	mov	r4, r3
 800ed7a:	bb5c      	cbnz	r4, 800edd4 <_malloc_r+0x90>
 800ed7c:	4629      	mov	r1, r5
 800ed7e:	4638      	mov	r0, r7
 800ed80:	f7ff ffc0 	bl	800ed04 <sbrk_aligned>
 800ed84:	1c43      	adds	r3, r0, #1
 800ed86:	4604      	mov	r4, r0
 800ed88:	d155      	bne.n	800ee36 <_malloc_r+0xf2>
 800ed8a:	f8d8 4000 	ldr.w	r4, [r8]
 800ed8e:	4626      	mov	r6, r4
 800ed90:	2e00      	cmp	r6, #0
 800ed92:	d145      	bne.n	800ee20 <_malloc_r+0xdc>
 800ed94:	2c00      	cmp	r4, #0
 800ed96:	d048      	beq.n	800ee2a <_malloc_r+0xe6>
 800ed98:	6823      	ldr	r3, [r4, #0]
 800ed9a:	4631      	mov	r1, r6
 800ed9c:	4638      	mov	r0, r7
 800ed9e:	eb04 0903 	add.w	r9, r4, r3
 800eda2:	f000 fc1d 	bl	800f5e0 <_sbrk_r>
 800eda6:	4581      	cmp	r9, r0
 800eda8:	d13f      	bne.n	800ee2a <_malloc_r+0xe6>
 800edaa:	6821      	ldr	r1, [r4, #0]
 800edac:	1a6d      	subs	r5, r5, r1
 800edae:	4629      	mov	r1, r5
 800edb0:	4638      	mov	r0, r7
 800edb2:	f7ff ffa7 	bl	800ed04 <sbrk_aligned>
 800edb6:	3001      	adds	r0, #1
 800edb8:	d037      	beq.n	800ee2a <_malloc_r+0xe6>
 800edba:	6823      	ldr	r3, [r4, #0]
 800edbc:	442b      	add	r3, r5
 800edbe:	6023      	str	r3, [r4, #0]
 800edc0:	f8d8 3000 	ldr.w	r3, [r8]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d038      	beq.n	800ee3a <_malloc_r+0xf6>
 800edc8:	685a      	ldr	r2, [r3, #4]
 800edca:	42a2      	cmp	r2, r4
 800edcc:	d12b      	bne.n	800ee26 <_malloc_r+0xe2>
 800edce:	2200      	movs	r2, #0
 800edd0:	605a      	str	r2, [r3, #4]
 800edd2:	e00f      	b.n	800edf4 <_malloc_r+0xb0>
 800edd4:	6822      	ldr	r2, [r4, #0]
 800edd6:	1b52      	subs	r2, r2, r5
 800edd8:	d41f      	bmi.n	800ee1a <_malloc_r+0xd6>
 800edda:	2a0b      	cmp	r2, #11
 800eddc:	d917      	bls.n	800ee0e <_malloc_r+0xca>
 800edde:	1961      	adds	r1, r4, r5
 800ede0:	42a3      	cmp	r3, r4
 800ede2:	6025      	str	r5, [r4, #0]
 800ede4:	bf18      	it	ne
 800ede6:	6059      	strne	r1, [r3, #4]
 800ede8:	6863      	ldr	r3, [r4, #4]
 800edea:	bf08      	it	eq
 800edec:	f8c8 1000 	streq.w	r1, [r8]
 800edf0:	5162      	str	r2, [r4, r5]
 800edf2:	604b      	str	r3, [r1, #4]
 800edf4:	4638      	mov	r0, r7
 800edf6:	f104 060b 	add.w	r6, r4, #11
 800edfa:	f000 f829 	bl	800ee50 <__malloc_unlock>
 800edfe:	f026 0607 	bic.w	r6, r6, #7
 800ee02:	1d23      	adds	r3, r4, #4
 800ee04:	1af2      	subs	r2, r6, r3
 800ee06:	d0ae      	beq.n	800ed66 <_malloc_r+0x22>
 800ee08:	1b9b      	subs	r3, r3, r6
 800ee0a:	50a3      	str	r3, [r4, r2]
 800ee0c:	e7ab      	b.n	800ed66 <_malloc_r+0x22>
 800ee0e:	42a3      	cmp	r3, r4
 800ee10:	6862      	ldr	r2, [r4, #4]
 800ee12:	d1dd      	bne.n	800edd0 <_malloc_r+0x8c>
 800ee14:	f8c8 2000 	str.w	r2, [r8]
 800ee18:	e7ec      	b.n	800edf4 <_malloc_r+0xb0>
 800ee1a:	4623      	mov	r3, r4
 800ee1c:	6864      	ldr	r4, [r4, #4]
 800ee1e:	e7ac      	b.n	800ed7a <_malloc_r+0x36>
 800ee20:	4634      	mov	r4, r6
 800ee22:	6876      	ldr	r6, [r6, #4]
 800ee24:	e7b4      	b.n	800ed90 <_malloc_r+0x4c>
 800ee26:	4613      	mov	r3, r2
 800ee28:	e7cc      	b.n	800edc4 <_malloc_r+0x80>
 800ee2a:	230c      	movs	r3, #12
 800ee2c:	603b      	str	r3, [r7, #0]
 800ee2e:	4638      	mov	r0, r7
 800ee30:	f000 f80e 	bl	800ee50 <__malloc_unlock>
 800ee34:	e797      	b.n	800ed66 <_malloc_r+0x22>
 800ee36:	6025      	str	r5, [r4, #0]
 800ee38:	e7dc      	b.n	800edf4 <_malloc_r+0xb0>
 800ee3a:	605b      	str	r3, [r3, #4]
 800ee3c:	deff      	udf	#255	; 0xff
 800ee3e:	bf00      	nop
 800ee40:	20004610 	.word	0x20004610

0800ee44 <__malloc_lock>:
 800ee44:	4801      	ldr	r0, [pc, #4]	; (800ee4c <__malloc_lock+0x8>)
 800ee46:	f7ff bee1 	b.w	800ec0c <__retarget_lock_acquire_recursive>
 800ee4a:	bf00      	nop
 800ee4c:	2000460c 	.word	0x2000460c

0800ee50 <__malloc_unlock>:
 800ee50:	4801      	ldr	r0, [pc, #4]	; (800ee58 <__malloc_unlock+0x8>)
 800ee52:	f7ff bedc 	b.w	800ec0e <__retarget_lock_release_recursive>
 800ee56:	bf00      	nop
 800ee58:	2000460c 	.word	0x2000460c

0800ee5c <__ssputs_r>:
 800ee5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee60:	688e      	ldr	r6, [r1, #8]
 800ee62:	461f      	mov	r7, r3
 800ee64:	42be      	cmp	r6, r7
 800ee66:	680b      	ldr	r3, [r1, #0]
 800ee68:	4682      	mov	sl, r0
 800ee6a:	460c      	mov	r4, r1
 800ee6c:	4690      	mov	r8, r2
 800ee6e:	d82c      	bhi.n	800eeca <__ssputs_r+0x6e>
 800ee70:	898a      	ldrh	r2, [r1, #12]
 800ee72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ee76:	d026      	beq.n	800eec6 <__ssputs_r+0x6a>
 800ee78:	6965      	ldr	r5, [r4, #20]
 800ee7a:	6909      	ldr	r1, [r1, #16]
 800ee7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee80:	eba3 0901 	sub.w	r9, r3, r1
 800ee84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ee88:	1c7b      	adds	r3, r7, #1
 800ee8a:	444b      	add	r3, r9
 800ee8c:	106d      	asrs	r5, r5, #1
 800ee8e:	429d      	cmp	r5, r3
 800ee90:	bf38      	it	cc
 800ee92:	461d      	movcc	r5, r3
 800ee94:	0553      	lsls	r3, r2, #21
 800ee96:	d527      	bpl.n	800eee8 <__ssputs_r+0x8c>
 800ee98:	4629      	mov	r1, r5
 800ee9a:	f7ff ff53 	bl	800ed44 <_malloc_r>
 800ee9e:	4606      	mov	r6, r0
 800eea0:	b360      	cbz	r0, 800eefc <__ssputs_r+0xa0>
 800eea2:	6921      	ldr	r1, [r4, #16]
 800eea4:	464a      	mov	r2, r9
 800eea6:	f000 fbab 	bl	800f600 <memcpy>
 800eeaa:	89a3      	ldrh	r3, [r4, #12]
 800eeac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eeb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eeb4:	81a3      	strh	r3, [r4, #12]
 800eeb6:	6126      	str	r6, [r4, #16]
 800eeb8:	6165      	str	r5, [r4, #20]
 800eeba:	444e      	add	r6, r9
 800eebc:	eba5 0509 	sub.w	r5, r5, r9
 800eec0:	6026      	str	r6, [r4, #0]
 800eec2:	60a5      	str	r5, [r4, #8]
 800eec4:	463e      	mov	r6, r7
 800eec6:	42be      	cmp	r6, r7
 800eec8:	d900      	bls.n	800eecc <__ssputs_r+0x70>
 800eeca:	463e      	mov	r6, r7
 800eecc:	6820      	ldr	r0, [r4, #0]
 800eece:	4632      	mov	r2, r6
 800eed0:	4641      	mov	r1, r8
 800eed2:	f000 fb6b 	bl	800f5ac <memmove>
 800eed6:	68a3      	ldr	r3, [r4, #8]
 800eed8:	1b9b      	subs	r3, r3, r6
 800eeda:	60a3      	str	r3, [r4, #8]
 800eedc:	6823      	ldr	r3, [r4, #0]
 800eede:	4433      	add	r3, r6
 800eee0:	6023      	str	r3, [r4, #0]
 800eee2:	2000      	movs	r0, #0
 800eee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eee8:	462a      	mov	r2, r5
 800eeea:	f000 fb9e 	bl	800f62a <_realloc_r>
 800eeee:	4606      	mov	r6, r0
 800eef0:	2800      	cmp	r0, #0
 800eef2:	d1e0      	bne.n	800eeb6 <__ssputs_r+0x5a>
 800eef4:	6921      	ldr	r1, [r4, #16]
 800eef6:	4650      	mov	r0, sl
 800eef8:	f7ff feb0 	bl	800ec5c <_free_r>
 800eefc:	230c      	movs	r3, #12
 800eefe:	f8ca 3000 	str.w	r3, [sl]
 800ef02:	89a3      	ldrh	r3, [r4, #12]
 800ef04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef08:	81a3      	strh	r3, [r4, #12]
 800ef0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef0e:	e7e9      	b.n	800eee4 <__ssputs_r+0x88>

0800ef10 <_svfiprintf_r>:
 800ef10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef14:	4698      	mov	r8, r3
 800ef16:	898b      	ldrh	r3, [r1, #12]
 800ef18:	061b      	lsls	r3, r3, #24
 800ef1a:	b09d      	sub	sp, #116	; 0x74
 800ef1c:	4607      	mov	r7, r0
 800ef1e:	460d      	mov	r5, r1
 800ef20:	4614      	mov	r4, r2
 800ef22:	d50e      	bpl.n	800ef42 <_svfiprintf_r+0x32>
 800ef24:	690b      	ldr	r3, [r1, #16]
 800ef26:	b963      	cbnz	r3, 800ef42 <_svfiprintf_r+0x32>
 800ef28:	2140      	movs	r1, #64	; 0x40
 800ef2a:	f7ff ff0b 	bl	800ed44 <_malloc_r>
 800ef2e:	6028      	str	r0, [r5, #0]
 800ef30:	6128      	str	r0, [r5, #16]
 800ef32:	b920      	cbnz	r0, 800ef3e <_svfiprintf_r+0x2e>
 800ef34:	230c      	movs	r3, #12
 800ef36:	603b      	str	r3, [r7, #0]
 800ef38:	f04f 30ff 	mov.w	r0, #4294967295
 800ef3c:	e0d0      	b.n	800f0e0 <_svfiprintf_r+0x1d0>
 800ef3e:	2340      	movs	r3, #64	; 0x40
 800ef40:	616b      	str	r3, [r5, #20]
 800ef42:	2300      	movs	r3, #0
 800ef44:	9309      	str	r3, [sp, #36]	; 0x24
 800ef46:	2320      	movs	r3, #32
 800ef48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef50:	2330      	movs	r3, #48	; 0x30
 800ef52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f0f8 <_svfiprintf_r+0x1e8>
 800ef56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef5a:	f04f 0901 	mov.w	r9, #1
 800ef5e:	4623      	mov	r3, r4
 800ef60:	469a      	mov	sl, r3
 800ef62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef66:	b10a      	cbz	r2, 800ef6c <_svfiprintf_r+0x5c>
 800ef68:	2a25      	cmp	r2, #37	; 0x25
 800ef6a:	d1f9      	bne.n	800ef60 <_svfiprintf_r+0x50>
 800ef6c:	ebba 0b04 	subs.w	fp, sl, r4
 800ef70:	d00b      	beq.n	800ef8a <_svfiprintf_r+0x7a>
 800ef72:	465b      	mov	r3, fp
 800ef74:	4622      	mov	r2, r4
 800ef76:	4629      	mov	r1, r5
 800ef78:	4638      	mov	r0, r7
 800ef7a:	f7ff ff6f 	bl	800ee5c <__ssputs_r>
 800ef7e:	3001      	adds	r0, #1
 800ef80:	f000 80a9 	beq.w	800f0d6 <_svfiprintf_r+0x1c6>
 800ef84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef86:	445a      	add	r2, fp
 800ef88:	9209      	str	r2, [sp, #36]	; 0x24
 800ef8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	f000 80a1 	beq.w	800f0d6 <_svfiprintf_r+0x1c6>
 800ef94:	2300      	movs	r3, #0
 800ef96:	f04f 32ff 	mov.w	r2, #4294967295
 800ef9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef9e:	f10a 0a01 	add.w	sl, sl, #1
 800efa2:	9304      	str	r3, [sp, #16]
 800efa4:	9307      	str	r3, [sp, #28]
 800efa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efaa:	931a      	str	r3, [sp, #104]	; 0x68
 800efac:	4654      	mov	r4, sl
 800efae:	2205      	movs	r2, #5
 800efb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efb4:	4850      	ldr	r0, [pc, #320]	; (800f0f8 <_svfiprintf_r+0x1e8>)
 800efb6:	f7f1 f92b 	bl	8000210 <memchr>
 800efba:	9a04      	ldr	r2, [sp, #16]
 800efbc:	b9d8      	cbnz	r0, 800eff6 <_svfiprintf_r+0xe6>
 800efbe:	06d0      	lsls	r0, r2, #27
 800efc0:	bf44      	itt	mi
 800efc2:	2320      	movmi	r3, #32
 800efc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efc8:	0711      	lsls	r1, r2, #28
 800efca:	bf44      	itt	mi
 800efcc:	232b      	movmi	r3, #43	; 0x2b
 800efce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efd2:	f89a 3000 	ldrb.w	r3, [sl]
 800efd6:	2b2a      	cmp	r3, #42	; 0x2a
 800efd8:	d015      	beq.n	800f006 <_svfiprintf_r+0xf6>
 800efda:	9a07      	ldr	r2, [sp, #28]
 800efdc:	4654      	mov	r4, sl
 800efde:	2000      	movs	r0, #0
 800efe0:	f04f 0c0a 	mov.w	ip, #10
 800efe4:	4621      	mov	r1, r4
 800efe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efea:	3b30      	subs	r3, #48	; 0x30
 800efec:	2b09      	cmp	r3, #9
 800efee:	d94d      	bls.n	800f08c <_svfiprintf_r+0x17c>
 800eff0:	b1b0      	cbz	r0, 800f020 <_svfiprintf_r+0x110>
 800eff2:	9207      	str	r2, [sp, #28]
 800eff4:	e014      	b.n	800f020 <_svfiprintf_r+0x110>
 800eff6:	eba0 0308 	sub.w	r3, r0, r8
 800effa:	fa09 f303 	lsl.w	r3, r9, r3
 800effe:	4313      	orrs	r3, r2
 800f000:	9304      	str	r3, [sp, #16]
 800f002:	46a2      	mov	sl, r4
 800f004:	e7d2      	b.n	800efac <_svfiprintf_r+0x9c>
 800f006:	9b03      	ldr	r3, [sp, #12]
 800f008:	1d19      	adds	r1, r3, #4
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	9103      	str	r1, [sp, #12]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	bfbb      	ittet	lt
 800f012:	425b      	neglt	r3, r3
 800f014:	f042 0202 	orrlt.w	r2, r2, #2
 800f018:	9307      	strge	r3, [sp, #28]
 800f01a:	9307      	strlt	r3, [sp, #28]
 800f01c:	bfb8      	it	lt
 800f01e:	9204      	strlt	r2, [sp, #16]
 800f020:	7823      	ldrb	r3, [r4, #0]
 800f022:	2b2e      	cmp	r3, #46	; 0x2e
 800f024:	d10c      	bne.n	800f040 <_svfiprintf_r+0x130>
 800f026:	7863      	ldrb	r3, [r4, #1]
 800f028:	2b2a      	cmp	r3, #42	; 0x2a
 800f02a:	d134      	bne.n	800f096 <_svfiprintf_r+0x186>
 800f02c:	9b03      	ldr	r3, [sp, #12]
 800f02e:	1d1a      	adds	r2, r3, #4
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	9203      	str	r2, [sp, #12]
 800f034:	2b00      	cmp	r3, #0
 800f036:	bfb8      	it	lt
 800f038:	f04f 33ff 	movlt.w	r3, #4294967295
 800f03c:	3402      	adds	r4, #2
 800f03e:	9305      	str	r3, [sp, #20]
 800f040:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f108 <_svfiprintf_r+0x1f8>
 800f044:	7821      	ldrb	r1, [r4, #0]
 800f046:	2203      	movs	r2, #3
 800f048:	4650      	mov	r0, sl
 800f04a:	f7f1 f8e1 	bl	8000210 <memchr>
 800f04e:	b138      	cbz	r0, 800f060 <_svfiprintf_r+0x150>
 800f050:	9b04      	ldr	r3, [sp, #16]
 800f052:	eba0 000a 	sub.w	r0, r0, sl
 800f056:	2240      	movs	r2, #64	; 0x40
 800f058:	4082      	lsls	r2, r0
 800f05a:	4313      	orrs	r3, r2
 800f05c:	3401      	adds	r4, #1
 800f05e:	9304      	str	r3, [sp, #16]
 800f060:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f064:	4825      	ldr	r0, [pc, #148]	; (800f0fc <_svfiprintf_r+0x1ec>)
 800f066:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f06a:	2206      	movs	r2, #6
 800f06c:	f7f1 f8d0 	bl	8000210 <memchr>
 800f070:	2800      	cmp	r0, #0
 800f072:	d038      	beq.n	800f0e6 <_svfiprintf_r+0x1d6>
 800f074:	4b22      	ldr	r3, [pc, #136]	; (800f100 <_svfiprintf_r+0x1f0>)
 800f076:	bb1b      	cbnz	r3, 800f0c0 <_svfiprintf_r+0x1b0>
 800f078:	9b03      	ldr	r3, [sp, #12]
 800f07a:	3307      	adds	r3, #7
 800f07c:	f023 0307 	bic.w	r3, r3, #7
 800f080:	3308      	adds	r3, #8
 800f082:	9303      	str	r3, [sp, #12]
 800f084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f086:	4433      	add	r3, r6
 800f088:	9309      	str	r3, [sp, #36]	; 0x24
 800f08a:	e768      	b.n	800ef5e <_svfiprintf_r+0x4e>
 800f08c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f090:	460c      	mov	r4, r1
 800f092:	2001      	movs	r0, #1
 800f094:	e7a6      	b.n	800efe4 <_svfiprintf_r+0xd4>
 800f096:	2300      	movs	r3, #0
 800f098:	3401      	adds	r4, #1
 800f09a:	9305      	str	r3, [sp, #20]
 800f09c:	4619      	mov	r1, r3
 800f09e:	f04f 0c0a 	mov.w	ip, #10
 800f0a2:	4620      	mov	r0, r4
 800f0a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0a8:	3a30      	subs	r2, #48	; 0x30
 800f0aa:	2a09      	cmp	r2, #9
 800f0ac:	d903      	bls.n	800f0b6 <_svfiprintf_r+0x1a6>
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d0c6      	beq.n	800f040 <_svfiprintf_r+0x130>
 800f0b2:	9105      	str	r1, [sp, #20]
 800f0b4:	e7c4      	b.n	800f040 <_svfiprintf_r+0x130>
 800f0b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0ba:	4604      	mov	r4, r0
 800f0bc:	2301      	movs	r3, #1
 800f0be:	e7f0      	b.n	800f0a2 <_svfiprintf_r+0x192>
 800f0c0:	ab03      	add	r3, sp, #12
 800f0c2:	9300      	str	r3, [sp, #0]
 800f0c4:	462a      	mov	r2, r5
 800f0c6:	4b0f      	ldr	r3, [pc, #60]	; (800f104 <_svfiprintf_r+0x1f4>)
 800f0c8:	a904      	add	r1, sp, #16
 800f0ca:	4638      	mov	r0, r7
 800f0cc:	f3af 8000 	nop.w
 800f0d0:	1c42      	adds	r2, r0, #1
 800f0d2:	4606      	mov	r6, r0
 800f0d4:	d1d6      	bne.n	800f084 <_svfiprintf_r+0x174>
 800f0d6:	89ab      	ldrh	r3, [r5, #12]
 800f0d8:	065b      	lsls	r3, r3, #25
 800f0da:	f53f af2d 	bmi.w	800ef38 <_svfiprintf_r+0x28>
 800f0de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0e0:	b01d      	add	sp, #116	; 0x74
 800f0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0e6:	ab03      	add	r3, sp, #12
 800f0e8:	9300      	str	r3, [sp, #0]
 800f0ea:	462a      	mov	r2, r5
 800f0ec:	4b05      	ldr	r3, [pc, #20]	; (800f104 <_svfiprintf_r+0x1f4>)
 800f0ee:	a904      	add	r1, sp, #16
 800f0f0:	4638      	mov	r0, r7
 800f0f2:	f000 f879 	bl	800f1e8 <_printf_i>
 800f0f6:	e7eb      	b.n	800f0d0 <_svfiprintf_r+0x1c0>
 800f0f8:	08010583 	.word	0x08010583
 800f0fc:	0801058d 	.word	0x0801058d
 800f100:	00000000 	.word	0x00000000
 800f104:	0800ee5d 	.word	0x0800ee5d
 800f108:	08010589 	.word	0x08010589

0800f10c <_printf_common>:
 800f10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f110:	4616      	mov	r6, r2
 800f112:	4699      	mov	r9, r3
 800f114:	688a      	ldr	r2, [r1, #8]
 800f116:	690b      	ldr	r3, [r1, #16]
 800f118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f11c:	4293      	cmp	r3, r2
 800f11e:	bfb8      	it	lt
 800f120:	4613      	movlt	r3, r2
 800f122:	6033      	str	r3, [r6, #0]
 800f124:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f128:	4607      	mov	r7, r0
 800f12a:	460c      	mov	r4, r1
 800f12c:	b10a      	cbz	r2, 800f132 <_printf_common+0x26>
 800f12e:	3301      	adds	r3, #1
 800f130:	6033      	str	r3, [r6, #0]
 800f132:	6823      	ldr	r3, [r4, #0]
 800f134:	0699      	lsls	r1, r3, #26
 800f136:	bf42      	ittt	mi
 800f138:	6833      	ldrmi	r3, [r6, #0]
 800f13a:	3302      	addmi	r3, #2
 800f13c:	6033      	strmi	r3, [r6, #0]
 800f13e:	6825      	ldr	r5, [r4, #0]
 800f140:	f015 0506 	ands.w	r5, r5, #6
 800f144:	d106      	bne.n	800f154 <_printf_common+0x48>
 800f146:	f104 0a19 	add.w	sl, r4, #25
 800f14a:	68e3      	ldr	r3, [r4, #12]
 800f14c:	6832      	ldr	r2, [r6, #0]
 800f14e:	1a9b      	subs	r3, r3, r2
 800f150:	42ab      	cmp	r3, r5
 800f152:	dc26      	bgt.n	800f1a2 <_printf_common+0x96>
 800f154:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f158:	1e13      	subs	r3, r2, #0
 800f15a:	6822      	ldr	r2, [r4, #0]
 800f15c:	bf18      	it	ne
 800f15e:	2301      	movne	r3, #1
 800f160:	0692      	lsls	r2, r2, #26
 800f162:	d42b      	bmi.n	800f1bc <_printf_common+0xb0>
 800f164:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f168:	4649      	mov	r1, r9
 800f16a:	4638      	mov	r0, r7
 800f16c:	47c0      	blx	r8
 800f16e:	3001      	adds	r0, #1
 800f170:	d01e      	beq.n	800f1b0 <_printf_common+0xa4>
 800f172:	6823      	ldr	r3, [r4, #0]
 800f174:	6922      	ldr	r2, [r4, #16]
 800f176:	f003 0306 	and.w	r3, r3, #6
 800f17a:	2b04      	cmp	r3, #4
 800f17c:	bf02      	ittt	eq
 800f17e:	68e5      	ldreq	r5, [r4, #12]
 800f180:	6833      	ldreq	r3, [r6, #0]
 800f182:	1aed      	subeq	r5, r5, r3
 800f184:	68a3      	ldr	r3, [r4, #8]
 800f186:	bf0c      	ite	eq
 800f188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f18c:	2500      	movne	r5, #0
 800f18e:	4293      	cmp	r3, r2
 800f190:	bfc4      	itt	gt
 800f192:	1a9b      	subgt	r3, r3, r2
 800f194:	18ed      	addgt	r5, r5, r3
 800f196:	2600      	movs	r6, #0
 800f198:	341a      	adds	r4, #26
 800f19a:	42b5      	cmp	r5, r6
 800f19c:	d11a      	bne.n	800f1d4 <_printf_common+0xc8>
 800f19e:	2000      	movs	r0, #0
 800f1a0:	e008      	b.n	800f1b4 <_printf_common+0xa8>
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	4652      	mov	r2, sl
 800f1a6:	4649      	mov	r1, r9
 800f1a8:	4638      	mov	r0, r7
 800f1aa:	47c0      	blx	r8
 800f1ac:	3001      	adds	r0, #1
 800f1ae:	d103      	bne.n	800f1b8 <_printf_common+0xac>
 800f1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1b8:	3501      	adds	r5, #1
 800f1ba:	e7c6      	b.n	800f14a <_printf_common+0x3e>
 800f1bc:	18e1      	adds	r1, r4, r3
 800f1be:	1c5a      	adds	r2, r3, #1
 800f1c0:	2030      	movs	r0, #48	; 0x30
 800f1c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f1c6:	4422      	add	r2, r4
 800f1c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f1cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f1d0:	3302      	adds	r3, #2
 800f1d2:	e7c7      	b.n	800f164 <_printf_common+0x58>
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	4622      	mov	r2, r4
 800f1d8:	4649      	mov	r1, r9
 800f1da:	4638      	mov	r0, r7
 800f1dc:	47c0      	blx	r8
 800f1de:	3001      	adds	r0, #1
 800f1e0:	d0e6      	beq.n	800f1b0 <_printf_common+0xa4>
 800f1e2:	3601      	adds	r6, #1
 800f1e4:	e7d9      	b.n	800f19a <_printf_common+0x8e>
	...

0800f1e8 <_printf_i>:
 800f1e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f1ec:	7e0f      	ldrb	r7, [r1, #24]
 800f1ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f1f0:	2f78      	cmp	r7, #120	; 0x78
 800f1f2:	4691      	mov	r9, r2
 800f1f4:	4680      	mov	r8, r0
 800f1f6:	460c      	mov	r4, r1
 800f1f8:	469a      	mov	sl, r3
 800f1fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f1fe:	d807      	bhi.n	800f210 <_printf_i+0x28>
 800f200:	2f62      	cmp	r7, #98	; 0x62
 800f202:	d80a      	bhi.n	800f21a <_printf_i+0x32>
 800f204:	2f00      	cmp	r7, #0
 800f206:	f000 80d4 	beq.w	800f3b2 <_printf_i+0x1ca>
 800f20a:	2f58      	cmp	r7, #88	; 0x58
 800f20c:	f000 80c0 	beq.w	800f390 <_printf_i+0x1a8>
 800f210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f214:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f218:	e03a      	b.n	800f290 <_printf_i+0xa8>
 800f21a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f21e:	2b15      	cmp	r3, #21
 800f220:	d8f6      	bhi.n	800f210 <_printf_i+0x28>
 800f222:	a101      	add	r1, pc, #4	; (adr r1, 800f228 <_printf_i+0x40>)
 800f224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f228:	0800f281 	.word	0x0800f281
 800f22c:	0800f295 	.word	0x0800f295
 800f230:	0800f211 	.word	0x0800f211
 800f234:	0800f211 	.word	0x0800f211
 800f238:	0800f211 	.word	0x0800f211
 800f23c:	0800f211 	.word	0x0800f211
 800f240:	0800f295 	.word	0x0800f295
 800f244:	0800f211 	.word	0x0800f211
 800f248:	0800f211 	.word	0x0800f211
 800f24c:	0800f211 	.word	0x0800f211
 800f250:	0800f211 	.word	0x0800f211
 800f254:	0800f399 	.word	0x0800f399
 800f258:	0800f2c1 	.word	0x0800f2c1
 800f25c:	0800f353 	.word	0x0800f353
 800f260:	0800f211 	.word	0x0800f211
 800f264:	0800f211 	.word	0x0800f211
 800f268:	0800f3bb 	.word	0x0800f3bb
 800f26c:	0800f211 	.word	0x0800f211
 800f270:	0800f2c1 	.word	0x0800f2c1
 800f274:	0800f211 	.word	0x0800f211
 800f278:	0800f211 	.word	0x0800f211
 800f27c:	0800f35b 	.word	0x0800f35b
 800f280:	682b      	ldr	r3, [r5, #0]
 800f282:	1d1a      	adds	r2, r3, #4
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	602a      	str	r2, [r5, #0]
 800f288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f28c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f290:	2301      	movs	r3, #1
 800f292:	e09f      	b.n	800f3d4 <_printf_i+0x1ec>
 800f294:	6820      	ldr	r0, [r4, #0]
 800f296:	682b      	ldr	r3, [r5, #0]
 800f298:	0607      	lsls	r7, r0, #24
 800f29a:	f103 0104 	add.w	r1, r3, #4
 800f29e:	6029      	str	r1, [r5, #0]
 800f2a0:	d501      	bpl.n	800f2a6 <_printf_i+0xbe>
 800f2a2:	681e      	ldr	r6, [r3, #0]
 800f2a4:	e003      	b.n	800f2ae <_printf_i+0xc6>
 800f2a6:	0646      	lsls	r6, r0, #25
 800f2a8:	d5fb      	bpl.n	800f2a2 <_printf_i+0xba>
 800f2aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f2ae:	2e00      	cmp	r6, #0
 800f2b0:	da03      	bge.n	800f2ba <_printf_i+0xd2>
 800f2b2:	232d      	movs	r3, #45	; 0x2d
 800f2b4:	4276      	negs	r6, r6
 800f2b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f2ba:	485a      	ldr	r0, [pc, #360]	; (800f424 <_printf_i+0x23c>)
 800f2bc:	230a      	movs	r3, #10
 800f2be:	e012      	b.n	800f2e6 <_printf_i+0xfe>
 800f2c0:	682b      	ldr	r3, [r5, #0]
 800f2c2:	6820      	ldr	r0, [r4, #0]
 800f2c4:	1d19      	adds	r1, r3, #4
 800f2c6:	6029      	str	r1, [r5, #0]
 800f2c8:	0605      	lsls	r5, r0, #24
 800f2ca:	d501      	bpl.n	800f2d0 <_printf_i+0xe8>
 800f2cc:	681e      	ldr	r6, [r3, #0]
 800f2ce:	e002      	b.n	800f2d6 <_printf_i+0xee>
 800f2d0:	0641      	lsls	r1, r0, #25
 800f2d2:	d5fb      	bpl.n	800f2cc <_printf_i+0xe4>
 800f2d4:	881e      	ldrh	r6, [r3, #0]
 800f2d6:	4853      	ldr	r0, [pc, #332]	; (800f424 <_printf_i+0x23c>)
 800f2d8:	2f6f      	cmp	r7, #111	; 0x6f
 800f2da:	bf0c      	ite	eq
 800f2dc:	2308      	moveq	r3, #8
 800f2de:	230a      	movne	r3, #10
 800f2e0:	2100      	movs	r1, #0
 800f2e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f2e6:	6865      	ldr	r5, [r4, #4]
 800f2e8:	60a5      	str	r5, [r4, #8]
 800f2ea:	2d00      	cmp	r5, #0
 800f2ec:	bfa2      	ittt	ge
 800f2ee:	6821      	ldrge	r1, [r4, #0]
 800f2f0:	f021 0104 	bicge.w	r1, r1, #4
 800f2f4:	6021      	strge	r1, [r4, #0]
 800f2f6:	b90e      	cbnz	r6, 800f2fc <_printf_i+0x114>
 800f2f8:	2d00      	cmp	r5, #0
 800f2fa:	d04b      	beq.n	800f394 <_printf_i+0x1ac>
 800f2fc:	4615      	mov	r5, r2
 800f2fe:	fbb6 f1f3 	udiv	r1, r6, r3
 800f302:	fb03 6711 	mls	r7, r3, r1, r6
 800f306:	5dc7      	ldrb	r7, [r0, r7]
 800f308:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f30c:	4637      	mov	r7, r6
 800f30e:	42bb      	cmp	r3, r7
 800f310:	460e      	mov	r6, r1
 800f312:	d9f4      	bls.n	800f2fe <_printf_i+0x116>
 800f314:	2b08      	cmp	r3, #8
 800f316:	d10b      	bne.n	800f330 <_printf_i+0x148>
 800f318:	6823      	ldr	r3, [r4, #0]
 800f31a:	07de      	lsls	r6, r3, #31
 800f31c:	d508      	bpl.n	800f330 <_printf_i+0x148>
 800f31e:	6923      	ldr	r3, [r4, #16]
 800f320:	6861      	ldr	r1, [r4, #4]
 800f322:	4299      	cmp	r1, r3
 800f324:	bfde      	ittt	le
 800f326:	2330      	movle	r3, #48	; 0x30
 800f328:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f32c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f330:	1b52      	subs	r2, r2, r5
 800f332:	6122      	str	r2, [r4, #16]
 800f334:	f8cd a000 	str.w	sl, [sp]
 800f338:	464b      	mov	r3, r9
 800f33a:	aa03      	add	r2, sp, #12
 800f33c:	4621      	mov	r1, r4
 800f33e:	4640      	mov	r0, r8
 800f340:	f7ff fee4 	bl	800f10c <_printf_common>
 800f344:	3001      	adds	r0, #1
 800f346:	d14a      	bne.n	800f3de <_printf_i+0x1f6>
 800f348:	f04f 30ff 	mov.w	r0, #4294967295
 800f34c:	b004      	add	sp, #16
 800f34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f352:	6823      	ldr	r3, [r4, #0]
 800f354:	f043 0320 	orr.w	r3, r3, #32
 800f358:	6023      	str	r3, [r4, #0]
 800f35a:	4833      	ldr	r0, [pc, #204]	; (800f428 <_printf_i+0x240>)
 800f35c:	2778      	movs	r7, #120	; 0x78
 800f35e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f362:	6823      	ldr	r3, [r4, #0]
 800f364:	6829      	ldr	r1, [r5, #0]
 800f366:	061f      	lsls	r7, r3, #24
 800f368:	f851 6b04 	ldr.w	r6, [r1], #4
 800f36c:	d402      	bmi.n	800f374 <_printf_i+0x18c>
 800f36e:	065f      	lsls	r7, r3, #25
 800f370:	bf48      	it	mi
 800f372:	b2b6      	uxthmi	r6, r6
 800f374:	07df      	lsls	r7, r3, #31
 800f376:	bf48      	it	mi
 800f378:	f043 0320 	orrmi.w	r3, r3, #32
 800f37c:	6029      	str	r1, [r5, #0]
 800f37e:	bf48      	it	mi
 800f380:	6023      	strmi	r3, [r4, #0]
 800f382:	b91e      	cbnz	r6, 800f38c <_printf_i+0x1a4>
 800f384:	6823      	ldr	r3, [r4, #0]
 800f386:	f023 0320 	bic.w	r3, r3, #32
 800f38a:	6023      	str	r3, [r4, #0]
 800f38c:	2310      	movs	r3, #16
 800f38e:	e7a7      	b.n	800f2e0 <_printf_i+0xf8>
 800f390:	4824      	ldr	r0, [pc, #144]	; (800f424 <_printf_i+0x23c>)
 800f392:	e7e4      	b.n	800f35e <_printf_i+0x176>
 800f394:	4615      	mov	r5, r2
 800f396:	e7bd      	b.n	800f314 <_printf_i+0x12c>
 800f398:	682b      	ldr	r3, [r5, #0]
 800f39a:	6826      	ldr	r6, [r4, #0]
 800f39c:	6961      	ldr	r1, [r4, #20]
 800f39e:	1d18      	adds	r0, r3, #4
 800f3a0:	6028      	str	r0, [r5, #0]
 800f3a2:	0635      	lsls	r5, r6, #24
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	d501      	bpl.n	800f3ac <_printf_i+0x1c4>
 800f3a8:	6019      	str	r1, [r3, #0]
 800f3aa:	e002      	b.n	800f3b2 <_printf_i+0x1ca>
 800f3ac:	0670      	lsls	r0, r6, #25
 800f3ae:	d5fb      	bpl.n	800f3a8 <_printf_i+0x1c0>
 800f3b0:	8019      	strh	r1, [r3, #0]
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	6123      	str	r3, [r4, #16]
 800f3b6:	4615      	mov	r5, r2
 800f3b8:	e7bc      	b.n	800f334 <_printf_i+0x14c>
 800f3ba:	682b      	ldr	r3, [r5, #0]
 800f3bc:	1d1a      	adds	r2, r3, #4
 800f3be:	602a      	str	r2, [r5, #0]
 800f3c0:	681d      	ldr	r5, [r3, #0]
 800f3c2:	6862      	ldr	r2, [r4, #4]
 800f3c4:	2100      	movs	r1, #0
 800f3c6:	4628      	mov	r0, r5
 800f3c8:	f7f0 ff22 	bl	8000210 <memchr>
 800f3cc:	b108      	cbz	r0, 800f3d2 <_printf_i+0x1ea>
 800f3ce:	1b40      	subs	r0, r0, r5
 800f3d0:	6060      	str	r0, [r4, #4]
 800f3d2:	6863      	ldr	r3, [r4, #4]
 800f3d4:	6123      	str	r3, [r4, #16]
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f3dc:	e7aa      	b.n	800f334 <_printf_i+0x14c>
 800f3de:	6923      	ldr	r3, [r4, #16]
 800f3e0:	462a      	mov	r2, r5
 800f3e2:	4649      	mov	r1, r9
 800f3e4:	4640      	mov	r0, r8
 800f3e6:	47d0      	blx	sl
 800f3e8:	3001      	adds	r0, #1
 800f3ea:	d0ad      	beq.n	800f348 <_printf_i+0x160>
 800f3ec:	6823      	ldr	r3, [r4, #0]
 800f3ee:	079b      	lsls	r3, r3, #30
 800f3f0:	d413      	bmi.n	800f41a <_printf_i+0x232>
 800f3f2:	68e0      	ldr	r0, [r4, #12]
 800f3f4:	9b03      	ldr	r3, [sp, #12]
 800f3f6:	4298      	cmp	r0, r3
 800f3f8:	bfb8      	it	lt
 800f3fa:	4618      	movlt	r0, r3
 800f3fc:	e7a6      	b.n	800f34c <_printf_i+0x164>
 800f3fe:	2301      	movs	r3, #1
 800f400:	4632      	mov	r2, r6
 800f402:	4649      	mov	r1, r9
 800f404:	4640      	mov	r0, r8
 800f406:	47d0      	blx	sl
 800f408:	3001      	adds	r0, #1
 800f40a:	d09d      	beq.n	800f348 <_printf_i+0x160>
 800f40c:	3501      	adds	r5, #1
 800f40e:	68e3      	ldr	r3, [r4, #12]
 800f410:	9903      	ldr	r1, [sp, #12]
 800f412:	1a5b      	subs	r3, r3, r1
 800f414:	42ab      	cmp	r3, r5
 800f416:	dcf2      	bgt.n	800f3fe <_printf_i+0x216>
 800f418:	e7eb      	b.n	800f3f2 <_printf_i+0x20a>
 800f41a:	2500      	movs	r5, #0
 800f41c:	f104 0619 	add.w	r6, r4, #25
 800f420:	e7f5      	b.n	800f40e <_printf_i+0x226>
 800f422:	bf00      	nop
 800f424:	08010594 	.word	0x08010594
 800f428:	080105a5 	.word	0x080105a5

0800f42c <__sflush_r>:
 800f42c:	898a      	ldrh	r2, [r1, #12]
 800f42e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f432:	4605      	mov	r5, r0
 800f434:	0710      	lsls	r0, r2, #28
 800f436:	460c      	mov	r4, r1
 800f438:	d458      	bmi.n	800f4ec <__sflush_r+0xc0>
 800f43a:	684b      	ldr	r3, [r1, #4]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	dc05      	bgt.n	800f44c <__sflush_r+0x20>
 800f440:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f442:	2b00      	cmp	r3, #0
 800f444:	dc02      	bgt.n	800f44c <__sflush_r+0x20>
 800f446:	2000      	movs	r0, #0
 800f448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f44c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f44e:	2e00      	cmp	r6, #0
 800f450:	d0f9      	beq.n	800f446 <__sflush_r+0x1a>
 800f452:	2300      	movs	r3, #0
 800f454:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f458:	682f      	ldr	r7, [r5, #0]
 800f45a:	6a21      	ldr	r1, [r4, #32]
 800f45c:	602b      	str	r3, [r5, #0]
 800f45e:	d032      	beq.n	800f4c6 <__sflush_r+0x9a>
 800f460:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f462:	89a3      	ldrh	r3, [r4, #12]
 800f464:	075a      	lsls	r2, r3, #29
 800f466:	d505      	bpl.n	800f474 <__sflush_r+0x48>
 800f468:	6863      	ldr	r3, [r4, #4]
 800f46a:	1ac0      	subs	r0, r0, r3
 800f46c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f46e:	b10b      	cbz	r3, 800f474 <__sflush_r+0x48>
 800f470:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f472:	1ac0      	subs	r0, r0, r3
 800f474:	2300      	movs	r3, #0
 800f476:	4602      	mov	r2, r0
 800f478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f47a:	6a21      	ldr	r1, [r4, #32]
 800f47c:	4628      	mov	r0, r5
 800f47e:	47b0      	blx	r6
 800f480:	1c43      	adds	r3, r0, #1
 800f482:	89a3      	ldrh	r3, [r4, #12]
 800f484:	d106      	bne.n	800f494 <__sflush_r+0x68>
 800f486:	6829      	ldr	r1, [r5, #0]
 800f488:	291d      	cmp	r1, #29
 800f48a:	d82b      	bhi.n	800f4e4 <__sflush_r+0xb8>
 800f48c:	4a29      	ldr	r2, [pc, #164]	; (800f534 <__sflush_r+0x108>)
 800f48e:	410a      	asrs	r2, r1
 800f490:	07d6      	lsls	r6, r2, #31
 800f492:	d427      	bmi.n	800f4e4 <__sflush_r+0xb8>
 800f494:	2200      	movs	r2, #0
 800f496:	6062      	str	r2, [r4, #4]
 800f498:	04d9      	lsls	r1, r3, #19
 800f49a:	6922      	ldr	r2, [r4, #16]
 800f49c:	6022      	str	r2, [r4, #0]
 800f49e:	d504      	bpl.n	800f4aa <__sflush_r+0x7e>
 800f4a0:	1c42      	adds	r2, r0, #1
 800f4a2:	d101      	bne.n	800f4a8 <__sflush_r+0x7c>
 800f4a4:	682b      	ldr	r3, [r5, #0]
 800f4a6:	b903      	cbnz	r3, 800f4aa <__sflush_r+0x7e>
 800f4a8:	6560      	str	r0, [r4, #84]	; 0x54
 800f4aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f4ac:	602f      	str	r7, [r5, #0]
 800f4ae:	2900      	cmp	r1, #0
 800f4b0:	d0c9      	beq.n	800f446 <__sflush_r+0x1a>
 800f4b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f4b6:	4299      	cmp	r1, r3
 800f4b8:	d002      	beq.n	800f4c0 <__sflush_r+0x94>
 800f4ba:	4628      	mov	r0, r5
 800f4bc:	f7ff fbce 	bl	800ec5c <_free_r>
 800f4c0:	2000      	movs	r0, #0
 800f4c2:	6360      	str	r0, [r4, #52]	; 0x34
 800f4c4:	e7c0      	b.n	800f448 <__sflush_r+0x1c>
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	47b0      	blx	r6
 800f4cc:	1c41      	adds	r1, r0, #1
 800f4ce:	d1c8      	bne.n	800f462 <__sflush_r+0x36>
 800f4d0:	682b      	ldr	r3, [r5, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d0c5      	beq.n	800f462 <__sflush_r+0x36>
 800f4d6:	2b1d      	cmp	r3, #29
 800f4d8:	d001      	beq.n	800f4de <__sflush_r+0xb2>
 800f4da:	2b16      	cmp	r3, #22
 800f4dc:	d101      	bne.n	800f4e2 <__sflush_r+0xb6>
 800f4de:	602f      	str	r7, [r5, #0]
 800f4e0:	e7b1      	b.n	800f446 <__sflush_r+0x1a>
 800f4e2:	89a3      	ldrh	r3, [r4, #12]
 800f4e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4e8:	81a3      	strh	r3, [r4, #12]
 800f4ea:	e7ad      	b.n	800f448 <__sflush_r+0x1c>
 800f4ec:	690f      	ldr	r7, [r1, #16]
 800f4ee:	2f00      	cmp	r7, #0
 800f4f0:	d0a9      	beq.n	800f446 <__sflush_r+0x1a>
 800f4f2:	0793      	lsls	r3, r2, #30
 800f4f4:	680e      	ldr	r6, [r1, #0]
 800f4f6:	bf08      	it	eq
 800f4f8:	694b      	ldreq	r3, [r1, #20]
 800f4fa:	600f      	str	r7, [r1, #0]
 800f4fc:	bf18      	it	ne
 800f4fe:	2300      	movne	r3, #0
 800f500:	eba6 0807 	sub.w	r8, r6, r7
 800f504:	608b      	str	r3, [r1, #8]
 800f506:	f1b8 0f00 	cmp.w	r8, #0
 800f50a:	dd9c      	ble.n	800f446 <__sflush_r+0x1a>
 800f50c:	6a21      	ldr	r1, [r4, #32]
 800f50e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f510:	4643      	mov	r3, r8
 800f512:	463a      	mov	r2, r7
 800f514:	4628      	mov	r0, r5
 800f516:	47b0      	blx	r6
 800f518:	2800      	cmp	r0, #0
 800f51a:	dc06      	bgt.n	800f52a <__sflush_r+0xfe>
 800f51c:	89a3      	ldrh	r3, [r4, #12]
 800f51e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f522:	81a3      	strh	r3, [r4, #12]
 800f524:	f04f 30ff 	mov.w	r0, #4294967295
 800f528:	e78e      	b.n	800f448 <__sflush_r+0x1c>
 800f52a:	4407      	add	r7, r0
 800f52c:	eba8 0800 	sub.w	r8, r8, r0
 800f530:	e7e9      	b.n	800f506 <__sflush_r+0xda>
 800f532:	bf00      	nop
 800f534:	dfbffffe 	.word	0xdfbffffe

0800f538 <_fflush_r>:
 800f538:	b538      	push	{r3, r4, r5, lr}
 800f53a:	690b      	ldr	r3, [r1, #16]
 800f53c:	4605      	mov	r5, r0
 800f53e:	460c      	mov	r4, r1
 800f540:	b913      	cbnz	r3, 800f548 <_fflush_r+0x10>
 800f542:	2500      	movs	r5, #0
 800f544:	4628      	mov	r0, r5
 800f546:	bd38      	pop	{r3, r4, r5, pc}
 800f548:	b118      	cbz	r0, 800f552 <_fflush_r+0x1a>
 800f54a:	6a03      	ldr	r3, [r0, #32]
 800f54c:	b90b      	cbnz	r3, 800f552 <_fflush_r+0x1a>
 800f54e:	f7ff f9dd 	bl	800e90c <__sinit>
 800f552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d0f3      	beq.n	800f542 <_fflush_r+0xa>
 800f55a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f55c:	07d0      	lsls	r0, r2, #31
 800f55e:	d404      	bmi.n	800f56a <_fflush_r+0x32>
 800f560:	0599      	lsls	r1, r3, #22
 800f562:	d402      	bmi.n	800f56a <_fflush_r+0x32>
 800f564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f566:	f7ff fb51 	bl	800ec0c <__retarget_lock_acquire_recursive>
 800f56a:	4628      	mov	r0, r5
 800f56c:	4621      	mov	r1, r4
 800f56e:	f7ff ff5d 	bl	800f42c <__sflush_r>
 800f572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f574:	07da      	lsls	r2, r3, #31
 800f576:	4605      	mov	r5, r0
 800f578:	d4e4      	bmi.n	800f544 <_fflush_r+0xc>
 800f57a:	89a3      	ldrh	r3, [r4, #12]
 800f57c:	059b      	lsls	r3, r3, #22
 800f57e:	d4e1      	bmi.n	800f544 <_fflush_r+0xc>
 800f580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f582:	f7ff fb44 	bl	800ec0e <__retarget_lock_release_recursive>
 800f586:	e7dd      	b.n	800f544 <_fflush_r+0xc>

0800f588 <fiprintf>:
 800f588:	b40e      	push	{r1, r2, r3}
 800f58a:	b503      	push	{r0, r1, lr}
 800f58c:	4601      	mov	r1, r0
 800f58e:	ab03      	add	r3, sp, #12
 800f590:	4805      	ldr	r0, [pc, #20]	; (800f5a8 <fiprintf+0x20>)
 800f592:	f853 2b04 	ldr.w	r2, [r3], #4
 800f596:	6800      	ldr	r0, [r0, #0]
 800f598:	9301      	str	r3, [sp, #4]
 800f59a:	f000 f89f 	bl	800f6dc <_vfiprintf_r>
 800f59e:	b002      	add	sp, #8
 800f5a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5a4:	b003      	add	sp, #12
 800f5a6:	4770      	bx	lr
 800f5a8:	20000194 	.word	0x20000194

0800f5ac <memmove>:
 800f5ac:	4288      	cmp	r0, r1
 800f5ae:	b510      	push	{r4, lr}
 800f5b0:	eb01 0402 	add.w	r4, r1, r2
 800f5b4:	d902      	bls.n	800f5bc <memmove+0x10>
 800f5b6:	4284      	cmp	r4, r0
 800f5b8:	4623      	mov	r3, r4
 800f5ba:	d807      	bhi.n	800f5cc <memmove+0x20>
 800f5bc:	1e43      	subs	r3, r0, #1
 800f5be:	42a1      	cmp	r1, r4
 800f5c0:	d008      	beq.n	800f5d4 <memmove+0x28>
 800f5c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f5c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f5ca:	e7f8      	b.n	800f5be <memmove+0x12>
 800f5cc:	4402      	add	r2, r0
 800f5ce:	4601      	mov	r1, r0
 800f5d0:	428a      	cmp	r2, r1
 800f5d2:	d100      	bne.n	800f5d6 <memmove+0x2a>
 800f5d4:	bd10      	pop	{r4, pc}
 800f5d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f5da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f5de:	e7f7      	b.n	800f5d0 <memmove+0x24>

0800f5e0 <_sbrk_r>:
 800f5e0:	b538      	push	{r3, r4, r5, lr}
 800f5e2:	4d06      	ldr	r5, [pc, #24]	; (800f5fc <_sbrk_r+0x1c>)
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	4604      	mov	r4, r0
 800f5e8:	4608      	mov	r0, r1
 800f5ea:	602b      	str	r3, [r5, #0]
 800f5ec:	f7f3 fa82 	bl	8002af4 <_sbrk>
 800f5f0:	1c43      	adds	r3, r0, #1
 800f5f2:	d102      	bne.n	800f5fa <_sbrk_r+0x1a>
 800f5f4:	682b      	ldr	r3, [r5, #0]
 800f5f6:	b103      	cbz	r3, 800f5fa <_sbrk_r+0x1a>
 800f5f8:	6023      	str	r3, [r4, #0]
 800f5fa:	bd38      	pop	{r3, r4, r5, pc}
 800f5fc:	20004608 	.word	0x20004608

0800f600 <memcpy>:
 800f600:	440a      	add	r2, r1
 800f602:	4291      	cmp	r1, r2
 800f604:	f100 33ff 	add.w	r3, r0, #4294967295
 800f608:	d100      	bne.n	800f60c <memcpy+0xc>
 800f60a:	4770      	bx	lr
 800f60c:	b510      	push	{r4, lr}
 800f60e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f612:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f616:	4291      	cmp	r1, r2
 800f618:	d1f9      	bne.n	800f60e <memcpy+0xe>
 800f61a:	bd10      	pop	{r4, pc}

0800f61c <abort>:
 800f61c:	b508      	push	{r3, lr}
 800f61e:	2006      	movs	r0, #6
 800f620:	f000 fa34 	bl	800fa8c <raise>
 800f624:	2001      	movs	r0, #1
 800f626:	f7f3 f9ed 	bl	8002a04 <_exit>

0800f62a <_realloc_r>:
 800f62a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f62e:	4680      	mov	r8, r0
 800f630:	4614      	mov	r4, r2
 800f632:	460e      	mov	r6, r1
 800f634:	b921      	cbnz	r1, 800f640 <_realloc_r+0x16>
 800f636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f63a:	4611      	mov	r1, r2
 800f63c:	f7ff bb82 	b.w	800ed44 <_malloc_r>
 800f640:	b92a      	cbnz	r2, 800f64e <_realloc_r+0x24>
 800f642:	f7ff fb0b 	bl	800ec5c <_free_r>
 800f646:	4625      	mov	r5, r4
 800f648:	4628      	mov	r0, r5
 800f64a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f64e:	f000 fa39 	bl	800fac4 <_malloc_usable_size_r>
 800f652:	4284      	cmp	r4, r0
 800f654:	4607      	mov	r7, r0
 800f656:	d802      	bhi.n	800f65e <_realloc_r+0x34>
 800f658:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f65c:	d812      	bhi.n	800f684 <_realloc_r+0x5a>
 800f65e:	4621      	mov	r1, r4
 800f660:	4640      	mov	r0, r8
 800f662:	f7ff fb6f 	bl	800ed44 <_malloc_r>
 800f666:	4605      	mov	r5, r0
 800f668:	2800      	cmp	r0, #0
 800f66a:	d0ed      	beq.n	800f648 <_realloc_r+0x1e>
 800f66c:	42bc      	cmp	r4, r7
 800f66e:	4622      	mov	r2, r4
 800f670:	4631      	mov	r1, r6
 800f672:	bf28      	it	cs
 800f674:	463a      	movcs	r2, r7
 800f676:	f7ff ffc3 	bl	800f600 <memcpy>
 800f67a:	4631      	mov	r1, r6
 800f67c:	4640      	mov	r0, r8
 800f67e:	f7ff faed 	bl	800ec5c <_free_r>
 800f682:	e7e1      	b.n	800f648 <_realloc_r+0x1e>
 800f684:	4635      	mov	r5, r6
 800f686:	e7df      	b.n	800f648 <_realloc_r+0x1e>

0800f688 <__sfputc_r>:
 800f688:	6893      	ldr	r3, [r2, #8]
 800f68a:	3b01      	subs	r3, #1
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	b410      	push	{r4}
 800f690:	6093      	str	r3, [r2, #8]
 800f692:	da08      	bge.n	800f6a6 <__sfputc_r+0x1e>
 800f694:	6994      	ldr	r4, [r2, #24]
 800f696:	42a3      	cmp	r3, r4
 800f698:	db01      	blt.n	800f69e <__sfputc_r+0x16>
 800f69a:	290a      	cmp	r1, #10
 800f69c:	d103      	bne.n	800f6a6 <__sfputc_r+0x1e>
 800f69e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6a2:	f000 b935 	b.w	800f910 <__swbuf_r>
 800f6a6:	6813      	ldr	r3, [r2, #0]
 800f6a8:	1c58      	adds	r0, r3, #1
 800f6aa:	6010      	str	r0, [r2, #0]
 800f6ac:	7019      	strb	r1, [r3, #0]
 800f6ae:	4608      	mov	r0, r1
 800f6b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6b4:	4770      	bx	lr

0800f6b6 <__sfputs_r>:
 800f6b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6b8:	4606      	mov	r6, r0
 800f6ba:	460f      	mov	r7, r1
 800f6bc:	4614      	mov	r4, r2
 800f6be:	18d5      	adds	r5, r2, r3
 800f6c0:	42ac      	cmp	r4, r5
 800f6c2:	d101      	bne.n	800f6c8 <__sfputs_r+0x12>
 800f6c4:	2000      	movs	r0, #0
 800f6c6:	e007      	b.n	800f6d8 <__sfputs_r+0x22>
 800f6c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6cc:	463a      	mov	r2, r7
 800f6ce:	4630      	mov	r0, r6
 800f6d0:	f7ff ffda 	bl	800f688 <__sfputc_r>
 800f6d4:	1c43      	adds	r3, r0, #1
 800f6d6:	d1f3      	bne.n	800f6c0 <__sfputs_r+0xa>
 800f6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f6dc <_vfiprintf_r>:
 800f6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e0:	460d      	mov	r5, r1
 800f6e2:	b09d      	sub	sp, #116	; 0x74
 800f6e4:	4614      	mov	r4, r2
 800f6e6:	4698      	mov	r8, r3
 800f6e8:	4606      	mov	r6, r0
 800f6ea:	b118      	cbz	r0, 800f6f4 <_vfiprintf_r+0x18>
 800f6ec:	6a03      	ldr	r3, [r0, #32]
 800f6ee:	b90b      	cbnz	r3, 800f6f4 <_vfiprintf_r+0x18>
 800f6f0:	f7ff f90c 	bl	800e90c <__sinit>
 800f6f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6f6:	07d9      	lsls	r1, r3, #31
 800f6f8:	d405      	bmi.n	800f706 <_vfiprintf_r+0x2a>
 800f6fa:	89ab      	ldrh	r3, [r5, #12]
 800f6fc:	059a      	lsls	r2, r3, #22
 800f6fe:	d402      	bmi.n	800f706 <_vfiprintf_r+0x2a>
 800f700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f702:	f7ff fa83 	bl	800ec0c <__retarget_lock_acquire_recursive>
 800f706:	89ab      	ldrh	r3, [r5, #12]
 800f708:	071b      	lsls	r3, r3, #28
 800f70a:	d501      	bpl.n	800f710 <_vfiprintf_r+0x34>
 800f70c:	692b      	ldr	r3, [r5, #16]
 800f70e:	b99b      	cbnz	r3, 800f738 <_vfiprintf_r+0x5c>
 800f710:	4629      	mov	r1, r5
 800f712:	4630      	mov	r0, r6
 800f714:	f000 f93a 	bl	800f98c <__swsetup_r>
 800f718:	b170      	cbz	r0, 800f738 <_vfiprintf_r+0x5c>
 800f71a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f71c:	07dc      	lsls	r4, r3, #31
 800f71e:	d504      	bpl.n	800f72a <_vfiprintf_r+0x4e>
 800f720:	f04f 30ff 	mov.w	r0, #4294967295
 800f724:	b01d      	add	sp, #116	; 0x74
 800f726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f72a:	89ab      	ldrh	r3, [r5, #12]
 800f72c:	0598      	lsls	r0, r3, #22
 800f72e:	d4f7      	bmi.n	800f720 <_vfiprintf_r+0x44>
 800f730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f732:	f7ff fa6c 	bl	800ec0e <__retarget_lock_release_recursive>
 800f736:	e7f3      	b.n	800f720 <_vfiprintf_r+0x44>
 800f738:	2300      	movs	r3, #0
 800f73a:	9309      	str	r3, [sp, #36]	; 0x24
 800f73c:	2320      	movs	r3, #32
 800f73e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f742:	f8cd 800c 	str.w	r8, [sp, #12]
 800f746:	2330      	movs	r3, #48	; 0x30
 800f748:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f8fc <_vfiprintf_r+0x220>
 800f74c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f750:	f04f 0901 	mov.w	r9, #1
 800f754:	4623      	mov	r3, r4
 800f756:	469a      	mov	sl, r3
 800f758:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f75c:	b10a      	cbz	r2, 800f762 <_vfiprintf_r+0x86>
 800f75e:	2a25      	cmp	r2, #37	; 0x25
 800f760:	d1f9      	bne.n	800f756 <_vfiprintf_r+0x7a>
 800f762:	ebba 0b04 	subs.w	fp, sl, r4
 800f766:	d00b      	beq.n	800f780 <_vfiprintf_r+0xa4>
 800f768:	465b      	mov	r3, fp
 800f76a:	4622      	mov	r2, r4
 800f76c:	4629      	mov	r1, r5
 800f76e:	4630      	mov	r0, r6
 800f770:	f7ff ffa1 	bl	800f6b6 <__sfputs_r>
 800f774:	3001      	adds	r0, #1
 800f776:	f000 80a9 	beq.w	800f8cc <_vfiprintf_r+0x1f0>
 800f77a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f77c:	445a      	add	r2, fp
 800f77e:	9209      	str	r2, [sp, #36]	; 0x24
 800f780:	f89a 3000 	ldrb.w	r3, [sl]
 800f784:	2b00      	cmp	r3, #0
 800f786:	f000 80a1 	beq.w	800f8cc <_vfiprintf_r+0x1f0>
 800f78a:	2300      	movs	r3, #0
 800f78c:	f04f 32ff 	mov.w	r2, #4294967295
 800f790:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f794:	f10a 0a01 	add.w	sl, sl, #1
 800f798:	9304      	str	r3, [sp, #16]
 800f79a:	9307      	str	r3, [sp, #28]
 800f79c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f7a0:	931a      	str	r3, [sp, #104]	; 0x68
 800f7a2:	4654      	mov	r4, sl
 800f7a4:	2205      	movs	r2, #5
 800f7a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7aa:	4854      	ldr	r0, [pc, #336]	; (800f8fc <_vfiprintf_r+0x220>)
 800f7ac:	f7f0 fd30 	bl	8000210 <memchr>
 800f7b0:	9a04      	ldr	r2, [sp, #16]
 800f7b2:	b9d8      	cbnz	r0, 800f7ec <_vfiprintf_r+0x110>
 800f7b4:	06d1      	lsls	r1, r2, #27
 800f7b6:	bf44      	itt	mi
 800f7b8:	2320      	movmi	r3, #32
 800f7ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7be:	0713      	lsls	r3, r2, #28
 800f7c0:	bf44      	itt	mi
 800f7c2:	232b      	movmi	r3, #43	; 0x2b
 800f7c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7c8:	f89a 3000 	ldrb.w	r3, [sl]
 800f7cc:	2b2a      	cmp	r3, #42	; 0x2a
 800f7ce:	d015      	beq.n	800f7fc <_vfiprintf_r+0x120>
 800f7d0:	9a07      	ldr	r2, [sp, #28]
 800f7d2:	4654      	mov	r4, sl
 800f7d4:	2000      	movs	r0, #0
 800f7d6:	f04f 0c0a 	mov.w	ip, #10
 800f7da:	4621      	mov	r1, r4
 800f7dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7e0:	3b30      	subs	r3, #48	; 0x30
 800f7e2:	2b09      	cmp	r3, #9
 800f7e4:	d94d      	bls.n	800f882 <_vfiprintf_r+0x1a6>
 800f7e6:	b1b0      	cbz	r0, 800f816 <_vfiprintf_r+0x13a>
 800f7e8:	9207      	str	r2, [sp, #28]
 800f7ea:	e014      	b.n	800f816 <_vfiprintf_r+0x13a>
 800f7ec:	eba0 0308 	sub.w	r3, r0, r8
 800f7f0:	fa09 f303 	lsl.w	r3, r9, r3
 800f7f4:	4313      	orrs	r3, r2
 800f7f6:	9304      	str	r3, [sp, #16]
 800f7f8:	46a2      	mov	sl, r4
 800f7fa:	e7d2      	b.n	800f7a2 <_vfiprintf_r+0xc6>
 800f7fc:	9b03      	ldr	r3, [sp, #12]
 800f7fe:	1d19      	adds	r1, r3, #4
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	9103      	str	r1, [sp, #12]
 800f804:	2b00      	cmp	r3, #0
 800f806:	bfbb      	ittet	lt
 800f808:	425b      	neglt	r3, r3
 800f80a:	f042 0202 	orrlt.w	r2, r2, #2
 800f80e:	9307      	strge	r3, [sp, #28]
 800f810:	9307      	strlt	r3, [sp, #28]
 800f812:	bfb8      	it	lt
 800f814:	9204      	strlt	r2, [sp, #16]
 800f816:	7823      	ldrb	r3, [r4, #0]
 800f818:	2b2e      	cmp	r3, #46	; 0x2e
 800f81a:	d10c      	bne.n	800f836 <_vfiprintf_r+0x15a>
 800f81c:	7863      	ldrb	r3, [r4, #1]
 800f81e:	2b2a      	cmp	r3, #42	; 0x2a
 800f820:	d134      	bne.n	800f88c <_vfiprintf_r+0x1b0>
 800f822:	9b03      	ldr	r3, [sp, #12]
 800f824:	1d1a      	adds	r2, r3, #4
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	9203      	str	r2, [sp, #12]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	bfb8      	it	lt
 800f82e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f832:	3402      	adds	r4, #2
 800f834:	9305      	str	r3, [sp, #20]
 800f836:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f90c <_vfiprintf_r+0x230>
 800f83a:	7821      	ldrb	r1, [r4, #0]
 800f83c:	2203      	movs	r2, #3
 800f83e:	4650      	mov	r0, sl
 800f840:	f7f0 fce6 	bl	8000210 <memchr>
 800f844:	b138      	cbz	r0, 800f856 <_vfiprintf_r+0x17a>
 800f846:	9b04      	ldr	r3, [sp, #16]
 800f848:	eba0 000a 	sub.w	r0, r0, sl
 800f84c:	2240      	movs	r2, #64	; 0x40
 800f84e:	4082      	lsls	r2, r0
 800f850:	4313      	orrs	r3, r2
 800f852:	3401      	adds	r4, #1
 800f854:	9304      	str	r3, [sp, #16]
 800f856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f85a:	4829      	ldr	r0, [pc, #164]	; (800f900 <_vfiprintf_r+0x224>)
 800f85c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f860:	2206      	movs	r2, #6
 800f862:	f7f0 fcd5 	bl	8000210 <memchr>
 800f866:	2800      	cmp	r0, #0
 800f868:	d03f      	beq.n	800f8ea <_vfiprintf_r+0x20e>
 800f86a:	4b26      	ldr	r3, [pc, #152]	; (800f904 <_vfiprintf_r+0x228>)
 800f86c:	bb1b      	cbnz	r3, 800f8b6 <_vfiprintf_r+0x1da>
 800f86e:	9b03      	ldr	r3, [sp, #12]
 800f870:	3307      	adds	r3, #7
 800f872:	f023 0307 	bic.w	r3, r3, #7
 800f876:	3308      	adds	r3, #8
 800f878:	9303      	str	r3, [sp, #12]
 800f87a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f87c:	443b      	add	r3, r7
 800f87e:	9309      	str	r3, [sp, #36]	; 0x24
 800f880:	e768      	b.n	800f754 <_vfiprintf_r+0x78>
 800f882:	fb0c 3202 	mla	r2, ip, r2, r3
 800f886:	460c      	mov	r4, r1
 800f888:	2001      	movs	r0, #1
 800f88a:	e7a6      	b.n	800f7da <_vfiprintf_r+0xfe>
 800f88c:	2300      	movs	r3, #0
 800f88e:	3401      	adds	r4, #1
 800f890:	9305      	str	r3, [sp, #20]
 800f892:	4619      	mov	r1, r3
 800f894:	f04f 0c0a 	mov.w	ip, #10
 800f898:	4620      	mov	r0, r4
 800f89a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f89e:	3a30      	subs	r2, #48	; 0x30
 800f8a0:	2a09      	cmp	r2, #9
 800f8a2:	d903      	bls.n	800f8ac <_vfiprintf_r+0x1d0>
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d0c6      	beq.n	800f836 <_vfiprintf_r+0x15a>
 800f8a8:	9105      	str	r1, [sp, #20]
 800f8aa:	e7c4      	b.n	800f836 <_vfiprintf_r+0x15a>
 800f8ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800f8b0:	4604      	mov	r4, r0
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	e7f0      	b.n	800f898 <_vfiprintf_r+0x1bc>
 800f8b6:	ab03      	add	r3, sp, #12
 800f8b8:	9300      	str	r3, [sp, #0]
 800f8ba:	462a      	mov	r2, r5
 800f8bc:	4b12      	ldr	r3, [pc, #72]	; (800f908 <_vfiprintf_r+0x22c>)
 800f8be:	a904      	add	r1, sp, #16
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	f3af 8000 	nop.w
 800f8c6:	4607      	mov	r7, r0
 800f8c8:	1c78      	adds	r0, r7, #1
 800f8ca:	d1d6      	bne.n	800f87a <_vfiprintf_r+0x19e>
 800f8cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8ce:	07d9      	lsls	r1, r3, #31
 800f8d0:	d405      	bmi.n	800f8de <_vfiprintf_r+0x202>
 800f8d2:	89ab      	ldrh	r3, [r5, #12]
 800f8d4:	059a      	lsls	r2, r3, #22
 800f8d6:	d402      	bmi.n	800f8de <_vfiprintf_r+0x202>
 800f8d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f8da:	f7ff f998 	bl	800ec0e <__retarget_lock_release_recursive>
 800f8de:	89ab      	ldrh	r3, [r5, #12]
 800f8e0:	065b      	lsls	r3, r3, #25
 800f8e2:	f53f af1d 	bmi.w	800f720 <_vfiprintf_r+0x44>
 800f8e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f8e8:	e71c      	b.n	800f724 <_vfiprintf_r+0x48>
 800f8ea:	ab03      	add	r3, sp, #12
 800f8ec:	9300      	str	r3, [sp, #0]
 800f8ee:	462a      	mov	r2, r5
 800f8f0:	4b05      	ldr	r3, [pc, #20]	; (800f908 <_vfiprintf_r+0x22c>)
 800f8f2:	a904      	add	r1, sp, #16
 800f8f4:	4630      	mov	r0, r6
 800f8f6:	f7ff fc77 	bl	800f1e8 <_printf_i>
 800f8fa:	e7e4      	b.n	800f8c6 <_vfiprintf_r+0x1ea>
 800f8fc:	08010583 	.word	0x08010583
 800f900:	0801058d 	.word	0x0801058d
 800f904:	00000000 	.word	0x00000000
 800f908:	0800f6b7 	.word	0x0800f6b7
 800f90c:	08010589 	.word	0x08010589

0800f910 <__swbuf_r>:
 800f910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f912:	460e      	mov	r6, r1
 800f914:	4614      	mov	r4, r2
 800f916:	4605      	mov	r5, r0
 800f918:	b118      	cbz	r0, 800f922 <__swbuf_r+0x12>
 800f91a:	6a03      	ldr	r3, [r0, #32]
 800f91c:	b90b      	cbnz	r3, 800f922 <__swbuf_r+0x12>
 800f91e:	f7fe fff5 	bl	800e90c <__sinit>
 800f922:	69a3      	ldr	r3, [r4, #24]
 800f924:	60a3      	str	r3, [r4, #8]
 800f926:	89a3      	ldrh	r3, [r4, #12]
 800f928:	071a      	lsls	r2, r3, #28
 800f92a:	d525      	bpl.n	800f978 <__swbuf_r+0x68>
 800f92c:	6923      	ldr	r3, [r4, #16]
 800f92e:	b31b      	cbz	r3, 800f978 <__swbuf_r+0x68>
 800f930:	6823      	ldr	r3, [r4, #0]
 800f932:	6922      	ldr	r2, [r4, #16]
 800f934:	1a98      	subs	r0, r3, r2
 800f936:	6963      	ldr	r3, [r4, #20]
 800f938:	b2f6      	uxtb	r6, r6
 800f93a:	4283      	cmp	r3, r0
 800f93c:	4637      	mov	r7, r6
 800f93e:	dc04      	bgt.n	800f94a <__swbuf_r+0x3a>
 800f940:	4621      	mov	r1, r4
 800f942:	4628      	mov	r0, r5
 800f944:	f7ff fdf8 	bl	800f538 <_fflush_r>
 800f948:	b9e0      	cbnz	r0, 800f984 <__swbuf_r+0x74>
 800f94a:	68a3      	ldr	r3, [r4, #8]
 800f94c:	3b01      	subs	r3, #1
 800f94e:	60a3      	str	r3, [r4, #8]
 800f950:	6823      	ldr	r3, [r4, #0]
 800f952:	1c5a      	adds	r2, r3, #1
 800f954:	6022      	str	r2, [r4, #0]
 800f956:	701e      	strb	r6, [r3, #0]
 800f958:	6962      	ldr	r2, [r4, #20]
 800f95a:	1c43      	adds	r3, r0, #1
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d004      	beq.n	800f96a <__swbuf_r+0x5a>
 800f960:	89a3      	ldrh	r3, [r4, #12]
 800f962:	07db      	lsls	r3, r3, #31
 800f964:	d506      	bpl.n	800f974 <__swbuf_r+0x64>
 800f966:	2e0a      	cmp	r6, #10
 800f968:	d104      	bne.n	800f974 <__swbuf_r+0x64>
 800f96a:	4621      	mov	r1, r4
 800f96c:	4628      	mov	r0, r5
 800f96e:	f7ff fde3 	bl	800f538 <_fflush_r>
 800f972:	b938      	cbnz	r0, 800f984 <__swbuf_r+0x74>
 800f974:	4638      	mov	r0, r7
 800f976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f978:	4621      	mov	r1, r4
 800f97a:	4628      	mov	r0, r5
 800f97c:	f000 f806 	bl	800f98c <__swsetup_r>
 800f980:	2800      	cmp	r0, #0
 800f982:	d0d5      	beq.n	800f930 <__swbuf_r+0x20>
 800f984:	f04f 37ff 	mov.w	r7, #4294967295
 800f988:	e7f4      	b.n	800f974 <__swbuf_r+0x64>
	...

0800f98c <__swsetup_r>:
 800f98c:	b538      	push	{r3, r4, r5, lr}
 800f98e:	4b2a      	ldr	r3, [pc, #168]	; (800fa38 <__swsetup_r+0xac>)
 800f990:	4605      	mov	r5, r0
 800f992:	6818      	ldr	r0, [r3, #0]
 800f994:	460c      	mov	r4, r1
 800f996:	b118      	cbz	r0, 800f9a0 <__swsetup_r+0x14>
 800f998:	6a03      	ldr	r3, [r0, #32]
 800f99a:	b90b      	cbnz	r3, 800f9a0 <__swsetup_r+0x14>
 800f99c:	f7fe ffb6 	bl	800e90c <__sinit>
 800f9a0:	89a3      	ldrh	r3, [r4, #12]
 800f9a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f9a6:	0718      	lsls	r0, r3, #28
 800f9a8:	d422      	bmi.n	800f9f0 <__swsetup_r+0x64>
 800f9aa:	06d9      	lsls	r1, r3, #27
 800f9ac:	d407      	bmi.n	800f9be <__swsetup_r+0x32>
 800f9ae:	2309      	movs	r3, #9
 800f9b0:	602b      	str	r3, [r5, #0]
 800f9b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f9b6:	81a3      	strh	r3, [r4, #12]
 800f9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f9bc:	e034      	b.n	800fa28 <__swsetup_r+0x9c>
 800f9be:	0758      	lsls	r0, r3, #29
 800f9c0:	d512      	bpl.n	800f9e8 <__swsetup_r+0x5c>
 800f9c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f9c4:	b141      	cbz	r1, 800f9d8 <__swsetup_r+0x4c>
 800f9c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f9ca:	4299      	cmp	r1, r3
 800f9cc:	d002      	beq.n	800f9d4 <__swsetup_r+0x48>
 800f9ce:	4628      	mov	r0, r5
 800f9d0:	f7ff f944 	bl	800ec5c <_free_r>
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	6363      	str	r3, [r4, #52]	; 0x34
 800f9d8:	89a3      	ldrh	r3, [r4, #12]
 800f9da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f9de:	81a3      	strh	r3, [r4, #12]
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	6063      	str	r3, [r4, #4]
 800f9e4:	6923      	ldr	r3, [r4, #16]
 800f9e6:	6023      	str	r3, [r4, #0]
 800f9e8:	89a3      	ldrh	r3, [r4, #12]
 800f9ea:	f043 0308 	orr.w	r3, r3, #8
 800f9ee:	81a3      	strh	r3, [r4, #12]
 800f9f0:	6923      	ldr	r3, [r4, #16]
 800f9f2:	b94b      	cbnz	r3, 800fa08 <__swsetup_r+0x7c>
 800f9f4:	89a3      	ldrh	r3, [r4, #12]
 800f9f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f9fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f9fe:	d003      	beq.n	800fa08 <__swsetup_r+0x7c>
 800fa00:	4621      	mov	r1, r4
 800fa02:	4628      	mov	r0, r5
 800fa04:	f000 f88c 	bl	800fb20 <__smakebuf_r>
 800fa08:	89a0      	ldrh	r0, [r4, #12]
 800fa0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa0e:	f010 0301 	ands.w	r3, r0, #1
 800fa12:	d00a      	beq.n	800fa2a <__swsetup_r+0x9e>
 800fa14:	2300      	movs	r3, #0
 800fa16:	60a3      	str	r3, [r4, #8]
 800fa18:	6963      	ldr	r3, [r4, #20]
 800fa1a:	425b      	negs	r3, r3
 800fa1c:	61a3      	str	r3, [r4, #24]
 800fa1e:	6923      	ldr	r3, [r4, #16]
 800fa20:	b943      	cbnz	r3, 800fa34 <__swsetup_r+0xa8>
 800fa22:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fa26:	d1c4      	bne.n	800f9b2 <__swsetup_r+0x26>
 800fa28:	bd38      	pop	{r3, r4, r5, pc}
 800fa2a:	0781      	lsls	r1, r0, #30
 800fa2c:	bf58      	it	pl
 800fa2e:	6963      	ldrpl	r3, [r4, #20]
 800fa30:	60a3      	str	r3, [r4, #8]
 800fa32:	e7f4      	b.n	800fa1e <__swsetup_r+0x92>
 800fa34:	2000      	movs	r0, #0
 800fa36:	e7f7      	b.n	800fa28 <__swsetup_r+0x9c>
 800fa38:	20000194 	.word	0x20000194

0800fa3c <_raise_r>:
 800fa3c:	291f      	cmp	r1, #31
 800fa3e:	b538      	push	{r3, r4, r5, lr}
 800fa40:	4604      	mov	r4, r0
 800fa42:	460d      	mov	r5, r1
 800fa44:	d904      	bls.n	800fa50 <_raise_r+0x14>
 800fa46:	2316      	movs	r3, #22
 800fa48:	6003      	str	r3, [r0, #0]
 800fa4a:	f04f 30ff 	mov.w	r0, #4294967295
 800fa4e:	bd38      	pop	{r3, r4, r5, pc}
 800fa50:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fa52:	b112      	cbz	r2, 800fa5a <_raise_r+0x1e>
 800fa54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa58:	b94b      	cbnz	r3, 800fa6e <_raise_r+0x32>
 800fa5a:	4620      	mov	r0, r4
 800fa5c:	f000 f830 	bl	800fac0 <_getpid_r>
 800fa60:	462a      	mov	r2, r5
 800fa62:	4601      	mov	r1, r0
 800fa64:	4620      	mov	r0, r4
 800fa66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa6a:	f000 b817 	b.w	800fa9c <_kill_r>
 800fa6e:	2b01      	cmp	r3, #1
 800fa70:	d00a      	beq.n	800fa88 <_raise_r+0x4c>
 800fa72:	1c59      	adds	r1, r3, #1
 800fa74:	d103      	bne.n	800fa7e <_raise_r+0x42>
 800fa76:	2316      	movs	r3, #22
 800fa78:	6003      	str	r3, [r0, #0]
 800fa7a:	2001      	movs	r0, #1
 800fa7c:	e7e7      	b.n	800fa4e <_raise_r+0x12>
 800fa7e:	2400      	movs	r4, #0
 800fa80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fa84:	4628      	mov	r0, r5
 800fa86:	4798      	blx	r3
 800fa88:	2000      	movs	r0, #0
 800fa8a:	e7e0      	b.n	800fa4e <_raise_r+0x12>

0800fa8c <raise>:
 800fa8c:	4b02      	ldr	r3, [pc, #8]	; (800fa98 <raise+0xc>)
 800fa8e:	4601      	mov	r1, r0
 800fa90:	6818      	ldr	r0, [r3, #0]
 800fa92:	f7ff bfd3 	b.w	800fa3c <_raise_r>
 800fa96:	bf00      	nop
 800fa98:	20000194 	.word	0x20000194

0800fa9c <_kill_r>:
 800fa9c:	b538      	push	{r3, r4, r5, lr}
 800fa9e:	4d07      	ldr	r5, [pc, #28]	; (800fabc <_kill_r+0x20>)
 800faa0:	2300      	movs	r3, #0
 800faa2:	4604      	mov	r4, r0
 800faa4:	4608      	mov	r0, r1
 800faa6:	4611      	mov	r1, r2
 800faa8:	602b      	str	r3, [r5, #0]
 800faaa:	f7f2 ff9b 	bl	80029e4 <_kill>
 800faae:	1c43      	adds	r3, r0, #1
 800fab0:	d102      	bne.n	800fab8 <_kill_r+0x1c>
 800fab2:	682b      	ldr	r3, [r5, #0]
 800fab4:	b103      	cbz	r3, 800fab8 <_kill_r+0x1c>
 800fab6:	6023      	str	r3, [r4, #0]
 800fab8:	bd38      	pop	{r3, r4, r5, pc}
 800faba:	bf00      	nop
 800fabc:	20004608 	.word	0x20004608

0800fac0 <_getpid_r>:
 800fac0:	f7f2 bf88 	b.w	80029d4 <_getpid>

0800fac4 <_malloc_usable_size_r>:
 800fac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fac8:	1f18      	subs	r0, r3, #4
 800faca:	2b00      	cmp	r3, #0
 800facc:	bfbc      	itt	lt
 800face:	580b      	ldrlt	r3, [r1, r0]
 800fad0:	18c0      	addlt	r0, r0, r3
 800fad2:	4770      	bx	lr

0800fad4 <__swhatbuf_r>:
 800fad4:	b570      	push	{r4, r5, r6, lr}
 800fad6:	460c      	mov	r4, r1
 800fad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fadc:	2900      	cmp	r1, #0
 800fade:	b096      	sub	sp, #88	; 0x58
 800fae0:	4615      	mov	r5, r2
 800fae2:	461e      	mov	r6, r3
 800fae4:	da0d      	bge.n	800fb02 <__swhatbuf_r+0x2e>
 800fae6:	89a3      	ldrh	r3, [r4, #12]
 800fae8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800faec:	f04f 0100 	mov.w	r1, #0
 800faf0:	bf0c      	ite	eq
 800faf2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800faf6:	2340      	movne	r3, #64	; 0x40
 800faf8:	2000      	movs	r0, #0
 800fafa:	6031      	str	r1, [r6, #0]
 800fafc:	602b      	str	r3, [r5, #0]
 800fafe:	b016      	add	sp, #88	; 0x58
 800fb00:	bd70      	pop	{r4, r5, r6, pc}
 800fb02:	466a      	mov	r2, sp
 800fb04:	f000 f848 	bl	800fb98 <_fstat_r>
 800fb08:	2800      	cmp	r0, #0
 800fb0a:	dbec      	blt.n	800fae6 <__swhatbuf_r+0x12>
 800fb0c:	9901      	ldr	r1, [sp, #4]
 800fb0e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fb12:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fb16:	4259      	negs	r1, r3
 800fb18:	4159      	adcs	r1, r3
 800fb1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb1e:	e7eb      	b.n	800faf8 <__swhatbuf_r+0x24>

0800fb20 <__smakebuf_r>:
 800fb20:	898b      	ldrh	r3, [r1, #12]
 800fb22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb24:	079d      	lsls	r5, r3, #30
 800fb26:	4606      	mov	r6, r0
 800fb28:	460c      	mov	r4, r1
 800fb2a:	d507      	bpl.n	800fb3c <__smakebuf_r+0x1c>
 800fb2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fb30:	6023      	str	r3, [r4, #0]
 800fb32:	6123      	str	r3, [r4, #16]
 800fb34:	2301      	movs	r3, #1
 800fb36:	6163      	str	r3, [r4, #20]
 800fb38:	b002      	add	sp, #8
 800fb3a:	bd70      	pop	{r4, r5, r6, pc}
 800fb3c:	ab01      	add	r3, sp, #4
 800fb3e:	466a      	mov	r2, sp
 800fb40:	f7ff ffc8 	bl	800fad4 <__swhatbuf_r>
 800fb44:	9900      	ldr	r1, [sp, #0]
 800fb46:	4605      	mov	r5, r0
 800fb48:	4630      	mov	r0, r6
 800fb4a:	f7ff f8fb 	bl	800ed44 <_malloc_r>
 800fb4e:	b948      	cbnz	r0, 800fb64 <__smakebuf_r+0x44>
 800fb50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb54:	059a      	lsls	r2, r3, #22
 800fb56:	d4ef      	bmi.n	800fb38 <__smakebuf_r+0x18>
 800fb58:	f023 0303 	bic.w	r3, r3, #3
 800fb5c:	f043 0302 	orr.w	r3, r3, #2
 800fb60:	81a3      	strh	r3, [r4, #12]
 800fb62:	e7e3      	b.n	800fb2c <__smakebuf_r+0xc>
 800fb64:	89a3      	ldrh	r3, [r4, #12]
 800fb66:	6020      	str	r0, [r4, #0]
 800fb68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb6c:	81a3      	strh	r3, [r4, #12]
 800fb6e:	9b00      	ldr	r3, [sp, #0]
 800fb70:	6163      	str	r3, [r4, #20]
 800fb72:	9b01      	ldr	r3, [sp, #4]
 800fb74:	6120      	str	r0, [r4, #16]
 800fb76:	b15b      	cbz	r3, 800fb90 <__smakebuf_r+0x70>
 800fb78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb7c:	4630      	mov	r0, r6
 800fb7e:	f000 f81d 	bl	800fbbc <_isatty_r>
 800fb82:	b128      	cbz	r0, 800fb90 <__smakebuf_r+0x70>
 800fb84:	89a3      	ldrh	r3, [r4, #12]
 800fb86:	f023 0303 	bic.w	r3, r3, #3
 800fb8a:	f043 0301 	orr.w	r3, r3, #1
 800fb8e:	81a3      	strh	r3, [r4, #12]
 800fb90:	89a3      	ldrh	r3, [r4, #12]
 800fb92:	431d      	orrs	r5, r3
 800fb94:	81a5      	strh	r5, [r4, #12]
 800fb96:	e7cf      	b.n	800fb38 <__smakebuf_r+0x18>

0800fb98 <_fstat_r>:
 800fb98:	b538      	push	{r3, r4, r5, lr}
 800fb9a:	4d07      	ldr	r5, [pc, #28]	; (800fbb8 <_fstat_r+0x20>)
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	4604      	mov	r4, r0
 800fba0:	4608      	mov	r0, r1
 800fba2:	4611      	mov	r1, r2
 800fba4:	602b      	str	r3, [r5, #0]
 800fba6:	f7f2 ff7c 	bl	8002aa2 <_fstat>
 800fbaa:	1c43      	adds	r3, r0, #1
 800fbac:	d102      	bne.n	800fbb4 <_fstat_r+0x1c>
 800fbae:	682b      	ldr	r3, [r5, #0]
 800fbb0:	b103      	cbz	r3, 800fbb4 <_fstat_r+0x1c>
 800fbb2:	6023      	str	r3, [r4, #0]
 800fbb4:	bd38      	pop	{r3, r4, r5, pc}
 800fbb6:	bf00      	nop
 800fbb8:	20004608 	.word	0x20004608

0800fbbc <_isatty_r>:
 800fbbc:	b538      	push	{r3, r4, r5, lr}
 800fbbe:	4d06      	ldr	r5, [pc, #24]	; (800fbd8 <_isatty_r+0x1c>)
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	4604      	mov	r4, r0
 800fbc4:	4608      	mov	r0, r1
 800fbc6:	602b      	str	r3, [r5, #0]
 800fbc8:	f7f2 ff7b 	bl	8002ac2 <_isatty>
 800fbcc:	1c43      	adds	r3, r0, #1
 800fbce:	d102      	bne.n	800fbd6 <_isatty_r+0x1a>
 800fbd0:	682b      	ldr	r3, [r5, #0]
 800fbd2:	b103      	cbz	r3, 800fbd6 <_isatty_r+0x1a>
 800fbd4:	6023      	str	r3, [r4, #0]
 800fbd6:	bd38      	pop	{r3, r4, r5, pc}
 800fbd8:	20004608 	.word	0x20004608

0800fbdc <_init>:
 800fbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbde:	bf00      	nop
 800fbe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbe2:	bc08      	pop	{r3}
 800fbe4:	469e      	mov	lr, r3
 800fbe6:	4770      	bx	lr

0800fbe8 <_fini>:
 800fbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbea:	bf00      	nop
 800fbec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbee:	bc08      	pop	{r3}
 800fbf0:	469e      	mov	lr, r3
 800fbf2:	4770      	bx	lr
