
F411-IoT-LoRa-Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b0c  08010370  08010370  00020370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e7c  08010e7c  00030178  2**0
                  CONTENTS
  4 .ARM          00000008  08010e7c  08010e7c  00020e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e84  08010e84  00030178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e84  08010e84  00020e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010e88  08010e88  00020e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  08010e8c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e2c  20000178  08011004  00030178  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003fa4  08011004  00033fa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000158d7  00000000  00000000  000301eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003035  00000000  00000000  00045ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001178  00000000  00000000  00048af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e27  00000000  00000000  00049c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018820  00000000  00000000  0004aa97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017f05  00000000  00000000  000632b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093a43  00000000  00000000  0007b1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055e8  00000000  00000000  0010ec00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  001141e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000178 	.word	0x20000178
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010358 	.word	0x08010358

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000017c 	.word	0x2000017c
 80001dc:	08010358 	.word	0x08010358

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000698:	b0a6      	sub	sp, #152	; 0x98
 800069a:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5100 Environment-------------------------//

	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069c:	4bcf      	ldr	r3, [pc, #828]	; (80009dc <main+0x348>)
 800069e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a2:	22c0      	movs	r2, #192	; 0xc0
 80006a4:	771a      	strb	r2, [r3, #28]
		ETH.GAR[1]=168;
 80006a6:	4bcd      	ldr	r3, [pc, #820]	; (80009dc <main+0x348>)
 80006a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ac:	22a8      	movs	r2, #168	; 0xa8
 80006ae:	775a      	strb	r2, [r3, #29]
		ETH.GAR[2]=0;
 80006b0:	4bca      	ldr	r3, [pc, #808]	; (80009dc <main+0x348>)
 80006b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b6:	2200      	movs	r2, #0
 80006b8:	779a      	strb	r2, [r3, #30]
		ETH.GAR[3]=1;
 80006ba:	4bc8      	ldr	r3, [pc, #800]	; (80009dc <main+0x348>)
 80006bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c0:	2201      	movs	r2, #1
 80006c2:	77da      	strb	r2, [r3, #31]
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006c4:	4bc5      	ldr	r3, [pc, #788]	; (80009dc <main+0x348>)
 80006c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ca:	22ff      	movs	r2, #255	; 0xff
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]
		ETH.SUBR[1]=255;
 80006d0:	4bc2      	ldr	r3, [pc, #776]	; (80009dc <main+0x348>)
 80006d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d6:	22ff      	movs	r2, #255	; 0xff
 80006d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		ETH.SUBR[2]=255;
 80006dc:	4bbf      	ldr	r3, [pc, #764]	; (80009dc <main+0x348>)
 80006de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e2:	22ff      	movs	r2, #255	; 0xff
 80006e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ETH.SUBR[3]=0;
 80006e8:	4bbc      	ldr	r3, [pc, #752]	; (80009dc <main+0x348>)
 80006ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006f4:	4bb9      	ldr	r3, [pc, #740]	; (80009dc <main+0x348>)
 80006f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.SHAR[1]=0x08;
 8000700:	4bb6      	ldr	r3, [pc, #728]	; (80009dc <main+0x348>)
 8000702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000706:	2208      	movs	r2, #8
 8000708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.SHAR[2]=0xDC;
 800070c:	4bb3      	ldr	r3, [pc, #716]	; (80009dc <main+0x348>)
 800070e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000712:	22dc      	movs	r2, #220	; 0xdc
 8000714:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.SHAR[3]=0x00;
 8000718:	4bb0      	ldr	r3, [pc, #704]	; (80009dc <main+0x348>)
 800071a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		ETH.SHAR[4]=0x00;
 8000724:	4bad      	ldr	r3, [pc, #692]	; (80009dc <main+0x348>)
 8000726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SHAR[5]=0x01;
 8000730:	4baa      	ldr	r3, [pc, #680]	; (80009dc <main+0x348>)
 8000732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000736:	2201      	movs	r2, #1
 8000738:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 800073c:	4ba7      	ldr	r3, [pc, #668]	; (80009dc <main+0x348>)
 800073e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000742:	22c0      	movs	r2, #192	; 0xc0
 8000744:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SIPR[1]=168;
 8000748:	4ba4      	ldr	r3, [pc, #656]	; (80009dc <main+0x348>)
 800074a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074e:	22a8      	movs	r2, #168	; 0xa8
 8000750:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		ETH.SIPR[2]=0;
 8000754:	4ba1      	ldr	r3, [pc, #644]	; (80009dc <main+0x348>)
 8000756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800075a:	2200      	movs	r2, #0
 800075c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SIPR[3]=6,//ETH.SIPR[3]=34,
 8000760:	4b9e      	ldr	r3, [pc, #632]	; (80009dc <main+0x348>)
 8000762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000766:	2206      	movs	r2, #6
 8000768:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	//  Socket RX memory
		ETH.RMSR=0x55;
 800076c:	4b9b      	ldr	r3, [pc, #620]	; (80009dc <main+0x348>)
 800076e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000772:	2255      	movs	r2, #85	; 0x55
 8000774:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	//  Socket TX memory


		ETH.TMSR=0x55;
 8000778:	4b98      	ldr	r3, [pc, #608]	; (80009dc <main+0x348>)
 800077a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077e:	2255      	movs	r2, #85	; 0x55
 8000780:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	//  S0 Port Number
		ETH.S0_PORT[0]=0x01;
 8000784:	4b95      	ldr	r3, [pc, #596]	; (80009dc <main+0x348>)
 8000786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800078a:	2201      	movs	r2, #1
 800078c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		ETH.S0_PORT[1]=0xF6;
 8000790:	4b92      	ldr	r3, [pc, #584]	; (80009dc <main+0x348>)
 8000792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000796:	22f6      	movs	r2, #246	; 0xf6
 8000798:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//	S0 Client IP ADDRESS
		ETH.S0_DIPR[0]=192;
 800079c:	4b8f      	ldr	r3, [pc, #572]	; (80009dc <main+0x348>)
 800079e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a2:	22c0      	movs	r2, #192	; 0xc0
 80007a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		ETH.S0_DIPR[1]=168;
 80007a8:	4b8c      	ldr	r3, [pc, #560]	; (80009dc <main+0x348>)
 80007aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ae:	22a8      	movs	r2, #168	; 0xa8
 80007b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		ETH.S0_DIPR[2]=0;
 80007b4:	4b89      	ldr	r3, [pc, #548]	; (80009dc <main+0x348>)
 80007b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		ETH.S0_DIPR[3]=3;
 80007c0:	4b86      	ldr	r3, [pc, #536]	; (80009dc <main+0x348>)
 80007c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c6:	2203      	movs	r2, #3
 80007c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	//	S0 Client IP ADDRESS
		ETH.S0_DPORT[0]=0x01;
 80007cc:	4b83      	ldr	r3, [pc, #524]	; (80009dc <main+0x348>)
 80007ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d2:	2201      	movs	r2, #1
 80007d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		ETH.S0_DPORT[1]=0xF6;
 80007d8:	4b80      	ldr	r3, [pc, #512]	; (80009dc <main+0x348>)
 80007da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007de:	22f6      	movs	r2, #246	; 0xf6
 80007e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		ETH.gS0_RX_BASE = 0x6000;
 80007e4:	4b7d      	ldr	r3, [pc, #500]	; (80009dc <main+0x348>)
 80007e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ea:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80007ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		ETH.gS0_RX_MASK = 0x07FF;
 80007f2:	4b7a      	ldr	r3, [pc, #488]	; (80009dc <main+0x348>)
 80007f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		ETH.gS1_RX_BASE = 0x6800;
 8000800:	4b76      	ldr	r3, [pc, #472]	; (80009dc <main+0x348>)
 8000802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000806:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 800080a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		ETH.gS1_RX_MASK = 0x07FF;
 800080e:	4b73      	ldr	r3, [pc, #460]	; (80009dc <main+0x348>)
 8000810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000814:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000818:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		ETH.gS2_RX_BASE = 0x7000;
 800081c:	4b6f      	ldr	r3, [pc, #444]	; (80009dc <main+0x348>)
 800081e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000822:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000826:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		ETH.gS2_RX_MASK = 0x07FF;
 800082a:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <main+0x348>)
 800082c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000830:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000834:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS3_RX_BASE = 0x7800;
 8000838:	4b68      	ldr	r3, [pc, #416]	; (80009dc <main+0x348>)
 800083a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800083e:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000842:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS3_RX_MASK = 0x07FF;
 8000846:	4b65      	ldr	r3, [pc, #404]	; (80009dc <main+0x348>)
 8000848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800084c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000850:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS0_TX_BASE = 0x4000;
 8000854:	4b61      	ldr	r3, [pc, #388]	; (80009dc <main+0x348>)
 8000856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800085a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS0_TX_MASK = 0x07FF;
 8000862:	4b5e      	ldr	r3, [pc, #376]	; (80009dc <main+0x348>)
 8000864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000868:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800086c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS1_TX_BASE = 0x4800;
 8000870:	4b5a      	ldr	r3, [pc, #360]	; (80009dc <main+0x348>)
 8000872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000876:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800087a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS1_TX_MASK = 0x07FF;
 800087e:	4b57      	ldr	r3, [pc, #348]	; (80009dc <main+0x348>)
 8000880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000884:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000888:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS2_TX_BASE = 0x5000;
 800088c:	4b53      	ldr	r3, [pc, #332]	; (80009dc <main+0x348>)
 800088e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000892:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000896:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS2_TX_MASK = 0x07FF;
 800089a:	4b50      	ldr	r3, [pc, #320]	; (80009dc <main+0x348>)
 800089c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS3_TX_BASE = 0x5800;
 80008a8:	4b4c      	ldr	r3, [pc, #304]	; (80009dc <main+0x348>)
 80008aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ae:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS3_TX_MASK = 0x07FF;
 80008b6:	4b49      	ldr	r3, [pc, #292]	; (80009dc <main+0x348>)
 80008b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008bc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		ETH.S0_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c4:	4b45      	ldr	r3, [pc, #276]	; (80009dc <main+0x348>)
 80008c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	  //----------------------- LoRa ------------------------//

	  //----------------------- LoRa ------------------------//

	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008d0:	4843      	ldr	r0, [pc, #268]	; (80009e0 <main+0x34c>)
 80008d2:	f005 fffb 	bl	80068cc <Inicializar>
 	  	wf.RESET_PORT=GPIOA;
 80008d6:	4b42      	ldr	r3, [pc, #264]	; (80009e0 <main+0x34c>)
 80008d8:	4a42      	ldr	r2, [pc, #264]	; (80009e4 <main+0x350>)
 80008da:	601a      	str	r2, [r3, #0]
 	  	wf.RESET_PORT=GPIO_PIN_8;
 80008dc:	4b40      	ldr	r3, [pc, #256]	; (80009e0 <main+0x34c>)
 80008de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008e2:	601a      	str	r2, [r3, #0]
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008e4:	4940      	ldr	r1, [pc, #256]	; (80009e8 <main+0x354>)
 80008e6:	4841      	ldr	r0, [pc, #260]	; (80009ec <main+0x358>)
 80008e8:	f00e fd50 	bl	800f38c <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 80008ec:	4940      	ldr	r1, [pc, #256]	; (80009f0 <main+0x35c>)
 80008ee:	4841      	ldr	r0, [pc, #260]	; (80009f4 <main+0x360>)
 80008f0:	f00e fd4c 	bl	800f38c <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 80008f4:	4940      	ldr	r1, [pc, #256]	; (80009f8 <main+0x364>)
 80008f6:	4841      	ldr	r0, [pc, #260]	; (80009fc <main+0x368>)
 80008f8:	f00e fd48 	bl	800f38c <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 80008fc:	4940      	ldr	r1, [pc, #256]	; (8000a00 <main+0x36c>)
 80008fe:	4841      	ldr	r0, [pc, #260]	; (8000a04 <main+0x370>)
 8000900:	f00e fd44 	bl	800f38c <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 8000904:	4940      	ldr	r1, [pc, #256]	; (8000a08 <main+0x374>)
 8000906:	4841      	ldr	r0, [pc, #260]	; (8000a0c <main+0x378>)
 8000908:	f00e fd40 	bl	800f38c <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 800090c:	4940      	ldr	r1, [pc, #256]	; (8000a10 <main+0x37c>)
 800090e:	4841      	ldr	r0, [pc, #260]	; (8000a14 <main+0x380>)
 8000910:	f00e fd3c 	bl	800f38c <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 8000914:	4940      	ldr	r1, [pc, #256]	; (8000a18 <main+0x384>)
 8000916:	4841      	ldr	r0, [pc, #260]	; (8000a1c <main+0x388>)
 8000918:	f00e fd38 	bl	800f38c <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 800091c:	4940      	ldr	r1, [pc, #256]	; (8000a20 <main+0x38c>)
 800091e:	4841      	ldr	r0, [pc, #260]	; (8000a24 <main+0x390>)
 8000920:	f00e fd34 	bl	800f38c <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 8000924:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <main+0x34c>)
 8000926:	2200      	movs	r2, #0
 8000928:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800092c:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <main+0x34c>)
 800092e:	2200      	movs	r2, #0
 8000930:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
		wf._data2SND[1]=0x00;
 8000934:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <main+0x34c>)
 8000936:	2200      	movs	r2, #0
 8000938:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
		wf._data2SND[2]=0x00;
 800093c:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <main+0x34c>)
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
		wf._data2SND[3]=0x00;
 8000944:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <main+0x34c>)
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		wf._data2SND[4]=0x00;
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <main+0x34c>)
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[5]=0x06;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <main+0x34c>)
 8000956:	2206      	movs	r2, #6
 8000958:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[6]=0x01;
 800095c:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <main+0x34c>)
 800095e:	2201      	movs	r2, #1
 8000960:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[7]=0x03;
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <main+0x34c>)
 8000966:	2203      	movs	r2, #3
 8000968:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <main+0x34c>)
 800096e:	2200      	movs	r2, #0
 8000970:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[9]=0x00;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <main+0x34c>)
 8000976:	2200      	movs	r2, #0
 8000978:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[10]=0x00;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <main+0x34c>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[11]=0x0A;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <main+0x34c>)
 8000986:	220a      	movs	r2, #10
 8000988:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[12]=0x00;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <main+0x34c>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[13]=0x33;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <main+0x34c>)
 8000996:	2233      	movs	r2, #51	; 0x33
 8000998:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[14]=0x34;
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <main+0x34c>)
 800099e:	2234      	movs	r2, #52	; 0x34
 80009a0:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[15]=0x35;
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <main+0x34c>)
 80009a6:	2235      	movs	r2, #53	; 0x35
 80009a8:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._n_D2SND=12;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <main+0x34c>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <main+0x34c>)
 80009b6:	2264      	movs	r2, #100	; 0x64
 80009b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <main+0x34c>)
 80009be:	2202      	movs	r2, #2
 80009c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._DBG_EN=1;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <main+0x34c>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
		//wf._send_data=1;
		// ----------- INICIO - Seteo de módulo Ethernet W5100 ----------- //
	    // Conectado a SPI2
		// PIN NSS - PortB 12
		spi_no_debug=1;
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <main+0x394>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80009d2:	4b02      	ldr	r3, [pc, #8]	; (80009dc <main+0x348>)
 80009d4:	4a03      	ldr	r2, [pc, #12]	; (80009e4 <main+0x350>)
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	e028      	b.n	8000a2c <main+0x398>
 80009da:	bf00      	nop
 80009dc:	20002744 	.word	0x20002744
 80009e0:	20000b58 	.word	0x20000b58
 80009e4:	40020000 	.word	0x40020000
 80009e8:	20000024 	.word	0x20000024
 80009ec:	20000b5e 	.word	0x20000b5e
 80009f0:	2000002c 	.word	0x2000002c
 80009f4:	20000b7e 	.word	0x20000b7e
 80009f8:	20000038 	.word	0x20000038
 80009fc:	20000b8e 	.word	0x20000b8e
 8000a00:	20000048 	.word	0x20000048
 8000a04:	20000b9e 	.word	0x20000b9e
 8000a08:	20000050 	.word	0x20000050
 8000a0c:	20000ba4 	.word	0x20000ba4
 8000a10:	20000060 	.word	0x20000060
 8000a14:	20000bba 	.word	0x20000bba
 8000a18:	20000070 	.word	0x20000070
 8000a1c:	20000bca 	.word	0x20000bca
 8000a20:	20000080 	.word	0x20000080
 8000a24:	20000bb4 	.word	0x20000bb4
 8000a28:	200037f4 	.word	0x200037f4
		ETH.NSS_PIN=GPIO_PIN_4;
 8000a2c:	4b4c      	ldr	r3, [pc, #304]	; (8000b60 <main+0x4cc>)
 8000a2e:	2210      	movs	r2, #16
 8000a30:	811a      	strh	r2, [r3, #8]
		ETH.SPI= &hspi1;
 8000a32:	4b4b      	ldr	r3, [pc, #300]	; (8000b60 <main+0x4cc>)
 8000a34:	4a4b      	ldr	r2, [pc, #300]	; (8000b64 <main+0x4d0>)
 8000a36:	601a      	str	r2, [r3, #0]

	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a38:	484b      	ldr	r0, [pc, #300]	; (8000b68 <main+0x4d4>)
 8000a3a:	f00b fe5b 	bl	800c6f4 <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a3e:	4b4a      	ldr	r3, [pc, #296]	; (8000b68 <main+0x4d4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	705a      	strb	r2, [r3, #1]
		ModBUS_Config(&mb_wf);	//WIFI como servidor TCP, recibe comadno ModBUS
 8000a44:	4849      	ldr	r0, [pc, #292]	; (8000b6c <main+0x4d8>)
 8000a46:	f00b fe55 	bl	800c6f4 <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a4a:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <main+0x4d8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	705a      	strb	r2, [r3, #1]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a50:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a54:	2103      	movs	r1, #3
 8000a56:	4845      	ldr	r0, [pc, #276]	; (8000b6c <main+0x4d8>)
 8000a58:	f00b feef 	bl	800c83a <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5c:	f002 f8ce 	bl	8002bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a60:	f000 fb50 	bl	8001104 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000a64:	4b42      	ldr	r3, [pc, #264]	; (8000b70 <main+0x4dc>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a42      	ldr	r2, [pc, #264]	; (8000b74 <main+0x4e0>)
 8000a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6e:	099b      	lsrs	r3, r3, #6
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fdc5 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a76:	f000 fd57 	bl	8001528 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a7a:	f000 fbab 	bl	80011d4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a7e:	f000 fcd5 	bl	800142c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a82:	f000 fcfd 	bl	8001480 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000a86:	f000 fd25 	bl	80014d4 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000a8a:	f000 fbd9 	bl	8001240 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a8e:	f000 fc51 	bl	8001334 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2102      	movs	r1, #2
 8000a96:	4838      	ldr	r0, [pc, #224]	; (8000b78 <main+0x4e4>)
 8000a98:	f002 fd84 	bl	80035a4 <HAL_GPIO_WritePin>
  ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000a9c:	210e      	movs	r1, #14
 8000a9e:	4837      	ldr	r0, [pc, #220]	; (8000b7c <main+0x4e8>)
 8000aa0:	f000 fdd4 	bl	800164c <ITM0_Write>
     ESP8266_HW_Reset();	//WRNNG Hardcoded	  //Reseteo el modulo desde el pin de RESET
 8000aa4:	f001 fcc4 	bl	8002430 <ESP8266_HW_Reset>
     if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000aa8:	4b35      	ldr	r3, [pc, #212]	; (8000b80 <main+0x4ec>)
 8000aaa:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <main+0x426>
 8000ab2:	2113      	movs	r1, #19
 8000ab4:	4833      	ldr	r0, [pc, #204]	; (8000b84 <main+0x4f0>)
 8000ab6:	f000 fdc9 	bl	800164c <ITM0_Write>
     //HAL_TIM_Base_Start(&htim6); //Timer como base de tiempo
     HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000aba:	2201      	movs	r2, #1
 8000abc:	4932      	ldr	r1, [pc, #200]	; (8000b88 <main+0x4f4>)
 8000abe:	4833      	ldr	r0, [pc, #204]	; (8000b8c <main+0x4f8>)
 8000ac0:	f004 fe99 	bl	80057f6 <HAL_UART_Receive_IT>
     HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	4932      	ldr	r1, [pc, #200]	; (8000b90 <main+0x4fc>)
 8000ac8:	4832      	ldr	r0, [pc, #200]	; (8000b94 <main+0x500>)
 8000aca:	f004 fe94 	bl	80057f6 <HAL_UART_Receive_IT>
     if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5100 \r\n",strlen("\r\n SET-UP W5100 \r\n"));
 8000ace:	4b32      	ldr	r3, [pc, #200]	; (8000b98 <main+0x504>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d003      	beq.n	8000ade <main+0x44a>
 8000ad6:	2112      	movs	r1, #18
 8000ad8:	4830      	ldr	r0, [pc, #192]	; (8000b9c <main+0x508>)
 8000ada:	f000 fdb7 	bl	800164c <ITM0_Write>

   	 ETH.operacion=SPI_WRITE;
 8000ade:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <main+0x4cc>)
 8000ae0:	22f0      	movs	r2, #240	; 0xf0
 8000ae2:	729a      	strb	r2, [r3, #10]
   	 ETH.TX[1]= 0;
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <main+0x4cc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	755a      	strb	r2, [r3, #21]
   	 ETH.TX[2]= 1;
 8000aea:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <main+0x4cc>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	759a      	strb	r2, [r3, #22]
   	 ETH.TX[3]= 192;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <main+0x4cc>)
 8000af2:	22c0      	movs	r2, #192	; 0xc0
 8000af4:	75da      	strb	r2, [r3, #23]
   	 //ETH-DISABLE   eth_init(&ETH);

   	 //ETH-DISABLE eth_socket_init(&ETH,0);

   	 //ETH-DISABLE SPI_READ_EN=1;
   ETH.operacion=SPI_READ;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <main+0x4cc>)
 8000af8:	220f      	movs	r2, #15
 8000afa:	729a      	strb	r2, [r3, #10]
   ETH.TX[1]= 0;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <main+0x4cc>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	755a      	strb	r2, [r3, #21]
   ETH.TX[2]= 1;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <main+0x4cc>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	759a      	strb	r2, [r3, #22]
   ETH.TX[3]= 0;
 8000b08:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <main+0x4cc>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	75da      	strb	r2, [r3, #23]

     if(ESP8266_HW_Init(&huart1)==1)
 8000b0e:	481f      	ldr	r0, [pc, #124]	; (8000b8c <main+0x4f8>)
 8000b10:	f001 fcb6 	bl	8002480 <ESP8266_HW_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d10c      	bne.n	8000b34 <main+0x4a0>
     {
   	  ESP_HW_Init=1;
 8000b1a:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <main+0x50c>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	701a      	strb	r2, [r3, #0]
   	  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <main+0x4ec>)
 8000b22:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d04a      	beq.n	8000bc0 <main+0x52c>
 8000b2a:	2113      	movs	r1, #19
 8000b2c:	481d      	ldr	r0, [pc, #116]	; (8000ba4 <main+0x510>)
 8000b2e:	f000 fd8d 	bl	800164c <ITM0_Write>
 8000b32:	e045      	b.n	8000bc0 <main+0x52c>
     }
     else
     {
   	  ESP8266_HW_Reset(); //WRNNG Hardcoded
 8000b34:	f001 fc7c 	bl	8002430 <ESP8266_HW_Reset>
   	  if(ESP8266_HW_Init(&huart1)==1)
 8000b38:	4814      	ldr	r0, [pc, #80]	; (8000b8c <main+0x4f8>)
 8000b3a:	f001 fca1 	bl	8002480 <ESP8266_HW_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d131      	bne.n	8000ba8 <main+0x514>
   	  {
   		  ESP_HW_Init=1;
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <main+0x50c>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <main+0x4ec>)
 8000b4c:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d035      	beq.n	8000bc0 <main+0x52c>
 8000b54:	2113      	movs	r1, #19
 8000b56:	4813      	ldr	r0, [pc, #76]	; (8000ba4 <main+0x510>)
 8000b58:	f000 fd78 	bl	800164c <ITM0_Write>
 8000b5c:	e030      	b.n	8000bc0 <main+0x52c>
 8000b5e:	bf00      	nop
 8000b60:	20002744 	.word	0x20002744
 8000b64:	20000194 	.word	0x20000194
 8000b68:	200018a4 	.word	0x200018a4
 8000b6c:	20001df0 	.word	0x20001df0
 8000b70:	20000084 	.word	0x20000084
 8000b74:	10624dd3 	.word	0x10624dd3
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	08010370 	.word	0x08010370
 8000b80:	20000b58 	.word	0x20000b58
 8000b84:	08010380 	.word	0x08010380
 8000b88:	20003e0c 	.word	0x20003e0c
 8000b8c:	2000027c 	.word	0x2000027c
 8000b90:	20003e10 	.word	0x20003e10
 8000b94:	200002c0 	.word	0x200002c0
 8000b98:	2000273c 	.word	0x2000273c
 8000b9c:	08010394 	.word	0x08010394
 8000ba0:	200037f7 	.word	0x200037f7
 8000ba4:	080103a8 	.word	0x080103a8
   	  }
   	  else
   	  {
   		  ESP_HW_Init=0;
 8000ba8:	4bac      	ldr	r3, [pc, #688]	; (8000e5c <main+0x7c8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000bae:	4bac      	ldr	r3, [pc, #688]	; (8000e60 <main+0x7cc>)
 8000bb0:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <main+0x52c>
 8000bb8:	2115      	movs	r1, #21
 8000bba:	48aa      	ldr	r0, [pc, #680]	; (8000e64 <main+0x7d0>)
 8000bbc:	f000 fd46 	bl	800164c <ITM0_Write>
   	  }
     }

     HAL_Delay(1000);
 8000bc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc4:	f002 f88c 	bl	8002ce0 <HAL_Delay>





	  	  if (ESP_HW_Init==1)
 8000bc8:	4ba4      	ldr	r3, [pc, #656]	; (8000e5c <main+0x7c8>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	f040 80cf 	bne.w	8000d70 <main+0x6dc>
	  	  {
	  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(lr._data_available))
 8000bd2:	4ba5      	ldr	r3, [pc, #660]	; (8000e68 <main+0x7d4>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	f040 80ca 	bne.w	8000d70 <main+0x6dc>
 8000bdc:	4ba0      	ldr	r3, [pc, #640]	; (8000e60 <main+0x7cc>)
 8000bde:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 80c4 	bne.w	8000d70 <main+0x6dc>
 8000be8:	4b9d      	ldr	r3, [pc, #628]	; (8000e60 <main+0x7cc>)
 8000bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bee:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000bf2:	f340 80bd 	ble.w	8000d70 <main+0x6dc>
 8000bf6:	4b9d      	ldr	r3, [pc, #628]	; (8000e6c <main+0x7d8>)
 8000bf8:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	f000 80b7 	beq.w	8000d70 <main+0x6dc>
	  			{	lr._data_available=0;
 8000c02:	4b9a      	ldr	r3, [pc, #616]	; (8000e6c <main+0x7d8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
	  				wf_snd_flag_ticks=0;
 8000c0a:	4b99      	ldr	r3, [pc, #612]	; (8000e70 <main+0x7dc>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
	  				WF_SND_FLAG=0;
 8000c10:	4b95      	ldr	r3, [pc, #596]	; (8000e68 <main+0x7d4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
	  				/*ModBUS_F03_Request(&mb_wf, 0 , 10);
	  				ModBUS(&mb_wf);							// Create ModBUS info to be sent
	  				CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
	  				wf._n_D2SND=mb_wf._n_MBUS_2SND;*/

	  				if( httpPOST(	ENDPOINT, SERVER_IP,PORT,
 8000c16:	2100      	movs	r1, #0
 8000c18:	4896      	ldr	r0, [pc, #600]	; (8000e74 <main+0x7e0>)
 8000c1a:	f00b fe3c 	bl	800c896 <ModBUS_F03_Read>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4698      	mov	r8, r3
 8000c22:	2101      	movs	r1, #1
 8000c24:	4893      	ldr	r0, [pc, #588]	; (8000e74 <main+0x7e0>)
 8000c26:	f00b fe36 	bl	800c896 <ModBUS_F03_Read>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c2e:	2102      	movs	r1, #2
 8000c30:	4890      	ldr	r0, [pc, #576]	; (8000e74 <main+0x7e0>)
 8000c32:	f00b fe30 	bl	800c896 <ModBUS_F03_Read>
 8000c36:	4603      	mov	r3, r0
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c3a:	2103      	movs	r1, #3
 8000c3c:	488d      	ldr	r0, [pc, #564]	; (8000e74 <main+0x7e0>)
 8000c3e:	f00b fe2a 	bl	800c896 <ModBUS_F03_Read>
 8000c42:	4603      	mov	r3, r0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
 8000c46:	2104      	movs	r1, #4
 8000c48:	488a      	ldr	r0, [pc, #552]	; (8000e74 <main+0x7e0>)
 8000c4a:	f00b fe24 	bl	800c896 <ModBUS_F03_Read>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	623b      	str	r3, [r7, #32]
 8000c52:	2105      	movs	r1, #5
 8000c54:	4887      	ldr	r0, [pc, #540]	; (8000e74 <main+0x7e0>)
 8000c56:	f00b fe1e 	bl	800c896 <ModBUS_F03_Read>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	61fb      	str	r3, [r7, #28]
 8000c5e:	2106      	movs	r1, #6
 8000c60:	4884      	ldr	r0, [pc, #528]	; (8000e74 <main+0x7e0>)
 8000c62:	f00b fe18 	bl	800c896 <ModBUS_F03_Read>
 8000c66:	4603      	mov	r3, r0
 8000c68:	61bb      	str	r3, [r7, #24]
 8000c6a:	2107      	movs	r1, #7
 8000c6c:	4881      	ldr	r0, [pc, #516]	; (8000e74 <main+0x7e0>)
 8000c6e:	f00b fe12 	bl	800c896 <ModBUS_F03_Read>
 8000c72:	4603      	mov	r3, r0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	2108      	movs	r1, #8
 8000c78:	487e      	ldr	r0, [pc, #504]	; (8000e74 <main+0x7e0>)
 8000c7a:	f00b fe0c 	bl	800c896 <ModBUS_F03_Read>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	2109      	movs	r1, #9
 8000c84:	487b      	ldr	r0, [pc, #492]	; (8000e74 <main+0x7e0>)
 8000c86:	f00b fe06 	bl	800c896 <ModBUS_F03_Read>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	210a      	movs	r1, #10
 8000c90:	4878      	ldr	r0, [pc, #480]	; (8000e74 <main+0x7e0>)
 8000c92:	f00b fe00 	bl	800c896 <ModBUS_F03_Read>
 8000c96:	4603      	mov	r3, r0
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	210b      	movs	r1, #11
 8000c9c:	4875      	ldr	r0, [pc, #468]	; (8000e74 <main+0x7e0>)
 8000c9e:	f00b fdfa 	bl	800c896 <ModBUS_F03_Read>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	210c      	movs	r1, #12
 8000ca8:	4872      	ldr	r0, [pc, #456]	; (8000e74 <main+0x7e0>)
 8000caa:	f00b fdf4 	bl	800c896 <ModBUS_F03_Read>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	461e      	mov	r6, r3
 8000cb2:	210d      	movs	r1, #13
 8000cb4:	486f      	ldr	r0, [pc, #444]	; (8000e74 <main+0x7e0>)
 8000cb6:	f00b fdee 	bl	800c896 <ModBUS_F03_Read>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	461d      	mov	r5, r3
 8000cbe:	210e      	movs	r1, #14
 8000cc0:	486c      	ldr	r0, [pc, #432]	; (8000e74 <main+0x7e0>)
 8000cc2:	f00b fde8 	bl	800c896 <ModBUS_F03_Read>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	461c      	mov	r4, r3
 8000cca:	210f      	movs	r1, #15
 8000ccc:	4869      	ldr	r0, [pc, #420]	; (8000e74 <main+0x7e0>)
 8000cce:	f00b fde2 	bl	800c896 <ModBUS_F03_Read>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cda:	9312      	str	r3, [sp, #72]	; 0x48
 8000cdc:	4b66      	ldr	r3, [pc, #408]	; (8000e78 <main+0x7e4>)
 8000cde:	9311      	str	r3, [sp, #68]	; 0x44
 8000ce0:	4b66      	ldr	r3, [pc, #408]	; (8000e7c <main+0x7e8>)
 8000ce2:	9310      	str	r3, [sp, #64]	; 0x40
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	930f      	str	r3, [sp, #60]	; 0x3c
 8000ce8:	920e      	str	r2, [sp, #56]	; 0x38
 8000cea:	940d      	str	r4, [sp, #52]	; 0x34
 8000cec:	950c      	str	r5, [sp, #48]	; 0x30
 8000cee:	960b      	str	r6, [sp, #44]	; 0x2c
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	920a      	str	r2, [sp, #40]	; 0x28
 8000cf4:	68ba      	ldr	r2, [r7, #8]
 8000cf6:	9209      	str	r2, [sp, #36]	; 0x24
 8000cf8:	68fa      	ldr	r2, [r7, #12]
 8000cfa:	9208      	str	r2, [sp, #32]
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	9207      	str	r2, [sp, #28]
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	9206      	str	r2, [sp, #24]
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	9205      	str	r2, [sp, #20]
 8000d08:	69fa      	ldr	r2, [r7, #28]
 8000d0a:	9204      	str	r2, [sp, #16]
 8000d0c:	6a3a      	ldr	r2, [r7, #32]
 8000d0e:	9203      	str	r2, [sp, #12]
 8000d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d12:	9202      	str	r2, [sp, #8]
 8000d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d16:	9201      	str	r2, [sp, #4]
 8000d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	4643      	mov	r3, r8
 8000d1e:	4a58      	ldr	r2, [pc, #352]	; (8000e80 <main+0x7ec>)
 8000d20:	4958      	ldr	r1, [pc, #352]	; (8000e84 <main+0x7f0>)
 8000d22:	4859      	ldr	r0, [pc, #356]	; (8000e88 <main+0x7f4>)
 8000d24:	f00a fc0a 	bl	800b53c <httpPOST>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d020      	beq.n	8000d70 <main+0x6dc>
									ModBUS_F03_Read(&mb_eth,14),
									ModBUS_F03_Read(&mb_eth,15),TEST_1,//ModBUS_F03_Read(&mb_eth,9),TEPELCO,
	  								post, body, 512))

	  				{
	  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000d2e:	4853      	ldr	r0, [pc, #332]	; (8000e7c <main+0x7e8>)
 8000d30:	f7ff fa60 	bl	80001f4 <strlen>
 8000d34:	4603      	mov	r3, r0
 8000d36:	461a      	mov	r2, r3
 8000d38:	2341      	movs	r3, #65	; 0x41
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	494f      	ldr	r1, [pc, #316]	; (8000e7c <main+0x7e8>)
 8000d40:	4852      	ldr	r0, [pc, #328]	; (8000e8c <main+0x7f8>)
 8000d42:	f00d ffef 	bl	800ed24 <CopiaVector>
	  							wf._n_D2SND=strlen(post);
 8000d46:	484d      	ldr	r0, [pc, #308]	; (8000e7c <main+0x7e8>)
 8000d48:	f7ff fa54 	bl	80001f4 <strlen>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b43      	ldr	r3, [pc, #268]	; (8000e60 <main+0x7cc>)
 8000d52:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
	  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000d56:	4b42      	ldr	r3, [pc, #264]	; (8000e60 <main+0x7cc>)
 8000d58:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d807      	bhi.n	8000d70 <main+0x6dc>
	  							{
	  								EnviarDatos(&wf);
 8000d60:	483f      	ldr	r0, [pc, #252]	; (8000e60 <main+0x7cc>)
 8000d62:	f005 fd9d 	bl	80068a0 <EnviarDatos>
	  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000d66:	4b3e      	ldr	r3, [pc, #248]	; (8000e60 <main+0x7cc>)
 8000d68:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000d6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  				}
	  			}
	  	  }
	  /**************[ FIN PIDO ENVIAR DATOS ]**************/

	  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000d70:	4b47      	ldr	r3, [pc, #284]	; (8000e90 <main+0x7fc>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d004      	beq.n	8000d82 <main+0x6ee>
 8000d78:	4b46      	ldr	r3, [pc, #280]	; (8000e94 <main+0x800>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	f040 80aa 	bne.w	8000ed6 <main+0x842>
	  		{
	  			if(FLAG_UART1==1)
 8000d82:	4b43      	ldr	r3, [pc, #268]	; (8000e90 <main+0x7fc>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d11c      	bne.n	8000dc4 <main+0x730>
	  				{
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000d8a:	4b43      	ldr	r3, [pc, #268]	; (8000e98 <main+0x804>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4b43      	ldr	r3, [pc, #268]	; (8000e9c <main+0x808>)
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	2301      	movs	r3, #1
 8000d94:	4942      	ldr	r1, [pc, #264]	; (8000ea0 <main+0x80c>)
 8000d96:	4843      	ldr	r0, [pc, #268]	; (8000ea4 <main+0x810>)
 8000d98:	f00d ffc4 	bl	800ed24 <CopiaVector>
	  					FLAG_UART1=0;
 8000d9c:	4b3c      	ldr	r3, [pc, #240]	; (8000e90 <main+0x7fc>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]

	  						if (error_rxdata==3)
 8000da2:	4b41      	ldr	r3, [pc, #260]	; (8000ea8 <main+0x814>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d102      	bne.n	8000db0 <main+0x71c>
	  						{
	  							error_rxdata=0;
 8000daa:	4b3f      	ldr	r3, [pc, #252]	; (8000ea8 <main+0x814>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
	  						}
	  						if (error_rxdata==1)
 8000db0:	4b3d      	ldr	r3, [pc, #244]	; (8000ea8 <main+0x814>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d105      	bne.n	8000dc4 <main+0x730>
	  						{
	  							error_rxdata=5;
 8000db8:	4b3b      	ldr	r3, [pc, #236]	; (8000ea8 <main+0x814>)
 8000dba:	2205      	movs	r2, #5
 8000dbc:	701a      	strb	r2, [r3, #0]
	  							error_rxdata=0;
 8000dbe:	4b3a      	ldr	r3, [pc, #232]	; (8000ea8 <main+0x814>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
	  						}
	  				}
	  			if(FLAG_TIMEOUT==1)
 8000dc4:	4b33      	ldr	r3, [pc, #204]	; (8000e94 <main+0x800>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d102      	bne.n	8000dd2 <main+0x73e>
	  					{
	  						FLAG_TIMEOUT=0;
 8000dcc:	4b31      	ldr	r3, [pc, #196]	; (8000e94 <main+0x800>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
	  					}

	  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000dd2:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <main+0x7c8>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d17d      	bne.n	8000ed6 <main+0x842>
	  				{
	  					/*************** Copio y proceso info recibida ***************/
	  					wf._n_orig=UART_RX_items;
 8000dda:	4b2f      	ldr	r3, [pc, #188]	; (8000e98 <main+0x804>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a20      	ldr	r2, [pc, #128]	; (8000e60 <main+0x7cc>)
 8000de0:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000de4:	4b2c      	ldr	r3, [pc, #176]	; (8000e98 <main+0x804>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b2c      	ldr	r3, [pc, #176]	; (8000e9c <main+0x808>)
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2301      	movs	r3, #1
 8000dee:	492c      	ldr	r1, [pc, #176]	; (8000ea0 <main+0x80c>)
 8000df0:	482c      	ldr	r0, [pc, #176]	; (8000ea4 <main+0x810>)
 8000df2:	f00d ff97 	bl	800ed24 <CopiaVector>
	  					resultado=AT_ESP8266_ND(&wf);
 8000df6:	481a      	ldr	r0, [pc, #104]	; (8000e60 <main+0x7cc>)
 8000df8:	f005 fe32 	bl	8006a60 <AT_ESP8266_ND>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	4b2a      	ldr	r3, [pc, #168]	; (8000eac <main+0x818>)
 8000e02:	701a      	strb	r2, [r3, #0]

	  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

	  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000e04:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <main+0x7cc>)
 8000e06:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d163      	bne.n	8000ed6 <main+0x842>
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <main+0x7cc>)
 8000e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e14:	2b63      	cmp	r3, #99	; 0x63
 8000e16:	d15e      	bne.n	8000ed6 <main+0x842>
	  					{

	  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <main+0x7cc>)
 8000e1a:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8000e1e:	2341      	movs	r3, #65	; 0x41
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2300      	movs	r3, #0
 8000e24:	4922      	ldr	r1, [pc, #136]	; (8000eb0 <main+0x81c>)
 8000e26:	4823      	ldr	r0, [pc, #140]	; (8000eb4 <main+0x820>)
 8000e28:	f00d ff7c 	bl	800ed24 <CopiaVector>
	  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <main+0x7cc>)
 8000e2e:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8000e32:	4a21      	ldr	r2, [pc, #132]	; (8000eb8 <main+0x824>)
 8000e34:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190

	  						ModBUS(&mb_wf);
 8000e38:	481f      	ldr	r0, [pc, #124]	; (8000eb8 <main+0x824>)
 8000e3a:	f00b fdb1 	bl	800c9a0 <ModBUS>

	  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <main+0x824>)
 8000e40:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 8000e44:	2341      	movs	r3, #65	; 0x41
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2300      	movs	r3, #0
 8000e4a:	491c      	ldr	r1, [pc, #112]	; (8000ebc <main+0x828>)
 8000e4c:	480f      	ldr	r0, [pc, #60]	; (8000e8c <main+0x7f8>)
 8000e4e:	f00d ff69 	bl	800ed24 <CopiaVector>
	  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <main+0x824>)
 8000e54:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8000e58:	e032      	b.n	8000ec0 <main+0x82c>
 8000e5a:	bf00      	nop
 8000e5c:	200037f7 	.word	0x200037f7
 8000e60:	20000b58 	.word	0x20000b58
 8000e64:	080103bc 	.word	0x080103bc
 8000e68:	2000273d 	.word	0x2000273d
 8000e6c:	20000350 	.word	0x20000350
 8000e70:	20002740 	.word	0x20002740
 8000e74:	200018a4 	.word	0x200018a4
 8000e78:	2000253c 	.word	0x2000253c
 8000e7c:	2000233c 	.word	0x2000233c
 8000e80:	2000001c 	.word	0x2000001c
 8000e84:	2000000c 	.word	0x2000000c
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	20000dec 	.word	0x20000dec
 8000e90:	200037fc 	.word	0x200037fc
 8000e94:	200037fb 	.word	0x200037fb
 8000e98:	20003e18 	.word	0x20003e18
 8000e9c:	20003e08 	.word	0x20003e08
 8000ea0:	20003c08 	.word	0x20003c08
 8000ea4:	200011ec 	.word	0x200011ec
 8000ea8:	200037ff 	.word	0x200037ff
 8000eac:	200037fe 	.word	0x200037fe
 8000eb0:	20000bec 	.word	0x20000bec
 8000eb4:	20001dfd 	.word	0x20001dfd
 8000eb8:	20001df0 	.word	0x20001df0
 8000ebc:	20001f84 	.word	0x20001f84
 8000ec0:	4a7c      	ldr	r2, [pc, #496]	; (80010b4 <main+0xa20>)
 8000ec2:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
	  						wf._new_data_rcv=0;//
 8000ec6:	4b7b      	ldr	r3, [pc, #492]	; (80010b4 <main+0xa20>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	  						wf._send_data=1;
 8000ece:	4b79      	ldr	r3, [pc, #484]	; (80010b4 <main+0xa20>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
	  						}
	  					}

	  		}
// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT
	  		if((FLAG_UART2 == 1)||(lr.tmr_dly_ON==1))  //Evento de dato recibido LoRA debo verificar que es
 8000ed6:	4b78      	ldr	r3, [pc, #480]	; (80010b8 <main+0xa24>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d005      	beq.n	8000eea <main+0x856>
 8000ede:	4b77      	ldr	r3, [pc, #476]	; (80010bc <main+0xa28>)
 8000ee0:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	f040 80b2 	bne.w	800104e <main+0x9ba>
	  		{
	  			if(FLAG_UART2==1)
 8000eea:	4b73      	ldr	r3, [pc, #460]	; (80010b8 <main+0xa24>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d160      	bne.n	8000fb4 <main+0x920>
	  				{
	  				FLAG_UART2=0;
 8000ef2:	4b71      	ldr	r3, [pc, #452]	; (80010b8 <main+0xa24>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
	  				LoRa_decode(&lr);
 8000ef8:	4870      	ldr	r0, [pc, #448]	; (80010bc <main+0xa28>)
 8000efa:	f00a ff73 	bl	800bde4 <LoRa_decode>
	  				if(lr._data_available)
 8000efe:	4b6f      	ldr	r3, [pc, #444]	; (80010bc <main+0xa28>)
 8000f00:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d055      	beq.n	8000fb4 <main+0x920>
	  				{
	  					CopiaVector(lr.dataRCV_hld,lr.dataRCV,lr._n_dataRCV,1,"D");
 8000f08:	4b6c      	ldr	r3, [pc, #432]	; (80010bc <main+0xa28>)
 8000f0a:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	; 0x4d8
 8000f0e:	4b6c      	ldr	r3, [pc, #432]	; (80010c0 <main+0xa2c>)
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2301      	movs	r3, #1
 8000f14:	496b      	ldr	r1, [pc, #428]	; (80010c4 <main+0xa30>)
 8000f16:	486c      	ldr	r0, [pc, #432]	; (80010c8 <main+0xa34>)
 8000f18:	f00d ff04 	bl	800ed24 <CopiaVector>
	  					}
	  					ModBUS_F03_Assign(&mb_eth,0,atoi(num,10));
						*/

	  					char num[6];
	  					int i=0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	647b      	str	r3, [r7, #68]	; 0x44
	  					int n=0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	643b      	str	r3, [r7, #64]	; 0x40
	  					int lnn=0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	63bb      	str	r3, [r7, #56]	; 0x38
	  					lnn=strlen(lr.dataRCV_hld);
 8000f28:	4867      	ldr	r0, [pc, #412]	; (80010c8 <main+0xa34>)
 8000f2a:	f7ff f963 	bl	80001f4 <strlen>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	63bb      	str	r3, [r7, #56]	; 0x38
	  					while(i < lnn-1)
 8000f32:	e03a      	b.n	8000faa <main+0x916>
	  					{
							if( i!=0) i++;
 8000f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <main+0x8ac>
 8000f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	647b      	str	r3, [r7, #68]	; 0x44
							int j=0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	63fb      	str	r3, [r7, #60]	; 0x3c
								while(lr.dataRCV_hld[i] != ';')
 8000f44:	e011      	b.n	8000f6a <main+0x8d6>
								{
									num[j]=lr.dataRCV_hld[i];
 8000f46:	4a5d      	ldr	r2, [pc, #372]	; (80010bc <main+0xa28>)
 8000f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f4a:	4413      	add	r3, r2
 8000f4c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000f50:	7819      	ldrb	r1, [r3, #0]
 8000f52:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f58:	4413      	add	r3, r2
 8000f5a:	460a      	mov	r2, r1
 8000f5c:	701a      	strb	r2, [r3, #0]
									j++;
 8000f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f60:	3301      	adds	r3, #1
 8000f62:	63fb      	str	r3, [r7, #60]	; 0x3c
									i++;
 8000f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f66:	3301      	adds	r3, #1
 8000f68:	647b      	str	r3, [r7, #68]	; 0x44
								while(lr.dataRCV_hld[i] != ';')
 8000f6a:	4a54      	ldr	r2, [pc, #336]	; (80010bc <main+0xa28>)
 8000f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f6e:	4413      	add	r3, r2
 8000f70:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b3b      	cmp	r3, #59	; 0x3b
 8000f78:	d1e5      	bne.n	8000f46 <main+0x8b2>
								}
							num[j]='\0';
 8000f7a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f80:	4413      	add	r3, r2
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
							ModBUS_F03_Assign(&mb_eth,n,atoi(num,10));
 8000f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f88:	b2dc      	uxtb	r4, r3
 8000f8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f8e:	210a      	movs	r1, #10
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00d ff12 	bl	800edba <atoi>
 8000f96:	4603      	mov	r3, r0
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4621      	mov	r1, r4
 8000f9e:	484b      	ldr	r0, [pc, #300]	; (80010cc <main+0xa38>)
 8000fa0:	f00b fc4b 	bl	800c83a <ModBUS_F03_Assign>
							n++;												//Incremento posición  a almacenar
 8000fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	643b      	str	r3, [r7, #64]	; 0x40
	  					while(i < lnn-1)
 8000faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fac:	3b01      	subs	r3, #1
 8000fae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	dbbf      	blt.n	8000f34 <main+0x8a0>


	  				}
	  				}

	  			if(lr.tmr_dly_ON==1)
 8000fb4:	4b41      	ldr	r3, [pc, #260]	; (80010bc <main+0xa28>)
 8000fb6:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d147      	bne.n	800104e <main+0x9ba>
	  				{
	  					lr.tmr_dly_ON=0;
 8000fbe:	4b3f      	ldr	r3, [pc, #252]	; (80010bc <main+0xa28>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
	  					LoRa_reset_sndTIMER(&lr,3000);
 8000fc6:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000fca:	483c      	ldr	r0, [pc, #240]	; (80010bc <main+0xa28>)
 8000fcc:	f00a feee 	bl	800bdac <LoRa_reset_sndTIMER>
						lr.dest_address[0]='\0';
 8000fd0:	4b3a      	ldr	r3, [pc, #232]	; (80010bc <main+0xa28>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	759a      	strb	r2, [r3, #22]
						lr.txbuff[0]='\0';
 8000fd6:	4b39      	ldr	r3, [pc, #228]	; (80010bc <main+0xa28>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
			  			strncat(lr.dest_address,"1",1);
 8000fde:	483c      	ldr	r0, [pc, #240]	; (80010d0 <main+0xa3c>)
 8000fe0:	f7ff f908 	bl	80001f4 <strlen>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b39      	ldr	r3, [pc, #228]	; (80010d0 <main+0xa3c>)
 8000fea:	4413      	add	r3, r2
 8000fec:	4939      	ldr	r1, [pc, #228]	; (80010d4 <main+0xa40>)
 8000fee:	461a      	mov	r2, r3
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	8013      	strh	r3, [r2, #0]
			  			strncat(lr.txbuff,"prueba de envio de mensaje de texto",strlen("prueba de envio de mensaje de texto"));
 8000ff6:	4838      	ldr	r0, [pc, #224]	; (80010d8 <main+0xa44>)
 8000ff8:	f7ff f8fc 	bl	80001f4 <strlen>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <main+0xa44>)
 8001002:	4413      	add	r3, r2
 8001004:	4a35      	ldr	r2, [pc, #212]	; (80010dc <main+0xa48>)
 8001006:	4614      	mov	r4, r2
 8001008:	469c      	mov	ip, r3
 800100a:	f104 0e20 	add.w	lr, r4, #32
 800100e:	4665      	mov	r5, ip
 8001010:	4626      	mov	r6, r4
 8001012:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001014:	6028      	str	r0, [r5, #0]
 8001016:	6069      	str	r1, [r5, #4]
 8001018:	60aa      	str	r2, [r5, #8]
 800101a:	60eb      	str	r3, [r5, #12]
 800101c:	3410      	adds	r4, #16
 800101e:	f10c 0c10 	add.w	ip, ip, #16
 8001022:	4574      	cmp	r4, lr
 8001024:	d1f3      	bne.n	800100e <main+0x97a>
 8001026:	4663      	mov	r3, ip
 8001028:	4622      	mov	r2, r4
 800102a:	6810      	ldr	r0, [r2, #0]
 800102c:	6018      	str	r0, [r3, #0]
			  			lr.txitems=strlen("prueba de envio de mensaje de texto");
 800102e:	4b23      	ldr	r3, [pc, #140]	; (80010bc <main+0xa28>)
 8001030:	2223      	movs	r2, #35	; 0x23
 8001032:	f8c3 27e0 	str.w	r2, [r3, #2016]	; 0x7e0
		  				lr.estado=_SENT;										//
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <main+0xa28>)
 8001038:	2214      	movs	r2, #20
 800103a:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
			  			error=LoRa_Send(&lr,&huart2);
 800103e:	4928      	ldr	r1, [pc, #160]	; (80010e0 <main+0xa4c>)
 8001040:	481e      	ldr	r0, [pc, #120]	; (80010bc <main+0xa28>)
 8001042:	f00a fe05 	bl	800bc50 <LoRa_Send>
 8001046:	4603      	mov	r3, r0
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <main+0xa50>)
 800104c:	701a      	strb	r2, [r3, #0]
	  				}
	  		}

	  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 800104e:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <main+0xa54>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d108      	bne.n	8001068 <main+0x9d4>
	  			{
	  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8001056:	2201      	movs	r2, #1
 8001058:	4924      	ldr	r1, [pc, #144]	; (80010ec <main+0xa58>)
 800105a:	4816      	ldr	r0, [pc, #88]	; (80010b4 <main+0xa20>)
 800105c:	f008 fe00 	bl	8009c60 <WiFi_Conn_ND>
 8001060:	4603      	mov	r3, r0
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <main+0xa5c>)
 8001066:	701a      	strb	r2, [r3, #0]
	  			}
	  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <main+0xa60>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	f47f adab 	bne.w	8000bc8 <main+0x534>
	  			{
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001078:	481f      	ldr	r0, [pc, #124]	; (80010f8 <main+0xa64>)
 800107a:	f002 fa93 	bl	80035a4 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 800107e:	2115      	movs	r1, #21
 8001080:	481e      	ldr	r0, [pc, #120]	; (80010fc <main+0xa68>)
 8001082:	f000 fae3 	bl	800164c <ITM0_Write>
	  				HAL_Delay(2000);//210419
 8001086:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800108a:	f001 fe29 	bl	8002ce0 <HAL_Delay>
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001094:	4818      	ldr	r0, [pc, #96]	; (80010f8 <main+0xa64>)
 8001096:	f002 fa85 	bl	80035a4 <HAL_GPIO_WritePin>
	  				ITM0_Write("\r\n ESP WAIT 5s AFT RST\r\n",strlen("\r\n ESP WAIT 5s AFT RST\r\n"));
 800109a:	2118      	movs	r1, #24
 800109c:	4818      	ldr	r0, [pc, #96]	; (8001100 <main+0xa6c>)
 800109e:	f000 fad5 	bl	800164c <ITM0_Write>
	  				HAL_Delay(5000);//210419
 80010a2:	f241 3088 	movw	r0, #5000	; 0x1388
 80010a6:	f001 fe1b 	bl	8002ce0 <HAL_Delay>
	  				esp_restart=0;
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <main+0xa60>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
	  	  if (ESP_HW_Init==1)
 80010b0:	e58a      	b.n	8000bc8 <main+0x534>
 80010b2:	bf00      	nop
 80010b4:	20000b58 	.word	0x20000b58
 80010b8:	200037fd 	.word	0x200037fd
 80010bc:	20000350 	.word	0x20000350
 80010c0:	080103d4 	.word	0x080103d4
 80010c4:	20000526 	.word	0x20000526
 80010c8:	200006a6 	.word	0x200006a6
 80010cc:	200018a4 	.word	0x200018a4
 80010d0:	20000366 	.word	0x20000366
 80010d4:	080103d8 	.word	0x080103d8
 80010d8:	2000082c 	.word	0x2000082c
 80010dc:	080103dc 	.word	0x080103dc
 80010e0:	200002c0 	.word	0x200002c0
 80010e4:	20000b54 	.word	0x20000b54
 80010e8:	200037f7 	.word	0x200037f7
 80010ec:	2000027c 	.word	0x2000027c
 80010f0:	20003801 	.word	0x20003801
 80010f4:	20003800 	.word	0x20003800
 80010f8:	40020000 	.word	0x40020000
 80010fc:	08010400 	.word	0x08010400
 8001100:	08010418 	.word	0x08010418

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b094      	sub	sp, #80	; 0x50
 8001108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110a:	f107 0320 	add.w	r3, r7, #32
 800110e:	2230      	movs	r2, #48	; 0x30
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f00e f851 	bl	800f1ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	4b27      	ldr	r3, [pc, #156]	; (80011cc <SystemClock_Config+0xc8>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	4a26      	ldr	r2, [pc, #152]	; (80011cc <SystemClock_Config+0xc8>)
 8001132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001136:	6413      	str	r3, [r2, #64]	; 0x40
 8001138:	4b24      	ldr	r3, [pc, #144]	; (80011cc <SystemClock_Config+0xc8>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <SystemClock_Config+0xcc>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a20      	ldr	r2, [pc, #128]	; (80011d0 <SystemClock_Config+0xcc>)
 800114e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <SystemClock_Config+0xcc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001160:	2301      	movs	r3, #1
 8001162:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001164:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116a:	2302      	movs	r3, #2
 800116c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800116e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001172:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001174:	230c      	movs	r3, #12
 8001176:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001178:	2360      	movs	r3, #96	; 0x60
 800117a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800117c:	2302      	movs	r3, #2
 800117e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001180:	2304      	movs	r3, #4
 8001182:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001184:	f107 0320 	add.w	r3, r7, #32
 8001188:	4618      	mov	r0, r3
 800118a:	f002 fa3f 	bl	800360c <HAL_RCC_OscConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001194:	f001 fa1e 	bl	80025d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001198:	230f      	movs	r3, #15
 800119a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119c:	2302      	movs	r3, #2
 800119e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	2103      	movs	r1, #3
 80011b4:	4618      	mov	r0, r3
 80011b6:	f002 fca1 	bl	8003afc <HAL_RCC_ClockConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011c0:	f001 fa08 	bl	80025d4 <Error_Handler>
  }
}
 80011c4:	bf00      	nop
 80011c6:	3750      	adds	r7, #80	; 0x50
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40007000 	.word	0x40007000

080011d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <MX_SPI1_Init+0x64>)
 80011da:	4a18      	ldr	r2, [pc, #96]	; (800123c <MX_SPI1_Init+0x68>)
 80011dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <MX_SPI1_Init+0x64>)
 80011e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <MX_SPI1_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <MX_SPI1_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_SPI1_Init+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <MX_SPI1_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_SPI1_Init+0x64>)
 8001200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001204:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_SPI1_Init+0x64>)
 8001208:	2210      	movs	r2, #16
 800120a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <MX_SPI1_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_SPI1_Init+0x64>)
 8001214:	2200      	movs	r2, #0
 8001216:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001218:	4b07      	ldr	r3, [pc, #28]	; (8001238 <MX_SPI1_Init+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_SPI1_Init+0x64>)
 8001220:	220a      	movs	r2, #10
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001224:	4804      	ldr	r0, [pc, #16]	; (8001238 <MX_SPI1_Init+0x64>)
 8001226:	f002 fe49 	bl	8003ebc <HAL_SPI_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001230:	f001 f9d0 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000194 	.word	0x20000194
 800123c:	40013000 	.word	0x40013000

08001240 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08e      	sub	sp, #56	; 0x38
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001246:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	f107 0320 	add.w	r3, r7, #32
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
 800126c:	615a      	str	r2, [r3, #20]
 800126e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001270:	4b2f      	ldr	r3, [pc, #188]	; (8001330 <MX_TIM2_Init+0xf0>)
 8001272:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001276:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8001278:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <MX_TIM2_Init+0xf0>)
 800127a:	2264      	movs	r2, #100	; 0x64
 800127c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127e:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <MX_TIM2_Init+0xf0>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001284:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <MX_TIM2_Init+0xf0>)
 8001286:	2264      	movs	r2, #100	; 0x64
 8001288:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128a:	4b29      	ldr	r3, [pc, #164]	; (8001330 <MX_TIM2_Init+0xf0>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001290:	4b27      	ldr	r3, [pc, #156]	; (8001330 <MX_TIM2_Init+0xf0>)
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001296:	4826      	ldr	r0, [pc, #152]	; (8001330 <MX_TIM2_Init+0xf0>)
 8001298:	f003 f906 	bl	80044a8 <HAL_TIM_Base_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80012a2:	f001 f997 	bl	80025d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012b0:	4619      	mov	r1, r3
 80012b2:	481f      	ldr	r0, [pc, #124]	; (8001330 <MX_TIM2_Init+0xf0>)
 80012b4:	f003 fd0e 	bl	8004cd4 <HAL_TIM_ConfigClockSource>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80012be:	f001 f989 	bl	80025d4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80012c2:	481b      	ldr	r0, [pc, #108]	; (8001330 <MX_TIM2_Init+0xf0>)
 80012c4:	f003 f93f 	bl	8004546 <HAL_TIM_OC_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80012ce:	f001 f981 	bl	80025d4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80012d2:	2108      	movs	r1, #8
 80012d4:	4816      	ldr	r0, [pc, #88]	; (8001330 <MX_TIM2_Init+0xf0>)
 80012d6:	f003 fb3f 	bl	8004958 <HAL_TIM_OnePulse_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80012e0:	f001 f978 	bl	80025d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ec:	f107 0320 	add.w	r3, r7, #32
 80012f0:	4619      	mov	r1, r3
 80012f2:	480f      	ldr	r0, [pc, #60]	; (8001330 <MX_TIM2_Init+0xf0>)
 80012f4:	f004 f8aa 	bl	800544c <HAL_TIMEx_MasterConfigSynchronization>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 80012fe:	f001 f969 	bl	80025d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8001302:	2320      	movs	r3, #32
 8001304:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2200      	movs	r2, #0
 8001316:	4619      	mov	r1, r3
 8001318:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_TIM2_Init+0xf0>)
 800131a:	f003 fc7f 	bl	8004c1c <HAL_TIM_OC_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001324:	f001 f956 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001328:	bf00      	nop
 800132a:	3738      	adds	r7, #56	; 0x38
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200001ec 	.word	0x200001ec

08001334 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08e      	sub	sp, #56	; 0x38
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001348:	f107 0320 	add.w	r3, r7, #32
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
 8001360:	615a      	str	r2, [r3, #20]
 8001362:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001364:	4b2f      	ldr	r3, [pc, #188]	; (8001424 <MX_TIM3_Init+0xf0>)
 8001366:	4a30      	ldr	r2, [pc, #192]	; (8001428 <MX_TIM3_Init+0xf4>)
 8001368:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 800136a:	4b2e      	ldr	r3, [pc, #184]	; (8001424 <MX_TIM3_Init+0xf0>)
 800136c:	2264      	movs	r2, #100	; 0x64
 800136e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001370:	4b2c      	ldr	r3, [pc, #176]	; (8001424 <MX_TIM3_Init+0xf0>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 8001376:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <MX_TIM3_Init+0xf0>)
 8001378:	2296      	movs	r2, #150	; 0x96
 800137a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137c:	4b29      	ldr	r3, [pc, #164]	; (8001424 <MX_TIM3_Init+0xf0>)
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001382:	4b28      	ldr	r3, [pc, #160]	; (8001424 <MX_TIM3_Init+0xf0>)
 8001384:	2280      	movs	r2, #128	; 0x80
 8001386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001388:	4826      	ldr	r0, [pc, #152]	; (8001424 <MX_TIM3_Init+0xf0>)
 800138a:	f003 f88d 	bl	80044a8 <HAL_TIM_Base_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001394:	f001 f91e 	bl	80025d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800139e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a2:	4619      	mov	r1, r3
 80013a4:	481f      	ldr	r0, [pc, #124]	; (8001424 <MX_TIM3_Init+0xf0>)
 80013a6:	f003 fc95 	bl	8004cd4 <HAL_TIM_ConfigClockSource>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80013b0:	f001 f910 	bl	80025d4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80013b4:	481b      	ldr	r0, [pc, #108]	; (8001424 <MX_TIM3_Init+0xf0>)
 80013b6:	f003 f8c6 	bl	8004546 <HAL_TIM_OC_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80013c0:	f001 f908 	bl	80025d4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80013c4:	2108      	movs	r1, #8
 80013c6:	4817      	ldr	r0, [pc, #92]	; (8001424 <MX_TIM3_Init+0xf0>)
 80013c8:	f003 fac6 	bl	8004958 <HAL_TIM_OnePulse_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 80013d2:	f001 f8ff 	bl	80025d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	4619      	mov	r1, r3
 80013e4:	480f      	ldr	r0, [pc, #60]	; (8001424 <MX_TIM3_Init+0xf0>)
 80013e6:	f004 f831 	bl	800544c <HAL_TIMEx_MasterConfigSynchronization>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 80013f0:	f001 f8f0 	bl	80025d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 80013f4:	2320      	movs	r3, #32
 80013f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2200      	movs	r2, #0
 8001408:	4619      	mov	r1, r3
 800140a:	4806      	ldr	r0, [pc, #24]	; (8001424 <MX_TIM3_Init+0xf0>)
 800140c:	f003 fc06 	bl	8004c1c <HAL_TIM_OC_ConfigChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001416:	f001 f8dd 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	3738      	adds	r7, #56	; 0x38
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000234 	.word	0x20000234
 8001428:	40000400 	.word	0x40000400

0800142c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <MX_USART1_UART_Init+0x50>)
 8001434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 8001464:	f004 f874 	bl	8005550 <HAL_UART_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800146e:	f001 f8b1 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2000027c 	.word	0x2000027c
 800147c:	40011000 	.word	0x40011000

08001480 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 8001486:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <MX_USART2_UART_Init+0x50>)
 8001488:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 800148c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001490:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 80014a6:	220c      	movs	r2, #12
 80014a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 80014b8:	f004 f84a 	bl	8005550 <HAL_UART_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014c2:	f001 f887 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200002c0 	.word	0x200002c0
 80014d0:	40004400 	.word	0x40004400

080014d4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_USART6_UART_Init+0x4c>)
 80014da:	4a12      	ldr	r2, [pc, #72]	; (8001524 <MX_USART6_UART_Init+0x50>)
 80014dc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <MX_USART6_UART_Init+0x4c>)
 80014e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_USART6_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_USART6_UART_Init+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <MX_USART6_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_USART6_UART_Init+0x4c>)
 80014fa:	220c      	movs	r2, #12
 80014fc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <MX_USART6_UART_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MX_USART6_UART_Init+0x4c>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_USART6_UART_Init+0x4c>)
 800150c:	f004 f820 	bl	8005550 <HAL_UART_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001516:	f001 f85d 	bl	80025d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000304 	.word	0x20000304
 8001524:	40011400 	.word	0x40011400

08001528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <MX_GPIO_Init+0x118>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a3e      	ldr	r2, [pc, #248]	; (8001640 <MX_GPIO_Init+0x118>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b3c      	ldr	r3, [pc, #240]	; (8001640 <MX_GPIO_Init+0x118>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b38      	ldr	r3, [pc, #224]	; (8001640 <MX_GPIO_Init+0x118>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a37      	ldr	r2, [pc, #220]	; (8001640 <MX_GPIO_Init+0x118>)
 8001564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b35      	ldr	r3, [pc, #212]	; (8001640 <MX_GPIO_Init+0x118>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	4b31      	ldr	r3, [pc, #196]	; (8001640 <MX_GPIO_Init+0x118>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a30      	ldr	r2, [pc, #192]	; (8001640 <MX_GPIO_Init+0x118>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b2e      	ldr	r3, [pc, #184]	; (8001640 <MX_GPIO_Init+0x118>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <MX_GPIO_Init+0x118>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a29      	ldr	r2, [pc, #164]	; (8001640 <MX_GPIO_Init+0x118>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b27      	ldr	r3, [pc, #156]	; (8001640 <MX_GPIO_Init+0x118>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b4:	4823      	ldr	r0, [pc, #140]	; (8001644 <MX_GPIO_Init+0x11c>)
 80015b6:	f001 fff5 	bl	80035a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|WIFI_EN_Pin, GPIO_PIN_SET);
 80015ba:	2201      	movs	r2, #1
 80015bc:	f44f 7188 	mov.w	r1, #272	; 0x110
 80015c0:	4821      	ldr	r0, [pc, #132]	; (8001648 <MX_GPIO_Init+0x120>)
 80015c2:	f001 ffef 	bl	80035a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 80015c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	4819      	ldr	r0, [pc, #100]	; (8001644 <MX_GPIO_Init+0x11c>)
 80015e0:	f001 fd78 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_BTN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin;
 80015e4:	2301      	movs	r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_BTN_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	4814      	ldr	r0, [pc, #80]	; (8001648 <MX_GPIO_Init+0x120>)
 80015f8:	f001 fd6c 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80015fc:	2310      	movs	r3, #16
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001600:	2301      	movs	r3, #1
 8001602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001608:	2303      	movs	r3, #3
 800160a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	480d      	ldr	r0, [pc, #52]	; (8001648 <MX_GPIO_Init+0x120>)
 8001614:	f001 fd5e 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_EN_Pin */
  GPIO_InitStruct.Pin = WIFI_EN_Pin;
 8001618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800161c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161e:	2301      	movs	r3, #1
 8001620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_EN_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_GPIO_Init+0x120>)
 8001632:	f001 fd4f 	bl	80030d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800
 8001644:	40020800 	.word	0x40020800
 8001648:	40020000 	.word	0x40020000

0800164c <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	e009      	b.n	8001670 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ffed 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3301      	adds	r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	dbf1      	blt.n	800165c <ITM0_Write+0x10>
  }
  return len;
 8001678:	683b      	ldr	r3, [r7, #0]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 800168a:	4b68      	ldr	r3, [pc, #416]	; (800182c <SysTick_Handler+0x1a8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	4a66      	ldr	r2, [pc, #408]	; (800182c <SysTick_Handler+0x1a8>)
 8001692:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 8001694:	4b66      	ldr	r3, [pc, #408]	; (8001830 <SysTick_Handler+0x1ac>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	4a65      	ldr	r2, [pc, #404]	; (8001830 <SysTick_Handler+0x1ac>)
 800169c:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 800169e:	4b65      	ldr	r3, [pc, #404]	; (8001834 <SysTick_Handler+0x1b0>)
 80016a0:	791b      	ldrb	r3, [r3, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d004      	beq.n	80016b0 <SysTick_Handler+0x2c>
 80016a6:	4b64      	ldr	r3, [pc, #400]	; (8001838 <SysTick_Handler+0x1b4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	4a62      	ldr	r2, [pc, #392]	; (8001838 <SysTick_Handler+0x1b4>)
 80016ae:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 80016b0:	4b60      	ldr	r3, [pc, #384]	; (8001834 <SysTick_Handler+0x1b0>)
 80016b2:	791b      	ldrb	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00c      	beq.n	80016d2 <SysTick_Handler+0x4e>
 80016b8:	4b5e      	ldr	r3, [pc, #376]	; (8001834 <SysTick_Handler+0x1b0>)
 80016ba:	885b      	ldrh	r3, [r3, #2]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b5e      	ldr	r3, [pc, #376]	; (8001838 <SysTick_Handler+0x1b4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	da05      	bge.n	80016d2 <SysTick_Handler+0x4e>
		{
			mb_eth._w_answer=0;
 80016c6:	4b5b      	ldr	r3, [pc, #364]	; (8001834 <SysTick_Handler+0x1b0>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	711a      	strb	r2, [r3, #4]
			MB_TOUT_ticks=0;
 80016cc:	4b5a      	ldr	r3, [pc, #360]	; (8001838 <SysTick_Handler+0x1b4>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
		}

// ENVIO DATOS LoRa ---------------------------------------------------------------//

	if(lr.tmr_dly_en==1)
 80016d2:	4b5a      	ldr	r3, [pc, #360]	; (800183c <SysTick_Handler+0x1b8>)
 80016d4:	f893 37ed 	ldrb.w	r3, [r3, #2029]	; 0x7ed
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d116      	bne.n	800170a <SysTick_Handler+0x86>
	{
		lr.tmr_dlyCNT++;
 80016dc:	4b57      	ldr	r3, [pc, #348]	; (800183c <SysTick_Handler+0x1b8>)
 80016de:	f8d3 37f4 	ldr.w	r3, [r3, #2036]	; 0x7f4
 80016e2:	3301      	adds	r3, #1
 80016e4:	4a55      	ldr	r2, [pc, #340]	; (800183c <SysTick_Handler+0x1b8>)
 80016e6:	f8c2 37f4 	str.w	r3, [r2, #2036]	; 0x7f4
		if(lr.tmr_dlyCNT > lr.tmr_dly)
 80016ea:	4b54      	ldr	r3, [pc, #336]	; (800183c <SysTick_Handler+0x1b8>)
 80016ec:	f8d3 27f4 	ldr.w	r2, [r3, #2036]	; 0x7f4
 80016f0:	4b52      	ldr	r3, [pc, #328]	; (800183c <SysTick_Handler+0x1b8>)
 80016f2:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
 80016f6:	429a      	cmp	r2, r3
 80016f8:	dd07      	ble.n	800170a <SysTick_Handler+0x86>
		{
			lr.tmr_dly_ON=1;
 80016fa:	4b50      	ldr	r3, [pc, #320]	; (800183c <SysTick_Handler+0x1b8>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
			lr.tmr_dly_en=0;
 8001702:	4b4e      	ldr	r3, [pc, #312]	; (800183c <SysTick_Handler+0x1b8>)
 8001704:	2200      	movs	r2, #0
 8001706:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		}
	}
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 800170a:	4b4d      	ldr	r3, [pc, #308]	; (8001840 <SysTick_Handler+0x1bc>)
 800170c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001710:	f240 2261 	movw	r2, #609	; 0x261
 8001714:	4293      	cmp	r3, r2
 8001716:	d005      	beq.n	8001724 <SysTick_Handler+0xa0>
 8001718:	4b49      	ldr	r3, [pc, #292]	; (8001840 <SysTick_Handler+0x1bc>)
 800171a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800171e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001722:	d109      	bne.n	8001738 <SysTick_Handler+0xb4>
 8001724:	4b46      	ldr	r3, [pc, #280]	; (8001840 <SysTick_Handler+0x1bc>)
 8001726:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800172a:	2b00      	cmp	r3, #0
 800172c:	d104      	bne.n	8001738 <SysTick_Handler+0xb4>
 800172e:	4b45      	ldr	r3, [pc, #276]	; (8001844 <SysTick_Handler+0x1c0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	3301      	adds	r3, #1
 8001734:	4a43      	ldr	r2, [pc, #268]	; (8001844 <SysTick_Handler+0x1c0>)
 8001736:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 2000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;
 8001738:	4b42      	ldr	r3, [pc, #264]	; (8001844 <SysTick_Handler+0x1c0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001740:	db0c      	blt.n	800175c <SysTick_Handler+0xd8>
 8001742:	4b3f      	ldr	r3, [pc, #252]	; (8001840 <SysTick_Handler+0x1bc>)
 8001744:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8001748:	2b01      	cmp	r3, #1
 800174a:	d007      	beq.n	800175c <SysTick_Handler+0xd8>
 800174c:	4b3c      	ldr	r3, [pc, #240]	; (8001840 <SysTick_Handler+0x1bc>)
 800174e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <SysTick_Handler+0xd8>
 8001756:	4b3c      	ldr	r3, [pc, #240]	; (8001848 <SysTick_Handler+0x1c4>)
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S0_status == 0)
 800175c:	4b3b      	ldr	r3, [pc, #236]	; (800184c <SysTick_Handler+0x1c8>)
 800175e:	7b9b      	ldrb	r3, [r3, #14]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10e      	bne.n	8001782 <SysTick_Handler+0xfe>
	{
		ETH.ETH_WDG++;
 8001764:	4b39      	ldr	r3, [pc, #228]	; (800184c <SysTick_Handler+0x1c8>)
 8001766:	899b      	ldrh	r3, [r3, #12]
 8001768:	3301      	adds	r3, #1
 800176a:	b29a      	uxth	r2, r3
 800176c:	4b37      	ldr	r3, [pc, #220]	; (800184c <SysTick_Handler+0x1c8>)
 800176e:	819a      	strh	r2, [r3, #12]
		if (ETH.ETH_WDG>=64000)
 8001770:	4b36      	ldr	r3, [pc, #216]	; (800184c <SysTick_Handler+0x1c8>)
 8001772:	899b      	ldrh	r3, [r3, #12]
 8001774:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001778:	d303      	bcc.n	8001782 <SysTick_Handler+0xfe>
		{
			ETH.ETH_WDG=64000;
 800177a:	4b34      	ldr	r3, [pc, #208]	; (800184c <SysTick_Handler+0x1c8>)
 800177c:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001780:	819a      	strh	r2, [r3, #12]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 8001782:	4b2a      	ldr	r3, [pc, #168]	; (800182c <SysTick_Handler+0x1a8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b64      	cmp	r3, #100	; 0x64
 8001788:	f040 8420 	bne.w	8001fcc <SysTick_Handler+0x948>
  {
	  dbgn++;
 800178c:	4b30      	ldr	r3, [pc, #192]	; (8001850 <SysTick_Handler+0x1cc>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	4a2f      	ldr	r2, [pc, #188]	; (8001850 <SysTick_Handler+0x1cc>)
 8001794:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 8001796:	4b25      	ldr	r3, [pc, #148]	; (800182c <SysTick_Handler+0x1a8>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 800179c:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <SysTick_Handler+0x1d0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	3301      	adds	r3, #1
 80017a2:	4a2c      	ldr	r2, [pc, #176]	; (8001854 <SysTick_Handler+0x1d0>)
 80017a4:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 80017a6:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <SysTick_Handler+0x1d4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80017ae:	d102      	bne.n	80017b6 <SysTick_Handler+0x132>
 80017b0:	4b29      	ldr	r3, [pc, #164]	; (8001858 <SysTick_Handler+0x1d4>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 80017b6:	4b29      	ldr	r3, [pc, #164]	; (800185c <SysTick_Handler+0x1d8>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d104      	bne.n	80017c8 <SysTick_Handler+0x144>
 80017be:	4b26      	ldr	r3, [pc, #152]	; (8001858 <SysTick_Handler+0x1d4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	4a24      	ldr	r2, [pc, #144]	; (8001858 <SysTick_Handler+0x1d4>)
 80017c6:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 80017c8:	4b23      	ldr	r3, [pc, #140]	; (8001858 <SysTick_Handler+0x1d4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b64      	cmp	r3, #100	; 0x64
 80017ce:	d102      	bne.n	80017d6 <SysTick_Handler+0x152>
 80017d0:	4b22      	ldr	r3, [pc, #136]	; (800185c <SysTick_Handler+0x1d8>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 80017d6:	4b21      	ldr	r3, [pc, #132]	; (800185c <SysTick_Handler+0x1d8>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d104      	bne.n	80017e8 <SysTick_Handler+0x164>
 80017de:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <SysTick_Handler+0x1d4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	4a1c      	ldr	r2, [pc, #112]	; (8001858 <SysTick_Handler+0x1d4>)
 80017e6:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <SysTick_Handler+0x1d4>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <SysTick_Handler+0x172>
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <SysTick_Handler+0x1d8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]


	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80017f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017fa:	4819      	ldr	r0, [pc, #100]	; (8001860 <SysTick_Handler+0x1dc>)
 80017fc:	f001 feeb 	bl	80035d6 <HAL_GPIO_TogglePin>
	  if(spi_no_debug)
 8001800:	4b18      	ldr	r3, [pc, #96]	; (8001864 <SysTick_Handler+0x1e0>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 83d1 	beq.w	8001fac <SysTick_Handler+0x928>
	  	  {
	  if(SPI_READ_EN)
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <SysTick_Handler+0x1e4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 83d0 	beq.w	8001fb4 <SysTick_Handler+0x930>
	  {
	     ETH.S0_status=eth_rd_SOCKET_STAT(&ETH,0);
 8001814:	2100      	movs	r1, #0
 8001816:	480d      	ldr	r0, [pc, #52]	; (800184c <SysTick_Handler+0x1c8>)
 8001818:	f00c fd30 	bl	800e27c <eth_rd_SOCKET_STAT>
 800181c:	4603      	mov	r3, r0
 800181e:	461a      	mov	r2, r3
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <SysTick_Handler+0x1c8>)
 8001822:	739a      	strb	r2, [r3, #14]

		  switch(ETH.S0_status)	//Check Socket status
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <SysTick_Handler+0x1c8>)
 8001826:	7b9b      	ldrb	r3, [r3, #14]
 8001828:	e020      	b.n	800186c <SysTick_Handler+0x1e8>
 800182a:	bf00      	nop
 800182c:	20000348 	.word	0x20000348
 8001830:	20003e20 	.word	0x20003e20
 8001834:	200018a4 	.word	0x200018a4
 8001838:	20003e28 	.word	0x20003e28
 800183c:	20000350 	.word	0x20000350
 8001840:	20000b58 	.word	0x20000b58
 8001844:	20002740 	.word	0x20002740
 8001848:	2000273d 	.word	0x2000273d
 800184c:	20002744 	.word	0x20002744
 8001850:	20003e4c 	.word	0x20003e4c
 8001854:	2000034c 	.word	0x2000034c
 8001858:	20003e24 	.word	0x20003e24
 800185c:	20003802 	.word	0x20003802
 8001860:	40020800 	.word	0x40020800
 8001864:	200037f4 	.word	0x200037f4
 8001868:	20003804 	.word	0x20003804
 800186c:	2b5f      	cmp	r3, #95	; 0x5f
 800186e:	f200 83a6 	bhi.w	8001fbe <SysTick_Handler+0x93a>
 8001872:	a201      	add	r2, pc, #4	; (adr r2, 8001878 <SysTick_Handler+0x1f4>)
 8001874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001878:	080019f9 	.word	0x080019f9
 800187c:	08001fbf 	.word	0x08001fbf
 8001880:	08001fbf 	.word	0x08001fbf
 8001884:	08001fbf 	.word	0x08001fbf
 8001888:	08001fbf 	.word	0x08001fbf
 800188c:	08001fbf 	.word	0x08001fbf
 8001890:	08001fbf 	.word	0x08001fbf
 8001894:	08001fbf 	.word	0x08001fbf
 8001898:	08001fbf 	.word	0x08001fbf
 800189c:	08001fbf 	.word	0x08001fbf
 80018a0:	08001fbf 	.word	0x08001fbf
 80018a4:	08001fbf 	.word	0x08001fbf
 80018a8:	08001fbf 	.word	0x08001fbf
 80018ac:	08001fbf 	.word	0x08001fbf
 80018b0:	08001fbf 	.word	0x08001fbf
 80018b4:	08001fbf 	.word	0x08001fbf
 80018b8:	08001fbf 	.word	0x08001fbf
 80018bc:	08001fbf 	.word	0x08001fbf
 80018c0:	08001fbf 	.word	0x08001fbf
 80018c4:	08001a31 	.word	0x08001a31
 80018c8:	08001a83 	.word	0x08001a83
 80018cc:	08001a9b 	.word	0x08001a9b
 80018d0:	08001ab3 	.word	0x08001ab3
 80018d4:	08001acb 	.word	0x08001acb
 80018d8:	08001e27 	.word	0x08001e27
 80018dc:	08001fbf 	.word	0x08001fbf
 80018e0:	08001e3f 	.word	0x08001e3f
 80018e4:	08001e57 	.word	0x08001e57
 80018e8:	08001e95 	.word	0x08001e95
 80018ec:	08001ed3 	.word	0x08001ed3
 80018f0:	08001fbf 	.word	0x08001fbf
 80018f4:	08001fbf 	.word	0x08001fbf
 80018f8:	08001fbf 	.word	0x08001fbf
 80018fc:	08001fbf 	.word	0x08001fbf
 8001900:	08001eeb 	.word	0x08001eeb
 8001904:	08001fbf 	.word	0x08001fbf
 8001908:	08001fbf 	.word	0x08001fbf
 800190c:	08001fbf 	.word	0x08001fbf
 8001910:	08001fbf 	.word	0x08001fbf
 8001914:	08001fbf 	.word	0x08001fbf
 8001918:	08001fbf 	.word	0x08001fbf
 800191c:	08001fbf 	.word	0x08001fbf
 8001920:	08001fbf 	.word	0x08001fbf
 8001924:	08001fbf 	.word	0x08001fbf
 8001928:	08001fbf 	.word	0x08001fbf
 800192c:	08001fbf 	.word	0x08001fbf
 8001930:	08001fbf 	.word	0x08001fbf
 8001934:	08001fbf 	.word	0x08001fbf
 8001938:	08001fbf 	.word	0x08001fbf
 800193c:	08001fbf 	.word	0x08001fbf
 8001940:	08001f65 	.word	0x08001f65
 8001944:	08001fbf 	.word	0x08001fbf
 8001948:	08001fbf 	.word	0x08001fbf
 800194c:	08001fbf 	.word	0x08001fbf
 8001950:	08001fbf 	.word	0x08001fbf
 8001954:	08001fbf 	.word	0x08001fbf
 8001958:	08001fbf 	.word	0x08001fbf
 800195c:	08001fbf 	.word	0x08001fbf
 8001960:	08001fbf 	.word	0x08001fbf
 8001964:	08001fbf 	.word	0x08001fbf
 8001968:	08001fbf 	.word	0x08001fbf
 800196c:	08001fbf 	.word	0x08001fbf
 8001970:	08001fbf 	.word	0x08001fbf
 8001974:	08001fbf 	.word	0x08001fbf
 8001978:	08001fbf 	.word	0x08001fbf
 800197c:	08001fbf 	.word	0x08001fbf
 8001980:	08001f7d 	.word	0x08001f7d
 8001984:	08001fbf 	.word	0x08001fbf
 8001988:	08001fbf 	.word	0x08001fbf
 800198c:	08001fbf 	.word	0x08001fbf
 8001990:	08001fbf 	.word	0x08001fbf
 8001994:	08001fbf 	.word	0x08001fbf
 8001998:	08001fbf 	.word	0x08001fbf
 800199c:	08001fbf 	.word	0x08001fbf
 80019a0:	08001fbf 	.word	0x08001fbf
 80019a4:	08001fbf 	.word	0x08001fbf
 80019a8:	08001fbf 	.word	0x08001fbf
 80019ac:	08001fbf 	.word	0x08001fbf
 80019b0:	08001fbf 	.word	0x08001fbf
 80019b4:	08001fbf 	.word	0x08001fbf
 80019b8:	08001fbf 	.word	0x08001fbf
 80019bc:	08001fbf 	.word	0x08001fbf
 80019c0:	08001fbf 	.word	0x08001fbf
 80019c4:	08001fbf 	.word	0x08001fbf
 80019c8:	08001fbf 	.word	0x08001fbf
 80019cc:	08001fbf 	.word	0x08001fbf
 80019d0:	08001fbf 	.word	0x08001fbf
 80019d4:	08001fbf 	.word	0x08001fbf
 80019d8:	08001fbf 	.word	0x08001fbf
 80019dc:	08001fbf 	.word	0x08001fbf
 80019e0:	08001fbf 	.word	0x08001fbf
 80019e4:	08001fbf 	.word	0x08001fbf
 80019e8:	08001fbf 	.word	0x08001fbf
 80019ec:	08001fbf 	.word	0x08001fbf
 80019f0:	08001fbf 	.word	0x08001fbf
 80019f4:	08001f95 	.word	0x08001f95
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 80019f8:	4b82      	ldr	r3, [pc, #520]	; (8001c04 <SysTick_Handler+0x580>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <SysTick_Handler+0x384>
 8001a00:	2113      	movs	r1, #19
 8001a02:	4881      	ldr	r0, [pc, #516]	; (8001c08 <SysTick_Handler+0x584>)
 8001a04:	f7ff fe22 	bl	800164c <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH, 0 ,OPEN );
 8001a08:	2201      	movs	r2, #1
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	487f      	ldr	r0, [pc, #508]	; (8001c0c <SysTick_Handler+0x588>)
 8001a0e:	f00c fb03 	bl	800e018 <eth_wr_SOCKET_CMD>
					 // Si no tengo intento de ARP por 5 segundos vuelvo a inicializar
					 if(ETH.ETH_WDG>=5000)
 8001a12:	4b7e      	ldr	r3, [pc, #504]	; (8001c0c <SysTick_Handler+0x588>)
 8001a14:	899b      	ldrh	r3, [r3, #12]
 8001a16:	f241 3287 	movw	r2, #4999	; 0x1387
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	f240 82cc 	bls.w	8001fb8 <SysTick_Handler+0x934>
					 {
						 eth_init(&ETH);
 8001a20:	487a      	ldr	r0, [pc, #488]	; (8001c0c <SysTick_Handler+0x588>)
 8001a22:	f00c fb35 	bl	800e090 <eth_init>

						 eth_socket_init(&ETH,0);
 8001a26:	2100      	movs	r1, #0
 8001a28:	4878      	ldr	r0, [pc, #480]	; (8001c0c <SysTick_Handler+0x588>)
 8001a2a:	f00c fbab 	bl	800e184 <eth_socket_init>
					 }

				 }
			 break;
 8001a2e:	e2c3      	b.n	8001fb8 <SysTick_Handler+0x934>
			 case  SOCK_INIT :
				 {
					 if(ETH.S0_ENserver == 1)
 8001a30:	4b76      	ldr	r3, [pc, #472]	; (8001c0c <SysTick_Handler+0x588>)
 8001a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d110      	bne.n	8001a60 <SysTick_Handler+0x3dc>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 8001a3e:	4b71      	ldr	r3, [pc, #452]	; (8001c04 <SysTick_Handler+0x580>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <SysTick_Handler+0x3ca>
 8001a46:	2111      	movs	r1, #17
 8001a48:	4871      	ldr	r0, [pc, #452]	; (8001c10 <SysTick_Handler+0x58c>)
 8001a4a:	f7ff fdff 	bl	800164c <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, 0, LISTEN );
 8001a4e:	2202      	movs	r2, #2
 8001a50:	2100      	movs	r1, #0
 8001a52:	486e      	ldr	r0, [pc, #440]	; (8001c0c <SysTick_Handler+0x588>)
 8001a54:	f00c fae0 	bl	800e018 <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 8001a58:	4b6c      	ldr	r3, [pc, #432]	; (8001c0c <SysTick_Handler+0x588>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	819a      	strh	r2, [r3, #12]
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 8001a5e:	e2ae      	b.n	8001fbe <SysTick_Handler+0x93a>
						 	eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
 8001a60:	2204      	movs	r2, #4
 8001a62:	2100      	movs	r1, #0
 8001a64:	4869      	ldr	r0, [pc, #420]	; (8001c0c <SysTick_Handler+0x588>)
 8001a66:	f00c fad7 	bl	800e018 <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
 8001a6a:	4b66      	ldr	r3, [pc, #408]	; (8001c04 <SysTick_Handler+0x580>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <SysTick_Handler+0x3f6>
 8001a72:	2115      	movs	r1, #21
 8001a74:	4867      	ldr	r0, [pc, #412]	; (8001c14 <SysTick_Handler+0x590>)
 8001a76:	f7ff fde9 	bl	800164c <ITM0_Write>
						 	ETH.ETH_WDG=0;
 8001a7a:	4b64      	ldr	r3, [pc, #400]	; (8001c0c <SysTick_Handler+0x588>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	819a      	strh	r2, [r3, #12]
			 break;
 8001a80:	e29d      	b.n	8001fbe <SysTick_Handler+0x93a>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 8001a82:	4b60      	ldr	r3, [pc, #384]	; (8001c04 <SysTick_Handler+0x580>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <SysTick_Handler+0x40e>
 8001a8a:	2113      	movs	r1, #19
 8001a8c:	4862      	ldr	r0, [pc, #392]	; (8001c18 <SysTick_Handler+0x594>)
 8001a8e:	f7ff fddd 	bl	800164c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001a92:	4b5e      	ldr	r3, [pc, #376]	; (8001c0c <SysTick_Handler+0x588>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001a98:	e291      	b.n	8001fbe <SysTick_Handler+0x93a>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 8001a9a:	4b5a      	ldr	r3, [pc, #360]	; (8001c04 <SysTick_Handler+0x580>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <SysTick_Handler+0x426>
 8001aa2:	2114      	movs	r1, #20
 8001aa4:	485d      	ldr	r0, [pc, #372]	; (8001c1c <SysTick_Handler+0x598>)
 8001aa6:	f7ff fdd1 	bl	800164c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001aaa:	4b58      	ldr	r3, [pc, #352]	; (8001c0c <SysTick_Handler+0x588>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ab0:	e285      	b.n	8001fbe <SysTick_Handler+0x93a>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 8001ab2:	4b54      	ldr	r3, [pc, #336]	; (8001c04 <SysTick_Handler+0x580>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <SysTick_Handler+0x43e>
 8001aba:	2114      	movs	r1, #20
 8001abc:	4858      	ldr	r0, [pc, #352]	; (8001c20 <SysTick_Handler+0x59c>)
 8001abe:	f7ff fdc5 	bl	800164c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001ac2:	4b52      	ldr	r3, [pc, #328]	; (8001c0c <SysTick_Handler+0x588>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ac8:	e279      	b.n	8001fbe <SysTick_Handler+0x93a>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 8001aca:	4b4e      	ldr	r3, [pc, #312]	; (8001c04 <SysTick_Handler+0x580>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <SysTick_Handler+0x456>
 8001ad2:	2118      	movs	r1, #24
 8001ad4:	4853      	ldr	r0, [pc, #332]	; (8001c24 <SysTick_Handler+0x5a0>)
 8001ad6:	f7ff fdb9 	bl	800164c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001ada:	4b4c      	ldr	r3, [pc, #304]	; (8001c0c <SysTick_Handler+0x588>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	819a      	strh	r2, [r3, #12]

					if (ETH.S0_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 8001ae0:	4b4a      	ldr	r3, [pc, #296]	; (8001c0c <SysTick_Handler+0x588>)
 8001ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	f040 80b0 	bne.w	8001c50 <SysTick_Handler+0x5cc>
					{

							S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001af0:	2302      	movs	r3, #2
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	4b4c      	ldr	r3, [pc, #304]	; (8001c28 <SysTick_Handler+0x5a4>)
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	230f      	movs	r3, #15
 8001afa:	2226      	movs	r2, #38	; 0x26
 8001afc:	2104      	movs	r1, #4
 8001afe:	4843      	ldr	r0, [pc, #268]	; (8001c0c <SysTick_Handler+0x588>)
 8001b00:	f00c f95f 	bl	800ddc2 <SPI_ETH_REG>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b48      	ldr	r3, [pc, #288]	; (8001c2c <SysTick_Handler+0x5a8>)
 8001b0a:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001b0c:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <SysTick_Handler+0x5a8>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 8253 	beq.w	8001fbc <SysTick_Handler+0x938>
							{
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001b16:	4b45      	ldr	r3, [pc, #276]	; (8001c2c <SysTick_Handler+0x5a8>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	4a45      	ldr	r2, [pc, #276]	; (8001c30 <SysTick_Handler+0x5ac>)
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	483b      	ldr	r0, [pc, #236]	; (8001c0c <SysTick_Handler+0x588>)
 8001b20:	f00c fbe6 	bl	800e2f0 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001b24:	4b42      	ldr	r3, [pc, #264]	; (8001c30 <SysTick_Handler+0x5ac>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001b2e:	4837      	ldr	r0, [pc, #220]	; (8001c0c <SysTick_Handler+0x588>)
 8001b30:	f00c f9bf 	bl	800deb2 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001b34:	2240      	movs	r2, #64	; 0x40
 8001b36:	2100      	movs	r1, #0
 8001b38:	4834      	ldr	r0, [pc, #208]	; (8001c0c <SysTick_Handler+0x588>)
 8001b3a:	f00c fa6d 	bl	800e018 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001b3e:	bf00      	nop
 8001b40:	2100      	movs	r1, #0
 8001b42:	4832      	ldr	r0, [pc, #200]	; (8001c0c <SysTick_Handler+0x588>)
 8001b44:	f00c fbb7 	bl	800e2b6 <eth_rd_SOCKET_CMD>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f8      	bne.n	8001b40 <SysTick_Handler+0x4bc>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001b4e:	4b37      	ldr	r3, [pc, #220]	; (8001c2c <SysTick_Handler+0x5a8>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	2300      	movs	r3, #0
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	4936      	ldr	r1, [pc, #216]	; (8001c34 <SysTick_Handler+0x5b0>)
 8001b5c:	4836      	ldr	r0, [pc, #216]	; (8001c38 <SysTick_Handler+0x5b4>)
 8001b5e:	f00d f8e1 	bl	800ed24 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001b62:	4b32      	ldr	r3, [pc, #200]	; (8001c2c <SysTick_Handler+0x5a8>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <SysTick_Handler+0x5b8>)
 8001b6a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}					//Flag data received
 8001b6e:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <SysTick_Handler+0x5a8>)
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <SysTick_Handler+0x4f8>
 8001b76:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <SysTick_Handler+0x588>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	749a      	strb	r2, [r3, #18]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001b7c:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <SysTick_Handler+0x5b8>)
 8001b7e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001b82:	4619      	mov	r1, r3
 8001b84:	482c      	ldr	r0, [pc, #176]	; (8001c38 <SysTick_Handler+0x5b4>)
 8001b86:	f00a fe09 	bl	800c79c <ModBUS_Check>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00d      	beq.n	8001bac <SysTick_Handler+0x528>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001b90:	482a      	ldr	r0, [pc, #168]	; (8001c3c <SysTick_Handler+0x5b8>)
 8001b92:	f00a ff05 	bl	800c9a0 <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 8001b96:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <SysTick_Handler+0x5b8>)
 8001b98:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	4927      	ldr	r1, [pc, #156]	; (8001c40 <SysTick_Handler+0x5bc>)
 8001ba4:	4823      	ldr	r0, [pc, #140]	; (8001c34 <SysTick_Handler+0x5b0>)
 8001ba6:	f00d f8bd 	bl	800ed24 <CopiaVector>
 8001baa:	e007      	b.n	8001bbc <SysTick_Handler+0x538>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <SysTick_Handler+0x580>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <SysTick_Handler+0x538>
 8001bb4:	2111      	movs	r1, #17
 8001bb6:	4823      	ldr	r0, [pc, #140]	; (8001c44 <SysTick_Handler+0x5c0>)
 8001bb8:	f7ff fd48 	bl	800164c <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001bbc:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <SysTick_Handler+0x5b8>)
 8001bbe:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <SysTick_Handler+0x5c4>)
 8001bc6:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <SysTick_Handler+0x5c4>)
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	4a1f      	ldr	r2, [pc, #124]	; (8001c4c <SysTick_Handler+0x5c8>)
 8001bce:	2100      	movs	r1, #0
 8001bd0:	480e      	ldr	r0, [pc, #56]	; (8001c0c <SysTick_Handler+0x588>)
 8001bd2:	f00c fc5d 	bl	800e490 <eth_wr_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <SysTick_Handler+0x5c8>)
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	f240 4124 	movw	r1, #1060	; 0x424
 8001be0:	480a      	ldr	r0, [pc, #40]	; (8001c0c <SysTick_Handler+0x588>)
 8001be2:	f00c f966 	bl	800deb2 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001be6:	2220      	movs	r2, #32
 8001be8:	2100      	movs	r1, #0
 8001bea:	4808      	ldr	r0, [pc, #32]	; (8001c0c <SysTick_Handler+0x588>)
 8001bec:	f00c fa14 	bl	800e018 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001bf0:	bf00      	nop
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4805      	ldr	r0, [pc, #20]	; (8001c0c <SysTick_Handler+0x588>)
 8001bf6:	f00c fb5e 	bl	800e2b6 <eth_rd_SOCKET_CMD>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f8      	bne.n	8001bf2 <SysTick_Handler+0x56e>

							}
						}
					}
				 }
			 break;
 8001c00:	e1dc      	b.n	8001fbc <SysTick_Handler+0x938>
 8001c02:	bf00      	nop
 8001c04:	2000273c 	.word	0x2000273c
 8001c08:	08010434 	.word	0x08010434
 8001c0c:	20002744 	.word	0x20002744
 8001c10:	08010448 	.word	0x08010448
 8001c14:	0801045c 	.word	0x0801045c
 8001c18:	08010474 	.word	0x08010474
 8001c1c:	08010488 	.word	0x08010488
 8001c20:	080104a0 	.word	0x080104a0
 8001c24:	080104b8 	.word	0x080104b8
 8001c28:	200037b4 	.word	0x200037b4
 8001c2c:	200037ac 	.word	0x200037ac
 8001c30:	200037b0 	.word	0x200037b0
 8001c34:	20002760 	.word	0x20002760
 8001c38:	200018b1 	.word	0x200018b1
 8001c3c:	200018a4 	.word	0x200018a4
 8001c40:	20001a38 	.word	0x20001a38
 8001c44:	080104d4 	.word	0x080104d4
 8001c48:	200037b2 	.word	0x200037b2
 8001c4c:	200037ae 	.word	0x200037ae
						if (mb_eth._w_answer==0)
 8001c50:	4bac      	ldr	r3, [pc, #688]	; (8001f04 <SysTick_Handler+0x880>)
 8001c52:	791b      	ldrb	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d167      	bne.n	8001d28 <SysTick_Handler+0x6a4>
							ETH.data[0]=0x00;
 8001c58:	4bab      	ldr	r3, [pc, #684]	; (8001f08 <SysTick_Handler+0x884>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	771a      	strb	r2, [r3, #28]
							ETH.data[1]=0x00;
 8001c5e:	4baa      	ldr	r3, [pc, #680]	; (8001f08 <SysTick_Handler+0x884>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	775a      	strb	r2, [r3, #29]
							ETH.data[2]=0x00;
 8001c64:	4ba8      	ldr	r3, [pc, #672]	; (8001f08 <SysTick_Handler+0x884>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	779a      	strb	r2, [r3, #30]
							ETH.data[3]=0x00;
 8001c6a:	4ba7      	ldr	r3, [pc, #668]	; (8001f08 <SysTick_Handler+0x884>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	77da      	strb	r2, [r3, #31]
							ETH.data[4]=0x00;
 8001c70:	4ba5      	ldr	r3, [pc, #660]	; (8001f08 <SysTick_Handler+0x884>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2020 	strb.w	r2, [r3, #32]
							ETH.data[5]=0x06;
 8001c78:	4ba3      	ldr	r3, [pc, #652]	; (8001f08 <SysTick_Handler+0x884>)
 8001c7a:	2206      	movs	r2, #6
 8001c7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
							ETH.data[6]=0x01;
 8001c80:	4ba1      	ldr	r3, [pc, #644]	; (8001f08 <SysTick_Handler+0x884>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
							ETH.data[7]=0x03;
 8001c88:	4b9f      	ldr	r3, [pc, #636]	; (8001f08 <SysTick_Handler+0x884>)
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							ETH.data[8]=0x00;
 8001c90:	4b9d      	ldr	r3, [pc, #628]	; (8001f08 <SysTick_Handler+0x884>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[9]=0x00;
 8001c98:	4b9b      	ldr	r3, [pc, #620]	; (8001f08 <SysTick_Handler+0x884>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[10]=0x00;
 8001ca0:	4b99      	ldr	r3, [pc, #612]	; (8001f08 <SysTick_Handler+0x884>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[11]=0x0A;
 8001ca8:	4b97      	ldr	r3, [pc, #604]	; (8001f08 <SysTick_Handler+0x884>)
 8001caa:	220a      	movs	r2, #10
 8001cac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							send_size=12;
 8001cb0:	4b96      	ldr	r3, [pc, #600]	; (8001f0c <SysTick_Handler+0x888>)
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 8001cb6:	220f      	movs	r2, #15
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4892      	ldr	r0, [pc, #584]	; (8001f04 <SysTick_Handler+0x880>)
 8001cbc:	f00a fe19 	bl	800c8f2 <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	4991      	ldr	r1, [pc, #580]	; (8001f10 <SysTick_Handler+0x88c>)
 8001cca:	4892      	ldr	r0, [pc, #584]	; (8001f14 <SysTick_Handler+0x890>)
 8001ccc:	f00d f82a 	bl	800ed24 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001cd0:	4b8e      	ldr	r3, [pc, #568]	; (8001f0c <SysTick_Handler+0x888>)
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	4a90      	ldr	r2, [pc, #576]	; (8001f18 <SysTick_Handler+0x894>)
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	488b      	ldr	r0, [pc, #556]	; (8001f08 <SysTick_Handler+0x884>)
 8001cda:	f00c fbd9 	bl	800e490 <eth_wr_SOCKET_DATA>
							SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001cde:	4b8e      	ldr	r3, [pc, #568]	; (8001f18 <SysTick_Handler+0x894>)
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	f240 4124 	movw	r1, #1060	; 0x424
 8001ce8:	4887      	ldr	r0, [pc, #540]	; (8001f08 <SysTick_Handler+0x884>)
 8001cea:	f00c f8e2 	bl	800deb2 <SPI_ETH_WR_REG_16>
							eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001cee:	2220      	movs	r2, #32
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4885      	ldr	r0, [pc, #532]	; (8001f08 <SysTick_Handler+0x884>)
 8001cf4:	f00c f990 	bl	800e018 <eth_wr_SOCKET_CMD>
							while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001cf8:	bf00      	nop
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4882      	ldr	r0, [pc, #520]	; (8001f08 <SysTick_Handler+0x884>)
 8001cfe:	f00c fada 	bl	800e2b6 <eth_rd_SOCKET_CMD>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f8      	bne.n	8001cfa <SysTick_Handler+0x676>
							mb_eth._w_answer=1;	// Waiting answer flag
 8001d08:	4b7e      	ldr	r3, [pc, #504]	; (8001f04 <SysTick_Handler+0x880>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	711a      	strb	r2, [r3, #4]
							MB_TOUT_ticks=0;	// restart counting
 8001d0e:	4b83      	ldr	r3, [pc, #524]	; (8001f1c <SysTick_Handler+0x898>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001d14:	4b82      	ldr	r3, [pc, #520]	; (8001f20 <SysTick_Handler+0x89c>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 814f 	beq.w	8001fbc <SysTick_Handler+0x938>
 8001d1e:	2117      	movs	r1, #23
 8001d20:	4880      	ldr	r0, [pc, #512]	; (8001f24 <SysTick_Handler+0x8a0>)
 8001d22:	f7ff fc93 	bl	800164c <ITM0_Write>
			 break;
 8001d26:	e149      	b.n	8001fbc <SysTick_Handler+0x938>
						S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001d28:	2302      	movs	r3, #2
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	4b7e      	ldr	r3, [pc, #504]	; (8001f28 <SysTick_Handler+0x8a4>)
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	230f      	movs	r3, #15
 8001d32:	2226      	movs	r2, #38	; 0x26
 8001d34:	2104      	movs	r1, #4
 8001d36:	4874      	ldr	r0, [pc, #464]	; (8001f08 <SysTick_Handler+0x884>)
 8001d38:	f00c f843 	bl	800ddc2 <SPI_ETH_REG>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b7a      	ldr	r3, [pc, #488]	; (8001f2c <SysTick_Handler+0x8a8>)
 8001d42:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001d44:	4b79      	ldr	r3, [pc, #484]	; (8001f2c <SysTick_Handler+0x8a8>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 8137 	beq.w	8001fbc <SysTick_Handler+0x938>
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001d4e:	4b77      	ldr	r3, [pc, #476]	; (8001f2c <SysTick_Handler+0x8a8>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	4a77      	ldr	r2, [pc, #476]	; (8001f30 <SysTick_Handler+0x8ac>)
 8001d54:	2100      	movs	r1, #0
 8001d56:	486c      	ldr	r0, [pc, #432]	; (8001f08 <SysTick_Handler+0x884>)
 8001d58:	f00c faca 	bl	800e2f0 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001d5c:	4b74      	ldr	r3, [pc, #464]	; (8001f30 <SysTick_Handler+0x8ac>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001d66:	4868      	ldr	r0, [pc, #416]	; (8001f08 <SysTick_Handler+0x884>)
 8001d68:	f00c f8a3 	bl	800deb2 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001d6c:	2240      	movs	r2, #64	; 0x40
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4865      	ldr	r0, [pc, #404]	; (8001f08 <SysTick_Handler+0x884>)
 8001d72:	f00c f951 	bl	800e018 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001d76:	bf00      	nop
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4863      	ldr	r0, [pc, #396]	; (8001f08 <SysTick_Handler+0x884>)
 8001d7c:	f00c fa9b 	bl	800e2b6 <eth_rd_SOCKET_CMD>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f8      	bne.n	8001d78 <SysTick_Handler+0x6f4>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001d86:	4b69      	ldr	r3, [pc, #420]	; (8001f2c <SysTick_Handler+0x8a8>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	2300      	movs	r3, #0
 8001d92:	4960      	ldr	r1, [pc, #384]	; (8001f14 <SysTick_Handler+0x890>)
 8001d94:	4867      	ldr	r0, [pc, #412]	; (8001f34 <SysTick_Handler+0x8b0>)
 8001d96:	f00c ffc5 	bl	800ed24 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001d9a:	4b64      	ldr	r3, [pc, #400]	; (8001f2c <SysTick_Handler+0x8a8>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4b58      	ldr	r3, [pc, #352]	; (8001f04 <SysTick_Handler+0x880>)
 8001da2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}
 8001da6:	4b61      	ldr	r3, [pc, #388]	; (8001f2c <SysTick_Handler+0x8a8>)
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <SysTick_Handler+0x730>
 8001dae:	4b56      	ldr	r3, [pc, #344]	; (8001f08 <SysTick_Handler+0x884>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	749a      	strb	r2, [r3, #18]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001db4:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <SysTick_Handler+0x880>)
 8001db6:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001dba:	4619      	mov	r1, r3
 8001dbc:	485d      	ldr	r0, [pc, #372]	; (8001f34 <SysTick_Handler+0x8b0>)
 8001dbe:	f00a fced 	bl	800c79c <ModBUS_Check>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d024      	beq.n	8001e12 <SysTick_Handler+0x78e>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001dc8:	4b4e      	ldr	r3, [pc, #312]	; (8001f04 <SysTick_Handler+0x880>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	711a      	strb	r2, [r3, #4]
										MB_TOUT_ticks=0;
 8001dce:	4b53      	ldr	r3, [pc, #332]	; (8001f1c <SysTick_Handler+0x898>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001dd4:	484b      	ldr	r0, [pc, #300]	; (8001f04 <SysTick_Handler+0x880>)
 8001dd6:	f00a fde3 	bl	800c9a0 <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001dda:	4b4a      	ldr	r3, [pc, #296]	; (8001f04 <SysTick_Handler+0x880>)
 8001ddc:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8001de0:	2300      	movs	r3, #0
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	2300      	movs	r3, #0
 8001de6:	4953      	ldr	r1, [pc, #332]	; (8001f34 <SysTick_Handler+0x8b0>)
 8001de8:	4853      	ldr	r0, [pc, #332]	; (8001f38 <SysTick_Handler+0x8b4>)
 8001dea:	f00c ff9b 	bl	800ed24 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001dee:	2300      	movs	r3, #0
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2300      	movs	r3, #0
 8001df4:	2240      	movs	r2, #64	; 0x40
 8001df6:	4951      	ldr	r1, [pc, #324]	; (8001f3c <SysTick_Handler+0x8b8>)
 8001df8:	4851      	ldr	r0, [pc, #324]	; (8001f40 <SysTick_Handler+0x8bc>)
 8001dfa:	f00c ff93 	bl	800ed24 <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));
 8001dfe:	4b48      	ldr	r3, [pc, #288]	; (8001f20 <SysTick_Handler+0x89c>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80da 	beq.w	8001fbc <SysTick_Handler+0x938>
 8001e08:	2117      	movs	r1, #23
 8001e0a:	484e      	ldr	r0, [pc, #312]	; (8001f44 <SysTick_Handler+0x8c0>)
 8001e0c:	f7ff fc1e 	bl	800164c <ITM0_Write>
			 break;
 8001e10:	e0d4      	b.n	8001fbc <SysTick_Handler+0x938>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001e12:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <SysTick_Handler+0x89c>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 80d0 	beq.w	8001fbc <SysTick_Handler+0x938>
 8001e1c:	2111      	movs	r1, #17
 8001e1e:	484a      	ldr	r0, [pc, #296]	; (8001f48 <SysTick_Handler+0x8c4>)
 8001e20:	f7ff fc14 	bl	800164c <ITM0_Write>
			 break;
 8001e24:	e0ca      	b.n	8001fbc <SysTick_Handler+0x938>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001e26:	4b3e      	ldr	r3, [pc, #248]	; (8001f20 <SysTick_Handler+0x89c>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <SysTick_Handler+0x7b2>
 8001e2e:	2115      	movs	r1, #21
 8001e30:	4846      	ldr	r0, [pc, #280]	; (8001f4c <SysTick_Handler+0x8c8>)
 8001e32:	f7ff fc0b 	bl	800164c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e36:	4b34      	ldr	r3, [pc, #208]	; (8001f08 <SysTick_Handler+0x884>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e3c:	e0bf      	b.n	8001fbe <SysTick_Handler+0x93a>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <SysTick_Handler+0x89c>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <SysTick_Handler+0x7ca>
 8001e46:	2114      	movs	r1, #20
 8001e48:	4841      	ldr	r0, [pc, #260]	; (8001f50 <SysTick_Handler+0x8cc>)
 8001e4a:	f7ff fbff 	bl	800164c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e4e:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <SysTick_Handler+0x884>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e54:	e0b3      	b.n	8001fbe <SysTick_Handler+0x93a>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001e56:	4b32      	ldr	r3, [pc, #200]	; (8001f20 <SysTick_Handler+0x89c>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <SysTick_Handler+0x7e2>
 8001e5e:	2116      	movs	r1, #22
 8001e60:	483c      	ldr	r0, [pc, #240]	; (8001f54 <SysTick_Handler+0x8d0>)
 8001e62:	f7ff fbf3 	bl	800164c <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0, DISCON );
 8001e66:	2208      	movs	r2, #8
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4827      	ldr	r0, [pc, #156]	; (8001f08 <SysTick_Handler+0x884>)
 8001e6c:	f00c f8d4 	bl	800e018 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001e70:	bf00      	nop
 8001e72:	2301      	movs	r3, #1
 8001e74:	9301      	str	r3, [sp, #4]
 8001e76:	4b2c      	ldr	r3, [pc, #176]	; (8001f28 <SysTick_Handler+0x8a4>)
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	230f      	movs	r3, #15
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	2104      	movs	r1, #4
 8001e80:	4821      	ldr	r0, [pc, #132]	; (8001f08 <SysTick_Handler+0x884>)
 8001e82:	f00b ff9e 	bl	800ddc2 <SPI_ETH_REG>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f2      	bne.n	8001e72 <SysTick_Handler+0x7ee>
					{}
					ETH.ETH_WDG=0;
 8001e8c:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <SysTick_Handler+0x884>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e92:	e094      	b.n	8001fbe <SysTick_Handler+0x93a>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001e94:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <SysTick_Handler+0x89c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <SysTick_Handler+0x820>
 8001e9c:	2117      	movs	r1, #23
 8001e9e:	482e      	ldr	r0, [pc, #184]	; (8001f58 <SysTick_Handler+0x8d4>)
 8001ea0:	f7ff fbd4 	bl	800164c <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0,DISCON );
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4817      	ldr	r0, [pc, #92]	; (8001f08 <SysTick_Handler+0x884>)
 8001eaa:	f00c f8b5 	bl	800e018 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001eae:	bf00      	nop
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <SysTick_Handler+0x8a4>)
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	230f      	movs	r3, #15
 8001eba:	2201      	movs	r2, #1
 8001ebc:	2104      	movs	r1, #4
 8001ebe:	4812      	ldr	r0, [pc, #72]	; (8001f08 <SysTick_Handler+0x884>)
 8001ec0:	f00b ff7f 	bl	800ddc2 <SPI_ETH_REG>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f2      	bne.n	8001eb0 <SysTick_Handler+0x82c>
					{}
					ETH.ETH_WDG=0;
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <SysTick_Handler+0x884>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ed0:	e075      	b.n	8001fbe <SysTick_Handler+0x93a>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 8001ed2:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <SysTick_Handler+0x89c>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <SysTick_Handler+0x85e>
 8001eda:	2115      	movs	r1, #21
 8001edc:	481f      	ldr	r0, [pc, #124]	; (8001f5c <SysTick_Handler+0x8d8>)
 8001ede:	f7ff fbb5 	bl	800164c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <SysTick_Handler+0x884>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ee8:	e069      	b.n	8001fbe <SysTick_Handler+0x93a>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <SysTick_Handler+0x89c>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <SysTick_Handler+0x876>
 8001ef2:	2110      	movs	r1, #16
 8001ef4:	481a      	ldr	r0, [pc, #104]	; (8001f60 <SysTick_Handler+0x8dc>)
 8001ef6:	f7ff fba9 	bl	800164c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001efa:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <SysTick_Handler+0x884>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001f00:	e05d      	b.n	8001fbe <SysTick_Handler+0x93a>
 8001f02:	bf00      	nop
 8001f04:	200018a4 	.word	0x200018a4
 8001f08:	20002744 	.word	0x20002744
 8001f0c:	200037b2 	.word	0x200037b2
 8001f10:	20001a38 	.word	0x20001a38
 8001f14:	20002760 	.word	0x20002760
 8001f18:	200037ae 	.word	0x200037ae
 8001f1c:	20003e28 	.word	0x20003e28
 8001f20:	2000273c 	.word	0x2000273c
 8001f24:	080104e4 	.word	0x080104e4
 8001f28:	200037b4 	.word	0x200037b4
 8001f2c:	200037ac 	.word	0x200037ac
 8001f30:	200037b0 	.word	0x200037b0
 8001f34:	200018b1 	.word	0x200018b1
 8001f38:	20002f60 	.word	0x20002f60
 8001f3c:	20001bc4 	.word	0x20001bc4
 8001f40:	20002110 	.word	0x20002110
 8001f44:	080104f8 	.word	0x080104f8
 8001f48:	080104d4 	.word	0x080104d4
 8001f4c:	0801050c 	.word	0x0801050c
 8001f50:	08010524 	.word	0x08010524
 8001f54:	0801053c 	.word	0x0801053c
 8001f58:	08010554 	.word	0x08010554
 8001f5c:	0801056c 	.word	0x0801056c
 8001f60:	08010584 	.word	0x08010584
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));
 8001f64:	4b62      	ldr	r3, [pc, #392]	; (80020f0 <SysTick_Handler+0xa6c>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <SysTick_Handler+0x8f0>
 8001f6c:	2112      	movs	r1, #18
 8001f6e:	4861      	ldr	r0, [pc, #388]	; (80020f4 <SysTick_Handler+0xa70>)
 8001f70:	f7ff fb6c 	bl	800164c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001f74:	4b60      	ldr	r3, [pc, #384]	; (80020f8 <SysTick_Handler+0xa74>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001f7a:	e020      	b.n	8001fbe <SysTick_Handler+0x93a>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));
 8001f7c:	4b5c      	ldr	r3, [pc, #368]	; (80020f0 <SysTick_Handler+0xa6c>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <SysTick_Handler+0x908>
 8001f84:	2113      	movs	r1, #19
 8001f86:	485d      	ldr	r0, [pc, #372]	; (80020fc <SysTick_Handler+0xa78>)
 8001f88:	f7ff fb60 	bl	800164c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001f8c:	4b5a      	ldr	r3, [pc, #360]	; (80020f8 <SysTick_Handler+0xa74>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001f92:	e014      	b.n	8001fbe <SysTick_Handler+0x93a>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));
 8001f94:	4b56      	ldr	r3, [pc, #344]	; (80020f0 <SysTick_Handler+0xa6c>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <SysTick_Handler+0x920>
 8001f9c:	2111      	movs	r1, #17
 8001f9e:	4858      	ldr	r0, [pc, #352]	; (8002100 <SysTick_Handler+0xa7c>)
 8001fa0:	f7ff fb54 	bl	800164c <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001fa4:	4b54      	ldr	r3, [pc, #336]	; (80020f8 <SysTick_Handler+0xa74>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001faa:	e008      	b.n	8001fbe <SysTick_Handler+0x93a>
	  }
	  }else
	  	  {
		  //ETH.operacion=SPI_READ;
		  //ETH.TX[3]=0x00;
		  SPI_ETH(&ETH);
 8001fac:	4852      	ldr	r0, [pc, #328]	; (80020f8 <SysTick_Handler+0xa74>)
 8001fae:	f00b fee1 	bl	800dd74 <SPI_ETH>
 8001fb2:	e004      	b.n	8001fbe <SysTick_Handler+0x93a>
			 default:
 8001fb4:	bf00      	nop
 8001fb6:	e002      	b.n	8001fbe <SysTick_Handler+0x93a>
			 break;
 8001fb8:	bf00      	nop
 8001fba:	e000      	b.n	8001fbe <SysTick_Handler+0x93a>
			 break;
 8001fbc:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001fbe:	4b51      	ldr	r3, [pc, #324]	; (8002104 <SysTick_Handler+0xa80>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d102      	bne.n	8001fcc <SysTick_Handler+0x948>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001fc6:	4b4f      	ldr	r3, [pc, #316]	; (8002104 <SysTick_Handler+0xa80>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 8001fcc:	4b4e      	ldr	r3, [pc, #312]	; (8002108 <SysTick_Handler+0xa84>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d104      	bne.n	8001fde <SysTick_Handler+0x95a>
 8001fd4:	4b4d      	ldr	r3, [pc, #308]	; (800210c <SysTick_Handler+0xa88>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	4a4c      	ldr	r2, [pc, #304]	; (800210c <SysTick_Handler+0xa88>)
 8001fdc:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001fde:	4b4b      	ldr	r3, [pc, #300]	; (800210c <SysTick_Handler+0xa88>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	dd0f      	ble.n	8002006 <SysTick_Handler+0x982>
	{
		USART1_ticks=0;
 8001fe6:	4b49      	ldr	r3, [pc, #292]	; (800210c <SysTick_Handler+0xa88>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 8001fec:	4b48      	ldr	r3, [pc, #288]	; (8002110 <SysTick_Handler+0xa8c>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 8001ff2:	4b45      	ldr	r3, [pc, #276]	; (8002108 <SysTick_Handler+0xa84>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 8001ff8:	4b46      	ldr	r3, [pc, #280]	; (8002114 <SysTick_Handler+0xa90>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a46      	ldr	r2, [pc, #280]	; (8002118 <SysTick_Handler+0xa94>)
 8001ffe:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 8002000:	4b44      	ldr	r3, [pc, #272]	; (8002114 <SysTick_Handler+0xa90>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002006:	f000 fe4b 	bl	8002ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 800200a:	4b44      	ldr	r3, [pc, #272]	; (800211c <SysTick_Handler+0xa98>)
 800200c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002010:	2b04      	cmp	r3, #4
 8002012:	d105      	bne.n	8002020 <SysTick_Handler+0x99c>
	{
		ticks++;
 8002014:	4b42      	ldr	r3, [pc, #264]	; (8002120 <SysTick_Handler+0xa9c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	4a41      	ldr	r2, [pc, #260]	; (8002120 <SysTick_Handler+0xa9c>)
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e002      	b.n	8002026 <SysTick_Handler+0x9a2>
	}
	else
	{
		ticks=0;
 8002020:	4b3f      	ldr	r3, [pc, #252]	; (8002120 <SysTick_Handler+0xa9c>)
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
	}

if(wf._ejecucion==1)
 8002026:	4b3d      	ldr	r3, [pc, #244]	; (800211c <SysTick_Handler+0xa98>)
 8002028:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 800202c:	2b01      	cmp	r3, #1
 800202e:	d158      	bne.n	80020e2 <SysTick_Handler+0xa5e>
	{
		if (FLAG_TIMEOUT!=1)
 8002030:	4b3c      	ldr	r3, [pc, #240]	; (8002124 <SysTick_Handler+0xaa0>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d017      	beq.n	8002068 <SysTick_Handler+0x9e4>
		{
			if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 8002038:	4b38      	ldr	r3, [pc, #224]	; (800211c <SysTick_Handler+0xa98>)
 800203a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800203e:	2b02      	cmp	r3, #2
 8002040:	d006      	beq.n	8002050 <SysTick_Handler+0x9cc>
 8002042:	4b36      	ldr	r3, [pc, #216]	; (800211c <SysTick_Handler+0xa98>)
 8002044:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8002048:	3301      	adds	r3, #1
 800204a:	4a34      	ldr	r2, [pc, #208]	; (800211c <SysTick_Handler+0xa98>)
 800204c:	f8c2 3cb4 	str.w	r3, [r2, #3252]	; 0xcb4
			if(wf._instruccion==2) wf._ticks2++;
 8002050:	4b32      	ldr	r3, [pc, #200]	; (800211c <SysTick_Handler+0xa98>)
 8002052:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8002056:	2b02      	cmp	r3, #2
 8002058:	d106      	bne.n	8002068 <SysTick_Handler+0x9e4>
 800205a:	4b30      	ldr	r3, [pc, #192]	; (800211c <SysTick_Handler+0xa98>)
 800205c:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8002060:	3301      	adds	r3, #1
 8002062:	4a2e      	ldr	r2, [pc, #184]	; (800211c <SysTick_Handler+0xa98>)
 8002064:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
		}


		if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 8002068:	4b2c      	ldr	r3, [pc, #176]	; (800211c <SysTick_Handler+0xa98>)
 800206a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800206e:	2b02      	cmp	r3, #2
 8002070:	d018      	beq.n	80020a4 <SysTick_Handler+0xa20>
 8002072:	4b2a      	ldr	r3, [pc, #168]	; (800211c <SysTick_Handler+0xa98>)
 8002074:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8002078:	f241 527c 	movw	r2, #5500	; 0x157c
 800207c:	4293      	cmp	r3, r2
 800207e:	dd11      	ble.n	80020a4 <SysTick_Handler+0xa20>
		{
			FLAG_TIMEOUT=1;
 8002080:	4b28      	ldr	r3, [pc, #160]	; (8002124 <SysTick_Handler+0xaa0>)
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8002086:	4b28      	ldr	r3, [pc, #160]	; (8002128 <SysTick_Handler+0xaa4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f242 020c 	movw	r2, #8204	; 0x200c
 8002090:	4293      	cmp	r3, r2
 8002092:	d107      	bne.n	80020a4 <SysTick_Handler+0xa20>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8002094:	2201      	movs	r2, #1
 8002096:	4925      	ldr	r1, [pc, #148]	; (800212c <SysTick_Handler+0xaa8>)
 8002098:	4823      	ldr	r0, [pc, #140]	; (8002128 <SysTick_Handler+0xaa4>)
 800209a:	f003 fbac 	bl	80057f6 <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 800209e:	4b24      	ldr	r3, [pc, #144]	; (8002130 <SysTick_Handler+0xaac>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
			}
			//wf._ticks=0;
		}
		if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 80020a4:	4b1d      	ldr	r3, [pc, #116]	; (800211c <SysTick_Handler+0xa98>)
 80020a6:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d11d      	bne.n	80020ea <SysTick_Handler+0xa66>
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <SysTick_Handler+0xa98>)
 80020b0:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80020b4:	f245 0214 	movw	r2, #20500	; 0x5014
 80020b8:	4293      	cmp	r3, r2
 80020ba:	dd16      	ble.n	80020ea <SysTick_Handler+0xa66>
		{
			FLAG_TIMEOUT=1;
 80020bc:	4b19      	ldr	r3, [pc, #100]	; (8002124 <SysTick_Handler+0xaa0>)
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 80020c2:	4b19      	ldr	r3, [pc, #100]	; (8002128 <SysTick_Handler+0xaa4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f242 020c 	movw	r2, #8204	; 0x200c
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d10c      	bne.n	80020ea <SysTick_Handler+0xa66>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 80020d0:	2201      	movs	r2, #1
 80020d2:	4916      	ldr	r1, [pc, #88]	; (800212c <SysTick_Handler+0xaa8>)
 80020d4:	4814      	ldr	r0, [pc, #80]	; (8002128 <SysTick_Handler+0xaa4>)
 80020d6:	f003 fb8e 	bl	80057f6 <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <SysTick_Handler+0xaac>)
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]
	else
	{
		wf._ticks=0;
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 80020e0:	e003      	b.n	80020ea <SysTick_Handler+0xa66>
		wf._ticks=0;
 80020e2:	4b0e      	ldr	r3, [pc, #56]	; (800211c <SysTick_Handler+0xa98>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	2000273c 	.word	0x2000273c
 80020f4:	08010598 	.word	0x08010598
 80020f8:	20002744 	.word	0x20002744
 80020fc:	080105ac 	.word	0x080105ac
 8002100:	080105c0 	.word	0x080105c0
 8002104:	2000034c 	.word	0x2000034c
 8002108:	200037fa 	.word	0x200037fa
 800210c:	20003e38 	.word	0x20003e38
 8002110:	20003e3c 	.word	0x20003e3c
 8002114:	20003e34 	.word	0x20003e34
 8002118:	20003e40 	.word	0x20003e40
 800211c:	20000b58 	.word	0x20000b58
 8002120:	20003e2c 	.word	0x20003e2c
 8002124:	200037fb 	.word	0x200037fb
 8002128:	2000027c 	.word	0x2000027c
 800212c:	20003e0c 	.word	0x20003e0c
 8002130:	200037f8 	.word	0x200037f8

08002134 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a22      	ldr	r2, [pc, #136]	; (80021cc <HAL_UART_ErrorCallback+0x98>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d11c      	bne.n	8002180 <HAL_UART_ErrorCallback+0x4c>
	{
		 volatile int aore=0;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 800214e:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <HAL_UART_ErrorCallback+0x9c>)
 8002150:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8002154:	3301      	adds	r3, #1
 8002156:	4a1e      	ldr	r2, [pc, #120]	; (80021d0 <HAL_UART_ErrorCallback+0x9c>)
 8002158:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	613b      	str	r3, [r7, #16]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f003 fa3c 	bl	80055ea <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 8002172:	f7ff f95b 	bl	800142c <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8002176:	2201      	movs	r2, #1
 8002178:	4916      	ldr	r1, [pc, #88]	; (80021d4 <HAL_UART_ErrorCallback+0xa0>)
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f003 fb3b 	bl	80057f6 <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <HAL_UART_ErrorCallback+0xa4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d11c      	bne.n	80021c4 <HAL_UART_ErrorCallback+0x90>
	{
		 volatile int aore=0;
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 800218e:	2300      	movs	r3, #0
 8002190:	60bb      	str	r3, [r7, #8]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <HAL_UART_ErrorCallback+0x9c>)
 8002194:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8002198:	3301      	adds	r3, #1
 800219a:	4a0d      	ldr	r2, [pc, #52]	; (80021d0 <HAL_UART_ErrorCallback+0x9c>)
 800219c:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	60bb      	str	r3, [r7, #8]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f003 fa1a 	bl	80055ea <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 80021b6:	f7ff f963 	bl	8001480 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 80021ba:	2201      	movs	r2, #1
 80021bc:	4905      	ldr	r1, [pc, #20]	; (80021d4 <HAL_UART_ErrorCallback+0xa0>)
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f003 fb19 	bl	80057f6 <HAL_UART_Receive_IT>
	}
}
 80021c4:	bf00      	nop
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40011000 	.word	0x40011000
 80021d0:	20000b58 	.word	0x20000b58
 80021d4:	20003e0c 	.word	0x20003e0c
 80021d8:	40004400 	.word	0x40004400

080021dc <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a2c      	ldr	r2, [pc, #176]	; (800229c <HAL_UART_RxCpltCallback+0xc0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d123      	bne.n	8002236 <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 80021ee:	4b2c      	ldr	r3, [pc, #176]	; (80022a0 <HAL_UART_RxCpltCallback+0xc4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a2c      	ldr	r2, [pc, #176]	; (80022a4 <HAL_UART_RxCpltCallback+0xc8>)
 80021f4:	7811      	ldrb	r1, [r2, #0]
 80021f6:	4a2c      	ldr	r2, [pc, #176]	; (80022a8 <HAL_UART_RxCpltCallback+0xcc>)
 80021f8:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 80021fa:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <HAL_UART_RxCpltCallback+0xc4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	3301      	adds	r3, #1
 8002200:	4a27      	ldr	r2, [pc, #156]	; (80022a0 <HAL_UART_RxCpltCallback+0xc4>)
 8002202:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 8002204:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <HAL_UART_RxCpltCallback+0xc4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800220c:	db03      	blt.n	8002216 <HAL_UART_RxCpltCallback+0x3a>
 800220e:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <HAL_UART_RxCpltCallback+0xc4>)
 8002210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002214:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8002216:	2100      	movs	r1, #0
 8002218:	4824      	ldr	r0, [pc, #144]	; (80022ac <HAL_UART_RxCpltCallback+0xd0>)
 800221a:	f002 f9ed 	bl	80045f8 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 800221e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002222:	2201      	movs	r2, #1
 8002224:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 8002226:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <HAL_UART_RxCpltCallback+0xd4>)
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 800222c:	2201      	movs	r2, #1
 800222e:	491d      	ldr	r1, [pc, #116]	; (80022a4 <HAL_UART_RxCpltCallback+0xc8>)
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f003 fae0 	bl	80057f6 <HAL_UART_Receive_IT>
		 }
// LoRa USART2 TIMER3
	if(INTSERIE->Instance==USART2)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <HAL_UART_RxCpltCallback+0xd8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d128      	bne.n	8002292 <HAL_UART_RxCpltCallback+0xb6>
		 {
			UART2_RX_vect[UART2_RX_pos]=UART2_RX_byte[0];
 8002240:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <HAL_UART_RxCpltCallback+0xdc>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_UART_RxCpltCallback+0xe0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	b2d1      	uxtb	r1, r2
 800224a:	4a1d      	ldr	r2, [pc, #116]	; (80022c0 <HAL_UART_RxCpltCallback+0xe4>)
 800224c:	54d1      	strb	r1, [r2, r3]
			UART2_RX_pos++;
 800224e:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <HAL_UART_RxCpltCallback+0xe0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	3301      	adds	r3, #1
 8002254:	4a19      	ldr	r2, [pc, #100]	; (80022bc <HAL_UART_RxCpltCallback+0xe0>)
 8002256:	6013      	str	r3, [r2, #0]
			if(UART2_RX_pos>=512) UART2_RX_pos=512;
 8002258:	4b18      	ldr	r3, [pc, #96]	; (80022bc <HAL_UART_RxCpltCallback+0xe0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002260:	db03      	blt.n	800226a <HAL_UART_RxCpltCallback+0x8e>
 8002262:	4b16      	ldr	r3, [pc, #88]	; (80022bc <HAL_UART_RxCpltCallback+0xe0>)
 8002264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002268:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 800226a:	2201      	movs	r2, #1
 800226c:	2102      	movs	r1, #2
 800226e:	4815      	ldr	r0, [pc, #84]	; (80022c4 <HAL_UART_RxCpltCallback+0xe8>)
 8002270:	f001 f998 	bl	80035a4 <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8002274:	2100      	movs	r1, #0
 8002276:	4814      	ldr	r0, [pc, #80]	; (80022c8 <HAL_UART_RxCpltCallback+0xec>)
 8002278:	f002 f9be 	bl	80045f8 <HAL_TIM_OC_Start_IT>
			TIM3->CNT=1;
 800227c:	4b13      	ldr	r3, [pc, #76]	; (80022cc <HAL_UART_RxCpltCallback+0xf0>)
 800227e:	2201      	movs	r2, #1
 8002280:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART2_TMR=1;	//Habilito Timeout de software
 8002282:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <HAL_UART_RxCpltCallback+0xf4>)
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART2_RX_byte,1);
 8002288:	2201      	movs	r2, #1
 800228a:	490b      	ldr	r1, [pc, #44]	; (80022b8 <HAL_UART_RxCpltCallback+0xdc>)
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f003 fab2 	bl	80057f6 <HAL_UART_Receive_IT>
		 }
 }
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40011000 	.word	0x40011000
 80022a0:	20003e44 	.word	0x20003e44
 80022a4:	20003e0c 	.word	0x20003e0c
 80022a8:	20003808 	.word	0x20003808
 80022ac:	200001ec 	.word	0x200001ec
 80022b0:	200037f8 	.word	0x200037f8
 80022b4:	40004400 	.word	0x40004400
 80022b8:	20003e10 	.word	0x20003e10
 80022bc:	20003e48 	.word	0x20003e48
 80022c0:	20003a08 	.word	0x20003a08
 80022c4:	40020000 	.word	0x40020000
 80022c8:	20000234 	.word	0x20000234
 80022cc:	40000400 	.word	0x40000400
 80022d0:	200037f9 	.word	0x200037f9

080022d4 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af02      	add	r7, sp, #8
 80022da:	6078      	str	r0, [r7, #4]
// WiFi	USART 1 TIMER2
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM2)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e4:	d12d      	bne.n	8002342 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 80022e6:	2100      	movs	r1, #0
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f002 fa83 	bl	80047f4 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 80022ee:	4b39      	ldr	r3, [pc, #228]	; (80023d4 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 80022f4:	4b38      	ldr	r3, [pc, #224]	; (80023d8 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 80022fa:	4b38      	ldr	r3, [pc, #224]	; (80023dc <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a38      	ldr	r2, [pc, #224]	; (80023e0 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002300:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 8002302:	4b36      	ldr	r3, [pc, #216]	; (80023dc <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8002308:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 8002310:	4b33      	ldr	r3, [pc, #204]	; (80023e0 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b34      	ldr	r3, [pc, #208]	; (80023e8 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	2301      	movs	r3, #1
 800231a:	4932      	ldr	r1, [pc, #200]	; (80023e4 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 800231c:	4833      	ldr	r0, [pc, #204]	; (80023ec <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 800231e:	f00c fd01 	bl	800ed24 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8002322:	2201      	movs	r2, #1
 8002324:	4932      	ldr	r1, [pc, #200]	; (80023f0 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8002326:	4833      	ldr	r0, [pc, #204]	; (80023f4 <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 8002328:	f003 fa65 	bl	80057f6 <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 800232c:	4b32      	ldr	r3, [pc, #200]	; (80023f8 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 800232e:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8002332:	2b01      	cmp	r3, #1
 8002334:	d105      	bne.n	8002342 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 8002336:	4b2a      	ldr	r3, [pc, #168]	; (80023e0 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4619      	mov	r1, r3
 800233c:	482b      	ldr	r0, [pc, #172]	; (80023ec <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 800233e:	f7ff f985 	bl	800164c <ITM0_Write>
				 }
		}
		// LoRa USART2 TIMER3
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM3)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a2d      	ldr	r2, [pc, #180]	; (80023fc <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d13f      	bne.n	80023cc <HAL_TIM_OC_DelayElapsedCallback+0xf8>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 800234c:	2100      	movs	r1, #0
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f002 fa50 	bl	80047f4 <HAL_TIM_OC_Stop_IT>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8002354:	2200      	movs	r2, #0
 8002356:	2102      	movs	r1, #2
 8002358:	4829      	ldr	r0, [pc, #164]	; (8002400 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 800235a:	f001 f923 	bl	80035a4 <HAL_GPIO_WritePin>
				 FLAG_UART2=1;
 800235e:	4b29      	ldr	r3, [pc, #164]	; (8002404 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8002360:	2201      	movs	r2, #1
 8002362:	701a      	strb	r2, [r3, #0]
				 EN_UART2_TMR=0;
 8002364:	4b28      	ldr	r3, [pc, #160]	; (8002408 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
				 UART2_RX_items=UART2_RX_pos;
 800236a:	4b28      	ldr	r3, [pc, #160]	; (800240c <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a28      	ldr	r2, [pc, #160]	; (8002410 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8002370:	6013      	str	r3, [r2, #0]
				 UART2_RX_pos=0;
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
				 //UART2_RX_vect[UART2_RX_items]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
				 UART2_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8002378:	4b26      	ldr	r3, [pc, #152]	; (8002414 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(lr.rxbuff,UART2_RX_vect,UART2_RX_items,1,CMP_VECT);
 8002380:	4b23      	ldr	r3, [pc, #140]	; (8002410 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	2301      	movs	r3, #1
 800238a:	4922      	ldr	r1, [pc, #136]	; (8002414 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 800238c:	4822      	ldr	r0, [pc, #136]	; (8002418 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 800238e:	f00c fcc9 	bl	800ed24 <CopiaVector>
				 lr.rxitems=UART2_RX_items;
 8002392:	4b1f      	ldr	r3, [pc, #124]	; (8002410 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a21      	ldr	r2, [pc, #132]	; (800241c <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8002398:	f8c2 37dc 	str.w	r3, [r2, #2012]	; 0x7dc
				 HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 800239c:	2201      	movs	r2, #1
 800239e:	4920      	ldr	r1, [pc, #128]	; (8002420 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 80023a0:	4820      	ldr	r0, [pc, #128]	; (8002424 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 80023a2:	f003 fa28 	bl	80057f6 <HAL_UART_Receive_IT>
				// ITM0_Write("\r\nRecepcion LoRa \r\n",strlen("Recepcion LoRa \r\n"));
				 if (wf._DBG_EN==1)
 80023a6:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 80023a8:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d10d      	bne.n	80023cc <HAL_TIM_OC_DelayElapsedCallback+0xf8>
				 {
					 ITM0_Write("\r\nData LoRa recibida = ",strlen("\r\nData LoRa recibida = "));
 80023b0:	2117      	movs	r1, #23
 80023b2:	481d      	ldr	r0, [pc, #116]	; (8002428 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 80023b4:	f7ff f94a 	bl	800164c <ITM0_Write>
					 ITM0_Write((uint8_t *)UART2_RX_vect,UART2_RX_items);
 80023b8:	4b15      	ldr	r3, [pc, #84]	; (8002410 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4619      	mov	r1, r3
 80023be:	4815      	ldr	r0, [pc, #84]	; (8002414 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 80023c0:	f7ff f944 	bl	800164c <ITM0_Write>
					 ITM0_Write("\r\n",strlen("\r\n"));
 80023c4:	2102      	movs	r1, #2
 80023c6:	4819      	ldr	r0, [pc, #100]	; (800242c <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 80023c8:	f7ff f940 	bl	800164c <ITM0_Write>
				 }
		}
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	200037fc 	.word	0x200037fc
 80023d8:	200037f8 	.word	0x200037f8
 80023dc:	20003e44 	.word	0x20003e44
 80023e0:	20003e18 	.word	0x20003e18
 80023e4:	20003808 	.word	0x20003808
 80023e8:	20003e08 	.word	0x20003e08
 80023ec:	20003c08 	.word	0x20003c08
 80023f0:	20003e0c 	.word	0x20003e0c
 80023f4:	2000027c 	.word	0x2000027c
 80023f8:	20000b58 	.word	0x20000b58
 80023fc:	40000400 	.word	0x40000400
 8002400:	40020000 	.word	0x40020000
 8002404:	200037fd 	.word	0x200037fd
 8002408:	200037f9 	.word	0x200037f9
 800240c:	20003e48 	.word	0x20003e48
 8002410:	20003e1c 	.word	0x20003e1c
 8002414:	20003a08 	.word	0x20003a08
 8002418:	200003a6 	.word	0x200003a6
 800241c:	20000350 	.word	0x20000350
 8002420:	20003e10 	.word	0x20003e10
 8002424:	200002c0 	.word	0x200002c0
 8002428:	080105d4 	.word	0x080105d4
 800242c:	080105ec 	.word	0x080105ec

08002430 <ESP8266_HW_Reset>:

void ESP8266_HW_Reset(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
	  ESP_REinit=0;
 8002434:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <ESP8266_HW_Reset+0x40>)
 8002436:	2200      	movs	r2, #0
 8002438:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800243a:	2200      	movs	r2, #0
 800243c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002440:	480c      	ldr	r0, [pc, #48]	; (8002474 <ESP8266_HW_Reset+0x44>)
 8002442:	f001 f8af 	bl	80035a4 <HAL_GPIO_WritePin>
	  ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8002446:	2115      	movs	r1, #21
 8002448:	480b      	ldr	r0, [pc, #44]	; (8002478 <ESP8266_HW_Reset+0x48>)
 800244a:	f7ff f8ff 	bl	800164c <ITM0_Write>
	  HAL_Delay(2000);											//Tiempo de reset del módulo
 800244e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002452:	f000 fc45 	bl	8002ce0 <HAL_Delay>
	  ITM0_Write("\r\n ESP ResetT\r\n",strlen("\r\n ESP ResetT\r\n"));
 8002456:	210f      	movs	r1, #15
 8002458:	4808      	ldr	r0, [pc, #32]	; (800247c <ESP8266_HW_Reset+0x4c>)
 800245a:	f7ff f8f7 	bl	800164c <ITM0_Write>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//Habilito módulo
 800245e:	2201      	movs	r2, #1
 8002460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002464:	4803      	ldr	r0, [pc, #12]	; (8002474 <ESP8266_HW_Reset+0x44>)
 8002466:	f001 f89d 	bl	80035a4 <HAL_GPIO_WritePin>
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200037f5 	.word	0x200037f5
 8002474:	40020000 	.word	0x40020000
 8002478:	08010400 	.word	0x08010400
 800247c:	080105f0 	.word	0x080105f0

08002480 <ESP8266_HW_Init>:
uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af06      	add	r7, sp, #24
 8002486:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 8002488:	2364      	movs	r3, #100	; 0x64
 800248a:	220c      	movs	r2, #12
 800248c:	4943      	ldr	r1, [pc, #268]	; (800259c <ESP8266_HW_Init+0x11c>)
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f003 f8da 	bl	8005648 <HAL_UART_Transmit>
		  HAL_Delay(500);
 8002494:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002498:	f000 fc22 	bl	8002ce0 <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 800249c:	4b40      	ldr	r3, [pc, #256]	; (80025a0 <ESP8266_HW_Init+0x120>)
 800249e:	2205      	movs	r2, #5
 80024a0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		  wf._n_orig=UART_RX_items;
 80024a4:	4b3f      	ldr	r3, [pc, #252]	; (80025a4 <ESP8266_HW_Init+0x124>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a3d      	ldr	r2, [pc, #244]	; (80025a0 <ESP8266_HW_Init+0x120>)
 80024aa:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 80024ae:	e00e      	b.n	80024ce <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 80024b0:	4b3c      	ldr	r3, [pc, #240]	; (80025a4 <ESP8266_HW_Init+0x124>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a3a      	ldr	r2, [pc, #232]	; (80025a0 <ESP8266_HW_Init+0x120>)
 80024b6:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  	  if (ESP_ticks>=5000)
 80024ba:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <ESP8266_HW_Init+0x128>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f241 3287 	movw	r2, #4999	; 0x1387
 80024c2:	4293      	cmp	r3, r2
 80024c4:	dd03      	ble.n	80024ce <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 80024c6:	4b39      	ldr	r3, [pc, #228]	; (80025ac <ESP8266_HW_Init+0x12c>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
			  		 break;
 80024cc:	e012      	b.n	80024f4 <ESP8266_HW_Init+0x74>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 80024ce:	2300      	movs	r3, #0
 80024d0:	9304      	str	r3, [sp, #16]
 80024d2:	4b37      	ldr	r3, [pc, #220]	; (80025b0 <ESP8266_HW_Init+0x130>)
 80024d4:	9303      	str	r3, [sp, #12]
 80024d6:	4b37      	ldr	r3, [pc, #220]	; (80025b4 <ESP8266_HW_Init+0x134>)
 80024d8:	9302      	str	r3, [sp, #8]
 80024da:	4b37      	ldr	r3, [pc, #220]	; (80025b8 <ESP8266_HW_Init+0x138>)
 80024dc:	9301      	str	r3, [sp, #4]
 80024de:	4b37      	ldr	r3, [pc, #220]	; (80025bc <ESP8266_HW_Init+0x13c>)
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	4b37      	ldr	r3, [pc, #220]	; (80025c0 <ESP8266_HW_Init+0x140>)
 80024e4:	4a37      	ldr	r2, [pc, #220]	; (80025c4 <ESP8266_HW_Init+0x144>)
 80024e6:	4938      	ldr	r1, [pc, #224]	; (80025c8 <ESP8266_HW_Init+0x148>)
 80024e8:	4838      	ldr	r0, [pc, #224]	; (80025cc <ESP8266_HW_Init+0x14c>)
 80024ea:	f00c f8b5 	bl	800e658 <FT_String_ND>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d1dd      	bne.n	80024b0 <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 80024f4:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <ESP8266_HW_Init+0x12c>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d129      	bne.n	8002550 <ESP8266_HW_Init+0xd0>
		  {
			  wf._n_fcomp=strlen("ready");
 80024fc:	4b28      	ldr	r3, [pc, #160]	; (80025a0 <ESP8266_HW_Init+0x120>)
 80024fe:	2205      	movs	r2, #5
 8002500:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			  wf._n_orig=UART_RX_items;
 8002504:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <ESP8266_HW_Init+0x124>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a25      	ldr	r2, [pc, #148]	; (80025a0 <ESP8266_HW_Init+0x120>)
 800250a:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 800250e:	e00a      	b.n	8002526 <ESP8266_HW_Init+0xa6>
			  {
				  wf._n_orig=UART_RX_items;
 8002510:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <ESP8266_HW_Init+0x124>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a22      	ldr	r2, [pc, #136]	; (80025a0 <ESP8266_HW_Init+0x120>)
 8002516:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
				  if (ESP_ticks>=5000)
 800251a:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <ESP8266_HW_Init+0x128>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002522:	4293      	cmp	r3, r2
 8002524:	dc13      	bgt.n	800254e <ESP8266_HW_Init+0xce>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 8002526:	2300      	movs	r3, #0
 8002528:	9304      	str	r3, [sp, #16]
 800252a:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <ESP8266_HW_Init+0x130>)
 800252c:	9303      	str	r3, [sp, #12]
 800252e:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <ESP8266_HW_Init+0x134>)
 8002530:	9302      	str	r3, [sp, #8]
 8002532:	4b21      	ldr	r3, [pc, #132]	; (80025b8 <ESP8266_HW_Init+0x138>)
 8002534:	9301      	str	r3, [sp, #4]
 8002536:	4b21      	ldr	r3, [pc, #132]	; (80025bc <ESP8266_HW_Init+0x13c>)
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <ESP8266_HW_Init+0x140>)
 800253c:	4a21      	ldr	r2, [pc, #132]	; (80025c4 <ESP8266_HW_Init+0x144>)
 800253e:	4922      	ldr	r1, [pc, #136]	; (80025c8 <ESP8266_HW_Init+0x148>)
 8002540:	4822      	ldr	r0, [pc, #136]	; (80025cc <ESP8266_HW_Init+0x14c>)
 8002542:	f00c f889 	bl	800e658 <FT_String_ND>
 8002546:	4603      	mov	r3, r0
 8002548:	2b01      	cmp	r3, #1
 800254a:	d1e1      	bne.n	8002510 <ESP8266_HW_Init+0x90>
 800254c:	e000      	b.n	8002550 <ESP8266_HW_Init+0xd0>
					 {
					 break;
 800254e:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 8002550:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <ESP8266_HW_Init+0x128>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f241 3287 	movw	r2, #4999	; 0x1387
 8002558:	4293      	cmp	r3, r2
 800255a:	dc06      	bgt.n	800256a <ESP8266_HW_Init+0xea>
		  {
			  ESP_REinit=10;
 800255c:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <ESP8266_HW_Init+0x150>)
 800255e:	220a      	movs	r2, #10
 8002560:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 8002562:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <ESP8266_HW_Init+0x128>)
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e008      	b.n	800257c <ESP8266_HW_Init+0xfc>
		  }
		  else
		  {
			  ESP_REinit++;
 800256a:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <ESP8266_HW_Init+0x150>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	3301      	adds	r3, #1
 8002570:	b2da      	uxtb	r2, r3
 8002572:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <ESP8266_HW_Init+0x150>)
 8002574:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <ESP8266_HW_Init+0x128>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <ESP8266_HW_Init+0x150>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b05      	cmp	r3, #5
 8002582:	d981      	bls.n	8002488 <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <ESP8266_HW_Init+0x150>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b0a      	cmp	r3, #10
 800258a:	d101      	bne.n	8002590 <ESP8266_HW_Init+0x110>
	  {
		  return(1);
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <ESP8266_HW_Init+0x112>
	  }
	  else
	  {
		  return(0);
 8002590:	2300      	movs	r3, #0
	  }
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	08010600 	.word	0x08010600
 80025a0:	20000b58 	.word	0x20000b58
 80025a4:	20003e18 	.word	0x20003e18
 80025a8:	20003e20 	.word	0x20003e20
 80025ac:	200037f6 	.word	0x200037f6
 80025b0:	200015ec 	.word	0x200015ec
 80025b4:	20003e30 	.word	0x20003e30
 80025b8:	20001838 	.word	0x20001838
 80025bc:	200013ec 	.word	0x200013ec
 80025c0:	20001844 	.word	0x20001844
 80025c4:	08010610 	.word	0x08010610
 80025c8:	20001830 	.word	0x20001830
 80025cc:	20003c08 	.word	0x20003c08
 80025d0:	200037f5 	.word	0x200037f5

080025d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025d8:	b672      	cpsid	i
}
 80025da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025dc:	e7fe      	b.n	80025dc <Error_Handler+0x8>
	...

080025e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	607b      	str	r3, [r7, #4]
 80025ea:	4b10      	ldr	r3, [pc, #64]	; (800262c <HAL_MspInit+0x4c>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	4a0f      	ldr	r2, [pc, #60]	; (800262c <HAL_MspInit+0x4c>)
 80025f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f4:	6453      	str	r3, [r2, #68]	; 0x44
 80025f6:	4b0d      	ldr	r3, [pc, #52]	; (800262c <HAL_MspInit+0x4c>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fe:	607b      	str	r3, [r7, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	603b      	str	r3, [r7, #0]
 8002606:	4b09      	ldr	r3, [pc, #36]	; (800262c <HAL_MspInit+0x4c>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	4a08      	ldr	r2, [pc, #32]	; (800262c <HAL_MspInit+0x4c>)
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002610:	6413      	str	r3, [r2, #64]	; 0x40
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_MspInit+0x4c>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800

08002630 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	; 0x28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a19      	ldr	r2, [pc, #100]	; (80026b4 <HAL_SPI_MspInit+0x84>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d12b      	bne.n	80026aa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	4b18      	ldr	r3, [pc, #96]	; (80026b8 <HAL_SPI_MspInit+0x88>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	4a17      	ldr	r2, [pc, #92]	; (80026b8 <HAL_SPI_MspInit+0x88>)
 800265c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002660:	6453      	str	r3, [r2, #68]	; 0x44
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <HAL_SPI_MspInit+0x88>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <HAL_SPI_MspInit+0x88>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	4a10      	ldr	r2, [pc, #64]	; (80026b8 <HAL_SPI_MspInit+0x88>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6313      	str	r3, [r2, #48]	; 0x30
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <HAL_SPI_MspInit+0x88>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800268a:	23e0      	movs	r3, #224	; 0xe0
 800268c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002696:	2303      	movs	r3, #3
 8002698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800269a:	2305      	movs	r3, #5
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269e:	f107 0314 	add.w	r3, r7, #20
 80026a2:	4619      	mov	r1, r3
 80026a4:	4805      	ldr	r0, [pc, #20]	; (80026bc <HAL_SPI_MspInit+0x8c>)
 80026a6:	f000 fd15 	bl	80030d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026aa:	bf00      	nop
 80026ac:	3728      	adds	r7, #40	; 0x28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40013000 	.word	0x40013000
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40020000 	.word	0x40020000

080026c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d0:	d116      	bne.n	8002700 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <HAL_TIM_Base_MspInit+0x80>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	4a19      	ldr	r2, [pc, #100]	; (8002740 <HAL_TIM_Base_MspInit+0x80>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6413      	str	r3, [r2, #64]	; 0x40
 80026e2:	4b17      	ldr	r3, [pc, #92]	; (8002740 <HAL_TIM_Base_MspInit+0x80>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026ee:	2200      	movs	r2, #0
 80026f0:	2100      	movs	r1, #0
 80026f2:	201c      	movs	r0, #28
 80026f4:	f000 fc17 	bl	8002f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026f8:	201c      	movs	r0, #28
 80026fa:	f000 fc30 	bl	8002f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026fe:	e01a      	b.n	8002736 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0f      	ldr	r2, [pc, #60]	; (8002744 <HAL_TIM_Base_MspInit+0x84>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d115      	bne.n	8002736 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <HAL_TIM_Base_MspInit+0x80>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a0b      	ldr	r2, [pc, #44]	; (8002740 <HAL_TIM_Base_MspInit+0x80>)
 8002714:	f043 0302 	orr.w	r3, r3, #2
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b09      	ldr	r3, [pc, #36]	; (8002740 <HAL_TIM_Base_MspInit+0x80>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002726:	2200      	movs	r2, #0
 8002728:	2100      	movs	r1, #0
 800272a:	201d      	movs	r0, #29
 800272c:	f000 fbfb 	bl	8002f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002730:	201d      	movs	r0, #29
 8002732:	f000 fc14 	bl	8002f5e <HAL_NVIC_EnableIRQ>
}
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
 8002744:	40000400 	.word	0x40000400

08002748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08e      	sub	sp, #56	; 0x38
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a54      	ldr	r2, [pc, #336]	; (80028b8 <HAL_UART_MspInit+0x170>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d135      	bne.n	80027d6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	623b      	str	r3, [r7, #32]
 800276e:	4b53      	ldr	r3, [pc, #332]	; (80028bc <HAL_UART_MspInit+0x174>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	4a52      	ldr	r2, [pc, #328]	; (80028bc <HAL_UART_MspInit+0x174>)
 8002774:	f043 0310 	orr.w	r3, r3, #16
 8002778:	6453      	str	r3, [r2, #68]	; 0x44
 800277a:	4b50      	ldr	r3, [pc, #320]	; (80028bc <HAL_UART_MspInit+0x174>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	623b      	str	r3, [r7, #32]
 8002784:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	4b4c      	ldr	r3, [pc, #304]	; (80028bc <HAL_UART_MspInit+0x174>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a4b      	ldr	r2, [pc, #300]	; (80028bc <HAL_UART_MspInit+0x174>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b49      	ldr	r3, [pc, #292]	; (80028bc <HAL_UART_MspInit+0x174>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	61fb      	str	r3, [r7, #28]
 80027a0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_WF_Pin|USART1_RX_WF_Pin;
 80027a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a8:	2302      	movs	r3, #2
 80027aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b0:	2303      	movs	r3, #3
 80027b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027b4:	2307      	movs	r3, #7
 80027b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027bc:	4619      	mov	r1, r3
 80027be:	4840      	ldr	r0, [pc, #256]	; (80028c0 <HAL_UART_MspInit+0x178>)
 80027c0:	f000 fc88 	bl	80030d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027c4:	2200      	movs	r2, #0
 80027c6:	2100      	movs	r1, #0
 80027c8:	2025      	movs	r0, #37	; 0x25
 80027ca:	f000 fbac 	bl	8002f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027ce:	2025      	movs	r0, #37	; 0x25
 80027d0:	f000 fbc5 	bl	8002f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80027d4:	e06b      	b.n	80028ae <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a3a      	ldr	r2, [pc, #232]	; (80028c4 <HAL_UART_MspInit+0x17c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d134      	bne.n	800284a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027e0:	2300      	movs	r3, #0
 80027e2:	61bb      	str	r3, [r7, #24]
 80027e4:	4b35      	ldr	r3, [pc, #212]	; (80028bc <HAL_UART_MspInit+0x174>)
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	4a34      	ldr	r2, [pc, #208]	; (80028bc <HAL_UART_MspInit+0x174>)
 80027ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ee:	6413      	str	r3, [r2, #64]	; 0x40
 80027f0:	4b32      	ldr	r3, [pc, #200]	; (80028bc <HAL_UART_MspInit+0x174>)
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	4b2e      	ldr	r3, [pc, #184]	; (80028bc <HAL_UART_MspInit+0x174>)
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	4a2d      	ldr	r2, [pc, #180]	; (80028bc <HAL_UART_MspInit+0x174>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	6313      	str	r3, [r2, #48]	; 0x30
 800280c:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <HAL_UART_MspInit+0x174>)
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART2_TX_LR_Pin|USART2_RX_LR_Pin;
 8002818:	230c      	movs	r3, #12
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002824:	2303      	movs	r3, #3
 8002826:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002828:	2307      	movs	r3, #7
 800282a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002830:	4619      	mov	r1, r3
 8002832:	4823      	ldr	r0, [pc, #140]	; (80028c0 <HAL_UART_MspInit+0x178>)
 8002834:	f000 fc4e 	bl	80030d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002838:	2200      	movs	r2, #0
 800283a:	2100      	movs	r1, #0
 800283c:	2026      	movs	r0, #38	; 0x26
 800283e:	f000 fb72 	bl	8002f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002842:	2026      	movs	r0, #38	; 0x26
 8002844:	f000 fb8b 	bl	8002f5e <HAL_NVIC_EnableIRQ>
}
 8002848:	e031      	b.n	80028ae <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a1e      	ldr	r2, [pc, #120]	; (80028c8 <HAL_UART_MspInit+0x180>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d12c      	bne.n	80028ae <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002854:	2300      	movs	r3, #0
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	4b18      	ldr	r3, [pc, #96]	; (80028bc <HAL_UART_MspInit+0x174>)
 800285a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285c:	4a17      	ldr	r2, [pc, #92]	; (80028bc <HAL_UART_MspInit+0x174>)
 800285e:	f043 0320 	orr.w	r3, r3, #32
 8002862:	6453      	str	r3, [r2, #68]	; 0x44
 8002864:	4b15      	ldr	r3, [pc, #84]	; (80028bc <HAL_UART_MspInit+0x174>)
 8002866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_UART_MspInit+0x174>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	4a10      	ldr	r2, [pc, #64]	; (80028bc <HAL_UART_MspInit+0x174>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6313      	str	r3, [r2, #48]	; 0x30
 8002880:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <HAL_UART_MspInit+0x174>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800288c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289a:	2303      	movs	r3, #3
 800289c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800289e:	2308      	movs	r3, #8
 80028a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a6:	4619      	mov	r1, r3
 80028a8:	4805      	ldr	r0, [pc, #20]	; (80028c0 <HAL_UART_MspInit+0x178>)
 80028aa:	f000 fc13 	bl	80030d4 <HAL_GPIO_Init>
}
 80028ae:	bf00      	nop
 80028b0:	3738      	adds	r7, #56	; 0x38
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40011000 	.word	0x40011000
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40020000 	.word	0x40020000
 80028c4:	40004400 	.word	0x40004400
 80028c8:	40011400 	.word	0x40011400

080028cc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1c      	ldr	r2, [pc, #112]	; (800294c <HAL_UART_MspDeInit+0x80>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d10e      	bne.n	80028fc <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80028de:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <HAL_UART_MspDeInit+0x84>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	4a1b      	ldr	r2, [pc, #108]	; (8002950 <HAL_UART_MspDeInit+0x84>)
 80028e4:	f023 0310 	bic.w	r3, r3, #16
 80028e8:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART1_TX_WF_Pin|USART1_RX_WF_Pin);
 80028ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80028ee:	4819      	ldr	r0, [pc, #100]	; (8002954 <HAL_UART_MspDeInit+0x88>)
 80028f0:	f000 fd74 	bl	80033dc <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80028f4:	2025      	movs	r0, #37	; 0x25
 80028f6:	f000 fb40 	bl	8002f7a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 80028fa:	e022      	b.n	8002942 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a15      	ldr	r2, [pc, #84]	; (8002958 <HAL_UART_MspDeInit+0x8c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d10d      	bne.n	8002922 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002906:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_UART_MspDeInit+0x84>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	4a11      	ldr	r2, [pc, #68]	; (8002950 <HAL_UART_MspDeInit+0x84>)
 800290c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002910:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART2_TX_LR_Pin|USART2_RX_LR_Pin);
 8002912:	210c      	movs	r1, #12
 8002914:	480f      	ldr	r0, [pc, #60]	; (8002954 <HAL_UART_MspDeInit+0x88>)
 8002916:	f000 fd61 	bl	80033dc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800291a:	2026      	movs	r0, #38	; 0x26
 800291c:	f000 fb2d 	bl	8002f7a <HAL_NVIC_DisableIRQ>
}
 8002920:	e00f      	b.n	8002942 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART6)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a0d      	ldr	r2, [pc, #52]	; (800295c <HAL_UART_MspDeInit+0x90>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d10a      	bne.n	8002942 <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART6_CLK_DISABLE();
 800292c:	4b08      	ldr	r3, [pc, #32]	; (8002950 <HAL_UART_MspDeInit+0x84>)
 800292e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002930:	4a07      	ldr	r2, [pc, #28]	; (8002950 <HAL_UART_MspDeInit+0x84>)
 8002932:	f023 0320 	bic.w	r3, r3, #32
 8002936:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8002938:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800293c:	4805      	ldr	r0, [pc, #20]	; (8002954 <HAL_UART_MspDeInit+0x88>)
 800293e:	f000 fd4d 	bl	80033dc <HAL_GPIO_DeInit>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40011000 	.word	0x40011000
 8002950:	40023800 	.word	0x40023800
 8002954:	40020000 	.word	0x40020000
 8002958:	40004400 	.word	0x40004400
 800295c:	40011400 	.word	0x40011400

08002960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002964:	e7fe      	b.n	8002964 <NMI_Handler+0x4>

08002966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002966:	b480      	push	{r7}
 8002968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800296a:	e7fe      	b.n	800296a <HardFault_Handler+0x4>

0800296c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002970:	e7fe      	b.n	8002970 <MemManage_Handler+0x4>

08002972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002976:	e7fe      	b.n	8002976 <BusFault_Handler+0x4>

08002978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800297c:	e7fe      	b.n	800297c <UsageFault_Handler+0x4>

0800297e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <TIM2_IRQHandler+0x10>)
 80029ae:	f002 f82d 	bl	8004a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200001ec 	.word	0x200001ec

080029bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <TIM3_IRQHandler+0x10>)
 80029c2:	f002 f823 	bl	8004a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000234 	.word	0x20000234

080029d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029d4:	4802      	ldr	r0, [pc, #8]	; (80029e0 <USART1_IRQHandler+0x10>)
 80029d6:	f002 ff3f 	bl	8005858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	2000027c 	.word	0x2000027c

080029e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029e8:	4802      	ldr	r0, [pc, #8]	; (80029f4 <USART2_IRQHandler+0x10>)
 80029ea:	f002 ff35 	bl	8005858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	200002c0 	.word	0x200002c0

080029f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
	return 1;
 80029fc:	2301      	movs	r3, #1
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <_kill>:

int _kill(int pid, int sig)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a12:	f00c fc8f 	bl	800f334 <__errno>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2216      	movs	r2, #22
 8002a1a:	601a      	str	r2, [r3, #0]
	return -1;
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <_exit>:

void _exit (int status)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a30:	f04f 31ff 	mov.w	r1, #4294967295
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff ffe7 	bl	8002a08 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a3a:	e7fe      	b.n	8002a3a <_exit+0x12>

08002a3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	e00a      	b.n	8002a64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a4e:	f3af 8000 	nop.w
 8002a52:	4601      	mov	r1, r0
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	60ba      	str	r2, [r7, #8]
 8002a5a:	b2ca      	uxtb	r2, r1
 8002a5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	3301      	adds	r3, #1
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	dbf0      	blt.n	8002a4e <_read+0x12>
	}

return len;
 8002a6c:	687b      	ldr	r3, [r7, #4]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b086      	sub	sp, #24
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	e009      	b.n	8002a9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	60ba      	str	r2, [r7, #8]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	dbf1      	blt.n	8002a88 <_write+0x12>
	}
	return len;
 8002aa4:	687b      	ldr	r3, [r7, #4]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <_close>:

int _close(int file)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
	return -1;
 8002ab6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ad6:	605a      	str	r2, [r3, #4]
	return 0;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <_isatty>:

int _isatty(int file)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
	return 1;
 8002aee:	2301      	movs	r3, #1
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
	return 0;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b20:	4a14      	ldr	r2, [pc, #80]	; (8002b74 <_sbrk+0x5c>)
 8002b22:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <_sbrk+0x60>)
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b2c:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <_sbrk+0x64>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d102      	bne.n	8002b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <_sbrk+0x64>)
 8002b36:	4a12      	ldr	r2, [pc, #72]	; (8002b80 <_sbrk+0x68>)
 8002b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <_sbrk+0x64>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4413      	add	r3, r2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d207      	bcs.n	8002b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b48:	f00c fbf4 	bl	800f334 <__errno>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	220c      	movs	r2, #12
 8002b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
 8002b56:	e009      	b.n	8002b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b58:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <_sbrk+0x64>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b5e:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <_sbrk+0x64>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	4a05      	ldr	r2, [pc, #20]	; (8002b7c <_sbrk+0x64>)
 8002b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20020000 	.word	0x20020000
 8002b78:	00000400 	.word	0x00000400
 8002b7c:	20003e50 	.word	0x20003e50
 8002b80:	20003fa8 	.word	0x20003fa8

08002b84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <SystemInit+0x20>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8e:	4a05      	ldr	r2, [pc, #20]	; (8002ba4 <SystemInit+0x20>)
 8002b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002be0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bac:	480d      	ldr	r0, [pc, #52]	; (8002be4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bae:	490e      	ldr	r1, [pc, #56]	; (8002be8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bb0:	4a0e      	ldr	r2, [pc, #56]	; (8002bec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bb4:	e002      	b.n	8002bbc <LoopCopyDataInit>

08002bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bba:	3304      	adds	r3, #4

08002bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bc0:	d3f9      	bcc.n	8002bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bc2:	4a0b      	ldr	r2, [pc, #44]	; (8002bf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bc4:	4c0b      	ldr	r4, [pc, #44]	; (8002bf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bc8:	e001      	b.n	8002bce <LoopFillZerobss>

08002bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bcc:	3204      	adds	r2, #4

08002bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bd0:	d3fb      	bcc.n	8002bca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bd2:	f7ff ffd7 	bl	8002b84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bd6:	f00c fbb3 	bl	800f340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bda:	f7fd fd5b 	bl	8000694 <main>
  bx  lr    
 8002bde:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002be0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002be8:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8002bec:	08010e8c 	.word	0x08010e8c
  ldr r2, =_sbss
 8002bf0:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8002bf4:	20003fa4 	.word	0x20003fa4

08002bf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bf8:	e7fe      	b.n	8002bf8 <ADC_IRQHandler>
	...

08002bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c00:	4b0e      	ldr	r3, [pc, #56]	; (8002c3c <HAL_Init+0x40>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a0d      	ldr	r2, [pc, #52]	; (8002c3c <HAL_Init+0x40>)
 8002c06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_Init+0x40>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <HAL_Init+0x40>)
 8002c12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c18:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <HAL_Init+0x40>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a07      	ldr	r2, [pc, #28]	; (8002c3c <HAL_Init+0x40>)
 8002c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c24:	2003      	movs	r0, #3
 8002c26:	f000 f973 	bl	8002f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c2a:	200f      	movs	r0, #15
 8002c2c:	f000 f808 	bl	8002c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c30:	f7ff fcd6 	bl	80025e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40023c00 	.word	0x40023c00

08002c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c48:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <HAL_InitTick+0x54>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <HAL_InitTick+0x58>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	4619      	mov	r1, r3
 8002c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 f999 	bl	8002f96 <HAL_SYSTICK_Config>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e00e      	b.n	8002c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b0f      	cmp	r3, #15
 8002c72:	d80a      	bhi.n	8002c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c74:	2200      	movs	r2, #0
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7c:	f000 f953 	bl	8002f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c80:	4a06      	ldr	r2, [pc, #24]	; (8002c9c <HAL_InitTick+0x5c>)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	e000      	b.n	8002c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000084 	.word	0x20000084
 8002c98:	2000008c 	.word	0x2000008c
 8002c9c:	20000088 	.word	0x20000088

08002ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ca4:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_IncTick+0x20>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_IncTick+0x24>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4413      	add	r3, r2
 8002cb0:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <HAL_IncTick+0x24>)
 8002cb2:	6013      	str	r3, [r2, #0]
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	2000008c 	.word	0x2000008c
 8002cc4:	20003e54 	.word	0x20003e54

08002cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return uwTick;
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <HAL_GetTick+0x14>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20003e54 	.word	0x20003e54

08002ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ce8:	f7ff ffee 	bl	8002cc8 <HAL_GetTick>
 8002cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf8:	d005      	beq.n	8002d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <HAL_Delay+0x44>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4413      	add	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d06:	bf00      	nop
 8002d08:	f7ff ffde 	bl	8002cc8 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d8f7      	bhi.n	8002d08 <HAL_Delay+0x28>
  {
  }
}
 8002d18:	bf00      	nop
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	2000008c 	.word	0x2000008c

08002d28 <__NVIC_SetPriorityGrouping>:
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <__NVIC_SetPriorityGrouping+0x44>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d44:	4013      	ands	r3, r2
 8002d46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d5a:	4a04      	ldr	r2, [pc, #16]	; (8002d6c <__NVIC_SetPriorityGrouping+0x44>)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	60d3      	str	r3, [r2, #12]
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <__NVIC_GetPriorityGrouping>:
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d74:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <__NVIC_GetPriorityGrouping+0x18>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	0a1b      	lsrs	r3, r3, #8
 8002d7a:	f003 0307 	and.w	r3, r3, #7
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <__NVIC_EnableIRQ>:
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	db0b      	blt.n	8002db6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	f003 021f 	and.w	r2, r3, #31
 8002da4:	4907      	ldr	r1, [pc, #28]	; (8002dc4 <__NVIC_EnableIRQ+0x38>)
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	2001      	movs	r0, #1
 8002dae:	fa00 f202 	lsl.w	r2, r0, r2
 8002db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	e000e100 	.word	0xe000e100

08002dc8 <__NVIC_DisableIRQ>:
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	db12      	blt.n	8002e00 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	f003 021f 	and.w	r2, r3, #31
 8002de0:	490a      	ldr	r1, [pc, #40]	; (8002e0c <__NVIC_DisableIRQ+0x44>)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	2001      	movs	r0, #1
 8002dea:	fa00 f202 	lsl.w	r2, r0, r2
 8002dee:	3320      	adds	r3, #32
 8002df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002df4:	f3bf 8f4f 	dsb	sy
}
 8002df8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002dfa:	f3bf 8f6f 	isb	sy
}
 8002dfe:	bf00      	nop
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	e000e100 	.word	0xe000e100

08002e10 <__NVIC_SetPriority>:
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	6039      	str	r1, [r7, #0]
 8002e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	db0a      	blt.n	8002e3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	490c      	ldr	r1, [pc, #48]	; (8002e5c <__NVIC_SetPriority+0x4c>)
 8002e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2e:	0112      	lsls	r2, r2, #4
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	440b      	add	r3, r1
 8002e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e38:	e00a      	b.n	8002e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	4908      	ldr	r1, [pc, #32]	; (8002e60 <__NVIC_SetPriority+0x50>)
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	3b04      	subs	r3, #4
 8002e48:	0112      	lsls	r2, r2, #4
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	761a      	strb	r2, [r3, #24]
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	e000e100 	.word	0xe000e100
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <NVIC_EncodePriority>:
{
 8002e64:	b480      	push	{r7}
 8002e66:	b089      	sub	sp, #36	; 0x24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f1c3 0307 	rsb	r3, r3, #7
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	bf28      	it	cs
 8002e82:	2304      	movcs	r3, #4
 8002e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	2b06      	cmp	r3, #6
 8002e8c:	d902      	bls.n	8002e94 <NVIC_EncodePriority+0x30>
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3b03      	subs	r3, #3
 8002e92:	e000      	b.n	8002e96 <NVIC_EncodePriority+0x32>
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e98:	f04f 32ff 	mov.w	r2, #4294967295
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eac:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb6:	43d9      	mvns	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ebc:	4313      	orrs	r3, r2
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3724      	adds	r7, #36	; 0x24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
	...

08002ecc <SysTick_Config>:
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002edc:	d301      	bcc.n	8002ee2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e00f      	b.n	8002f02 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <SysTick_Config+0x40>)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eea:	210f      	movs	r1, #15
 8002eec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef0:	f7ff ff8e 	bl	8002e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ef4:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <SysTick_Config+0x40>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002efa:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <SysTick_Config+0x40>)
 8002efc:	2207      	movs	r2, #7
 8002efe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	e000e010 	.word	0xe000e010

08002f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff ff05 	bl	8002d28 <__NVIC_SetPriorityGrouping>
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b086      	sub	sp, #24
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f38:	f7ff ff1a 	bl	8002d70 <__NVIC_GetPriorityGrouping>
 8002f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	6978      	ldr	r0, [r7, #20]
 8002f44:	f7ff ff8e 	bl	8002e64 <NVIC_EncodePriority>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff ff5d 	bl	8002e10 <__NVIC_SetPriority>
}
 8002f56:	bf00      	nop
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	4603      	mov	r3, r0
 8002f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff0d 	bl	8002d8c <__NVIC_EnableIRQ>
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff1d 	bl	8002dc8 <__NVIC_DisableIRQ>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ff94 	bl	8002ecc <SysTick_Config>
 8002fa4:	4603      	mov	r3, r0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fbc:	f7ff fe84 	bl	8002cc8 <HAL_GetTick>
 8002fc0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d008      	beq.n	8002fe0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2280      	movs	r2, #128	; 0x80
 8002fd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e052      	b.n	8003086 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0216 	bic.w	r2, r2, #22
 8002fee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ffe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	2b00      	cmp	r3, #0
 8003006:	d103      	bne.n	8003010 <HAL_DMA_Abort+0x62>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800300c:	2b00      	cmp	r3, #0
 800300e:	d007      	beq.n	8003020 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0208 	bic.w	r2, r2, #8
 800301e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0201 	bic.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003030:	e013      	b.n	800305a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003032:	f7ff fe49 	bl	8002cc8 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b05      	cmp	r3, #5
 800303e:	d90c      	bls.n	800305a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2203      	movs	r2, #3
 800304a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e015      	b.n	8003086 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1e4      	bne.n	8003032 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306c:	223f      	movs	r2, #63	; 0x3f
 800306e:	409a      	lsls	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d004      	beq.n	80030ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2280      	movs	r2, #128	; 0x80
 80030a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e00c      	b.n	80030c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2205      	movs	r2, #5
 80030b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0201 	bic.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b089      	sub	sp, #36	; 0x24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
 80030ee:	e159      	b.n	80033a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030f0:	2201      	movs	r2, #1
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4013      	ands	r3, r2
 8003102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	429a      	cmp	r2, r3
 800310a:	f040 8148 	bne.w	800339e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b01      	cmp	r3, #1
 8003118:	d005      	beq.n	8003126 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003122:	2b02      	cmp	r3, #2
 8003124:	d130      	bne.n	8003188 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	2203      	movs	r2, #3
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800315c:	2201      	movs	r2, #1
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f003 0201 	and.w	r2, r3, #1
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	2b03      	cmp	r3, #3
 8003192:	d017      	beq.n	80031c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	2203      	movs	r2, #3
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d123      	bne.n	8003218 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	08da      	lsrs	r2, r3, #3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3208      	adds	r2, #8
 80031d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	220f      	movs	r2, #15
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	08da      	lsrs	r2, r3, #3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3208      	adds	r2, #8
 8003212:	69b9      	ldr	r1, [r7, #24]
 8003214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	2203      	movs	r2, #3
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 0203 	and.w	r2, r3, #3
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 80a2 	beq.w	800339e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	4b57      	ldr	r3, [pc, #348]	; (80033bc <HAL_GPIO_Init+0x2e8>)
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	4a56      	ldr	r2, [pc, #344]	; (80033bc <HAL_GPIO_Init+0x2e8>)
 8003264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003268:	6453      	str	r3, [r2, #68]	; 0x44
 800326a:	4b54      	ldr	r3, [pc, #336]	; (80033bc <HAL_GPIO_Init+0x2e8>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003276:	4a52      	ldr	r2, [pc, #328]	; (80033c0 <HAL_GPIO_Init+0x2ec>)
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	089b      	lsrs	r3, r3, #2
 800327c:	3302      	adds	r3, #2
 800327e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	220f      	movs	r2, #15
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43db      	mvns	r3, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4013      	ands	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a49      	ldr	r2, [pc, #292]	; (80033c4 <HAL_GPIO_Init+0x2f0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d019      	beq.n	80032d6 <HAL_GPIO_Init+0x202>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a48      	ldr	r2, [pc, #288]	; (80033c8 <HAL_GPIO_Init+0x2f4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_GPIO_Init+0x1fe>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a47      	ldr	r2, [pc, #284]	; (80033cc <HAL_GPIO_Init+0x2f8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00d      	beq.n	80032ce <HAL_GPIO_Init+0x1fa>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a46      	ldr	r2, [pc, #280]	; (80033d0 <HAL_GPIO_Init+0x2fc>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d007      	beq.n	80032ca <HAL_GPIO_Init+0x1f6>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a45      	ldr	r2, [pc, #276]	; (80033d4 <HAL_GPIO_Init+0x300>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d101      	bne.n	80032c6 <HAL_GPIO_Init+0x1f2>
 80032c2:	2304      	movs	r3, #4
 80032c4:	e008      	b.n	80032d8 <HAL_GPIO_Init+0x204>
 80032c6:	2307      	movs	r3, #7
 80032c8:	e006      	b.n	80032d8 <HAL_GPIO_Init+0x204>
 80032ca:	2303      	movs	r3, #3
 80032cc:	e004      	b.n	80032d8 <HAL_GPIO_Init+0x204>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e002      	b.n	80032d8 <HAL_GPIO_Init+0x204>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <HAL_GPIO_Init+0x204>
 80032d6:	2300      	movs	r3, #0
 80032d8:	69fa      	ldr	r2, [r7, #28]
 80032da:	f002 0203 	and.w	r2, r2, #3
 80032de:	0092      	lsls	r2, r2, #2
 80032e0:	4093      	lsls	r3, r2
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032e8:	4935      	ldr	r1, [pc, #212]	; (80033c0 <HAL_GPIO_Init+0x2ec>)
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	089b      	lsrs	r3, r3, #2
 80032ee:	3302      	adds	r3, #2
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032f6:	4b38      	ldr	r3, [pc, #224]	; (80033d8 <HAL_GPIO_Init+0x304>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	43db      	mvns	r3, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4013      	ands	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800331a:	4a2f      	ldr	r2, [pc, #188]	; (80033d8 <HAL_GPIO_Init+0x304>)
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003320:	4b2d      	ldr	r3, [pc, #180]	; (80033d8 <HAL_GPIO_Init+0x304>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003344:	4a24      	ldr	r2, [pc, #144]	; (80033d8 <HAL_GPIO_Init+0x304>)
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800334a:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <HAL_GPIO_Init+0x304>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	43db      	mvns	r3, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800336e:	4a1a      	ldr	r2, [pc, #104]	; (80033d8 <HAL_GPIO_Init+0x304>)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003374:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <HAL_GPIO_Init+0x304>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003398:	4a0f      	ldr	r2, [pc, #60]	; (80033d8 <HAL_GPIO_Init+0x304>)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	3301      	adds	r3, #1
 80033a2:	61fb      	str	r3, [r7, #28]
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	2b0f      	cmp	r3, #15
 80033a8:	f67f aea2 	bls.w	80030f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033ac:	bf00      	nop
 80033ae:	bf00      	nop
 80033b0:	3724      	adds	r7, #36	; 0x24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40013800 	.word	0x40013800
 80033c4:	40020000 	.word	0x40020000
 80033c8:	40020400 	.word	0x40020400
 80033cc:	40020800 	.word	0x40020800
 80033d0:	40020c00 	.word	0x40020c00
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40013c00 	.word	0x40013c00

080033dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80033dc:	b480      	push	{r7}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	e0bb      	b.n	8003570 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033f8:	2201      	movs	r2, #1
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4013      	ands	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	429a      	cmp	r2, r3
 8003410:	f040 80ab 	bne.w	800356a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003414:	4a5c      	ldr	r2, [pc, #368]	; (8003588 <HAL_GPIO_DeInit+0x1ac>)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	089b      	lsrs	r3, r3, #2
 800341a:	3302      	adds	r3, #2
 800341c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003420:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	220f      	movs	r2, #15
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	4013      	ands	r3, r2
 8003434:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a54      	ldr	r2, [pc, #336]	; (800358c <HAL_GPIO_DeInit+0x1b0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d019      	beq.n	8003472 <HAL_GPIO_DeInit+0x96>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a53      	ldr	r2, [pc, #332]	; (8003590 <HAL_GPIO_DeInit+0x1b4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d013      	beq.n	800346e <HAL_GPIO_DeInit+0x92>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a52      	ldr	r2, [pc, #328]	; (8003594 <HAL_GPIO_DeInit+0x1b8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00d      	beq.n	800346a <HAL_GPIO_DeInit+0x8e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a51      	ldr	r2, [pc, #324]	; (8003598 <HAL_GPIO_DeInit+0x1bc>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d007      	beq.n	8003466 <HAL_GPIO_DeInit+0x8a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a50      	ldr	r2, [pc, #320]	; (800359c <HAL_GPIO_DeInit+0x1c0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_GPIO_DeInit+0x86>
 800345e:	2304      	movs	r3, #4
 8003460:	e008      	b.n	8003474 <HAL_GPIO_DeInit+0x98>
 8003462:	2307      	movs	r3, #7
 8003464:	e006      	b.n	8003474 <HAL_GPIO_DeInit+0x98>
 8003466:	2303      	movs	r3, #3
 8003468:	e004      	b.n	8003474 <HAL_GPIO_DeInit+0x98>
 800346a:	2302      	movs	r3, #2
 800346c:	e002      	b.n	8003474 <HAL_GPIO_DeInit+0x98>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <HAL_GPIO_DeInit+0x98>
 8003472:	2300      	movs	r3, #0
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	f002 0203 	and.w	r2, r2, #3
 800347a:	0092      	lsls	r2, r2, #2
 800347c:	4093      	lsls	r3, r2
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	429a      	cmp	r2, r3
 8003482:	d132      	bne.n	80034ea <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003484:	4b46      	ldr	r3, [pc, #280]	; (80035a0 <HAL_GPIO_DeInit+0x1c4>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	43db      	mvns	r3, r3
 800348c:	4944      	ldr	r1, [pc, #272]	; (80035a0 <HAL_GPIO_DeInit+0x1c4>)
 800348e:	4013      	ands	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003492:	4b43      	ldr	r3, [pc, #268]	; (80035a0 <HAL_GPIO_DeInit+0x1c4>)
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	43db      	mvns	r3, r3
 800349a:	4941      	ldr	r1, [pc, #260]	; (80035a0 <HAL_GPIO_DeInit+0x1c4>)
 800349c:	4013      	ands	r3, r2
 800349e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80034a0:	4b3f      	ldr	r3, [pc, #252]	; (80035a0 <HAL_GPIO_DeInit+0x1c4>)
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	43db      	mvns	r3, r3
 80034a8:	493d      	ldr	r1, [pc, #244]	; (80035a0 <HAL_GPIO_DeInit+0x1c4>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80034ae:	4b3c      	ldr	r3, [pc, #240]	; (80035a0 <HAL_GPIO_DeInit+0x1c4>)
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	493a      	ldr	r1, [pc, #232]	; (80035a0 <HAL_GPIO_DeInit+0x1c4>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	220f      	movs	r2, #15
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80034cc:	4a2e      	ldr	r2, [pc, #184]	; (8003588 <HAL_GPIO_DeInit+0x1ac>)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	089b      	lsrs	r3, r3, #2
 80034d2:	3302      	adds	r3, #2
 80034d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	43da      	mvns	r2, r3
 80034dc:	482a      	ldr	r0, [pc, #168]	; (8003588 <HAL_GPIO_DeInit+0x1ac>)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	400a      	ands	r2, r1
 80034e4:	3302      	adds	r3, #2
 80034e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	2103      	movs	r1, #3
 80034f4:	fa01 f303 	lsl.w	r3, r1, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	401a      	ands	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	08da      	lsrs	r2, r3, #3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3208      	adds	r2, #8
 8003508:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	220f      	movs	r2, #15
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43db      	mvns	r3, r3
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	08d2      	lsrs	r2, r2, #3
 8003520:	4019      	ands	r1, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3208      	adds	r2, #8
 8003526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	2103      	movs	r1, #3
 8003534:	fa01 f303 	lsl.w	r3, r1, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	401a      	ands	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	2101      	movs	r1, #1
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	fa01 f303 	lsl.w	r3, r1, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	401a      	ands	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	2103      	movs	r1, #3
 800355e:	fa01 f303 	lsl.w	r3, r1, r3
 8003562:	43db      	mvns	r3, r3
 8003564:	401a      	ands	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	3301      	adds	r3, #1
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2b0f      	cmp	r3, #15
 8003574:	f67f af40 	bls.w	80033f8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003578:	bf00      	nop
 800357a:	bf00      	nop
 800357c:	371c      	adds	r7, #28
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40013800 	.word	0x40013800
 800358c:	40020000 	.word	0x40020000
 8003590:	40020400 	.word	0x40020400
 8003594:	40020800 	.word	0x40020800
 8003598:	40020c00 	.word	0x40020c00
 800359c:	40021000 	.word	0x40021000
 80035a0:	40013c00 	.word	0x40013c00

080035a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	807b      	strh	r3, [r7, #2]
 80035b0:	4613      	mov	r3, r2
 80035b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035b4:	787b      	ldrb	r3, [r7, #1]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035ba:	887a      	ldrh	r2, [r7, #2]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035c0:	e003      	b.n	80035ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035c2:	887b      	ldrh	r3, [r7, #2]
 80035c4:	041a      	lsls	r2, r3, #16
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	619a      	str	r2, [r3, #24]
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b085      	sub	sp, #20
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	460b      	mov	r3, r1
 80035e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035e8:	887a      	ldrh	r2, [r7, #2]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4013      	ands	r3, r2
 80035ee:	041a      	lsls	r2, r3, #16
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	43d9      	mvns	r1, r3
 80035f4:	887b      	ldrh	r3, [r7, #2]
 80035f6:	400b      	ands	r3, r1
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	619a      	str	r2, [r3, #24]
}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e267      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d075      	beq.n	8003716 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800362a:	4b88      	ldr	r3, [pc, #544]	; (800384c <HAL_RCC_OscConfig+0x240>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b04      	cmp	r3, #4
 8003634:	d00c      	beq.n	8003650 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003636:	4b85      	ldr	r3, [pc, #532]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800363e:	2b08      	cmp	r3, #8
 8003640:	d112      	bne.n	8003668 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003642:	4b82      	ldr	r3, [pc, #520]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800364a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800364e:	d10b      	bne.n	8003668 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003650:	4b7e      	ldr	r3, [pc, #504]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d05b      	beq.n	8003714 <HAL_RCC_OscConfig+0x108>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d157      	bne.n	8003714 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e242      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003670:	d106      	bne.n	8003680 <HAL_RCC_OscConfig+0x74>
 8003672:	4b76      	ldr	r3, [pc, #472]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a75      	ldr	r2, [pc, #468]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e01d      	b.n	80036bc <HAL_RCC_OscConfig+0xb0>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003688:	d10c      	bne.n	80036a4 <HAL_RCC_OscConfig+0x98>
 800368a:	4b70      	ldr	r3, [pc, #448]	; (800384c <HAL_RCC_OscConfig+0x240>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a6f      	ldr	r2, [pc, #444]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	4b6d      	ldr	r3, [pc, #436]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a6c      	ldr	r2, [pc, #432]	; (800384c <HAL_RCC_OscConfig+0x240>)
 800369c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	e00b      	b.n	80036bc <HAL_RCC_OscConfig+0xb0>
 80036a4:	4b69      	ldr	r3, [pc, #420]	; (800384c <HAL_RCC_OscConfig+0x240>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a68      	ldr	r2, [pc, #416]	; (800384c <HAL_RCC_OscConfig+0x240>)
 80036aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	4b66      	ldr	r3, [pc, #408]	; (800384c <HAL_RCC_OscConfig+0x240>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a65      	ldr	r2, [pc, #404]	; (800384c <HAL_RCC_OscConfig+0x240>)
 80036b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d013      	beq.n	80036ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7ff fb00 	bl	8002cc8 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036cc:	f7ff fafc 	bl	8002cc8 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	; 0x64
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e207      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036de:	4b5b      	ldr	r3, [pc, #364]	; (800384c <HAL_RCC_OscConfig+0x240>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0xc0>
 80036ea:	e014      	b.n	8003716 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7ff faec 	bl	8002cc8 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036f4:	f7ff fae8 	bl	8002cc8 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b64      	cmp	r3, #100	; 0x64
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e1f3      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003706:	4b51      	ldr	r3, [pc, #324]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0xe8>
 8003712:	e000      	b.n	8003716 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d063      	beq.n	80037ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003722:	4b4a      	ldr	r3, [pc, #296]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00b      	beq.n	8003746 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800372e:	4b47      	ldr	r3, [pc, #284]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003736:	2b08      	cmp	r3, #8
 8003738:	d11c      	bne.n	8003774 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800373a:	4b44      	ldr	r3, [pc, #272]	; (800384c <HAL_RCC_OscConfig+0x240>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d116      	bne.n	8003774 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003746:	4b41      	ldr	r3, [pc, #260]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_RCC_OscConfig+0x152>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d001      	beq.n	800375e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e1c7      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375e:	4b3b      	ldr	r3, [pc, #236]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	4937      	ldr	r1, [pc, #220]	; (800384c <HAL_RCC_OscConfig+0x240>)
 800376e:	4313      	orrs	r3, r2
 8003770:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003772:	e03a      	b.n	80037ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d020      	beq.n	80037be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800377c:	4b34      	ldr	r3, [pc, #208]	; (8003850 <HAL_RCC_OscConfig+0x244>)
 800377e:	2201      	movs	r2, #1
 8003780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003782:	f7ff faa1 	bl	8002cc8 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800378a:	f7ff fa9d 	bl	8002cc8 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e1a8      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379c:	4b2b      	ldr	r3, [pc, #172]	; (800384c <HAL_RCC_OscConfig+0x240>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a8:	4b28      	ldr	r3, [pc, #160]	; (800384c <HAL_RCC_OscConfig+0x240>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	4925      	ldr	r1, [pc, #148]	; (800384c <HAL_RCC_OscConfig+0x240>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	600b      	str	r3, [r1, #0]
 80037bc:	e015      	b.n	80037ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037be:	4b24      	ldr	r3, [pc, #144]	; (8003850 <HAL_RCC_OscConfig+0x244>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7ff fa80 	bl	8002cc8 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037cc:	f7ff fa7c 	bl	8002cc8 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e187      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037de:	4b1b      	ldr	r3, [pc, #108]	; (800384c <HAL_RCC_OscConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d036      	beq.n	8003864 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d016      	beq.n	800382c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037fe:	4b15      	ldr	r3, [pc, #84]	; (8003854 <HAL_RCC_OscConfig+0x248>)
 8003800:	2201      	movs	r2, #1
 8003802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003804:	f7ff fa60 	bl	8002cc8 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800380c:	f7ff fa5c 	bl	8002cc8 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e167      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381e:	4b0b      	ldr	r3, [pc, #44]	; (800384c <HAL_RCC_OscConfig+0x240>)
 8003820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0x200>
 800382a:	e01b      	b.n	8003864 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800382c:	4b09      	ldr	r3, [pc, #36]	; (8003854 <HAL_RCC_OscConfig+0x248>)
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003832:	f7ff fa49 	bl	8002cc8 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003838:	e00e      	b.n	8003858 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800383a:	f7ff fa45 	bl	8002cc8 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d907      	bls.n	8003858 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e150      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
 800384c:	40023800 	.word	0x40023800
 8003850:	42470000 	.word	0x42470000
 8003854:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003858:	4b88      	ldr	r3, [pc, #544]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 800385a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1ea      	bne.n	800383a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 8097 	beq.w	80039a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003872:	2300      	movs	r3, #0
 8003874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003876:	4b81      	ldr	r3, [pc, #516]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10f      	bne.n	80038a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	4b7d      	ldr	r3, [pc, #500]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	4a7c      	ldr	r2, [pc, #496]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 800388c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003890:	6413      	str	r3, [r2, #64]	; 0x40
 8003892:	4b7a      	ldr	r3, [pc, #488]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800389e:	2301      	movs	r3, #1
 80038a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a2:	4b77      	ldr	r3, [pc, #476]	; (8003a80 <HAL_RCC_OscConfig+0x474>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d118      	bne.n	80038e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ae:	4b74      	ldr	r3, [pc, #464]	; (8003a80 <HAL_RCC_OscConfig+0x474>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a73      	ldr	r2, [pc, #460]	; (8003a80 <HAL_RCC_OscConfig+0x474>)
 80038b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ba:	f7ff fa05 	bl	8002cc8 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c2:	f7ff fa01 	bl	8002cc8 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e10c      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d4:	4b6a      	ldr	r3, [pc, #424]	; (8003a80 <HAL_RCC_OscConfig+0x474>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0f0      	beq.n	80038c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d106      	bne.n	80038f6 <HAL_RCC_OscConfig+0x2ea>
 80038e8:	4b64      	ldr	r3, [pc, #400]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ec:	4a63      	ldr	r2, [pc, #396]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	6713      	str	r3, [r2, #112]	; 0x70
 80038f4:	e01c      	b.n	8003930 <HAL_RCC_OscConfig+0x324>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	2b05      	cmp	r3, #5
 80038fc:	d10c      	bne.n	8003918 <HAL_RCC_OscConfig+0x30c>
 80038fe:	4b5f      	ldr	r3, [pc, #380]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003902:	4a5e      	ldr	r2, [pc, #376]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003904:	f043 0304 	orr.w	r3, r3, #4
 8003908:	6713      	str	r3, [r2, #112]	; 0x70
 800390a:	4b5c      	ldr	r3, [pc, #368]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 800390c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390e:	4a5b      	ldr	r2, [pc, #364]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	6713      	str	r3, [r2, #112]	; 0x70
 8003916:	e00b      	b.n	8003930 <HAL_RCC_OscConfig+0x324>
 8003918:	4b58      	ldr	r3, [pc, #352]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 800391a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391c:	4a57      	ldr	r2, [pc, #348]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 800391e:	f023 0301 	bic.w	r3, r3, #1
 8003922:	6713      	str	r3, [r2, #112]	; 0x70
 8003924:	4b55      	ldr	r3, [pc, #340]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003928:	4a54      	ldr	r2, [pc, #336]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 800392a:	f023 0304 	bic.w	r3, r3, #4
 800392e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d015      	beq.n	8003964 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003938:	f7ff f9c6 	bl	8002cc8 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800393e:	e00a      	b.n	8003956 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003940:	f7ff f9c2 	bl	8002cc8 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	f241 3288 	movw	r2, #5000	; 0x1388
 800394e:	4293      	cmp	r3, r2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e0cb      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003956:	4b49      	ldr	r3, [pc, #292]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0ee      	beq.n	8003940 <HAL_RCC_OscConfig+0x334>
 8003962:	e014      	b.n	800398e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003964:	f7ff f9b0 	bl	8002cc8 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800396a:	e00a      	b.n	8003982 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800396c:	f7ff f9ac 	bl	8002cc8 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f241 3288 	movw	r2, #5000	; 0x1388
 800397a:	4293      	cmp	r3, r2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e0b5      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003982:	4b3e      	ldr	r3, [pc, #248]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1ee      	bne.n	800396c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800398e:	7dfb      	ldrb	r3, [r7, #23]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d105      	bne.n	80039a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003994:	4b39      	ldr	r3, [pc, #228]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	4a38      	ldr	r2, [pc, #224]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 800399a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800399e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 80a1 	beq.w	8003aec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039aa:	4b34      	ldr	r3, [pc, #208]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d05c      	beq.n	8003a70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d141      	bne.n	8003a42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039be:	4b31      	ldr	r3, [pc, #196]	; (8003a84 <HAL_RCC_OscConfig+0x478>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c4:	f7ff f980 	bl	8002cc8 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039cc:	f7ff f97c 	bl	8002cc8 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e087      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039de:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69da      	ldr	r2, [r3, #28]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	019b      	lsls	r3, r3, #6
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	085b      	lsrs	r3, r3, #1
 8003a02:	3b01      	subs	r3, #1
 8003a04:	041b      	lsls	r3, r3, #16
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	061b      	lsls	r3, r3, #24
 8003a0e:	491b      	ldr	r1, [pc, #108]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a14:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <HAL_RCC_OscConfig+0x478>)
 8003a16:	2201      	movs	r2, #1
 8003a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1a:	f7ff f955 	bl	8002cc8 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a22:	f7ff f951 	bl	8002cc8 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e05c      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0f0      	beq.n	8003a22 <HAL_RCC_OscConfig+0x416>
 8003a40:	e054      	b.n	8003aec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a42:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <HAL_RCC_OscConfig+0x478>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a48:	f7ff f93e 	bl	8002cc8 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a50:	f7ff f93a 	bl	8002cc8 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e045      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a62:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <HAL_RCC_OscConfig+0x470>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0x444>
 8003a6e:	e03d      	b.n	8003aec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d107      	bne.n	8003a88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e038      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	40007000 	.word	0x40007000
 8003a84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a88:	4b1b      	ldr	r3, [pc, #108]	; (8003af8 <HAL_RCC_OscConfig+0x4ec>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d028      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d121      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d11a      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ab8:	4013      	ands	r3, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003abe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d111      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ace:	085b      	lsrs	r3, r3, #1
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d107      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d001      	beq.n	8003aec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40023800 	.word	0x40023800

08003afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0cc      	b.n	8003caa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b10:	4b68      	ldr	r3, [pc, #416]	; (8003cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d90c      	bls.n	8003b38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1e:	4b65      	ldr	r3, [pc, #404]	; (8003cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b26:	4b63      	ldr	r3, [pc, #396]	; (8003cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0b8      	b.n	8003caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d020      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d005      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b50:	4b59      	ldr	r3, [pc, #356]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	4a58      	ldr	r2, [pc, #352]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d005      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b68:	4b53      	ldr	r3, [pc, #332]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	4a52      	ldr	r2, [pc, #328]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b74:	4b50      	ldr	r3, [pc, #320]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	494d      	ldr	r1, [pc, #308]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d044      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d107      	bne.n	8003baa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9a:	4b47      	ldr	r3, [pc, #284]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d119      	bne.n	8003bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e07f      	b.n	8003caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d003      	beq.n	8003bba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d107      	bne.n	8003bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bba:	4b3f      	ldr	r3, [pc, #252]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d109      	bne.n	8003bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e06f      	b.n	8003caa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bca:	4b3b      	ldr	r3, [pc, #236]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e067      	b.n	8003caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bda:	4b37      	ldr	r3, [pc, #220]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f023 0203 	bic.w	r2, r3, #3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	4934      	ldr	r1, [pc, #208]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bec:	f7ff f86c 	bl	8002cc8 <HAL_GetTick>
 8003bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf2:	e00a      	b.n	8003c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf4:	f7ff f868 	bl	8002cc8 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e04f      	b.n	8003caa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0a:	4b2b      	ldr	r3, [pc, #172]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 020c 	and.w	r2, r3, #12
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d1eb      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c1c:	4b25      	ldr	r3, [pc, #148]	; (8003cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d20c      	bcs.n	8003c44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2a:	4b22      	ldr	r3, [pc, #136]	; (8003cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c32:	4b20      	ldr	r3, [pc, #128]	; (8003cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e032      	b.n	8003caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c50:	4b19      	ldr	r3, [pc, #100]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	4916      	ldr	r1, [pc, #88]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d009      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c6e:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	490e      	ldr	r1, [pc, #56]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c82:	f000 f821 	bl	8003cc8 <HAL_RCC_GetSysClockFreq>
 8003c86:	4602      	mov	r2, r0
 8003c88:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	091b      	lsrs	r3, r3, #4
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	490a      	ldr	r1, [pc, #40]	; (8003cbc <HAL_RCC_ClockConfig+0x1c0>)
 8003c94:	5ccb      	ldrb	r3, [r1, r3]
 8003c96:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9a:	4a09      	ldr	r2, [pc, #36]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c9e:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fe ffcc 	bl	8002c40 <HAL_InitTick>

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40023c00 	.word	0x40023c00
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	08010c5c 	.word	0x08010c5c
 8003cc0:	20000084 	.word	0x20000084
 8003cc4:	20000088 	.word	0x20000088

08003cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ccc:	b090      	sub	sp, #64	; 0x40
 8003cce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cd8:	2300      	movs	r3, #0
 8003cda:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ce0:	4b59      	ldr	r3, [pc, #356]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 030c 	and.w	r3, r3, #12
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d00d      	beq.n	8003d08 <HAL_RCC_GetSysClockFreq+0x40>
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	f200 80a1 	bhi.w	8003e34 <HAL_RCC_GetSysClockFreq+0x16c>
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <HAL_RCC_GetSysClockFreq+0x34>
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d003      	beq.n	8003d02 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cfa:	e09b      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cfc:	4b53      	ldr	r3, [pc, #332]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x184>)
 8003cfe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d00:	e09b      	b.n	8003e3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d02:	4b53      	ldr	r3, [pc, #332]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d06:	e098      	b.n	8003e3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d08:	4b4f      	ldr	r3, [pc, #316]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d10:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d12:	4b4d      	ldr	r3, [pc, #308]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d028      	beq.n	8003d70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d1e:	4b4a      	ldr	r3, [pc, #296]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	099b      	lsrs	r3, r3, #6
 8003d24:	2200      	movs	r2, #0
 8003d26:	623b      	str	r3, [r7, #32]
 8003d28:	627a      	str	r2, [r7, #36]	; 0x24
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d30:	2100      	movs	r1, #0
 8003d32:	4b47      	ldr	r3, [pc, #284]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d34:	fb03 f201 	mul.w	r2, r3, r1
 8003d38:	2300      	movs	r3, #0
 8003d3a:	fb00 f303 	mul.w	r3, r0, r3
 8003d3e:	4413      	add	r3, r2
 8003d40:	4a43      	ldr	r2, [pc, #268]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d42:	fba0 1202 	umull	r1, r2, r0, r2
 8003d46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d48:	460a      	mov	r2, r1
 8003d4a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d4e:	4413      	add	r3, r2
 8003d50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d54:	2200      	movs	r2, #0
 8003d56:	61bb      	str	r3, [r7, #24]
 8003d58:	61fa      	str	r2, [r7, #28]
 8003d5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d62:	f7fc faa5 	bl	80002b0 <__aeabi_uldivmod>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d6e:	e053      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d70:	4b35      	ldr	r3, [pc, #212]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	099b      	lsrs	r3, r3, #6
 8003d76:	2200      	movs	r2, #0
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	617a      	str	r2, [r7, #20]
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d82:	f04f 0b00 	mov.w	fp, #0
 8003d86:	4652      	mov	r2, sl
 8003d88:	465b      	mov	r3, fp
 8003d8a:	f04f 0000 	mov.w	r0, #0
 8003d8e:	f04f 0100 	mov.w	r1, #0
 8003d92:	0159      	lsls	r1, r3, #5
 8003d94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d98:	0150      	lsls	r0, r2, #5
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	ebb2 080a 	subs.w	r8, r2, sl
 8003da2:	eb63 090b 	sbc.w	r9, r3, fp
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003db2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003db6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003dba:	ebb2 0408 	subs.w	r4, r2, r8
 8003dbe:	eb63 0509 	sbc.w	r5, r3, r9
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	00eb      	lsls	r3, r5, #3
 8003dcc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dd0:	00e2      	lsls	r2, r4, #3
 8003dd2:	4614      	mov	r4, r2
 8003dd4:	461d      	mov	r5, r3
 8003dd6:	eb14 030a 	adds.w	r3, r4, sl
 8003dda:	603b      	str	r3, [r7, #0]
 8003ddc:	eb45 030b 	adc.w	r3, r5, fp
 8003de0:	607b      	str	r3, [r7, #4]
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dee:	4629      	mov	r1, r5
 8003df0:	028b      	lsls	r3, r1, #10
 8003df2:	4621      	mov	r1, r4
 8003df4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003df8:	4621      	mov	r1, r4
 8003dfa:	028a      	lsls	r2, r1, #10
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	4619      	mov	r1, r3
 8003e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e02:	2200      	movs	r2, #0
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	60fa      	str	r2, [r7, #12]
 8003e08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e0c:	f7fc fa50 	bl	80002b0 <__aeabi_uldivmod>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4613      	mov	r3, r2
 8003e16:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e18:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	0c1b      	lsrs	r3, r3, #16
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	3301      	adds	r3, #1
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003e28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e32:	e002      	b.n	8003e3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e34:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x184>)
 8003e36:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3740      	adds	r7, #64	; 0x40
 8003e40:	46bd      	mov	sp, r7
 8003e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e46:	bf00      	nop
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	00f42400 	.word	0x00f42400
 8003e50:	017d7840 	.word	0x017d7840

08003e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e58:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	20000084 	.word	0x20000084

08003e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e70:	f7ff fff0 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8003e74:	4602      	mov	r2, r0
 8003e76:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	0a9b      	lsrs	r3, r3, #10
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	4903      	ldr	r1, [pc, #12]	; (8003e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e82:	5ccb      	ldrb	r3, [r1, r3]
 8003e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	08010c6c 	.word	0x08010c6c

08003e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e98:	f7ff ffdc 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	0b5b      	lsrs	r3, r3, #13
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	4903      	ldr	r1, [pc, #12]	; (8003eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eaa:	5ccb      	ldrb	r3, [r1, r3]
 8003eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	08010c6c 	.word	0x08010c6c

08003ebc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e07b      	b.n	8003fc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d108      	bne.n	8003ee8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ede:	d009      	beq.n	8003ef4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	61da      	str	r2, [r3, #28]
 8003ee6:	e005      	b.n	8003ef4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fe fb8e 	bl	8002630 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f78:	ea42 0103 	orr.w	r1, r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	0c1b      	lsrs	r3, r3, #16
 8003f92:	f003 0104 	and.w	r1, r3, #4
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	f003 0210 	and.w	r2, r3, #16
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	69da      	ldr	r2, [r3, #28]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b08c      	sub	sp, #48	; 0x30
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	607a      	str	r2, [r7, #4]
 8003fda:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_SPI_TransmitReceive+0x26>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e18a      	b.n	800430a <HAL_SPI_TransmitReceive+0x33c>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ffc:	f7fe fe64 	bl	8002cc8 <HAL_GetTick>
 8004000:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004008:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004012:	887b      	ldrh	r3, [r7, #2]
 8004014:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004016:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800401a:	2b01      	cmp	r3, #1
 800401c:	d00f      	beq.n	800403e <HAL_SPI_TransmitReceive+0x70>
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004024:	d107      	bne.n	8004036 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d103      	bne.n	8004036 <HAL_SPI_TransmitReceive+0x68>
 800402e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004032:	2b04      	cmp	r3, #4
 8004034:	d003      	beq.n	800403e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004036:	2302      	movs	r3, #2
 8004038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800403c:	e15b      	b.n	80042f6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_SPI_TransmitReceive+0x82>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_SPI_TransmitReceive+0x82>
 800404a:	887b      	ldrh	r3, [r7, #2]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d103      	bne.n	8004058 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004056:	e14e      	b.n	80042f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b04      	cmp	r3, #4
 8004062:	d003      	beq.n	800406c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2205      	movs	r2, #5
 8004068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	887a      	ldrh	r2, [r7, #2]
 800407c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	887a      	ldrh	r2, [r7, #2]
 8004082:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	887a      	ldrh	r2, [r7, #2]
 800408e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	887a      	ldrh	r2, [r7, #2]
 8004094:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	d007      	beq.n	80040c0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040c8:	d178      	bne.n	80041bc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <HAL_SPI_TransmitReceive+0x10a>
 80040d2:	8b7b      	ldrh	r3, [r7, #26]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d166      	bne.n	80041a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	881a      	ldrh	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e8:	1c9a      	adds	r2, r3, #2
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040fc:	e053      	b.n	80041a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b02      	cmp	r3, #2
 800410a:	d11b      	bne.n	8004144 <HAL_SPI_TransmitReceive+0x176>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d016      	beq.n	8004144 <HAL_SPI_TransmitReceive+0x176>
 8004116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004118:	2b01      	cmp	r3, #1
 800411a:	d113      	bne.n	8004144 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004120:	881a      	ldrh	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412c:	1c9a      	adds	r2, r3, #2
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b01      	cmp	r3, #1
 8004150:	d119      	bne.n	8004186 <HAL_SPI_TransmitReceive+0x1b8>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d014      	beq.n	8004186 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	b292      	uxth	r2, r2
 8004168:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416e:	1c9a      	adds	r2, r3, #2
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004182:	2301      	movs	r3, #1
 8004184:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004186:	f7fe fd9f 	bl	8002cc8 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004192:	429a      	cmp	r2, r3
 8004194:	d807      	bhi.n	80041a6 <HAL_SPI_TransmitReceive+0x1d8>
 8004196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419c:	d003      	beq.n	80041a6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80041a4:	e0a7      	b.n	80042f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1a6      	bne.n	80040fe <HAL_SPI_TransmitReceive+0x130>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1a1      	bne.n	80040fe <HAL_SPI_TransmitReceive+0x130>
 80041ba:	e07c      	b.n	80042b6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <HAL_SPI_TransmitReceive+0x1fc>
 80041c4:	8b7b      	ldrh	r3, [r7, #26]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d16b      	bne.n	80042a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	330c      	adds	r3, #12
 80041d4:	7812      	ldrb	r2, [r2, #0]
 80041d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041f0:	e057      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d11c      	bne.n	800423a <HAL_SPI_TransmitReceive+0x26c>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d017      	beq.n	800423a <HAL_SPI_TransmitReceive+0x26c>
 800420a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420c:	2b01      	cmp	r3, #1
 800420e:	d114      	bne.n	800423a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	330c      	adds	r3, #12
 800421a:	7812      	ldrb	r2, [r2, #0]
 800421c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d119      	bne.n	800427c <HAL_SPI_TransmitReceive+0x2ae>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d014      	beq.n	800427c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68da      	ldr	r2, [r3, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800426e:	b29b      	uxth	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004278:	2301      	movs	r3, #1
 800427a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800427c:	f7fe fd24 	bl	8002cc8 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004288:	429a      	cmp	r2, r3
 800428a:	d803      	bhi.n	8004294 <HAL_SPI_TransmitReceive+0x2c6>
 800428c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004292:	d102      	bne.n	800429a <HAL_SPI_TransmitReceive+0x2cc>
 8004294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004296:	2b00      	cmp	r3, #0
 8004298:	d103      	bne.n	80042a2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80042a0:	e029      	b.n	80042f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1a2      	bne.n	80041f2 <HAL_SPI_TransmitReceive+0x224>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d19d      	bne.n	80041f2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f8b2 	bl	8004424 <SPI_EndRxTxTransaction>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d006      	beq.n	80042d4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80042d2:	e010      	b.n	80042f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10b      	bne.n	80042f4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	e000      	b.n	80042f6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80042f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004306:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800430a:	4618      	mov	r0, r3
 800430c:	3730      	adds	r7, #48	; 0x30
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b088      	sub	sp, #32
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	4613      	mov	r3, r2
 8004322:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004324:	f7fe fcd0 	bl	8002cc8 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	1a9b      	subs	r3, r3, r2
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	4413      	add	r3, r2
 8004332:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004334:	f7fe fcc8 	bl	8002cc8 <HAL_GetTick>
 8004338:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800433a:	4b39      	ldr	r3, [pc, #228]	; (8004420 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	015b      	lsls	r3, r3, #5
 8004340:	0d1b      	lsrs	r3, r3, #20
 8004342:	69fa      	ldr	r2, [r7, #28]
 8004344:	fb02 f303 	mul.w	r3, r2, r3
 8004348:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800434a:	e054      	b.n	80043f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004352:	d050      	beq.n	80043f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004354:	f7fe fcb8 	bl	8002cc8 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	69fa      	ldr	r2, [r7, #28]
 8004360:	429a      	cmp	r2, r3
 8004362:	d902      	bls.n	800436a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d13d      	bne.n	80043e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004378:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004382:	d111      	bne.n	80043a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800438c:	d004      	beq.n	8004398 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004396:	d107      	bne.n	80043a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b0:	d10f      	bne.n	80043d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e017      	b.n	8004416 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4013      	ands	r3, r2
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	429a      	cmp	r2, r3
 8004404:	bf0c      	ite	eq
 8004406:	2301      	moveq	r3, #1
 8004408:	2300      	movne	r3, #0
 800440a:	b2db      	uxtb	r3, r3
 800440c:	461a      	mov	r2, r3
 800440e:	79fb      	ldrb	r3, [r7, #7]
 8004410:	429a      	cmp	r2, r3
 8004412:	d19b      	bne.n	800434c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3720      	adds	r7, #32
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	20000084 	.word	0x20000084

08004424 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af02      	add	r7, sp, #8
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004430:	4b1b      	ldr	r3, [pc, #108]	; (80044a0 <SPI_EndRxTxTransaction+0x7c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a1b      	ldr	r2, [pc, #108]	; (80044a4 <SPI_EndRxTxTransaction+0x80>)
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	0d5b      	lsrs	r3, r3, #21
 800443c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004440:	fb02 f303 	mul.w	r3, r2, r3
 8004444:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800444e:	d112      	bne.n	8004476 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2200      	movs	r2, #0
 8004458:	2180      	movs	r1, #128	; 0x80
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f7ff ff5a 	bl	8004314 <SPI_WaitFlagStateUntilTimeout>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d016      	beq.n	8004494 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446a:	f043 0220 	orr.w	r2, r3, #32
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e00f      	b.n	8004496 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	3b01      	subs	r3, #1
 8004480:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448c:	2b80      	cmp	r3, #128	; 0x80
 800448e:	d0f2      	beq.n	8004476 <SPI_EndRxTxTransaction+0x52>
 8004490:	e000      	b.n	8004494 <SPI_EndRxTxTransaction+0x70>
        break;
 8004492:	bf00      	nop
  }

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000084 	.word	0x20000084
 80044a4:	165e9f81 	.word	0x165e9f81

080044a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e041      	b.n	800453e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fe f8f6 	bl	80026c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3304      	adds	r3, #4
 80044e4:	4619      	mov	r1, r3
 80044e6:	4610      	mov	r0, r2
 80044e8:	f000 fce4 	bl	8004eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b082      	sub	sp, #8
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e041      	b.n	80045dc <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d106      	bne.n	8004572 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f839 	bl	80045e4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2202      	movs	r2, #2
 8004576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3304      	adds	r3, #4
 8004582:	4619      	mov	r1, r3
 8004584:	4610      	mov	r0, r2
 8004586:	f000 fc95 	bl	8004eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d109      	bne.n	8004620 <HAL_TIM_OC_Start_IT+0x28>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b01      	cmp	r3, #1
 8004616:	bf14      	ite	ne
 8004618:	2301      	movne	r3, #1
 800461a:	2300      	moveq	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	e022      	b.n	8004666 <HAL_TIM_OC_Start_IT+0x6e>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	2b04      	cmp	r3, #4
 8004624:	d109      	bne.n	800463a <HAL_TIM_OC_Start_IT+0x42>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b01      	cmp	r3, #1
 8004630:	bf14      	ite	ne
 8004632:	2301      	movne	r3, #1
 8004634:	2300      	moveq	r3, #0
 8004636:	b2db      	uxtb	r3, r3
 8004638:	e015      	b.n	8004666 <HAL_TIM_OC_Start_IT+0x6e>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b08      	cmp	r3, #8
 800463e:	d109      	bne.n	8004654 <HAL_TIM_OC_Start_IT+0x5c>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b01      	cmp	r3, #1
 800464a:	bf14      	ite	ne
 800464c:	2301      	movne	r3, #1
 800464e:	2300      	moveq	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	e008      	b.n	8004666 <HAL_TIM_OC_Start_IT+0x6e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b01      	cmp	r3, #1
 800465e:	bf14      	ite	ne
 8004660:	2301      	movne	r3, #1
 8004662:	2300      	moveq	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e0b3      	b.n	80047d6 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d104      	bne.n	800467e <HAL_TIM_OC_Start_IT+0x86>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800467c:	e013      	b.n	80046a6 <HAL_TIM_OC_Start_IT+0xae>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b04      	cmp	r3, #4
 8004682:	d104      	bne.n	800468e <HAL_TIM_OC_Start_IT+0x96>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800468c:	e00b      	b.n	80046a6 <HAL_TIM_OC_Start_IT+0xae>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b08      	cmp	r3, #8
 8004692:	d104      	bne.n	800469e <HAL_TIM_OC_Start_IT+0xa6>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800469c:	e003      	b.n	80046a6 <HAL_TIM_OC_Start_IT+0xae>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2202      	movs	r2, #2
 80046a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b0c      	cmp	r3, #12
 80046aa:	d841      	bhi.n	8004730 <HAL_TIM_OC_Start_IT+0x138>
 80046ac:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <HAL_TIM_OC_Start_IT+0xbc>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	080046e9 	.word	0x080046e9
 80046b8:	08004731 	.word	0x08004731
 80046bc:	08004731 	.word	0x08004731
 80046c0:	08004731 	.word	0x08004731
 80046c4:	080046fb 	.word	0x080046fb
 80046c8:	08004731 	.word	0x08004731
 80046cc:	08004731 	.word	0x08004731
 80046d0:	08004731 	.word	0x08004731
 80046d4:	0800470d 	.word	0x0800470d
 80046d8:	08004731 	.word	0x08004731
 80046dc:	08004731 	.word	0x08004731
 80046e0:	08004731 	.word	0x08004731
 80046e4:	0800471f 	.word	0x0800471f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0202 	orr.w	r2, r2, #2
 80046f6:	60da      	str	r2, [r3, #12]
      break;
 80046f8:	e01d      	b.n	8004736 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0204 	orr.w	r2, r2, #4
 8004708:	60da      	str	r2, [r3, #12]
      break;
 800470a:	e014      	b.n	8004736 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0208 	orr.w	r2, r2, #8
 800471a:	60da      	str	r2, [r3, #12]
      break;
 800471c:	e00b      	b.n	8004736 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f042 0210 	orr.w	r2, r2, #16
 800472c:	60da      	str	r2, [r3, #12]
      break;
 800472e:	e002      	b.n	8004736 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	73fb      	strb	r3, [r7, #15]
      break;
 8004734:	bf00      	nop
  }

  if (status == HAL_OK)
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d14b      	bne.n	80047d4 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2201      	movs	r2, #1
 8004742:	6839      	ldr	r1, [r7, #0]
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fe5b 	bl	8005400 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a24      	ldr	r2, [pc, #144]	; (80047e0 <HAL_TIM_OC_Start_IT+0x1e8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d107      	bne.n	8004764 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004762:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a1d      	ldr	r2, [pc, #116]	; (80047e0 <HAL_TIM_OC_Start_IT+0x1e8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d018      	beq.n	80047a0 <HAL_TIM_OC_Start_IT+0x1a8>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004776:	d013      	beq.n	80047a0 <HAL_TIM_OC_Start_IT+0x1a8>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a19      	ldr	r2, [pc, #100]	; (80047e4 <HAL_TIM_OC_Start_IT+0x1ec>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00e      	beq.n	80047a0 <HAL_TIM_OC_Start_IT+0x1a8>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a18      	ldr	r2, [pc, #96]	; (80047e8 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d009      	beq.n	80047a0 <HAL_TIM_OC_Start_IT+0x1a8>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a16      	ldr	r2, [pc, #88]	; (80047ec <HAL_TIM_OC_Start_IT+0x1f4>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d004      	beq.n	80047a0 <HAL_TIM_OC_Start_IT+0x1a8>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a15      	ldr	r2, [pc, #84]	; (80047f0 <HAL_TIM_OC_Start_IT+0x1f8>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d111      	bne.n	80047c4 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b06      	cmp	r3, #6
 80047b0:	d010      	beq.n	80047d4 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0201 	orr.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c2:	e007      	b.n	80047d4 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40010000 	.word	0x40010000
 80047e4:	40000400 	.word	0x40000400
 80047e8:	40000800 	.word	0x40000800
 80047ec:	40000c00 	.word	0x40000c00
 80047f0:	40014000 	.word	0x40014000

080047f4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b0c      	cmp	r3, #12
 8004806:	d841      	bhi.n	800488c <HAL_TIM_OC_Stop_IT+0x98>
 8004808:	a201      	add	r2, pc, #4	; (adr r2, 8004810 <HAL_TIM_OC_Stop_IT+0x1c>)
 800480a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480e:	bf00      	nop
 8004810:	08004845 	.word	0x08004845
 8004814:	0800488d 	.word	0x0800488d
 8004818:	0800488d 	.word	0x0800488d
 800481c:	0800488d 	.word	0x0800488d
 8004820:	08004857 	.word	0x08004857
 8004824:	0800488d 	.word	0x0800488d
 8004828:	0800488d 	.word	0x0800488d
 800482c:	0800488d 	.word	0x0800488d
 8004830:	08004869 	.word	0x08004869
 8004834:	0800488d 	.word	0x0800488d
 8004838:	0800488d 	.word	0x0800488d
 800483c:	0800488d 	.word	0x0800488d
 8004840:	0800487b 	.word	0x0800487b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0202 	bic.w	r2, r2, #2
 8004852:	60da      	str	r2, [r3, #12]
      break;
 8004854:	e01d      	b.n	8004892 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0204 	bic.w	r2, r2, #4
 8004864:	60da      	str	r2, [r3, #12]
      break;
 8004866:	e014      	b.n	8004892 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0208 	bic.w	r2, r2, #8
 8004876:	60da      	str	r2, [r3, #12]
      break;
 8004878:	e00b      	b.n	8004892 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0210 	bic.w	r2, r2, #16
 8004888:	60da      	str	r2, [r3, #12]
      break;
 800488a:	e002      	b.n	8004892 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
      break;
 8004890:	bf00      	nop
  }

  if (status == HAL_OK)
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d157      	bne.n	8004948 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2200      	movs	r2, #0
 800489e:	6839      	ldr	r1, [r7, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fdad 	bl	8005400 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a2a      	ldr	r2, [pc, #168]	; (8004954 <HAL_TIM_OC_Stop_IT+0x160>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d117      	bne.n	80048e0 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6a1a      	ldr	r2, [r3, #32]
 80048b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80048ba:	4013      	ands	r3, r2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10f      	bne.n	80048e0 <HAL_TIM_OC_Stop_IT+0xec>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6a1a      	ldr	r2, [r3, #32]
 80048c6:	f240 4344 	movw	r3, #1092	; 0x444
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d107      	bne.n	80048e0 <HAL_TIM_OC_Stop_IT+0xec>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048de:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6a1a      	ldr	r2, [r3, #32]
 80048e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10f      	bne.n	8004910 <HAL_TIM_OC_Stop_IT+0x11c>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6a1a      	ldr	r2, [r3, #32]
 80048f6:	f240 4344 	movw	r3, #1092	; 0x444
 80048fa:	4013      	ands	r3, r2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d107      	bne.n	8004910 <HAL_TIM_OC_Stop_IT+0x11c>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0201 	bic.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d104      	bne.n	8004920 <HAL_TIM_OC_Stop_IT+0x12c>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800491e:	e013      	b.n	8004948 <HAL_TIM_OC_Stop_IT+0x154>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2b04      	cmp	r3, #4
 8004924:	d104      	bne.n	8004930 <HAL_TIM_OC_Stop_IT+0x13c>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800492e:	e00b      	b.n	8004948 <HAL_TIM_OC_Stop_IT+0x154>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b08      	cmp	r3, #8
 8004934:	d104      	bne.n	8004940 <HAL_TIM_OC_Stop_IT+0x14c>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800493e:	e003      	b.n	8004948 <HAL_TIM_OC_Stop_IT+0x154>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004948:	7bfb      	ldrb	r3, [r7, #15]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40010000 	.word	0x40010000

08004958 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e041      	b.n	80049f0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d106      	bne.n	8004986 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f839 	bl	80049f8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2202      	movs	r2, #2
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3304      	adds	r3, #4
 8004996:	4619      	mov	r1, r3
 8004998:	4610      	mov	r0, r2
 800499a:	f000 fa8b 	bl	8004eb4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0208 	bic.w	r2, r2, #8
 80049ac:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6819      	ldr	r1, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d122      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d11b      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0202 	mvn.w	r2, #2
 8004a38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fa11 	bl	8004e76 <HAL_TIM_IC_CaptureCallback>
 8004a54:	e005      	b.n	8004a62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7fd fc3c 	bl	80022d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fa14 	bl	8004e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d122      	bne.n	8004abc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d11b      	bne.n	8004abc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0204 	mvn.w	r2, #4
 8004a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2202      	movs	r2, #2
 8004a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f9e7 	bl	8004e76 <HAL_TIM_IC_CaptureCallback>
 8004aa8:	e005      	b.n	8004ab6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fd fc12 	bl	80022d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f9ea 	bl	8004e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d122      	bne.n	8004b10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d11b      	bne.n	8004b10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0208 	mvn.w	r2, #8
 8004ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f9bd 	bl	8004e76 <HAL_TIM_IC_CaptureCallback>
 8004afc:	e005      	b.n	8004b0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fd fbe8 	bl	80022d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f9c0 	bl	8004e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f003 0310 	and.w	r3, r3, #16
 8004b1a:	2b10      	cmp	r3, #16
 8004b1c:	d122      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b10      	cmp	r3, #16
 8004b2a:	d11b      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f06f 0210 	mvn.w	r2, #16
 8004b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2208      	movs	r2, #8
 8004b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f993 	bl	8004e76 <HAL_TIM_IC_CaptureCallback>
 8004b50:	e005      	b.n	8004b5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fd fbbe 	bl	80022d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f996 	bl	8004e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d10e      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d107      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0201 	mvn.w	r2, #1
 8004b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f969 	bl	8004e62 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9a:	2b80      	cmp	r3, #128	; 0x80
 8004b9c:	d10e      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba8:	2b80      	cmp	r3, #128	; 0x80
 8004baa:	d107      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fcc0 	bl	800553c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc6:	2b40      	cmp	r3, #64	; 0x40
 8004bc8:	d10e      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd4:	2b40      	cmp	r3, #64	; 0x40
 8004bd6:	d107      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f95b 	bl	8004e9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	d10e      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d107      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0220 	mvn.w	r2, #32
 8004c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fc8a 	bl	8005528 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c14:	bf00      	nop
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_TIM_OC_ConfigChannel+0x1e>
 8004c36:	2302      	movs	r3, #2
 8004c38:	e048      	b.n	8004ccc <HAL_TIM_OC_ConfigChannel+0xb0>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b0c      	cmp	r3, #12
 8004c46:	d839      	bhi.n	8004cbc <HAL_TIM_OC_ConfigChannel+0xa0>
 8004c48:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4e:	bf00      	nop
 8004c50:	08004c85 	.word	0x08004c85
 8004c54:	08004cbd 	.word	0x08004cbd
 8004c58:	08004cbd 	.word	0x08004cbd
 8004c5c:	08004cbd 	.word	0x08004cbd
 8004c60:	08004c93 	.word	0x08004c93
 8004c64:	08004cbd 	.word	0x08004cbd
 8004c68:	08004cbd 	.word	0x08004cbd
 8004c6c:	08004cbd 	.word	0x08004cbd
 8004c70:	08004ca1 	.word	0x08004ca1
 8004c74:	08004cbd 	.word	0x08004cbd
 8004c78:	08004cbd 	.word	0x08004cbd
 8004c7c:	08004cbd 	.word	0x08004cbd
 8004c80:	08004caf 	.word	0x08004caf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68b9      	ldr	r1, [r7, #8]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 f992 	bl	8004fb4 <TIM_OC1_SetConfig>
      break;
 8004c90:	e017      	b.n	8004cc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68b9      	ldr	r1, [r7, #8]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 f9f1 	bl	8005080 <TIM_OC2_SetConfig>
      break;
 8004c9e:	e010      	b.n	8004cc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68b9      	ldr	r1, [r7, #8]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fa56 	bl	8005158 <TIM_OC3_SetConfig>
      break;
 8004cac:	e009      	b.n	8004cc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fab9 	bl	800522c <TIM_OC4_SetConfig>
      break;
 8004cba:	e002      	b.n	8004cc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8004cc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3718      	adds	r7, #24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_TIM_ConfigClockSource+0x1c>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e0b4      	b.n	8004e5a <HAL_TIM_ConfigClockSource+0x186>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d28:	d03e      	beq.n	8004da8 <HAL_TIM_ConfigClockSource+0xd4>
 8004d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d2e:	f200 8087 	bhi.w	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d36:	f000 8086 	beq.w	8004e46 <HAL_TIM_ConfigClockSource+0x172>
 8004d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d3e:	d87f      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d40:	2b70      	cmp	r3, #112	; 0x70
 8004d42:	d01a      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0xa6>
 8004d44:	2b70      	cmp	r3, #112	; 0x70
 8004d46:	d87b      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d48:	2b60      	cmp	r3, #96	; 0x60
 8004d4a:	d050      	beq.n	8004dee <HAL_TIM_ConfigClockSource+0x11a>
 8004d4c:	2b60      	cmp	r3, #96	; 0x60
 8004d4e:	d877      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d50:	2b50      	cmp	r3, #80	; 0x50
 8004d52:	d03c      	beq.n	8004dce <HAL_TIM_ConfigClockSource+0xfa>
 8004d54:	2b50      	cmp	r3, #80	; 0x50
 8004d56:	d873      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d58:	2b40      	cmp	r3, #64	; 0x40
 8004d5a:	d058      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x13a>
 8004d5c:	2b40      	cmp	r3, #64	; 0x40
 8004d5e:	d86f      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d60:	2b30      	cmp	r3, #48	; 0x30
 8004d62:	d064      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x15a>
 8004d64:	2b30      	cmp	r3, #48	; 0x30
 8004d66:	d86b      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d060      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x15a>
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	d867      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d05c      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x15a>
 8004d74:	2b10      	cmp	r3, #16
 8004d76:	d05a      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x15a>
 8004d78:	e062      	b.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	6899      	ldr	r1, [r3, #8]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f000 fb19 	bl	80053c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	609a      	str	r2, [r3, #8]
      break;
 8004da6:	e04f      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6818      	ldr	r0, [r3, #0]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	6899      	ldr	r1, [r3, #8]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f000 fb02 	bl	80053c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dca:	609a      	str	r2, [r3, #8]
      break;
 8004dcc:	e03c      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	6859      	ldr	r1, [r3, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f000 fa76 	bl	80052cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2150      	movs	r1, #80	; 0x50
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 facf 	bl	800538a <TIM_ITRx_SetConfig>
      break;
 8004dec:	e02c      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	6859      	ldr	r1, [r3, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f000 fa95 	bl	800532a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2160      	movs	r1, #96	; 0x60
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fabf 	bl	800538a <TIM_ITRx_SetConfig>
      break;
 8004e0c:	e01c      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	6859      	ldr	r1, [r3, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f000 fa56 	bl	80052cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2140      	movs	r1, #64	; 0x40
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 faaf 	bl	800538a <TIM_ITRx_SetConfig>
      break;
 8004e2c:	e00c      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4619      	mov	r1, r3
 8004e38:	4610      	mov	r0, r2
 8004e3a:	f000 faa6 	bl	800538a <TIM_ITRx_SetConfig>
      break;
 8004e3e:	e003      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	73fb      	strb	r3, [r7, #15]
      break;
 8004e44:	e000      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
	...

08004eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a34      	ldr	r2, [pc, #208]	; (8004f98 <TIM_Base_SetConfig+0xe4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00f      	beq.n	8004eec <TIM_Base_SetConfig+0x38>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed2:	d00b      	beq.n	8004eec <TIM_Base_SetConfig+0x38>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a31      	ldr	r2, [pc, #196]	; (8004f9c <TIM_Base_SetConfig+0xe8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d007      	beq.n	8004eec <TIM_Base_SetConfig+0x38>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a30      	ldr	r2, [pc, #192]	; (8004fa0 <TIM_Base_SetConfig+0xec>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d003      	beq.n	8004eec <TIM_Base_SetConfig+0x38>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a2f      	ldr	r2, [pc, #188]	; (8004fa4 <TIM_Base_SetConfig+0xf0>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d108      	bne.n	8004efe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a25      	ldr	r2, [pc, #148]	; (8004f98 <TIM_Base_SetConfig+0xe4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d01b      	beq.n	8004f3e <TIM_Base_SetConfig+0x8a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0c:	d017      	beq.n	8004f3e <TIM_Base_SetConfig+0x8a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a22      	ldr	r2, [pc, #136]	; (8004f9c <TIM_Base_SetConfig+0xe8>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d013      	beq.n	8004f3e <TIM_Base_SetConfig+0x8a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a21      	ldr	r2, [pc, #132]	; (8004fa0 <TIM_Base_SetConfig+0xec>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00f      	beq.n	8004f3e <TIM_Base_SetConfig+0x8a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a20      	ldr	r2, [pc, #128]	; (8004fa4 <TIM_Base_SetConfig+0xf0>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00b      	beq.n	8004f3e <TIM_Base_SetConfig+0x8a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a1f      	ldr	r2, [pc, #124]	; (8004fa8 <TIM_Base_SetConfig+0xf4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d007      	beq.n	8004f3e <TIM_Base_SetConfig+0x8a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a1e      	ldr	r2, [pc, #120]	; (8004fac <TIM_Base_SetConfig+0xf8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d003      	beq.n	8004f3e <TIM_Base_SetConfig+0x8a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a1d      	ldr	r2, [pc, #116]	; (8004fb0 <TIM_Base_SetConfig+0xfc>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d108      	bne.n	8004f50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a08      	ldr	r2, [pc, #32]	; (8004f98 <TIM_Base_SetConfig+0xe4>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d103      	bne.n	8004f84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	615a      	str	r2, [r3, #20]
}
 8004f8a:	bf00      	nop
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40010000 	.word	0x40010000
 8004f9c:	40000400 	.word	0x40000400
 8004fa0:	40000800 	.word	0x40000800
 8004fa4:	40000c00 	.word	0x40000c00
 8004fa8:	40014000 	.word	0x40014000
 8004fac:	40014400 	.word	0x40014400
 8004fb0:	40014800 	.word	0x40014800

08004fb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	f023 0201 	bic.w	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0303 	bic.w	r3, r3, #3
 8004fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f023 0302 	bic.w	r3, r3, #2
 8004ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a1c      	ldr	r2, [pc, #112]	; (800507c <TIM_OC1_SetConfig+0xc8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d10c      	bne.n	800502a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f023 0308 	bic.w	r3, r3, #8
 8005016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f023 0304 	bic.w	r3, r3, #4
 8005028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a13      	ldr	r2, [pc, #76]	; (800507c <TIM_OC1_SetConfig+0xc8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d111      	bne.n	8005056 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	621a      	str	r2, [r3, #32]
}
 8005070:	bf00      	nop
 8005072:	371c      	adds	r7, #28
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	40010000 	.word	0x40010000

08005080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	f023 0210 	bic.w	r2, r3, #16
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f023 0320 	bic.w	r3, r3, #32
 80050ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a1e      	ldr	r2, [pc, #120]	; (8005154 <TIM_OC2_SetConfig+0xd4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d10d      	bne.n	80050fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a15      	ldr	r2, [pc, #84]	; (8005154 <TIM_OC2_SetConfig+0xd4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d113      	bne.n	800512c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800510a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005112:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	621a      	str	r2, [r3, #32]
}
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40010000 	.word	0x40010000

08005158 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0303 	bic.w	r3, r3, #3
 800518e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	021b      	lsls	r3, r3, #8
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a1d      	ldr	r2, [pc, #116]	; (8005228 <TIM_OC3_SetConfig+0xd0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d10d      	bne.n	80051d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	021b      	lsls	r3, r3, #8
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a14      	ldr	r2, [pc, #80]	; (8005228 <TIM_OC3_SetConfig+0xd0>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d113      	bne.n	8005202 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	4313      	orrs	r3, r2
 8005200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	621a      	str	r2, [r3, #32]
}
 800521c:	bf00      	nop
 800521e:	371c      	adds	r7, #28
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	40010000 	.word	0x40010000

0800522c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800525a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	021b      	lsls	r3, r3, #8
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	4313      	orrs	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	031b      	lsls	r3, r3, #12
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a10      	ldr	r2, [pc, #64]	; (80052c8 <TIM_OC4_SetConfig+0x9c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d109      	bne.n	80052a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005292:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	019b      	lsls	r3, r3, #6
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	621a      	str	r2, [r3, #32]
}
 80052ba:	bf00      	nop
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40010000 	.word	0x40010000

080052cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	f023 0201 	bic.w	r2, r3, #1
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f023 030a 	bic.w	r3, r3, #10
 8005308:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	621a      	str	r2, [r3, #32]
}
 800531e:	bf00      	nop
 8005320:	371c      	adds	r7, #28
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800532a:	b480      	push	{r7}
 800532c:	b087      	sub	sp, #28
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f023 0210 	bic.w	r2, r3, #16
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005354:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	031b      	lsls	r3, r3, #12
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005366:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	621a      	str	r2, [r3, #32]
}
 800537e:	bf00      	nop
 8005380:	371c      	adds	r7, #28
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800538a:	b480      	push	{r7}
 800538c:	b085      	sub	sp, #20
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f043 0307 	orr.w	r3, r3, #7
 80053ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	609a      	str	r2, [r3, #8]
}
 80053b4:	bf00      	nop
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	021a      	lsls	r2, r3, #8
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	431a      	orrs	r2, r3
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	609a      	str	r2, [r3, #8]
}
 80053f4:	bf00      	nop
 80053f6:	371c      	adds	r7, #28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f003 031f 	and.w	r3, r3, #31
 8005412:	2201      	movs	r2, #1
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a1a      	ldr	r2, [r3, #32]
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	43db      	mvns	r3, r3
 8005422:	401a      	ands	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a1a      	ldr	r2, [r3, #32]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f003 031f 	and.w	r3, r3, #31
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	fa01 f303 	lsl.w	r3, r1, r3
 8005438:	431a      	orrs	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	621a      	str	r2, [r3, #32]
}
 800543e:	bf00      	nop
 8005440:	371c      	adds	r7, #28
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
	...

0800544c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005460:	2302      	movs	r3, #2
 8005462:	e050      	b.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1c      	ldr	r2, [pc, #112]	; (8005514 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d018      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b0:	d013      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a18      	ldr	r2, [pc, #96]	; (8005518 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00e      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a16      	ldr	r2, [pc, #88]	; (800551c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d009      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a15      	ldr	r2, [pc, #84]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d004      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a13      	ldr	r2, [pc, #76]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d10c      	bne.n	80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40010000 	.word	0x40010000
 8005518:	40000400 	.word	0x40000400
 800551c:	40000800 	.word	0x40000800
 8005520:	40000c00 	.word	0x40000c00
 8005524:	40014000 	.word	0x40014000

08005528 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e03f      	b.n	80055e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7fd f8e6 	bl	8002748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2224      	movs	r2, #36	; 0x24
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68da      	ldr	r2, [r3, #12]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005592:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fe49 	bl	800622c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695a      	ldr	r2, [r3, #20]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b082      	sub	sp, #8
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e021      	b.n	8005640 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2224      	movs	r2, #36	; 0x24
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005612:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7fd f959 	bl	80028cc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b08a      	sub	sp, #40	; 0x28
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	4613      	mov	r3, r2
 8005656:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b20      	cmp	r3, #32
 8005666:	d17c      	bne.n	8005762 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <HAL_UART_Transmit+0x2c>
 800566e:	88fb      	ldrh	r3, [r7, #6]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e075      	b.n	8005764 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800567e:	2b01      	cmp	r3, #1
 8005680:	d101      	bne.n	8005686 <HAL_UART_Transmit+0x3e>
 8005682:	2302      	movs	r3, #2
 8005684:	e06e      	b.n	8005764 <HAL_UART_Transmit+0x11c>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2221      	movs	r2, #33	; 0x21
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800569c:	f7fd fb14 	bl	8002cc8 <HAL_GetTick>
 80056a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	88fa      	ldrh	r2, [r7, #6]
 80056a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	88fa      	ldrh	r2, [r7, #6]
 80056ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b6:	d108      	bne.n	80056ca <HAL_UART_Transmit+0x82>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d104      	bne.n	80056ca <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80056c0:	2300      	movs	r3, #0
 80056c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	61bb      	str	r3, [r7, #24]
 80056c8:	e003      	b.n	80056d2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80056da:	e02a      	b.n	8005732 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2200      	movs	r2, #0
 80056e4:	2180      	movs	r1, #128	; 0x80
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 fb5a 	bl	8005da0 <UART_WaitOnFlagUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e036      	b.n	8005764 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10b      	bne.n	8005714 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	461a      	mov	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800570a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	3302      	adds	r3, #2
 8005710:	61bb      	str	r3, [r7, #24]
 8005712:	e007      	b.n	8005724 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	781a      	ldrb	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	3301      	adds	r3, #1
 8005722:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005728:	b29b      	uxth	r3, r3
 800572a:	3b01      	subs	r3, #1
 800572c:	b29a      	uxth	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005736:	b29b      	uxth	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1cf      	bne.n	80056dc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	2200      	movs	r2, #0
 8005744:	2140      	movs	r1, #64	; 0x40
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 fb2a 	bl	8005da0 <UART_WaitOnFlagUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e006      	b.n	8005764 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2220      	movs	r2, #32
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	e000      	b.n	8005764 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005762:	2302      	movs	r3, #2
  }
}
 8005764:	4618      	mov	r0, r3
 8005766:	3720      	adds	r7, #32
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	4613      	mov	r3, r2
 8005778:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b20      	cmp	r3, #32
 8005784:	d130      	bne.n	80057e8 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <HAL_UART_Transmit_IT+0x26>
 800578c:	88fb      	ldrh	r3, [r7, #6]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e029      	b.n	80057ea <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800579c:	2b01      	cmp	r3, #1
 800579e:	d101      	bne.n	80057a4 <HAL_UART_Transmit_IT+0x38>
 80057a0:	2302      	movs	r3, #2
 80057a2:	e022      	b.n	80057ea <HAL_UART_Transmit_IT+0x7e>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	88fa      	ldrh	r2, [r7, #6]
 80057b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2221      	movs	r2, #33	; 0x21
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057e2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	e000      	b.n	80057ea <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80057e8:	2302      	movs	r3, #2
  }
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	4613      	mov	r3, r2
 8005802:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b20      	cmp	r3, #32
 800580e:	d11d      	bne.n	800584c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <HAL_UART_Receive_IT+0x26>
 8005816:	88fb      	ldrh	r3, [r7, #6]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e016      	b.n	800584e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005826:	2b01      	cmp	r3, #1
 8005828:	d101      	bne.n	800582e <HAL_UART_Receive_IT+0x38>
 800582a:	2302      	movs	r3, #2
 800582c:	e00f      	b.n	800584e <HAL_UART_Receive_IT+0x58>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800583c:	88fb      	ldrh	r3, [r7, #6]
 800583e:	461a      	mov	r2, r3
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 fb1a 	bl	8005e7c <UART_Start_Receive_IT>
 8005848:	4603      	mov	r3, r0
 800584a:	e000      	b.n	800584e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800584c:	2302      	movs	r3, #2
  }
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b0ba      	sub	sp, #232	; 0xe8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800587e:	2300      	movs	r3, #0
 8005880:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005884:	2300      	movs	r3, #0
 8005886:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800588a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800588e:	f003 030f 	and.w	r3, r3, #15
 8005892:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10f      	bne.n	80058be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800589e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a2:	f003 0320 	and.w	r3, r3, #32
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d009      	beq.n	80058be <HAL_UART_IRQHandler+0x66>
 80058aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ae:	f003 0320 	and.w	r3, r3, #32
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fbfd 	bl	80060b6 <UART_Receive_IT>
      return;
 80058bc:	e256      	b.n	8005d6c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 80de 	beq.w	8005a84 <HAL_UART_IRQHandler+0x22c>
 80058c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d106      	bne.n	80058e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 80d1 	beq.w	8005a84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00b      	beq.n	8005906 <HAL_UART_IRQHandler+0xae>
 80058ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d005      	beq.n	8005906 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	f043 0201 	orr.w	r2, r3, #1
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800590a:	f003 0304 	and.w	r3, r3, #4
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00b      	beq.n	800592a <HAL_UART_IRQHandler+0xd2>
 8005912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	f043 0202 	orr.w	r2, r3, #2
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800592a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00b      	beq.n	800594e <HAL_UART_IRQHandler+0xf6>
 8005936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d005      	beq.n	800594e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	f043 0204 	orr.w	r2, r3, #4
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800594e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005952:	f003 0308 	and.w	r3, r3, #8
 8005956:	2b00      	cmp	r3, #0
 8005958:	d011      	beq.n	800597e <HAL_UART_IRQHandler+0x126>
 800595a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d105      	bne.n	8005972 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	d005      	beq.n	800597e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	f043 0208 	orr.w	r2, r3, #8
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 81ed 	beq.w	8005d62 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b00      	cmp	r3, #0
 8005992:	d008      	beq.n	80059a6 <HAL_UART_IRQHandler+0x14e>
 8005994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005998:	f003 0320 	and.w	r3, r3, #32
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fb88 	bl	80060b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b0:	2b40      	cmp	r3, #64	; 0x40
 80059b2:	bf0c      	ite	eq
 80059b4:	2301      	moveq	r3, #1
 80059b6:	2300      	movne	r3, #0
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	f003 0308 	and.w	r3, r3, #8
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d103      	bne.n	80059d2 <HAL_UART_IRQHandler+0x17a>
 80059ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d04f      	beq.n	8005a72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fa90 	bl	8005ef8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e2:	2b40      	cmp	r3, #64	; 0x40
 80059e4:	d141      	bne.n	8005a6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3314      	adds	r3, #20
 80059ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059f4:	e853 3f00 	ldrex	r3, [r3]
 80059f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3314      	adds	r3, #20
 8005a0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a22:	e841 2300 	strex	r3, r2, [r1]
 8005a26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1d9      	bne.n	80059e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d013      	beq.n	8005a62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3e:	4a7d      	ldr	r2, [pc, #500]	; (8005c34 <HAL_UART_IRQHandler+0x3dc>)
 8005a40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fd fb21 	bl	800308e <HAL_DMA_Abort_IT>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d016      	beq.n	8005a80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a60:	e00e      	b.n	8005a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fc fb66 	bl	8002134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a68:	e00a      	b.n	8005a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7fc fb62 	bl	8002134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a70:	e006      	b.n	8005a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7fc fb5e 	bl	8002134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a7e:	e170      	b.n	8005d62 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a80:	bf00      	nop
    return;
 8005a82:	e16e      	b.n	8005d62 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	f040 814a 	bne.w	8005d22 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 8143 	beq.w	8005d22 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aa0:	f003 0310 	and.w	r3, r3, #16
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 813c 	beq.w	8005d22 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60bb      	str	r3, [r7, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	60bb      	str	r3, [r7, #8]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	60bb      	str	r3, [r7, #8]
 8005abe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aca:	2b40      	cmp	r3, #64	; 0x40
 8005acc:	f040 80b4 	bne.w	8005c38 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005adc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 8140 	beq.w	8005d66 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005aea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005aee:	429a      	cmp	r2, r3
 8005af0:	f080 8139 	bcs.w	8005d66 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005afa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b06:	f000 8088 	beq.w	8005c1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	330c      	adds	r3, #12
 8005b10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b18:	e853 3f00 	ldrex	r3, [r3]
 8005b1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	330c      	adds	r3, #12
 8005b32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1d9      	bne.n	8005b0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3314      	adds	r3, #20
 8005b5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b60:	e853 3f00 	ldrex	r3, [r3]
 8005b64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b68:	f023 0301 	bic.w	r3, r3, #1
 8005b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3314      	adds	r3, #20
 8005b76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b86:	e841 2300 	strex	r3, r2, [r1]
 8005b8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1e1      	bne.n	8005b56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3314      	adds	r3, #20
 8005b98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b9c:	e853 3f00 	ldrex	r3, [r3]
 8005ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3314      	adds	r3, #20
 8005bb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005bb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005bb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005bbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e3      	bne.n	8005b92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	330c      	adds	r3, #12
 8005bde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be2:	e853 3f00 	ldrex	r3, [r3]
 8005be6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bea:	f023 0310 	bic.w	r3, r3, #16
 8005bee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	330c      	adds	r3, #12
 8005bf8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005bfc:	65ba      	str	r2, [r7, #88]	; 0x58
 8005bfe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c04:	e841 2300 	strex	r3, r2, [r1]
 8005c08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1e3      	bne.n	8005bd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7fd f9ca 	bl	8002fae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	4619      	mov	r1, r3
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f8ac 	bl	8005d88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c30:	e099      	b.n	8005d66 <HAL_UART_IRQHandler+0x50e>
 8005c32:	bf00      	nop
 8005c34:	08005fbf 	.word	0x08005fbf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 808b 	beq.w	8005d6a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 8086 	beq.w	8005d6a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	330c      	adds	r3, #12
 8005c64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	330c      	adds	r3, #12
 8005c7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c82:	647a      	str	r2, [r7, #68]	; 0x44
 8005c84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c8a:	e841 2300 	strex	r3, r2, [r1]
 8005c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e3      	bne.n	8005c5e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	3314      	adds	r3, #20
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	e853 3f00 	ldrex	r3, [r3]
 8005ca4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	f023 0301 	bic.w	r3, r3, #1
 8005cac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3314      	adds	r3, #20
 8005cb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005cba:	633a      	str	r2, [r7, #48]	; 0x30
 8005cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cc2:	e841 2300 	strex	r3, r2, [r1]
 8005cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1e3      	bne.n	8005c96 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	e853 3f00 	ldrex	r3, [r3]
 8005cea:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0310 	bic.w	r3, r3, #16
 8005cf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	330c      	adds	r3, #12
 8005cfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d00:	61fa      	str	r2, [r7, #28]
 8005d02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d04:	69b9      	ldr	r1, [r7, #24]
 8005d06:	69fa      	ldr	r2, [r7, #28]
 8005d08:	e841 2300 	strex	r3, r2, [r1]
 8005d0c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e3      	bne.n	8005cdc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d18:	4619      	mov	r1, r3
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f834 	bl	8005d88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d20:	e023      	b.n	8005d6a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d009      	beq.n	8005d42 <HAL_UART_IRQHandler+0x4ea>
 8005d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f953 	bl	8005fe6 <UART_Transmit_IT>
    return;
 8005d40:	e014      	b.n	8005d6c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00e      	beq.n	8005d6c <HAL_UART_IRQHandler+0x514>
 8005d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d008      	beq.n	8005d6c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f993 	bl	8006086 <UART_EndTransmit_IT>
    return;
 8005d60:	e004      	b.n	8005d6c <HAL_UART_IRQHandler+0x514>
    return;
 8005d62:	bf00      	nop
 8005d64:	e002      	b.n	8005d6c <HAL_UART_IRQHandler+0x514>
      return;
 8005d66:	bf00      	nop
 8005d68:	e000      	b.n	8005d6c <HAL_UART_IRQHandler+0x514>
      return;
 8005d6a:	bf00      	nop
  }
}
 8005d6c:	37e8      	adds	r7, #232	; 0xe8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop

08005d74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	460b      	mov	r3, r1
 8005d92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b090      	sub	sp, #64	; 0x40
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	4613      	mov	r3, r2
 8005dae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005db0:	e050      	b.n	8005e54 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db8:	d04c      	beq.n	8005e54 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d007      	beq.n	8005dd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dc0:	f7fc ff82 	bl	8002cc8 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d241      	bcs.n	8005e54 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	330c      	adds	r3, #12
 8005dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	e853 3f00 	ldrex	r3, [r3]
 8005dde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	330c      	adds	r3, #12
 8005dee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005df0:	637a      	str	r2, [r7, #52]	; 0x34
 8005df2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005df6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005df8:	e841 2300 	strex	r3, r2, [r1]
 8005dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1e5      	bne.n	8005dd0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3314      	adds	r3, #20
 8005e0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	e853 3f00 	ldrex	r3, [r3]
 8005e12:	613b      	str	r3, [r7, #16]
   return(result);
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	f023 0301 	bic.w	r3, r3, #1
 8005e1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3314      	adds	r3, #20
 8005e22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e24:	623a      	str	r2, [r7, #32]
 8005e26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	69f9      	ldr	r1, [r7, #28]
 8005e2a:	6a3a      	ldr	r2, [r7, #32]
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e5      	bne.n	8005e04 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e00f      	b.n	8005e74 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	bf0c      	ite	eq
 8005e64:	2301      	moveq	r3, #1
 8005e66:	2300      	movne	r3, #0
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	79fb      	ldrb	r3, [r7, #7]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d09f      	beq.n	8005db2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3740      	adds	r7, #64	; 0x40
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	4613      	mov	r3, r2
 8005e88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	88fa      	ldrh	r2, [r7, #6]
 8005e94:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	88fa      	ldrh	r2, [r7, #6]
 8005e9a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2222      	movs	r2, #34	; 0x22
 8005ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d007      	beq.n	8005eca <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ec8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695a      	ldr	r2, [r3, #20]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f042 0201 	orr.w	r2, r2, #1
 8005ed8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f042 0220 	orr.w	r2, r2, #32
 8005ee8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b095      	sub	sp, #84	; 0x54
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	330c      	adds	r3, #12
 8005f06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	330c      	adds	r3, #12
 8005f1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f20:	643a      	str	r2, [r7, #64]	; 0x40
 8005f22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e5      	bne.n	8005f00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3314      	adds	r3, #20
 8005f3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f023 0301 	bic.w	r3, r3, #1
 8005f4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3314      	adds	r3, #20
 8005f52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f5c:	e841 2300 	strex	r3, r2, [r1]
 8005f60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e5      	bne.n	8005f34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d119      	bne.n	8005fa4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	330c      	adds	r3, #12
 8005f76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	e853 3f00 	ldrex	r3, [r3]
 8005f7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f023 0310 	bic.w	r3, r3, #16
 8005f86:	647b      	str	r3, [r7, #68]	; 0x44
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	330c      	adds	r3, #12
 8005f8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f90:	61ba      	str	r2, [r7, #24]
 8005f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f94:	6979      	ldr	r1, [r7, #20]
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	e841 2300 	strex	r3, r2, [r1]
 8005f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1e5      	bne.n	8005f70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005fb2:	bf00      	nop
 8005fb4:	3754      	adds	r7, #84	; 0x54
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f7fc f8ab 	bl	8002134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fde:	bf00      	nop
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b085      	sub	sp, #20
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b21      	cmp	r3, #33	; 0x21
 8005ff8:	d13e      	bne.n	8006078 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006002:	d114      	bne.n	800602e <UART_Transmit_IT+0x48>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d110      	bne.n	800602e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006020:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	1c9a      	adds	r2, r3, #2
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	621a      	str	r2, [r3, #32]
 800602c:	e008      	b.n	8006040 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	1c59      	adds	r1, r3, #1
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	6211      	str	r1, [r2, #32]
 8006038:	781a      	ldrb	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006044:	b29b      	uxth	r3, r3
 8006046:	3b01      	subs	r3, #1
 8006048:	b29b      	uxth	r3, r3
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	4619      	mov	r1, r3
 800604e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10f      	bne.n	8006074 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006062:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006072:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006074:	2300      	movs	r3, #0
 8006076:	e000      	b.n	800607a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006078:	2302      	movs	r3, #2
  }
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b082      	sub	sp, #8
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800609c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff fe64 	bl	8005d74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b08c      	sub	sp, #48	; 0x30
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b22      	cmp	r3, #34	; 0x22
 80060c8:	f040 80ab 	bne.w	8006222 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d4:	d117      	bne.n	8006106 <UART_Receive_IT+0x50>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d113      	bne.n	8006106 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060de:	2300      	movs	r3, #0
 80060e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fe:	1c9a      	adds	r2, r3, #2
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	629a      	str	r2, [r3, #40]	; 0x28
 8006104:	e026      	b.n	8006154 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800610c:	2300      	movs	r3, #0
 800610e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006118:	d007      	beq.n	800612a <UART_Receive_IT+0x74>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10a      	bne.n	8006138 <UART_Receive_IT+0x82>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d106      	bne.n	8006138 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	b2da      	uxtb	r2, r3
 8006132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	e008      	b.n	800614a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006144:	b2da      	uxtb	r2, r3
 8006146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006148:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	b29b      	uxth	r3, r3
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	4619      	mov	r1, r3
 8006162:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006164:	2b00      	cmp	r3, #0
 8006166:	d15a      	bne.n	800621e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0220 	bic.w	r2, r2, #32
 8006176:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006186:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	695a      	ldr	r2, [r3, #20]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 0201 	bic.w	r2, r2, #1
 8006196:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2220      	movs	r2, #32
 800619c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d135      	bne.n	8006214 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	330c      	adds	r3, #12
 80061b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	613b      	str	r3, [r7, #16]
   return(result);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f023 0310 	bic.w	r3, r3, #16
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	330c      	adds	r3, #12
 80061cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ce:	623a      	str	r2, [r7, #32]
 80061d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	69f9      	ldr	r1, [r7, #28]
 80061d4:	6a3a      	ldr	r2, [r7, #32]
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	61bb      	str	r3, [r7, #24]
   return(result);
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e5      	bne.n	80061ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0310 	and.w	r3, r3, #16
 80061ec:	2b10      	cmp	r3, #16
 80061ee:	d10a      	bne.n	8006206 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061f0:	2300      	movs	r3, #0
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800620a:	4619      	mov	r1, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7ff fdbb 	bl	8005d88 <HAL_UARTEx_RxEventCallback>
 8006212:	e002      	b.n	800621a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7fb ffe1 	bl	80021dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	e002      	b.n	8006224 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	e000      	b.n	8006224 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006222:	2302      	movs	r3, #2
  }
}
 8006224:	4618      	mov	r0, r3
 8006226:	3730      	adds	r7, #48	; 0x30
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800622c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006230:	b0c0      	sub	sp, #256	; 0x100
 8006232:	af00      	add	r7, sp, #0
 8006234:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006248:	68d9      	ldr	r1, [r3, #12]
 800624a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	ea40 0301 	orr.w	r3, r0, r1
 8006254:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	431a      	orrs	r2, r3
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	431a      	orrs	r2, r3
 800626c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	4313      	orrs	r3, r2
 8006274:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006284:	f021 010c 	bic.w	r1, r1, #12
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006292:	430b      	orrs	r3, r1
 8006294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a6:	6999      	ldr	r1, [r3, #24]
 80062a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	ea40 0301 	orr.w	r3, r0, r1
 80062b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	4b8f      	ldr	r3, [pc, #572]	; (80064f8 <UART_SetConfig+0x2cc>)
 80062bc:	429a      	cmp	r2, r3
 80062be:	d005      	beq.n	80062cc <UART_SetConfig+0xa0>
 80062c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	4b8d      	ldr	r3, [pc, #564]	; (80064fc <UART_SetConfig+0x2d0>)
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d104      	bne.n	80062d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062cc:	f7fd fde2 	bl	8003e94 <HAL_RCC_GetPCLK2Freq>
 80062d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062d4:	e003      	b.n	80062de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062d6:	f7fd fdc9 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 80062da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062e8:	f040 810c 	bne.w	8006504 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062f0:	2200      	movs	r2, #0
 80062f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062fe:	4622      	mov	r2, r4
 8006300:	462b      	mov	r3, r5
 8006302:	1891      	adds	r1, r2, r2
 8006304:	65b9      	str	r1, [r7, #88]	; 0x58
 8006306:	415b      	adcs	r3, r3
 8006308:	65fb      	str	r3, [r7, #92]	; 0x5c
 800630a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800630e:	4621      	mov	r1, r4
 8006310:	eb12 0801 	adds.w	r8, r2, r1
 8006314:	4629      	mov	r1, r5
 8006316:	eb43 0901 	adc.w	r9, r3, r1
 800631a:	f04f 0200 	mov.w	r2, #0
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800632a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800632e:	4690      	mov	r8, r2
 8006330:	4699      	mov	r9, r3
 8006332:	4623      	mov	r3, r4
 8006334:	eb18 0303 	adds.w	r3, r8, r3
 8006338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800633c:	462b      	mov	r3, r5
 800633e:	eb49 0303 	adc.w	r3, r9, r3
 8006342:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006352:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006356:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800635a:	460b      	mov	r3, r1
 800635c:	18db      	adds	r3, r3, r3
 800635e:	653b      	str	r3, [r7, #80]	; 0x50
 8006360:	4613      	mov	r3, r2
 8006362:	eb42 0303 	adc.w	r3, r2, r3
 8006366:	657b      	str	r3, [r7, #84]	; 0x54
 8006368:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800636c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006370:	f7f9 ff9e 	bl	80002b0 <__aeabi_uldivmod>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	4b61      	ldr	r3, [pc, #388]	; (8006500 <UART_SetConfig+0x2d4>)
 800637a:	fba3 2302 	umull	r2, r3, r3, r2
 800637e:	095b      	lsrs	r3, r3, #5
 8006380:	011c      	lsls	r4, r3, #4
 8006382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006386:	2200      	movs	r2, #0
 8006388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800638c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006390:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006394:	4642      	mov	r2, r8
 8006396:	464b      	mov	r3, r9
 8006398:	1891      	adds	r1, r2, r2
 800639a:	64b9      	str	r1, [r7, #72]	; 0x48
 800639c:	415b      	adcs	r3, r3
 800639e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063a4:	4641      	mov	r1, r8
 80063a6:	eb12 0a01 	adds.w	sl, r2, r1
 80063aa:	4649      	mov	r1, r9
 80063ac:	eb43 0b01 	adc.w	fp, r3, r1
 80063b0:	f04f 0200 	mov.w	r2, #0
 80063b4:	f04f 0300 	mov.w	r3, #0
 80063b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063c4:	4692      	mov	sl, r2
 80063c6:	469b      	mov	fp, r3
 80063c8:	4643      	mov	r3, r8
 80063ca:	eb1a 0303 	adds.w	r3, sl, r3
 80063ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063d2:	464b      	mov	r3, r9
 80063d4:	eb4b 0303 	adc.w	r3, fp, r3
 80063d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063f0:	460b      	mov	r3, r1
 80063f2:	18db      	adds	r3, r3, r3
 80063f4:	643b      	str	r3, [r7, #64]	; 0x40
 80063f6:	4613      	mov	r3, r2
 80063f8:	eb42 0303 	adc.w	r3, r2, r3
 80063fc:	647b      	str	r3, [r7, #68]	; 0x44
 80063fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006402:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006406:	f7f9 ff53 	bl	80002b0 <__aeabi_uldivmod>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	4611      	mov	r1, r2
 8006410:	4b3b      	ldr	r3, [pc, #236]	; (8006500 <UART_SetConfig+0x2d4>)
 8006412:	fba3 2301 	umull	r2, r3, r3, r1
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	2264      	movs	r2, #100	; 0x64
 800641a:	fb02 f303 	mul.w	r3, r2, r3
 800641e:	1acb      	subs	r3, r1, r3
 8006420:	00db      	lsls	r3, r3, #3
 8006422:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006426:	4b36      	ldr	r3, [pc, #216]	; (8006500 <UART_SetConfig+0x2d4>)
 8006428:	fba3 2302 	umull	r2, r3, r3, r2
 800642c:	095b      	lsrs	r3, r3, #5
 800642e:	005b      	lsls	r3, r3, #1
 8006430:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006434:	441c      	add	r4, r3
 8006436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800643a:	2200      	movs	r2, #0
 800643c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006440:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006444:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006448:	4642      	mov	r2, r8
 800644a:	464b      	mov	r3, r9
 800644c:	1891      	adds	r1, r2, r2
 800644e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006450:	415b      	adcs	r3, r3
 8006452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006454:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006458:	4641      	mov	r1, r8
 800645a:	1851      	adds	r1, r2, r1
 800645c:	6339      	str	r1, [r7, #48]	; 0x30
 800645e:	4649      	mov	r1, r9
 8006460:	414b      	adcs	r3, r1
 8006462:	637b      	str	r3, [r7, #52]	; 0x34
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	f04f 0300 	mov.w	r3, #0
 800646c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006470:	4659      	mov	r1, fp
 8006472:	00cb      	lsls	r3, r1, #3
 8006474:	4651      	mov	r1, sl
 8006476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800647a:	4651      	mov	r1, sl
 800647c:	00ca      	lsls	r2, r1, #3
 800647e:	4610      	mov	r0, r2
 8006480:	4619      	mov	r1, r3
 8006482:	4603      	mov	r3, r0
 8006484:	4642      	mov	r2, r8
 8006486:	189b      	adds	r3, r3, r2
 8006488:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800648c:	464b      	mov	r3, r9
 800648e:	460a      	mov	r2, r1
 8006490:	eb42 0303 	adc.w	r3, r2, r3
 8006494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80064a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80064ac:	460b      	mov	r3, r1
 80064ae:	18db      	adds	r3, r3, r3
 80064b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80064b2:	4613      	mov	r3, r2
 80064b4:	eb42 0303 	adc.w	r3, r2, r3
 80064b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80064c2:	f7f9 fef5 	bl	80002b0 <__aeabi_uldivmod>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	4b0d      	ldr	r3, [pc, #52]	; (8006500 <UART_SetConfig+0x2d4>)
 80064cc:	fba3 1302 	umull	r1, r3, r3, r2
 80064d0:	095b      	lsrs	r3, r3, #5
 80064d2:	2164      	movs	r1, #100	; 0x64
 80064d4:	fb01 f303 	mul.w	r3, r1, r3
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	3332      	adds	r3, #50	; 0x32
 80064de:	4a08      	ldr	r2, [pc, #32]	; (8006500 <UART_SetConfig+0x2d4>)
 80064e0:	fba2 2303 	umull	r2, r3, r2, r3
 80064e4:	095b      	lsrs	r3, r3, #5
 80064e6:	f003 0207 	and.w	r2, r3, #7
 80064ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4422      	add	r2, r4
 80064f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064f4:	e106      	b.n	8006704 <UART_SetConfig+0x4d8>
 80064f6:	bf00      	nop
 80064f8:	40011000 	.word	0x40011000
 80064fc:	40011400 	.word	0x40011400
 8006500:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006508:	2200      	movs	r2, #0
 800650a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800650e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006512:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006516:	4642      	mov	r2, r8
 8006518:	464b      	mov	r3, r9
 800651a:	1891      	adds	r1, r2, r2
 800651c:	6239      	str	r1, [r7, #32]
 800651e:	415b      	adcs	r3, r3
 8006520:	627b      	str	r3, [r7, #36]	; 0x24
 8006522:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006526:	4641      	mov	r1, r8
 8006528:	1854      	adds	r4, r2, r1
 800652a:	4649      	mov	r1, r9
 800652c:	eb43 0501 	adc.w	r5, r3, r1
 8006530:	f04f 0200 	mov.w	r2, #0
 8006534:	f04f 0300 	mov.w	r3, #0
 8006538:	00eb      	lsls	r3, r5, #3
 800653a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800653e:	00e2      	lsls	r2, r4, #3
 8006540:	4614      	mov	r4, r2
 8006542:	461d      	mov	r5, r3
 8006544:	4643      	mov	r3, r8
 8006546:	18e3      	adds	r3, r4, r3
 8006548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800654c:	464b      	mov	r3, r9
 800654e:	eb45 0303 	adc.w	r3, r5, r3
 8006552:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006562:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006566:	f04f 0200 	mov.w	r2, #0
 800656a:	f04f 0300 	mov.w	r3, #0
 800656e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006572:	4629      	mov	r1, r5
 8006574:	008b      	lsls	r3, r1, #2
 8006576:	4621      	mov	r1, r4
 8006578:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800657c:	4621      	mov	r1, r4
 800657e:	008a      	lsls	r2, r1, #2
 8006580:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006584:	f7f9 fe94 	bl	80002b0 <__aeabi_uldivmod>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4b60      	ldr	r3, [pc, #384]	; (8006710 <UART_SetConfig+0x4e4>)
 800658e:	fba3 2302 	umull	r2, r3, r3, r2
 8006592:	095b      	lsrs	r3, r3, #5
 8006594:	011c      	lsls	r4, r3, #4
 8006596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800659a:	2200      	movs	r2, #0
 800659c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80065a8:	4642      	mov	r2, r8
 80065aa:	464b      	mov	r3, r9
 80065ac:	1891      	adds	r1, r2, r2
 80065ae:	61b9      	str	r1, [r7, #24]
 80065b0:	415b      	adcs	r3, r3
 80065b2:	61fb      	str	r3, [r7, #28]
 80065b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065b8:	4641      	mov	r1, r8
 80065ba:	1851      	adds	r1, r2, r1
 80065bc:	6139      	str	r1, [r7, #16]
 80065be:	4649      	mov	r1, r9
 80065c0:	414b      	adcs	r3, r1
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065d0:	4659      	mov	r1, fp
 80065d2:	00cb      	lsls	r3, r1, #3
 80065d4:	4651      	mov	r1, sl
 80065d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065da:	4651      	mov	r1, sl
 80065dc:	00ca      	lsls	r2, r1, #3
 80065de:	4610      	mov	r0, r2
 80065e0:	4619      	mov	r1, r3
 80065e2:	4603      	mov	r3, r0
 80065e4:	4642      	mov	r2, r8
 80065e6:	189b      	adds	r3, r3, r2
 80065e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065ec:	464b      	mov	r3, r9
 80065ee:	460a      	mov	r2, r1
 80065f0:	eb42 0303 	adc.w	r3, r2, r3
 80065f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	67bb      	str	r3, [r7, #120]	; 0x78
 8006602:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006610:	4649      	mov	r1, r9
 8006612:	008b      	lsls	r3, r1, #2
 8006614:	4641      	mov	r1, r8
 8006616:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800661a:	4641      	mov	r1, r8
 800661c:	008a      	lsls	r2, r1, #2
 800661e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006622:	f7f9 fe45 	bl	80002b0 <__aeabi_uldivmod>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4611      	mov	r1, r2
 800662c:	4b38      	ldr	r3, [pc, #224]	; (8006710 <UART_SetConfig+0x4e4>)
 800662e:	fba3 2301 	umull	r2, r3, r3, r1
 8006632:	095b      	lsrs	r3, r3, #5
 8006634:	2264      	movs	r2, #100	; 0x64
 8006636:	fb02 f303 	mul.w	r3, r2, r3
 800663a:	1acb      	subs	r3, r1, r3
 800663c:	011b      	lsls	r3, r3, #4
 800663e:	3332      	adds	r3, #50	; 0x32
 8006640:	4a33      	ldr	r2, [pc, #204]	; (8006710 <UART_SetConfig+0x4e4>)
 8006642:	fba2 2303 	umull	r2, r3, r2, r3
 8006646:	095b      	lsrs	r3, r3, #5
 8006648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800664c:	441c      	add	r4, r3
 800664e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006652:	2200      	movs	r2, #0
 8006654:	673b      	str	r3, [r7, #112]	; 0x70
 8006656:	677a      	str	r2, [r7, #116]	; 0x74
 8006658:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800665c:	4642      	mov	r2, r8
 800665e:	464b      	mov	r3, r9
 8006660:	1891      	adds	r1, r2, r2
 8006662:	60b9      	str	r1, [r7, #8]
 8006664:	415b      	adcs	r3, r3
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800666c:	4641      	mov	r1, r8
 800666e:	1851      	adds	r1, r2, r1
 8006670:	6039      	str	r1, [r7, #0]
 8006672:	4649      	mov	r1, r9
 8006674:	414b      	adcs	r3, r1
 8006676:	607b      	str	r3, [r7, #4]
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	f04f 0300 	mov.w	r3, #0
 8006680:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006684:	4659      	mov	r1, fp
 8006686:	00cb      	lsls	r3, r1, #3
 8006688:	4651      	mov	r1, sl
 800668a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800668e:	4651      	mov	r1, sl
 8006690:	00ca      	lsls	r2, r1, #3
 8006692:	4610      	mov	r0, r2
 8006694:	4619      	mov	r1, r3
 8006696:	4603      	mov	r3, r0
 8006698:	4642      	mov	r2, r8
 800669a:	189b      	adds	r3, r3, r2
 800669c:	66bb      	str	r3, [r7, #104]	; 0x68
 800669e:	464b      	mov	r3, r9
 80066a0:	460a      	mov	r2, r1
 80066a2:	eb42 0303 	adc.w	r3, r2, r3
 80066a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	663b      	str	r3, [r7, #96]	; 0x60
 80066b2:	667a      	str	r2, [r7, #100]	; 0x64
 80066b4:	f04f 0200 	mov.w	r2, #0
 80066b8:	f04f 0300 	mov.w	r3, #0
 80066bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80066c0:	4649      	mov	r1, r9
 80066c2:	008b      	lsls	r3, r1, #2
 80066c4:	4641      	mov	r1, r8
 80066c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ca:	4641      	mov	r1, r8
 80066cc:	008a      	lsls	r2, r1, #2
 80066ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066d2:	f7f9 fded 	bl	80002b0 <__aeabi_uldivmod>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4b0d      	ldr	r3, [pc, #52]	; (8006710 <UART_SetConfig+0x4e4>)
 80066dc:	fba3 1302 	umull	r1, r3, r3, r2
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	2164      	movs	r1, #100	; 0x64
 80066e4:	fb01 f303 	mul.w	r3, r1, r3
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	011b      	lsls	r3, r3, #4
 80066ec:	3332      	adds	r3, #50	; 0x32
 80066ee:	4a08      	ldr	r2, [pc, #32]	; (8006710 <UART_SetConfig+0x4e4>)
 80066f0:	fba2 2303 	umull	r2, r3, r2, r3
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	f003 020f 	and.w	r2, r3, #15
 80066fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4422      	add	r2, r4
 8006702:	609a      	str	r2, [r3, #8]
}
 8006704:	bf00      	nop
 8006706:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800670a:	46bd      	mov	sp, r7
 800670c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006710:	51eb851f 	.word	0x51eb851f

08006714 <NOP>:
    HAL_Delay(2000);											//Tiempo de reset del módulo
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
}
void NOP(struct WIFI *a)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=0;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <MUX>:
void MUX(struct WIFI *a)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2204      	movs	r2, #4
 80067a4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <IPDef>:
void IPDef(struct WIFI *a)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2205      	movs	r2, #5
 80067d0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2206      	movs	r2, #6
 8006828:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2208      	movs	r2, #8
 8006854:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2209      	movs	r2, #9
 8006880:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2207      	movs	r2, #7
 80068ac:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <Inicializar>:
void Inicializar(struct WIFI *a)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
a->_data2SND[64]='\0';			//Data a enviar por TCP
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2a94 	strb.w	r2, [r3, #2708]	; 0xa94
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_instruccion=0;				//Funcion que se desea realizar
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_ejecucion=0;				//Funcion en ejecucion	
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2af4 	strb.w	r2, [r3, #2804]	; 0xaf4
a->_ticks=0;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
a->_ticks2=0;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_debug=0;					//utilizada par fines de debugging
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug_str=0;				//utilizada par fines de debugging
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_debug_pos=0;				//utilizada par fines de debugging
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_chrs=0;				//utilizada par fines de debugging
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_rx_ok=0;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_rx_no_ok=0;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_SEND_OK=0;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_CLOSED=0;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_debug_WF_DISCONNECT=0;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_FAIL=0;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_CONNECT=0;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count=0;				//Cuento la catidad de ipds	
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
a->_debug_count_old=0;			//Cuento la catidad de ipds
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
a->_debug_count2=0;				//SEND OK para enviar datos
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count4=0;				//SEDN OK recibido directo
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count5=0;				//Cuento la catidad de ipds	
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count6=0;				//Cuento la catidad de ipds	
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count7=0;				//Cuento la catidad de ipds
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count8=0;				//Cuento la catidad de ipds
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count9=0;				//Cuento la catidad de ipds
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count10=0;			//Cuento la catidad de ipds
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_subpaso=0;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 8006a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a62:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006a66:	af06      	add	r7, sp, #24
 8006a68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a70:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8006a84:	2300      	movs	r3, #0
 8006a86:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 8006a90:	2320      	movs	r3, #32
 8006a92:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 8006a96:	2322      	movs	r3, #34	; 0x22
 8006a98:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 8006a9c:	4b71      	ldr	r3, [pc, #452]	; (8006c64 <AT_ESP8266_ND+0x204>)
 8006a9e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 8006aa2:	4a71      	ldr	r2, [pc, #452]	; (8006c68 <AT_ESP8266_ND+0x208>)
 8006aa4:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8006aa8:	6812      	ldr	r2, [r2, #0]
 8006aaa:	4611      	mov	r1, r2
 8006aac:	8019      	strh	r1, [r3, #0]
 8006aae:	3302      	adds	r3, #2
 8006ab0:	0c12      	lsrs	r2, r2, #16
 8006ab2:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 8006ab4:	f642 4322 	movw	r3, #11298	; 0x2c22
 8006ab8:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 8006abc:	f640 230d 	movw	r3, #2573	; 0xa0d
 8006ac0:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8006aca:	2300      	movs	r3, #0
 8006acc:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 8006ad0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ad4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 8006ae0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ae4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7f9 fb80 	bl	80001f4 <strlen>
 8006af4:	4603      	mov	r3, r0
 8006af6:	461a      	mov	r2, r3
 8006af8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006afc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 8006b06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 8006b16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7f9 fb65 	bl	80001f4 <strlen>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 8006b3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2206      	movs	r2, #6
 8006b48:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006b4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006b5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006b68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006b76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006b84:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b88:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b8c:	6812      	ldr	r2, [r2, #0]
 8006b8e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006b92:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b96:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b9a:	6809      	ldr	r1, [r1, #0]
 8006b9c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006ba0:	2600      	movs	r6, #0
 8006ba2:	9604      	str	r6, [sp, #16]
 8006ba4:	9103      	str	r1, [sp, #12]
 8006ba6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006baa:	9102      	str	r1, [sp, #8]
 8006bac:	9201      	str	r2, [sp, #4]
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	462b      	mov	r3, r5
 8006bb2:	4a2e      	ldr	r2, [pc, #184]	; (8006c6c <AT_ESP8266_ND+0x20c>)
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	f007 fd4f 	bl	800e658 <FT_String_ND>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	f040 812a 	bne.w	8006e16 <AT_ESP8266_ND+0x3b6>
	 {

	 	a->_n_fcomp=strlen("\r\n+IPD");
 8006bc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2206      	movs	r2, #6
 8006bce:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 	//a->_estado_data=0;

	 	if(a->_TCP_Local_Server_EN==0)
 8006bd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d145      	bne.n	8006c70 <AT_ESP8266_ND+0x210>
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATA);
 8006be4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006be8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006bf2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bf6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006c00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006c0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006c1c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006c20:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006c24:	6812      	ldr	r2, [r2, #0]
 8006c26:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006c2a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006c2e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006c32:	6809      	ldr	r1, [r1, #0]
 8006c34:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006c38:	2604      	movs	r6, #4
 8006c3a:	9604      	str	r6, [sp, #16]
 8006c3c:	9103      	str	r1, [sp, #12]
 8006c3e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006c42:	9102      	str	r1, [sp, #8]
 8006c44:	9201      	str	r2, [sp, #4]
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	462b      	mov	r3, r5
 8006c4a:	4a08      	ldr	r2, [pc, #32]	; (8006c6c <AT_ESP8266_ND+0x20c>)
 8006c4c:	4621      	mov	r1, r4
 8006c4e:	f007 fd03 	bl	800e658 <FT_String_ND>
 8006c52:	4602      	mov	r2, r0
 8006c54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
 8006c62:	e044      	b.n	8006cee <AT_ESP8266_ND+0x28e>
 8006c64:	00222c22 	.word	0x00222c22
 8006c68:	08010818 	.word	0x08010818
 8006c6c:	08010640 	.word	0x08010640
	 	}
	 	else
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATASRVR);
 8006c70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006c7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006c8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006c9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ca8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006cac:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006cb0:	6812      	ldr	r2, [r2, #0]
 8006cb2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006cb6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006cba:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006cbe:	6809      	ldr	r1, [r1, #0]
 8006cc0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006cc4:	2605      	movs	r6, #5
 8006cc6:	9604      	str	r6, [sp, #16]
 8006cc8:	9103      	str	r1, [sp, #12]
 8006cca:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006cce:	9102      	str	r1, [sp, #8]
 8006cd0:	9201      	str	r2, [sp, #4]
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	462b      	mov	r3, r5
 8006cd6:	4ac1      	ldr	r2, [pc, #772]	; (8006fdc <AT_ESP8266_ND+0x57c>)
 8006cd8:	4621      	mov	r1, r4
 8006cda:	f007 fcbd 	bl	800e658 <FT_String_ND>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ce4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	 	}

	 	if(a->_estado_data==4)
 8006cee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cf2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d15a      	bne.n	8006db6 <AT_ESP8266_ND+0x356>
	 	{
	 		a->_estado_rcv_data=99;
 8006d00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2263      	movs	r2, #99	; 0x63
 8006d0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=a->_n_tok;
 8006d10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006d1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006d2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8006d3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006d48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006d56:	2341      	movs	r3, #65	; 0x41
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	f007 ffe2 	bl	800ed24 <CopiaVector>
	 		CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8006d60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8006d6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006d7c:	2341      	movs	r3, #65	; 0x41
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	2300      	movs	r3, #0
 8006d82:	2205      	movs	r2, #5
 8006d84:	f007 ffce 	bl	800ed24 <CopiaVector>

	 		a->_debug_rx_ok++;
 8006d88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
	 		a->_new_data_rcv=1;
 8006da6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006daa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 	}
	 	if(a->_estado_data==5)
 8006db6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006dc4:	2b05      	cmp	r3, #5
 8006dc6:	d126      	bne.n	8006e16 <AT_ESP8266_ND+0x3b6>
	 	{
	 		a->_estado_rcv_data=55;
 8006dc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2237      	movs	r2, #55	; 0x37
 8006dd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=0;
 8006dd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ddc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		a->_debug_rx_no_ok++;
 8006de8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f8d3 3cd4 	ldr.w	r3, [r3, #3284]	; 0xcd4
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
	 		a->_new_data_rcv=1;
 8006e06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8006e16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2204      	movs	r2, #4
 8006e22:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006e26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006e34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006e42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006e50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006e5e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006e62:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006e66:	6812      	ldr	r2, [r2, #0]
 8006e68:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006e6c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006e70:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006e74:	6809      	ldr	r1, [r1, #0]
 8006e76:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006e7a:	2600      	movs	r6, #0
 8006e7c:	9604      	str	r6, [sp, #16]
 8006e7e:	9103      	str	r1, [sp, #12]
 8006e80:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e84:	9102      	str	r1, [sp, #8]
 8006e86:	9201      	str	r2, [sp, #4]
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	462b      	mov	r3, r5
 8006e8c:	4a54      	ldr	r2, [pc, #336]	; (8006fe0 <AT_ESP8266_ND+0x580>)
 8006e8e:	4621      	mov	r1, r4
 8006e90:	f007 fbe2 	bl	800e658 <FT_String_ND>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	f040 8334 	bne.w	8007504 <AT_ESP8266_ND+0xaa4>
	{

		AT_decode=at_ok;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND");
 8006ea2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ea6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2206      	movs	r2, #6
 8006eae:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Transmision ok
 8006eb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006ec0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ec4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006ece:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ed2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006edc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ee0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006eea:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006eee:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006ef2:	6812      	ldr	r2, [r2, #0]
 8006ef4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006ef8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006efc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f00:	6809      	ldr	r1, [r1, #0]
 8006f02:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006f06:	2600      	movs	r6, #0
 8006f08:	9604      	str	r6, [sp, #16]
 8006f0a:	9103      	str	r1, [sp, #12]
 8006f0c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f10:	9102      	str	r1, [sp, #8]
 8006f12:	9201      	str	r2, [sp, #4]
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	462b      	mov	r3, r5
 8006f18:	4a32      	ldr	r2, [pc, #200]	; (8006fe4 <AT_ESP8266_ND+0x584>)
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	f007 fb9c 	bl	800e658 <FT_String_ND>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d113      	bne.n	8006f4e <AT_ESP8266_ND+0x4ee>
			 {
			 AT_decode=at_tcp_enviado_ok;
 8006f26:	2313      	movs	r3, #19
 8006f28:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 8006f2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 8006f4a:	f001 b981 	b.w	8008250 <AT_ESP8266_ND+0x17f0>
			 }
		 else
		 {
		//------------------CONFIRMO CIERRE DE  CONEXION------------------//
		a->_n_fcomp=strlen("AT+CWQAP");
 8006f4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2208      	movs	r2, #8
 8006f5a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006f5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006f6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006f7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006f88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006f96:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f9a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f9e:	6812      	ldr	r2, [r2, #0]
 8006fa0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006fa4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006fa8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006fac:	6809      	ldr	r1, [r1, #0]
 8006fae:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006fb2:	2600      	movs	r6, #0
 8006fb4:	9604      	str	r6, [sp, #16]
 8006fb6:	9103      	str	r1, [sp, #12]
 8006fb8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006fbc:	9102      	str	r1, [sp, #8]
 8006fbe:	9201      	str	r2, [sp, #4]
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	462b      	mov	r3, r5
 8006fc4:	4a08      	ldr	r2, [pc, #32]	; (8006fe8 <AT_ESP8266_ND+0x588>)
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	f007 fb46 	bl	800e658 <FT_String_ND>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d10c      	bne.n	8006fec <AT_ESP8266_ND+0x58c>
			{
			AT_decode=at_deconectar_ok;
 8006fd2:	230d      	movs	r3, #13
 8006fd4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006fd8:	f001 b93a 	b.w	8008250 <AT_ESP8266_ND+0x17f0>
 8006fdc:	08010640 	.word	0x08010640
 8006fe0:	08010648 	.word	0x08010648
 8006fe4:	08010650 	.word	0x08010650
 8006fe8:	08010658 	.word	0x08010658
			}
		else
		{
		//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
		a->_n_fcomp=strlen("AT+CWMODE=");
 8006fec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ff0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	220a      	movs	r2, #10
 8006ff8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8006ffc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007000:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800700a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800700e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007018:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800701c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007026:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800702a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007034:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007038:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800703c:	6812      	ldr	r2, [r2, #0]
 800703e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007042:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007046:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800704a:	6809      	ldr	r1, [r1, #0]
 800704c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007050:	2600      	movs	r6, #0
 8007052:	9604      	str	r6, [sp, #16]
 8007054:	9103      	str	r1, [sp, #12]
 8007056:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800705a:	9102      	str	r1, [sp, #8]
 800705c:	9201      	str	r2, [sp, #4]
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	462b      	mov	r3, r5
 8007062:	4ab7      	ldr	r2, [pc, #732]	; (8007340 <AT_ESP8266_ND+0x8e0>)
 8007064:	4621      	mov	r1, r4
 8007066:	f007 faf7 	bl	800e658 <FT_String_ND>
 800706a:	4603      	mov	r3, r0
 800706c:	2b01      	cmp	r3, #1
 800706e:	d104      	bne.n	800707a <AT_ESP8266_ND+0x61a>
			{
				AT_decode=at_cambiar_modo_ok;
 8007070:	231c      	movs	r3, #28
 8007072:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007076:	f001 b8eb 	b.w	8008250 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
		a->_n_fcomp=strlen("no change\r\nOK\r\n");
 800707a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800707e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	220f      	movs	r2, #15
 8007086:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 800708a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800708e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007098:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800709c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80070a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80070b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80070c2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80070c6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80070ca:	6812      	ldr	r2, [r2, #0]
 80070cc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80070d0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80070d4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80070d8:	6809      	ldr	r1, [r1, #0]
 80070da:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80070de:	2600      	movs	r6, #0
 80070e0:	9604      	str	r6, [sp, #16]
 80070e2:	9103      	str	r1, [sp, #12]
 80070e4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80070e8:	9102      	str	r1, [sp, #8]
 80070ea:	9201      	str	r2, [sp, #4]
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	462b      	mov	r3, r5
 80070f0:	4a94      	ldr	r2, [pc, #592]	; (8007344 <AT_ESP8266_ND+0x8e4>)
 80070f2:	4621      	mov	r1, r4
 80070f4:	f007 fab0 	bl	800e658 <FT_String_ND>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d104      	bne.n	8007108 <AT_ESP8266_ND+0x6a8>
			{
				AT_decode=at_tcp_srvr_ok_noch;
 80070fe:	2317      	movs	r3, #23
 8007100:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007104:	f001 b8a4 	b.w	8008250 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------OK PARA ENVIAR------------------//
		a->_n_fcomp=strlen("\r\n>");
 8007108:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800710c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2203      	movs	r2, #3
 8007114:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007118:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800711c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007126:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800712a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007134:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007138:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007142:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007146:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007150:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007154:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007158:	6812      	ldr	r2, [r2, #0]
 800715a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800715e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007162:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007166:	6809      	ldr	r1, [r1, #0]
 8007168:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800716c:	2600      	movs	r6, #0
 800716e:	9604      	str	r6, [sp, #16]
 8007170:	9103      	str	r1, [sp, #12]
 8007172:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007176:	9102      	str	r1, [sp, #8]
 8007178:	9201      	str	r2, [sp, #4]
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	462b      	mov	r3, r5
 800717e:	4a72      	ldr	r2, [pc, #456]	; (8007348 <AT_ESP8266_ND+0x8e8>)
 8007180:	4621      	mov	r1, r4
 8007182:	f007 fa69 	bl	800e658 <FT_String_ND>
 8007186:	4603      	mov	r3, r0
 8007188:	2b01      	cmp	r3, #1
 800718a:	d104      	bne.n	8007196 <AT_ESP8266_ND+0x736>
			{
				AT_decode=at_tcp_ok_to_send;
 800718c:	2314      	movs	r3, #20
 800718e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007192:	f001 b85d 	b.w	8008250 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------OK SERVIDOR------------------//
		a->_n_fcomp=strlen("AT+CIPSERVER");
 8007196:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800719a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	220c      	movs	r2, #12
 80071a2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80071a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80071b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80071c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80071d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80071de:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80071e2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80071e6:	6812      	ldr	r2, [r2, #0]
 80071e8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80071ec:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80071f0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80071f4:	6809      	ldr	r1, [r1, #0]
 80071f6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80071fa:	2600      	movs	r6, #0
 80071fc:	9604      	str	r6, [sp, #16]
 80071fe:	9103      	str	r1, [sp, #12]
 8007200:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007204:	9102      	str	r1, [sp, #8]
 8007206:	9201      	str	r2, [sp, #4]
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	462b      	mov	r3, r5
 800720c:	4a4f      	ldr	r2, [pc, #316]	; (800734c <AT_ESP8266_ND+0x8ec>)
 800720e:	4621      	mov	r1, r4
 8007210:	f007 fa22 	bl	800e658 <FT_String_ND>
 8007214:	4603      	mov	r3, r0
 8007216:	2b01      	cmp	r3, #1
 8007218:	d104      	bne.n	8007224 <AT_ESP8266_ND+0x7c4>
		{
			AT_decode=at_tcp_srvr_ok;
 800721a:	2315      	movs	r3, #21
 800721c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007220:	f001 b816 	b.w	8008250 <AT_ESP8266_ND+0x17f0>
		}
		else
		{
		//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
		a->_n_fcomp=strlen("AT+CIPCLOSE");
 8007224:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007228:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	220b      	movs	r2, #11
 8007230:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007234:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007238:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007242:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007246:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007250:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007254:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800725e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007262:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800726c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007270:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007274:	6812      	ldr	r2, [r2, #0]
 8007276:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800727a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800727e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007282:	6809      	ldr	r1, [r1, #0]
 8007284:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007288:	2600      	movs	r6, #0
 800728a:	9604      	str	r6, [sp, #16]
 800728c:	9103      	str	r1, [sp, #12]
 800728e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007292:	9102      	str	r1, [sp, #8]
 8007294:	9201      	str	r2, [sp, #4]
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	462b      	mov	r3, r5
 800729a:	4a2d      	ldr	r2, [pc, #180]	; (8007350 <AT_ESP8266_ND+0x8f0>)
 800729c:	4621      	mov	r1, r4
 800729e:	f007 f9db 	bl	800e658 <FT_String_ND>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d104      	bne.n	80072b2 <AT_ESP8266_ND+0x852>
			{
				AT_decode=at_tcp_closed_ok;
 80072a8:	2309      	movs	r3, #9
 80072aa:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80072ae:	f000 bfcf 	b.w	8008250 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=1");
 80072b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	220b      	movs	r2, #11
 80072be:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80072c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80072d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80072de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80072ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80072fa:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80072fe:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007302:	6812      	ldr	r2, [r2, #0]
 8007304:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007308:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800730c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007310:	6809      	ldr	r1, [r1, #0]
 8007312:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007316:	2600      	movs	r6, #0
 8007318:	9604      	str	r6, [sp, #16]
 800731a:	9103      	str	r1, [sp, #12]
 800731c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007320:	9102      	str	r1, [sp, #8]
 8007322:	9201      	str	r2, [sp, #4]
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	462b      	mov	r3, r5
 8007328:	4a0a      	ldr	r2, [pc, #40]	; (8007354 <AT_ESP8266_ND+0x8f4>)
 800732a:	4621      	mov	r1, r4
 800732c:	f007 f994 	bl	800e658 <FT_String_ND>
 8007330:	4603      	mov	r3, r0
 8007332:	2b01      	cmp	r3, #1
 8007334:	d110      	bne.n	8007358 <AT_ESP8266_ND+0x8f8>
			{
				AT_decode=at_multiple_conn_ok;
 8007336:	2307      	movs	r3, #7
 8007338:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800733c:	f000 bf88 	b.w	8008250 <AT_ESP8266_ND+0x17f0>
 8007340:	08010664 	.word	0x08010664
 8007344:	08010670 	.word	0x08010670
 8007348:	08010680 	.word	0x08010680
 800734c:	08010684 	.word	0x08010684
 8007350:	08010694 	.word	0x08010694
 8007354:	080106a0 	.word	0x080106a0
			}
		else
		{
		//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=0");
 8007358:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800735c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	220b      	movs	r2, #11
 8007364:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007368:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800736c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007376:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800737a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007384:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007388:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007392:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007396:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80073a0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80073a4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80073a8:	6812      	ldr	r2, [r2, #0]
 80073aa:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80073ae:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80073b2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80073b6:	6809      	ldr	r1, [r1, #0]
 80073b8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80073bc:	2600      	movs	r6, #0
 80073be:	9604      	str	r6, [sp, #16]
 80073c0:	9103      	str	r1, [sp, #12]
 80073c2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80073c6:	9102      	str	r1, [sp, #8]
 80073c8:	9201      	str	r2, [sp, #4]
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	462b      	mov	r3, r5
 80073ce:	4ab7      	ldr	r2, [pc, #732]	; (80076ac <AT_ESP8266_ND+0xc4c>)
 80073d0:	4621      	mov	r1, r4
 80073d2:	f007 f941 	bl	800e658 <FT_String_ND>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d104      	bne.n	80073e6 <AT_ESP8266_ND+0x986>
			{
				AT_decode=at_no_multiple_conn_ok;
 80073dc:	2308      	movs	r3, #8
 80073de:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80073e2:	f000 bf35 	b.w	8008250 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------DEFIIR IP OK------------------//
		a->_n_fcomp=strlen("AT+CIPSTA=");
 80073e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	220a      	movs	r2, #10
 80073f2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80073f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007404:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007408:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007412:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007416:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007420:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007424:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800742e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007432:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007436:	6812      	ldr	r2, [r2, #0]
 8007438:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800743c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007440:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007444:	6809      	ldr	r1, [r1, #0]
 8007446:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800744a:	2600      	movs	r6, #0
 800744c:	9604      	str	r6, [sp, #16]
 800744e:	9103      	str	r1, [sp, #12]
 8007450:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007454:	9102      	str	r1, [sp, #8]
 8007456:	9201      	str	r2, [sp, #4]
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	462b      	mov	r3, r5
 800745c:	4a94      	ldr	r2, [pc, #592]	; (80076b0 <AT_ESP8266_ND+0xc50>)
 800745e:	4621      	mov	r1, r4
 8007460:	f007 f8fa 	bl	800e658 <FT_String_ND>
 8007464:	4603      	mov	r3, r0
 8007466:	2b01      	cmp	r3, #1
 8007468:	d104      	bne.n	8007474 <AT_ESP8266_ND+0xa14>
			{
				AT_decode=at_def_ip_ok;
 800746a:	231b      	movs	r3, #27
 800746c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007470:	f000 beee 	b.w	8008250 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------TCP CONECTADO------------------//
		a->_n_fcomp=strlen("CONNECT");
 8007474:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007478:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2207      	movs	r2, #7
 8007480:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007484:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007488:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007492:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007496:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80074a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80074ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80074bc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80074c0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80074c4:	6812      	ldr	r2, [r2, #0]
 80074c6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80074ca:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80074ce:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80074d2:	6809      	ldr	r1, [r1, #0]
 80074d4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80074d8:	2600      	movs	r6, #0
 80074da:	9604      	str	r6, [sp, #16]
 80074dc:	9103      	str	r1, [sp, #12]
 80074de:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80074e2:	9102      	str	r1, [sp, #8]
 80074e4:	9201      	str	r2, [sp, #4]
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	462b      	mov	r3, r5
 80074ea:	4a72      	ldr	r2, [pc, #456]	; (80076b4 <AT_ESP8266_ND+0xc54>)
 80074ec:	4621      	mov	r1, r4
 80074ee:	f007 f8b3 	bl	800e658 <FT_String_ND>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	f040 86ab 	bne.w	8008250 <AT_ESP8266_ND+0x17f0>
			{
			AT_decode=at_tcp_conectado;
 80074fa:	230f      	movs	r3, #15
 80074fc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007500:	f000 bea6 	b.w	8008250 <AT_ESP8266_ND+0x17f0>
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\n");
 8007504:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007508:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2207      	movs	r2, #7
 8007510:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007514:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007518:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007522:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007526:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007530:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007534:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800753e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007542:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800754c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007550:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007554:	6812      	ldr	r2, [r2, #0]
 8007556:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800755a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800755e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007562:	6809      	ldr	r1, [r1, #0]
 8007564:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007568:	2600      	movs	r6, #0
 800756a:	9604      	str	r6, [sp, #16]
 800756c:	9103      	str	r1, [sp, #12]
 800756e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007572:	9102      	str	r1, [sp, #8]
 8007574:	9201      	str	r2, [sp, #4]
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	462b      	mov	r3, r5
 800757a:	4a4f      	ldr	r2, [pc, #316]	; (80076b8 <AT_ESP8266_ND+0xc58>)
 800757c:	4621      	mov	r1, r4
 800757e:	f007 f86b 	bl	800e658 <FT_String_ND>
 8007582:	4603      	mov	r3, r0
 8007584:	2b01      	cmp	r3, #1
 8007586:	f040 8326 	bne.w	8007bd6 <AT_ESP8266_ND+0x1176>
		{
				AT_decode=at_error;
 800758a:	2302      	movs	r3, #2
 800758c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("CLOSED\r\n");
 8007590:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007594:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2208      	movs	r2, #8
 800759c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Intentando conectar con servidor TCP caido
 80075a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80075ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80075bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80075ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80075d8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80075dc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80075e0:	6812      	ldr	r2, [r2, #0]
 80075e2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80075e6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80075ea:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80075ee:	6809      	ldr	r1, [r1, #0]
 80075f0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80075f4:	2600      	movs	r6, #0
 80075f6:	9604      	str	r6, [sp, #16]
 80075f8:	9103      	str	r1, [sp, #12]
 80075fa:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80075fe:	9102      	str	r1, [sp, #8]
 8007600:	9201      	str	r2, [sp, #4]
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	462b      	mov	r3, r5
 8007606:	4a2d      	ldr	r2, [pc, #180]	; (80076bc <AT_ESP8266_ND+0xc5c>)
 8007608:	4621      	mov	r1, r4
 800760a:	f007 f825 	bl	800e658 <FT_String_ND>
 800760e:	4603      	mov	r3, r0
 8007610:	2b01      	cmp	r3, #1
 8007612:	d104      	bne.n	800761e <AT_ESP8266_ND+0xbbe>
				{
						AT_decode=at_tcp_conn_err;
 8007614:	2306      	movs	r3, #6
 8007616:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800761a:	f000 be19 	b.w	8008250 <AT_ESP8266_ND+0x17f0>
				}
				 else
				 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 800761e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007622:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2215      	movs	r2, #21
 800762a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 800762e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007632:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800763c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007640:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800764a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800764e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007658:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800765c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007666:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800766a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800766e:	6812      	ldr	r2, [r2, #0]
 8007670:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007674:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007678:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800767c:	6809      	ldr	r1, [r1, #0]
 800767e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007682:	2600      	movs	r6, #0
 8007684:	9604      	str	r6, [sp, #16]
 8007686:	9103      	str	r1, [sp, #12]
 8007688:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800768c:	9102      	str	r1, [sp, #8]
 800768e:	9201      	str	r2, [sp, #4]
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	462b      	mov	r3, r5
 8007694:	4a0a      	ldr	r2, [pc, #40]	; (80076c0 <AT_ESP8266_ND+0xc60>)
 8007696:	4621      	mov	r1, r4
 8007698:	f006 ffde 	bl	800e658 <FT_String_ND>
 800769c:	4603      	mov	r3, r0
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d110      	bne.n	80076c4 <AT_ESP8266_ND+0xc64>
				{
					 	AT_decode=at_tcp_alrdy_cnntd_err;
 80076a2:	230e      	movs	r3, #14
 80076a4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80076a8:	f000 bdd2 	b.w	8008250 <AT_ESP8266_ND+0x17f0>
 80076ac:	080106ac 	.word	0x080106ac
 80076b0:	080106b8 	.word	0x080106b8
 80076b4:	080106c4 	.word	0x080106c4
 80076b8:	080106cc 	.word	0x080106cc
 80076bc:	080106d4 	.word	0x080106d4
 80076c0:	080106e0 	.word	0x080106e0
				}
				else
				{
				//------------------OK PARA ENVIAR------------------//
				a->_n_fcomp=strlen("AT+CIPSERVER");
 80076c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	220c      	movs	r2, #12
 80076d0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80076d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80076e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80076f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80076fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007702:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800770c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007710:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007714:	6812      	ldr	r2, [r2, #0]
 8007716:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800771a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800771e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007722:	6809      	ldr	r1, [r1, #0]
 8007724:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007728:	2600      	movs	r6, #0
 800772a:	9604      	str	r6, [sp, #16]
 800772c:	9103      	str	r1, [sp, #12]
 800772e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007732:	9102      	str	r1, [sp, #8]
 8007734:	9201      	str	r2, [sp, #4]
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	462b      	mov	r3, r5
 800773a:	4ab7      	ldr	r2, [pc, #732]	; (8007a18 <AT_ESP8266_ND+0xfb8>)
 800773c:	4621      	mov	r1, r4
 800773e:	f006 ff8b 	bl	800e658 <FT_String_ND>
 8007742:	4603      	mov	r3, r0
 8007744:	2b01      	cmp	r3, #1
 8007746:	d104      	bne.n	8007752 <AT_ESP8266_ND+0xcf2>
				{
					AT_decode=at_tcp_srvr_err;
 8007748:	2316      	movs	r3, #22
 800774a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800774e:	f000 bd7f 	b.w	8008250 <AT_ESP8266_ND+0x17f0>
				}
				else
				{
				//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
				a->_n_fcomp=strlen("AT+CIPCLOSE");
 8007752:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007756:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	220b      	movs	r2, #11
 800775e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8007762:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007766:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007770:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007774:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800777e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007782:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800778c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007790:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800779a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800779e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80077a2:	6812      	ldr	r2, [r2, #0]
 80077a4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80077a8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80077ac:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80077b0:	6809      	ldr	r1, [r1, #0]
 80077b2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80077b6:	2600      	movs	r6, #0
 80077b8:	9604      	str	r6, [sp, #16]
 80077ba:	9103      	str	r1, [sp, #12]
 80077bc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80077c0:	9102      	str	r1, [sp, #8]
 80077c2:	9201      	str	r2, [sp, #4]
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	462b      	mov	r3, r5
 80077c8:	4a94      	ldr	r2, [pc, #592]	; (8007a1c <AT_ESP8266_ND+0xfbc>)
 80077ca:	4621      	mov	r1, r4
 80077cc:	f006 ff44 	bl	800e658 <FT_String_ND>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d104      	bne.n	80077e0 <AT_ESP8266_ND+0xd80>
					{
						AT_decode=at_tcp_close_err;
 80077d6:	231a      	movs	r3, #26
 80077d8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80077dc:	f000 bd38 	b.w	8008250 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
				a->_n_fcomp=strlen("link is not valid");
 80077e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2211      	movs	r2, #17
 80077ec:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 80077f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80077fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007802:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800780c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007810:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800781a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800781e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007828:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800782c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007830:	6812      	ldr	r2, [r2, #0]
 8007832:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007836:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800783a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800783e:	6809      	ldr	r1, [r1, #0]
 8007840:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007844:	2600      	movs	r6, #0
 8007846:	9604      	str	r6, [sp, #16]
 8007848:	9103      	str	r1, [sp, #12]
 800784a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800784e:	9102      	str	r1, [sp, #8]
 8007850:	9201      	str	r2, [sp, #4]
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	462b      	mov	r3, r5
 8007856:	4a72      	ldr	r2, [pc, #456]	; (8007a20 <AT_ESP8266_ND+0xfc0>)
 8007858:	4621      	mov	r1, r4
 800785a:	f006 fefd 	bl	800e658 <FT_String_ND>
 800785e:	4603      	mov	r3, r0
 8007860:	2b01      	cmp	r3, #1
 8007862:	d104      	bne.n	800786e <AT_ESP8266_ND+0xe0e>
					{
						AT_decode=at_tcp_snd_err;
 8007864:	2311      	movs	r3, #17
 8007866:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800786a:	f000 bcf1 	b.w	8008250 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 800786e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007872:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	220a      	movs	r2, #10
 800787a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 800787e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007882:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800788c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007890:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800789a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800789e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80078a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80078b6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80078ba:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80078be:	6812      	ldr	r2, [r2, #0]
 80078c0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80078c4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80078c8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80078cc:	6809      	ldr	r1, [r1, #0]
 80078ce:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80078d2:	2600      	movs	r6, #0
 80078d4:	9604      	str	r6, [sp, #16]
 80078d6:	9103      	str	r1, [sp, #12]
 80078d8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80078dc:	9102      	str	r1, [sp, #8]
 80078de:	9201      	str	r2, [sp, #4]
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	462b      	mov	r3, r5
 80078e4:	4a4f      	ldr	r2, [pc, #316]	; (8007a24 <AT_ESP8266_ND+0xfc4>)
 80078e6:	4621      	mov	r1, r4
 80078e8:	f006 feb6 	bl	800e658 <FT_String_ND>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d104      	bne.n	80078fc <AT_ESP8266_ND+0xe9c>
					{
						AT_decode=at_cambiar_modo_err;
 80078f2:	231d      	movs	r3, #29
 80078f4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80078f8:	f000 bcaa 	b.w	8008250 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=1");
 80078fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007900:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	220b      	movs	r2, #11
 8007908:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800790c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007910:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800791a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800791e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007928:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800792c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007936:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800793a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007944:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007948:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800794c:	6812      	ldr	r2, [r2, #0]
 800794e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007952:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007956:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800795a:	6809      	ldr	r1, [r1, #0]
 800795c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007960:	2600      	movs	r6, #0
 8007962:	9604      	str	r6, [sp, #16]
 8007964:	9103      	str	r1, [sp, #12]
 8007966:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800796a:	9102      	str	r1, [sp, #8]
 800796c:	9201      	str	r2, [sp, #4]
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	462b      	mov	r3, r5
 8007972:	4a2d      	ldr	r2, [pc, #180]	; (8007a28 <AT_ESP8266_ND+0xfc8>)
 8007974:	4621      	mov	r1, r4
 8007976:	f006 fe6f 	bl	800e658 <FT_String_ND>
 800797a:	4603      	mov	r3, r0
 800797c:	2b01      	cmp	r3, #1
 800797e:	d104      	bne.n	800798a <AT_ESP8266_ND+0xf2a>
					{
						AT_decode=at_multiple_conn_err;
 8007980:	231e      	movs	r3, #30
 8007982:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007986:	f000 bc63 	b.w	8008250 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=0");
 800798a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800798e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	220b      	movs	r2, #11
 8007996:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800799a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800799e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80079a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80079b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80079c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80079d2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80079d6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80079da:	6812      	ldr	r2, [r2, #0]
 80079dc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80079e0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80079e4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80079e8:	6809      	ldr	r1, [r1, #0]
 80079ea:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80079ee:	2600      	movs	r6, #0
 80079f0:	9604      	str	r6, [sp, #16]
 80079f2:	9103      	str	r1, [sp, #12]
 80079f4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80079f8:	9102      	str	r1, [sp, #8]
 80079fa:	9201      	str	r2, [sp, #4]
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	462b      	mov	r3, r5
 8007a00:	4a0a      	ldr	r2, [pc, #40]	; (8007a2c <AT_ESP8266_ND+0xfcc>)
 8007a02:	4621      	mov	r1, r4
 8007a04:	f006 fe28 	bl	800e658 <FT_String_ND>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d110      	bne.n	8007a30 <AT_ESP8266_ND+0xfd0>
					{
						AT_decode=at_no_multiple_conn_err;
 8007a0e:	231f      	movs	r3, #31
 8007a10:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007a14:	f000 bc1c 	b.w	8008250 <AT_ESP8266_ND+0x17f0>
 8007a18:	08010684 	.word	0x08010684
 8007a1c:	08010694 	.word	0x08010694
 8007a20:	080106f8 	.word	0x080106f8
 8007a24:	08010664 	.word	0x08010664
 8007a28:	080106a0 	.word	0x080106a0
 8007a2c:	080106ac 	.word	0x080106ac
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CWJAP");
 8007a30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2208      	movs	r2, #8
 8007a3c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007a40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007a4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007a5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007a6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007a78:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a7c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007a80:	6812      	ldr	r2, [r2, #0]
 8007a82:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007a86:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007a8a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a8e:	6809      	ldr	r1, [r1, #0]
 8007a90:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007a94:	2600      	movs	r6, #0
 8007a96:	9604      	str	r6, [sp, #16]
 8007a98:	9103      	str	r1, [sp, #12]
 8007a9a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a9e:	9102      	str	r1, [sp, #8]
 8007aa0:	9201      	str	r2, [sp, #4]
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	462b      	mov	r3, r5
 8007aa6:	4ac4      	ldr	r2, [pc, #784]	; (8007db8 <AT_ESP8266_ND+0x1358>)
 8007aa8:	4621      	mov	r1, r4
 8007aaa:	f006 fdd5 	bl	800e658 <FT_String_ND>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d103      	bne.n	8007abc <AT_ESP8266_ND+0x105c>
					{
						AT_decode=at_conn_wifi_err;
 8007ab4:	2320      	movs	r3, #32
 8007ab6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007aba:	e3c9      	b.n	8008250 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CIPSTA=");
 8007abc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ac0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	220a      	movs	r2, #10
 8007ac8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007acc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ad0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007ada:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ade:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007ae8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007aec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007af6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007afa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007b04:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b08:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b0c:	6812      	ldr	r2, [r2, #0]
 8007b0e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007b12:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b16:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b1a:	6809      	ldr	r1, [r1, #0]
 8007b1c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007b20:	2600      	movs	r6, #0
 8007b22:	9604      	str	r6, [sp, #16]
 8007b24:	9103      	str	r1, [sp, #12]
 8007b26:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b2a:	9102      	str	r1, [sp, #8]
 8007b2c:	9201      	str	r2, [sp, #4]
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	462b      	mov	r3, r5
 8007b32:	4aa2      	ldr	r2, [pc, #648]	; (8007dbc <AT_ESP8266_ND+0x135c>)
 8007b34:	4621      	mov	r1, r4
 8007b36:	f006 fd8f 	bl	800e658 <FT_String_ND>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d103      	bne.n	8007b48 <AT_ESP8266_ND+0x10e8>
					{
						AT_decode=at_def_ip_err;
 8007b40:	2321      	movs	r3, #33	; 0x21
 8007b42:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007b46:	e383      	b.n	8008250 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("no ip");
 8007b48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2205      	movs	r2, #5
 8007b54:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007b58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007b66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007b74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007b82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007b90:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b94:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b98:	6812      	ldr	r2, [r2, #0]
 8007b9a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007b9e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007ba2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007ba6:	6809      	ldr	r1, [r1, #0]
 8007ba8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007bac:	2600      	movs	r6, #0
 8007bae:	9604      	str	r6, [sp, #16]
 8007bb0:	9103      	str	r1, [sp, #12]
 8007bb2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007bb6:	9102      	str	r1, [sp, #8]
 8007bb8:	9201      	str	r2, [sp, #4]
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	462b      	mov	r3, r5
 8007bbe:	4a80      	ldr	r2, [pc, #512]	; (8007dc0 <AT_ESP8266_ND+0x1360>)
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	f006 fd49 	bl	800e658 <FT_String_ND>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	f040 8341 	bne.w	8008250 <AT_ESP8266_ND+0x17f0>
					{
						AT_decode=at_tcp_noip_err;  //PROCESAR
 8007bce:	2322      	movs	r3, #34	; 0x22
 8007bd0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007bd4:	e33c      	b.n	8008250 <AT_ESP8266_ND+0x17f0>
		else
		{
			 //--------------------------------------------------------------------------------------------------------------//
			 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
			 //--------------------------------------------------------------------------------------------------------------//
			a->_n_fcomp=strlen("WIFI DISCONNECT");
 8007bd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	220f      	movs	r2, #15
 8007be2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 8007be6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007bf4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bf8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007c02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007c10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007c1e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c22:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007c26:	6812      	ldr	r2, [r2, #0]
 8007c28:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007c2c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c30:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c34:	6809      	ldr	r1, [r1, #0]
 8007c36:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007c3a:	2600      	movs	r6, #0
 8007c3c:	9604      	str	r6, [sp, #16]
 8007c3e:	9103      	str	r1, [sp, #12]
 8007c40:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007c44:	9102      	str	r1, [sp, #8]
 8007c46:	9201      	str	r2, [sp, #4]
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	462b      	mov	r3, r5
 8007c4c:	4a5d      	ldr	r2, [pc, #372]	; (8007dc4 <AT_ESP8266_ND+0x1364>)
 8007c4e:	4621      	mov	r1, r4
 8007c50:	f006 fd02 	bl	800e658 <FT_String_ND>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d112      	bne.n	8007c80 <AT_ESP8266_ND+0x1220>
				{
					 AT_decode=at_wifi_disconnect;
 8007c5a:	230a      	movs	r3, #10
 8007c5c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					 a->_debug_WF_DISCONNECT++;
 8007c60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 8007c7e:	e2e7      	b.n	8008250 <AT_ESP8266_ND+0x17f0>
				}
			else
			{
			//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
			a->_n_fcomp=strlen(",CLOSED\r\n");
 8007c80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2209      	movs	r2, #9
 8007c8c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007c90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007c9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ca2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007cac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007cba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007cc8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007ccc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007cd0:	6812      	ldr	r2, [r2, #0]
 8007cd2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007cd6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007cda:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007cde:	6809      	ldr	r1, [r1, #0]
 8007ce0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007ce4:	2600      	movs	r6, #0
 8007ce6:	9604      	str	r6, [sp, #16]
 8007ce8:	9103      	str	r1, [sp, #12]
 8007cea:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007cee:	9102      	str	r1, [sp, #8]
 8007cf0:	9201      	str	r2, [sp, #4]
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	462b      	mov	r3, r5
 8007cf6:	4a34      	ldr	r2, [pc, #208]	; (8007dc8 <AT_ESP8266_ND+0x1368>)
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	f006 fcad 	bl	800e658 <FT_String_ND>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d112      	bne.n	8007d2a <AT_ESP8266_ND+0x12ca>
				{
					AT_decode=at_tcp_client_desc;
 8007d04:	2319      	movs	r3, #25
 8007d06:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					a->_debug_CLOSED++;
 8007d0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
 8007d28:	e292      	b.n	8008250 <AT_ESP8266_ND+0x17f0>
			//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
			// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
			// primero ve el SEND OKse queda en el estado 705 por error al     //
			//  enviar														  //
			//-----------------------------------------------------------------//
			a->_n_fcomp=strlen("CLOSED\r\n");
 8007d2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2208      	movs	r2, #8
 8007d36:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007d3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007d48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007d56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007d64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007d72:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d76:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d7a:	6812      	ldr	r2, [r2, #0]
 8007d7c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007d80:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007d84:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007d88:	6809      	ldr	r1, [r1, #0]
 8007d8a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007d8e:	2600      	movs	r6, #0
 8007d90:	9604      	str	r6, [sp, #16]
 8007d92:	9103      	str	r1, [sp, #12]
 8007d94:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007d98:	9102      	str	r1, [sp, #8]
 8007d9a:	9201      	str	r2, [sp, #4]
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	462b      	mov	r3, r5
 8007da0:	4a0a      	ldr	r2, [pc, #40]	; (8007dcc <AT_ESP8266_ND+0x136c>)
 8007da2:	4621      	mov	r1, r4
 8007da4:	f006 fc58 	bl	800e658 <FT_String_ND>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d110      	bne.n	8007dd0 <AT_ESP8266_ND+0x1370>
				{
					AT_decode=at_tcp_desconectado;
 8007dae:	2310      	movs	r3, #16
 8007db0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007db4:	e24c      	b.n	8008250 <AT_ESP8266_ND+0x17f0>
 8007db6:	bf00      	nop
 8007db8:	0801070c 	.word	0x0801070c
 8007dbc:	080106b8 	.word	0x080106b8
 8007dc0:	08010718 	.word	0x08010718
 8007dc4:	08010720 	.word	0x08010720
 8007dc8:	08010730 	.word	0x08010730
 8007dcc:	080106d4 	.word	0x080106d4
				}
			else
			{

			//------------------ENVIADO = RECIBIDO ------------------//
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8007dd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007dde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007de2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007dec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007df0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f203 4594 	addw	r5, r3, #1172	; 0x494
 8007dfa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dfe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f603 46dc 	addw	r6, r3, #3292	; 0xcdc
 8007e08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007e1c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007e20:	6812      	ldr	r2, [r2, #0]
 8007e22:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007e26:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007e2a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007e2e:	6809      	ldr	r1, [r1, #0]
 8007e30:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007e34:	2300      	movs	r3, #0
 8007e36:	9304      	str	r3, [sp, #16]
 8007e38:	9103      	str	r1, [sp, #12]
 8007e3a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007e3e:	9102      	str	r1, [sp, #8]
 8007e40:	9201      	str	r2, [sp, #4]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	4633      	mov	r3, r6
 8007e48:	462a      	mov	r2, r5
 8007e4a:	4621      	mov	r1, r4
 8007e4c:	f006 fc04 	bl	800e658 <FT_String_ND>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d112      	bne.n	8007e7c <AT_ESP8266_ND+0x141c>
				 {
				 	if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8007e56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f000 81f3 	beq.w	8008250 <AT_ESP8266_ND+0x17f0>
				 		{
				 		//AT_decode=10;
				 		a->_n_orig=0;
 8007e6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
 8007e7a:	e1e9      	b.n	8008250 <AT_ESP8266_ND+0x17f0>
				 		}
				 	}
			else
			{
			//------------------PAQUETE ENVIADO EN FALLA--------------//
			a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8007e7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	220d      	movs	r2, #13
 8007e88:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 8007e8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007e9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007ea8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007eb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007ec4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007ec8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ecc:	6812      	ldr	r2, [r2, #0]
 8007ece:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ed2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007ed6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007eda:	6809      	ldr	r1, [r1, #0]
 8007edc:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007ee0:	2600      	movs	r6, #0
 8007ee2:	9604      	str	r6, [sp, #16]
 8007ee4:	9103      	str	r1, [sp, #12]
 8007ee6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007eea:	9102      	str	r1, [sp, #8]
 8007eec:	9201      	str	r2, [sp, #4]
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	462b      	mov	r3, r5
 8007ef2:	4aaf      	ldr	r2, [pc, #700]	; (80081b0 <AT_ESP8266_ND+0x1750>)
 8007ef4:	4621      	mov	r1, r4
 8007ef6:	f006 fbaf 	bl	800e658 <FT_String_ND>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d112      	bne.n	8007f26 <AT_ESP8266_ND+0x14c6>
			 	{
			 	 AT_decode=at_tcp_enviado_error;
 8007f00:	2312      	movs	r3, #18
 8007f02:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 	 a->_debug_FAIL++;
 8007f06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 8007f14:	1c5a      	adds	r2, r3, #1
 8007f16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 8007f24:	e194      	b.n	8008250 <AT_ESP8266_ND+0x17f0>



			//------------------OBTENCI�N DE IP------------------//
			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8007f26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	220d      	movs	r2, #13
 8007f32:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Obtiene IP
 8007f36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007f44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007f52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007f60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007f6e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007f72:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007f76:	6812      	ldr	r2, [r2, #0]
 8007f78:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007f7c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007f80:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007f84:	6809      	ldr	r1, [r1, #0]
 8007f86:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007f8a:	2600      	movs	r6, #0
 8007f8c:	9604      	str	r6, [sp, #16]
 8007f8e:	9103      	str	r1, [sp, #12]
 8007f90:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007f94:	9102      	str	r1, [sp, #8]
 8007f96:	9201      	str	r2, [sp, #4]
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	462b      	mov	r3, r5
 8007f9c:	4a85      	ldr	r2, [pc, #532]	; (80081b4 <AT_ESP8266_ND+0x1754>)
 8007f9e:	4621      	mov	r1, r4
 8007fa0:	f006 fb5a 	bl	800e658 <FT_String_ND>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d112      	bne.n	8007fd0 <AT_ESP8266_ND+0x1570>
				{
					a->_debug_WF_GOTIP++;
 8007faa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8007fb8:	1c5a      	adds	r2, r3, #1
 8007fba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
					AT_decode=at_wifi_gotip;
 8007fc8:	230c      	movs	r3, #12
 8007fca:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007fce:	e13f      	b.n	8008250 <AT_ESP8266_ND+0x17f0>
				}
			else
			{
				//------------------WIFI CONECTADA------------------//
			a->_n_fcomp=strlen("WIFI CONNECTED");
 8007fd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	220e      	movs	r2, #14
 8007fdc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//WIFI CONECTADA
 8007fe0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fe4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007fee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ff2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007ffc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008000:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800800a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800800e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008018:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800801c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008020:	6812      	ldr	r2, [r2, #0]
 8008022:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8008026:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800802a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800802e:	6809      	ldr	r1, [r1, #0]
 8008030:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8008034:	2600      	movs	r6, #0
 8008036:	9604      	str	r6, [sp, #16]
 8008038:	9103      	str	r1, [sp, #12]
 800803a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800803e:	9102      	str	r1, [sp, #8]
 8008040:	9201      	str	r2, [sp, #4]
 8008042:	9300      	str	r3, [sp, #0]
 8008044:	462b      	mov	r3, r5
 8008046:	4a5c      	ldr	r2, [pc, #368]	; (80081b8 <AT_ESP8266_ND+0x1758>)
 8008048:	4621      	mov	r1, r4
 800804a:	f006 fb05 	bl	800e658 <FT_String_ND>
 800804e:	4603      	mov	r3, r0
 8008050:	2b01      	cmp	r3, #1
 8008052:	d112      	bne.n	800807a <AT_ESP8266_ND+0x161a>
				{
					a->_debug_WF_CNNCTD++;
 8008054:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008058:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8008062:	1c5a      	adds	r2, r3, #1
 8008064:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008068:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
						 AT_decode=at_wifi_connected;
 8008072:	230b      	movs	r3, #11
 8008074:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8008078:	e0ea      	b.n	8008250 <AT_ESP8266_ND+0x17f0>
				}
			else
			{

			//------------------CLIENTE TCP CONECTADO------------------//
			a->_n_fcomp=strlen(",CONNECT\r\n");
 800807a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800807e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	220a      	movs	r2, #10
 8008086:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 800808a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800808e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8008098:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800809c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80080a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80080b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80080c2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80080c6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80080ca:	6812      	ldr	r2, [r2, #0]
 80080cc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80080d0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80080d4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80080d8:	6809      	ldr	r1, [r1, #0]
 80080da:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80080de:	2600      	movs	r6, #0
 80080e0:	9604      	str	r6, [sp, #16]
 80080e2:	9103      	str	r1, [sp, #12]
 80080e4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80080e8:	9102      	str	r1, [sp, #8]
 80080ea:	9201      	str	r2, [sp, #4]
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	462b      	mov	r3, r5
 80080f0:	4a32      	ldr	r2, [pc, #200]	; (80081bc <AT_ESP8266_ND+0x175c>)
 80080f2:	4621      	mov	r1, r4
 80080f4:	f006 fab0 	bl	800e658 <FT_String_ND>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d112      	bne.n	8008124 <AT_ESP8266_ND+0x16c4>
				  {
					  AT_decode=at_tcp_client_conectado;
 80080fe:	2318      	movs	r3, #24
 8008100:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					  a->_debug_CONNECT++;
 8008104:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008108:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008118:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
 8008122:	e095      	b.n	8008250 <AT_ESP8266_ND+0x17f0>
				  }
			else
			{

			//------------------FALLA------------------//
			a->_n_fcomp=strlen("\r\nFAIL\r\n");
 8008124:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008128:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2208      	movs	r2, #8
 8008130:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8008134:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008138:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8008142:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008146:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8008150:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008154:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800815e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008162:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800816c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008170:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008174:	6812      	ldr	r2, [r2, #0]
 8008176:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800817a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800817e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008182:	6809      	ldr	r1, [r1, #0]
 8008184:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8008188:	2600      	movs	r6, #0
 800818a:	9604      	str	r6, [sp, #16]
 800818c:	9103      	str	r1, [sp, #12]
 800818e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008192:	9102      	str	r1, [sp, #8]
 8008194:	9201      	str	r2, [sp, #4]
 8008196:	9300      	str	r3, [sp, #0]
 8008198:	462b      	mov	r3, r5
 800819a:	4a09      	ldr	r2, [pc, #36]	; (80081c0 <AT_ESP8266_ND+0x1760>)
 800819c:	4621      	mov	r1, r4
 800819e:	f006 fa5b 	bl	800e658 <FT_String_ND>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d10d      	bne.n	80081c4 <AT_ESP8266_ND+0x1764>
				{
					AT_decode=at_fail;
 80081a8:	2303      	movs	r3, #3
 80081aa:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80081ae:	e04f      	b.n	8008250 <AT_ESP8266_ND+0x17f0>
 80081b0:	0801073c 	.word	0x0801073c
 80081b4:	0801074c 	.word	0x0801074c
 80081b8:	0801075c 	.word	0x0801075c
 80081bc:	0801076c 	.word	0x0801076c
 80081c0:	08010778 	.word	0x08010778
				}
			else
			{
			//------------------busy processing------------------//
				a->_n_fcomp=strlen("busy p...");
 80081c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2209      	movs	r2, #9
 80081d0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 80081d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80081e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80081f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80081fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008202:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800820c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008210:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008214:	6812      	ldr	r2, [r2, #0]
 8008216:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800821a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800821e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008222:	6809      	ldr	r1, [r1, #0]
 8008224:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8008228:	2600      	movs	r6, #0
 800822a:	9604      	str	r6, [sp, #16]
 800822c:	9103      	str	r1, [sp, #12]
 800822e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008232:	9102      	str	r1, [sp, #8]
 8008234:	9201      	str	r2, [sp, #4]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	462b      	mov	r3, r5
 800823a:	4a77      	ldr	r2, [pc, #476]	; (8008418 <AT_ESP8266_ND+0x19b8>)
 800823c:	4621      	mov	r1, r4
 800823e:	f006 fa0b 	bl	800e658 <FT_String_ND>
 8008242:	4603      	mov	r3, r0
 8008244:	2b01      	cmp	r3, #1
 8008246:	d103      	bne.n	8008250 <AT_ESP8266_ND+0x17f0>
					{
					AT_decode=at_busy_p;
 8008248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800824c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}}}}}}}}}}
	}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 8008250:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008254:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800825e:	3b01      	subs	r3, #1
 8008260:	2b08      	cmp	r3, #8
 8008262:	f201 84c6 	bhi.w	8009bf2 <AT_ESP8266_ND+0x3192>
 8008266:	a201      	add	r2, pc, #4	; (adr r2, 800826c <AT_ESP8266_ND+0x180c>)
 8008268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826c:	08008291 	.word	0x08008291
 8008270:	08008421 	.word	0x08008421
 8008274:	080086a3 	.word	0x080086a3
 8008278:	08008821 	.word	0x08008821
 800827c:	080089f9 	.word	0x080089f9
 8008280:	08008ccd 	.word	0x08008ccd
 8008284:	08008f85 	.word	0x08008f85
 8008288:	0800949d 	.word	0x0800949d
 800828c:	08009673 	.word	0x08009673
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008290:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008294:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2200      	movs	r2, #0
 800829c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 80082a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d14f      	bne.n	8008352 <AT_ESP8266_ND+0x18f2>
 80082b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d04b      	beq.n	8008352 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_error)
 80082ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d047      	beq.n	8008352 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_restart)
 80082c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082c6:	2b04      	cmp	r3, #4
 80082c8:	d043      	beq.n	8008352 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_tcp_enviado_ok))
 80082ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082ce:	2b13      	cmp	r3, #19
 80082d0:	d03f      	beq.n	8008352 <AT_ESP8266_ND+0x18f2>
						{
						a->_pasos=0;
 80082d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2200      	movs	r2, #0
 80082de:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80082e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 80082f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008300:	4620      	mov	r0, r4
 8008302:	f7f7 ff77 	bl	80001f4 <strlen>
 8008306:	4603      	mov	r3, r0
 8008308:	4423      	add	r3, r4
 800830a:	4a44      	ldr	r2, [pc, #272]	; (800841c <AT_ESP8266_ND+0x19bc>)
 800830c:	461c      	mov	r4, r3
 800830e:	4613      	mov	r3, r2
 8008310:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008312:	6020      	str	r0, [r4, #0]
 8008314:	6061      	str	r1, [r4, #4]
 8008316:	60a2      	str	r2, [r4, #8]
 8008318:	881b      	ldrh	r3, [r3, #0]
 800831a:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 800831c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008320:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800832a:	4618      	mov	r0, r3
 800832c:	f7f7 ff62 	bl	80001f4 <strlen>
 8008330:	4603      	mov	r3, r0
 8008332:	461a      	mov	r2, r3
 8008334:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008338:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=100;
 8008342:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008346:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2264      	movs	r2, #100	; 0x64
 800834e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 8008352:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008356:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008360:	1c5a      	adds	r2, r3, #1
 8008362:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008366:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 8008370:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008374:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800837e:	2b00      	cmp	r3, #0
 8008380:	d11b      	bne.n	80083ba <AT_ESP8266_ND+0x195a>
 8008382:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008386:	2b01      	cmp	r3, #1
 8008388:	d023      	beq.n	80083d2 <AT_ESP8266_ND+0x1972>
 800838a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800838e:	2b1c      	cmp	r3, #28
 8008390:	d01f      	beq.n	80083d2 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_error)
 8008392:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008396:	2b02      	cmp	r3, #2
 8008398:	d01b      	beq.n	80083d2 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_restart)
 800839a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800839e:	2b04      	cmp	r3, #4
 80083a0:	d017      	beq.n	80083d2 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_wifi_connected)
 80083a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083a6:	2b0b      	cmp	r3, #11
 80083a8:	d013      	beq.n	80083d2 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_wifi_gotip)
 80083aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083ae:	2b0c      	cmp	r3, #12
 80083b0:	d00f      	beq.n	80083d2 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_tcp_enviado_ok)))
 80083b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083b6:	2b13      	cmp	r3, #19
 80083b8:	d00b      	beq.n	80083d2 <AT_ESP8266_ND+0x1972>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 80083ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80083c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80083cc:	4293      	cmp	r3, r2
 80083ce:	f341 841a 	ble.w	8009c06 <AT_ESP8266_ND+0x31a6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80083d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80083e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80083e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80083f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2200      	movs	r2, #0
 8008400:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008404:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008408:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2200      	movs	r2, #0
 8008410:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}

			}
			break;
 8008414:	f001 bbf7 	b.w	8009c06 <AT_ESP8266_ND+0x31a6>
 8008418:	08010784 	.word	0x08010784
 800841c:	08010790 	.word	0x08010790
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008420:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008424:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8008430:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008434:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800843e:	2b01      	cmp	r3, #1
 8008440:	f040 80c8 	bne.w	80085d4 <AT_ESP8266_ND+0x1b74>
 8008444:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008448:	2b01      	cmp	r3, #1
 800844a:	f000 80c3 	beq.w	80085d4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_error)
 800844e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008452:	2b02      	cmp	r3, #2
 8008454:	f000 80be 	beq.w	80085d4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_fail)
 8008458:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800845c:	2b03      	cmp	r3, #3
 800845e:	f000 80b9 	beq.w	80085d4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_restart)
 8008462:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008466:	2b04      	cmp	r3, #4
 8008468:	f000 80b4 	beq.w	80085d4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_disconnect)
 800846c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008470:	2b0a      	cmp	r3, #10
 8008472:	f000 80af 	beq.w	80085d4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_connected)
 8008476:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800847a:	2b0b      	cmp	r3, #11
 800847c:	f000 80aa 	beq.w	80085d4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_gotip))
 8008480:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008484:	2b0c      	cmp	r3, #12
 8008486:	f000 80a5 	beq.w	80085d4 <AT_ESP8266_ND+0x1b74>
						{
						a->_pasos=0;
 800848a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800848e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2200      	movs	r2, #0
 8008496:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800849a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800849e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 80084aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80084b8:	4620      	mov	r0, r4
 80084ba:	f7f7 fe9b 	bl	80001f4 <strlen>
 80084be:	4603      	mov	r3, r0
 80084c0:	4423      	add	r3, r4
 80084c2:	49d5      	ldr	r1, [pc, #852]	; (8008818 <AT_ESP8266_ND+0x1db8>)
 80084c4:	461a      	mov	r2, r3
 80084c6:	460b      	mov	r3, r1
 80084c8:	cb03      	ldmia	r3!, {r0, r1}
 80084ca:	6010      	str	r0, [r2, #0]
 80084cc:	6051      	str	r1, [r2, #4]
 80084ce:	881b      	ldrh	r3, [r3, #0]
 80084d0:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 80084d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80084e0:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80084e4:	2201      	movs	r2, #1
 80084e6:	4618      	mov	r0, r3
 80084e8:	f006 fe6f 	bl	800f1ca <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 80084ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80084fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	1d9d      	adds	r5, r3, #6
 8008506:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800850a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	3306      	adds	r3, #6
 8008512:	4618      	mov	r0, r3
 8008514:	f7f7 fe6e 	bl	80001f4 <strlen>
 8008518:	4603      	mov	r3, r0
 800851a:	461a      	mov	r2, r3
 800851c:	4629      	mov	r1, r5
 800851e:	4620      	mov	r0, r4
 8008520:	f006 fe53 	bl	800f1ca <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 8008524:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008528:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008532:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008536:	4618      	mov	r0, r3
 8008538:	f7f7 fe5c 	bl	80001f4 <strlen>
 800853c:	4602      	mov	r2, r0
 800853e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008542:	4619      	mov	r1, r3
 8008544:	4620      	mov	r0, r4
 8008546:	f006 fe40 	bl	800f1ca <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 800854a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800854e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008558:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800855c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8008566:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800856a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	3326      	adds	r3, #38	; 0x26
 8008572:	4618      	mov	r0, r3
 8008574:	f7f7 fe3e 	bl	80001f4 <strlen>
 8008578:	4603      	mov	r3, r0
 800857a:	461a      	mov	r2, r3
 800857c:	4629      	mov	r1, r5
 800857e:	4620      	mov	r0, r4
 8008580:	f006 fe23 	bl	800f1ca <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 8008584:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008588:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008592:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8008596:	2203      	movs	r2, #3
 8008598:	4618      	mov	r0, r3
 800859a:	f006 fe16 	bl	800f1ca <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 800859e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7f7 fe21 	bl	80001f4 <strlen>
 80085b2:	4603      	mov	r3, r0
 80085b4:	461a      	mov	r2, r3
 80085b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=200;
 80085c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	22c8      	movs	r2, #200	; 0xc8
 80085d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 80085d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80085e2:	1c5a      	adds	r2, r3, #1
 80085e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 80085f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008600:	2b00      	cmp	r3, #0
 8008602:	d11b      	bne.n	800863c <AT_ESP8266_ND+0x1bdc>
 8008604:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008608:	2b01      	cmp	r3, #1
 800860a:	d023      	beq.n	8008654 <AT_ESP8266_ND+0x1bf4>
 800860c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008610:	2b02      	cmp	r3, #2
 8008612:	d01f      	beq.n	8008654 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_fail)
 8008614:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008618:	2b03      	cmp	r3, #3
 800861a:	d01b      	beq.n	8008654 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_restart)
 800861c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008620:	2b04      	cmp	r3, #4
 8008622:	d017      	beq.n	8008654 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_disconnect)
 8008624:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008628:	2b0a      	cmp	r3, #10
 800862a:	d013      	beq.n	8008654 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_connected)
 800862c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008630:	2b0b      	cmp	r3, #11
 8008632:	d00f      	beq.n	8008654 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_gotip)))
 8008634:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008638:	2b0c      	cmp	r3, #12
 800863a:	d00b      	beq.n	8008654 <AT_ESP8266_ND+0x1bf4>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 800863c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008640:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 800864a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800864e:	4293      	cmp	r3, r2
 8008650:	f341 82db 	ble.w	8009c0a <AT_ESP8266_ND+0x31aa>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008654:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008658:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008662:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 8008666:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800866a:	2b0a      	cmp	r3, #10
 800866c:	d00f      	beq.n	800868e <AT_ESP8266_ND+0x1c2e>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 800866e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008672:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2200      	movs	r2, #0
 800867a:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							a->_ejecucion=0;
 800867e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008682:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2200      	movs	r2, #0
 800868a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 800868e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008692:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2200      	movs	r2, #0
 800869a:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 800869e:	f001 bab4 	b.w	8009c0a <AT_ESP8266_ND+0x31aa>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80086a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 80086b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d14d      	bne.n	8008760 <AT_ESP8266_ND+0x1d00>
 80086c4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086c8:	2b04      	cmp	r3, #4
 80086ca:	d049      	beq.n	8008760 <AT_ESP8266_ND+0x1d00>
 80086cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086d0:	2b0a      	cmp	r3, #10
 80086d2:	d045      	beq.n	8008760 <AT_ESP8266_ND+0x1d00>
 80086d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086d8:	2b0d      	cmp	r3, #13
 80086da:	d041      	beq.n	8008760 <AT_ESP8266_ND+0x1d00>
						{
						a->_pasos=0;
 80086dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80086ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",strlen("AT+CWQAP\r\n"));
 80086fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008700:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800870a:	4620      	mov	r0, r4
 800870c:	f7f7 fd72 	bl	80001f4 <strlen>
 8008710:	4603      	mov	r3, r0
 8008712:	4423      	add	r3, r4
 8008714:	4941      	ldr	r1, [pc, #260]	; (800881c <AT_ESP8266_ND+0x1dbc>)
 8008716:	461a      	mov	r2, r3
 8008718:	460b      	mov	r3, r1
 800871a:	cb03      	ldmia	r3!, {r0, r1}
 800871c:	6010      	str	r0, [r2, #0]
 800871e:	6051      	str	r1, [r2, #4]
 8008720:	8819      	ldrh	r1, [r3, #0]
 8008722:	789b      	ldrb	r3, [r3, #2]
 8008724:	8111      	strh	r1, [r2, #8]
 8008726:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008728:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800872c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008736:	4618      	mov	r0, r3
 8008738:	f7f7 fd5c 	bl	80001f4 <strlen>
 800873c:	4603      	mov	r3, r0
 800873e:	461a      	mov	r2, r3
 8008740:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008744:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 800874e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008752:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800875c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008760:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008764:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800876e:	1c5a      	adds	r2, r3, #1
 8008770:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008774:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 800877e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008782:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800878c:	2b00      	cmp	r3, #0
 800878e:	d113      	bne.n	80087b8 <AT_ESP8266_ND+0x1d58>
 8008790:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008794:	2b0a      	cmp	r3, #10
 8008796:	d01b      	beq.n	80087d0 <AT_ESP8266_ND+0x1d70>
 8008798:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800879c:	2b0b      	cmp	r3, #11
 800879e:	d017      	beq.n	80087d0 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_wifi_gotip)
 80087a0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087a4:	2b0c      	cmp	r3, #12
 80087a6:	d013      	beq.n	80087d0 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_restart	)
 80087a8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087ac:	2b04      	cmp	r3, #4
 80087ae:	d00f      	beq.n	80087d0 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_deconectar_ok )))
 80087b0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087b4:	2b0d      	cmp	r3, #13
 80087b6:	d00b      	beq.n	80087d0 <AT_ESP8266_ND+0x1d70>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80087b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80087c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ca:	4293      	cmp	r3, r2
 80087cc:	f341 821f 	ble.w	8009c0e <AT_ESP8266_ND+0x31ae>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80087d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80087de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80087e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80087f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008802:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008806:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2200      	movs	r2, #0
 800880e:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008812:	f001 b9fc 	b.w	8009c0e <AT_ESP8266_ND+0x31ae>
 8008816:	bf00      	nop
 8008818:	080107a0 	.word	0x080107a0
 800881c:	080107ac 	.word	0x080107ac
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008820:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008824:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 8008830:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008834:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800883e:	2b01      	cmp	r3, #1
 8008840:	d16b      	bne.n	800891a <AT_ESP8266_ND+0x1eba>
 8008842:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008846:	2b04      	cmp	r3, #4
 8008848:	d067      	beq.n	800891a <AT_ESP8266_ND+0x1eba>
									   &&(AT_decode!=at_ok)
 800884a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800884e:	2b01      	cmp	r3, #1
 8008850:	d063      	beq.n	800891a <AT_ESP8266_ND+0x1eba>
									   &&(AT_decode!=at_error))
 8008852:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008856:	2b02      	cmp	r3, #2
 8008858:	d05f      	beq.n	800891a <AT_ESP8266_ND+0x1eba>
						{
						a->_pasos=0;
 800885a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800885e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2200      	movs	r2, #0
 8008866:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800886a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800886e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2201      	movs	r2, #1
 8008876:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 800887a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800887e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8008888:	2b01      	cmp	r3, #1
 800888a:	d115      	bne.n	80088b8 <AT_ESP8266_ND+0x1e58>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 800888c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008890:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800889a:	4620      	mov	r0, r4
 800889c:	f7f7 fcaa 	bl	80001f4 <strlen>
 80088a0:	4603      	mov	r3, r0
 80088a2:	4423      	add	r3, r4
 80088a4:	4a52      	ldr	r2, [pc, #328]	; (80089f0 <AT_ESP8266_ND+0x1f90>)
 80088a6:	461c      	mov	r4, r3
 80088a8:	4613      	mov	r3, r2
 80088aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80088ac:	6020      	str	r0, [r4, #0]
 80088ae:	6061      	str	r1, [r4, #4]
 80088b0:	60a2      	str	r2, [r4, #8]
 80088b2:	881b      	ldrh	r3, [r3, #0]
 80088b4:	81a3      	strh	r3, [r4, #12]
 80088b6:	e014      	b.n	80088e2 <AT_ESP8266_ND+0x1e82>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 80088b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80088c6:	4620      	mov	r0, r4
 80088c8:	f7f7 fc94 	bl	80001f4 <strlen>
 80088cc:	4603      	mov	r3, r0
 80088ce:	4423      	add	r3, r4
 80088d0:	4a48      	ldr	r2, [pc, #288]	; (80089f4 <AT_ESP8266_ND+0x1f94>)
 80088d2:	461c      	mov	r4, r3
 80088d4:	4613      	mov	r3, r2
 80088d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80088d8:	6020      	str	r0, [r4, #0]
 80088da:	6061      	str	r1, [r4, #4]
 80088dc:	60a2      	str	r2, [r4, #8]
 80088de:	881b      	ldrh	r3, [r3, #0]
 80088e0:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 80088e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7f7 fc7f 	bl	80001f4 <strlen>
 80088f6:	4603      	mov	r3, r0
 80088f8:	461a      	mov	r2, r3
 80088fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 8008908:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800890c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 800891a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800891e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008928:	1c5a      	adds	r2, r3, #1
 800892a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800892e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008938:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800893c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008946:	2b00      	cmp	r3, #0
 8008948:	d123      	bne.n	8008992 <AT_ESP8266_ND+0x1f32>
 800894a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800894e:	2b01      	cmp	r3, #1
 8008950:	d02b      	beq.n	80089aa <AT_ESP8266_ND+0x1f4a>
 8008952:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008956:	2b0b      	cmp	r3, #11
 8008958:	d027      	beq.n	80089aa <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_wifi_gotip)
 800895a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800895e:	2b0c      	cmp	r3, #12
 8008960:	d023      	beq.n	80089aa <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_restart)
 8008962:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008966:	2b04      	cmp	r3, #4
 8008968:	d01f      	beq.n	80089aa <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_error)
 800896a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800896e:	2b02      	cmp	r3, #2
 8008970:	d01b      	beq.n	80089aa <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_multiple_conn_ok)
 8008972:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008976:	2b07      	cmp	r3, #7
 8008978:	d017      	beq.n	80089aa <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_no_multiple_conn_ok)
 800897a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800897e:	2b08      	cmp	r3, #8
 8008980:	d013      	beq.n	80089aa <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_multiple_conn_err)
 8008982:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008986:	2b1e      	cmp	r3, #30
 8008988:	d00f      	beq.n	80089aa <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_no_multiple_conn_err)))
 800898a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800898e:	2b1f      	cmp	r3, #31
 8008990:	d00b      	beq.n	80089aa <AT_ESP8266_ND+0x1f4a>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008992:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008996:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80089a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80089a4:	4293      	cmp	r3, r2
 80089a6:	f341 8134 	ble.w	8009c12 <AT_ESP8266_ND+0x31b2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80089aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80089b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80089bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80089cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80089dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 80089ec:	f001 b911 	b.w	8009c12 <AT_ESP8266_ND+0x31b2>
 80089f0:	080107b8 	.word	0x080107b8
 80089f4:	080107c8 	.word	0x080107c8
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80089f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 8008a08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	f040 80f3 	bne.w	8008c02 <AT_ESP8266_ND+0x21a2>
 8008a1c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a20:	2b04      	cmp	r3, #4
 8008a22:	f000 80ee 	beq.w	8008c02 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_ok)
 8008a26:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	f000 80e9 	beq.w	8008c02 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_error)
 8008a30:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	f000 80e4 	beq.w	8008c02 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_def_ip_err)
 8008a3a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a3e:	2b21      	cmp	r3, #33	; 0x21
 8008a40:	f000 80df 	beq.w	8008c02 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_def_ip_ok))
 8008a44:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a48:	2b1b      	cmp	r3, #27
 8008a4a:	f000 80da 	beq.w	8008c02 <AT_ESP8266_ND+0x21a2>
						{
						a->_pasos=0;
 8008a4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008a5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 8008a6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f7f7 fbb9 	bl	80001f4 <strlen>
 8008a82:	4603      	mov	r3, r0
 8008a84:	4423      	add	r3, r4
 8008a86:	4990      	ldr	r1, [pc, #576]	; (8008cc8 <AT_ESP8266_ND+0x2268>)
 8008a88:	461a      	mov	r2, r3
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	cb03      	ldmia	r3!, {r0, r1}
 8008a8e:	6010      	str	r0, [r2, #0]
 8008a90:	6051      	str	r1, [r2, #4]
 8008a92:	8819      	ldrh	r1, [r3, #0]
 8008a94:	789b      	ldrb	r3, [r3, #2]
 8008a96:	8111      	strh	r1, [r2, #8]
 8008a98:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 8008a9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008aa8:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008aac:	2201      	movs	r2, #1
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f006 fb8b 	bl	800f1ca <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8008ab4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ab8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008ac2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ac6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8008ad0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ad4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	334c      	adds	r3, #76	; 0x4c
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7f7 fb89 	bl	80001f4 <strlen>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	4629      	mov	r1, r5
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f006 fb6e 	bl	800f1ca <strncat>
						strncat(a->_uart2snd,separador,3);
 8008aee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008af2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008afc:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008b00:	2203      	movs	r2, #3
 8008b02:	4618      	mov	r0, r3
 8008b04:	f006 fb61 	bl	800f1ca <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 8008b08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008b16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f103 0562 	add.w	r5, r3, #98	; 0x62
 8008b24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	3362      	adds	r3, #98	; 0x62
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7f7 fb5f 	bl	80001f4 <strlen>
 8008b36:	4603      	mov	r3, r0
 8008b38:	461a      	mov	r2, r3
 8008b3a:	4629      	mov	r1, r5
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f006 fb44 	bl	800f1ca <strncat>
						strncat(a->_uart2snd,separador,3);
 8008b42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008b50:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008b54:	2203      	movs	r2, #3
 8008b56:	4618      	mov	r0, r3
 8008b58:	f006 fb37 	bl	800f1ca <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8008b5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008b6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f103 0572 	add.w	r5, r3, #114	; 0x72
 8008b78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3372      	adds	r3, #114	; 0x72
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7f7 fb35 	bl	80001f4 <strlen>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	4629      	mov	r1, r5
 8008b90:	4620      	mov	r0, r4
 8008b92:	f006 fb1a 	bl	800f1ca <strncat>
						strncat(a->_uart2snd,&comillas,1);
 8008b96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ba4:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008ba8:	2201      	movs	r2, #1
 8008baa:	4618      	mov	r0, r3
 8008bac:	f006 fb0d 	bl	800f1ca <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008bb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008bbe:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f006 fb00 	bl	800f1ca <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8008bca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7f7 fb0b 	bl	80001f4 <strlen>
 8008bde:	4603      	mov	r3, r0
 8008be0:	461a      	mov	r2, r3
 8008be2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008be6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008bf0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bf4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008bfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008c02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008c10:	1c5a      	adds	r2, r3, #1
 8008c12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008c20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d11b      	bne.n	8008c6a <AT_ESP8266_ND+0x220a>
 8008c32:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d023      	beq.n	8008c82 <AT_ESP8266_ND+0x2222>
 8008c3a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c3e:	2b0b      	cmp	r3, #11
 8008c40:	d01f      	beq.n	8008c82 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_wifi_gotip)
 8008c42:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c46:	2b0c      	cmp	r3, #12
 8008c48:	d01b      	beq.n	8008c82 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_restart)
 8008c4a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c4e:	2b04      	cmp	r3, #4
 8008c50:	d017      	beq.n	8008c82 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_error)
 8008c52:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d013      	beq.n	8008c82 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_def_ip_err)
 8008c5a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c5e:	2b21      	cmp	r3, #33	; 0x21
 8008c60:	d00f      	beq.n	8008c82 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_def_ip_ok)))
 8008c62:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c66:	2b1b      	cmp	r3, #27
 8008c68:	d00b      	beq.n	8008c82 <AT_ESP8266_ND+0x2222>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008c6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	f340 87ca 	ble.w	8009c16 <AT_ESP8266_ND+0x31b6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008c82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008c90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008c94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008ca4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ca8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008cb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008cc4:	f000 bfa7 	b.w	8009c16 <AT_ESP8266_ND+0x31b6>
 8008cc8:	080106b8 	.word	0x080106b8
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008ccc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8008cdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ce0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	f040 80e2 	bne.w	8008eb4 <AT_ESP8266_ND+0x2454>
 8008cf0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cf4:	2b0b      	cmp	r3, #11
 8008cf6:	f000 80dd 	beq.w	8008eb4 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_wifi_gotip)
 8008cfa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cfe:	2b0c      	cmp	r3, #12
 8008d00:	f000 80d8 	beq.w	8008eb4 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8008d04:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d08:	2b0e      	cmp	r3, #14
 8008d0a:	f000 80d3 	beq.w	8008eb4 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_conectado)
 8008d0e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d12:	2b0f      	cmp	r3, #15
 8008d14:	f000 80ce 	beq.w	8008eb4 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_desconectado)
 8008d18:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d1c:	2b10      	cmp	r3, #16
 8008d1e:	f000 80c9 	beq.w	8008eb4 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_error))
 8008d22:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	f000 80c4 	beq.w	8008eb4 <AT_ESP8266_ND+0x2454>
						{
						a->_pasos=0;
 8008d2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008d3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8008d4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f7f7 fa4a 	bl	80001f4 <strlen>
 8008d60:	4603      	mov	r3, r0
 8008d62:	4423      	add	r3, r4
 8008d64:	4aa1      	ldr	r2, [pc, #644]	; (8008fec <AT_ESP8266_ND+0x258c>)
 8008d66:	461c      	mov	r4, r3
 8008d68:	4613      	mov	r3, r2
 8008d6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008d6c:	6020      	str	r0, [r4, #0]
 8008d6e:	6061      	str	r1, [r4, #4]
 8008d70:	60a2      	str	r2, [r4, #8]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8008d76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008d84:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008d88:	2201      	movs	r2, #1
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f006 fa1d 	bl	800f1ca <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8008d90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008d9e:	4620      	mov	r0, r4
 8008da0:	f7f7 fa28 	bl	80001f4 <strlen>
 8008da4:	4603      	mov	r3, r0
 8008da6:	4423      	add	r3, r4
 8008da8:	4a91      	ldr	r2, [pc, #580]	; (8008ff0 <AT_ESP8266_ND+0x2590>)
 8008daa:	6810      	ldr	r0, [r2, #0]
 8008dac:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8008dae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008db2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008dbc:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008dc0:	2203      	movs	r2, #3
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f006 fa01 	bl	800f1ca <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8008dc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008dd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8008de4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008de8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	3336      	adds	r3, #54	; 0x36
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7f7 f9ff 	bl	80001f4 <strlen>
 8008df6:	4603      	mov	r3, r0
 8008df8:	461a      	mov	r2, r3
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f006 f9e4 	bl	800f1ca <strncat>
						strncat(a->_uart2snd,separador2,2);
 8008e02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008e10:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8008e14:	2202      	movs	r2, #2
 8008e16:	4618      	mov	r0, r3
 8008e18:	f006 f9d7 	bl	800f1ca <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8008e1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008e2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8008e38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	3346      	adds	r3, #70	; 0x46
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7f7 f9d5 	bl	80001f4 <strlen>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	4629      	mov	r1, r5
 8008e50:	4620      	mov	r0, r4
 8008e52:	f006 f9ba 	bl	800f1ca <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008e56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008e64:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7f7 f9c3 	bl	80001f4 <strlen>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008e74:	4619      	mov	r1, r3
 8008e76:	4620      	mov	r0, r4
 8008e78:	f006 f9a7 	bl	800f1ca <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008e7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7f7 f9b2 	bl	80001f4 <strlen>
 8008e90:	4603      	mov	r3, r0
 8008e92:	461a      	mov	r2, r3
 8008e94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=600;
 8008ea2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ea6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008eb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8008eb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008ec2:	1c5a      	adds	r2, r3, #1
 8008ec4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ec8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008ed2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ed6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d120      	bne.n	8008f26 <AT_ESP8266_ND+0x24c6>
 8008ee4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ee8:	2b0a      	cmp	r3, #10
 8008eea:	d028      	beq.n	8008f3e <AT_ESP8266_ND+0x24de>
 8008eec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ef0:	2b0b      	cmp	r3, #11
 8008ef2:	d024      	beq.n	8008f3e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_wifi_gotip)
 8008ef4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ef8:	2b0c      	cmp	r3, #12
 8008efa:	d020      	beq.n	8008f3e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 8008efc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f00:	2b0e      	cmp	r3, #14
 8008f02:	d01c      	beq.n	8008f3e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_conectado)
 8008f04:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f08:	2b0f      	cmp	r3, #15
 8008f0a:	d018      	beq.n	8008f3e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_desconectado)
 8008f0c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f10:	2b10      	cmp	r3, #16
 8008f12:	d014      	beq.n	8008f3e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_error)
 8008f14:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d010      	beq.n	8008f3e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_busy_p)))
 8008f1c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f24:	d00b      	beq.n	8008f3e <AT_ESP8266_ND+0x24de>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008f26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	f340 866e 	ble.w	8009c1a <AT_ESP8266_ND+0x31ba>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008f3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008f4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008f50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008f60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008f70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008f80:	f000 be4b 	b.w	8009c1a <AT_ESP8266_ND+0x31ba>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 8008f84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f88:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	601a      	str	r2, [r3, #0]
 8008f90:	2200      	movs	r2, #0
 8008f92:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 8008f94:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f98:	2b10      	cmp	r3, #16
 8008f9a:	d003      	beq.n	8008fa4 <AT_ESP8266_ND+0x2544>
 8008f9c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008fa0:	2b0a      	cmp	r3, #10
 8008fa2:	d127      	bne.n	8008ff4 <AT_ESP8266_ND+0x2594>
				{
					a->_estado=AT_decode;
 8008fa4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fa8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008fb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8008fb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8008fc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8008fd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008fe6:	f000 be1a 	b.w	8009c1e <AT_ESP8266_ND+0x31be>
 8008fea:	bf00      	nop
 8008fec:	080107d8 	.word	0x080107d8
 8008ff0:	080107e8 	.word	0x080107e8
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8008ff4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ff8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009002:	2b01      	cmp	r3, #1
 8009004:	f040 80d1 	bne.w	80091aa <AT_ESP8266_ND+0x274a>
 8009008:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800900c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009016:	2b00      	cmp	r3, #0
 8009018:	f040 80c7 	bne.w	80091aa <AT_ESP8266_ND+0x274a>
										a->_ejecucion=1;
 800901c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009020:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2201      	movs	r2, #1
 8009028:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 800902c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009030:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2218      	movs	r2, #24
 8009038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800903c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009040:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 800904c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009050:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800905a:	1c5a      	adds	r2, r3, #1
 800905c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009060:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 800906a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800906e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2200      	movs	r2, #0
 8009076:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 800907a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800907e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2200      	movs	r2, #0
 8009086:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 800908a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800908e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009098:	4620      	mov	r0, r4
 800909a:	f7f7 f8ab 	bl	80001f4 <strlen>
 800909e:	4603      	mov	r3, r0
 80090a0:	4423      	add	r3, r4
 80090a2:	4abe      	ldr	r2, [pc, #760]	; (800939c <AT_ESP8266_ND+0x293c>)
 80090a4:	461c      	mov	r4, r3
 80090a6:	4613      	mov	r3, r2
 80090a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80090aa:	6020      	str	r0, [r4, #0]
 80090ac:	6061      	str	r1, [r4, #4]
 80090ae:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 80090b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 80090be:	f107 0214 	add.w	r2, r7, #20
 80090c2:	4611      	mov	r1, r2
 80090c4:	4618      	mov	r0, r3
 80090c6:	f005 fdf9 	bl	800ecbc <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 80090ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80090d8:	f107 0314 	add.w	r3, r7, #20
 80090dc:	4618      	mov	r0, r3
 80090de:	f7f7 f889 	bl	80001f4 <strlen>
 80090e2:	4602      	mov	r2, r0
 80090e4:	f107 0314 	add.w	r3, r7, #20
 80090e8:	4619      	mov	r1, r3
 80090ea:	4620      	mov	r0, r4
 80090ec:	f006 f86d 	bl	800f1ca <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 80090f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 80090fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009102:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800910c:	4619      	mov	r1, r3
 800910e:	4610      	mov	r0, r2
 8009110:	f006 f93c 	bl	800f38c <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009114:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009118:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009122:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009126:	2202      	movs	r2, #2
 8009128:	4618      	mov	r0, r3
 800912a:	f006 f84e 	bl	800f1ca <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 800912e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009132:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800913c:	4618      	mov	r0, r3
 800913e:	f7f7 f859 	bl	80001f4 <strlen>
 8009142:	4603      	mov	r3, r0
 8009144:	461a      	mov	r2, r3
 8009146:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800914a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009154:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009158:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8009162:	4620      	mov	r0, r4
 8009164:	f7f7 f846 	bl	80001f4 <strlen>
 8009168:	4603      	mov	r3, r0
 800916a:	4423      	add	r3, r4
 800916c:	4a8c      	ldr	r2, [pc, #560]	; (80093a0 <AT_ESP8266_ND+0x2940>)
 800916e:	461c      	mov	r4, r3
 8009170:	4613      	mov	r3, r2
 8009172:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009174:	6020      	str	r0, [r4, #0]
 8009176:	6061      	str	r1, [r4, #4]
 8009178:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 800917a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800917e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009188:	1c5a      	adds	r2, r3, #1
 800918a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800918e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=700;
 8009198:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800919c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80091a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 80091aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80091b8:	1c5a      	adds	r2, r3, #1
 80091ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 80091c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f040 80a6 	bne.w	8009328 <AT_ESP8266_ND+0x28c8>
 80091dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091e0:	2b13      	cmp	r3, #19
 80091e2:	f000 80a1 	beq.w	8009328 <AT_ESP8266_ND+0x28c8>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 80091e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f203 6294 	addw	r2, r3, #1684	; 0x694
 80091f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8009202:	4619      	mov	r1, r3
 8009204:	4610      	mov	r0, r2
 8009206:	f7f6 ffeb 	bl	80001e0 <strcmp>
 800920a:	4603      	mov	r3, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d01b      	beq.n	8009248 <AT_ESP8266_ND+0x27e8>
 8009210:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009214:	2b01      	cmp	r3, #1
 8009216:	d017      	beq.n	8009248 <AT_ESP8266_ND+0x27e8>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 8009218:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800921c:	2b14      	cmp	r3, #20
 800921e:	d013      	beq.n	8009248 <AT_ESP8266_ND+0x27e8>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009220:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009224:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800922e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009232:	4293      	cmp	r3, r2
 8009234:	dd78      	ble.n	8009328 <AT_ESP8266_ND+0x28c8>
 8009236:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800923a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009244:	2b01      	cmp	r3, #1
 8009246:	d16f      	bne.n	8009328 <AT_ESP8266_ND+0x28c8>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 8009248:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800924c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009256:	f241 3288 	movw	r2, #5000	; 0x1388
 800925a:	4293      	cmp	r3, r2
 800925c:	dd0e      	ble.n	800927c <AT_ESP8266_ND+0x281c>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 800925e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009262:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 800926c:	1c5a      	adds	r2, r3, #1
 800926e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009272:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 800927c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009280:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 800928a:	1c5a      	adds	r2, r3, #1
 800928c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009290:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 800929a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800929e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80092a8:	1c5a      	adds	r2, r3, #1
 80092aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 80092b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 80092c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f203 4094 	addw	r0, r3, #1172	; 0x494
 80092d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f503 7125 	add.w	r1, r3, #660	; 0x294
 80092e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80092f2:	2361      	movs	r3, #97	; 0x61
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	2301      	movs	r3, #1
 80092f8:	f005 fd14 	bl	800ed24 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 80092fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009300:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 800930a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800930e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009318:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800931c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2200      	movs	r2, #0
 8009324:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 8009328:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800932c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009336:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800933a:	f040 8470 	bne.w	8009c1e <AT_ESP8266_ND+0x31be>
 800933e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009342:	2b13      	cmp	r3, #19
 8009344:	d02e      	beq.n	80093a4 <AT_ESP8266_ND+0x2944>
 8009346:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800934a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009354:	f241 3288 	movw	r2, #5000	; 0x1388
 8009358:	4293      	cmp	r3, r2
 800935a:	dc23      	bgt.n	80093a4 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_disconnect)
 800935c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009360:	2b0a      	cmp	r3, #10
 8009362:	d01f      	beq.n	80093a4 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_connected)
 8009364:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009368:	2b0b      	cmp	r3, #11
 800936a:	d01b      	beq.n	80093a4 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_gotip)
 800936c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009370:	2b0c      	cmp	r3, #12
 8009372:	d017      	beq.n	80093a4 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_desconectado)
 8009374:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009378:	2b10      	cmp	r3, #16
 800937a:	d013      	beq.n	80093a4 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_snd_err)
 800937c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009380:	2b11      	cmp	r3, #17
 8009382:	d00f      	beq.n	80093a4 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_enviado_error)
 8009384:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009388:	2b12      	cmp	r3, #18
 800938a:	d00b      	beq.n	80093a4 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_busy_p)))
 800938c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009390:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009394:	f040 8443 	bne.w	8009c1e <AT_ESP8266_ND+0x31be>
 8009398:	e004      	b.n	80093a4 <AT_ESP8266_ND+0x2944>
 800939a:	bf00      	nop
 800939c:	080107ec 	.word	0x080107ec
 80093a0:	080107f8 	.word	0x080107f8
									a->_debug_count5++;
 80093a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80093b2:	1c5a      	adds	r2, r3, #1
 80093b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 80093c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80093d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80093d4:	4293      	cmp	r3, r2
 80093d6:	dd25      	ble.n	8009424 <AT_ESP8266_ND+0x29c4>
										a->_debug_count8++;
 80093d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 80093e6:	1c5a      	adds	r2, r3, #1
 80093e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 80093f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009404:	1c5a      	adds	r2, r3, #1
 8009406:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800940a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009414:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009418:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2200      	movs	r2, #0
 8009420:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009424:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009428:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009432:	2b02      	cmp	r3, #2
 8009434:	dd10      	ble.n	8009458 <AT_ESP8266_ND+0x29f8>
 8009436:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800943a:	2b10      	cmp	r3, #16
 800943c:	d00c      	beq.n	8009458 <AT_ESP8266_ND+0x29f8>
 800943e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009442:	2b0a      	cmp	r3, #10
 8009444:	d008      	beq.n	8009458 <AT_ESP8266_ND+0x29f8>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 8009446:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800944a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	220f      	movs	r2, #15
 8009452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009456:	e008      	b.n	800946a <AT_ESP8266_ND+0x2a0a>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009458:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800945c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 800946a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800946e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2200      	movs	r2, #0
 8009476:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 800947a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800947e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2200      	movs	r2, #0
 8009486:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 800948a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800948e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2200      	movs	r2, #0
 8009496:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 800949a:	e3c0      	b.n	8009c1e <AT_ESP8266_ND+0x31be>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800949c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if( a->_enviaruart==1)
 80094ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d16f      	bne.n	800959e <AT_ESP8266_ND+0x2b3e>
						{
						a->_pasos=0;
 80094be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80094ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2201      	movs	r2, #1
 80094da:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 80094de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80094ec:	4620      	mov	r0, r4
 80094ee:	f7f6 fe81 	bl	80001f4 <strlen>
 80094f2:	4603      	mov	r3, r0
 80094f4:	4423      	add	r3, r4
 80094f6:	4a78      	ldr	r2, [pc, #480]	; (80096d8 <AT_ESP8266_ND+0x2c78>)
 80094f8:	461c      	mov	r4, r3
 80094fa:	4615      	mov	r5, r2
 80094fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094fe:	6020      	str	r0, [r4, #0]
 8009500:	6061      	str	r1, [r4, #4]
 8009502:	60a2      	str	r2, [r4, #8]
 8009504:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 8009506:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800950a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009514:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009518:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 8009522:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009526:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	335c      	adds	r3, #92	; 0x5c
 800952e:	4618      	mov	r0, r3
 8009530:	f7f6 fe60 	bl	80001f4 <strlen>
 8009534:	4603      	mov	r3, r0
 8009536:	461a      	mov	r2, r3
 8009538:	4629      	mov	r1, r5
 800953a:	4620      	mov	r0, r4
 800953c:	f005 fe45 	bl	800f1ca <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009540:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009544:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800954e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009552:	4618      	mov	r0, r3
 8009554:	f7f6 fe4e 	bl	80001f4 <strlen>
 8009558:	4602      	mov	r2, r0
 800955a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800955e:	4619      	mov	r1, r3
 8009560:	4620      	mov	r0, r4
 8009562:	f005 fe32 	bl	800f1ca <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8009566:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800956a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009574:	4618      	mov	r0, r3
 8009576:	f7f6 fe3d 	bl	80001f4 <strlen>
 800957a:	4603      	mov	r3, r0
 800957c:	461a      	mov	r2, r3
 800957e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009582:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=800;
 800958c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009590:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f44f 7248 	mov.w	r2, #800	; 0x320
 800959a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 800959e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80095ac:	1c5a      	adds	r2, r3, #1
 80095ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80095bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d123      	bne.n	8009616 <AT_ESP8266_ND+0x2bb6>
 80095ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095d2:	2b0a      	cmp	r3, #10
 80095d4:	d02b      	beq.n	800962e <AT_ESP8266_ND+0x2bce>
 80095d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095da:	2b0b      	cmp	r3, #11
 80095dc:	d027      	beq.n	800962e <AT_ESP8266_ND+0x2bce>
 80095de:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095e2:	2b0c      	cmp	r3, #12
 80095e4:	d023      	beq.n	800962e <AT_ESP8266_ND+0x2bce>
 80095e6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095ea:	2b0e      	cmp	r3, #14
 80095ec:	d01f      	beq.n	800962e <AT_ESP8266_ND+0x2bce>
 80095ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095f2:	2b0f      	cmp	r3, #15
 80095f4:	d01b      	beq.n	800962e <AT_ESP8266_ND+0x2bce>
 80095f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095fa:	2b10      	cmp	r3, #16
 80095fc:	d017      	beq.n	800962e <AT_ESP8266_ND+0x2bce>
 80095fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009602:	2b15      	cmp	r3, #21
 8009604:	d013      	beq.n	800962e <AT_ESP8266_ND+0x2bce>
 8009606:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800960a:	2b16      	cmp	r3, #22
 800960c:	d00f      	beq.n	800962e <AT_ESP8266_ND+0x2bce>
 800960e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009612:	2b17      	cmp	r3, #23
 8009614:	d00b      	beq.n	800962e <AT_ESP8266_ND+0x2bce>
 8009616:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800961a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009624:	f241 3288 	movw	r2, #5000	; 0x1388
 8009628:	4293      	cmp	r3, r2
 800962a:	f340 82fa 	ble.w	8009c22 <AT_ESP8266_ND+0x31c2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800962e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009632:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800963c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8009640:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009644:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2200      	movs	r2, #0
 800964c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8009650:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009654:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2200      	movs	r2, #0
 800965c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8009660:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009664:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2200      	movs	r2, #0
 800966c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
			}
			break;
 8009670:	e2d7      	b.n	8009c22 <AT_ESP8266_ND+0x31c2>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 8009672:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009676:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800967a:	2200      	movs	r2, #0
 800967c:	601a      	str	r2, [r3, #0]
 800967e:	2200      	movs	r2, #0
 8009680:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 8009682:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009686:	2b10      	cmp	r3, #16
 8009688:	d003      	beq.n	8009692 <AT_ESP8266_ND+0x2c32>
 800968a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800968e:	2b0a      	cmp	r3, #10
 8009690:	d124      	bne.n	80096dc <AT_ESP8266_ND+0x2c7c>
				{
					a->_estado=AT_decode;
 8009692:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009696:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80096a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 80096a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 80096b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2200      	movs	r2, #0
 80096c0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 80096c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80096d4:	e2a7      	b.n	8009c26 <AT_ESP8266_ND+0x31c6>
 80096d6:	bf00      	nop
 80096d8:	08010804 	.word	0x08010804
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 80096dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	f040 8102 	bne.w	80098f4 <AT_ESP8266_ND+0x2e94>
 80096f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f040 80f8 	bne.w	80098f4 <AT_ESP8266_ND+0x2e94>
										a->_ejecucion=1;
 8009704:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009708:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2201      	movs	r2, #1
 8009710:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8009714:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009718:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2218      	movs	r2, #24
 8009720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009724:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009728:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8009734:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009738:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009742:	1c5a      	adds	r2, r3, #1
 8009744:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009748:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 8009752:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009756:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2200      	movs	r2, #0
 800975e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8009762:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009766:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2200      	movs	r2, #0
 800976e:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 8009772:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009776:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009780:	4620      	mov	r0, r4
 8009782:	f7f6 fd37 	bl	80001f4 <strlen>
 8009786:	4603      	mov	r3, r0
 8009788:	4423      	add	r3, r4
 800978a:	4a83      	ldr	r2, [pc, #524]	; (8009998 <AT_ESP8266_ND+0x2f38>)
 800978c:	461c      	mov	r4, r3
 800978e:	4613      	mov	r3, r2
 8009790:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009792:	6020      	str	r0, [r4, #0]
 8009794:	6061      	str	r1, [r4, #4]
 8009796:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 8009798:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800979c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f8d3 3a94 	ldr.w	r3, [r3, #2708]	; 0xa94
 80097a6:	f107 020c 	add.w	r2, r7, #12
 80097aa:	4611      	mov	r1, r2
 80097ac:	4618      	mov	r0, r3
 80097ae:	f005 fa85 	bl	800ecbc <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 80097b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80097c0:	f107 030c 	add.w	r3, r7, #12
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7f6 fd15 	bl	80001f4 <strlen>
 80097ca:	4602      	mov	r2, r0
 80097cc:	f107 030c 	add.w	r3, r7, #12
 80097d0:	4619      	mov	r1, r3
 80097d2:	4620      	mov	r0, r4
 80097d4:	f005 fcf9 	bl	800f1ca <strncat>
										strncat(a->_uart2snd,",",1);
 80097d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80097e6:	4620      	mov	r0, r4
 80097e8:	f7f6 fd04 	bl	80001f4 <strlen>
 80097ec:	4603      	mov	r3, r0
 80097ee:	4423      	add	r3, r4
 80097f0:	496a      	ldr	r1, [pc, #424]	; (800999c <AT_ESP8266_ND+0x2f3c>)
 80097f2:	461a      	mov	r2, r3
 80097f4:	460b      	mov	r3, r1
 80097f6:	881b      	ldrh	r3, [r3, #0]
 80097f8:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 80097fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8009808:	f107 020c 	add.w	r2, r7, #12
 800980c:	4611      	mov	r1, r2
 800980e:	4618      	mov	r0, r3
 8009810:	f005 fa54 	bl	800ecbc <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8009814:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009818:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009822:	f107 030c 	add.w	r3, r7, #12
 8009826:	4618      	mov	r0, r3
 8009828:	f7f6 fce4 	bl	80001f4 <strlen>
 800982c:	4602      	mov	r2, r0
 800982e:	f107 030c 	add.w	r3, r7, #12
 8009832:	4619      	mov	r1, r3
 8009834:	4620      	mov	r0, r4
 8009836:	f005 fcc8 	bl	800f1ca <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 800983a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800983e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8009848:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800984c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009856:	4619      	mov	r1, r3
 8009858:	4610      	mov	r0, r2
 800985a:	f005 fd97 	bl	800f38c <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 800985e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009862:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800986c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009870:	2202      	movs	r2, #2
 8009872:	4618      	mov	r0, r3
 8009874:	f005 fca9 	bl	800f1ca <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8009878:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800987c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009886:	4618      	mov	r0, r3
 8009888:	f7f6 fcb4 	bl	80001f4 <strlen>
 800988c:	4603      	mov	r3, r0
 800988e:	461a      	mov	r2, r3
 8009890:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009894:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 800989e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 80098ac:	4620      	mov	r0, r4
 80098ae:	f7f6 fca1 	bl	80001f4 <strlen>
 80098b2:	4603      	mov	r3, r0
 80098b4:	4423      	add	r3, r4
 80098b6:	4a3a      	ldr	r2, [pc, #232]	; (80099a0 <AT_ESP8266_ND+0x2f40>)
 80098b8:	461c      	mov	r4, r3
 80098ba:	4613      	mov	r3, r2
 80098bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80098be:	6020      	str	r0, [r4, #0]
 80098c0:	6061      	str	r1, [r4, #4]
 80098c2:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 80098c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80098d2:	1c5a      	adds	r2, r3, #1
 80098d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=900;
 80098e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f44f 7261 	mov.w	r2, #900	; 0x384
 80098f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 80098f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009902:	1c5a      	adds	r2, r3, #1
 8009904:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009908:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009912:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009916:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009920:	2b00      	cmp	r3, #0
 8009922:	f040 80b8 	bne.w	8009a96 <AT_ESP8266_ND+0x3036>
 8009926:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800992a:	2b13      	cmp	r3, #19
 800992c:	f000 80b3 	beq.w	8009a96 <AT_ESP8266_ND+0x3036>
 8009930:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009934:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f203 6294 	addw	r2, r3, #1684	; 0x694
 800993e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009942:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 800994c:	4619      	mov	r1, r3
 800994e:	4610      	mov	r0, r2
 8009950:	f7f6 fc46 	bl	80001e0 <strcmp>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d024      	beq.n	80099a4 <AT_ESP8266_ND+0x2f44>
 800995a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800995e:	2b01      	cmp	r3, #1
 8009960:	d020      	beq.n	80099a4 <AT_ESP8266_ND+0x2f44>
 8009962:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009966:	2b14      	cmp	r3, #20
 8009968:	d01c      	beq.n	80099a4 <AT_ESP8266_ND+0x2f44>
 800996a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800996e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009978:	f241 3288 	movw	r2, #5000	; 0x1388
 800997c:	4293      	cmp	r3, r2
 800997e:	f340 808a 	ble.w	8009a96 <AT_ESP8266_ND+0x3036>
 8009982:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009986:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009990:	2b01      	cmp	r3, #1
 8009992:	f040 8080 	bne.w	8009a96 <AT_ESP8266_ND+0x3036>
 8009996:	e005      	b.n	80099a4 <AT_ESP8266_ND+0x2f44>
 8009998:	080107ec 	.word	0x080107ec
 800999c:	08010814 	.word	0x08010814
 80099a0:	080107f8 	.word	0x080107f8
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 80099a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80099b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80099b6:	4293      	cmp	r3, r2
 80099b8:	dd17      	ble.n	80099ea <AT_ESP8266_ND+0x2f8a>
 80099ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d10e      	bne.n	80099ea <AT_ESP8266_ND+0x2f8a>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 80099cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 80099da:	1c5a      	adds	r2, r3, #1
 80099dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 80099ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 80099f8:	1c5a      	adds	r2, r3, #1
 80099fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 8009a08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009a16:	1c5a      	adds	r2, r3, #1
 8009a18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8009a26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2201      	movs	r2, #1
 8009a32:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009a36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8009a44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8009a52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009a60:	2361      	movs	r3, #97	; 0x61
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	2301      	movs	r3, #1
 8009a66:	f005 f95d 	bl	800ed24 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009a6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009a78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009a86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 8009a96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aa4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009aa8:	f040 80bd 	bne.w	8009c26 <AT_ESP8266_ND+0x31c6>
 8009aac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009ab0:	2b13      	cmp	r3, #19
 8009ab2:	d02b      	beq.n	8009b0c <AT_ESP8266_ND+0x30ac>
 8009ab4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009ab8:	2b0b      	cmp	r3, #11
 8009aba:	d027      	beq.n	8009b0c <AT_ESP8266_ND+0x30ac>
 8009abc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009ac0:	2b0c      	cmp	r3, #12
 8009ac2:	d023      	beq.n	8009b0c <AT_ESP8266_ND+0x30ac>
 8009ac4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ac8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	dc18      	bgt.n	8009b0c <AT_ESP8266_ND+0x30ac>
 8009ada:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009ade:	2b0a      	cmp	r3, #10
 8009ae0:	d014      	beq.n	8009b0c <AT_ESP8266_ND+0x30ac>
 8009ae2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009ae6:	2b10      	cmp	r3, #16
 8009ae8:	d010      	beq.n	8009b0c <AT_ESP8266_ND+0x30ac>
 8009aea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009aee:	2b11      	cmp	r3, #17
 8009af0:	d00c      	beq.n	8009b0c <AT_ESP8266_ND+0x30ac>
 8009af2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009af6:	2b12      	cmp	r3, #18
 8009af8:	d008      	beq.n	8009b0c <AT_ESP8266_ND+0x30ac>
 8009afa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009afe:	2b16      	cmp	r3, #22
 8009b00:	d004      	beq.n	8009b0c <AT_ESP8266_ND+0x30ac>
 8009b02:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009b06:	2b19      	cmp	r3, #25
 8009b08:	f040 808d 	bne.w	8009c26 <AT_ESP8266_ND+0x31c6>
									a->_debug_count5++;
 8009b0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009b1a:	1c5a      	adds	r2, r3, #1
 8009b1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 8009b2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	dd25      	ble.n	8009b8c <AT_ESP8266_ND+0x312c>
										a->_debug_count8++;
 8009b40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009b4e:	1c5a      	adds	r2, r3, #1
 8009b50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8009b5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009b6c:	1c5a      	adds	r2, r3, #1
 8009b6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009b7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009b8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	dd07      	ble.n	8009bae <AT_ESP8266_ND+0x314e>
 8009b9e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009ba2:	2b10      	cmp	r3, #16
 8009ba4:	d003      	beq.n	8009bae <AT_ESP8266_ND+0x314e>
 8009ba6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009baa:	2b0a      	cmp	r3, #10
 8009bac:	d108      	bne.n	8009bc0 <AT_ESP8266_ND+0x3160>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009bae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009bbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009bc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009bd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8009be0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009be4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009bf0:	e019      	b.n	8009c26 <AT_ESP8266_ND+0x31c6>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8009bf2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bf6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009c00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8009c04:	e010      	b.n	8009c28 <AT_ESP8266_ND+0x31c8>
			break;
 8009c06:	bf00      	nop
 8009c08:	e00e      	b.n	8009c28 <AT_ESP8266_ND+0x31c8>
			break;
 8009c0a:	bf00      	nop
 8009c0c:	e00c      	b.n	8009c28 <AT_ESP8266_ND+0x31c8>
			break;
 8009c0e:	bf00      	nop
 8009c10:	e00a      	b.n	8009c28 <AT_ESP8266_ND+0x31c8>
			break;
 8009c12:	bf00      	nop
 8009c14:	e008      	b.n	8009c28 <AT_ESP8266_ND+0x31c8>
			break;
 8009c16:	bf00      	nop
 8009c18:	e006      	b.n	8009c28 <AT_ESP8266_ND+0x31c8>
			break;
 8009c1a:	bf00      	nop
 8009c1c:	e004      	b.n	8009c28 <AT_ESP8266_ND+0x31c8>
			break;
 8009c1e:	bf00      	nop
 8009c20:	e002      	b.n	8009c28 <AT_ESP8266_ND+0x31c8>
			break;
 8009c22:	bf00      	nop
 8009c24:	e000      	b.n	8009c28 <AT_ESP8266_ND+0x31c8>
			break;
 8009c26:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8009c28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
		a->_n_orig=0;
 8009c38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

		return (a->_estado);
 8009c48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 8009c56:	4618      	mov	r0, r3
 8009c58:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c60 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c72:	f240 328d 	movw	r2, #909	; 0x38d
 8009c76:	4293      	cmp	r3, r2
 8009c78:	f001 83c3 	beq.w	800b402 <WiFi_Conn_ND+0x17a2>
 8009c7c:	f240 328d 	movw	r2, #909	; 0x38d
 8009c80:	4293      	cmp	r3, r2
 8009c82:	f301 8453 	bgt.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009c86:	f240 3289 	movw	r2, #905	; 0x389
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	f001 8335 	beq.w	800b2fa <WiFi_Conn_ND+0x169a>
 8009c90:	f240 3289 	movw	r2, #905	; 0x389
 8009c94:	4293      	cmp	r3, r2
 8009c96:	f301 8449 	bgt.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009c9a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009c9e:	f001 8224 	beq.w	800b0ea <WiFi_Conn_ND+0x148a>
 8009ca2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009ca6:	f301 8441 	bgt.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009caa:	f240 3229 	movw	r2, #809	; 0x329
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	f301 843c 	bgt.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009cb4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009cb8:	f280 80a5 	bge.w	8009e06 <WiFi_Conn_ND+0x1a6>
 8009cbc:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	f000 8776 	beq.w	800abb2 <WiFi_Conn_ND+0xf52>
 8009cc6:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	f301 842e 	bgt.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009cd0:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	f000 86fc 	beq.w	800aad2 <WiFi_Conn_ND+0xe72>
 8009cda:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	f301 8424 	bgt.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009ce4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009ce8:	f000 862b 	beq.w	800a942 <WiFi_Conn_ND+0xce2>
 8009cec:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009cf0:	f301 841c 	bgt.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009cf4:	f240 2261 	movw	r2, #609	; 0x261
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	f000 85b1 	beq.w	800a860 <WiFi_Conn_ND+0xc00>
 8009cfe:	f240 2261 	movw	r2, #609	; 0x261
 8009d02:	4293      	cmp	r3, r2
 8009d04:	f301 8412 	bgt.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009d08:	f240 225d 	movw	r2, #605	; 0x25d
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	f000 8551 	beq.w	800a7b4 <WiFi_Conn_ND+0xb54>
 8009d12:	f240 225d 	movw	r2, #605	; 0x25d
 8009d16:	4293      	cmp	r3, r2
 8009d18:	f301 8408 	bgt.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009d1c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009d20:	f000 84cf 	beq.w	800a6c2 <WiFi_Conn_ND+0xa62>
 8009d24:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009d28:	f301 8400 	bgt.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009d2c:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009d30:	4293      	cmp	r3, r2
 8009d32:	f000 846a 	beq.w	800a60a <WiFi_Conn_ND+0x9aa>
 8009d36:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009d3a:	f281 83f7 	bge.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009d3e:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009d42:	4293      	cmp	r3, r2
 8009d44:	f000 8425 	beq.w	800a592 <WiFi_Conn_ND+0x932>
 8009d48:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8009d4c:	f281 83ee 	bge.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009d50:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009d54:	f000 83b0 	beq.w	800a4b8 <WiFi_Conn_ND+0x858>
 8009d58:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009d5c:	f301 83e6 	bgt.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009d60:	f240 1299 	movw	r2, #409	; 0x199
 8009d64:	4293      	cmp	r3, r2
 8009d66:	f000 8369 	beq.w	800a43c <WiFi_Conn_ND+0x7dc>
 8009d6a:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8009d6e:	f281 83dd 	bge.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009d72:	f240 1295 	movw	r2, #405	; 0x195
 8009d76:	4293      	cmp	r3, r2
 8009d78:	f000 8329 	beq.w	800a3ce <WiFi_Conn_ND+0x76e>
 8009d7c:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8009d80:	f281 83d4 	bge.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009d84:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009d88:	f000 82a0 	beq.w	800a2cc <WiFi_Conn_ND+0x66c>
 8009d8c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009d90:	f301 83cc 	bgt.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009d94:	f240 1235 	movw	r2, #309	; 0x135
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	f000 8271 	beq.w	800a280 <WiFi_Conn_ND+0x620>
 8009d9e:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8009da2:	f281 83c3 	bge.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009da6:	f240 1231 	movw	r2, #305	; 0x131
 8009daa:	4293      	cmp	r3, r2
 8009dac:	f000 8263 	beq.w	800a276 <WiFi_Conn_ND+0x616>
 8009db0:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009db4:	f281 83ba 	bge.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009db8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009dbc:	f000 8207 	beq.w	800a1ce <WiFi_Conn_ND+0x56e>
 8009dc0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009dc4:	f301 83b2 	bgt.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009dc8:	2bd1      	cmp	r3, #209	; 0xd1
 8009dca:	f000 81a0 	beq.w	800a10e <WiFi_Conn_ND+0x4ae>
 8009dce:	2bd1      	cmp	r3, #209	; 0xd1
 8009dd0:	f301 83ac 	bgt.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009dd4:	2bcd      	cmp	r3, #205	; 0xcd
 8009dd6:	f000 8170 	beq.w	800a0ba <WiFi_Conn_ND+0x45a>
 8009dda:	2bcd      	cmp	r3, #205	; 0xcd
 8009ddc:	f301 83a6 	bgt.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009de0:	2bc8      	cmp	r3, #200	; 0xc8
 8009de2:	f000 80f1 	beq.w	8009fc8 <WiFi_Conn_ND+0x368>
 8009de6:	2bc8      	cmp	r3, #200	; 0xc8
 8009de8:	f301 83a0 	bgt.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009dec:	2b6d      	cmp	r3, #109	; 0x6d
 8009dee:	f000 80b3 	beq.w	8009f58 <WiFi_Conn_ND+0x2f8>
 8009df2:	2b6d      	cmp	r3, #109	; 0x6d
 8009df4:	f301 839a 	bgt.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009df8:	2b64      	cmp	r3, #100	; 0x64
 8009dfa:	d021      	beq.n	8009e40 <WiFi_Conn_ND+0x1e0>
 8009dfc:	2b69      	cmp	r3, #105	; 0x69
 8009dfe:	f000 8096 	beq.w	8009f2e <WiFi_Conn_ND+0x2ce>
 8009e02:	f001 bb93 	b.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009e06:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8009e0a:	2b09      	cmp	r3, #9
 8009e0c:	f201 838e 	bhi.w	800b52c <WiFi_Conn_ND+0x18cc>
 8009e10:	a201      	add	r2, pc, #4	; (adr r2, 8009e18 <WiFi_Conn_ND+0x1b8>)
 8009e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e16:	bf00      	nop
 8009e18:	0800acbf 	.word	0x0800acbf
 8009e1c:	0800b52d 	.word	0x0800b52d
 8009e20:	0800b52d 	.word	0x0800b52d
 8009e24:	0800b52d 	.word	0x0800b52d
 8009e28:	0800b52d 	.word	0x0800b52d
 8009e2c:	0800ad8d 	.word	0x0800ad8d
 8009e30:	0800ae2d 	.word	0x0800ae2d
 8009e34:	0800aecd 	.word	0x0800aecd
 8009e38:	0800af6d 	.word	0x0800af6d
 8009e3c:	0800b00d 	.word	0x0800b00d
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e46:	2b64      	cmp	r3, #100	; 0x64
 8009e48:	d046      	beq.n	8009ed8 <WiFi_Conn_ND+0x278>
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d041      	beq.n	8009ed8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e5a:	2b1c      	cmp	r3, #28
 8009e5c:	d03c      	beq.n	8009ed8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e64:	2b02      	cmp	r3, #2
 8009e66:	d037      	beq.n	8009ed8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e6e:	2b04      	cmp	r3, #4
 8009e70:	d032      	beq.n	8009ed8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e78:	2b13      	cmp	r3, #19
 8009e7a:	d02d      	beq.n	8009ed8 <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f7fc fc5f 	bl	8006740 <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d14e      	bne.n	8009f2a <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f7fc fde7 	bl	8006a60 <AT_ESP8266_ND>
 8009e92:	4602      	mov	r2, r0
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1)
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d109      	bne.n	8009ec0 <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009eb8:	4619      	mov	r1, r3
 8009eba:	4610      	mov	r0, r2
 8009ebc:	f7f7 fbc6 	bl	800164c <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	2364      	movs	r3, #100	; 0x64
 8009ed0:	68b8      	ldr	r0, [r7, #8]
 8009ed2:	f7fb fbb9 	bl	8005648 <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 8009ed6:	e028      	b.n	8009f2a <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d004      	beq.n	8009eec <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 8009ee8:	2b1c      	cmp	r3, #28
 8009eea:	d103      	bne.n	8009ef4 <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	226d      	movs	r2, #109	; 0x6d
 8009ef0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	d00f      	beq.n	8009f1e <WiFi_Conn_ND+0x2be>
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f04:	2b04      	cmp	r3, #4
 8009f06:	d00a      	beq.n	8009f1e <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f0e:	2b0b      	cmp	r3, #11
 8009f10:	d005      	beq.n	8009f1e <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f18:	2b0c      	cmp	r3, #12
 8009f1a:	f041 82d8 	bne.w	800b4ce <WiFi_Conn_ND+0x186e>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2269      	movs	r2, #105	; 0x69
 8009f22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 8009f26:	f001 bad2 	b.w	800b4ce <WiFi_Conn_ND+0x186e>
 8009f2a:	f001 bad0 	b.w	800b4ce <WiFi_Conn_ND+0x186e>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f7fc fc06 	bl	8006740 <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2264      	movs	r2, #100	; 0x64
 8009f38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 8009f54:	f001 baea 	b.w	800b52c <WiFi_Conn_ND+0x18cc>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d00c      	beq.n	8009f7c <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	f7fc fc18 	bl	8006798 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009f6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2200      	movs	r2, #0
 8009f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009f7a:	e00e      	b.n	8009f9a <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f7fc fbf5 	bl	800676c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	22c8      	movs	r2, #200	; 0xc8
 8009f86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fa0:	2b04      	cmp	r3, #4
 8009fa2:	f041 8296 	bne.w	800b4d2 <WiFi_Conn_ND+0x1872>
					{
						Cambiar_CWMODE(b);
 8009fa6:	68f8      	ldr	r0, [r7, #12]
 8009fa8:	f7fc fbca 	bl	8006740 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2264      	movs	r2, #100	; 0x64
 8009fb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009fc4:	f001 ba85 	b.w	800b4d2 <WiFi_Conn_ND+0x1872>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fce:	2bc8      	cmp	r3, #200	; 0xc8
 8009fd0:	d04f      	beq.n	800a072 <WiFi_Conn_ND+0x412>
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d04a      	beq.n	800a072 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	d045      	beq.n	800a072 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fec:	2b03      	cmp	r3, #3
 8009fee:	d040      	beq.n	800a072 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ff6:	2b04      	cmp	r3, #4
 8009ff8:	d03b      	beq.n	800a072 <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a000:	2b0a      	cmp	r3, #10
 800a002:	d036      	beq.n	800a072 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a00a:	2b0b      	cmp	r3, #11
 800a00c:	d031      	beq.n	800a072 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a014:	2b0c      	cmp	r3, #12
 800a016:	d02c      	beq.n	800a072 <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f7fc fba7 	bl	800676c <ConectarWIFI>
						if(b->_enviaruart==1)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a024:	2b01      	cmp	r3, #1
 800a026:	d124      	bne.n	800a072 <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f7fc fd19 	bl	8006a60 <AT_ESP8266_ND>
 800a02e:	4602      	mov	r2, r0
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2200      	movs	r2, #0
 800a03a:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a044:	2b01      	cmp	r3, #1
 800a046:	d109      	bne.n	800a05c <WiFi_Conn_ND+0x3fc>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a054:	4619      	mov	r1, r3
 800a056:	4610      	mov	r0, r2
 800a058:	f7f7 faf8 	bl	800164c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a068:	b29a      	uxth	r2, r3
 800a06a:	2364      	movs	r3, #100	; 0x64
 800a06c:	68b8      	ldr	r0, [r7, #8]
 800a06e:	f7fb faeb 	bl	8005648 <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d004      	beq.n	800a086 <WiFi_Conn_ND+0x426>
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a082:	2b0c      	cmp	r3, #12
 800a084:	d103      	bne.n	800a08e <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	22d1      	movs	r2, #209	; 0xd1
 800a08a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a094:	2b02      	cmp	r3, #2
 800a096:	d00a      	beq.n	800a0ae <WiFi_Conn_ND+0x44e>
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a09e:	2b03      	cmp	r3, #3
 800a0a0:	d005      	beq.n	800a0ae <WiFi_Conn_ND+0x44e>
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0a8:	2b20      	cmp	r3, #32
 800a0aa:	f041 8214 	bne.w	800b4d6 <WiFi_Conn_ND+0x1876>
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	22cd      	movs	r2, #205	; 0xcd
 800a0b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a0b6:	f001 ba0e 	b.w	800b4d6 <WiFi_Conn_ND+0x1876>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 800a0ba:	f241 3088 	movw	r0, #5000	; 0x1388
 800a0be:	f7f8 fe0f 	bl	8002ce0 <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f7fc fb52 	bl	800676c <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	22c8      	movs	r2, #200	; 0xc8
 800a0cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e6:	2b04      	cmp	r3, #4
 800a0e8:	f041 81f7 	bne.w	800b4da <WiFi_Conn_ND+0x187a>
					{
						Cambiar_CWMODE(b);
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f7fc fb27 	bl	8006740 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2264      	movs	r2, #100	; 0x64
 800a0f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a10a:	f001 b9e6 	b.w	800b4da <WiFi_Conn_ND+0x187a>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2200      	movs	r2, #0
 800a112:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d108      	bne.n	800a132 <WiFi_Conn_ND+0x4d2>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f240 3229 	movw	r2, #809	; 0x329
 800a126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)) //Si me desconecto, me vuelvo a conectar
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a138:	2b0a      	cmp	r3, #10
 800a13a:	d004      	beq.n	800a146 <WiFi_Conn_ND+0x4e6>
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a142:	2b0d      	cmp	r3, #13
 800a144:	d10a      	bne.n	800a15c <WiFi_Conn_ND+0x4fc>
				{
					ConectarWIFI(b);
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f7fc fb10 	bl	800676c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	22c8      	movs	r2, #200	; 0xc8
 800a150:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2200      	movs	r2, #0
 800a158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a162:	2b04      	cmp	r3, #4
 800a164:	d10e      	bne.n	800a184 <WiFi_Conn_ND+0x524>
					{
						Cambiar_CWMODE(b);
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f7fc faea 	bl	8006740 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2264      	movs	r2, #100	; 0x64
 800a170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2200      	movs	r2, #0
 800a178:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d011      	beq.n	800a1b2 <WiFi_Conn_ND+0x552>
				{//
					CrearServidorTCP(b);
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f7fc fb5a 	bl	8006848 <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a19a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 800a1ae:	f001 b9bd 	b.w	800b52c <WiFi_Conn_ND+0x18cc>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f7fc faf0 	bl	8006798 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a1be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a1ca:	f001 b9af 	b.w	800b52c <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a1d8:	d03b      	beq.n	800a252 <WiFi_Conn_ND+0x5f2>
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1e0:	2b04      	cmp	r3, #4
 800a1e2:	d036      	beq.n	800a252 <WiFi_Conn_ND+0x5f2>
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ea:	2b0a      	cmp	r3, #10
 800a1ec:	d031      	beq.n	800a252 <WiFi_Conn_ND+0x5f2>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1f4:	2b0d      	cmp	r3, #13
 800a1f6:	d02c      	beq.n	800a252 <WiFi_Conn_ND+0x5f2>
				{
						DesconectarWIFI(b);
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f7fc faf9 	bl	80067f0 <DesconectarWIFI>
						if(b->_enviaruart==1)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a204:	2b01      	cmp	r3, #1
 800a206:	d124      	bne.n	800a252 <WiFi_Conn_ND+0x5f2>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f7fc fc29 	bl	8006a60 <AT_ESP8266_ND>
 800a20e:	4602      	mov	r2, r0
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2200      	movs	r2, #0
 800a21a:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a224:	2b01      	cmp	r3, #1
 800a226:	d109      	bne.n	800a23c <WiFi_Conn_ND+0x5dc>
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a234:	4619      	mov	r1, r3
 800a236:	4610      	mov	r0, r2
 800a238:	f7f7 fa08 	bl	800164c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a248:	b29a      	uxth	r2, r3
 800a24a:	2364      	movs	r3, #100	; 0x64
 800a24c:	68b8      	ldr	r0, [r7, #8]
 800a24e:	f7fb f9fb 	bl	8005648 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a258:	2b0a      	cmp	r3, #10
 800a25a:	d005      	beq.n	800a268 <WiFi_Conn_ND+0x608>
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a262:	2b0d      	cmp	r3, #13
 800a264:	f041 813b 	bne.w	800b4de <WiFi_Conn_ND+0x187e>
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f240 1235 	movw	r2, #309	; 0x135
 800a26e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a272:	f001 b934 	b.w	800b4de <WiFi_Conn_ND+0x187e>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f7fc fa4c 	bl	8006714 <NOP>
			}
			break;
 800a27c:	f001 b956 	b.w	800b52c <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2200      	movs	r2, #0
 800a284:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				ConectarWIFI(b);
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f7fc fa6f 	bl	800676c <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	22c8      	movs	r2, #200	; 0xc8
 800a292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2200      	movs	r2, #0
 800a29a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2a4:	2b04      	cmp	r3, #4
 800a2a6:	f041 811c 	bne.w	800b4e2 <WiFi_Conn_ND+0x1882>
					{
						Cambiar_CWMODE(b);
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f7fc fa48 	bl	8006740 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2264      	movs	r2, #100	; 0x64
 800a2b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a2c8:	f001 b90b 	b.w	800b4e2 <WiFi_Conn_ND+0x1882>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2d2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a2d6:	d04f      	beq.n	800a378 <WiFi_Conn_ND+0x718>
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2de:	2b04      	cmp	r3, #4
 800a2e0:	d04a      	beq.n	800a378 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_ok)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d045      	beq.n	800a378 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_error)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d040      	beq.n	800a378 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_ok)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2fc:	2b07      	cmp	r3, #7
 800a2fe:	d03b      	beq.n	800a378 <WiFi_Conn_ND+0x718>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a306:	2b08      	cmp	r3, #8
 800a308:	d036      	beq.n	800a378 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_err)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a310:	2b1e      	cmp	r3, #30
 800a312:	d031      	beq.n	800a378 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a31a:	2b1f      	cmp	r3, #31
 800a31c:	d02c      	beq.n	800a378 <WiFi_Conn_ND+0x718>
				{
						MUX(b);
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f7fc fa3a 	bl	8006798 <MUX>
						if(b->_enviaruart==1)
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d124      	bne.n	800a378 <WiFi_Conn_ND+0x718>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f7fc fb96 	bl	8006a60 <AT_ESP8266_ND>
 800a334:	4602      	mov	r2, r0
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2200      	movs	r2, #0
 800a340:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d109      	bne.n	800a362 <WiFi_Conn_ND+0x702>
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a35a:	4619      	mov	r1, r3
 800a35c:	4610      	mov	r0, r2
 800a35e:	f7f7 f975 	bl	800164c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a36e:	b29a      	uxth	r2, r3
 800a370:	2364      	movs	r3, #100	; 0x64
 800a372:	68b8      	ldr	r0, [r7, #8]
 800a374:	f7fb f968 	bl	8005648 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d009      	beq.n	800a396 <WiFi_Conn_ND+0x736>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a388:	2b07      	cmp	r3, #7
 800a38a:	d004      	beq.n	800a396 <WiFi_Conn_ND+0x736>
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a392:	2b08      	cmp	r3, #8
 800a394:	d104      	bne.n	800a3a0 <WiFi_Conn_ND+0x740>
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f240 1299 	movw	r2, #409	; 0x199
 800a39c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err)) b->_estado_conexion=MUX_CONN_ERROR;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d00a      	beq.n	800a3c0 <WiFi_Conn_ND+0x760>
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3b0:	2b1e      	cmp	r3, #30
 800a3b2:	d005      	beq.n	800a3c0 <WiFi_Conn_ND+0x760>
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ba:	2b1f      	cmp	r3, #31
 800a3bc:	f041 8093 	bne.w	800b4e6 <WiFi_Conn_ND+0x1886>
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f240 1295 	movw	r2, #405	; 0x195
 800a3c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a3ca:	f001 b88c 	b.w	800b4e6 <WiFi_Conn_ND+0x1886>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f7fc f9a0 	bl	8006714 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3da:	2b04      	cmp	r3, #4
 800a3dc:	d112      	bne.n	800a404 <WiFi_Conn_ND+0x7a4>
				{
					Cambiar_CWMODE(b);
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f7fc f9ae 	bl	8006740 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2264      	movs	r2, #100	; 0x64
 800a3e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a40a:	2b0a      	cmp	r3, #10
 800a40c:	d005      	beq.n	800a41a <WiFi_Conn_ND+0x7ba>
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a414:	2b0d      	cmp	r3, #13
 800a416:	f041 8068 	bne.w	800b4ea <WiFi_Conn_ND+0x188a>
				{
					ConectarWIFI(b);
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f7fc f9a6 	bl	800676c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	22c8      	movs	r2, #200	; 0xc8
 800a424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a438:	f001 b857 	b.w	800b4ea <WiFi_Conn_ND+0x188a>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f7fc f969 	bl	8006714 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2200      	movs	r2, #0
 800a446:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a450:	2b04      	cmp	r3, #4
 800a452:	d10e      	bne.n	800a472 <WiFi_Conn_ND+0x812>
					{
						Cambiar_CWMODE(b);
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	f7fc f973 	bl	8006740 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2264      	movs	r2, #100	; 0x64
 800a45e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2200      	movs	r2, #0
 800a466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a478:	2b0a      	cmp	r3, #10
 800a47a:	d004      	beq.n	800a486 <WiFi_Conn_ND+0x826>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a482:	2b0d      	cmp	r3, #13
 800a484:	d10a      	bne.n	800a49c <WiFi_Conn_ND+0x83c>
					{
						ConectarWIFI(b);
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f7fc f970 	bl	800676c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	22c8      	movs	r2, #200	; 0xc8
 800a490:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2200      	movs	r2, #0
 800a498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}

					IPDef(b);
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f7fc f991 	bl	80067c4 <IPDef>
					b->_estado_conexion=DEF_IP_EN_CURSO;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a4a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 800a4b4:	f001 b83a 	b.w	800b52c <WiFi_Conn_ND+0x18cc>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a4c2:	d045      	beq.n	800a550 <WiFi_Conn_ND+0x8f0>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ca:	2b04      	cmp	r3, #4
 800a4cc:	d040      	beq.n	800a550 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_ok)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d03b      	beq.n	800a550 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_error)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4de:	2b02      	cmp	r3, #2
 800a4e0:	d036      	beq.n	800a550 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_ok)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e8:	2b1b      	cmp	r3, #27
 800a4ea:	d031      	beq.n	800a550 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4f2:	2b21      	cmp	r3, #33	; 0x21
 800a4f4:	d02c      	beq.n	800a550 <WiFi_Conn_ND+0x8f0>
				{
						IPDef(b);
 800a4f6:	68f8      	ldr	r0, [r7, #12]
 800a4f8:	f7fc f964 	bl	80067c4 <IPDef>
						if(b->_enviaruart==1)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a502:	2b01      	cmp	r3, #1
 800a504:	d124      	bne.n	800a550 <WiFi_Conn_ND+0x8f0>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	f7fc faaa 	bl	8006a60 <AT_ESP8266_ND>
 800a50c:	4602      	mov	r2, r0
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2200      	movs	r2, #0
 800a518:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a522:	2b01      	cmp	r3, #1
 800a524:	d109      	bne.n	800a53a <WiFi_Conn_ND+0x8da>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a532:	4619      	mov	r1, r3
 800a534:	4610      	mov	r0, r2
 800a536:	f7f7 f889 	bl	800164c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a546:	b29a      	uxth	r2, r3
 800a548:	2364      	movs	r3, #100	; 0x64
 800a54a:	68b8      	ldr	r0, [r7, #8]
 800a54c:	f7fb f87c 	bl	8005648 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a556:	2b01      	cmp	r3, #1
 800a558:	d004      	beq.n	800a564 <WiFi_Conn_ND+0x904>
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a560:	2b1b      	cmp	r3, #27
 800a562:	d104      	bne.n	800a56e <WiFi_Conn_ND+0x90e>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a56a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a574:	2b02      	cmp	r3, #2
 800a576:	d005      	beq.n	800a584 <WiFi_Conn_ND+0x924>
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a57e:	2b21      	cmp	r3, #33	; 0x21
 800a580:	f040 87b5 	bne.w	800b4ee <WiFi_Conn_ND+0x188e>
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a58a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a58e:	f000 bfae 	b.w	800b4ee <WiFi_Conn_ND+0x188e>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f7fc f8be 	bl	8006714 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a59e:	2b04      	cmp	r3, #4
 800a5a0:	d004      	beq.n	800a5ac <WiFi_Conn_ND+0x94c>
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	d112      	bne.n	800a5d2 <WiFi_Conn_ND+0x972>
				{
					Cambiar_CWMODE(b);
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f7fc f8c7 	bl	8006740 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2264      	movs	r2, #100	; 0x64
 800a5b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d8:	2b0a      	cmp	r3, #10
 800a5da:	d005      	beq.n	800a5e8 <WiFi_Conn_ND+0x988>
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e2:	2b0d      	cmp	r3, #13
 800a5e4:	f040 8785 	bne.w	800b4f2 <WiFi_Conn_ND+0x1892>
				{
					ConectarWIFI(b);
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	f7fc f8bf 	bl	800676c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	22c8      	movs	r2, #200	; 0xc8
 800a5f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2200      	movs	r2, #0
 800a602:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a606:	f000 bf74 	b.w	800b4f2 <WiFi_Conn_ND+0x1892>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f7fc f882 	bl	8006714 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a616:	2b04      	cmp	r3, #4
 800a618:	d112      	bne.n	800a640 <WiFi_Conn_ND+0x9e0>
					{
						Cambiar_CWMODE(b);
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f7fc f890 	bl	8006740 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2264      	movs	r2, #100	; 0x64
 800a624:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a646:	2b0a      	cmp	r3, #10
 800a648:	d004      	beq.n	800a654 <WiFi_Conn_ND+0x9f4>
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a650:	2b0d      	cmp	r3, #13
 800a652:	d10e      	bne.n	800a672 <WiFi_Conn_ND+0xa12>
					{
						ConectarWIFI(b);
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f7fc f889 	bl	800676c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	22c8      	movs	r2, #200	; 0xc8
 800a65e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2200      	movs	r2, #0
 800a66e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d111      	bne.n	800a6a0 <WiFi_Conn_ND+0xa40>
					{
						ConectarTCP(b);
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f7fc f8cd 	bl	800681c <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a688:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2200      	movs	r2, #0
 800a690:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						//b->_estado_conexion=TCP_SRVR_EN_CURSO;
						//b->_estado=0;
						//b->_n_orig=0; //Borro el vector RX
					}
			}
			break;
 800a69c:	f000 bf46 	b.w	800b52c <WiFi_Conn_ND+0x18cc>
						ConectarWIFI(b);//
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f7fc f863 	bl	800676c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	22c8      	movs	r2, #200	; 0xc8
 800a6aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800a6be:	f000 bf35 	b.w	800b52c <WiFi_Conn_ND+0x18cc>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6c8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a6cc:	d04a      	beq.n	800a764 <WiFi_Conn_ND+0xb04>
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6d4:	2b02      	cmp	r3, #2
 800a6d6:	d045      	beq.n	800a764 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_ok)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d040      	beq.n	800a764 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_wifi_disconnect)
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6e8:	2b0a      	cmp	r3, #10
 800a6ea:	d03b      	beq.n	800a764 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6f2:	2b0e      	cmp	r3, #14
 800a6f4:	d036      	beq.n	800a764 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_conectado)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6fc:	2b0f      	cmp	r3, #15
 800a6fe:	d031      	beq.n	800a764 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a706:	2b10      	cmp	r3, #16
 800a708:	d02c      	beq.n	800a764 <WiFi_Conn_ND+0xb04>
				{
					ConectarTCP(b);
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f7fc f886 	bl	800681c <ConectarTCP>
						if(b->_enviaruart==1)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a716:	2b01      	cmp	r3, #1
 800a718:	d124      	bne.n	800a764 <WiFi_Conn_ND+0xb04>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f7fc f9a0 	bl	8006a60 <AT_ESP8266_ND>
 800a720:	4602      	mov	r2, r0
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a736:	2b01      	cmp	r3, #1
 800a738:	d109      	bne.n	800a74e <WiFi_Conn_ND+0xaee>
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a746:	4619      	mov	r1, r3
 800a748:	4610      	mov	r0, r2
 800a74a:	f7f6 ff7f 	bl	800164c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	2364      	movs	r3, #100	; 0x64
 800a75e:	68b8      	ldr	r0, [r7, #8]
 800a760:	f7fa ff72 	bl	8005648 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d009      	beq.n	800a782 <WiFi_Conn_ND+0xb22>
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a774:	2b0e      	cmp	r3, #14
 800a776:	d004      	beq.n	800a782 <WiFi_Conn_ND+0xb22>
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a77e:	2b0f      	cmp	r3, #15
 800a780:	d106      	bne.n	800a790 <WiFi_Conn_ND+0xb30>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f240 2261 	movw	r2, #609	; 0x261
 800a788:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800a78c:	f000 beb3 	b.w	800b4f6 <WiFi_Conn_ND+0x1896>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a796:	2b02      	cmp	r3, #2
 800a798:	d005      	beq.n	800a7a6 <WiFi_Conn_ND+0xb46>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7a0:	2b10      	cmp	r3, #16
 800a7a2:	f040 86a8 	bne.w	800b4f6 <WiFi_Conn_ND+0x1896>
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f240 225d 	movw	r2, #605	; 0x25d
 800a7ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800a7b0:	f000 bea1 	b.w	800b4f6 <WiFi_Conn_ND+0x1896>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f7fb ffad 	bl	8006714 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7c0:	2b04      	cmp	r3, #4
 800a7c2:	d112      	bne.n	800a7ea <WiFi_Conn_ND+0xb8a>
				{
					Cambiar_CWMODE(b);
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f7fb ffbb 	bl	8006740 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2264      	movs	r2, #100	; 0x64
 800a7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7f0:	2b0a      	cmp	r3, #10
 800a7f2:	d004      	beq.n	800a7fe <WiFi_Conn_ND+0xb9e>
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7fa:	2b0d      	cmp	r3, #13
 800a7fc:	d10e      	bne.n	800a81c <WiFi_Conn_ND+0xbbc>
				{
					ConectarWIFI(b);
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f7fb ffb4 	bl	800676c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	22c8      	movs	r2, #200	; 0xc8
 800a808:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2200      	movs	r2, #0
 800a810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a822:	2b02      	cmp	r3, #2
 800a824:	d00a      	beq.n	800a83c <WiFi_Conn_ND+0xbdc>
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a82c:	2b10      	cmp	r3, #16
 800a82e:	d005      	beq.n	800a83c <WiFi_Conn_ND+0xbdc>
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a836:	2b0e      	cmp	r3, #14
 800a838:	f040 865f 	bne.w	800b4fa <WiFi_Conn_ND+0x189a>
				{
					ConectarTCP(b);
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f7fb ffed 	bl	800681c <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a848:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2200      	movs	r2, #0
 800a850:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2200      	movs	r2, #0
 800a858:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a85c:	f000 be4d 	b.w	800b4fa <WiFi_Conn_ND+0x189a>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f7fb ff57 	bl	8006714 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a86c:	2b04      	cmp	r3, #4
 800a86e:	d112      	bne.n	800a896 <WiFi_Conn_ND+0xc36>
					{
						Cambiar_CWMODE(b);
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f7fb ff65 	bl	8006740 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2264      	movs	r2, #100	; 0x64
 800a87a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2200      	movs	r2, #0
 800a882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2200      	movs	r2, #0
 800a88a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2200      	movs	r2, #0
 800a892:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a89c:	2b0a      	cmp	r3, #10
 800a89e:	d004      	beq.n	800a8aa <WiFi_Conn_ND+0xc4a>
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8a6:	2b0d      	cmp	r3, #13
 800a8a8:	d10e      	bne.n	800a8c8 <WiFi_Conn_ND+0xc68>
					{
						ConectarWIFI(b);
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	f7fb ff5e 	bl	800676c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	22c8      	movs	r2, #200	; 0xc8
 800a8b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d004      	beq.n	800a8dc <WiFi_Conn_ND+0xc7c>
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8d8:	2b10      	cmp	r3, #16
 800a8da:	d10f      	bne.n	800a8fc <WiFi_Conn_ND+0xc9c>
					{
						ConectarTCP(b);
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f7fb ff9d 	bl	800681c <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a8e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a902:	2b0e      	cmp	r3, #14
 800a904:	d005      	beq.n	800a912 <WiFi_Conn_ND+0xcb2>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a90c:	2b0f      	cmp	r3, #15
 800a90e:	f040 85f6 	bne.w	800b4fe <WiFi_Conn_ND+0x189e>
					{
						if(b->_automatizacion >= WF_SEND )
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a918:	2b02      	cmp	r3, #2
 800a91a:	f240 85f0 	bls.w	800b4fe <WiFi_Conn_ND+0x189e>
						{
							EnviarDatos(b);
 800a91e:	68f8      	ldr	r0, [r7, #12]
 800a920:	f7fb ffbe 	bl	80068a0 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800a92a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2200      	movs	r2, #0
 800a932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2200      	movs	r2, #0
 800a93a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						}
					}
			}
			break;
 800a93e:	f000 bdde 	b.w	800b4fe <WiFi_Conn_ND+0x189e>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a948:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a94c:	d054      	beq.n	800a9f8 <WiFi_Conn_ND+0xd98>
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a954:	2b02      	cmp	r3, #2
 800a956:	d04f      	beq.n	800a9f8 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_wifi_disconnect)
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a95e:	2b0a      	cmp	r3, #10
 800a960:	d04a      	beq.n	800a9f8 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_desconectado)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a968:	2b10      	cmp	r3, #16
 800a96a:	d045      	beq.n	800a9f8 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_snd_err)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a972:	2b11      	cmp	r3, #17
 800a974:	d040      	beq.n	800a9f8 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_ok_to_send)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a97c:	2b14      	cmp	r3, #20
 800a97e:	d03b      	beq.n	800a9f8 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a986:	2b12      	cmp	r3, #18
 800a988:	d036      	beq.n	800a9f8 <WiFi_Conn_ND+0xd98>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a990:	2b02      	cmp	r3, #2
 800a992:	d907      	bls.n	800a9a4 <WiFi_Conn_ND+0xd44>
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d002      	beq.n	800a9a4 <WiFi_Conn_ND+0xd44>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	f7fb ff7e 	bl	80068a0 <EnviarDatos>
							b->_data2SND[9]=0x00;
							b->_data2SND[10]=0x00;
							b->_data2SND[11]=0x0A;
							b->_n_D2SND=12;*/
					}
						if(b->_enviaruart==1)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d124      	bne.n	800a9f8 <WiFi_Conn_ND+0xd98>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	f7fc f856 	bl	8006a60 <AT_ESP8266_ND>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d109      	bne.n	800a9e2 <WiFi_Conn_ND+0xd82>
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a9da:	4619      	mov	r1, r3
 800a9dc:	4610      	mov	r0, r2
 800a9de:	f7f6 fe35 	bl	800164c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a9ee:	b29a      	uxth	r2, r3
 800a9f0:	2364      	movs	r3, #100	; 0x64
 800a9f2:	68b8      	ldr	r0, [r7, #8]
 800a9f4:	f7fa fe28 	bl	8005648 <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9fe:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800aa02:	d13b      	bne.n	800aa7c <WiFi_Conn_ND+0xe1c>
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d136      	bne.n	800aa7c <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_error)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	d031      	beq.n	800aa7c <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_wifi_disconnect)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa1e:	2b0a      	cmp	r3, #10
 800aa20:	d02c      	beq.n	800aa7c <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_desconectado)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa28:	2b10      	cmp	r3, #16
 800aa2a:	d027      	beq.n	800aa7c <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_snd_err)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa32:	2b11      	cmp	r3, #17
 800aa34:	d022      	beq.n	800aa7c <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_enviado_error))
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa3c:	2b12      	cmp	r3, #18
 800aa3e:	d01d      	beq.n	800aa7c <WiFi_Conn_ND+0xe1c>
							{
								b->_enviaruart=0;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d109      	bne.n	800aa66 <WiFi_Conn_ND+0xe06>
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800aa5e:	4619      	mov	r1, r3
 800aa60:	4610      	mov	r0, r2
 800aa62:	f7f6 fdf3 	bl	800164c <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800aa72:	b29a      	uxth	r2, r3
 800aa74:	2364      	movs	r3, #100	; 0x64
 800aa76:	68b8      	ldr	r0, [r7, #8]
 800aa78:	f7fa fde6 	bl	8005648 <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa82:	2b13      	cmp	r3, #19
 800aa84:	d104      	bne.n	800aa90 <WiFi_Conn_ND+0xe30>
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f240 22c5 	movw	r2, #709	; 0x2c5
 800aa8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d014      	beq.n	800aac4 <WiFi_Conn_ND+0xe64>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaa0:	2b0a      	cmp	r3, #10
 800aaa2:	d00f      	beq.n	800aac4 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_desconectado)
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaaa:	2b10      	cmp	r3, #16
 800aaac:	d00a      	beq.n	800aac4 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_snd_err)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aab4:	2b11      	cmp	r3, #17
 800aab6:	d005      	beq.n	800aac4 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_enviado_error))
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aabe:	2b12      	cmp	r3, #18
 800aac0:	f040 851f 	bne.w	800b502 <WiFi_Conn_ND+0x18a2>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f240 22c1 	movw	r2, #705	; 0x2c1
 800aaca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800aace:	f000 bd18 	b.w	800b502 <WiFi_Conn_ND+0x18a2>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f7fb fe1e 	bl	8006714 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aade:	2b04      	cmp	r3, #4
 800aae0:	d112      	bne.n	800ab08 <WiFi_Conn_ND+0xea8>
				{
					Cambiar_CWMODE(b);
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f7fb fe2c 	bl	8006740 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2264      	movs	r2, #100	; 0x64
 800aaec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2200      	movs	r2, #0
 800aafc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab0e:	2b0a      	cmp	r3, #10
 800ab10:	d004      	beq.n	800ab1c <WiFi_Conn_ND+0xebc>
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab18:	2b0d      	cmp	r3, #13
 800ab1a:	d10e      	bne.n	800ab3a <WiFi_Conn_ND+0xeda>
				{
					ConectarWIFI(b);
 800ab1c:	68f8      	ldr	r0, [r7, #12]
 800ab1e:	f7fb fe25 	bl	800676c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	22c8      	movs	r2, #200	; 0xc8
 800ab26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab40:	2b0c      	cmp	r3, #12
 800ab42:	d10f      	bne.n	800ab64 <WiFi_Conn_ND+0xf04>
				{
					ConectarTCP(b);
 800ab44:	68f8      	ldr	r0, [r7, #12]
 800ab46:	f7fb fe69 	bl	800681c <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ab50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2200      	movs	r2, #0
 800ab58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab6a:	2b02      	cmp	r3, #2
 800ab6c:	d00f      	beq.n	800ab8e <WiFi_Conn_ND+0xf2e>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab74:	2b10      	cmp	r3, #16
 800ab76:	d00a      	beq.n	800ab8e <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_snd_err)
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab7e:	2b11      	cmp	r3, #17
 800ab80:	d005      	beq.n	800ab8e <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab88:	2b12      	cmp	r3, #18
 800ab8a:	f040 84bc 	bne.w	800b506 <WiFi_Conn_ND+0x18a6>
				{
					ConectarTCP(b);
 800ab8e:	68f8      	ldr	r0, [r7, #12]
 800ab90:	f7fb fe44 	bl	800681c <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ab9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2200      	movs	r2, #0
 800abaa:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800abae:	f000 bcaa 	b.w	800b506 <WiFi_Conn_ND+0x18a6>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f7fb fdae 	bl	8006714 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abbe:	2b04      	cmp	r3, #4
 800abc0:	d112      	bne.n	800abe8 <WiFi_Conn_ND+0xf88>
					{
						Cambiar_CWMODE(b);
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f7fb fdbc 	bl	8006740 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2264      	movs	r2, #100	; 0x64
 800abcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2200      	movs	r2, #0
 800abd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2200      	movs	r2, #0
 800abdc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abee:	2b0a      	cmp	r3, #10
 800abf0:	d004      	beq.n	800abfc <WiFi_Conn_ND+0xf9c>
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf8:	2b0d      	cmp	r3, #13
 800abfa:	d10e      	bne.n	800ac1a <WiFi_Conn_ND+0xfba>
					{
						ConectarWIFI(b);
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f7fb fdb5 	bl	800676c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	22c8      	movs	r2, #200	; 0xc8
 800ac06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac20:	2b02      	cmp	r3, #2
 800ac22:	d00e      	beq.n	800ac42 <WiFi_Conn_ND+0xfe2>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac2a:	2b0b      	cmp	r3, #11
 800ac2c:	d009      	beq.n	800ac42 <WiFi_Conn_ND+0xfe2>
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac34:	2b0c      	cmp	r3, #12
 800ac36:	d004      	beq.n	800ac42 <WiFi_Conn_ND+0xfe2>
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac3e:	2b10      	cmp	r3, #16
 800ac40:	d10f      	bne.n	800ac62 <WiFi_Conn_ND+0x1002>
					{
						ConectarTCP(b);
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f7fb fdea 	bl	800681c <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ac4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800ac62:	20c8      	movs	r0, #200	; 0xc8
 800ac64:	f7f8 f83c 	bl	8002ce0 <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	d916      	bls.n	800aca0 <WiFi_Conn_ND+0x1040>
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d011      	beq.n	800aca0 <WiFi_Conn_ND+0x1040>
					{
							EnviarDatos(b);
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f7fb fe0f 	bl	80068a0 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800ac88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800ac9c:	f000 bc46 	b.w	800b52c <WiFi_Conn_ND+0x18cc>
							b->_estado_conexion=TCP_CONN_OK;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f240 2261 	movw	r2, #609	; 0x261
 800aca6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2200      	movs	r2, #0
 800acae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800acba:	f000 bc37 	b.w	800b52c <WiFi_Conn_ND+0x18cc>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acc4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800acc8:	d045      	beq.n	800ad56 <WiFi_Conn_ND+0x10f6>
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acd0:	2b02      	cmp	r3, #2
 800acd2:	d040      	beq.n	800ad56 <WiFi_Conn_ND+0x10f6>
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acda:	2b0a      	cmp	r3, #10
 800acdc:	d03b      	beq.n	800ad56 <WiFi_Conn_ND+0x10f6>
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ace4:	2b15      	cmp	r3, #21
 800ace6:	d036      	beq.n	800ad56 <WiFi_Conn_ND+0x10f6>
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acee:	2b16      	cmp	r3, #22
 800acf0:	d031      	beq.n	800ad56 <WiFi_Conn_ND+0x10f6>
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acf8:	2b17      	cmp	r3, #23
 800acfa:	d02c      	beq.n	800ad56 <WiFi_Conn_ND+0x10f6>
							{
								CrearServidorTCP(b);
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f7fb fda3 	bl	8006848 <CrearServidorTCP>
									if(b->_enviaruart==1)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d124      	bne.n	800ad56 <WiFi_Conn_ND+0x10f6>
										{
											b->_estado=AT_ESP8266_ND(b);
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f7fb fea7 	bl	8006a60 <AT_ESP8266_ND>
 800ad12:	4602      	mov	r2, r0
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d109      	bne.n	800ad40 <WiFi_Conn_ND+0x10e0>
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ad38:	4619      	mov	r1, r3
 800ad3a:	4610      	mov	r0, r2
 800ad3c:	f7f6 fc86 	bl	800164c <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	2364      	movs	r3, #100	; 0x64
 800ad50:	68b8      	ldr	r0, [r7, #8]
 800ad52:	f7fa fc79 	bl	8005648 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad5c:	2b15      	cmp	r3, #21
 800ad5e:	d004      	beq.n	800ad6a <WiFi_Conn_ND+0x110a>
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad66:	2b17      	cmp	r3, #23
 800ad68:	d104      	bne.n	800ad74 <WiFi_Conn_ND+0x1114>
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f240 3229 	movw	r2, #809	; 0x329
 800ad70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad7a:	2b16      	cmp	r3, #22
 800ad7c:	f040 83c5 	bne.w	800b50a <WiFi_Conn_ND+0x18aa>
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f240 3225 	movw	r2, #805	; 0x325
 800ad86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800ad8a:	e3be      	b.n	800b50a <WiFi_Conn_ND+0x18aa>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ad8c:	68f8      	ldr	r0, [r7, #12]
 800ad8e:	f7fb fcc1 	bl	8006714 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad98:	2b04      	cmp	r3, #4
 800ad9a:	d112      	bne.n	800adc2 <WiFi_Conn_ND+0x1162>
							{
								Cambiar_CWMODE(b);
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	f7fb fccf 	bl	8006740 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2264      	movs	r2, #100	; 0x64
 800ada6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2200      	movs	r2, #0
 800adae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2200      	movs	r2, #0
 800adb6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adc8:	2b0a      	cmp	r3, #10
 800adca:	d004      	beq.n	800add6 <WiFi_Conn_ND+0x1176>
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800add2:	2b0d      	cmp	r3, #13
 800add4:	d10e      	bne.n	800adf4 <WiFi_Conn_ND+0x1194>
							{
								ConectarWIFI(b);
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f7fb fcc8 	bl	800676c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	22c8      	movs	r2, #200	; 0xc8
 800ade0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2200      	movs	r2, #0
 800ade8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2200      	movs	r2, #0
 800adf0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d005      	beq.n	800ae0a <WiFi_Conn_ND+0x11aa>
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae04:	2b10      	cmp	r3, #16
 800ae06:	f040 8382 	bne.w	800b50e <WiFi_Conn_ND+0x18ae>
							{
								ConectarTCP(b);
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f7fb fd06 	bl	800681c <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ae16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2200      	movs	r2, #0
 800ae26:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800ae2a:	e370      	b.n	800b50e <WiFi_Conn_ND+0x18ae>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800ae2c:	68f8      	ldr	r0, [r7, #12]
 800ae2e:	f7fb fc71 	bl	8006714 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae38:	2b04      	cmp	r3, #4
 800ae3a:	d112      	bne.n	800ae62 <WiFi_Conn_ND+0x1202>
							{
								Cambiar_CWMODE(b);
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f7fb fc7f 	bl	8006740 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2264      	movs	r2, #100	; 0x64
 800ae46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2200      	movs	r2, #0
 800ae56:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae68:	2b0a      	cmp	r3, #10
 800ae6a:	d004      	beq.n	800ae76 <WiFi_Conn_ND+0x1216>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae72:	2b0d      	cmp	r3, #13
 800ae74:	d10e      	bne.n	800ae94 <WiFi_Conn_ND+0x1234>
							{
								ConectarWIFI(b);
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f7fb fc78 	bl	800676c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	22c8      	movs	r2, #200	; 0xc8
 800ae80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	d005      	beq.n	800aeaa <WiFi_Conn_ND+0x124a>
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aea4:	2b10      	cmp	r3, #16
 800aea6:	f040 8334 	bne.w	800b512 <WiFi_Conn_ND+0x18b2>
							{
								ConectarTCP(b);
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	f7fb fcb6 	bl	800681c <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aeb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800aeca:	e322      	b.n	800b512 <WiFi_Conn_ND+0x18b2>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f7fb fc21 	bl	8006714 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aed8:	2b04      	cmp	r3, #4
 800aeda:	d112      	bne.n	800af02 <WiFi_Conn_ND+0x12a2>
							{
								Cambiar_CWMODE(b);
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f7fb fc2f 	bl	8006740 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2264      	movs	r2, #100	; 0x64
 800aee6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2200      	movs	r2, #0
 800aeee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2200      	movs	r2, #0
 800aefe:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af08:	2b0a      	cmp	r3, #10
 800af0a:	d004      	beq.n	800af16 <WiFi_Conn_ND+0x12b6>
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af12:	2b0d      	cmp	r3, #13
 800af14:	d10e      	bne.n	800af34 <WiFi_Conn_ND+0x12d4>
							{
								ConectarWIFI(b);
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	f7fb fc28 	bl	800676c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	22c8      	movs	r2, #200	; 0xc8
 800af20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2200      	movs	r2, #0
 800af28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2200      	movs	r2, #0
 800af30:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af3a:	2b02      	cmp	r3, #2
 800af3c:	d005      	beq.n	800af4a <WiFi_Conn_ND+0x12ea>
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af44:	2b10      	cmp	r3, #16
 800af46:	f040 82e6 	bne.w	800b516 <WiFi_Conn_ND+0x18b6>
							{
								ConectarTCP(b);
 800af4a:	68f8      	ldr	r0, [r7, #12]
 800af4c:	f7fb fc66 	bl	800681c <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f44f 7216 	mov.w	r2, #600	; 0x258
 800af56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2200      	movs	r2, #0
 800af66:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800af6a:	e2d4      	b.n	800b516 <WiFi_Conn_ND+0x18b6>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f7fb fbd1 	bl	8006714 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af78:	2b04      	cmp	r3, #4
 800af7a:	d112      	bne.n	800afa2 <WiFi_Conn_ND+0x1342>
							{
								Cambiar_CWMODE(b);
 800af7c:	68f8      	ldr	r0, [r7, #12]
 800af7e:	f7fb fbdf 	bl	8006740 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2264      	movs	r2, #100	; 0x64
 800af86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2200      	movs	r2, #0
 800af96:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2200      	movs	r2, #0
 800af9e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afa8:	2b0a      	cmp	r3, #10
 800afaa:	d004      	beq.n	800afb6 <WiFi_Conn_ND+0x1356>
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afb2:	2b0d      	cmp	r3, #13
 800afb4:	d10e      	bne.n	800afd4 <WiFi_Conn_ND+0x1374>
							{
								ConectarWIFI(b);
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	f7fb fbd8 	bl	800676c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	22c8      	movs	r2, #200	; 0xc8
 800afc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2200      	movs	r2, #0
 800afd0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d005      	beq.n	800afea <WiFi_Conn_ND+0x138a>
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afe4:	2b10      	cmp	r3, #16
 800afe6:	f040 8298 	bne.w	800b51a <WiFi_Conn_ND+0x18ba>
							{
								ConectarTCP(b);
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f7fb fc16 	bl	800681c <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aff6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2200      	movs	r2, #0
 800affe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b00a:	e286      	b.n	800b51a <WiFi_Conn_ND+0x18ba>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f7fb fb81 	bl	8006714 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2201      	movs	r2, #1
 800b016:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b020:	2b04      	cmp	r3, #4
 800b022:	d112      	bne.n	800b04a <WiFi_Conn_ND+0x13ea>
								{
									Cambiar_CWMODE(b);
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f7fb fb8b 	bl	8006740 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2264      	movs	r2, #100	; 0x64
 800b02e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2200      	movs	r2, #0
 800b036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2200      	movs	r2, #0
 800b046:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b050:	2b0a      	cmp	r3, #10
 800b052:	d004      	beq.n	800b05e <WiFi_Conn_ND+0x13fe>
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b05a:	2b0d      	cmp	r3, #13
 800b05c:	d10e      	bne.n	800b07c <WiFi_Conn_ND+0x141c>
								{
									ConectarWIFI(b);
 800b05e:	68f8      	ldr	r0, [r7, #12]
 800b060:	f7fb fb84 	bl	800676c <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	22c8      	movs	r2, #200	; 0xc8
 800b068:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2200      	movs	r2, #0
 800b070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2200      	movs	r2, #0
 800b078:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b082:	2b02      	cmp	r3, #2
 800b084:	d004      	beq.n	800b090 <WiFi_Conn_ND+0x1430>
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b08c:	2b10      	cmp	r3, #16
 800b08e:	d10f      	bne.n	800b0b0 <WiFi_Conn_ND+0x1450>
								{
									ConectarTCP(b);
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	f7fb fbc3 	bl	800681c <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b09c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	f040 8231 	bne.w	800b51e <WiFi_Conn_ND+0x18be>
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	f000 822b 	beq.w	800b51e <WiFi_Conn_ND+0x18be>
								{
									EnviarDatosSRVR(b);
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	f7fb fbd3 	bl	8006874 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b0d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800b0e8:	e219      	b.n	800b51e <WiFi_Conn_ND+0x18be>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0f0:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b0f4:	d063      	beq.n	800b1be <WiFi_Conn_ND+0x155e>
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0fc:	2b02      	cmp	r3, #2
 800b0fe:	d05e      	beq.n	800b1be <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_disconnect)&&
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b106:	2b0a      	cmp	r3, #10
 800b108:	d059      	beq.n	800b1be <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_connected)&&
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800b110:	2b0b      	cmp	r3, #11
 800b112:	d054      	beq.n	800b1be <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_gotip)&&
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800b11a:	2b0c      	cmp	r3, #12
 800b11c:	d04f      	beq.n	800b1be <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_desconectado)&&
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800b124:	2b10      	cmp	r3, #16
 800b126:	d04a      	beq.n	800b1be <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_snd_err)&&
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800b12e:	2b11      	cmp	r3, #17
 800b130:	d045      	beq.n	800b1be <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_error)&&
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800b138:	2b12      	cmp	r3, #18
 800b13a:	d040      	beq.n	800b1be <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800b142:	2b13      	cmp	r3, #19
 800b144:	d03b      	beq.n	800b1be <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b14c:	2b16      	cmp	r3, #22
 800b14e:	d036      	beq.n	800b1be <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b156:	2b19      	cmp	r3, #25
 800b158:	d031      	beq.n	800b1be <WiFi_Conn_ND+0x155e>
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b160:	2b00      	cmp	r3, #0
 800b162:	d02c      	beq.n	800b1be <WiFi_Conn_ND+0x155e>
								{
								EnviarDatosSRVR(b);
 800b164:	68f8      	ldr	r0, [r7, #12]
 800b166:	f7fb fb85 	bl	8006874 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b170:	2b01      	cmp	r3, #1
 800b172:	d124      	bne.n	800b1be <WiFi_Conn_ND+0x155e>
										{
											b->_estado=AT_ESP8266_ND(b);
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	f7fb fc73 	bl	8006a60 <AT_ESP8266_ND>
 800b17a:	4602      	mov	r2, r0
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2200      	movs	r2, #0
 800b186:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800b190:	2b01      	cmp	r3, #1
 800b192:	d109      	bne.n	800b1a8 <WiFi_Conn_ND+0x1548>
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	4610      	mov	r0, r2
 800b1a4:	f7f6 fa52 	bl	800164c <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	2364      	movs	r3, #100	; 0x64
 800b1b8:	68b8      	ldr	r0, [r7, #8]
 800b1ba:	f7fa fa45 	bl	8005648 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1c4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b1c8:	d154      	bne.n	800b274 <WiFi_Conn_ND+0x1614>
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d14f      	bne.n	800b274 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_error)&&
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b1da:	2b02      	cmp	r3, #2
 800b1dc:	d04a      	beq.n	800b274 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_disconnect)&&
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800b1e4:	2b0a      	cmp	r3, #10
 800b1e6:	d045      	beq.n	800b274 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_connected)&&
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800b1ee:	2b0b      	cmp	r3, #11
 800b1f0:	d040      	beq.n	800b274 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_gotip)&&
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800b1f8:	2b0c      	cmp	r3, #12
 800b1fa:	d03b      	beq.n	800b274 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_desconectado)&&
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800b202:	2b10      	cmp	r3, #16
 800b204:	d036      	beq.n	800b274 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_snd_err)&&
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800b20c:	2b11      	cmp	r3, #17
 800b20e:	d031      	beq.n	800b274 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_error)&&
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800b216:	2b12      	cmp	r3, #18
 800b218:	d02c      	beq.n	800b274 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800b220:	2b13      	cmp	r3, #19
 800b222:	d027      	beq.n	800b274 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b22a:	2b16      	cmp	r3, #22
 800b22c:	d022      	beq.n	800b274 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b234:	2b19      	cmp	r3, #25
 800b236:	d01d      	beq.n	800b274 <WiFi_Conn_ND+0x1614>
										{
											b->_enviaruart=0;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800b246:	2b01      	cmp	r3, #1
 800b248:	d109      	bne.n	800b25e <WiFi_Conn_ND+0x15fe>
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b256:	4619      	mov	r1, r3
 800b258:	4610      	mov	r0, r2
 800b25a:	f7f6 f9f7 	bl	800164c <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b26a:	b29a      	uxth	r2, r3
 800b26c:	2364      	movs	r3, #100	; 0x64
 800b26e:	68b8      	ldr	r0, [r7, #8]
 800b270:	f7fa f9ea 	bl	8005648 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b27a:	2b13      	cmp	r3, #19
 800b27c:	d104      	bne.n	800b288 <WiFi_Conn_ND+0x1628>
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f240 328d 	movw	r2, #909	; 0x38d
 800b284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b28e:	2b02      	cmp	r3, #2
 800b290:	d02d      	beq.n	800b2ee <WiFi_Conn_ND+0x168e>
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b298:	2b04      	cmp	r3, #4
 800b29a:	d028      	beq.n	800b2ee <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b2a2:	2b0a      	cmp	r3, #10
 800b2a4:	d023      	beq.n	800b2ee <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2ac:	2b0b      	cmp	r3, #11
 800b2ae:	d01e      	beq.n	800b2ee <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b2b6:	2b0c      	cmp	r3, #12
 800b2b8:	d019      	beq.n	800b2ee <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2c0:	2b10      	cmp	r3, #16
 800b2c2:	d014      	beq.n	800b2ee <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b2ca:	2b11      	cmp	r3, #17
 800b2cc:	d00f      	beq.n	800b2ee <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2d4:	2b12      	cmp	r3, #18
 800b2d6:	d00a      	beq.n	800b2ee <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b2de:	2b16      	cmp	r3, #22
 800b2e0:	d005      	beq.n	800b2ee <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2e8:	2b19      	cmp	r3, #25
 800b2ea:	f040 811a 	bne.w	800b522 <WiFi_Conn_ND+0x18c2>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f240 3289 	movw	r2, #905	; 0x389
 800b2f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800b2f8:	e113      	b.n	800b522 <WiFi_Conn_ND+0x18c2>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800b2fa:	68f8      	ldr	r0, [r7, #12]
 800b2fc:	f7fb fa0a 	bl	8006714 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b306:	2b04      	cmp	r3, #4
 800b308:	d009      	beq.n	800b31e <WiFi_Conn_ND+0x16be>
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b310:	2b0b      	cmp	r3, #11
 800b312:	d004      	beq.n	800b31e <WiFi_Conn_ND+0x16be>
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b31a:	2b0c      	cmp	r3, #12
 800b31c:	d112      	bne.n	800b344 <WiFi_Conn_ND+0x16e4>
							{
								Cambiar_CWMODE(b);
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	f7fb fa0e 	bl	8006740 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2264      	movs	r2, #100	; 0x64
 800b328:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2200      	movs	r2, #0
 800b330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2200      	movs	r2, #0
 800b338:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2200      	movs	r2, #0
 800b340:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b34a:	2b0a      	cmp	r3, #10
 800b34c:	d004      	beq.n	800b358 <WiFi_Conn_ND+0x16f8>
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b354:	2b0d      	cmp	r3, #13
 800b356:	d10e      	bne.n	800b376 <WiFi_Conn_ND+0x1716>
							{
								ConectarWIFI(b);
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	f7fb fa07 	bl	800676c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	22c8      	movs	r2, #200	; 0xc8
 800b362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2200      	movs	r2, #0
 800b36a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2200      	movs	r2, #0
 800b372:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b37c:	2b16      	cmp	r3, #22
 800b37e:	d10c      	bne.n	800b39a <WiFi_Conn_ND+0x173a>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f240 3225 	movw	r2, #805	; 0x325
 800b386:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2200      	movs	r2, #0
 800b396:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3a0:	2b18      	cmp	r3, #24
 800b3a2:	d10c      	bne.n	800b3be <WiFi_Conn_ND+0x175e>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f240 3229 	movw	r2, #809	; 0x329
 800b3aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3c4:	2b19      	cmp	r3, #25
 800b3c6:	d008      	beq.n	800b3da <WiFi_Conn_ND+0x177a>
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3ce:	2b11      	cmp	r3, #17
 800b3d0:	d003      	beq.n	800b3da <WiFi_Conn_ND+0x177a>
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2212      	movs	r2, #18
 800b3d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	f040 80a0 	bne.w	800b526 <WiFi_Conn_ND+0x18c6>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b3ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

							}


						}
						break;
 800b400:	e091      	b.n	800b526 <WiFi_Conn_ND+0x18c6>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	f7fb f986 	bl	8006714 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b40e:	2b04      	cmp	r3, #4
 800b410:	d009      	beq.n	800b426 <WiFi_Conn_ND+0x17c6>
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b418:	2b0b      	cmp	r3, #11
 800b41a:	d004      	beq.n	800b426 <WiFi_Conn_ND+0x17c6>
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b422:	2b0c      	cmp	r3, #12
 800b424:	d112      	bne.n	800b44c <WiFi_Conn_ND+0x17ec>
								{
									Cambiar_CWMODE(b);
 800b426:	68f8      	ldr	r0, [r7, #12]
 800b428:	f7fb f98a 	bl	8006740 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2264      	movs	r2, #100	; 0x64
 800b430:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2200      	movs	r2, #0
 800b438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2200      	movs	r2, #0
 800b440:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2200      	movs	r2, #0
 800b448:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b452:	2b0a      	cmp	r3, #10
 800b454:	d004      	beq.n	800b460 <WiFi_Conn_ND+0x1800>
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b45c:	2b0d      	cmp	r3, #13
 800b45e:	d10e      	bne.n	800b47e <WiFi_Conn_ND+0x181e>
								{
									ConectarWIFI(b);
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	f7fb f983 	bl	800676c <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	22c8      	movs	r2, #200	; 0xc8
 800b46a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2200      	movs	r2, #0
 800b472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2200      	movs	r2, #0
 800b47a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b484:	2b01      	cmp	r3, #1
 800b486:	d004      	beq.n	800b492 <WiFi_Conn_ND+0x1832>
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d14b      	bne.n	800b52a <WiFi_Conn_ND+0x18ca>
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d046      	beq.n	800b52a <WiFi_Conn_ND+0x18ca>
								{
									EnviarDatosSRVR(b);
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f7fb f9e9 	bl	8006874 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b4a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_new_data_rcv=0;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_send_data=0;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
								}

						}
						break;
 800b4cc:	e02d      	b.n	800b52a <WiFi_Conn_ND+0x18ca>
			break;
 800b4ce:	bf00      	nop
 800b4d0:	e02c      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
			break;
 800b4d2:	bf00      	nop
 800b4d4:	e02a      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
			break;
 800b4d6:	bf00      	nop
 800b4d8:	e028      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
			break;
 800b4da:	bf00      	nop
 800b4dc:	e026      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
			break;
 800b4de:	bf00      	nop
 800b4e0:	e024      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
			break;
 800b4e2:	bf00      	nop
 800b4e4:	e022      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
			break;
 800b4e6:	bf00      	nop
 800b4e8:	e020      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
			break;
 800b4ea:	bf00      	nop
 800b4ec:	e01e      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
			break;
 800b4ee:	bf00      	nop
 800b4f0:	e01c      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
			break;
 800b4f2:	bf00      	nop
 800b4f4:	e01a      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
			break;
 800b4f6:	bf00      	nop
 800b4f8:	e018      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
			break;
 800b4fa:	bf00      	nop
 800b4fc:	e016      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
			break;
 800b4fe:	bf00      	nop
 800b500:	e014      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
			break;
 800b502:	bf00      	nop
 800b504:	e012      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
			break;
 800b506:	bf00      	nop
 800b508:	e010      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
						break;
 800b50a:	bf00      	nop
 800b50c:	e00e      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
						break;
 800b50e:	bf00      	nop
 800b510:	e00c      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
						break;
 800b512:	bf00      	nop
 800b514:	e00a      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
						break;
 800b516:	bf00      	nop
 800b518:	e008      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
						break;
 800b51a:	bf00      	nop
 800b51c:	e006      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
						break;
 800b51e:	bf00      	nop
 800b520:	e004      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
						break;
 800b522:	bf00      	nop
 800b524:	e002      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
						break;
 800b526:	bf00      	nop
 800b528:	e000      	b.n	800b52c <WiFi_Conn_ND+0x18cc>
						break;
 800b52a:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800b532:	4618      	mov	r0, r3
 800b534:	3710      	adds	r7, #16
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop

0800b53c <httpPOST>:




httpPOST(char * endpoint, char* server_ip, char * port,uint16_t d1, uint16_t d2, uint16_t d3, uint16_t d4,uint16_t d5,uint16_t d6,uint16_t d7,uint16_t d8,uint16_t d9,uint16_t d10, uint16_t d11,uint16_t d12,uint16_t d13,uint16_t d14,uint16_t d15,uint16_t d16, uint16_t devId, char  * post, char * body, int max_char)
{
 800b53c:	b5b0      	push	{r4, r5, r7, lr}
 800b53e:	b0a8      	sub	sp, #160	; 0xa0
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	607a      	str	r2, [r7, #4]
 800b548:	807b      	strh	r3, [r7, #2]
	post[0]='\0';
 800b54a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b54e:	2200      	movs	r2, #0
 800b550:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b556:	2200      	movs	r2, #0
 800b558:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b55a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b55e:	f7f4 fe49 	bl	80001f4 <strlen>
 800b562:	4603      	mov	r3, r0
 800b564:	461a      	mov	r2, r3
 800b566:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b56a:	4413      	add	r3, r2
 800b56c:	4aed      	ldr	r2, [pc, #948]	; (800b924 <httpPOST+0x3e8>)
 800b56e:	6810      	ldr	r0, [r2, #0]
 800b570:	6018      	str	r0, [r3, #0]
 800b572:	8892      	ldrh	r2, [r2, #4]
 800b574:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f7f4 fe3c 	bl	80001f4 <strlen>
 800b57c:	4603      	mov	r3, r0
 800b57e:	461a      	mov	r2, r3
 800b580:	68f9      	ldr	r1, [r7, #12]
 800b582:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b586:	f003 fe20 	bl	800f1ca <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b58a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b58e:	f7f4 fe31 	bl	80001f4 <strlen>
 800b592:	4603      	mov	r3, r0
 800b594:	461a      	mov	r2, r3
 800b596:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b59a:	4413      	add	r3, r2
 800b59c:	49e2      	ldr	r1, [pc, #904]	; (800b928 <httpPOST+0x3ec>)
 800b59e:	461a      	mov	r2, r3
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	cb03      	ldmia	r3!, {r0, r1}
 800b5a4:	6010      	str	r0, [r2, #0]
 800b5a6:	6051      	str	r1, [r2, #4]
 800b5a8:	8819      	ldrh	r1, [r3, #0]
 800b5aa:	789b      	ldrb	r3, [r3, #2]
 800b5ac:	8111      	strh	r1, [r2, #8]
 800b5ae:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b5b0:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b5b4:	f7f4 fe1e 	bl	80001f4 <strlen>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b5c0:	4413      	add	r3, r2
 800b5c2:	4ada      	ldr	r2, [pc, #872]	; (800b92c <httpPOST+0x3f0>)
 800b5c4:	8811      	ldrh	r1, [r2, #0]
 800b5c6:	7892      	ldrb	r2, [r2, #2]
 800b5c8:	8019      	strh	r1, [r3, #0]
 800b5ca:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b5cc:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b5d0:	f7f4 fe10 	bl	80001f4 <strlen>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b5dc:	4413      	add	r3, r2
 800b5de:	4ad4      	ldr	r2, [pc, #848]	; (800b930 <httpPOST+0x3f4>)
 800b5e0:	6810      	ldr	r0, [r2, #0]
 800b5e2:	6018      	str	r0, [r3, #0]
 800b5e4:	8891      	ldrh	r1, [r2, #4]
 800b5e6:	7992      	ldrb	r2, [r2, #6]
 800b5e8:	8099      	strh	r1, [r3, #4]
 800b5ea:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b5ec:	68b8      	ldr	r0, [r7, #8]
 800b5ee:	f7f4 fe01 	bl	80001f4 <strlen>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	68b9      	ldr	r1, [r7, #8]
 800b5f8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b5fc:	f003 fde5 	bl	800f1ca <strncat>
	strncat(post,":",1);
 800b600:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b604:	f7f4 fdf6 	bl	80001f4 <strlen>
 800b608:	4603      	mov	r3, r0
 800b60a:	461a      	mov	r2, r3
 800b60c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b610:	4413      	add	r3, r2
 800b612:	49c8      	ldr	r1, [pc, #800]	; (800b934 <httpPOST+0x3f8>)
 800b614:	461a      	mov	r2, r3
 800b616:	460b      	mov	r3, r1
 800b618:	881b      	ldrh	r3, [r3, #0]
 800b61a:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f7f4 fde9 	bl	80001f4 <strlen>
 800b622:	4603      	mov	r3, r0
 800b624:	461a      	mov	r2, r3
 800b626:	6879      	ldr	r1, [r7, #4]
 800b628:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b62c:	f003 fdcd 	bl	800f1ca <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b630:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b634:	f7f4 fdde 	bl	80001f4 <strlen>
 800b638:	4603      	mov	r3, r0
 800b63a:	461a      	mov	r2, r3
 800b63c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b640:	4413      	add	r3, r2
 800b642:	4aba      	ldr	r2, [pc, #744]	; (800b92c <httpPOST+0x3f0>)
 800b644:	8811      	ldrh	r1, [r2, #0]
 800b646:	7892      	ldrb	r2, [r2, #2]
 800b648:	8019      	strh	r1, [r3, #0]
 800b64a:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b64c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b650:	f7f4 fdd0 	bl	80001f4 <strlen>
 800b654:	4603      	mov	r3, r0
 800b656:	461a      	mov	r2, r3
 800b658:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b65c:	4413      	add	r3, r2
 800b65e:	4ab6      	ldr	r2, [pc, #728]	; (800b938 <httpPOST+0x3fc>)
 800b660:	461d      	mov	r5, r3
 800b662:	4614      	mov	r4, r2
 800b664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b666:	6028      	str	r0, [r5, #0]
 800b668:	6069      	str	r1, [r5, #4]
 800b66a:	60aa      	str	r2, [r5, #8]
 800b66c:	60eb      	str	r3, [r5, #12]
 800b66e:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b670:	6128      	str	r0, [r5, #16]
 800b672:	6169      	str	r1, [r5, #20]
 800b674:	61aa      	str	r2, [r5, #24]
 800b676:	8823      	ldrh	r3, [r4, #0]
 800b678:	78a2      	ldrb	r2, [r4, #2]
 800b67a:	83ab      	strh	r3, [r5, #28]
 800b67c:	4613      	mov	r3, r2
 800b67e:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b680:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b684:	f7f4 fdb6 	bl	80001f4 <strlen>
 800b688:	4603      	mov	r3, r0
 800b68a:	461a      	mov	r2, r3
 800b68c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b690:	4413      	add	r3, r2
 800b692:	4aa6      	ldr	r2, [pc, #664]	; (800b92c <httpPOST+0x3f0>)
 800b694:	8811      	ldrh	r1, [r2, #0]
 800b696:	7892      	ldrb	r2, [r2, #2]
 800b698:	8019      	strh	r1, [r3, #0]
 800b69a:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b69c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b6a0:	f7f4 fda8 	bl	80001f4 <strlen>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b6ac:	4413      	add	r3, r2
 800b6ae:	4aa3      	ldr	r2, [pc, #652]	; (800b93c <httpPOST+0x400>)
 800b6b0:	461c      	mov	r4, r3
 800b6b2:	4615      	mov	r5, r2
 800b6b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b6b6:	6020      	str	r0, [r4, #0]
 800b6b8:	6061      	str	r1, [r4, #4]
 800b6ba:	60a2      	str	r2, [r4, #8]
 800b6bc:	60e3      	str	r3, [r4, #12]


	// Conversión de datos recibido por ModBUS
	char _d1[8];
	_d1[0]='\0';
 800b6be:	2300      	movs	r3, #0
 800b6c0:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	INTOA( d1, _d1);//FTOA( d1,_d1,2);
 800b6c4:	887b      	ldrh	r3, [r7, #2]
 800b6c6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b6ca:	4611      	mov	r1, r2
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f003 faf5 	bl	800ecbc <INTOA>

	char _d2[8];
	_d2[0]='\0';
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	INTOA( d2, _d2);//FTOA( d2, _d2,2);//INTOA( dp_filtro, _filtro);//
 800b6d8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800b6dc:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800b6e0:	4611      	mov	r1, r2
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f003 faea 	bl	800ecbc <INTOA>

	char _d3[8];
	_d3[0]='\0';
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	INTOA( d3, _d3);//FTOA( d3, _d3,2);
 800b6ee:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800b6f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800b6f6:	4611      	mov	r1, r2
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f003 fadf 	bl	800ecbc <INTOA>

	char _d4[8];
	_d4[0]='\0';
 800b6fe:	2300      	movs	r3, #0
 800b700:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	INTOA( d4, _d4);//FTOA( d4, _d4,2);
 800b704:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800b708:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800b70c:	4611      	mov	r1, r2
 800b70e:	4618      	mov	r0, r3
 800b710:	f003 fad4 	bl	800ecbc <INTOA>

	char _d5[8];
	_d5[0]='\0';
 800b714:	2300      	movs	r3, #0
 800b716:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	INTOA( d5, _d5);//FTOA( d5, _d5,2);
 800b71a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800b71e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b722:	4611      	mov	r1, r2
 800b724:	4618      	mov	r0, r3
 800b726:	f003 fac9 	bl	800ecbc <INTOA>

	char _d6[8];
	_d6[0]='\0';
 800b72a:	2300      	movs	r3, #0
 800b72c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	INTOA( d6, _d6);//INTOA( d6, _d6);
 800b730:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800b734:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b738:	4611      	mov	r1, r2
 800b73a:	4618      	mov	r0, r3
 800b73c:	f003 fabe 	bl	800ecbc <INTOA>

	char _d7[8];
	_d7[0]='\0';
 800b740:	2300      	movs	r3, #0
 800b742:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	INTOA( d7, _d7);//FTOA( d7, _d7,2);
 800b746:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800b74a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800b74e:	4611      	mov	r1, r2
 800b750:	4618      	mov	r0, r3
 800b752:	f003 fab3 	bl	800ecbc <INTOA>

	char _d8[8];
	_d8[0]='\0';
 800b756:	2300      	movs	r3, #0
 800b758:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	INTOA( d8, _d8);//FTOA( d8, _d8,2);
 800b75c:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800b760:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b764:	4611      	mov	r1, r2
 800b766:	4618      	mov	r0, r3
 800b768:	f003 faa8 	bl	800ecbc <INTOA>

	char _d9[8];
	_d9[0]='\0';
 800b76c:	2300      	movs	r3, #0
 800b76e:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	INTOA( d9, _d9);//FTOA( d9, _d9,2);
 800b772:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800b776:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b77a:	4611      	mov	r1, r2
 800b77c:	4618      	mov	r0, r3
 800b77e:	f003 fa9d 	bl	800ecbc <INTOA>

	char _d10[8];
	_d10[0]='\0';
 800b782:	2300      	movs	r3, #0
 800b784:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	INTOA( d10, _d10);//FTOA( d10, _d10,2);
 800b788:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800b78c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b790:	4611      	mov	r1, r2
 800b792:	4618      	mov	r0, r3
 800b794:	f003 fa92 	bl	800ecbc <INTOA>

	char _d11[8];
	_d11[0]='\0';
 800b798:	2300      	movs	r3, #0
 800b79a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	INTOA( d11, _d11);//FTOA( d11, _d11,2);
 800b79e:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800b7a2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b7a6:	4611      	mov	r1, r2
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f003 fa87 	bl	800ecbc <INTOA>

	char _d12[8];
	_d12[0]='\0';
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	INTOA( d12, _d12);//FTOA( d11, _d11,2);
 800b7b4:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800b7b8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b7bc:	4611      	mov	r1, r2
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f003 fa7c 	bl	800ecbc <INTOA>

	char _d13[8];
	_d13[0]='\0';
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	INTOA( d13, _d13);//FTOA( d11, _d11,2);
 800b7ca:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800b7ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800b7d2:	4611      	mov	r1, r2
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f003 fa71 	bl	800ecbc <INTOA>

	char _d14[8];
	_d14[0]='\0';
 800b7da:	2300      	movs	r3, #0
 800b7dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	INTOA( d14, _d14);//FTOA( d11, _d11,2);
 800b7e0:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800b7e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b7e8:	4611      	mov	r1, r2
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f003 fa66 	bl	800ecbc <INTOA>

	char _d15[8];
	_d15[0]='\0';
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	INTOA( d15, _d15);//FTOA( d11, _d11,2);
 800b7f6:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 800b7fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b7fe:	4611      	mov	r1, r2
 800b800:	4618      	mov	r0, r3
 800b802:	f003 fa5b 	bl	800ecbc <INTOA>

	char _d16[8];
	_d16[0]='\0';
 800b806:	2300      	movs	r3, #0
 800b808:	f887 3020 	strb.w	r3, [r7, #32]
	INTOA( d16, _d16);//FTOA( d11, _d11,2);
 800b80c:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800b810:	f107 0220 	add.w	r2, r7, #32
 800b814:	4611      	mov	r1, r2
 800b816:	4618      	mov	r0, r3
 800b818:	f003 fa50 	bl	800ecbc <INTOA>

	char _devId[8];
	_devId[0]='\0';
 800b81c:	2300      	movs	r3, #0
 800b81e:	763b      	strb	r3, [r7, #24]
	INTOA(devId, _devId);
 800b820:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 800b824:	f107 0218 	add.w	r2, r7, #24
 800b828:	4611      	mov	r1, r2
 800b82a:	4618      	mov	r0, r3
 800b82c:	f003 fa46 	bl	800ecbc <INTOA>

	strncat(body,dd1,strlen(dd1));
 800b830:	4843      	ldr	r0, [pc, #268]	; (800b940 <httpPOST+0x404>)
 800b832:	f7f4 fcdf 	bl	80001f4 <strlen>
 800b836:	4603      	mov	r3, r0
 800b838:	461a      	mov	r2, r3
 800b83a:	4941      	ldr	r1, [pc, #260]	; (800b940 <httpPOST+0x404>)
 800b83c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b840:	f003 fcc3 	bl	800f1ca <strncat>
	strncat(body,_d1,strlen(_d1));
 800b844:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b848:	4618      	mov	r0, r3
 800b84a:	f7f4 fcd3 	bl	80001f4 <strlen>
 800b84e:	4602      	mov	r2, r0
 800b850:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b854:	4619      	mov	r1, r3
 800b856:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b85a:	f003 fcb6 	bl	800f1ca <strncat>

	strncat(body,dd2,strlen(dd2));
 800b85e:	4839      	ldr	r0, [pc, #228]	; (800b944 <httpPOST+0x408>)
 800b860:	f7f4 fcc8 	bl	80001f4 <strlen>
 800b864:	4603      	mov	r3, r0
 800b866:	461a      	mov	r2, r3
 800b868:	4936      	ldr	r1, [pc, #216]	; (800b944 <httpPOST+0x408>)
 800b86a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b86e:	f003 fcac 	bl	800f1ca <strncat>
	strncat(body,_d2,strlen(_d2));
 800b872:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b876:	4618      	mov	r0, r3
 800b878:	f7f4 fcbc 	bl	80001f4 <strlen>
 800b87c:	4602      	mov	r2, r0
 800b87e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b882:	4619      	mov	r1, r3
 800b884:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b888:	f003 fc9f 	bl	800f1ca <strncat>

	strncat(body,dd3,strlen(dd3));
 800b88c:	482e      	ldr	r0, [pc, #184]	; (800b948 <httpPOST+0x40c>)
 800b88e:	f7f4 fcb1 	bl	80001f4 <strlen>
 800b892:	4603      	mov	r3, r0
 800b894:	461a      	mov	r2, r3
 800b896:	492c      	ldr	r1, [pc, #176]	; (800b948 <httpPOST+0x40c>)
 800b898:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b89c:	f003 fc95 	bl	800f1ca <strncat>
	strncat(body,_d3,strlen(_d3));
 800b8a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f7f4 fca5 	bl	80001f4 <strlen>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8b6:	f003 fc88 	bl	800f1ca <strncat>

	strncat(body,dd4,strlen(dd4));
 800b8ba:	4824      	ldr	r0, [pc, #144]	; (800b94c <httpPOST+0x410>)
 800b8bc:	f7f4 fc9a 	bl	80001f4 <strlen>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	4921      	ldr	r1, [pc, #132]	; (800b94c <httpPOST+0x410>)
 800b8c6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8ca:	f003 fc7e 	bl	800f1ca <strncat>
	strncat(body,_d4,strlen(_d4));
 800b8ce:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7f4 fc8e 	bl	80001f4 <strlen>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b8de:	4619      	mov	r1, r3
 800b8e0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8e4:	f003 fc71 	bl	800f1ca <strncat>

	strncat(body,dd5,strlen(dd5));
 800b8e8:	4819      	ldr	r0, [pc, #100]	; (800b950 <httpPOST+0x414>)
 800b8ea:	f7f4 fc83 	bl	80001f4 <strlen>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	4917      	ldr	r1, [pc, #92]	; (800b950 <httpPOST+0x414>)
 800b8f4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b8f8:	f003 fc67 	bl	800f1ca <strncat>
	strncat(body,_d5,strlen(_d5));
 800b8fc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b900:	4618      	mov	r0, r3
 800b902:	f7f4 fc77 	bl	80001f4 <strlen>
 800b906:	4602      	mov	r2, r0
 800b908:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b90c:	4619      	mov	r1, r3
 800b90e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b912:	f003 fc5a 	bl	800f1ca <strncat>

	strncat(body,dd6,strlen(dd6));
 800b916:	480f      	ldr	r0, [pc, #60]	; (800b954 <httpPOST+0x418>)
 800b918:	f7f4 fc6c 	bl	80001f4 <strlen>
 800b91c:	4603      	mov	r3, r0
 800b91e:	461a      	mov	r2, r3
 800b920:	e01a      	b.n	800b958 <httpPOST+0x41c>
 800b922:	bf00      	nop
 800b924:	0801082c 	.word	0x0801082c
 800b928:	08010834 	.word	0x08010834
 800b92c:	08010840 	.word	0x08010840
 800b930:	08010844 	.word	0x08010844
 800b934:	0801084c 	.word	0x0801084c
 800b938:	08010850 	.word	0x08010850
 800b93c:	08010870 	.word	0x08010870
 800b940:	20000090 	.word	0x20000090
 800b944:	20000098 	.word	0x20000098
 800b948:	200000a0 	.word	0x200000a0
 800b94c:	200000a8 	.word	0x200000a8
 800b950:	200000b0 	.word	0x200000b0
 800b954:	200000b8 	.word	0x200000b8
 800b958:	49af      	ldr	r1, [pc, #700]	; (800bc18 <httpPOST+0x6dc>)
 800b95a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b95e:	f003 fc34 	bl	800f1ca <strncat>
	strncat(body,_d6,strlen(_d6));
 800b962:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b966:	4618      	mov	r0, r3
 800b968:	f7f4 fc44 	bl	80001f4 <strlen>
 800b96c:	4602      	mov	r2, r0
 800b96e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b972:	4619      	mov	r1, r3
 800b974:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b978:	f003 fc27 	bl	800f1ca <strncat>

	strncat(body,dd7,strlen(dd7));
 800b97c:	48a7      	ldr	r0, [pc, #668]	; (800bc1c <httpPOST+0x6e0>)
 800b97e:	f7f4 fc39 	bl	80001f4 <strlen>
 800b982:	4603      	mov	r3, r0
 800b984:	461a      	mov	r2, r3
 800b986:	49a5      	ldr	r1, [pc, #660]	; (800bc1c <httpPOST+0x6e0>)
 800b988:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b98c:	f003 fc1d 	bl	800f1ca <strncat>
	strncat(body,_d7,strlen(_d7));
 800b990:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b994:	4618      	mov	r0, r3
 800b996:	f7f4 fc2d 	bl	80001f4 <strlen>
 800b99a:	4602      	mov	r2, r0
 800b99c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9a6:	f003 fc10 	bl	800f1ca <strncat>

	strncat(body,dd8,strlen(dd8));
 800b9aa:	489d      	ldr	r0, [pc, #628]	; (800bc20 <httpPOST+0x6e4>)
 800b9ac:	f7f4 fc22 	bl	80001f4 <strlen>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	499a      	ldr	r1, [pc, #616]	; (800bc20 <httpPOST+0x6e4>)
 800b9b6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9ba:	f003 fc06 	bl	800f1ca <strncat>
	strncat(body,_d8,strlen(_d8));
 800b9be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7f4 fc16 	bl	80001f4 <strlen>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9d4:	f003 fbf9 	bl	800f1ca <strncat>

	strncat(body,dd9,strlen(dd9));
 800b9d8:	4892      	ldr	r0, [pc, #584]	; (800bc24 <httpPOST+0x6e8>)
 800b9da:	f7f4 fc0b 	bl	80001f4 <strlen>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	4990      	ldr	r1, [pc, #576]	; (800bc24 <httpPOST+0x6e8>)
 800b9e4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b9e8:	f003 fbef 	bl	800f1ca <strncat>
	strncat(body,_d9,strlen(_d9));
 800b9ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7f4 fbff 	bl	80001f4 <strlen>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba02:	f003 fbe2 	bl	800f1ca <strncat>

	strncat(body,dd10,strlen(dd10));
 800ba06:	4888      	ldr	r0, [pc, #544]	; (800bc28 <httpPOST+0x6ec>)
 800ba08:	f7f4 fbf4 	bl	80001f4 <strlen>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	461a      	mov	r2, r3
 800ba10:	4985      	ldr	r1, [pc, #532]	; (800bc28 <httpPOST+0x6ec>)
 800ba12:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba16:	f003 fbd8 	bl	800f1ca <strncat>
	strncat(body,_d10,strlen(_d10));
 800ba1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7f4 fbe8 	bl	80001f4 <strlen>
 800ba24:	4602      	mov	r2, r0
 800ba26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba30:	f003 fbcb 	bl	800f1ca <strncat>

	strncat(body,dd11,strlen(dd11));
 800ba34:	487d      	ldr	r0, [pc, #500]	; (800bc2c <httpPOST+0x6f0>)
 800ba36:	f7f4 fbdd 	bl	80001f4 <strlen>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	497b      	ldr	r1, [pc, #492]	; (800bc2c <httpPOST+0x6f0>)
 800ba40:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba44:	f003 fbc1 	bl	800f1ca <strncat>
	strncat(body,_d11,strlen(_d11));
 800ba48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7f4 fbd1 	bl	80001f4 <strlen>
 800ba52:	4602      	mov	r2, r0
 800ba54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ba58:	4619      	mov	r1, r3
 800ba5a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba5e:	f003 fbb4 	bl	800f1ca <strncat>

	strncat(body,dd12,strlen(dd12));
 800ba62:	4873      	ldr	r0, [pc, #460]	; (800bc30 <httpPOST+0x6f4>)
 800ba64:	f7f4 fbc6 	bl	80001f4 <strlen>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	4970      	ldr	r1, [pc, #448]	; (800bc30 <httpPOST+0x6f4>)
 800ba6e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba72:	f003 fbaa 	bl	800f1ca <strncat>
	strncat(body,_d12,strlen(_d12));
 800ba76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7f4 fbba 	bl	80001f4 <strlen>
 800ba80:	4602      	mov	r2, r0
 800ba82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ba86:	4619      	mov	r1, r3
 800ba88:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ba8c:	f003 fb9d 	bl	800f1ca <strncat>

	strncat(body,dd13,strlen(dd13));
 800ba90:	4868      	ldr	r0, [pc, #416]	; (800bc34 <httpPOST+0x6f8>)
 800ba92:	f7f4 fbaf 	bl	80001f4 <strlen>
 800ba96:	4603      	mov	r3, r0
 800ba98:	461a      	mov	r2, r3
 800ba9a:	4966      	ldr	r1, [pc, #408]	; (800bc34 <httpPOST+0x6f8>)
 800ba9c:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800baa0:	f003 fb93 	bl	800f1ca <strncat>
	strncat(body,_d13,strlen(_d13));
 800baa4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7f4 fba3 	bl	80001f4 <strlen>
 800baae:	4602      	mov	r2, r0
 800bab0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bab4:	4619      	mov	r1, r3
 800bab6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800baba:	f003 fb86 	bl	800f1ca <strncat>

	strncat(body,dd14,strlen(dd14));
 800babe:	485e      	ldr	r0, [pc, #376]	; (800bc38 <httpPOST+0x6fc>)
 800bac0:	f7f4 fb98 	bl	80001f4 <strlen>
 800bac4:	4603      	mov	r3, r0
 800bac6:	461a      	mov	r2, r3
 800bac8:	495b      	ldr	r1, [pc, #364]	; (800bc38 <httpPOST+0x6fc>)
 800baca:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bace:	f003 fb7c 	bl	800f1ca <strncat>
	strncat(body,_d14,strlen(_d14));
 800bad2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7f4 fb8c 	bl	80001f4 <strlen>
 800badc:	4602      	mov	r2, r0
 800bade:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bae2:	4619      	mov	r1, r3
 800bae4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bae8:	f003 fb6f 	bl	800f1ca <strncat>

	strncat(body,dd15,strlen(dd15));
 800baec:	4853      	ldr	r0, [pc, #332]	; (800bc3c <httpPOST+0x700>)
 800baee:	f7f4 fb81 	bl	80001f4 <strlen>
 800baf2:	4603      	mov	r3, r0
 800baf4:	461a      	mov	r2, r3
 800baf6:	4951      	ldr	r1, [pc, #324]	; (800bc3c <httpPOST+0x700>)
 800baf8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bafc:	f003 fb65 	bl	800f1ca <strncat>
	strncat(body,_d15,strlen(_d15));
 800bb00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7f4 fb75 	bl	80001f4 <strlen>
 800bb0a:	4602      	mov	r2, r0
 800bb0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb10:	4619      	mov	r1, r3
 800bb12:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bb16:	f003 fb58 	bl	800f1ca <strncat>

	strncat(body,dd16,strlen(dd16));
 800bb1a:	4849      	ldr	r0, [pc, #292]	; (800bc40 <httpPOST+0x704>)
 800bb1c:	f7f4 fb6a 	bl	80001f4 <strlen>
 800bb20:	4603      	mov	r3, r0
 800bb22:	461a      	mov	r2, r3
 800bb24:	4946      	ldr	r1, [pc, #280]	; (800bc40 <httpPOST+0x704>)
 800bb26:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bb2a:	f003 fb4e 	bl	800f1ca <strncat>
	strncat(body,_d16,strlen(_d16));
 800bb2e:	f107 0320 	add.w	r3, r7, #32
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7f4 fb5e 	bl	80001f4 <strlen>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	f107 0320 	add.w	r3, r7, #32
 800bb3e:	4619      	mov	r1, r3
 800bb40:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bb44:	f003 fb41 	bl	800f1ca <strncat>

	strncat(body,deviceId,strlen(deviceId));
 800bb48:	483e      	ldr	r0, [pc, #248]	; (800bc44 <httpPOST+0x708>)
 800bb4a:	f7f4 fb53 	bl	80001f4 <strlen>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	461a      	mov	r2, r3
 800bb52:	493c      	ldr	r1, [pc, #240]	; (800bc44 <httpPOST+0x708>)
 800bb54:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bb58:	f003 fb37 	bl	800f1ca <strncat>
	strncat(body,_devId,strlen(_devId));
 800bb5c:	f107 0318 	add.w	r3, r7, #24
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7f4 fb47 	bl	80001f4 <strlen>
 800bb66:	4602      	mov	r2, r0
 800bb68:	f107 0318 	add.w	r3, r7, #24
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bb72:	f003 fb2a 	bl	800f1ca <strncat>

	strncat(body,"}",strlen("}"));
 800bb76:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bb7a:	f7f4 fb3b 	bl	80001f4 <strlen>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	461a      	mov	r2, r3
 800bb82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb86:	4413      	add	r3, r2
 800bb88:	492f      	ldr	r1, [pc, #188]	; (800bc48 <httpPOST+0x70c>)
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	881b      	ldrh	r3, [r3, #0]
 800bb90:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800bb92:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bb96:	f7f4 fb2d 	bl	80001f4 <strlen>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	f107 0310 	add.w	r3, r7, #16
 800bba0:	4619      	mov	r1, r3
 800bba2:	4610      	mov	r0, r2
 800bba4:	f003 f88a 	bl	800ecbc <INTOA>
	strncat(post,length,strlen(length));
 800bba8:	f107 0310 	add.w	r3, r7, #16
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7f4 fb21 	bl	80001f4 <strlen>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	f107 0310 	add.w	r3, r7, #16
 800bbb8:	4619      	mov	r1, r3
 800bbba:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bbbe:	f003 fb04 	bl	800f1ca <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800bbc2:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bbc6:	f7f4 fb15 	bl	80001f4 <strlen>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	461a      	mov	r2, r3
 800bbce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bbd2:	4413      	add	r3, r2
 800bbd4:	4a1d      	ldr	r2, [pc, #116]	; (800bc4c <httpPOST+0x710>)
 800bbd6:	6810      	ldr	r0, [r2, #0]
 800bbd8:	6018      	str	r0, [r3, #0]
 800bbda:	7912      	ldrb	r2, [r2, #4]
 800bbdc:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800bbde:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bbe2:	f7f4 fb07 	bl	80001f4 <strlen>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d20d      	bcs.n	800bc0c <httpPOST+0x6d0>
	{
		strncat(post,body,strlen(body));
 800bbf0:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800bbf4:	f7f4 fafe 	bl	80001f4 <strlen>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800bc00:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bc04:	f003 fae1 	bl	800f1ca <strncat>
		return 1 ;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	e000      	b.n	800bc0e <httpPOST+0x6d2>
	}
		else
		{
			return 0;
 800bc0c:	2300      	movs	r3, #0
		}
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	37a0      	adds	r7, #160	; 0xa0
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bdb0      	pop	{r4, r5, r7, pc}
 800bc16:	bf00      	nop
 800bc18:	200000b8 	.word	0x200000b8
 800bc1c:	200000c0 	.word	0x200000c0
 800bc20:	200000c8 	.word	0x200000c8
 800bc24:	200000d0 	.word	0x200000d0
 800bc28:	200000d8 	.word	0x200000d8
 800bc2c:	200000e0 	.word	0x200000e0
 800bc30:	200000e8 	.word	0x200000e8
 800bc34:	200000f0 	.word	0x200000f0
 800bc38:	200000f8 	.word	0x200000f8
 800bc3c:	20000100 	.word	0x20000100
 800bc40:	20000108 	.word	0x20000108
 800bc44:	20000110 	.word	0x20000110
 800bc48:	08010880 	.word	0x08010880
 800bc4c:	08010884 	.word	0x08010884

0800bc50 <LoRa_Send>:
#include "RYLR896.h"
#include "string.h"
#include "STR_Chelo.h"

int LoRa_Send(struct LoRa *a, UART_HandleTypeDef * SERIAL)
{
 800bc50:	b5b0      	push	{r4, r5, r7, lr}
 800bc52:	b086      	sub	sp, #24
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]

	char items[4];

	if(a->txitems > 241)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800bc60:	2bf1      	cmp	r3, #241	; 0xf1
 800bc62:	dd01      	ble.n	800bc68 <LoRa_Send+0x18>
	{
		return ERROR_BUFFER_SIZE;
 800bc64:	2301      	movs	r3, #1
 800bc66:	e099      	b.n	800bd9c <LoRa_Send+0x14c>
	}
	else
	{

		items[0]='\0';
 800bc68:	2300      	movs	r3, #0
 800bc6a:	723b      	strb	r3, [r7, #8]
		itoa(a->txitems, items,10);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800bc72:	f107 0108 	add.w	r1, r7, #8
 800bc76:	220a      	movs	r2, #10
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f003 f8ba 	bl	800edf2 <itoa>
		a->txbuff2SND[0]='\0'; 													//Borro el vector
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2200      	movs	r2, #0
 800bc82:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		strncat(a->txbuff2SND,"AT+SEND=",strlen("AT+SEND="));					//AT+SEND=
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	f7f4 fab1 	bl	80001f4 <strlen>
 800bc92:	4603      	mov	r3, r0
 800bc94:	4423      	add	r3, r4
 800bc96:	4943      	ldr	r1, [pc, #268]	; (800bda4 <LoRa_Send+0x154>)
 800bc98:	461a      	mov	r2, r3
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	cb03      	ldmia	r3!, {r0, r1}
 800bc9e:	6010      	str	r0, [r2, #0]
 800bca0:	6051      	str	r1, [r2, #4]
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	7213      	strb	r3, [r2, #8]
		strncat(a->txbuff2SND,a->dest_address,strlen(a->dest_address));			//AT+SEND=1
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f103 0516 	add.w	r5, r3, #22
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	3316      	adds	r3, #22
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7f4 fa9c 	bl	80001f4 <strlen>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	4629      	mov	r1, r5
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	f003 fa81 	bl	800f1ca <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bcce:	4620      	mov	r0, r4
 800bcd0:	f7f4 fa90 	bl	80001f4 <strlen>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	4423      	add	r3, r4
 800bcd8:	4933      	ldr	r1, [pc, #204]	; (800bda8 <LoRa_Send+0x158>)
 800bcda:	461a      	mov	r2, r3
 800bcdc:	460b      	mov	r3, r1
 800bcde:	881b      	ldrh	r3, [r3, #0]
 800bce0:	8013      	strh	r3, [r2, #0]
		strncat(a->txbuff2SND,items,strlen(items));								//AT+SEND=1,4
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bce8:	f107 0308 	add.w	r3, r7, #8
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7f4 fa81 	bl	80001f4 <strlen>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	f107 0308 	add.w	r3, r7, #8
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f003 fa65 	bl	800f1ca <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,4,
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bd06:	4620      	mov	r0, r4
 800bd08:	f7f4 fa74 	bl	80001f4 <strlen>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	4423      	add	r3, r4
 800bd10:	4925      	ldr	r1, [pc, #148]	; (800bda8 <LoRa_Send+0x158>)
 800bd12:	461a      	mov	r2, r3
 800bd14:	460b      	mov	r3, r1
 800bd16:	881b      	ldrh	r3, [r3, #0]
 800bd18:	8013      	strh	r3, [r2, #0]

		int la=strlen(a->txbuff2SND);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7f4 fa67 	bl	80001f4 <strlen>
 800bd26:	4603      	mov	r3, r0
 800bd28:	617b      	str	r3, [r7, #20]
		int lb=la+a->txitems;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800bd30:	697a      	ldr	r2, [r7, #20]
 800bd32:	4413      	add	r3, r2
 800bd34:	60fb      	str	r3, [r7, #12]
		int lc=0;
 800bd36:	2300      	movs	r3, #0
 800bd38:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800bd3a:	e012      	b.n	800bd62 <LoRa_Send+0x112>
		{
			a->txbuff2SND[la]=a->txbuff[lc];
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	4413      	add	r3, r2
 800bd42:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 800bd46:	7819      	ldrb	r1, [r3, #0]
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800bd52:	460a      	mov	r2, r1
 800bd54:	701a      	strb	r2, [r3, #0]
			la++;
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	617b      	str	r3, [r7, #20]
			lc++;
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800bd62:	697a      	ldr	r2, [r7, #20]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	dbe8      	blt.n	800bd3c <LoRa_Send+0xec>
		}
		a->txbuff2SND[la++]='\r';
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	1c5a      	adds	r2, r3, #1
 800bd6e:	617a      	str	r2, [r7, #20]
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	4413      	add	r3, r2
 800bd74:	220d      	movs	r2, #13
 800bd76:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		a->txbuff2SND[la++]='\n';
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	1c5a      	adds	r2, r3, #1
 800bd7e:	617a      	str	r2, [r7, #20]
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	4413      	add	r3, r2
 800bd84:	220a      	movs	r2, #10
 800bd86:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		HAL_UART_Transmit_IT(SERIAL, a->txbuff2SND, la);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800bd90:	697a      	ldr	r2, [r7, #20]
 800bd92:	b292      	uxth	r2, r2
 800bd94:	4619      	mov	r1, r3
 800bd96:	6838      	ldr	r0, [r7, #0]
 800bd98:	f7f9 fce8 	bl	800576c <HAL_UART_Transmit_IT>
	}

}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3718      	adds	r7, #24
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bdb0      	pop	{r4, r5, r7, pc}
 800bda4:	0801088c 	.word	0x0801088c
 800bda8:	08010898 	.word	0x08010898

0800bdac <LoRa_reset_sndTIMER>:
		a->tmr_dly_en=1;
		a->tmr_dlyCNT=0;
 }

void LoRa_reset_sndTIMER(struct LoRa *a,int msec)
 {
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	6039      	str	r1, [r7, #0]
	 	a->tmr_dly_ON=0;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
		a->tmr_dly=msec;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	683a      	ldr	r2, [r7, #0]
 800bdc2:	f8c3 27f0 	str.w	r2, [r3, #2032]	; 0x7f0
		a->tmr_dly_en=0;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		a->tmr_dlyCNT=0;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	f8c3 27f4 	str.w	r2, [r3, #2036]	; 0x7f4
 }
 800bdd6:	bf00      	nop
 800bdd8:	370c      	adds	r7, #12
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
	...

0800bde4 <LoRa_decode>:
		break;
	}
}

void LoRa_decode(struct LoRa *b)
 {
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b086      	sub	sp, #24
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
	switch (Lora_idSTR(b))
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f000 fa25 	bl	800c23c <Lora_idSTR>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	2b10      	cmp	r3, #16
 800bdf6:	f200 820c 	bhi.w	800c212 <LoRa_decode+0x42e>
 800bdfa:	a201      	add	r2, pc, #4	; (adr r2, 800be00 <LoRa_decode+0x1c>)
 800bdfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be00:	0800be45 	.word	0x0800be45
 800be04:	0800bf1d 	.word	0x0800bf1d
 800be08:	0800c151 	.word	0x0800c151
 800be0c:	0800c15b 	.word	0x0800c15b
 800be10:	0800c165 	.word	0x0800c165
 800be14:	0800c16f 	.word	0x0800c16f
 800be18:	0800c179 	.word	0x0800c179
 800be1c:	0800c183 	.word	0x0800c183
 800be20:	0800c18d 	.word	0x0800c18d
 800be24:	0800c197 	.word	0x0800c197
 800be28:	0800c1a1 	.word	0x0800c1a1
 800be2c:	0800c1e1 	.word	0x0800c1e1
 800be30:	0800c1eb 	.word	0x0800c1eb
 800be34:	0800c1ff 	.word	0x0800c1ff
 800be38:	0800c1f5 	.word	0x0800c1f5
 800be3c:	0800c147 	.word	0x0800c147
 800be40:	0800c209 	.word	0x0800c209
	{
		case _OK:
		{
			switch(b->estado)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 800be4a:	3b01      	subs	r3, #1
 800be4c:	2b13      	cmp	r3, #19
 800be4e:	d860      	bhi.n	800bf12 <LoRa_decode+0x12e>
 800be50:	a201      	add	r2, pc, #4	; (adr r2, 800be58 <LoRa_decode+0x74>)
 800be52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be56:	bf00      	nop
 800be58:	0800bea9 	.word	0x0800bea9
 800be5c:	0800bf13 	.word	0x0800bf13
 800be60:	0800bf13 	.word	0x0800bf13
 800be64:	0800bf13 	.word	0x0800bf13
 800be68:	0800bf13 	.word	0x0800bf13
 800be6c:	0800bf13 	.word	0x0800bf13
 800be70:	0800beb3 	.word	0x0800beb3
 800be74:	0800bebd 	.word	0x0800bebd
 800be78:	0800bf13 	.word	0x0800bf13
 800be7c:	0800bec7 	.word	0x0800bec7
 800be80:	0800bf13 	.word	0x0800bf13
 800be84:	0800bed1 	.word	0x0800bed1
 800be88:	0800bf13 	.word	0x0800bf13
 800be8c:	0800bedb 	.word	0x0800bedb
 800be90:	0800bf13 	.word	0x0800bf13
 800be94:	0800bee5 	.word	0x0800bee5
 800be98:	0800bf13 	.word	0x0800bf13
 800be9c:	0800beef 	.word	0x0800beef
 800bea0:	0800bf13 	.word	0x0800bf13
 800bea4:	0800bef9 	.word	0x0800bef9
			{
				case _AT_SENT:
					b->estado=_IDLE;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2200      	movs	r2, #0
 800beac:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800beb0:	e02f      	b.n	800bf12 <LoRa_decode+0x12e>
				case _MODE_SENT:
					b->estado=_MODE_OK;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2206      	movs	r2, #6
 800beb6:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800beba:	e02a      	b.n	800bf12 <LoRa_decode+0x12e>
				case _PARAMETER_SENT:
					b->estado=_PARAMETER_OK;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2209      	movs	r2, #9
 800bec0:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bec4:	e025      	b.n	800bf12 <LoRa_decode+0x12e>
				case _BAND_SENT:
					b->estado=_BAND_OK;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	220b      	movs	r2, #11
 800beca:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bece:	e020      	b.n	800bf12 <LoRa_decode+0x12e>
				case _ADDR_SENT:
					b->estado=_ADDR_OK;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	220d      	movs	r2, #13
 800bed4:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bed8:	e01b      	b.n	800bf12 <LoRa_decode+0x12e>
				case _NETWORK_SENT:
					b->estado=_NETWORK_OK;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	220f      	movs	r2, #15
 800bede:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bee2:	e016      	b.n	800bf12 <LoRa_decode+0x12e>
				case _CPIN_SENT:
					b->estado=_CPIN_OK;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2211      	movs	r2, #17
 800bee8:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800beec:	e011      	b.n	800bf12 <LoRa_decode+0x12e>
				case _CRFOP_SENT:
					b->estado=_CRFOP_OK;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2213      	movs	r2, #19
 800bef2:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bef6:	e00c      	b.n	800bf12 <LoRa_decode+0x12e>
				case _SENT:
					{
						b->estado=_SENT_OK;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2215      	movs	r2, #21
 800befc:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
						b->rxbuff[0]='\0';
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2200      	movs	r2, #0
 800bf04:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
						ITM0_Write("\r\nLora _SENT_OK\r\n",strlen("\r\nLora _SENT_OK\r\n"));
 800bf08:	2111      	movs	r1, #17
 800bf0a:	48a8      	ldr	r0, [pc, #672]	; (800c1ac <LoRa_decode+0x3c8>)
 800bf0c:	f7f5 fb9e 	bl	800164c <ITM0_Write>
					}
					break;
 800bf10:	bf00      	nop

			}

			ITM0_Write("\r\nLora _OK\r\n",strlen("\r\nLora _OK\r\n"));
 800bf12:	210c      	movs	r1, #12
 800bf14:	48a6      	ldr	r0, [pc, #664]	; (800c1b0 <LoRa_decode+0x3cc>)
 800bf16:	f7f5 fb99 	bl	800164c <ITM0_Write>
						//Clean rxbuff_hld
		}
			break;
 800bf1a:	e17f      	b.n	800c21c <LoRa_decode+0x438>
		case _RCV:
		{
			ITM0_Write("\r\nLora _RCV\r\n",strlen("\r\nLora _RCV\r\n"));
 800bf1c:	210d      	movs	r1, #13
 800bf1e:	48a5      	ldr	r0, [pc, #660]	; (800c1b4 <LoRa_decode+0x3d0>)
 800bf20:	f7f5 fb94 	bl	800164c <ITM0_Write>
				b->estado=_DATO_RECIBIDO;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	221a      	movs	r2, #26
 800bf28:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
				b->_data_available=1;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
					int i=0;
 800bf34:	2300      	movs	r3, #0
 800bf36:	617b      	str	r3, [r7, #20]
					int j=0;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	613b      	str	r3, [r7, #16]
					int lngt=0;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	60fb      	str	r3, [r7, #12]
					while (b->rxbuff[i] != '=')
 800bf40:	e002      	b.n	800bf48 <LoRa_decode+0x164>
					{ i++;}
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	3301      	adds	r3, #1
 800bf46:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i] != '=')
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	3356      	adds	r3, #86	; 0x56
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	2b3d      	cmp	r3, #61	; 0x3d
 800bf54:	d1f5      	bne.n	800bf42 <LoRa_decode+0x15e>
					i++;
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	3301      	adds	r3, #1
 800bf5a:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800bf5c:	e017      	b.n	800bf8e <LoRa_decode+0x1aa>
					{
						b->rxaddress[j]=b->rxbuff[i];			//Save the address
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	4413      	add	r3, r2
 800bf64:	3356      	adds	r3, #86	; 0x56
 800bf66:	7819      	ldrb	r1, [r3, #0]
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	4413      	add	r3, r2
 800bf6e:	3306      	adds	r3, #6
 800bf70:	460a      	mov	r2, r1
 800bf72:	701a      	strb	r2, [r3, #0]
						i++;
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	3301      	adds	r3, #1
 800bf78:	617b      	str	r3, [r7, #20]
						j++;
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	613b      	str	r3, [r7, #16]
						if (j > 6)
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	2b06      	cmp	r3, #6
 800bf84:	dd03      	ble.n	800bf8e <LoRa_decode+0x1aa>
						{
							Lora_rx_del(b);
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 fb9a 	bl	800c6c0 <Lora_rx_del>
							break;
 800bf8c:	e006      	b.n	800bf9c <LoRa_decode+0x1b8>
					while (b->rxbuff[i]!= ',')
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	4413      	add	r3, r2
 800bf94:	3356      	adds	r3, #86	; 0x56
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	2b2c      	cmp	r3, #44	; 0x2c
 800bf9a:	d1e0      	bne.n	800bf5e <LoRa_decode+0x17a>
						}
					}
					b->rxaddress[j]='\0';
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	4413      	add	r3, r2
 800bfa2:	3306      	adds	r3, #6
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	701a      	strb	r2, [r3, #0]
					j=0;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	613b      	str	r3, [r7, #16]
					i++;
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	3301      	adds	r3, #1
 800bfb0:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800bfb2:	e017      	b.n	800bfe4 <LoRa_decode+0x200>
					{
						b->rx_items[j]=b->rxbuff[i];			//Save the qty of data
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	4413      	add	r3, r2
 800bfba:	3356      	adds	r3, #86	; 0x56
 800bfbc:	7819      	ldrb	r1, [r3, #0]
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	4413      	add	r3, r2
 800bfc4:	330c      	adds	r3, #12
 800bfc6:	460a      	mov	r2, r1
 800bfc8:	701a      	strb	r2, [r3, #0]
						i++;
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	617b      	str	r3, [r7, #20]
						j++;
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	613b      	str	r3, [r7, #16]
						if (j > 4)
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	2b04      	cmp	r3, #4
 800bfda:	dd03      	ble.n	800bfe4 <LoRa_decode+0x200>
						{
							Lora_rx_del(b);
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 fb6f 	bl	800c6c0 <Lora_rx_del>
							break;
 800bfe2:	e006      	b.n	800bff2 <LoRa_decode+0x20e>
					while (b->rxbuff[i]!= ',')
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	4413      	add	r3, r2
 800bfea:	3356      	adds	r3, #86	; 0x56
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	2b2c      	cmp	r3, #44	; 0x2c
 800bff0:	d1e0      	bne.n	800bfb4 <LoRa_decode+0x1d0>
						}
					}
					b->rx_items[j]='\0';
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	4413      	add	r3, r2
 800bff8:	330c      	adds	r3, #12
 800bffa:	2200      	movs	r2, #0
 800bffc:	701a      	strb	r2, [r3, #0]
					j=0;
 800bffe:	2300      	movs	r3, #0
 800c000:	613b      	str	r3, [r7, #16]
					i++;
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	3301      	adds	r3, #1
 800c006:	617b      	str	r3, [r7, #20]
					lngt=atoi(b->rx_items,10);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	330c      	adds	r3, #12
 800c00c:	210a      	movs	r1, #10
 800c00e:	4618      	mov	r0, r3
 800c010:	f002 fed3 	bl	800edba <atoi>
 800c014:	60f8      	str	r0, [r7, #12]
					//lngt=lngt+i;
					//while(lngt>i)   //Ahota busco leer lo datos recibid y luego verificar si ok
					while (b->rxbuff[i]!= ',')
 800c016:	e019      	b.n	800c04c <LoRa_decode+0x268>
					{
						b->dataRCV[j]=b->rxbuff[i];			//Save the data
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	4413      	add	r3, r2
 800c01e:	3356      	adds	r3, #86	; 0x56
 800c020:	7819      	ldrb	r1, [r3, #0]
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	4413      	add	r3, r2
 800c028:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800c02c:	460a      	mov	r2, r1
 800c02e:	701a      	strb	r2, [r3, #0]
						j++;
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	3301      	adds	r3, #1
 800c034:	613b      	str	r3, [r7, #16]
						i++;
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	3301      	adds	r3, #1
 800c03a:	617b      	str	r3, [r7, #20]
						if (j > lngt)
 800c03c:	693a      	ldr	r2, [r7, #16]
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	429a      	cmp	r2, r3
 800c042:	dd03      	ble.n	800c04c <LoRa_decode+0x268>
						{
							Lora_rx_del(b);
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f000 fb3b 	bl	800c6c0 <Lora_rx_del>
							break;
 800c04a:	e006      	b.n	800c05a <LoRa_decode+0x276>
					while (b->rxbuff[i]!= ',')
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	4413      	add	r3, r2
 800c052:	3356      	adds	r3, #86	; 0x56
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	2b2c      	cmp	r3, #44	; 0x2c
 800c058:	d1de      	bne.n	800c018 <LoRa_decode+0x234>
						}
					}
					b->_n_dataRCV=j;							//Save amount of data received
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	693a      	ldr	r2, [r7, #16]
 800c05e:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
					j=0;
 800c062:	2300      	movs	r3, #0
 800c064:	613b      	str	r3, [r7, #16]
					i++;
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	3301      	adds	r3, #1
 800c06a:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800c06c:	e017      	b.n	800c09e <LoRa_decode+0x2ba>
					{
						b->rx_convert[j]=b->rxbuff[i];			//save RSSI
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	4413      	add	r3, r2
 800c074:	3356      	adds	r3, #86	; 0x56
 800c076:	7819      	ldrb	r1, [r3, #0]
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	4413      	add	r3, r2
 800c07e:	3310      	adds	r3, #16
 800c080:	460a      	mov	r2, r1
 800c082:	701a      	strb	r2, [r3, #0]
						i++;
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	3301      	adds	r3, #1
 800c088:	617b      	str	r3, [r7, #20]
						j++;
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	3301      	adds	r3, #1
 800c08e:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	2b05      	cmp	r3, #5
 800c094:	dd03      	ble.n	800c09e <LoRa_decode+0x2ba>
						{
							Lora_rx_del(b);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 fb12 	bl	800c6c0 <Lora_rx_del>
							break;
 800c09c:	e006      	b.n	800c0ac <LoRa_decode+0x2c8>
					while (b->rxbuff[i]!= ',')
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	3356      	adds	r3, #86	; 0x56
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	2b2c      	cmp	r3, #44	; 0x2c
 800c0aa:	d1e0      	bne.n	800c06e <LoRa_decode+0x28a>
						}
					}
					b->rxRSSI=atoi(b->rx_convert,10);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	3310      	adds	r3, #16
 800c0b0:	210a      	movs	r1, #10
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f002 fe81 	bl	800edba <atoi>
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
					b->rx_convert[j]='\0';
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	3310      	adds	r3, #16
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	701a      	strb	r2, [r3, #0]
					j=0;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	613b      	str	r3, [r7, #16]
					i++;
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= '\r')
 800c0d6:	e017      	b.n	800c108 <LoRa_decode+0x324>
					{
						b->rx_convert[j]=b->rxbuff[i];			// Save SNR
 800c0d8:	687a      	ldr	r2, [r7, #4]
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	4413      	add	r3, r2
 800c0de:	3356      	adds	r3, #86	; 0x56
 800c0e0:	7819      	ldrb	r1, [r3, #0]
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	3310      	adds	r3, #16
 800c0ea:	460a      	mov	r2, r1
 800c0ec:	701a      	strb	r2, [r3, #0]
						i++;
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	617b      	str	r3, [r7, #20]
						j++;
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	2b05      	cmp	r3, #5
 800c0fe:	dd03      	ble.n	800c108 <LoRa_decode+0x324>
						{
							Lora_rx_del(b);
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 fadd 	bl	800c6c0 <Lora_rx_del>
							break;
 800c106:	e006      	b.n	800c116 <LoRa_decode+0x332>
					while (b->rxbuff[i]!= '\r')
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	4413      	add	r3, r2
 800c10e:	3356      	adds	r3, #86	; 0x56
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	2b0d      	cmp	r3, #13
 800c114:	d1e0      	bne.n	800c0d8 <LoRa_decode+0x2f4>
						}
					}

					b->rx_convert[j]='\0';
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	4413      	add	r3, r2
 800c11c:	3310      	adds	r3, #16
 800c11e:	2200      	movs	r2, #0
 800c120:	701a      	strb	r2, [r3, #0]
					b->rxSNR=atoi(b->rx_convert,10);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	3310      	adds	r3, #16
 800c126:	210a      	movs	r1, #10
 800c128:	4618      	mov	r0, r3
 800c12a:	f002 fe46 	bl	800edba <atoi>
 800c12e:	4602      	mov	r2, r0
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
					b->rx_convert[0]='\0';
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2200      	movs	r2, #0
 800c13a:	741a      	strb	r2, [r3, #16]


			    //Timer de enviar data cuando antes se recibe
				//LoRa_set_sndTIMER(b, 3000);
				b->rxbuff[0]='\0';
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		}
			break;
 800c144:	e06a      	b.n	800c21c <LoRa_decode+0x438>
		case _ERR:
			ITM0_Write("\r\nLora _ERR\r\n",strlen("\r\nLora _ERR\r\n"));
 800c146:	210d      	movs	r1, #13
 800c148:	481b      	ldr	r0, [pc, #108]	; (800c1b8 <LoRa_decode+0x3d4>)
 800c14a:	f7f5 fa7f 	bl	800164c <ITM0_Write>
			break;
 800c14e:	e065      	b.n	800c21c <LoRa_decode+0x438>
		case _RESET:
			ITM0_Write("\r\nLora _RESET\r\n",strlen("\r\nLora _RESET\r\n"));
 800c150:	210f      	movs	r1, #15
 800c152:	481a      	ldr	r0, [pc, #104]	; (800c1bc <LoRa_decode+0x3d8>)
 800c154:	f7f5 fa7a 	bl	800164c <ITM0_Write>
			break;
 800c158:	e060      	b.n	800c21c <LoRa_decode+0x438>
		case _READY:
			ITM0_Write("\r\nLora _READY\r\n",strlen("\r\nLora _READY\r\n"));
 800c15a:	210f      	movs	r1, #15
 800c15c:	4818      	ldr	r0, [pc, #96]	; (800c1c0 <LoRa_decode+0x3dc>)
 800c15e:	f7f5 fa75 	bl	800164c <ITM0_Write>
			break;
 800c162:	e05b      	b.n	800c21c <LoRa_decode+0x438>
		case _MODE:
			ITM0_Write("\r\nLora _MODE\r\n",strlen("\r\nLora _MODE\r\n"));
 800c164:	210e      	movs	r1, #14
 800c166:	4817      	ldr	r0, [pc, #92]	; (800c1c4 <LoRa_decode+0x3e0>)
 800c168:	f7f5 fa70 	bl	800164c <ITM0_Write>
			break;
 800c16c:	e056      	b.n	800c21c <LoRa_decode+0x438>
		case _IPR:
			ITM0_Write("\r\nLora _IPR\r\n",strlen("\r\nLora _IPR\r\n"));
 800c16e:	210d      	movs	r1, #13
 800c170:	4815      	ldr	r0, [pc, #84]	; (800c1c8 <LoRa_decode+0x3e4>)
 800c172:	f7f5 fa6b 	bl	800164c <ITM0_Write>
			break;
 800c176:	e051      	b.n	800c21c <LoRa_decode+0x438>
		case _PARAMETER:
			ITM0_Write("\r\nLora _PARAMETER\r\n",strlen("\r\nLora _PARAMETER\r\n"));
 800c178:	2113      	movs	r1, #19
 800c17a:	4814      	ldr	r0, [pc, #80]	; (800c1cc <LoRa_decode+0x3e8>)
 800c17c:	f7f5 fa66 	bl	800164c <ITM0_Write>
			break;
 800c180:	e04c      	b.n	800c21c <LoRa_decode+0x438>
		case _BAND:
			ITM0_Write("\r\nLora _BAND\r\n",strlen("\r\nLora _BAND\r\n"));
 800c182:	210e      	movs	r1, #14
 800c184:	4812      	ldr	r0, [pc, #72]	; (800c1d0 <LoRa_decode+0x3ec>)
 800c186:	f7f5 fa61 	bl	800164c <ITM0_Write>
			break;
 800c18a:	e047      	b.n	800c21c <LoRa_decode+0x438>
		case _ADDRESS:
			ITM0_Write("\r\nLora _ADDRESS\r\n",strlen("\r\nLora _ADDRESS\r\n"));
 800c18c:	2111      	movs	r1, #17
 800c18e:	4811      	ldr	r0, [pc, #68]	; (800c1d4 <LoRa_decode+0x3f0>)
 800c190:	f7f5 fa5c 	bl	800164c <ITM0_Write>
			break;
 800c194:	e042      	b.n	800c21c <LoRa_decode+0x438>
		case _NETWORK:
			ITM0_Write("\r\nLora _NETWORK\r\n",strlen("\r\nLora _NETWORK\r\n"));
 800c196:	2111      	movs	r1, #17
 800c198:	480f      	ldr	r0, [pc, #60]	; (800c1d8 <LoRa_decode+0x3f4>)
 800c19a:	f7f5 fa57 	bl	800164c <ITM0_Write>
			break;
 800c19e:	e03d      	b.n	800c21c <LoRa_decode+0x438>
		case _CPIN:
			ITM0_Write("\r\nLora _CPIN\r\n",strlen("\r\nLora _CPIN\r\n"));
 800c1a0:	210e      	movs	r1, #14
 800c1a2:	480e      	ldr	r0, [pc, #56]	; (800c1dc <LoRa_decode+0x3f8>)
 800c1a4:	f7f5 fa52 	bl	800164c <ITM0_Write>
			break;
 800c1a8:	e038      	b.n	800c21c <LoRa_decode+0x438>
 800c1aa:	bf00      	nop
 800c1ac:	080108c8 	.word	0x080108c8
 800c1b0:	080108dc 	.word	0x080108dc
 800c1b4:	080108ec 	.word	0x080108ec
 800c1b8:	080108fc 	.word	0x080108fc
 800c1bc:	0801090c 	.word	0x0801090c
 800c1c0:	0801091c 	.word	0x0801091c
 800c1c4:	0801092c 	.word	0x0801092c
 800c1c8:	0801093c 	.word	0x0801093c
 800c1cc:	0801094c 	.word	0x0801094c
 800c1d0:	08010960 	.word	0x08010960
 800c1d4:	08010970 	.word	0x08010970
 800c1d8:	08010984 	.word	0x08010984
 800c1dc:	08010998 	.word	0x08010998
		case _CRFOP:
			ITM0_Write("\r\nLora _CRFOP\r\n",strlen("\r\nLora _CRFOP\r\n"));
 800c1e0:	210f      	movs	r1, #15
 800c1e2:	4810      	ldr	r0, [pc, #64]	; (800c224 <LoRa_decode+0x440>)
 800c1e4:	f7f5 fa32 	bl	800164c <ITM0_Write>
			break;
 800c1e8:	e018      	b.n	800c21c <LoRa_decode+0x438>
		case _SEND:
			ITM0_Write("\r\nLora _SEND\r\n",strlen("\r\nLora _SEND\r\n"));
 800c1ea:	210e      	movs	r1, #14
 800c1ec:	480e      	ldr	r0, [pc, #56]	; (800c228 <LoRa_decode+0x444>)
 800c1ee:	f7f5 fa2d 	bl	800164c <ITM0_Write>
			break;
 800c1f2:	e013      	b.n	800c21c <LoRa_decode+0x438>
		case _UID:
			ITM0_Write("\r\nLora _UID\r\n",strlen("\r\nLora _UID\r\n"));
 800c1f4:	210d      	movs	r1, #13
 800c1f6:	480d      	ldr	r0, [pc, #52]	; (800c22c <LoRa_decode+0x448>)
 800c1f8:	f7f5 fa28 	bl	800164c <ITM0_Write>
			break;
 800c1fc:	e00e      	b.n	800c21c <LoRa_decode+0x438>
		case _VER:
			ITM0_Write("\r\nLora _VER\r\n",strlen("\r\nLora _VER\r\n"));
 800c1fe:	210d      	movs	r1, #13
 800c200:	480b      	ldr	r0, [pc, #44]	; (800c230 <LoRa_decode+0x44c>)
 800c202:	f7f5 fa23 	bl	800164c <ITM0_Write>
			break;
 800c206:	e009      	b.n	800c21c <LoRa_decode+0x438>
		case _ERR_RCV_OF:
			ITM0_Write("\r\nLora _ERR_RCV_OF\r\n",strlen("\r\nLora _ERR_RCV_OF\r\n"));
 800c208:	2114      	movs	r1, #20
 800c20a:	480a      	ldr	r0, [pc, #40]	; (800c234 <LoRa_decode+0x450>)
 800c20c:	f7f5 fa1e 	bl	800164c <ITM0_Write>
			break;
 800c210:	e004      	b.n	800c21c <LoRa_decode+0x438>
		default:
			ITM0_Write("\r\nLora default\r\n",strlen("\r\nLora default\r\n"));
 800c212:	2110      	movs	r1, #16
 800c214:	4808      	ldr	r0, [pc, #32]	; (800c238 <LoRa_decode+0x454>)
 800c216:	f7f5 fa19 	bl	800164c <ITM0_Write>
			break;
 800c21a:	bf00      	nop
	}
 }
 800c21c:	bf00      	nop
 800c21e:	3718      	adds	r7, #24
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}
 800c224:	080109a8 	.word	0x080109a8
 800c228:	080109b8 	.word	0x080109b8
 800c22c:	080109c8 	.word	0x080109c8
 800c230:	080109d8 	.word	0x080109d8
 800c234:	080109e8 	.word	0x080109e8
 800c238:	08010a00 	.word	0x08010a00

0800c23c <Lora_idSTR>:
int Lora_idSTR(struct LoRa *a)
{		int f,g,h,i;
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b090      	sub	sp, #64	; 0x40
 800c240:	af06      	add	r7, sp, #24
 800c242:	6078      	str	r0, [r7, #4]
		if(a->rxitems > 270) return _ERR_RCV_OF;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 800c24a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c24e:	dd01      	ble.n	800c254 <Lora_idSTR+0x18>
 800c250:	2310      	movs	r3, #16
 800c252:	e229      	b.n	800c6a8 <Lora_idSTR+0x46c>
		char data[10];
		int ndata=0;
 800c254:	2300      	movs	r3, #0
 800c256:	60fb      	str	r3, [r7, #12]
		i=strlen("+OK=");
 800c258:	2304      	movs	r3, #4
 800c25a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+OK=",&i,data,&ndata,&g,&h, 0)==1) return _OK ;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c268:	f107 021c 	add.w	r2, r7, #28
 800c26c:	2300      	movs	r3, #0
 800c26e:	9304      	str	r3, [sp, #16]
 800c270:	f107 0320 	add.w	r3, r7, #32
 800c274:	9303      	str	r3, [sp, #12]
 800c276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c27a:	9302      	str	r3, [sp, #8]
 800c27c:	f107 030c 	add.w	r3, r7, #12
 800c280:	9301      	str	r3, [sp, #4]
 800c282:	f107 0310 	add.w	r3, r7, #16
 800c286:	9300      	str	r3, [sp, #0]
 800c288:	4613      	mov	r3, r2
 800c28a:	4ab9      	ldr	r2, [pc, #740]	; (800c570 <Lora_idSTR+0x334>)
 800c28c:	f002 f9e4 	bl	800e658 <FT_String_ND>
 800c290:	4603      	mov	r3, r0
 800c292:	2b01      	cmp	r3, #1
 800c294:	d101      	bne.n	800c29a <Lora_idSTR+0x5e>
 800c296:	2300      	movs	r3, #0
 800c298:	e206      	b.n	800c6a8 <Lora_idSTR+0x46c>
		i=strlen("+RCV=");
 800c29a:	2305      	movs	r3, #5
 800c29c:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RCV=",&i,data,&ndata,&g,&h, 0)==1) return _RCV ;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c2aa:	f107 021c 	add.w	r2, r7, #28
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	9304      	str	r3, [sp, #16]
 800c2b2:	f107 0320 	add.w	r3, r7, #32
 800c2b6:	9303      	str	r3, [sp, #12]
 800c2b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2bc:	9302      	str	r3, [sp, #8]
 800c2be:	f107 030c 	add.w	r3, r7, #12
 800c2c2:	9301      	str	r3, [sp, #4]
 800c2c4:	f107 0310 	add.w	r3, r7, #16
 800c2c8:	9300      	str	r3, [sp, #0]
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	4aa9      	ldr	r2, [pc, #676]	; (800c574 <Lora_idSTR+0x338>)
 800c2ce:	f002 f9c3 	bl	800e658 <FT_String_ND>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d101      	bne.n	800c2dc <Lora_idSTR+0xa0>
 800c2d8:	2301      	movs	r3, #1
 800c2da:	e1e5      	b.n	800c6a8 <Lora_idSTR+0x46c>
		i=strlen("+ERR=");
 800c2dc:	2305      	movs	r3, #5
 800c2de:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ERR=",&i,data,&ndata,&g,&h, 0)==1) return _ERR ;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c2ec:	f107 021c 	add.w	r2, r7, #28
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	9304      	str	r3, [sp, #16]
 800c2f4:	f107 0320 	add.w	r3, r7, #32
 800c2f8:	9303      	str	r3, [sp, #12]
 800c2fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2fe:	9302      	str	r3, [sp, #8]
 800c300:	f107 030c 	add.w	r3, r7, #12
 800c304:	9301      	str	r3, [sp, #4]
 800c306:	f107 0310 	add.w	r3, r7, #16
 800c30a:	9300      	str	r3, [sp, #0]
 800c30c:	4613      	mov	r3, r2
 800c30e:	4a9a      	ldr	r2, [pc, #616]	; (800c578 <Lora_idSTR+0x33c>)
 800c310:	f002 f9a2 	bl	800e658 <FT_String_ND>
 800c314:	4603      	mov	r3, r0
 800c316:	2b01      	cmp	r3, #1
 800c318:	d101      	bne.n	800c31e <Lora_idSTR+0xe2>
 800c31a:	230f      	movs	r3, #15
 800c31c:	e1c4      	b.n	800c6a8 <Lora_idSTR+0x46c>
		i=strlen("+RESET");
 800c31e:	2306      	movs	r3, #6
 800c320:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RESET",&i,data,&ndata,&g,&h, 0)==1)return _RESET;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c32e:	f107 021c 	add.w	r2, r7, #28
 800c332:	2300      	movs	r3, #0
 800c334:	9304      	str	r3, [sp, #16]
 800c336:	f107 0320 	add.w	r3, r7, #32
 800c33a:	9303      	str	r3, [sp, #12]
 800c33c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c340:	9302      	str	r3, [sp, #8]
 800c342:	f107 030c 	add.w	r3, r7, #12
 800c346:	9301      	str	r3, [sp, #4]
 800c348:	f107 0310 	add.w	r3, r7, #16
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	4613      	mov	r3, r2
 800c350:	4a8a      	ldr	r2, [pc, #552]	; (800c57c <Lora_idSTR+0x340>)
 800c352:	f002 f981 	bl	800e658 <FT_String_ND>
 800c356:	4603      	mov	r3, r0
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d101      	bne.n	800c360 <Lora_idSTR+0x124>
 800c35c:	2302      	movs	r3, #2
 800c35e:	e1a3      	b.n	800c6a8 <Lora_idSTR+0x46c>
		i=strlen("+READY");
 800c360:	2306      	movs	r3, #6
 800c362:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+READY",&i,data,&ndata,&g,&h, 0)==1) return _READY ;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c370:	f107 021c 	add.w	r2, r7, #28
 800c374:	2300      	movs	r3, #0
 800c376:	9304      	str	r3, [sp, #16]
 800c378:	f107 0320 	add.w	r3, r7, #32
 800c37c:	9303      	str	r3, [sp, #12]
 800c37e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c382:	9302      	str	r3, [sp, #8]
 800c384:	f107 030c 	add.w	r3, r7, #12
 800c388:	9301      	str	r3, [sp, #4]
 800c38a:	f107 0310 	add.w	r3, r7, #16
 800c38e:	9300      	str	r3, [sp, #0]
 800c390:	4613      	mov	r3, r2
 800c392:	4a7b      	ldr	r2, [pc, #492]	; (800c580 <Lora_idSTR+0x344>)
 800c394:	f002 f960 	bl	800e658 <FT_String_ND>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d101      	bne.n	800c3a2 <Lora_idSTR+0x166>
 800c39e:	2303      	movs	r3, #3
 800c3a0:	e182      	b.n	800c6a8 <Lora_idSTR+0x46c>
		i=strlen("+MODE=");
 800c3a2:	2306      	movs	r3, #6
 800c3a4:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+MODE=",&i,data,&ndata,&g,&h, 0)==1) return _MODE ;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c3b2:	f107 021c 	add.w	r2, r7, #28
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	9304      	str	r3, [sp, #16]
 800c3ba:	f107 0320 	add.w	r3, r7, #32
 800c3be:	9303      	str	r3, [sp, #12]
 800c3c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3c4:	9302      	str	r3, [sp, #8]
 800c3c6:	f107 030c 	add.w	r3, r7, #12
 800c3ca:	9301      	str	r3, [sp, #4]
 800c3cc:	f107 0310 	add.w	r3, r7, #16
 800c3d0:	9300      	str	r3, [sp, #0]
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	4a6b      	ldr	r2, [pc, #428]	; (800c584 <Lora_idSTR+0x348>)
 800c3d6:	f002 f93f 	bl	800e658 <FT_String_ND>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b01      	cmp	r3, #1
 800c3de:	d101      	bne.n	800c3e4 <Lora_idSTR+0x1a8>
 800c3e0:	2304      	movs	r3, #4
 800c3e2:	e161      	b.n	800c6a8 <Lora_idSTR+0x46c>
		i=strlen("+IPR=");
 800c3e4:	2305      	movs	r3, #5
 800c3e6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+IPR=",&i,data,&ndata,&g,&h, 0)==1) return _IPR ;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c3f4:	f107 021c 	add.w	r2, r7, #28
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	9304      	str	r3, [sp, #16]
 800c3fc:	f107 0320 	add.w	r3, r7, #32
 800c400:	9303      	str	r3, [sp, #12]
 800c402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c406:	9302      	str	r3, [sp, #8]
 800c408:	f107 030c 	add.w	r3, r7, #12
 800c40c:	9301      	str	r3, [sp, #4]
 800c40e:	f107 0310 	add.w	r3, r7, #16
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	4613      	mov	r3, r2
 800c416:	4a5c      	ldr	r2, [pc, #368]	; (800c588 <Lora_idSTR+0x34c>)
 800c418:	f002 f91e 	bl	800e658 <FT_String_ND>
 800c41c:	4603      	mov	r3, r0
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d101      	bne.n	800c426 <Lora_idSTR+0x1ea>
 800c422:	2305      	movs	r3, #5
 800c424:	e140      	b.n	800c6a8 <Lora_idSTR+0x46c>
		i=strlen("+PARAMETER=");
 800c426:	230b      	movs	r3, #11
 800c428:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+PARAMETER=",&i,data,&ndata,&g,&h, 0)==1) return _PARAMETER ;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c436:	f107 021c 	add.w	r2, r7, #28
 800c43a:	2300      	movs	r3, #0
 800c43c:	9304      	str	r3, [sp, #16]
 800c43e:	f107 0320 	add.w	r3, r7, #32
 800c442:	9303      	str	r3, [sp, #12]
 800c444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c448:	9302      	str	r3, [sp, #8]
 800c44a:	f107 030c 	add.w	r3, r7, #12
 800c44e:	9301      	str	r3, [sp, #4]
 800c450:	f107 0310 	add.w	r3, r7, #16
 800c454:	9300      	str	r3, [sp, #0]
 800c456:	4613      	mov	r3, r2
 800c458:	4a4c      	ldr	r2, [pc, #304]	; (800c58c <Lora_idSTR+0x350>)
 800c45a:	f002 f8fd 	bl	800e658 <FT_String_ND>
 800c45e:	4603      	mov	r3, r0
 800c460:	2b01      	cmp	r3, #1
 800c462:	d101      	bne.n	800c468 <Lora_idSTR+0x22c>
 800c464:	2306      	movs	r3, #6
 800c466:	e11f      	b.n	800c6a8 <Lora_idSTR+0x46c>
		i=strlen("+BAND=");
 800c468:	2306      	movs	r3, #6
 800c46a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+BAND=",&i,data,&ndata,&g,&h, 0)==1) return _BAND ;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c478:	f107 021c 	add.w	r2, r7, #28
 800c47c:	2300      	movs	r3, #0
 800c47e:	9304      	str	r3, [sp, #16]
 800c480:	f107 0320 	add.w	r3, r7, #32
 800c484:	9303      	str	r3, [sp, #12]
 800c486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c48a:	9302      	str	r3, [sp, #8]
 800c48c:	f107 030c 	add.w	r3, r7, #12
 800c490:	9301      	str	r3, [sp, #4]
 800c492:	f107 0310 	add.w	r3, r7, #16
 800c496:	9300      	str	r3, [sp, #0]
 800c498:	4613      	mov	r3, r2
 800c49a:	4a3d      	ldr	r2, [pc, #244]	; (800c590 <Lora_idSTR+0x354>)
 800c49c:	f002 f8dc 	bl	800e658 <FT_String_ND>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d101      	bne.n	800c4aa <Lora_idSTR+0x26e>
 800c4a6:	2307      	movs	r3, #7
 800c4a8:	e0fe      	b.n	800c6a8 <Lora_idSTR+0x46c>
		i=strlen("+ADDRESS=");
 800c4aa:	2309      	movs	r3, #9
 800c4ac:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ADDRESS=",&i,data,&ndata,&g,&h, 0)==1) return _ADDRESS ;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c4ba:	f107 021c 	add.w	r2, r7, #28
 800c4be:	2300      	movs	r3, #0
 800c4c0:	9304      	str	r3, [sp, #16]
 800c4c2:	f107 0320 	add.w	r3, r7, #32
 800c4c6:	9303      	str	r3, [sp, #12]
 800c4c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4cc:	9302      	str	r3, [sp, #8]
 800c4ce:	f107 030c 	add.w	r3, r7, #12
 800c4d2:	9301      	str	r3, [sp, #4]
 800c4d4:	f107 0310 	add.w	r3, r7, #16
 800c4d8:	9300      	str	r3, [sp, #0]
 800c4da:	4613      	mov	r3, r2
 800c4dc:	4a2d      	ldr	r2, [pc, #180]	; (800c594 <Lora_idSTR+0x358>)
 800c4de:	f002 f8bb 	bl	800e658 <FT_String_ND>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d101      	bne.n	800c4ec <Lora_idSTR+0x2b0>
 800c4e8:	2308      	movs	r3, #8
 800c4ea:	e0dd      	b.n	800c6a8 <Lora_idSTR+0x46c>
		i=strlen("+NETWORK=");
 800c4ec:	2309      	movs	r3, #9
 800c4ee:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+NETWORK=",&i,data,&ndata,&g,&h, 0)==1) return _NETWORK ;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c4fc:	f107 021c 	add.w	r2, r7, #28
 800c500:	2300      	movs	r3, #0
 800c502:	9304      	str	r3, [sp, #16]
 800c504:	f107 0320 	add.w	r3, r7, #32
 800c508:	9303      	str	r3, [sp, #12]
 800c50a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c50e:	9302      	str	r3, [sp, #8]
 800c510:	f107 030c 	add.w	r3, r7, #12
 800c514:	9301      	str	r3, [sp, #4]
 800c516:	f107 0310 	add.w	r3, r7, #16
 800c51a:	9300      	str	r3, [sp, #0]
 800c51c:	4613      	mov	r3, r2
 800c51e:	4a1e      	ldr	r2, [pc, #120]	; (800c598 <Lora_idSTR+0x35c>)
 800c520:	f002 f89a 	bl	800e658 <FT_String_ND>
 800c524:	4603      	mov	r3, r0
 800c526:	2b01      	cmp	r3, #1
 800c528:	d101      	bne.n	800c52e <Lora_idSTR+0x2f2>
 800c52a:	2309      	movs	r3, #9
 800c52c:	e0bc      	b.n	800c6a8 <Lora_idSTR+0x46c>
		i=strlen("+CPIN=");
 800c52e:	2306      	movs	r3, #6
 800c530:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CPIN=",&i,data,&ndata,&g,&h, 0)==1) return _CPIN ;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c53e:	f107 021c 	add.w	r2, r7, #28
 800c542:	2300      	movs	r3, #0
 800c544:	9304      	str	r3, [sp, #16]
 800c546:	f107 0320 	add.w	r3, r7, #32
 800c54a:	9303      	str	r3, [sp, #12]
 800c54c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c550:	9302      	str	r3, [sp, #8]
 800c552:	f107 030c 	add.w	r3, r7, #12
 800c556:	9301      	str	r3, [sp, #4]
 800c558:	f107 0310 	add.w	r3, r7, #16
 800c55c:	9300      	str	r3, [sp, #0]
 800c55e:	4613      	mov	r3, r2
 800c560:	4a0e      	ldr	r2, [pc, #56]	; (800c59c <Lora_idSTR+0x360>)
 800c562:	f002 f879 	bl	800e658 <FT_String_ND>
 800c566:	4603      	mov	r3, r0
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d119      	bne.n	800c5a0 <Lora_idSTR+0x364>
 800c56c:	230a      	movs	r3, #10
 800c56e:	e09b      	b.n	800c6a8 <Lora_idSTR+0x46c>
 800c570:	08010a14 	.word	0x08010a14
 800c574:	08010a1c 	.word	0x08010a1c
 800c578:	08010a24 	.word	0x08010a24
 800c57c:	08010a2c 	.word	0x08010a2c
 800c580:	08010a34 	.word	0x08010a34
 800c584:	08010a3c 	.word	0x08010a3c
 800c588:	08010a44 	.word	0x08010a44
 800c58c:	08010a4c 	.word	0x08010a4c
 800c590:	08010a58 	.word	0x08010a58
 800c594:	08010a60 	.word	0x08010a60
 800c598:	08010a6c 	.word	0x08010a6c
 800c59c:	08010a78 	.word	0x08010a78
		i=strlen("+CRFOP=");
 800c5a0:	2307      	movs	r3, #7
 800c5a2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CRFOP=",&i,data,&ndata,&g,&h, 0)==1) return _CRFOP ;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c5b0:	f107 021c 	add.w	r2, r7, #28
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	9304      	str	r3, [sp, #16]
 800c5b8:	f107 0320 	add.w	r3, r7, #32
 800c5bc:	9303      	str	r3, [sp, #12]
 800c5be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5c2:	9302      	str	r3, [sp, #8]
 800c5c4:	f107 030c 	add.w	r3, r7, #12
 800c5c8:	9301      	str	r3, [sp, #4]
 800c5ca:	f107 0310 	add.w	r3, r7, #16
 800c5ce:	9300      	str	r3, [sp, #0]
 800c5d0:	4613      	mov	r3, r2
 800c5d2:	4a37      	ldr	r2, [pc, #220]	; (800c6b0 <Lora_idSTR+0x474>)
 800c5d4:	f002 f840 	bl	800e658 <FT_String_ND>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d101      	bne.n	800c5e2 <Lora_idSTR+0x3a6>
 800c5de:	230b      	movs	r3, #11
 800c5e0:	e062      	b.n	800c6a8 <Lora_idSTR+0x46c>
		i=strlen("+SEND=");
 800c5e2:	2306      	movs	r3, #6
 800c5e4:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+SEND=",&i,data,&ndata,&g,&h, 0)==1) return _SEND ;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c5f2:	f107 021c 	add.w	r2, r7, #28
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	9304      	str	r3, [sp, #16]
 800c5fa:	f107 0320 	add.w	r3, r7, #32
 800c5fe:	9303      	str	r3, [sp, #12]
 800c600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c604:	9302      	str	r3, [sp, #8]
 800c606:	f107 030c 	add.w	r3, r7, #12
 800c60a:	9301      	str	r3, [sp, #4]
 800c60c:	f107 0310 	add.w	r3, r7, #16
 800c610:	9300      	str	r3, [sp, #0]
 800c612:	4613      	mov	r3, r2
 800c614:	4a27      	ldr	r2, [pc, #156]	; (800c6b4 <Lora_idSTR+0x478>)
 800c616:	f002 f81f 	bl	800e658 <FT_String_ND>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d101      	bne.n	800c624 <Lora_idSTR+0x3e8>
 800c620:	230c      	movs	r3, #12
 800c622:	e041      	b.n	800c6a8 <Lora_idSTR+0x46c>
		i=strlen("+UID=");
 800c624:	2305      	movs	r3, #5
 800c626:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+UID=",&i,data,&ndata,&g,&h, 0)==1) return _UID ;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c634:	f107 021c 	add.w	r2, r7, #28
 800c638:	2300      	movs	r3, #0
 800c63a:	9304      	str	r3, [sp, #16]
 800c63c:	f107 0320 	add.w	r3, r7, #32
 800c640:	9303      	str	r3, [sp, #12]
 800c642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c646:	9302      	str	r3, [sp, #8]
 800c648:	f107 030c 	add.w	r3, r7, #12
 800c64c:	9301      	str	r3, [sp, #4]
 800c64e:	f107 0310 	add.w	r3, r7, #16
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	4613      	mov	r3, r2
 800c656:	4a18      	ldr	r2, [pc, #96]	; (800c6b8 <Lora_idSTR+0x47c>)
 800c658:	f001 fffe 	bl	800e658 <FT_String_ND>
 800c65c:	4603      	mov	r3, r0
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d101      	bne.n	800c666 <Lora_idSTR+0x42a>
 800c662:	230e      	movs	r3, #14
 800c664:	e020      	b.n	800c6a8 <Lora_idSTR+0x46c>
		i=strlen("+VER=");
 800c666:	2305      	movs	r3, #5
 800c668:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+VER=",&i,data,&ndata,&g,&h, 0)==1) return _VER ;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c676:	f107 021c 	add.w	r2, r7, #28
 800c67a:	2300      	movs	r3, #0
 800c67c:	9304      	str	r3, [sp, #16]
 800c67e:	f107 0320 	add.w	r3, r7, #32
 800c682:	9303      	str	r3, [sp, #12]
 800c684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c688:	9302      	str	r3, [sp, #8]
 800c68a:	f107 030c 	add.w	r3, r7, #12
 800c68e:	9301      	str	r3, [sp, #4]
 800c690:	f107 0310 	add.w	r3, r7, #16
 800c694:	9300      	str	r3, [sp, #0]
 800c696:	4613      	mov	r3, r2
 800c698:	4a08      	ldr	r2, [pc, #32]	; (800c6bc <Lora_idSTR+0x480>)
 800c69a:	f001 ffdd 	bl	800e658 <FT_String_ND>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d101      	bne.n	800c6a8 <Lora_idSTR+0x46c>
 800c6a4:	230d      	movs	r3, #13
 800c6a6:	e7ff      	b.n	800c6a8 <Lora_idSTR+0x46c>
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3728      	adds	r7, #40	; 0x28
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	08010a80 	.word	0x08010a80
 800c6b4:	08010a88 	.word	0x08010a88
 800c6b8:	08010a90 	.word	0x08010a90
 800c6bc:	08010a98 	.word	0x08010a98

0800c6c0 <Lora_rx_del>:
void Lora_rx_del(struct LoRa *a)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b083      	sub	sp, #12
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
	a->rxbuff[0]='\0';
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	a->rx_items[0]='\0';
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	731a      	strb	r2, [r3, #12]
	//a->dataRCV[0]='\0';
	a->rxRSSI=0;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
	a->rxSNR=0;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
}
 800c6e6:	bf00      	nop
 800c6e8:	370c      	adds	r7, #12
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr
	...

0800c6f4 <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2201      	movs	r2, #1
 800c700:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	705a      	strb	r2, [r3, #1]
	m->_timeout=5000;						//Timeout para la recepción de respuesta.
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c70e:	805a      	strh	r2, [r3, #2]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2201      	movs	r2, #1
 800c714:	715a      	strb	r2, [r3, #5]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2220      	movs	r2, #32
 800c71a:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
	m->_Coils=0xF0F0AF5A;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	4a1c      	ldr	r2, [pc, #112]	; (800c794 <ModBUS_Config+0xa0>)
 800c722:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2201      	movs	r2, #1
 800c72a:	719a      	strb	r2, [r3, #6]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2220      	movs	r2, #32
 800c730:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
	m->_Inputs=0xA5FA0F0F;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	4a18      	ldr	r2, [pc, #96]	; (800c798 <ModBUS_Config+0xa4>)
 800c738:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2201      	movs	r2, #1
 800c740:	71da      	strb	r2, [r3, #7]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2210      	movs	r2, #16
 800c746:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2201      	movs	r2, #1
 800c74e:	721a      	strb	r2, [r3, #8]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2210      	movs	r2, #16
 800c754:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2201      	movs	r2, #1
 800c75c:	725a      	strb	r2, [r3, #9]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2220      	movs	r2, #32
 800c762:	f883 2534 	strb.w	r2, [r3, #1332]	; 0x534

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2201      	movs	r2, #1
 800c76a:	729a      	strb	r2, [r3, #10]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2201      	movs	r2, #1
 800c770:	72da      	strb	r2, [r3, #11]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2220      	movs	r2, #32
 800c776:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2201      	movs	r2, #1
 800c77e:	731a      	strb	r2, [r3, #12]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2220      	movs	r2, #32
 800c784:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546
}
 800c788:	bf00      	nop
 800c78a:	370c      	adds	r7, #12
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr
 800c794:	f0f0af5a 	.word	0xf0f0af5a
 800c798:	a5fa0f0f 	.word	0xa5fa0f0f

0800c79c <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	3305      	adds	r3, #5
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	3306      	adds	r3, #6
 800c7ae:	683a      	ldr	r2, [r7, #0]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d10b      	bne.n	800c7cc <ModBUS_Check+0x30>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	3302      	adds	r3, #2
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	3303      	adds	r3, #3
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	4413      	add	r3, r2
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d101      	bne.n	800c7cc <ModBUS_Check+0x30>
	{
		return(1);
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	e000      	b.n	800c7ce <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800c7cc:	2300      	movs	r3, #0
	}
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	370c      	adds	r7, #12
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr

0800c7da <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800c7da:	b480      	push	{r7}
 800c7dc:	b083      	sub	sp, #12
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f893 2194 	ldrb.w	r2, [r3, #404]	; 0x194
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	7b5b      	ldrb	r3, [r3, #13]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d11d      	bne.n	800c82c <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f893 2195 	ldrb.w	r2, [r3, #405]	; 0x195
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	7b9b      	ldrb	r3, [r3, #14]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d116      	bne.n	800c82c <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	7bdb      	ldrb	r3, [r3, #15]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800c808:	429a      	cmp	r2, r3
 800c80a:	d10f      	bne.n	800c82c <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f893 2197 	ldrb.w	r2, [r3, #407]	; 0x197
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	7c1b      	ldrb	r3, [r3, #16]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800c816:	429a      	cmp	r2, r3
 800c818:	d108      	bne.n	800c82c <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f893 219b 	ldrb.w	r2, [r3, #411]	; 0x19b
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800c824:	429a      	cmp	r2, r3
 800c826:	d101      	bne.n	800c82c <ModBUS_Check_tid+0x52>
	{
		return(1);
 800c828:	2301      	movs	r3, #1
 800c82a:	e000      	b.n	800c82e <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800c82c:	2300      	movs	r3, #0
	}
}
 800c82e:	4618      	mov	r0, r3
 800c830:	370c      	adds	r7, #12
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr

0800c83a <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t a, uint16_t b)
{
 800c83a:	b480      	push	{r7}
 800c83c:	b085      	sub	sp, #20
 800c83e:	af00      	add	r7, sp, #0
 800c840:	6078      	str	r0, [r7, #4]
 800c842:	460b      	mov	r3, r1
 800c844:	70fb      	strb	r3, [r7, #3]
 800c846:	4613      	mov	r3, r2
 800c848:	803b      	strh	r3, [r7, #0]
	uint8_t c=0;
 800c84a:	2300      	movs	r3, #0
 800c84c:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800c854:	78fa      	ldrb	r2, [r7, #3]
 800c856:	429a      	cmp	r2, r3
 800c858:	d901      	bls.n	800c85e <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800c85a:	2301      	movs	r3, #1
 800c85c:	e015      	b.n	800c88a <ModBUS_F03_Assign+0x50>
	}
	else
	{
		m2->_Holding_Registers[(a*2)+1]=b;
 800c85e:	78fb      	ldrb	r3, [r7, #3]
 800c860:	005b      	lsls	r3, r3, #1
 800c862:	3301      	adds	r3, #1
 800c864:	883a      	ldrh	r2, [r7, #0]
 800c866:	b2d1      	uxtb	r1, r2
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	4413      	add	r3, r2
 800c86c:	460a      	mov	r2, r1
 800c86e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
		c=b>>8;
 800c872:	883b      	ldrh	r3, [r7, #0]
 800c874:	0a1b      	lsrs	r3, r3, #8
 800c876:	b29b      	uxth	r3, r3
 800c878:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(a*2)]=c;
 800c87a:	78fb      	ldrb	r3, [r7, #3]
 800c87c:	005b      	lsls	r3, r3, #1
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	4413      	add	r3, r2
 800c882:	7bfa      	ldrb	r2, [r7, #15]
 800c884:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

		return(0);
 800c888:	2300      	movs	r3, #0
	}
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3714      	adds	r7, #20
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr

0800c896 <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t a)
{
 800c896:	b480      	push	{r7}
 800c898:	b085      	sub	sp, #20
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
 800c89e:	460b      	mov	r3, r1
 800c8a0:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800c8b0:	78fa      	ldrb	r2, [r7, #3]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d901      	bls.n	800c8ba <ModBUS_F03_Read+0x24>
	{
		return(1);
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	e015      	b.n	800c8e6 <ModBUS_F03_Read+0x50>
	}
	else
	{
		n=m2->_Holding_Registers[(a*2)];
 800c8ba:	78fb      	ldrb	r3, [r7, #3]
 800c8bc:	005b      	lsls	r3, r3, #1
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	4413      	add	r3, r2
 800c8c2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c8c6:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800c8c8:	89fb      	ldrh	r3, [r7, #14]
 800c8ca:	021b      	lsls	r3, r3, #8
 800c8cc:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(a*2)+1];
 800c8ce:	78fb      	ldrb	r3, [r7, #3]
 800c8d0:	005b      	lsls	r3, r3, #1
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	4413      	add	r3, r2
 800c8d8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c8dc:	b29a      	uxth	r2, r3
 800c8de:	89fb      	ldrh	r3, [r7, #14]
 800c8e0:	4313      	orrs	r3, r2
 800c8e2:	81fb      	strh	r3, [r7, #14]

		/*m2->_Holding_Registers[(a*2)+1]=b;
		c=b>>8;
		m2->_Holding_Registers[(a*2)]=c;*/
		return(n);
 800c8e4:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3714      	adds	r7, #20
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr

0800c8f2 <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800c8f2:	b480      	push	{r7}
 800c8f4:	b083      	sub	sp, #12
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	807b      	strh	r3, [r7, #2]
 800c8fe:	4613      	mov	r3, r2
 800c900:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800c902:	887b      	ldrh	r3, [r7, #2]
 800c904:	2b00      	cmp	r3, #0
 800c906:	bf14      	ite	ne
 800c908:	2301      	movne	r3, #1
 800c90a:	2300      	moveq	r3, #0
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	461a      	mov	r2, r3
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
	addr&=0xF0;
 800c916:	887b      	ldrh	r3, [r7, #2]
 800c918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c91c:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800c91e:	887b      	ldrh	r3, [r7, #2]
 800c920:	0a1b      	lsrs	r3, r3, #8
 800c922:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800c924:	887b      	ldrh	r3, [r7, #2]
 800c926:	f003 030f 	and.w	r3, r3, #15
 800c92a:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2200      	movs	r2, #0
 800c930:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	m2->_MBUS_2SND[1]=0x00;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2200      	movs	r2, #0
 800c938:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	m2->_MBUS_2SND[2]=0x00;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2200      	movs	r2, #0
 800c940:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
	m2->_MBUS_2SND[3]=0x00;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2200      	movs	r2, #0
 800c948:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
	m2->_MBUS_2SND[4]=0x00;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2200      	movs	r2, #0
 800c950:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	m2->_MBUS_2SND[5]=0x06;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2206      	movs	r2, #6
 800c958:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
	m2->_MBUS_2SND[6]=m2->_address;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	781a      	ldrb	r2, [r3, #0]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
	m2->_MBUS_2SND[7]=0x03;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2203      	movs	r2, #3
 800c96a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
	m2->_MBUS_2SND[8]=addr;
 800c96e:	887b      	ldrh	r3, [r7, #2]
 800c970:	b2da      	uxtb	r2, r3
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c

	m2->_MBUS_2SND[10]=0x00;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2200      	movs	r2, #0
 800c97c:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
	m2->_MBUS_2SND[11]=qty;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	787a      	ldrb	r2, [r7, #1]
 800c984:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	220c      	movs	r2, #12
 800c98c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

}
 800c990:	bf00      	nop
 800c992:	4618      	mov	r0, r3
 800c994:	370c      	adds	r7, #12
 800c996:	46bd      	mov	sp, r7
 800c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99c:	4770      	bx	lr
	...

0800c9a0 <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b09c      	sub	sp, #112	; 0x70
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	785b      	ldrb	r3, [r3, #1]
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	f041 813f 	bne.w	800dc30 <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f103 020d 	add.w	r2, r3, #13
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800c9be:	4619      	mov	r1, r3
 800c9c0:	4610      	mov	r0, r2
 800c9c2:	f7ff feeb 	bl	800c79c <ModBUS_Check>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f001 812f 	beq.w	800dc2c <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	7d1b      	ldrb	r3, [r3, #20]
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	2b0f      	cmp	r3, #15
 800c9d6:	f201 80f3 	bhi.w	800dbc0 <ModBUS+0x1220>
 800c9da:	a201      	add	r2, pc, #4	; (adr r2, 800c9e0 <ModBUS+0x40>)
 800c9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9e0:	0800ca21 	.word	0x0800ca21
 800c9e4:	0800cc61 	.word	0x0800cc61
 800c9e8:	0800cea1 	.word	0x0800cea1
 800c9ec:	0800d0d9 	.word	0x0800d0d9
 800c9f0:	0800d311 	.word	0x0800d311
 800c9f4:	0800d527 	.word	0x0800d527
 800c9f8:	0800dbc1 	.word	0x0800dbc1
 800c9fc:	0800dbc1 	.word	0x0800dbc1
 800ca00:	0800dbc1 	.word	0x0800dbc1
 800ca04:	0800dbc1 	.word	0x0800dbc1
 800ca08:	0800dbc1 	.word	0x0800dbc1
 800ca0c:	0800dbc1 	.word	0x0800dbc1
 800ca10:	0800dbc1 	.word	0x0800dbc1
 800ca14:	0800dbc1 	.word	0x0800dbc1
 800ca18:	0800d6e3 	.word	0x0800d6e3
 800ca1c:	0800d973 	.word	0x0800d973

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	7c5a      	ldrb	r2, [r3, #17]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	7c1a      	ldrb	r2, [r3, #16]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	7bda      	ldrb	r2, [r3, #15]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	7b9a      	ldrb	r2, [r3, #14]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	7b5a      	ldrb	r2, [r3, #13]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800ca52:	2300      	movs	r3, #0
 800ca54:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	795b      	ldrb	r3, [r3, #5]
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	f040 80e6 	bne.w	800cc2c <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	7d5b      	ldrb	r3, [r3, #21]
 800ca64:	b29a      	uxth	r2, r3
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800ca72:	021b      	lsls	r3, r3, #8
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800ca82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ca86:	b29a      	uxth	r2, r3
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8b3 251e 	ldrh.w	r2, [r3, #1310]	; 0x51e
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	7d9b      	ldrb	r3, [r3, #22]
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	4313      	orrs	r3, r2
 800ca9c:	b29a      	uxth	r2, r3
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	7ddb      	ldrb	r3, [r3, #23]
 800caa8:	b29a      	uxth	r2, r3
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800cab6:	021b      	lsls	r3, r3, #8
 800cab8:	b29a      	uxth	r2, r3
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800cac6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800caca:	b29a      	uxth	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	7e1b      	ldrb	r3, [r3, #24]
 800cadc:	b29b      	uxth	r3, r3
 800cade:	4313      	orrs	r3, r2
 800cae0:	b29a      	uxth	r2, r3
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f893 351c 	ldrb.w	r3, [r3, #1308]	; 0x51c
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d87e      	bhi.n	800cbf8 <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800cb00:	461a      	mov	r2, r3
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800cb08:	4413      	add	r3, r2
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	f892 251c 	ldrb.w	r2, [r2, #1308]	; 0x51c
 800cb10:	4293      	cmp	r3, r2
 800cb12:	dc57      	bgt.n	800cbc4 <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800cb14:	2300      	movs	r3, #0
 800cb16:	613b      	str	r3, [r7, #16]
 800cb18:	2300      	movs	r3, #0
 800cb1a:	60fb      	str	r3, [r7, #12]
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb20:	2300      	movs	r3, #0
 800cb22:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800cb24:	2300      	movs	r3, #0
 800cb26:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	f8b2 251e 	ldrh.w	r2, [r2, #1310]	; 0x51e
 800cb34:	40d3      	lsrs	r3, r2
 800cb36:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800cb3e:	08db      	lsrs	r3, r3, #3
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800cb4a:	f003 0307 	and.w	r3, r3, #7
 800cb4e:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d102      	bne.n	800cb5c <ModBUS+0x1bc>
									{
										bytes=div;
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb5a:	e002      	b.n	800cb62 <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800cb62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb64:	b2da      	uxtb	r2, r3
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800cb6c:	e00e      	b.n	800cb8c <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800cb6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb70:	3308      	adds	r3, #8
 800cb72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cb74:	b2d1      	uxtb	r1, r2
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	4413      	add	r3, r2
 800cb7a:	460a      	mov	r2, r1
 800cb7c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800cb80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb82:	0a1b      	lsrs	r3, r3, #8
 800cb84:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800cb86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb88:	3b01      	subs	r3, #1
 800cb8a:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800cb8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	dced      	bgt.n	800cb6e <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2201      	movs	r2, #1
 800cb96:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2201      	movs	r2, #1
 800cb9e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800cba8:	3303      	adds	r3, #3
 800cbaa:	b2da      	uxtb	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cbb8:	1d9a      	adds	r2, r3, #6
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cbc0:	f001 b8d4 	b.w	800dd6c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2202      	movs	r2, #2
 800cbc8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x81;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2281      	movs	r2, #129	; 0x81
 800cbd0:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2203      	movs	r2, #3
 800cbe0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cbea:	1d9a      	adds	r2, r3, #6
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800cbf2:	2302      	movs	r3, #2
 800cbf4:	f001 b8ba 	b.w	800dd6c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2203      	movs	r2, #3
 800cbfc:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x81;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2281      	movs	r2, #129	; 0x81
 800cc04:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2203      	movs	r2, #3
 800cc14:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cc1e:	1d9a      	adds	r2, r3, #6
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800cc26:	2303      	movs	r3, #3
 800cc28:	f001 b8a0 	b.w	800dd6c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x81;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2281      	movs	r2, #129	; 0x81
 800cc38:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2201      	movs	r2, #1
 800cc40:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2203      	movs	r2, #3
 800cc48:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cc52:	1d9a      	adds	r2, r3, #6
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	f001 b886 	b.w	800dd6c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	7c5a      	ldrb	r2, [r3, #17]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	7c1a      	ldrb	r2, [r3, #16]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	7bda      	ldrb	r2, [r3, #15]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	7b9a      	ldrb	r2, [r3, #14]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	7b5a      	ldrb	r2, [r3, #13]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800cc92:	2300      	movs	r3, #0
 800cc94:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	799b      	ldrb	r3, [r3, #6]
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	f040 80e6 	bne.w	800ce6c <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	7d5b      	ldrb	r3, [r3, #21]
 800cca4:	b29a      	uxth	r2, r3
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800ccb2:	021b      	lsls	r3, r3, #8
 800ccb4:	b29a      	uxth	r2, r3
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800ccc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ccc6:	b29a      	uxth	r2, r3
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f8b3 2524 	ldrh.w	r2, [r3, #1316]	; 0x524
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	7d9b      	ldrb	r3, [r3, #22]
 800ccd8:	b29b      	uxth	r3, r3
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	b29a      	uxth	r2, r3
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	7ddb      	ldrb	r3, [r3, #23]
 800cce8:	b29a      	uxth	r2, r3
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ccf6:	021b      	lsls	r3, r3, #8
 800ccf8:	b29a      	uxth	r2, r3
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800cd06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cd0a:	b29a      	uxth	r2, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	7e1b      	ldrb	r3, [r3, #24]
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	b29a      	uxth	r2, r3
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f893 3522 	ldrb.w	r3, [r3, #1314]	; 0x522
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d87e      	bhi.n	800ce38 <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800cd40:	461a      	mov	r2, r3
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800cd48:	4413      	add	r3, r2
 800cd4a:	687a      	ldr	r2, [r7, #4]
 800cd4c:	f892 2522 	ldrb.w	r2, [r2, #1314]	; 0x522
 800cd50:	4293      	cmp	r3, r2
 800cd52:	dc57      	bgt.n	800ce04 <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800cd54:	2300      	movs	r3, #0
 800cd56:	623b      	str	r3, [r7, #32]
 800cd58:	2300      	movs	r3, #0
 800cd5a:	61fb      	str	r3, [r7, #28]
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	667b      	str	r3, [r7, #100]	; 0x64
 800cd60:	2300      	movs	r3, #0
 800cd62:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800cd64:	2300      	movs	r3, #0
 800cd66:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800cd6e:	687a      	ldr	r2, [r7, #4]
 800cd70:	f8b2 2524 	ldrh.w	r2, [r2, #1316]	; 0x524
 800cd74:	40d3      	lsrs	r3, r2
 800cd76:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800cd7e:	08db      	lsrs	r3, r3, #3
 800cd80:	b29b      	uxth	r3, r3
 800cd82:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800cd8a:	f003 0307 	and.w	r3, r3, #7
 800cd8e:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d102      	bne.n	800cd9c <ModBUS+0x3fc>
									{
										bytes=div;
 800cd96:	6a3b      	ldr	r3, [r7, #32]
 800cd98:	667b      	str	r3, [r7, #100]	; 0x64
 800cd9a:	e002      	b.n	800cda2 <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800cd9c:	6a3b      	ldr	r3, [r7, #32]
 800cd9e:	3301      	adds	r3, #1
 800cda0:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800cda2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cda4:	b2da      	uxtb	r2, r3
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800cdac:	e00e      	b.n	800cdcc <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800cdae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdb0:	3308      	adds	r3, #8
 800cdb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cdb4:	b2d1      	uxtb	r1, r2
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	4413      	add	r3, r2
 800cdba:	460a      	mov	r2, r1
 800cdbc:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800cdc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cdc2:	0a1b      	lsrs	r3, r3, #8
 800cdc4:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800cdc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800cdcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	dced      	bgt.n	800cdae <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2202      	movs	r2, #2
 800cdd6:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2201      	movs	r2, #1
 800cdde:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800cde8:	3303      	adds	r3, #3
 800cdea:	b2da      	uxtb	r2, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cdf8:	1d9a      	adds	r2, r3, #6
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800ce00:	f000 bfb4 	b.w	800dd6c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2202      	movs	r2, #2
 800ce08:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x82;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2282      	movs	r2, #130	; 0x82
 800ce10:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2201      	movs	r2, #1
 800ce18:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2203      	movs	r2, #3
 800ce20:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800ce2a:	1d9a      	adds	r2, r3, #6
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800ce32:	2302      	movs	r3, #2
 800ce34:	f000 bf9a 	b.w	800dd6c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2203      	movs	r2, #3
 800ce3c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x82;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2282      	movs	r2, #130	; 0x82
 800ce44:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2203      	movs	r2, #3
 800ce54:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800ce5e:	1d9a      	adds	r2, r3, #6
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800ce66:	2303      	movs	r3, #3
 800ce68:	f000 bf80 	b.w	800dd6c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2201      	movs	r2, #1
 800ce70:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x82;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2282      	movs	r2, #130	; 0x82
 800ce78:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2201      	movs	r2, #1
 800ce80:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2203      	movs	r2, #3
 800ce88:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800ce92:	1d9a      	adds	r2, r3, #6
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	f000 bf66 	b.w	800dd6c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	7c5a      	ldrb	r2, [r3, #17]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	7c1a      	ldrb	r2, [r3, #16]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	7bda      	ldrb	r2, [r3, #15]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	7b9a      	ldrb	r2, [r3, #14]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	7b5a      	ldrb	r2, [r3, #13]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800ced2:	2300      	movs	r3, #0
 800ced4:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	79db      	ldrb	r3, [r3, #7]
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	f040 80e2 	bne.w	800d0a4 <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	7d5b      	ldrb	r3, [r3, #21]
 800cee4:	b29a      	uxth	r2, r3
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800cef2:	021b      	lsls	r3, r3, #8
 800cef4:	b29a      	uxth	r2, r3
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800cf02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cf06:	b29a      	uxth	r2, r3
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f8b3 252a 	ldrh.w	r2, [r3, #1322]	; 0x52a
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	7d9b      	ldrb	r3, [r3, #22]
 800cf18:	b29b      	uxth	r3, r3
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	b29a      	uxth	r2, r3
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	7ddb      	ldrb	r3, [r3, #23]
 800cf28:	b29a      	uxth	r2, r3
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cf36:	021b      	lsls	r3, r3, #8
 800cf38:	b29a      	uxth	r2, r3
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cf46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cf4a:	b29a      	uxth	r2, r3
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	7e1b      	ldrb	r3, [r3, #24]
 800cf5c:	b29b      	uxth	r3, r3
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	b29a      	uxth	r2, r3
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800cf74:	b29b      	uxth	r3, r3
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d87a      	bhi.n	800d070 <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800cf80:	461a      	mov	r2, r3
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cf88:	4413      	add	r3, r2
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	f892 2528 	ldrb.w	r2, [r2, #1320]	; 0x528
 800cf90:	4293      	cmp	r3, r2
 800cf92:	dc53      	bgt.n	800d03c <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800cf94:	e029      	b.n	800cfea <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfa0:	4413      	add	r3, r2
 800cfa2:	005a      	lsls	r2, r3, #1
 800cfa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfa6:	005b      	lsls	r3, r3, #1
 800cfa8:	3309      	adds	r3, #9
 800cfaa:	6879      	ldr	r1, [r7, #4]
 800cfac:	440a      	add	r2, r1
 800cfae:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	4413      	add	r3, r2
 800cfb6:	460a      	mov	r2, r1
 800cfb8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfc6:	4413      	add	r3, r2
 800cfc8:	005b      	lsls	r3, r3, #1
 800cfca:	1c5a      	adds	r2, r3, #1
 800cfcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfce:	3305      	adds	r3, #5
 800cfd0:	005b      	lsls	r3, r3, #1
 800cfd2:	6879      	ldr	r1, [r7, #4]
 800cfd4:	440a      	add	r2, r1
 800cfd6:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	4413      	add	r3, r2
 800cfde:	460a      	mov	r2, r1
 800cfe0:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800cfe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cff0:	461a      	mov	r2, r3
 800cff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cff4:	4293      	cmp	r3, r2
 800cff6:	dbce      	blt.n	800cf96 <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	005b      	lsls	r3, r3, #1
 800d002:	b2da      	uxtb	r2, r3
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x03;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2203      	movs	r2, #3
 800d00e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2201      	movs	r2, #1
 800d016:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800d020:	3303      	adds	r3, #3
 800d022:	b2da      	uxtb	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d030:	1d9a      	adds	r2, r3, #6
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d038:	f000 be98 	b.w	800dd6c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2202      	movs	r2, #2
 800d040:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x83;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2283      	movs	r2, #131	; 0x83
 800d048:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2201      	movs	r2, #1
 800d050:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2203      	movs	r2, #3
 800d058:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d062:	1d9a      	adds	r2, r3, #6
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800d06a:	2302      	movs	r3, #2
 800d06c:	f000 be7e 	b.w	800dd6c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2203      	movs	r2, #3
 800d074:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x83;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2283      	movs	r2, #131	; 0x83
 800d07c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2201      	movs	r2, #1
 800d084:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2203      	movs	r2, #3
 800d08c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d096:	1d9a      	adds	r2, r3, #6
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800d09e:	2303      	movs	r3, #3
 800d0a0:	f000 be64 	b.w	800dd6c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x83;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2283      	movs	r2, #131	; 0x83
 800d0b0:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2203      	movs	r2, #3
 800d0c0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d0ca:	1d9a      	adds	r2, r3, #6
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	f000 be4a 	b.w	800dd6c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	7c5a      	ldrb	r2, [r3, #17]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	7c1a      	ldrb	r2, [r3, #16]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	7bda      	ldrb	r2, [r3, #15]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	7b9a      	ldrb	r2, [r3, #14]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	7b5a      	ldrb	r2, [r3, #13]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800d10a:	2300      	movs	r3, #0
 800d10c:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	7a1b      	ldrb	r3, [r3, #8]
 800d112:	2b01      	cmp	r3, #1
 800d114:	f040 80e2 	bne.w	800d2dc <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	7d5b      	ldrb	r3, [r3, #21]
 800d11c:	b29a      	uxth	r2, r3
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800d12a:	021b      	lsls	r3, r3, #8
 800d12c:	b29a      	uxth	r2, r3
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800d13a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d13e:	b29a      	uxth	r2, r3
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8b3 2530 	ldrh.w	r2, [r3, #1328]	; 0x530
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	7d9b      	ldrb	r3, [r3, #22]
 800d150:	b29b      	uxth	r3, r3
 800d152:	4313      	orrs	r3, r2
 800d154:	b29a      	uxth	r2, r3
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	7ddb      	ldrb	r3, [r3, #23]
 800d160:	b29a      	uxth	r2, r3
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800d16e:	021b      	lsls	r3, r3, #8
 800d170:	b29a      	uxth	r2, r3
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800d17e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d182:	b29a      	uxth	r2, r3
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	7e1b      	ldrb	r3, [r3, #24]
 800d194:	b29b      	uxth	r3, r3
 800d196:	4313      	orrs	r3, r2
 800d198:	b29a      	uxth	r2, r3
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f893 352e 	ldrb.w	r3, [r3, #1326]	; 0x52e
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d87a      	bhi.n	800d2a8 <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800d1c0:	4413      	add	r3, r2
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	f892 252e 	ldrb.w	r2, [r2, #1326]	; 0x52e
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	dc53      	bgt.n	800d274 <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800d1cc:	e029      	b.n	800d222 <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d1d8:	4413      	add	r3, r2
 800d1da:	005a      	lsls	r2, r3, #1
 800d1dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d1de:	005b      	lsls	r3, r3, #1
 800d1e0:	3309      	adds	r3, #9
 800d1e2:	6879      	ldr	r1, [r7, #4]
 800d1e4:	440a      	add	r2, r1
 800d1e6:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800d1ea:	687a      	ldr	r2, [r7, #4]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	460a      	mov	r2, r1
 800d1f0:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d1fe:	4413      	add	r3, r2
 800d200:	005b      	lsls	r3, r3, #1
 800d202:	1c5a      	adds	r2, r3, #1
 800d204:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d206:	3305      	adds	r3, #5
 800d208:	005b      	lsls	r3, r3, #1
 800d20a:	6879      	ldr	r1, [r7, #4]
 800d20c:	440a      	add	r2, r1
 800d20e:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	4413      	add	r3, r2
 800d216:	460a      	mov	r2, r1
 800d218:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800d21c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d21e:	3301      	adds	r3, #1
 800d220:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800d228:	461a      	mov	r2, r3
 800d22a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d22c:	4293      	cmp	r3, r2
 800d22e:	dbce      	blt.n	800d1ce <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800d236:	b2db      	uxtb	r3, r3
 800d238:	005b      	lsls	r3, r3, #1
 800d23a:	b2da      	uxtb	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x04;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2204      	movs	r2, #4
 800d246:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2201      	movs	r2, #1
 800d24e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800d258:	3303      	adds	r3, #3
 800d25a:	b2da      	uxtb	r2, r3
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d268:	1d9a      	adds	r2, r3, #6
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d270:	f000 bd7c 	b.w	800dd6c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2202      	movs	r2, #2
 800d278:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x84;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2284      	movs	r2, #132	; 0x84
 800d280:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2201      	movs	r2, #1
 800d288:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2203      	movs	r2, #3
 800d290:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d29a:	1d9a      	adds	r2, r3, #6
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800d2a2:	2302      	movs	r3, #2
 800d2a4:	f000 bd62 	b.w	800dd6c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2203      	movs	r2, #3
 800d2ac:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x84;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2284      	movs	r2, #132	; 0x84
 800d2b4:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2203      	movs	r2, #3
 800d2c4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d2ce:	1d9a      	adds	r2, r3, #6
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800d2d6:	2303      	movs	r3, #3
 800d2d8:	f000 bd48 	b.w	800dd6c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x84;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2284      	movs	r2, #132	; 0x84
 800d2e8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2203      	movs	r2, #3
 800d2f8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d302:	1d9a      	adds	r2, r3, #6
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d30a:	2301      	movs	r3, #1
 800d30c:	f000 bd2e 	b.w	800dd6c <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	7c5a      	ldrb	r2, [r3, #17]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	7c1a      	ldrb	r2, [r3, #16]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	7bda      	ldrb	r2, [r3, #15]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	7b9a      	ldrb	r2, [r3, #14]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	7b5a      	ldrb	r2, [r3, #13]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

								int qty_reg=0;
 800d342:	2300      	movs	r3, #0
 800d344:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	7a5b      	ldrb	r3, [r3, #9]
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	f040 80d1 	bne.w	800d4f2 <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	7d5b      	ldrb	r3, [r3, #21]
 800d354:	b29a      	uxth	r2, r3
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800d362:	021b      	lsls	r3, r3, #8
 800d364:	b29a      	uxth	r2, r3
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800d372:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d376:	b29a      	uxth	r2, r3
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8b3 2536 	ldrh.w	r2, [r3, #1334]	; 0x536
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	7d9b      	ldrb	r3, [r3, #22]
 800d388:	b29b      	uxth	r3, r3
 800d38a:	4313      	orrs	r3, r2
 800d38c:	b29a      	uxth	r2, r3
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	7ddb      	ldrb	r3, [r3, #23]
 800d398:	b29a      	uxth	r2, r3
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d3a6:	021b      	lsls	r3, r3, #8
 800d3a8:	b29a      	uxth	r2, r3
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d3b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d3ba:	b29a      	uxth	r2, r3
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8b3 2538 	ldrh.w	r2, [r3, #1336]	; 0x538
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	7e1b      	ldrb	r3, [r3, #24]
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	b29a      	uxth	r2, r3
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f893 3534 	ldrb.w	r3, [r3, #1332]	; 0x534
 800d3de:	461a      	mov	r2, r3
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	dd69      	ble.n	800d4be <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d005      	beq.n	800d400 <ModBUS+0xa60>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d3fa:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d3fe:	d144      	bne.n	800d48a <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800d406:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d40a:	d10d      	bne.n	800d428 <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	f8b2 2536 	ldrh.w	r2, [r2, #1334]	; 0x536
 800d418:	4611      	mov	r1, r2
 800d41a:	2201      	movs	r2, #1
 800d41c:	408a      	lsls	r2, r1
 800d41e:	431a      	orrs	r2, r3
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 800d426:	e003      	b.n	800d430 <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2200      	movs	r2, #0
 800d42c:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	7e1a      	ldrb	r2, [r3, #24]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	7dda      	ldrb	r2, [r3, #23]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	7d9a      	ldrb	r2, [r3, #22]
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	7d5a      	ldrb	r2, [r3, #21]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x05;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2205      	movs	r2, #5
 800d45c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2201      	movs	r2, #1
 800d464:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800d46e:	3306      	adds	r3, #6
 800d470:	b2da      	uxtb	r2, r3
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d47e:	1d9a      	adds	r2, r3, #6
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800d486:	f000 bc71 	b.w	800dd6c <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2202      	movs	r2, #2
 800d48e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x85;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2285      	movs	r2, #133	; 0x85
 800d496:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2201      	movs	r2, #1
 800d49e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2203      	movs	r2, #3
 800d4a6:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d4b0:	1d9a      	adds	r2, r3, #6
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
												return(2);//Error excepcion 02
 800d4b8:	2302      	movs	r3, #2
 800d4ba:	f000 bc57 	b.w	800dd6c <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2203      	movs	r2, #3
 800d4c2:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
											m3->_MBUS_2SND[7]=0x85;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2285      	movs	r2, #133	; 0x85
 800d4ca:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2203      	movs	r2, #3
 800d4da:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d4e4:	1d9a      	adds	r2, r3, #6
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
											return(3);//Erroe excepcion 03
 800d4ec:	2303      	movs	r3, #3
 800d4ee:	f000 bc3d 	b.w	800dd6c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x85;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2285      	movs	r2, #133	; 0x85
 800d4fe:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2201      	movs	r2, #1
 800d506:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2203      	movs	r2, #3
 800d50e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d518:	1d9a      	adds	r2, r3, #6
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(1);//Error excepcion 01
 800d520:	2301      	movs	r3, #1
 800d522:	f000 bc23 	b.w	800dd6c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	7c5a      	ldrb	r2, [r3, #17]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	7c1a      	ldrb	r2, [r3, #16]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	7bda      	ldrb	r2, [r3, #15]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	7b9a      	ldrb	r2, [r3, #14]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	7b5a      	ldrb	r2, [r3, #13]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800d558:	2300      	movs	r3, #0
 800d55a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d55c:	2300      	movs	r3, #0
 800d55e:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	7a9b      	ldrb	r3, [r3, #10]
 800d564:	2b01      	cmp	r3, #1
 800d566:	f040 80a3 	bne.w	800d6b0 <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	7d5b      	ldrb	r3, [r3, #21]
 800d56e:	b29a      	uxth	r2, r3
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800d57c:	021b      	lsls	r3, r3, #8
 800d57e:	b29a      	uxth	r2, r3
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800d58c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d590:	b29a      	uxth	r2, r3
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	7d9b      	ldrb	r3, [r3, #22]
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	b29a      	uxth	r2, r3
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542

							start_address=m3->_06_WriteSingleRegister_Addr;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800d5b4:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	7ddb      	ldrb	r3, [r3, #23]
 800d5ba:	b29a      	uxth	r2, r3
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800d5c8:	021b      	lsls	r3, r3, #8
 800d5ca:	b29a      	uxth	r2, r3
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800d5d8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d5dc:	b29a      	uxth	r2, r3
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8b3 2544 	ldrh.w	r2, [r3, #1348]	; 0x544
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	7e1b      	ldrb	r3, [r3, #24]
 800d5ee:	b29b      	uxth	r3, r3
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	b29a      	uxth	r2, r3
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f893 3540 	ldrb.w	r3, [r3, #1344]	; 0x540
 800d606:	b29b      	uxth	r3, r3
 800d608:	429a      	cmp	r2, r3
 800d60a:	d838      	bhi.n	800d67e <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800d60c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	7dd1      	ldrb	r1, [r2, #23]
 800d612:	687a      	ldr	r2, [r7, #4]
 800d614:	4413      	add	r3, r2
 800d616:	460a      	mov	r2, r1
 800d618:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800d61c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d61e:	3301      	adds	r3, #1
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	7e11      	ldrb	r1, [r2, #24]
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	4413      	add	r3, r2
 800d628:	460a      	mov	r2, r1
 800d62a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	7e1a      	ldrb	r2, [r3, #24]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	7dda      	ldrb	r2, [r3, #23]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	7d9a      	ldrb	r2, [r3, #22]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	7d5a      	ldrb	r2, [r3, #21]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x06;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2206      	movs	r2, #6
 800d65a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2201      	movs	r2, #1
 800d662:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2206      	movs	r2, #6
 800d66a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d674:	1d9a      	adds	r2, r3, #6
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d67c:	e376      	b.n	800dd6c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2202      	movs	r2, #2
 800d682:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x86;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2286      	movs	r2, #134	; 0x86
 800d68a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2201      	movs	r2, #1
 800d692:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2203      	movs	r2, #3
 800d69a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d6a4:	1d9a      	adds	r2, r3, #6
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800d6ac:	2302      	movs	r3, #2
 800d6ae:	e35d      	b.n	800dd6c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x86;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2286      	movs	r2, #134	; 0x86
 800d6bc:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2203      	movs	r2, #3
 800d6cc:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d6d6:	1d9a      	adds	r2, r3, #6
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d6de:	2301      	movs	r3, #1
 800d6e0:	e344      	b.n	800dd6c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	7c5a      	ldrb	r2, [r3, #17]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	7c1a      	ldrb	r2, [r3, #16]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	7bda      	ldrb	r2, [r3, #15]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	7b9a      	ldrb	r2, [r3, #14]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	7b5a      	ldrb	r2, [r3, #13]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800d714:	2300      	movs	r3, #0
 800d716:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	7adb      	ldrb	r3, [r3, #11]
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	f040 810f 	bne.w	800d940 <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	7d5b      	ldrb	r3, [r3, #21]
 800d726:	b29a      	uxth	r2, r3
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d734:	021b      	lsls	r3, r3, #8
 800d736:	b29a      	uxth	r2, r3
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d744:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d748:	b29a      	uxth	r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f8b3 253c 	ldrh.w	r2, [r3, #1340]	; 0x53c
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	7d9b      	ldrb	r3, [r3, #22]
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	4313      	orrs	r3, r2
 800d75e:	b29a      	uxth	r2, r3
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	7ddb      	ldrb	r3, [r3, #23]
 800d76a:	b29a      	uxth	r2, r3
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d778:	021b      	lsls	r3, r3, #8
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d788:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d78c:	b29a      	uxth	r2, r3
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	7e1b      	ldrb	r3, [r3, #24]
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	4313      	orrs	r3, r2
 800d7a2:	b29a      	uxth	r2, r3
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f893 353a 	ldrb.w	r3, [r3, #1338]	; 0x53a
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	f200 80a8 	bhi.w	800d90e <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d7cc:	4413      	add	r3, r2
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	f892 253a 	ldrb.w	r2, [r2, #1338]	; 0x53a
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	f300 8081 	bgt.w	800d8dc <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	657b      	str	r3, [r7, #84]	; 0x54
 800d7de:	2300      	movs	r3, #0
 800d7e0:	653b      	str	r3, [r7, #80]	; 0x50
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	7e5b      	ldrb	r3, [r3, #25]
 800d7ee:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800d7f0:	e00e      	b.n	800d810 <ModBUS+0xe70>
									{
										data=data<<8;
 800d7f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7f4:	021b      	lsls	r3, r3, #8
 800d7f6:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800d7f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7fa:	330c      	adds	r3, #12
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	4413      	add	r3, r2
 800d800:	7b5b      	ldrb	r3, [r3, #13]
 800d802:	461a      	mov	r2, r3
 800d804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d806:	4313      	orrs	r3, r2
 800d808:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800d80a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d80c:	3b01      	subs	r3, #1
 800d80e:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800d810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d812:	2b00      	cmp	r3, #0
 800d814:	d1ed      	bne.n	800d7f2 <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d81c:	461a      	mov	r2, r3
 800d81e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d820:	4093      	lsls	r3, r2
 800d822:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800d824:	e00f      	b.n	800d846 <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800d82c:	461a      	mov	r2, r3
 800d82e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d830:	4413      	add	r3, r2
 800d832:	2201      	movs	r2, #1
 800d834:	fa02 f303 	lsl.w	r3, r2, r3
 800d838:	461a      	mov	r2, r3
 800d83a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d83c:	4313      	orrs	r3, r2
 800d83e:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800d840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d842:	3301      	adds	r3, #1
 800d844:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800d84c:	461a      	mov	r2, r3
 800d84e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d850:	4293      	cmp	r3, r2
 800d852:	d3e8      	bcc.n	800d826 <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800d854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d856:	43db      	mvns	r3, r3
 800d858:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800d860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d862:	401a      	ands	r2, r3
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318


									data &= ~mascara;
 800d86a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d86c:	43db      	mvns	r3, r3
 800d86e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d870:	4013      	ands	r3, r2
 800d872:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800d87a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d87c:	431a      	orrs	r2, r3
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	7e1a      	ldrb	r2, [r3, #24]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	7dda      	ldrb	r2, [r3, #23]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	7d9a      	ldrb	r2, [r3, #22]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	7d5a      	ldrb	r2, [r3, #21]
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x0F;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	220f      	movs	r2, #15
 800d8b0:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800d8c2:	3306      	adds	r3, #6
 800d8c4:	b2da      	uxtb	r2, r3
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d8d2:	1d9a      	adds	r2, r3, #6
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d8da:	e247      	b.n	800dd6c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2202      	movs	r2, #2
 800d8e0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x8F;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	228f      	movs	r2, #143	; 0x8f
 800d8e8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2203      	movs	r2, #3
 800d8f8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d902:	1d9a      	adds	r2, r3, #6
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800d90a:	2302      	movs	r3, #2
 800d90c:	e22e      	b.n	800dd6c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2203      	movs	r2, #3
 800d912:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x8F;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	228f      	movs	r2, #143	; 0x8f
 800d91a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2201      	movs	r2, #1
 800d922:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2203      	movs	r2, #3
 800d92a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d934:	1d9a      	adds	r2, r3, #6
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800d93c:	2303      	movs	r3, #3
 800d93e:	e215      	b.n	800dd6c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2201      	movs	r2, #1
 800d944:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x8F;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	228f      	movs	r2, #143	; 0x8f
 800d94c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2201      	movs	r2, #1
 800d954:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2203      	movs	r2, #3
 800d95c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800d966:	1d9a      	adds	r2, r3, #6
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800d96e:	2301      	movs	r3, #1
 800d970:	e1fc      	b.n	800dd6c <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	7c5a      	ldrb	r2, [r3, #17]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	7c1a      	ldrb	r2, [r3, #16]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	7bda      	ldrb	r2, [r3, #15]
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	7b9a      	ldrb	r2, [r3, #14]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	7b5a      	ldrb	r2, [r3, #13]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	7b1b      	ldrb	r3, [r3, #12]
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	f040 80eb 	bne.w	800db8e <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	7d5b      	ldrb	r3, [r3, #21]
 800d9bc:	b29a      	uxth	r2, r3
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800d9ca:	021b      	lsls	r3, r3, #8
 800d9cc:	b29a      	uxth	r2, r3
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800d9da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d9de:	b29a      	uxth	r2, r3
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f8b3 2548 	ldrh.w	r2, [r3, #1352]	; 0x548
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	7d9b      	ldrb	r3, [r3, #22]
 800d9f0:	b29b      	uxth	r3, r3
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	b29a      	uxth	r2, r3
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800da02:	005b      	lsls	r3, r3, #1
 800da04:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	7ddb      	ldrb	r3, [r3, #23]
 800da0a:	b29a      	uxth	r2, r3
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800da18:	021b      	lsls	r3, r3, #8
 800da1a:	b29a      	uxth	r2, r3
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800da28:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800da2c:	b29a      	uxth	r2, r3
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	7e1b      	ldrb	r3, [r3, #24]
 800da3e:	b29b      	uxth	r3, r3
 800da40:	4313      	orrs	r3, r2
 800da42:	b29a      	uxth	r2, r3
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f893 3546 	ldrb.w	r3, [r3, #1350]	; 0x546
 800da56:	b29b      	uxth	r3, r3
 800da58:	429a      	cmp	r2, r3
 800da5a:	d87f      	bhi.n	800db5c <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800da62:	461a      	mov	r2, r3
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800da6a:	4413      	add	r3, r2
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	f892 2546 	ldrb.w	r2, [r2, #1350]	; 0x546
 800da72:	4293      	cmp	r3, r2
 800da74:	dc59      	bgt.n	800db2a <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800da76:	e029      	b.n	800dacc <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800da78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800da7c:	f103 020d 	add.w	r2, r3, #13
 800da80:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800da82:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800da86:	440b      	add	r3, r1
 800da88:	6879      	ldr	r1, [r7, #4]
 800da8a:	440a      	add	r2, r1
 800da8c:	7b51      	ldrb	r1, [r2, #13]
 800da8e:	687a      	ldr	r2, [r7, #4]
 800da90:	4413      	add	r3, r2
 800da92:	460a      	mov	r2, r1
 800da94:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800da98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800da9c:	3301      	adds	r3, #1
 800da9e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800daa2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800daa6:	f103 020d 	add.w	r2, r3, #13
 800daaa:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800daac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dab0:	440b      	add	r3, r1
 800dab2:	6879      	ldr	r1, [r7, #4]
 800dab4:	440a      	add	r2, r1
 800dab6:	7b51      	ldrb	r1, [r2, #13]
 800dab8:	687a      	ldr	r2, [r7, #4]
 800daba:	4413      	add	r3, r2
 800dabc:	460a      	mov	r2, r1
 800dabe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										qty_reg++;
 800dac2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dac6:	3301      	adds	r3, #1
 800dac8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	7e5b      	ldrb	r3, [r3, #25]
 800dad0:	b29b      	uxth	r3, r3
 800dad2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d3ce      	bcc.n	800da78 <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	7e1a      	ldrb	r2, [r3, #24]
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	7dda      	ldrb	r2, [r3, #23]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	7d9a      	ldrb	r2, [r3, #22]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	7d5a      	ldrb	r2, [r3, #21]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x10;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2210      	movs	r2, #16
 800db06:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2201      	movs	r2, #1
 800db0e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2206      	movs	r2, #6
 800db16:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800db20:	1d9a      	adds	r2, r3, #6
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800db28:	e120      	b.n	800dd6c <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2202      	movs	r2, #2
 800db2e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x90;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2290      	movs	r2, #144	; 0x90
 800db36:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2201      	movs	r2, #1
 800db3e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2203      	movs	r2, #3
 800db46:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800db50:	1d9a      	adds	r2, r3, #6
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800db58:	2302      	movs	r3, #2
 800db5a:	e107      	b.n	800dd6c <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2203      	movs	r2, #3
 800db60:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x90;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2290      	movs	r2, #144	; 0x90
 800db68:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2201      	movs	r2, #1
 800db70:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2203      	movs	r2, #3
 800db78:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800db82:	1d9a      	adds	r2, r3, #6
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800db8a:	2303      	movs	r3, #3
 800db8c:	e0ee      	b.n	800dd6c <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2201      	movs	r2, #1
 800db92:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x90;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2290      	movs	r2, #144	; 0x90
 800db9a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2201      	movs	r2, #1
 800dba2:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2203      	movs	r2, #3
 800dbaa:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800dbb4:	1d9a      	adds	r2, r3, #6
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	e0d5      	b.n	800dd6c <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	7d1b      	ldrb	r3, [r3, #20]
 800dbcc:	3b80      	subs	r3, #128	; 0x80
 800dbce:	b2da      	uxtb	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	7cda      	ldrb	r2, [r3, #19]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
					m3->_MBUS_2SND[5]=0x03;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2203      	movs	r2, #3
 800dbe4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	7c5a      	ldrb	r2, [r3, #17]
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	7c1a      	ldrb	r2, [r3, #16]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	7bda      	ldrb	r2, [r3, #15]
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	7b9a      	ldrb	r2, [r3, #14]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	7b5a      	ldrb	r2, [r3, #13]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800dc20:	1d9a      	adds	r2, r3, #6
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
					return(1);
 800dc28:	2301      	movs	r3, #1
 800dc2a:	e09f      	b.n	800dd6c <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	e09d      	b.n	800dd6c <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	785b      	ldrb	r3, [r3, #1]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	f040 8099 	bne.w	800dd6c <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f103 020d 	add.w	r2, r3, #13
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800dc46:	4619      	mov	r1, r3
 800dc48:	4610      	mov	r0, r2
 800dc4a:	f7fe fda7 	bl	800c79c <ModBUS_Check>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	f000 808b 	beq.w	800dd6c <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f7fe fdbf 	bl	800c7da <ModBUS_Check_tid>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d04f      	beq.n	800dd02 <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	7d1b      	ldrb	r3, [r3, #20]
 800dc66:	2b03      	cmp	r3, #3
 800dc68:	d143      	bne.n	800dcf2 <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800dc7a:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800dc7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dc7e:	021b      	lsls	r3, r3, #8
 800dc80:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800dc88:	b29a      	uxth	r2, r3
 800dc8a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dc8c:	4313      	orrs	r3, r2
 800dc8e:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800dc96:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	643b      	str	r3, [r7, #64]	; 0x40
 800dc9e:	e022      	b.n	800dce6 <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800dca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dca2:	005b      	lsls	r3, r3, #1
 800dca4:	f103 0209 	add.w	r2, r3, #9
 800dca8:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800dcaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcac:	440b      	add	r3, r1
 800dcae:	005b      	lsls	r3, r3, #1
 800dcb0:	6879      	ldr	r1, [r7, #4]
 800dcb2:	440a      	add	r2, r1
 800dcb4:	7b51      	ldrb	r1, [r2, #13]
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	4413      	add	r3, r2
 800dcba:	460a      	mov	r2, r1
 800dcbc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800dcc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcc2:	3305      	adds	r3, #5
 800dcc4:	005a      	lsls	r2, r3, #1
 800dcc6:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800dcc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcca:	440b      	add	r3, r1
 800dccc:	005b      	lsls	r3, r3, #1
 800dcce:	3301      	adds	r3, #1
 800dcd0:	6879      	ldr	r1, [r7, #4]
 800dcd2:	440a      	add	r2, r1
 800dcd4:	7b51      	ldrb	r1, [r2, #13]
 800dcd6:	687a      	ldr	r2, [r7, #4]
 800dcd8:	4413      	add	r3, r2
 800dcda:	460a      	mov	r2, r1
 800dcdc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
						for (int i=0;i< qty; i++)
 800dce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dce2:	3301      	adds	r3, #1
 800dce4:	643b      	str	r3, [r7, #64]	; 0x40
 800dce6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800dcea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dcec:	429a      	cmp	r2, r3
 800dcee:	dbd7      	blt.n	800dca0 <ModBUS+0x1300>

						}


					}
					break;
 800dcf0:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	7c9b      	ldrb	r3, [r3, #18]
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	7d5b      	ldrb	r3, [r3, #21]
 800dcfc:	1ad3      	subs	r3, r2, r3
 800dcfe:	63bb      	str	r3, [r7, #56]	; 0x38
 800dd00:	e034      	b.n	800dd6c <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	7d1b      	ldrb	r3, [r3, #20]
 800dd06:	3b81      	subs	r3, #129	; 0x81
 800dd08:	2b15      	cmp	r3, #21
 800dd0a:	d82f      	bhi.n	800dd6c <ModBUS+0x13cc>
 800dd0c:	a201      	add	r2, pc, #4	; (adr r2, 800dd14 <ModBUS+0x1374>)
 800dd0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd12:	bf00      	nop
 800dd14:	0800dd6d 	.word	0x0800dd6d
 800dd18:	0800dd6d 	.word	0x0800dd6d
 800dd1c:	0800dd6d 	.word	0x0800dd6d
 800dd20:	0800dd6d 	.word	0x0800dd6d
 800dd24:	0800dd6d 	.word	0x0800dd6d
 800dd28:	0800dd6d 	.word	0x0800dd6d
 800dd2c:	0800dd6d 	.word	0x0800dd6d
 800dd30:	0800dd6d 	.word	0x0800dd6d
 800dd34:	0800dd6d 	.word	0x0800dd6d
 800dd38:	0800dd6d 	.word	0x0800dd6d
 800dd3c:	0800dd6d 	.word	0x0800dd6d
 800dd40:	0800dd6d 	.word	0x0800dd6d
 800dd44:	0800dd6d 	.word	0x0800dd6d
 800dd48:	0800dd6d 	.word	0x0800dd6d
 800dd4c:	0800dd6d 	.word	0x0800dd6d
 800dd50:	0800dd6d 	.word	0x0800dd6d
 800dd54:	0800dd6d 	.word	0x0800dd6d
 800dd58:	0800dd6d 	.word	0x0800dd6d
 800dd5c:	0800dd6d 	.word	0x0800dd6d
 800dd60:	0800dd6d 	.word	0x0800dd6d
 800dd64:	0800dd6d 	.word	0x0800dd6d
 800dd68:	0800dd6d 	.word	0x0800dd6d
			}
		}
	}


}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3770      	adds	r7, #112	; 0x70
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <SPI_ETH>:

#include "ETH_W5100.h"


uint8_t  SPI_ETH(struct  W5100_SPI * x )
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af02      	add	r7, sp, #8
 800dd7a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6858      	ldr	r0, [r3, #4]
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	891b      	ldrh	r3, [r3, #8]
 800dd84:	2200      	movs	r2, #0
 800dd86:	4619      	mov	r1, r3
 800dd88:	f7f5 fc0c 	bl	80035a4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6818      	ldr	r0, [r3, #0]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f103 0114 	add.w	r1, r3, #20
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f103 0218 	add.w	r2, r3, #24
 800dd9c:	2364      	movs	r3, #100	; 0x64
 800dd9e:	9300      	str	r3, [sp, #0]
 800dda0:	2304      	movs	r3, #4
 800dda2:	f7f6 f914 	bl	8003fce <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6858      	ldr	r0, [r3, #4]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	891b      	ldrh	r3, [r3, #8]
 800ddae:	2201      	movs	r2, #1
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	f7f5 fbf7 	bl	80035a4 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	7edb      	ldrb	r3, [r3, #27]
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3708      	adds	r7, #8
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}

0800ddc2 <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5100_SPI * x, uint8_t addrh, uint8_t addrl, uint8_t op, uint8_t * data, uint8_t lnght)
{
 800ddc2:	b580      	push	{r7, lr}
 800ddc4:	b086      	sub	sp, #24
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	6078      	str	r0, [r7, #4]
 800ddca:	4608      	mov	r0, r1
 800ddcc:	4611      	mov	r1, r2
 800ddce:	461a      	mov	r2, r3
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	70fb      	strb	r3, [r7, #3]
 800ddd4:	460b      	mov	r3, r1
 800ddd6:	70bb      	strb	r3, [r7, #2]
 800ddd8:	4613      	mov	r3, r2
 800ddda:	707b      	strb	r3, [r7, #1]
 uint16_t res=0;
 800dddc:	2300      	movs	r3, #0
 800ddde:	82fb      	strh	r3, [r7, #22]

 x->TX[0]= op; //asigno lectura o escritura
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	787a      	ldrb	r2, [r7, #1]
 800dde4:	751a      	strb	r2, [r3, #20]
 x->TX[1]= addrh;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	78fa      	ldrb	r2, [r7, #3]
 800ddea:	755a      	strb	r2, [r3, #21]
 x->TX[2]= addrl;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	78ba      	ldrb	r2, [r7, #2]
 800ddf0:	759a      	strb	r2, [r3, #22]
 x->TX[3]=0x00;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	75da      	strb	r2, [r3, #23]
 if(op == SPI_WRITE)
 800ddf8:	787b      	ldrb	r3, [r7, #1]
 800ddfa:	2bf0      	cmp	r3, #240	; 0xf0
 800ddfc:	d11d      	bne.n	800de3a <SPI_ETH_REG+0x78>
 {
	 for(int i=0; i<(lnght); i++)
 800ddfe:	2300      	movs	r3, #0
 800de00:	613b      	str	r3, [r7, #16]
 800de02:	e013      	b.n	800de2c <SPI_ETH_REG+0x6a>
	 {
		x->TX[3]=data[i];
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	6a3a      	ldr	r2, [r7, #32]
 800de08:	4413      	add	r3, r2
 800de0a:	781a      	ldrb	r2, [r3, #0]
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f7ff ffaf 	bl	800dd74 <SPI_ETH>
 800de16:	4603      	mov	r3, r0
 800de18:	82fb      	strh	r3, [r7, #22]
		x->TX[2]++;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	7d9b      	ldrb	r3, [r3, #22]
 800de1e:	3301      	adds	r3, #1
 800de20:	b2da      	uxtb	r2, r3
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	759a      	strb	r2, [r3, #22]
	 for(int i=0; i<(lnght); i++)
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	3301      	adds	r3, #1
 800de2a:	613b      	str	r3, [r7, #16]
 800de2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800de30:	693a      	ldr	r2, [r7, #16]
 800de32:	429a      	cmp	r2, r3
 800de34:	dbe6      	blt.n	800de04 <SPI_ETH_REG+0x42>
	 }
	 return(res);
 800de36:	8afb      	ldrh	r3, [r7, #22]
 800de38:	e037      	b.n	800deaa <SPI_ETH_REG+0xe8>
 }
	 if(op == SPI_READ)
 800de3a:	787b      	ldrb	r3, [r7, #1]
 800de3c:	2b0f      	cmp	r3, #15
 800de3e:	d134      	bne.n	800deaa <SPI_ETH_REG+0xe8>
	 {
		 x->TX[3]=0x00;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2200      	movs	r2, #0
 800de44:	75da      	strb	r2, [r3, #23]
		 if (lnght==2)
 800de46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800de4a:	2b02      	cmp	r3, #2
 800de4c:	d120      	bne.n	800de90 <SPI_ETH_REG+0xce>
		{
		for(int i=0; i<(lnght); i++)
 800de4e:	2300      	movs	r3, #0
 800de50:	60fb      	str	r3, [r7, #12]
 800de52:	e016      	b.n	800de82 <SPI_ETH_REG+0xc0>
			{
			res|=SPI_ETH(x);
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f7ff ff8d 	bl	800dd74 <SPI_ETH>
 800de5a:	4603      	mov	r3, r0
 800de5c:	b29a      	uxth	r2, r3
 800de5e:	8afb      	ldrh	r3, [r7, #22]
 800de60:	4313      	orrs	r3, r2
 800de62:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	7d9b      	ldrb	r3, [r3, #22]
 800de68:	3301      	adds	r3, #1
 800de6a:	b2da      	uxtb	r2, r3
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	759a      	strb	r2, [r3, #22]
			if (i==0)res=res<<8;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d102      	bne.n	800de7c <SPI_ETH_REG+0xba>
 800de76:	8afb      	ldrh	r3, [r7, #22]
 800de78:	021b      	lsls	r3, r3, #8
 800de7a:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	3301      	adds	r3, #1
 800de80:	60fb      	str	r3, [r7, #12]
 800de82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800de86:	68fa      	ldr	r2, [r7, #12]
 800de88:	429a      	cmp	r2, r3
 800de8a:	dbe3      	blt.n	800de54 <SPI_ETH_REG+0x92>
			}
		 return(res);
 800de8c:	8afb      	ldrh	r3, [r7, #22]
 800de8e:	e00c      	b.n	800deaa <SPI_ETH_REG+0xe8>
		}else
		{
			res=SPI_ETH(x);
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f7ff ff6f 	bl	800dd74 <SPI_ETH>
 800de96:	4603      	mov	r3, r0
 800de98:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	7d9b      	ldrb	r3, [r3, #22]
 800de9e:	3301      	adds	r3, #1
 800dea0:	b2da      	uxtb	r2, r3
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	759a      	strb	r2, [r3, #22]
			return(res);
 800dea6:	8afb      	ldrh	r3, [r7, #22]
 800dea8:	e7ff      	b.n	800deaa <SPI_ETH_REG+0xe8>
		}
 	 }
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3718      	adds	r7, #24
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}

0800deb2 <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5100_SPI * x, uint16_t addr, uint16_t  data)
{
 800deb2:	b580      	push	{r7, lr}
 800deb4:	b086      	sub	sp, #24
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	6078      	str	r0, [r7, #4]
 800deba:	460b      	mov	r3, r1
 800debc:	807b      	strh	r3, [r7, #2]
 800debe:	4613      	mov	r3, r2
 800dec0:	803b      	strh	r3, [r7, #0]
 uint16_t res=0;
 800dec2:	2300      	movs	r3, #0
 800dec4:	82fb      	strh	r3, [r7, #22]
 uint8_t num[2];

 x->TX[0]= SPI_WRITE; //asigno lectura o escritura
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	22f0      	movs	r2, #240	; 0xf0
 800deca:	751a      	strb	r2, [r3, #20]

 num[1] = data & 0x00FF ;
 800decc:	883b      	ldrh	r3, [r7, #0]
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	737b      	strb	r3, [r7, #13]
 num[0] = (data & 0xFF00)>>8 ;
 800ded2:	883b      	ldrh	r3, [r7, #0]
 800ded4:	0a1b      	lsrs	r3, r3, #8
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	b2db      	uxtb	r3, r3
 800deda:	733b      	strb	r3, [r7, #12]

	 for(int i=0; i<(2); i++)
 800dedc:	2300      	movs	r3, #0
 800dede:	613b      	str	r3, [r7, #16]
 800dee0:	e01b      	b.n	800df1a <SPI_ETH_WR_REG_16+0x68>
	 {
		x->TX[2]= addr & 0x00FF;
 800dee2:	887b      	ldrh	r3, [r7, #2]
 800dee4:	b2da      	uxtb	r2, r3
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	759a      	strb	r2, [r3, #22]
		x->TX[1]=(addr & 0xFF00)>>8;
 800deea:	887b      	ldrh	r3, [r7, #2]
 800deec:	0a1b      	lsrs	r3, r3, #8
 800deee:	b29b      	uxth	r3, r3
 800def0:	b2da      	uxtb	r2, r3
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	755a      	strb	r2, [r3, #21]
		addr++;
 800def6:	887b      	ldrh	r3, [r7, #2]
 800def8:	3301      	adds	r3, #1
 800defa:	807b      	strh	r3, [r7, #2]
		x->TX[3]=num[i];
 800defc:	f107 020c 	add.w	r2, r7, #12
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	4413      	add	r3, r2
 800df04:	781a      	ldrb	r2, [r3, #0]
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f7ff ff32 	bl	800dd74 <SPI_ETH>
 800df10:	4603      	mov	r3, r0
 800df12:	82fb      	strh	r3, [r7, #22]
	 for(int i=0; i<(2); i++)
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	3301      	adds	r3, #1
 800df18:	613b      	str	r3, [r7, #16]
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	dde0      	ble.n	800dee2 <SPI_ETH_WR_REG_16+0x30>
	 }
	 return(res);
 800df20:	8afb      	ldrh	r3, [r7, #22]
}
 800df22:	4618      	mov	r0, r3
 800df24:	3718      	adds	r7, #24
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}

0800df2a <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800df2a:	b590      	push	{r4, r7, lr}
 800df2c:	b087      	sub	sp, #28
 800df2e:	af00      	add	r7, sp, #0
 800df30:	60f8      	str	r0, [r7, #12]
 800df32:	607a      	str	r2, [r7, #4]
 800df34:	461a      	mov	r2, r3
 800df36:	460b      	mov	r3, r1
 800df38:	817b      	strh	r3, [r7, #10]
 800df3a:	4613      	mov	r3, r2
 800df3c:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0x0F; //read operation
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	220f      	movs	r2, #15
 800df42:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800df44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800df46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df4a:	d226      	bcs.n	800df9a <SPI_ETH_RD_RCV_REG_16+0x70>
	{
			x->TX[3]=0x00;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2200      	movs	r2, #0
 800df50:	75da      	strb	r2, [r3, #23]
			for(int i=0; i<(lnght); i++)
 800df52:	2300      	movs	r3, #0
 800df54:	617b      	str	r3, [r7, #20]
 800df56:	e01a      	b.n	800df8e <SPI_ETH_RD_RCV_REG_16+0x64>
				{
				x->TX[2] = addr & 0x00FF;
 800df58:	897b      	ldrh	r3, [r7, #10]
 800df5a:	b2da      	uxtb	r2, r3
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800df60:	897b      	ldrh	r3, [r7, #10]
 800df62:	0a1b      	lsrs	r3, r3, #8
 800df64:	b29b      	uxth	r3, r3
 800df66:	b2da      	uxtb	r2, r3
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	755a      	strb	r2, [r3, #21]
				data[i+offset]=SPI_ETH(x);
 800df6c:	893a      	ldrh	r2, [r7, #8]
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	4413      	add	r3, r2
 800df72:	461a      	mov	r2, r3
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	189c      	adds	r4, r3, r2
 800df78:	68f8      	ldr	r0, [r7, #12]
 800df7a:	f7ff fefb 	bl	800dd74 <SPI_ETH>
 800df7e:	4603      	mov	r3, r0
 800df80:	7023      	strb	r3, [r4, #0]
				addr++;
 800df82:	897b      	ldrh	r3, [r7, #10]
 800df84:	3301      	adds	r3, #1
 800df86:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	3301      	adds	r3, #1
 800df8c:	617b      	str	r3, [r7, #20]
 800df8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800df90:	697a      	ldr	r2, [r7, #20]
 800df92:	429a      	cmp	r2, r3
 800df94:	dbe0      	blt.n	800df58 <SPI_ETH_RD_RCV_REG_16+0x2e>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800df96:	2300      	movs	r3, #0
 800df98:	e000      	b.n	800df9c <SPI_ETH_RD_RCV_REG_16+0x72>
	}
	else
	{
	return(1);
 800df9a:	2301      	movs	r3, #1
	}
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	371c      	adds	r7, #28
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd90      	pop	{r4, r7, pc}

0800dfa4 <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b086      	sub	sp, #24
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	60f8      	str	r0, [r7, #12]
 800dfac:	607a      	str	r2, [r7, #4]
 800dfae:	461a      	mov	r2, r3
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	817b      	strh	r3, [r7, #10]
 800dfb4:	4613      	mov	r3, r2
 800dfb6:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0xF0; //write operation
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	22f0      	movs	r2, #240	; 0xf0
 800dfbc:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800dfbe:	8c3b      	ldrh	r3, [r7, #32]
 800dfc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dfc4:	d223      	bcs.n	800e00e <SPI_ETH_WR_TX_REG_16+0x6a>
	{

			for(int i=0; i<(lnght); i++)
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	617b      	str	r3, [r7, #20]
 800dfca:	e01a      	b.n	800e002 <SPI_ETH_WR_TX_REG_16+0x5e>
				{
				x->TX[2] = addr & 0x00FF;
 800dfcc:	897b      	ldrh	r3, [r7, #10]
 800dfce:	b2da      	uxtb	r2, r3
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800dfd4:	897b      	ldrh	r3, [r7, #10]
 800dfd6:	0a1b      	lsrs	r3, r3, #8
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	b2da      	uxtb	r2, r3
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	755a      	strb	r2, [r3, #21]
				x->TX[3]= x->data[i+offset];
 800dfe0:	893a      	ldrh	r2, [r7, #8]
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	4413      	add	r3, r2
 800dfe6:	68fa      	ldr	r2, [r7, #12]
 800dfe8:	4413      	add	r3, r2
 800dfea:	7f1a      	ldrb	r2, [r3, #28]
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	75da      	strb	r2, [r3, #23]
				SPI_ETH(x);
 800dff0:	68f8      	ldr	r0, [r7, #12]
 800dff2:	f7ff febf 	bl	800dd74 <SPI_ETH>
				addr++;
 800dff6:	897b      	ldrh	r3, [r7, #10]
 800dff8:	3301      	adds	r3, #1
 800dffa:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	3301      	adds	r3, #1
 800e000:	617b      	str	r3, [r7, #20]
 800e002:	8c3b      	ldrh	r3, [r7, #32]
 800e004:	697a      	ldr	r2, [r7, #20]
 800e006:	429a      	cmp	r2, r3
 800e008:	dbe0      	blt.n	800dfcc <SPI_ETH_WR_TX_REG_16+0x28>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800e00a:	2300      	movs	r3, #0
 800e00c:	e000      	b.n	800e010 <SPI_ETH_WR_TX_REG_16+0x6c>
	}
	else
	{
	return(1);
 800e00e:	2301      	movs	r3, #1
	}
}
 800e010:	4618      	mov	r0, r3
 800e012:	3718      	adds	r7, #24
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b082      	sub	sp, #8
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	460b      	mov	r3, r1
 800e022:	70fb      	strb	r3, [r7, #3]
 800e024:	4613      	mov	r3, r2
 800e026:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	22f0      	movs	r2, #240	; 0xf0
 800e02c:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_CR_ADDR_BASEH + s;
 800e02e:	78fb      	ldrb	r3, [r7, #3]
 800e030:	3304      	adds	r3, #4
 800e032:	b2da      	uxtb	r2, r3
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_CR_ADDR_BASEL ;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2201      	movs	r2, #1
 800e03c:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	78ba      	ldrb	r2, [r7, #2]
 800e042:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f7ff fe95 	bl	800dd74 <SPI_ETH>
}
 800e04a:	bf00      	nop
 800e04c:	4618      	mov	r0, r3
 800e04e:	3708      	adds	r7, #8
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	460b      	mov	r3, r1
 800e05e:	70fb      	strb	r3, [r7, #3]
 800e060:	4613      	mov	r3, r2
 800e062:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	22f0      	movs	r2, #240	; 0xf0
 800e068:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_MR_ADDR_BASEH + s;
 800e06a:	78fb      	ldrb	r3, [r7, #3]
 800e06c:	3304      	adds	r3, #4
 800e06e:	b2da      	uxtb	r2, r3
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_MR_ADDR_BASEL ;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2200      	movs	r2, #0
 800e078:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	78ba      	ldrb	r2, [r7, #2]
 800e07e:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f7ff fe77 	bl	800dd74 <SPI_ETH>
}
 800e086:	bf00      	nop
 800e088:	4618      	mov	r0, r3
 800e08a:	3708      	adds	r7, #8
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <eth_init>:


uint8_t eth_init(struct W5100_SPI * ETH)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b084      	sub	sp, #16
 800e094:	af02      	add	r7, sp, #8
 800e096:	6078      	str	r0, [r7, #4]
	 SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e09e:	331c      	adds	r3, #28
 800e0a0:	2204      	movs	r2, #4
 800e0a2:	9201      	str	r2, [sp, #4]
 800e0a4:	9300      	str	r3, [sp, #0]
 800e0a6:	23f0      	movs	r3, #240	; 0xf0
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	2100      	movs	r1, #0
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f7ff fe88 	bl	800ddc2 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-GATEWAY SET\r\n",strlen("\r\nETH-W5100-GATEWAY SET\r\n"));									//same for server and client
 800e0b2:	2119      	movs	r1, #25
 800e0b4:	482d      	ldr	r0, [pc, #180]	; (800e16c <eth_init+0xdc>)
 800e0b6:	f7f3 fac9 	bl	800164c <ITM0_Write>
	 SPI_ETH_REG(ETH, SUBR_ADDR_BASEH,SUBR_ADDR_BASEL,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e0c0:	2204      	movs	r2, #4
 800e0c2:	9201      	str	r2, [sp, #4]
 800e0c4:	9300      	str	r3, [sp, #0]
 800e0c6:	23f0      	movs	r3, #240	; 0xf0
 800e0c8:	2205      	movs	r2, #5
 800e0ca:	2100      	movs	r1, #0
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f7ff fe78 	bl	800ddc2 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SUBNET SET\r\n",strlen("\r\nETH-W5100-SUBNET SET"));											//same for server and client
 800e0d2:	2116      	movs	r1, #22
 800e0d4:	4826      	ldr	r0, [pc, #152]	; (800e170 <eth_init+0xe0>)
 800e0d6:	f7f3 fab9 	bl	800164c <ITM0_Write>
	 SPI_ETH_REG(ETH, SHAR_ADDR_BASEH,SHAR_ADDR_BASEL,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e0e0:	3304      	adds	r3, #4
 800e0e2:	2206      	movs	r2, #6
 800e0e4:	9201      	str	r2, [sp, #4]
 800e0e6:	9300      	str	r3, [sp, #0]
 800e0e8:	23f0      	movs	r3, #240	; 0xf0
 800e0ea:	2209      	movs	r2, #9
 800e0ec:	2100      	movs	r1, #0
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f7ff fe67 	bl	800ddc2 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-MAC SET\r\n",strlen("\r\nETH-W5100-MAC SET"));												//same for server and client
 800e0f4:	2113      	movs	r1, #19
 800e0f6:	481f      	ldr	r0, [pc, #124]	; (800e174 <eth_init+0xe4>)
 800e0f8:	f7f3 faa8 	bl	800164c <ITM0_Write>
	 SPI_ETH_REG(ETH, SIPR_ADDR_BASEH,SIPR_ADDR_BASEL,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e102:	330a      	adds	r3, #10
 800e104:	2204      	movs	r2, #4
 800e106:	9201      	str	r2, [sp, #4]
 800e108:	9300      	str	r3, [sp, #0]
 800e10a:	23f0      	movs	r3, #240	; 0xf0
 800e10c:	220f      	movs	r2, #15
 800e10e:	2100      	movs	r1, #0
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f7ff fe56 	bl	800ddc2 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-IP SET\r\n",strlen("\r\nETH-W5100-IP SET"));													//same for server and client
 800e116:	2112      	movs	r1, #18
 800e118:	4817      	ldr	r0, [pc, #92]	; (800e178 <eth_init+0xe8>)
 800e11a:	f7f3 fa97 	bl	800164c <ITM0_Write>
	 SPI_ETH_REG(ETH, RMSR_ADDR_BASEH,RMSR_ADDR_BASEL,SPI_WRITE, &ETH->RMSR,1);												//same for server and client
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e124:	330e      	adds	r3, #14
 800e126:	2201      	movs	r2, #1
 800e128:	9201      	str	r2, [sp, #4]
 800e12a:	9300      	str	r3, [sp, #0]
 800e12c:	23f0      	movs	r3, #240	; 0xf0
 800e12e:	221a      	movs	r2, #26
 800e130:	2100      	movs	r1, #0
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f7ff fe45 	bl	800ddc2 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n")); 	//same for server and client
 800e138:	2128      	movs	r1, #40	; 0x28
 800e13a:	4810      	ldr	r0, [pc, #64]	; (800e17c <eth_init+0xec>)
 800e13c:	f7f3 fa86 	bl	800164c <ITM0_Write>
	 SPI_ETH_REG(ETH, TMSR_ADDR_BASEH,TMSR_ADDR_BASEL,SPI_WRITE, &ETH->TMSR,1);												//same for server and client
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e146:	330f      	adds	r3, #15
 800e148:	2201      	movs	r2, #1
 800e14a:	9201      	str	r2, [sp, #4]
 800e14c:	9300      	str	r3, [sp, #0]
 800e14e:	23f0      	movs	r3, #240	; 0xf0
 800e150:	221b      	movs	r2, #27
 800e152:	2100      	movs	r1, #0
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f7ff fe34 	bl	800ddc2 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n"));		//same for server and client
 800e15a:	2128      	movs	r1, #40	; 0x28
 800e15c:	4808      	ldr	r0, [pc, #32]	; (800e180 <eth_init+0xf0>)
 800e15e:	f7f3 fa75 	bl	800164c <ITM0_Write>

}
 800e162:	bf00      	nop
 800e164:	4618      	mov	r0, r3
 800e166:	3708      	adds	r7, #8
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	08010aa0 	.word	0x08010aa0
 800e170:	08010abc 	.word	0x08010abc
 800e174:	08010ad8 	.word	0x08010ad8
 800e178:	08010af0 	.word	0x08010af0
 800e17c:	08010b08 	.word	0x08010b08
 800e180:	08010b34 	.word	0x08010b34

0800e184 <eth_socket_init>:

uint8_t eth_socket_init(struct W5100_SPI * ETH, uint8_t socket)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b084      	sub	sp, #16
 800e188:	af02      	add	r7, sp, #8
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	460b      	mov	r3, r1
 800e18e:	70fb      	strb	r3, [r7, #3]
	 eth_wr_SOCKET_MODE(ETH,socket, MODE_TCP);																				//same for server and client
 800e190:	78fb      	ldrb	r3, [r7, #3]
 800e192:	2201      	movs	r2, #1
 800e194:	4619      	mov	r1, r3
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f7ff ff5c 	bl	800e054 <eth_wr_SOCKET_MODE>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP SET"));									//same for server and client
 800e19c:	2119      	movs	r1, #25
 800e19e:	4830      	ldr	r0, [pc, #192]	; (800e260 <eth_socket_init+0xdc>)
 800e1a0:	f7f3 fa54 	bl	800164c <ITM0_Write>
	 SPI_ETH_REG(ETH, S0_PORT_ADDR_BASELH,S0_PORT_ADDR_BASELL,SPI_WRITE, ETH->S0_PORT,2);									//same for server and client
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e1aa:	331a      	adds	r3, #26
 800e1ac:	2202      	movs	r2, #2
 800e1ae:	9201      	str	r2, [sp, #4]
 800e1b0:	9300      	str	r3, [sp, #0]
 800e1b2:	23f0      	movs	r3, #240	; 0xf0
 800e1b4:	2204      	movs	r2, #4
 800e1b6:	2104      	movs	r1, #4
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f7ff fe02 	bl	800ddc2 <SPI_ETH_REG>

	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
 800e1be:	212c      	movs	r1, #44	; 0x2c
 800e1c0:	4828      	ldr	r0, [pc, #160]	; (800e264 <eth_socket_init+0xe0>)
 800e1c2:	f7f3 fa43 	bl	800164c <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x0C,SPI_WRITE, ETH->S0_DIPR,4);									// client
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e1cc:	331c      	adds	r3, #28
 800e1ce:	2204      	movs	r2, #4
 800e1d0:	9201      	str	r2, [sp, #4]
 800e1d2:	9300      	str	r3, [sp, #0]
 800e1d4:	23f0      	movs	r3, #240	; 0xf0
 800e1d6:	220c      	movs	r2, #12
 800e1d8:	2104      	movs	r1, #4
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f7ff fdf1 	bl	800ddc2 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 800e1e0:	212e      	movs	r1, #46	; 0x2e
 800e1e2:	4821      	ldr	r0, [pc, #132]	; (800e268 <eth_socket_init+0xe4>)
 800e1e4:	f7f3 fa32 	bl	800164c <ITM0_Write>
	 SPI_ETH_REG(ETH, 0x04,0x10,SPI_WRITE, ETH->S0_DPORT,2);									// client
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e1ee:	2202      	movs	r2, #2
 800e1f0:	9201      	str	r2, [sp, #4]
 800e1f2:	9300      	str	r3, [sp, #0]
 800e1f4:	23f0      	movs	r3, #240	; 0xf0
 800e1f6:	2210      	movs	r2, #16
 800e1f8:	2104      	movs	r1, #4
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f7ff fde1 	bl	800ddc2 <SPI_ETH_REG>


	 ITM0_Write("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 800e200:	2120      	movs	r1, #32
 800e202:	481a      	ldr	r0, [pc, #104]	; (800e26c <eth_socket_init+0xe8>)
 800e204:	f7f3 fa22 	bl	800164c <ITM0_Write>
	 eth_wr_SOCKET_CMD(ETH,socket, OPEN);																					//same for server and client
 800e208:	78fb      	ldrb	r3, [r7, #3]
 800e20a:	2201      	movs	r2, #1
 800e20c:	4619      	mov	r1, r3
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f7ff ff02 	bl	800e018 <eth_wr_SOCKET_CMD>
	 ITM0_Write("\r\nETH-W5100-OPEN SOCKET\r\n",strlen("\r\nETH-W5100-OPEN SOCKET\r\n"));									//same for server and client
 800e214:	2119      	movs	r1, #25
 800e216:	4816      	ldr	r0, [pc, #88]	; (800e270 <eth_socket_init+0xec>)
 800e218:	f7f3 fa18 	bl	800164c <ITM0_Write>

	 if(ETH->S0_ENserver == 1)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e222:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e226:	2b01      	cmp	r3, #1
 800e228:	d10a      	bne.n	800e240 <eth_socket_init+0xbc>
	 {
		 eth_wr_SOCKET_CMD(ETH,socket, LISTEN);																				//only for server
 800e22a:	78fb      	ldrb	r3, [r7, #3]
 800e22c:	2202      	movs	r2, #2
 800e22e:	4619      	mov	r1, r3
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f7ff fef1 	bl	800e018 <eth_wr_SOCKET_CMD>
		 ITM0_Write("\r\nETH-W5100-LISTEN SOCKET\r\n",strlen("\r\nETH-W5100-LISTEN SOCKET\r\n"));							//only for server
 800e236:	211b      	movs	r1, #27
 800e238:	480e      	ldr	r0, [pc, #56]	; (800e274 <eth_socket_init+0xf0>)
 800e23a:	f7f3 fa07 	bl	800164c <ITM0_Write>
 800e23e:	e009      	b.n	800e254 <eth_socket_init+0xd0>
	 }
	 else
	 {

		 	 eth_wr_SOCKET_CMD(ETH,socket, CONNECT);																				//only for server
 800e240:	78fb      	ldrb	r3, [r7, #3]
 800e242:	2204      	movs	r2, #4
 800e244:	4619      	mov	r1, r3
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f7ff fee6 	bl	800e018 <eth_wr_SOCKET_CMD>
			 ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));											//only fir server
 800e24c:	2115      	movs	r1, #21
 800e24e:	480a      	ldr	r0, [pc, #40]	; (800e278 <eth_socket_init+0xf4>)
 800e250:	f7f3 f9fc 	bl	800164c <ITM0_Write>
	 }
}
 800e254:	bf00      	nop
 800e256:	4618      	mov	r0, r3
 800e258:	3708      	adds	r7, #8
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	08010b60 	.word	0x08010b60
 800e264:	08010b7c 	.word	0x08010b7c
 800e268:	08010bac 	.word	0x08010bac
 800e26c:	08010bdc 	.word	0x08010bdc
 800e270:	08010c00 	.word	0x08010c00
 800e274:	08010c1c 	.word	0x08010c1c
 800e278:	08010c38 	.word	0x08010c38

0800e27c <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5100_SPI * y, uint8_t socket)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	460b      	mov	r3, r1
 800e286:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	220f      	movs	r2, #15
 800e28c:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_SR_ADDR_BASEH + socket;
 800e28e:	78fb      	ldrb	r3, [r7, #3]
 800e290:	3304      	adds	r3, #4
 800e292:	b2da      	uxtb	r2, r3
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_SR_ADDR_BASEL ;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2203      	movs	r2, #3
 800e29c:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f7ff fd65 	bl	800dd74 <SPI_ETH>
	return(y->RX[3]);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	7edb      	ldrb	r3, [r3, #27]
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3708      	adds	r7, #8
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}

0800e2b6 <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5100_SPI * y, uint8_t socket)
{
 800e2b6:	b580      	push	{r7, lr}
 800e2b8:	b082      	sub	sp, #8
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	6078      	str	r0, [r7, #4]
 800e2be:	460b      	mov	r3, r1
 800e2c0:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	220f      	movs	r2, #15
 800e2c6:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_CR_ADDR_BASEH + socket;
 800e2c8:	78fb      	ldrb	r3, [r7, #3]
 800e2ca:	3304      	adds	r3, #4
 800e2cc:	b2da      	uxtb	r2, r3
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_CR_ADDR_BASEL ;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f7ff fd48 	bl	800dd74 <SPI_ETH>
	return(y->RX[3]);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	7edb      	ldrb	r3, [r3, #27]
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3708      	adds	r7, #8
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}

0800e2f0 <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b08c      	sub	sp, #48	; 0x30
 800e2f4:	af02      	add	r7, sp, #8
 800e2f6:	60f8      	str	r0, [r7, #12]
 800e2f8:	607a      	str	r2, [r7, #4]
 800e2fa:	461a      	mov	r2, r3
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	72fb      	strb	r3, [r7, #11]
 800e300:	4613      	mov	r3, r2
 800e302:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e304:	2300      	movs	r3, #0
 800e306:	847b      	strh	r3, [r7, #34]	; 0x22
			 left_size=0,
 800e308:	2300      	movs	r3, #0
 800e30a:	843b      	strh	r3, [r7, #32]
			 upper_size=0,
 800e30c:	2300      	movs	r3, #0
 800e30e:	83fb      	strh	r3, [r7, #30]
			 destination_addr=0,
 800e310:	2300      	movs	r3, #0
 800e312:	83bb      	strh	r3, [r7, #28]
			 S0_RX_RD=0,
 800e314:	2300      	movs	r3, #0
 800e316:	837b      	strh	r3, [r7, #26]
			 S0_get_offset=0,
 800e318:	2300      	movs	r3, #0
 800e31a:	833b      	strh	r3, [r7, #24]
			 S0_get_start_address=0,
 800e31c:	2300      	movs	r3, #0
 800e31e:	82fb      	strh	r3, [r7, #22]
			 S0_mem_pointer=0,
 800e320:	2300      	movs	r3, #0
 800e322:	82bb      	strh	r3, [r7, #20]
			 RX_MASK=0,
 800e324:	2300      	movs	r3, #0
 800e326:	84fb      	strh	r3, [r7, #38]	; 0x26
			 RX_BASE=0;
 800e328:	2300      	movs	r3, #0
 800e32a:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t spi_Data[2];

	switch (socket)
 800e32c:	7afb      	ldrb	r3, [r7, #11]
 800e32e:	2b03      	cmp	r3, #3
 800e330:	d83e      	bhi.n	800e3b0 <eth_rd_SOCKET_DATA+0xc0>
 800e332:	a201      	add	r2, pc, #4	; (adr r2, 800e338 <eth_rd_SOCKET_DATA+0x48>)
 800e334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e338:	0800e349 	.word	0x0800e349
 800e33c:	0800e363 	.word	0x0800e363
 800e340:	0800e37d 	.word	0x0800e37d
 800e344:	0800e397 	.word	0x0800e397
	{
		case 0 :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e34e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e352:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e35a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e35e:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e360:	e033      	b.n	800e3ca <eth_rd_SOCKET_DATA+0xda>
		case 1 :
		{
			RX_MASK=ETH->gS1_RX_MASK;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e368:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800e36c:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS1_RX_BASE;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e374:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e378:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e37a:	e026      	b.n	800e3ca <eth_rd_SOCKET_DATA+0xda>
		case 2 :
		{
			RX_MASK=ETH->gS2_RX_MASK;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e386:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS2_RX_BASE;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e38e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e392:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e394:	e019      	b.n	800e3ca <eth_rd_SOCKET_DATA+0xda>
		case 3 :
		{
			RX_MASK=ETH->gS3_RX_MASK;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e39c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800e3a0:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS3_RX_BASE;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e3ac:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e3ae:	e00c      	b.n	800e3ca <eth_rd_SOCKET_DATA+0xda>
		default :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e3ba:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e3c6:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e3c8:	bf00      	nop
	}

	S0_RX_RD = SPI_ETH_REG(ETH, S0_RX_RD_ADDR_BASEHH + socket ,S0_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800e3ca:	7afb      	ldrb	r3, [r7, #11]
 800e3cc:	3304      	adds	r3, #4
 800e3ce:	b2d9      	uxtb	r1, r3
 800e3d0:	2302      	movs	r3, #2
 800e3d2:	9301      	str	r3, [sp, #4]
 800e3d4:	f107 0310 	add.w	r3, r7, #16
 800e3d8:	9300      	str	r3, [sp, #0]
 800e3da:	230f      	movs	r3, #15
 800e3dc:	2228      	movs	r2, #40	; 0x28
 800e3de:	68f8      	ldr	r0, [r7, #12]
 800e3e0:	f7ff fcef 	bl	800ddc2 <SPI_ETH_REG>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	837b      	strh	r3, [r7, #26]
	S0_get_offset = S0_RX_RD & RX_MASK;
 800e3e8:	8b7a      	ldrh	r2, [r7, #26]
 800e3ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e3ec:	4013      	ands	r3, r2
 800e3ee:	833b      	strh	r3, [r7, #24]
	S0_get_start_address  = RX_BASE + S0_get_offset;
 800e3f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e3f2:	8b3b      	ldrh	r3, [r7, #24]
 800e3f4:	4413      	add	r3, r2
 800e3f6:	82fb      	strh	r3, [r7, #22]
	if((S0_get_offset  + sizedata )>(RX_MASK + 1))
 800e3f8:	8b3a      	ldrh	r2, [r7, #24]
 800e3fa:	893b      	ldrh	r3, [r7, #8]
 800e3fc:	441a      	add	r2, r3
 800e3fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e400:	3301      	adds	r3, #1
 800e402:	429a      	cmp	r2, r3
 800e404:	dd2c      	ble.n	800e460 <eth_rd_SOCKET_DATA+0x170>
		{
			upper_size = (RX_MASK + 1) - S0_get_offset ;
 800e406:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e408:	8b3b      	ldrh	r3, [r7, #24]
 800e40a:	1ad3      	subs	r3, r2, r3
 800e40c:	b29b      	uxth	r3, r3
 800e40e:	3301      	adds	r3, #1
 800e410:	83fb      	strh	r3, [r7, #30]
			SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	f103 021c 	add.w	r2, r3, #28
 800e418:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e41a:	8af9      	ldrh	r1, [r7, #22]
 800e41c:	8bfb      	ldrh	r3, [r7, #30]
 800e41e:	9300      	str	r3, [sp, #0]
 800e420:	4603      	mov	r3, r0
 800e422:	68f8      	ldr	r0, [r7, #12]
 800e424:	f7ff fd81 	bl	800df2a <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800e428:	8bba      	ldrh	r2, [r7, #28]
 800e42a:	8bfb      	ldrh	r3, [r7, #30]
 800e42c:	4413      	add	r3, r2
 800e42e:	83bb      	strh	r3, [r7, #28]
			left_size=sizedata-upper_size;
 800e430:	893a      	ldrh	r2, [r7, #8]
 800e432:	8bfb      	ldrh	r3, [r7, #30]
 800e434:	1ad3      	subs	r3, r2, r3
 800e436:	843b      	strh	r3, [r7, #32]
			S0_bf_rcv_offset=upper_size;
 800e438:	8bfb      	ldrh	r3, [r7, #30]
 800e43a:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f103 021c 	add.w	r2, r3, #28
 800e442:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e444:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e446:	8c3b      	ldrh	r3, [r7, #32]
 800e448:	9300      	str	r3, [sp, #0]
 800e44a:	4603      	mov	r3, r0
 800e44c:	68f8      	ldr	r0, [r7, #12]
 800e44e:	f7ff fd6c 	bl	800df2a <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S0_RX_RD + sizedata;
 800e452:	8b7a      	ldrh	r2, [r7, #26]
 800e454:	893b      	ldrh	r3, [r7, #8]
 800e456:	4413      	add	r3, r2
 800e458:	b29a      	uxth	r2, r3
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	801a      	strh	r2, [r3, #0]
 800e45e:	e010      	b.n	800e482 <eth_rd_SOCKET_DATA+0x192>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, sizedata);
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	f103 021c 	add.w	r2, r3, #28
 800e466:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e468:	8af9      	ldrh	r1, [r7, #22]
 800e46a:	893b      	ldrh	r3, [r7, #8]
 800e46c:	9300      	str	r3, [sp, #0]
 800e46e:	4603      	mov	r3, r0
 800e470:	68f8      	ldr	r0, [r7, #12]
 800e472:	f7ff fd5a 	bl	800df2a <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S0_RX_RD + sizedata;
 800e476:	8b7a      	ldrh	r2, [r7, #26]
 800e478:	893b      	ldrh	r3, [r7, #8]
 800e47a:	4413      	add	r3, r2
 800e47c:	b29a      	uxth	r2, r3
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	b29b      	uxth	r3, r3
}
 800e486:	4618      	mov	r0, r3
 800e488:	3728      	adds	r7, #40	; 0x28
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop

0800e490 <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b08c      	sub	sp, #48	; 0x30
 800e494:	af02      	add	r7, sp, #8
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	607a      	str	r2, [r7, #4]
 800e49a:	461a      	mov	r2, r3
 800e49c:	460b      	mov	r3, r1
 800e49e:	72fb      	strb	r3, [r7, #11]
 800e4a0:	4613      	mov	r3, r2
 800e4a2:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	843b      	strh	r3, [r7, #32]
			 left_size=0,
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	83fb      	strh	r3, [r7, #30]
			 upper_size=0,
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	83bb      	strh	r3, [r7, #28]
			 source_addr=0,
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	837b      	strh	r3, [r7, #26]
			 Sn_TX_WR=0,
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	833b      	strh	r3, [r7, #24]
			 get_offset=0,
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	82fb      	strh	r3, [r7, #22]
			 get_free_size=0,
 800e4bc:	2300      	movs	r3, #0
 800e4be:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	82bb      	strh	r3, [r7, #20]
			 S0_mem_pointer=0,
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	827b      	strh	r3, [r7, #18]
			 TX_MASK=0,
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	84bb      	strh	r3, [r7, #36]	; 0x24
			 TX_BASE=0;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t spi_Data[2];

	switch (socket)
 800e4d0:	7afb      	ldrb	r3, [r7, #11]
 800e4d2:	2b03      	cmp	r3, #3
 800e4d4:	d83e      	bhi.n	800e554 <eth_wr_SOCKET_DATA+0xc4>
 800e4d6:	a201      	add	r2, pc, #4	; (adr r2, 800e4dc <eth_wr_SOCKET_DATA+0x4c>)
 800e4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4dc:	0800e4ed 	.word	0x0800e4ed
 800e4e0:	0800e507 	.word	0x0800e507
 800e4e4:	0800e521 	.word	0x0800e521
 800e4e8:	0800e53b 	.word	0x0800e53b
	{
		case 0 :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e4f6:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e502:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e504:	e033      	b.n	800e56e <eth_wr_SOCKET_DATA+0xde>
		case 1 :
		{
			TX_MASK=ETH->gS1_TX_MASK;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e50c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e510:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS1_TX_BASE;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e518:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e51c:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e51e:	e026      	b.n	800e56e <eth_wr_SOCKET_DATA+0xde>
		case 2 :
		{
			TX_MASK=ETH->gS2_TX_MASK;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e526:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e52a:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS2_TX_BASE;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e532:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e536:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e538:	e019      	b.n	800e56e <eth_wr_SOCKET_DATA+0xde>
		case 3 :
		{
			TX_MASK=ETH->gS3_TX_MASK;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e540:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e544:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS3_TX_BASE;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e54c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e550:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e552:	e00c      	b.n	800e56e <eth_wr_SOCKET_DATA+0xde>
		default :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e55a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e55e:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e566:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e56a:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e56c:	bf00      	nop
	}

	while(get_free_size<send_size)
 800e56e:	e00e      	b.n	800e58e <eth_wr_SOCKET_DATA+0xfe>
			{
				get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S0_TX_FSR	=   0x420,
 800e570:	7afb      	ldrb	r3, [r7, #11]
 800e572:	3304      	adds	r3, #4
 800e574:	b2d9      	uxtb	r1, r3
 800e576:	2302      	movs	r3, #2
 800e578:	9301      	str	r3, [sp, #4]
 800e57a:	f107 0310 	add.w	r3, r7, #16
 800e57e:	9300      	str	r3, [sp, #0]
 800e580:	230f      	movs	r3, #15
 800e582:	2220      	movs	r2, #32
 800e584:	68f8      	ldr	r0, [r7, #12]
 800e586:	f7ff fc1c 	bl	800ddc2 <SPI_ETH_REG>
 800e58a:	4603      	mov	r3, r0
 800e58c:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800e58e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e590:	893b      	ldrh	r3, [r7, #8]
 800e592:	429a      	cmp	r2, r3
 800e594:	d3ec      	bcc.n	800e570 <eth_wr_SOCKET_DATA+0xe0>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S0_TX_RD =   0x424,
 800e596:	7afb      	ldrb	r3, [r7, #11]
 800e598:	3304      	adds	r3, #4
 800e59a:	b2d9      	uxtb	r1, r3
 800e59c:	2302      	movs	r3, #2
 800e59e:	9301      	str	r3, [sp, #4]
 800e5a0:	f107 0310 	add.w	r3, r7, #16
 800e5a4:	9300      	str	r3, [sp, #0]
 800e5a6:	230f      	movs	r3, #15
 800e5a8:	2224      	movs	r2, #36	; 0x24
 800e5aa:	68f8      	ldr	r0, [r7, #12]
 800e5ac:	f7ff fc09 	bl	800ddc2 <SPI_ETH_REG>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	833b      	strh	r3, [r7, #24]
				get_offset= Sn_TX_WR & TX_MASK;
 800e5b4:	8b3a      	ldrh	r2, [r7, #24]
 800e5b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5b8:	4013      	ands	r3, r2
 800e5ba:	82fb      	strh	r3, [r7, #22]
				get_start_address=TX_BASE + get_offset;
 800e5bc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e5be:	8afb      	ldrh	r3, [r7, #22]
 800e5c0:	4413      	add	r3, r2
 800e5c2:	82bb      	strh	r3, [r7, #20]

				if((get_offset + send_size)>(TX_MASK + 1))
 800e5c4:	8afa      	ldrh	r2, [r7, #22]
 800e5c6:	893b      	ldrh	r3, [r7, #8]
 800e5c8:	441a      	add	r2, r3
 800e5ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	dd2c      	ble.n	800e62c <eth_wr_SOCKET_DATA+0x19c>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800e5d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e5d4:	8afb      	ldrh	r3, [r7, #22]
 800e5d6:	1ad3      	subs	r3, r2, r3
 800e5d8:	b29b      	uxth	r3, r3
 800e5da:	3301      	adds	r3, #1
 800e5dc:	83bb      	strh	r3, [r7, #28]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	f103 021c 	add.w	r2, r3, #28
 800e5e4:	8c38      	ldrh	r0, [r7, #32]
 800e5e6:	8ab9      	ldrh	r1, [r7, #20]
 800e5e8:	8bbb      	ldrh	r3, [r7, #28]
 800e5ea:	9300      	str	r3, [sp, #0]
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	68f8      	ldr	r0, [r7, #12]
 800e5f0:	f7ff fcd8 	bl	800dfa4 <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800e5f4:	8b7a      	ldrh	r2, [r7, #26]
 800e5f6:	8bbb      	ldrh	r3, [r7, #28]
 800e5f8:	4413      	add	r3, r2
 800e5fa:	837b      	strh	r3, [r7, #26]
						left_size=send_size-upper_size;
 800e5fc:	893a      	ldrh	r2, [r7, #8]
 800e5fe:	8bbb      	ldrh	r3, [r7, #28]
 800e600:	1ad3      	subs	r3, r2, r3
 800e602:	83fb      	strh	r3, [r7, #30]
						S0_bf_rcv_offset=upper_size;
 800e604:	8bbb      	ldrh	r3, [r7, #28]
 800e606:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f103 021c 	add.w	r2, r3, #28
 800e60e:	8c38      	ldrh	r0, [r7, #32]
 800e610:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800e612:	8bfb      	ldrh	r3, [r7, #30]
 800e614:	9300      	str	r3, [sp, #0]
 800e616:	4603      	mov	r3, r0
 800e618:	68f8      	ldr	r0, [r7, #12]
 800e61a:	f7ff fcc3 	bl	800dfa4 <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800e61e:	8b3a      	ldrh	r2, [r7, #24]
 800e620:	893b      	ldrh	r3, [r7, #8]
 800e622:	4413      	add	r3, r2
 800e624:	b29a      	uxth	r2, r3
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	801a      	strh	r2, [r3, #0]
 800e62a:	e010      	b.n	800e64e <eth_wr_SOCKET_DATA+0x1be>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, send_size);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f103 021c 	add.w	r2, r3, #28
 800e632:	8c38      	ldrh	r0, [r7, #32]
 800e634:	8ab9      	ldrh	r1, [r7, #20]
 800e636:	893b      	ldrh	r3, [r7, #8]
 800e638:	9300      	str	r3, [sp, #0]
 800e63a:	4603      	mov	r3, r0
 800e63c:	68f8      	ldr	r0, [r7, #12]
 800e63e:	f7ff fcb1 	bl	800dfa4 <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800e642:	8b3a      	ldrh	r2, [r7, #24]
 800e644:	893b      	ldrh	r3, [r7, #8]
 800e646:	4413      	add	r3, r2
 800e648:	b29a      	uxth	r2, r3
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	801a      	strh	r2, [r3, #0]
					}

}
 800e64e:	bf00      	nop
 800e650:	4618      	mov	r0, r3
 800e652:	3728      	adds	r7, #40	; 0x28
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int tf)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b090      	sub	sp, #64	; 0x40
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	60b9      	str	r1, [r7, #8]
 800e662:	607a      	str	r2, [r7, #4]
 800e664:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800e666:	2300      	movs	r3, #0
 800e668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e66a:	2300      	movs	r3, #0
 800e66c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e66e:	2300      	movs	r3, #0
 800e670:	637b      	str	r3, [r7, #52]	; 0x34
 800e672:	2300      	movs	r3, #0
 800e674:	633b      	str	r3, [r7, #48]	; 0x30
 800e676:	2300      	movs	r3, #0
 800e678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e67a:	2300      	movs	r3, #0
 800e67c:	623b      	str	r3, [r7, #32]
 800e67e:	2300      	movs	r3, #0
 800e680:	61fb      	str	r3, [r7, #28]
 800e682:	2300      	movs	r3, #0
 800e684:	61bb      	str	r3, [r7, #24]
 800e686:	2300      	movs	r3, #0
 800e688:	62bb      	str	r3, [r7, #40]	; 0x28
 800e68a:	2300      	movs	r3, #0
 800e68c:	617b      	str	r3, [r7, #20]
 800e68e:	2300      	movs	r3, #0
 800e690:	627b      	str	r3, [r7, #36]	; 0x24
 800e692:	2300      	movs	r3, #0
 800e694:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	623b      	str	r3, [r7, #32]
	lngb=*bn;
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	61fb      	str	r3, [r7, #28]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800e6a2:	6a3a      	ldr	r2, [r7, #32]
 800e6a4:	69fb      	ldr	r3, [r7, #28]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	f2c0 82fe 	blt.w	800eca8 <FT_String_ND+0x650>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800e6b0:	e00c      	b.n	800e6cc <FT_String_ND+0x74>
							{
								n++;
 800e6b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800e6b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e6ba:	69fb      	ldr	r3, [r7, #28]
 800e6bc:	441a      	add	r2, r3
 800e6be:	6a3b      	ldr	r3, [r7, #32]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	429a      	cmp	r2, r3
 800e6c4:	dd02      	ble.n	800e6cc <FT_String_ND+0x74>
								{
									estado=0;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800e6ca:	e009      	b.n	800e6e0 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800e6cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6ce:	68fa      	ldr	r2, [r7, #12]
 800e6d0:	4413      	add	r3, r2
 800e6d2:	781a      	ldrb	r2, [r3, #0]
 800e6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d6:	6879      	ldr	r1, [r7, #4]
 800e6d8:	440b      	add	r3, r1
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d1e8      	bne.n	800e6b2 <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800e6e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6e2:	3301      	adds	r3, #1
 800e6e4:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800e6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800e6ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6ee:	69fb      	ldr	r3, [r7, #28]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d108      	bne.n	800e706 <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800e6f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e6f6:	69fb      	ldr	r3, [r7, #28]
 800e6f8:	1ad3      	subs	r3, r2, r3
 800e6fa:	1c5a      	adds	r2, r3, #1
 800e6fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6fe:	601a      	str	r2, [r3, #0]
									estado=1;
 800e700:	2301      	movs	r3, #1
 800e702:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800e704:	e010      	b.n	800e728 <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800e706:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e708:	69fb      	ldr	r3, [r7, #28]
 800e70a:	429a      	cmp	r2, r3
 800e70c:	dd02      	ble.n	800e714 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800e70e:	2300      	movs	r3, #0
 800e710:	627b      	str	r3, [r7, #36]	; 0x24
									 break;
 800e712:	e009      	b.n	800e728 <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800e714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e716:	68fa      	ldr	r2, [r7, #12]
 800e718:	4413      	add	r3, r2
 800e71a:	781a      	ldrb	r2, [r3, #0]
 800e71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71e:	6879      	ldr	r1, [r7, #4]
 800e720:	440b      	add	r3, r1
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	429a      	cmp	r2, r3
 800e726:	d0db      	beq.n	800e6e0 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800e728:	69fb      	ldr	r3, [r7, #28]
 800e72a:	1e5a      	subs	r2, r3, #1
 800e72c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e72e:	4413      	add	r3, r2
 800e730:	6a3a      	ldr	r2, [r7, #32]
 800e732:	429a      	cmp	r2, r3
 800e734:	dd02      	ble.n	800e73c <FT_String_ND+0xe4>
 800e736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d1b7      	bne.n	800e6ac <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800e73c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d101      	bne.n	800e746 <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800e742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e744:	e2b1      	b.n	800ecaa <FT_String_ND+0x652>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800e746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e748:	2b01      	cmp	r3, #1
 800e74a:	d12c      	bne.n	800e7a6 <FT_String_ND+0x14e>
 800e74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e74e:	2b01      	cmp	r3, #1
 800e750:	d129      	bne.n	800e7a6 <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800e752:	e014      	b.n	800e77e <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800e754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e756:	681a      	ldr	r2, [r3, #0]
 800e758:	69fb      	ldr	r3, [r7, #28]
 800e75a:	441a      	add	r2, r3
 800e75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e75e:	4413      	add	r3, r2
 800e760:	3b01      	subs	r3, #1
 800e762:	68fa      	ldr	r2, [r7, #12]
 800e764:	441a      	add	r2, r3
 800e766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e768:	6819      	ldr	r1, [r3, #0]
 800e76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e76c:	440b      	add	r3, r1
 800e76e:	3b01      	subs	r3, #1
 800e770:	68f9      	ldr	r1, [r7, #12]
 800e772:	440b      	add	r3, r1
 800e774:	7812      	ldrb	r2, [r2, #0]
 800e776:	701a      	strb	r2, [r3, #0]
										n3++;
 800e778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e77a:	3301      	adds	r3, #1
 800e77c:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800e77e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e784:	441a      	add	r2, r3
 800e786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e788:	4413      	add	r3, r2
 800e78a:	6a3a      	ldr	r2, [r7, #32]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	dae1      	bge.n	800e754 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800e790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e796:	4413      	add	r3, r2
 800e798:	1e5a      	subs	r2, r3, #1
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	601a      	str	r2, [r3, #0]
							estado=3;
 800e79e:	2303      	movs	r3, #3
 800e7a0:	627b      	str	r3, [r7, #36]	; 0x24
							return(estado);
 800e7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a4:	e281      	b.n	800ecaa <FT_String_ND+0x652>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800e7a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e7a8:	2b02      	cmp	r3, #2
 800e7aa:	f040 80b6 	bne.w	800e91a <FT_String_ND+0x2c2>
 800e7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b0:	2b01      	cmp	r3, #1
 800e7b2:	f040 80b2 	bne.w	800e91a <FT_String_ND+0x2c2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e7b6:	e012      	b.n	800e7de <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e7b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7ba:	69fb      	ldr	r3, [r7, #28]
 800e7bc:	1ad2      	subs	r2, r2, r3
 800e7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c0:	4413      	add	r3, r2
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	441a      	add	r2, r3
 800e7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e7cc:	440b      	add	r3, r1
 800e7ce:	7812      	ldrb	r2, [r2, #0]
 800e7d0:	701a      	strb	r2, [r3, #0]
								n4++;
 800e7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800e7d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7dc:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e7de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7e0:	69fb      	ldr	r3, [r7, #28]
 800e7e2:	1ad2      	subs	r2, r2, r3
 800e7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e6:	4413      	add	r3, r2
 800e7e8:	6a3a      	ldr	r2, [r7, #32]
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	dae4      	bge.n	800e7b8 <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800e7ee:	499e      	ldr	r1, [pc, #632]	; (800ea68 <FT_String_ND+0x410>)
 800e7f0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e7f2:	f000 fcfd 	bl	800f1f0 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800e7f6:	499d      	ldr	r1, [pc, #628]	; (800ea6c <FT_String_ND+0x414>)
 800e7f8:	2000      	movs	r0, #0
 800e7fa:	f000 fcf9 	bl	800f1f0 <strtok>
 800e7fe:	4603      	mov	r3, r0
 800e800:	4618      	mov	r0, r3
 800e802:	f000 fada 	bl	800edba <atoi>
 800e806:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e80a:	3306      	adds	r3, #6
 800e80c:	222c      	movs	r2, #44	; 0x2c
 800e80e:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	2b09      	cmp	r3, #9
 800e814:	dc0d      	bgt.n	800e832 <FT_String_ND+0x1da>
											{
												c[8]=':';
 800e816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e818:	3308      	adds	r3, #8
 800e81a:	223a      	movs	r2, #58	; 0x3a
 800e81c:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800e81e:	69bb      	ldr	r3, [r7, #24]
 800e820:	3309      	adds	r3, #9
 800e822:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e824:	4413      	add	r3, r2
 800e826:	2200      	movs	r2, #0
 800e828:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800e82a:	69bb      	ldr	r3, [r7, #24]
 800e82c:	3309      	adds	r3, #9
 800e82e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e830:	e021      	b.n	800e876 <FT_String_ND+0x21e>
											}
											else{
														if (lngd< 100)
 800e832:	69bb      	ldr	r3, [r7, #24]
 800e834:	2b63      	cmp	r3, #99	; 0x63
 800e836:	dc0d      	bgt.n	800e854 <FT_String_ND+0x1fc>
														{
															c[9]=':';
 800e838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e83a:	3309      	adds	r3, #9
 800e83c:	223a      	movs	r2, #58	; 0x3a
 800e83e:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800e840:	69bb      	ldr	r3, [r7, #24]
 800e842:	330a      	adds	r3, #10
 800e844:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e846:	4413      	add	r3, r2
 800e848:	2200      	movs	r2, #0
 800e84a:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	330a      	adds	r3, #10
 800e850:	62bb      	str	r3, [r7, #40]	; 0x28
 800e852:	e010      	b.n	800e876 <FT_String_ND+0x21e>
														}
														else
														{
														if (lngd < 1000)
 800e854:	69bb      	ldr	r3, [r7, #24]
 800e856:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e85a:	da0c      	bge.n	800e876 <FT_String_ND+0x21e>
														{
															c[10]=':';
 800e85c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e85e:	330a      	adds	r3, #10
 800e860:	223a      	movs	r2, #58	; 0x3a
 800e862:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800e864:	69bb      	ldr	r3, [r7, #24]
 800e866:	330b      	adds	r3, #11
 800e868:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e86a:	4413      	add	r3, r2
 800e86c:	2200      	movs	r2, #0
 800e86e:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800e870:	69bb      	ldr	r3, [r7, #24]
 800e872:	330b      	adds	r3, #11
 800e874:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800e876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e87a:	601a      	str	r2, [r3, #0]
							n4=0;
 800e87c:	2300      	movs	r3, #0
 800e87e:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e880:	e016      	b.n	800e8b0 <FT_String_ND+0x258>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e882:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e884:	69fb      	ldr	r3, [r7, #28]
 800e886:	1ad2      	subs	r2, r2, r3
 800e888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88a:	441a      	add	r2, r3
 800e88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e88e:	4413      	add	r3, r2
 800e890:	461a      	mov	r2, r3
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	441a      	add	r2, r3
 800e896:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	1ac9      	subs	r1, r1, r3
 800e89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e89e:	440b      	add	r3, r1
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	440b      	add	r3, r1
 800e8a6:	7812      	ldrb	r2, [r2, #0]
 800e8a8:	701a      	strb	r2, [r3, #0]
								n4++;
 800e8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ac:	3301      	adds	r3, #1
 800e8ae:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e8b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e8b2:	69fb      	ldr	r3, [r7, #28]
 800e8b4:	1ad2      	subs	r2, r2, r3
 800e8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b8:	441a      	add	r2, r3
 800e8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8bc:	4413      	add	r3, r2
 800e8be:	6a3a      	ldr	r2, [r7, #32]
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	dade      	bge.n	800e882 <FT_String_ND+0x22a>
							}
							*an=n+n4-lngb-1;
 800e8c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c8:	441a      	add	r2, r3
 800e8ca:	69fb      	ldr	r3, [r7, #28]
 800e8cc:	1ad3      	subs	r3, r2, r3
 800e8ce:	1e5a      	subs	r2, r3, #1
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800e8d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e8d6:	69fb      	ldr	r3, [r7, #28]
 800e8d8:	1ad2      	subs	r2, r2, r3
 800e8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8dc:	441a      	add	r2, r3
 800e8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e0:	4413      	add	r3, r2
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	4413      	add	r3, r2
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800e8ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e8ee:	69fb      	ldr	r3, [r7, #28]
 800e8f0:	1ad2      	subs	r2, r2, r3
 800e8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f4:	4413      	add	r3, r2
 800e8f6:	461a      	mov	r2, r3
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	4413      	add	r3, r2
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800e900:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e902:	69fb      	ldr	r3, [r7, #28]
 800e904:	1ad2      	subs	r2, r2, r3
 800e906:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90a:	440b      	add	r3, r1
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d102      	bne.n	800e916 <FT_String_ND+0x2be>
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	2200      	movs	r2, #0
 800e914:	701a      	strb	r2, [r3, #0]
							estado=3;
 800e916:	2303      	movs	r3, #3
 800e918:	627b      	str	r3, [r7, #36]	; 0x24

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800e91a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e91c:	2b03      	cmp	r3, #3
 800e91e:	d146      	bne.n	800e9ae <FT_String_ND+0x356>
 800e920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e922:	2b01      	cmp	r3, #1
 800e924:	d143      	bne.n	800e9ae <FT_String_ND+0x356>
						{
						n3=0;
 800e926:	2300      	movs	r3, #0
 800e928:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e92a:	e00e      	b.n	800e94a <FT_String_ND+0x2f2>
									{
										c[n3]=a[*ubicacion+n3-1];
 800e92c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e932:	4413      	add	r3, r2
 800e934:	3b01      	subs	r3, #1
 800e936:	68fa      	ldr	r2, [r7, #12]
 800e938:	441a      	add	r2, r3
 800e93a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e93c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e93e:	440b      	add	r3, r1
 800e940:	7812      	ldrb	r2, [r2, #0]
 800e942:	701a      	strb	r2, [r3, #0]
										n3++;
 800e944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e946:	3301      	adds	r3, #1
 800e948:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e94a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e94c:	69fb      	ldr	r3, [r7, #28]
 800e94e:	429a      	cmp	r2, r3
 800e950:	dbec      	blt.n	800e92c <FT_String_ND+0x2d4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800e952:	2300      	movs	r3, #0
 800e954:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e956:	e014      	b.n	800e982 <FT_String_ND+0x32a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800e958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e95a:	681a      	ldr	r2, [r3, #0]
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	441a      	add	r2, r3
 800e960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e962:	4413      	add	r3, r2
 800e964:	3b01      	subs	r3, #1
 800e966:	68fa      	ldr	r2, [r7, #12]
 800e968:	441a      	add	r2, r3
 800e96a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e96c:	6819      	ldr	r1, [r3, #0]
 800e96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e970:	440b      	add	r3, r1
 800e972:	3b01      	subs	r3, #1
 800e974:	68f9      	ldr	r1, [r7, #12]
 800e976:	440b      	add	r3, r1
 800e978:	7812      	ldrb	r2, [r2, #0]
 800e97a:	701a      	strb	r2, [r3, #0]
										n5++;
 800e97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97e:	3301      	adds	r3, #1
 800e980:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e984:	681a      	ldr	r2, [r3, #0]
 800e986:	69fb      	ldr	r3, [r7, #28]
 800e988:	441a      	add	r2, r3
 800e98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e98c:	441a      	add	r2, r3
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	429a      	cmp	r2, r3
 800e994:	dde0      	ble.n	800e958 <FT_String_ND+0x300>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800e996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e998:	681a      	ldr	r2, [r3, #0]
 800e99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e99c:	4413      	add	r3, r2
 800e99e:	1e5a      	subs	r2, r3, #1
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800e9a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9a8:	601a      	str	r2, [r3, #0]
							estado=3;
 800e9aa:	2303      	movs	r3, #3
 800e9ac:	627b      	str	r3, [r7, #36]	; 0x24
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800e9ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9b0:	2b04      	cmp	r3, #4
 800e9b2:	f040 80b6 	bne.w	800eb22 <FT_String_ND+0x4ca>
 800e9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	f040 80b2 	bne.w	800eb22 <FT_String_ND+0x4ca>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e9be:	e012      	b.n	800e9e6 <FT_String_ND+0x38e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e9c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9c2:	69fb      	ldr	r3, [r7, #28]
 800e9c4:	1ad2      	subs	r2, r2, r3
 800e9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c8:	4413      	add	r3, r2
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	441a      	add	r2, r3
 800e9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e9d4:	440b      	add	r3, r1
 800e9d6:	7812      	ldrb	r2, [r2, #0]
 800e9d8:	701a      	strb	r2, [r3, #0]
								n4++;
 800e9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9dc:	3301      	adds	r3, #1
 800e9de:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800e9e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9e4:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e9e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9e8:	69fb      	ldr	r3, [r7, #28]
 800e9ea:	1ad2      	subs	r2, r2, r3
 800e9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ee:	4413      	add	r3, r2
 800e9f0:	6a3a      	ldr	r2, [r7, #32]
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	dae4      	bge.n	800e9c0 <FT_String_ND+0x368>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800e9f6:	491c      	ldr	r1, [pc, #112]	; (800ea68 <FT_String_ND+0x410>)
 800e9f8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e9fa:	f000 fbf9 	bl	800f1f0 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800e9fe:	491b      	ldr	r1, [pc, #108]	; (800ea6c <FT_String_ND+0x414>)
 800ea00:	2000      	movs	r0, #0
 800ea02:	f000 fbf5 	bl	800f1f0 <strtok>
 800ea06:	4603      	mov	r3, r0
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f000 f9d6 	bl	800edba <atoi>
 800ea0e:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800ea10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea12:	3306      	adds	r3, #6
 800ea14:	222c      	movs	r2, #44	; 0x2c
 800ea16:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ea18:	69bb      	ldr	r3, [r7, #24]
 800ea1a:	2b09      	cmp	r3, #9
 800ea1c:	dc07      	bgt.n	800ea2e <FT_String_ND+0x3d6>
											{
												c[8]=':';
 800ea1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea20:	3308      	adds	r3, #8
 800ea22:	223a      	movs	r2, #58	; 0x3a
 800ea24:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800ea26:	69bb      	ldr	r3, [r7, #24]
 800ea28:	3309      	adds	r3, #9
 800ea2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea2c:	e015      	b.n	800ea5a <FT_String_ND+0x402>
											}
											else{
														if (lngd< 100)
 800ea2e:	69bb      	ldr	r3, [r7, #24]
 800ea30:	2b63      	cmp	r3, #99	; 0x63
 800ea32:	dc07      	bgt.n	800ea44 <FT_String_ND+0x3ec>
														{
															c[9]=':';
 800ea34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea36:	3309      	adds	r3, #9
 800ea38:	223a      	movs	r2, #58	; 0x3a
 800ea3a:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800ea3c:	69bb      	ldr	r3, [r7, #24]
 800ea3e:	330a      	adds	r3, #10
 800ea40:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea42:	e00a      	b.n	800ea5a <FT_String_ND+0x402>
														}
														else
														{
														if (lngd < 1000)
 800ea44:	69bb      	ldr	r3, [r7, #24]
 800ea46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ea4a:	da06      	bge.n	800ea5a <FT_String_ND+0x402>
														{
															c[10]=':';
 800ea4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea4e:	330a      	adds	r3, #10
 800ea50:	223a      	movs	r2, #58	; 0x3a
 800ea52:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800ea54:	69bb      	ldr	r3, [r7, #24]
 800ea56:	330b      	adds	r3, #11
 800ea58:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800ea5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea5e:	601a      	str	r2, [r3, #0]
							n4=0;
 800ea60:	2300      	movs	r3, #0
 800ea62:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ea64:	e01b      	b.n	800ea9e <FT_String_ND+0x446>
 800ea66:	bf00      	nop
 800ea68:	08010c50 	.word	0x08010c50
 800ea6c:	08010c54 	.word	0x08010c54
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ea70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea72:	69fb      	ldr	r3, [r7, #28]
 800ea74:	1ad2      	subs	r2, r2, r3
 800ea76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea78:	441a      	add	r2, r3
 800ea7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea7c:	4413      	add	r3, r2
 800ea7e:	461a      	mov	r2, r3
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	441a      	add	r2, r3
 800ea84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ea86:	69fb      	ldr	r3, [r7, #28]
 800ea88:	1ac9      	subs	r1, r1, r3
 800ea8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea8c:	440b      	add	r3, r1
 800ea8e:	4619      	mov	r1, r3
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	440b      	add	r3, r1
 800ea94:	7812      	ldrb	r2, [r2, #0]
 800ea96:	701a      	strb	r2, [r3, #0]
								n4++;
 800ea98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea9a:	3301      	adds	r3, #1
 800ea9c:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ea9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	1ad2      	subs	r2, r2, r3
 800eaa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa6:	441a      	add	r2, r3
 800eaa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaaa:	4413      	add	r3, r2
 800eaac:	6a3a      	ldr	r2, [r7, #32]
 800eaae:	429a      	cmp	r2, r3
 800eab0:	dade      	bge.n	800ea70 <FT_String_ND+0x418>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800eab2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab6:	441a      	add	r2, r3
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	1ad3      	subs	r3, r2, r3
 800eabc:	1e5a      	subs	r2, r3, #1
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	601a      	str	r2, [r3, #0]
							n5=0;
 800eac2:	2300      	movs	r3, #0
 800eac4:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800eac6:	e00f      	b.n	800eae8 <FT_String_ND+0x490>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800eac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eaca:	69bb      	ldr	r3, [r7, #24]
 800eacc:	1ad2      	subs	r2, r2, r3
 800eace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead0:	4413      	add	r3, r2
 800ead2:	461a      	mov	r2, r3
 800ead4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ead6:	441a      	add	r2, r3
 800ead8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eada:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eadc:	440b      	add	r3, r1
 800eade:	7812      	ldrb	r2, [r2, #0]
 800eae0:	701a      	strb	r2, [r3, #0]
								n5++;
 800eae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae4:	3301      	adds	r3, #1
 800eae6:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800eae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eaea:	69bb      	ldr	r3, [r7, #24]
 800eaec:	1ad2      	subs	r2, r2, r3
 800eaee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf0:	441a      	add	r2, r3
 800eaf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	429a      	cmp	r2, r3
 800eaf8:	dbe6      	blt.n	800eac8 <FT_String_ND+0x470>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800eafa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eafc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eafe:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800eb00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb02:	681a      	ldr	r2, [r3, #0]
 800eb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb06:	441a      	add	r2, r3
 800eb08:	69bb      	ldr	r3, [r7, #24]
 800eb0a:	1ad2      	subs	r2, r2, r3
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	4413      	add	r3, r2
 800eb12:	6a3a      	ldr	r2, [r7, #32]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d102      	bne.n	800eb1e <FT_String_ND+0x4c6>
							{
								estado=4;
 800eb18:	2304      	movs	r3, #4
 800eb1a:	627b      	str	r3, [r7, #36]	; 0x24
 800eb1c:	e001      	b.n	800eb22 <FT_String_ND+0x4ca>

							}
							else
							{
								estado=5;
 800eb1e:	2305      	movs	r3, #5
 800eb20:	627b      	str	r3, [r7, #36]	; 0x24
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800eb22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb24:	2b05      	cmp	r3, #5
 800eb26:	f040 80bd 	bne.w	800eca4 <FT_String_ND+0x64c>
 800eb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2c:	2b01      	cmp	r3, #1
 800eb2e:	f040 80b9 	bne.w	800eca4 <FT_String_ND+0x64c>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800eb32:	e012      	b.n	800eb5a <FT_String_ND+0x502>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800eb34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb36:	69fb      	ldr	r3, [r7, #28]
 800eb38:	1ad2      	subs	r2, r2, r3
 800eb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb3c:	4413      	add	r3, r2
 800eb3e:	461a      	mov	r2, r3
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	441a      	add	r2, r3
 800eb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb46:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eb48:	440b      	add	r3, r1
 800eb4a:	7812      	ldrb	r2, [r2, #0]
 800eb4c:	701a      	strb	r2, [r3, #0]
								n4++;
 800eb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb50:	3301      	adds	r3, #1
 800eb52:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800eb54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb58:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800eb5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb5c:	69fb      	ldr	r3, [r7, #28]
 800eb5e:	1ad2      	subs	r2, r2, r3
 800eb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb62:	4413      	add	r3, r2
 800eb64:	6a3a      	ldr	r2, [r7, #32]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	dae4      	bge.n	800eb34 <FT_String_ND+0x4dc>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800eb6a:	4952      	ldr	r1, [pc, #328]	; (800ecb4 <FT_String_ND+0x65c>)
 800eb6c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800eb6e:	f000 fb3f 	bl	800f1f0 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800eb72:	4951      	ldr	r1, [pc, #324]	; (800ecb8 <FT_String_ND+0x660>)
 800eb74:	2000      	movs	r0, #0
 800eb76:	f000 fb3b 	bl	800f1f0 <strtok>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f000 f91c 	bl	800edba <atoi>
 800eb82:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800eb84:	494c      	ldr	r1, [pc, #304]	; (800ecb8 <FT_String_ND+0x660>)
 800eb86:	2000      	movs	r0, #0
 800eb88:	f000 fb32 	bl	800f1f0 <strtok>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f000 f913 	bl	800edba <atoi>
 800eb94:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800eb96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb98:	3306      	adds	r3, #6
 800eb9a:	222c      	movs	r2, #44	; 0x2c
 800eb9c:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800eb9e:	69bb      	ldr	r3, [r7, #24]
 800eba0:	2b09      	cmp	r3, #9
 800eba2:	dc07      	bgt.n	800ebb4 <FT_String_ND+0x55c>
											{
												c[10]=':';
 800eba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eba6:	330a      	adds	r3, #10
 800eba8:	223a      	movs	r2, #58	; 0x3a
 800ebaa:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800ebac:	69bb      	ldr	r3, [r7, #24]
 800ebae:	330b      	adds	r3, #11
 800ebb0:	62bb      	str	r3, [r7, #40]	; 0x28
 800ebb2:	e015      	b.n	800ebe0 <FT_String_ND+0x588>
											}
											else{
														if (lngd< 100)
 800ebb4:	69bb      	ldr	r3, [r7, #24]
 800ebb6:	2b63      	cmp	r3, #99	; 0x63
 800ebb8:	dc07      	bgt.n	800ebca <FT_String_ND+0x572>
														{
															c[11]=':';
 800ebba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebbc:	330b      	adds	r3, #11
 800ebbe:	223a      	movs	r2, #58	; 0x3a
 800ebc0:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800ebc2:	69bb      	ldr	r3, [r7, #24]
 800ebc4:	330c      	adds	r3, #12
 800ebc6:	62bb      	str	r3, [r7, #40]	; 0x28
 800ebc8:	e00a      	b.n	800ebe0 <FT_String_ND+0x588>
														}
														else
														{
														if (lngd < 1000)
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ebd0:	da06      	bge.n	800ebe0 <FT_String_ND+0x588>
														{
															c[12]=':';
 800ebd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebd4:	330c      	adds	r3, #12
 800ebd6:	223a      	movs	r2, #58	; 0x3a
 800ebd8:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800ebda:	69bb      	ldr	r3, [r7, #24]
 800ebdc:	330d      	adds	r3, #13
 800ebde:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800ebe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebe4:	601a      	str	r2, [r3, #0]
							n4=0;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ebea:	e016      	b.n	800ec1a <FT_String_ND+0x5c2>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ebec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebee:	69fb      	ldr	r3, [r7, #28]
 800ebf0:	1ad2      	subs	r2, r2, r3
 800ebf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf4:	441a      	add	r2, r3
 800ebf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf8:	4413      	add	r3, r2
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	441a      	add	r2, r3
 800ec00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ec02:	69fb      	ldr	r3, [r7, #28]
 800ec04:	1ac9      	subs	r1, r1, r3
 800ec06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec08:	440b      	add	r3, r1
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	440b      	add	r3, r1
 800ec10:	7812      	ldrb	r2, [r2, #0]
 800ec12:	701a      	strb	r2, [r3, #0]
								n4++;
 800ec14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec16:	3301      	adds	r3, #1
 800ec18:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ec1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec1c:	69fb      	ldr	r3, [r7, #28]
 800ec1e:	1ad2      	subs	r2, r2, r3
 800ec20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec22:	441a      	add	r2, r3
 800ec24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec26:	4413      	add	r3, r2
 800ec28:	6a3a      	ldr	r2, [r7, #32]
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	dade      	bge.n	800ebec <FT_String_ND+0x594>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800ec2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec32:	441a      	add	r2, r3
 800ec34:	69fb      	ldr	r3, [r7, #28]
 800ec36:	1ad3      	subs	r3, r2, r3
 800ec38:	1e5a      	subs	r2, r3, #1
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	601a      	str	r2, [r3, #0]
							n5=0;
 800ec3e:	2300      	movs	r3, #0
 800ec40:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ec42:	e00f      	b.n	800ec64 <FT_String_ND+0x60c>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800ec44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec46:	69bb      	ldr	r3, [r7, #24]
 800ec48:	1ad2      	subs	r2, r2, r3
 800ec4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec4c:	4413      	add	r3, r2
 800ec4e:	461a      	mov	r2, r3
 800ec50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec52:	441a      	add	r2, r3
 800ec54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec56:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ec58:	440b      	add	r3, r1
 800ec5a:	7812      	ldrb	r2, [r2, #0]
 800ec5c:	701a      	strb	r2, [r3, #0]
								n5++;
 800ec5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec60:	3301      	adds	r3, #1
 800ec62:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ec64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec66:	69bb      	ldr	r3, [r7, #24]
 800ec68:	1ad2      	subs	r2, r2, r3
 800ec6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec6c:	441a      	add	r2, r3
 800ec6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	dbe6      	blt.n	800ec44 <FT_String_ND+0x5ec>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800ec76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec7a:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800ec7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec82:	441a      	add	r2, r3
 800ec84:	69bb      	ldr	r3, [r7, #24]
 800ec86:	1ad2      	subs	r2, r2, r3
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	4413      	add	r3, r2
 800ec8e:	6a3a      	ldr	r2, [r7, #32]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d105      	bne.n	800eca0 <FT_String_ND+0x648>
							{
								estado=4;
 800ec94:	2304      	movs	r3, #4
 800ec96:	627b      	str	r3, [r7, #36]	; 0x24
								*idcom=cliente;
 800ec98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec9a:	693a      	ldr	r2, [r7, #16]
 800ec9c:	601a      	str	r2, [r3, #0]
 800ec9e:	e001      	b.n	800eca4 <FT_String_ND+0x64c>
							}
							else
							{
								estado=5;
 800eca0:	2305      	movs	r3, #5
 800eca2:	627b      	str	r3, [r7, #36]	; 0x24
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800eca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca6:	e000      	b.n	800ecaa <FT_String_ND+0x652>
					}
			}
			else
			{
				return(2);
 800eca8:	2302      	movs	r3, #2
			}
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	3740      	adds	r7, #64	; 0x40
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}
 800ecb2:	bf00      	nop
 800ecb4:	08010c50 	.word	0x08010c50
 800ecb8:	08010c54 	.word	0x08010c54

0800ecbc <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b088      	sub	sp, #32
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800ecc6:	2330      	movs	r3, #48	; 0x30
 800ecc8:	60bb      	str	r3, [r7, #8]
 800ecca:	f107 030c 	add.w	r3, r7, #12
 800ecce:	2200      	movs	r2, #0
 800ecd0:	601a      	str	r2, [r3, #0]
 800ecd2:	605a      	str	r2, [r3, #4]
 800ecd4:	609a      	str	r2, [r3, #8]
 800ecd6:	60da      	str	r2, [r3, #12]
int i=0;	
 800ecd8:	2300      	movs	r3, #0
 800ecda:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800ecdc:	f107 0308 	add.w	r3, r7, #8
 800ece0:	687a      	ldr	r2, [r7, #4]
 800ece2:	490f      	ldr	r1, [pc, #60]	; (800ed20 <INTOA+0x64>)
 800ece4:	4618      	mov	r0, r3
 800ece6:	f000 fa05 	bl	800f0f4 <siprintf>
		while(i<=strlen(origbuff))
 800ecea:	e00b      	b.n	800ed04 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	1c5a      	adds	r2, r3, #1
 800ecf0:	603a      	str	r2, [r7, #0]
 800ecf2:	f107 0108 	add.w	r1, r7, #8
 800ecf6:	69fa      	ldr	r2, [r7, #28]
 800ecf8:	440a      	add	r2, r1
 800ecfa:	7812      	ldrb	r2, [r2, #0]
 800ecfc:	701a      	strb	r2, [r3, #0]
		i++;
 800ecfe:	69fb      	ldr	r3, [r7, #28]
 800ed00:	3301      	adds	r3, #1
 800ed02:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800ed04:	f107 0308 	add.w	r3, r7, #8
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f7f1 fa73 	bl	80001f4 <strlen>
 800ed0e:	4602      	mov	r2, r0
 800ed10:	69fb      	ldr	r3, [r7, #28]
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d2ea      	bcs.n	800ecec <INTOA+0x30>
		}
		return(i);
 800ed16:	69fb      	ldr	r3, [r7, #28]
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3720      	adds	r7, #32
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}
 800ed20:	08010c58 	.word	0x08010c58

0800ed24 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b088      	sub	sp, #32
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	60f8      	str	r0, [r7, #12]
 800ed2c:	60b9      	str	r1, [r7, #8]
 800ed2e:	607a      	str	r2, [r7, #4]
 800ed30:	603b      	str	r3, [r7, #0]
int x =0;
 800ed32:	2300      	movs	r3, #0
 800ed34:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800ed36:	2300      	movs	r3, #0
 800ed38:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800ed3a:	f107 0310 	add.w	r3, r7, #16
 800ed3e:	617b      	str	r3, [r7, #20]
if (c==0)
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d105      	bne.n	800ed52 <CopiaVector+0x2e>
{
	x=strlen(b);
 800ed46:	68b8      	ldr	r0, [r7, #8]
 800ed48:	f7f1 fa54 	bl	80001f4 <strlen>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	61bb      	str	r3, [r7, #24]
 800ed50:	e02e      	b.n	800edb0 <CopiaVector+0x8c>
}
else
	{
		x=c;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800ed56:	69bb      	ldr	r3, [r7, #24]
 800ed58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed5c:	dd01      	ble.n	800ed62 <CopiaVector+0x3e>
			{
				return(1);
 800ed5e:	2301      	movs	r3, #1
 800ed60:	e027      	b.n	800edb2 <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800ed62:	2300      	movs	r3, #0
 800ed64:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800ed66:	e00a      	b.n	800ed7e <CopiaVector+0x5a>
				{
					*a++=*b++;
 800ed68:	68ba      	ldr	r2, [r7, #8]
 800ed6a:	1c53      	adds	r3, r2, #1
 800ed6c:	60bb      	str	r3, [r7, #8]
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	1c59      	adds	r1, r3, #1
 800ed72:	60f9      	str	r1, [r7, #12]
 800ed74:	7812      	ldrb	r2, [r2, #0]
 800ed76:	701a      	strb	r2, [r3, #0]
					p++;
 800ed78:	69fb      	ldr	r3, [r7, #28]
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800ed7e:	69fa      	ldr	r2, [r7, #28]
 800ed80:	69bb      	ldr	r3, [r7, #24]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	dbf0      	blt.n	800ed68 <CopiaVector+0x44>
				}


			if (d==1)
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	2b01      	cmp	r3, #1
 800ed8a:	d111      	bne.n	800edb0 <CopiaVector+0x8c>
			{
			  p=c;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800ed90:	e008      	b.n	800eda4 <CopiaVector+0x80>
			  {

				  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	1c5a      	adds	r2, r3, #1
 800ed96:	60fa      	str	r2, [r7, #12]
 800ed98:	697a      	ldr	r2, [r7, #20]
 800ed9a:	7812      	ldrb	r2, [r2, #0]
 800ed9c:	701a      	strb	r2, [r3, #0]
				  p++;
 800ed9e:	69fb      	ldr	r3, [r7, #28]
 800eda0:	3301      	adds	r3, #1
 800eda2:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800eda4:	69fb      	ldr	r3, [r7, #28]
 800eda6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800edaa:	dbf2      	blt.n	800ed92 <CopiaVector+0x6e>
				  //&a[p]="/0";

			  }
			return (0);
 800edac:	2300      	movs	r3, #0
 800edae:	e000      	b.n	800edb2 <CopiaVector+0x8e>
			}

			}
	}
return (1);
 800edb0:	2301      	movs	r3, #1
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	3720      	adds	r7, #32
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}

0800edba <atoi>:
 800edba:	220a      	movs	r2, #10
 800edbc:	2100      	movs	r1, #0
 800edbe:	f000 b89d 	b.w	800eefc <strtol>

0800edc2 <__itoa>:
 800edc2:	1e93      	subs	r3, r2, #2
 800edc4:	2b22      	cmp	r3, #34	; 0x22
 800edc6:	b510      	push	{r4, lr}
 800edc8:	460c      	mov	r4, r1
 800edca:	d904      	bls.n	800edd6 <__itoa+0x14>
 800edcc:	2300      	movs	r3, #0
 800edce:	700b      	strb	r3, [r1, #0]
 800edd0:	461c      	mov	r4, r3
 800edd2:	4620      	mov	r0, r4
 800edd4:	bd10      	pop	{r4, pc}
 800edd6:	2a0a      	cmp	r2, #10
 800edd8:	d109      	bne.n	800edee <__itoa+0x2c>
 800edda:	2800      	cmp	r0, #0
 800eddc:	da07      	bge.n	800edee <__itoa+0x2c>
 800edde:	232d      	movs	r3, #45	; 0x2d
 800ede0:	700b      	strb	r3, [r1, #0]
 800ede2:	4240      	negs	r0, r0
 800ede4:	2101      	movs	r1, #1
 800ede6:	4421      	add	r1, r4
 800ede8:	f000 f892 	bl	800ef10 <__utoa>
 800edec:	e7f1      	b.n	800edd2 <__itoa+0x10>
 800edee:	2100      	movs	r1, #0
 800edf0:	e7f9      	b.n	800ede6 <__itoa+0x24>

0800edf2 <itoa>:
 800edf2:	f7ff bfe6 	b.w	800edc2 <__itoa>
	...

0800edf8 <_strtol_l.constprop.0>:
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edfe:	d001      	beq.n	800ee04 <_strtol_l.constprop.0+0xc>
 800ee00:	2b24      	cmp	r3, #36	; 0x24
 800ee02:	d906      	bls.n	800ee12 <_strtol_l.constprop.0+0x1a>
 800ee04:	f000 fa96 	bl	800f334 <__errno>
 800ee08:	2316      	movs	r3, #22
 800ee0a:	6003      	str	r3, [r0, #0]
 800ee0c:	2000      	movs	r0, #0
 800ee0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee12:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800eef8 <_strtol_l.constprop.0+0x100>
 800ee16:	460d      	mov	r5, r1
 800ee18:	462e      	mov	r6, r5
 800ee1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee1e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ee22:	f017 0708 	ands.w	r7, r7, #8
 800ee26:	d1f7      	bne.n	800ee18 <_strtol_l.constprop.0+0x20>
 800ee28:	2c2d      	cmp	r4, #45	; 0x2d
 800ee2a:	d132      	bne.n	800ee92 <_strtol_l.constprop.0+0x9a>
 800ee2c:	782c      	ldrb	r4, [r5, #0]
 800ee2e:	2701      	movs	r7, #1
 800ee30:	1cb5      	adds	r5, r6, #2
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d05b      	beq.n	800eeee <_strtol_l.constprop.0+0xf6>
 800ee36:	2b10      	cmp	r3, #16
 800ee38:	d109      	bne.n	800ee4e <_strtol_l.constprop.0+0x56>
 800ee3a:	2c30      	cmp	r4, #48	; 0x30
 800ee3c:	d107      	bne.n	800ee4e <_strtol_l.constprop.0+0x56>
 800ee3e:	782c      	ldrb	r4, [r5, #0]
 800ee40:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ee44:	2c58      	cmp	r4, #88	; 0x58
 800ee46:	d14d      	bne.n	800eee4 <_strtol_l.constprop.0+0xec>
 800ee48:	786c      	ldrb	r4, [r5, #1]
 800ee4a:	2310      	movs	r3, #16
 800ee4c:	3502      	adds	r5, #2
 800ee4e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ee52:	f108 38ff 	add.w	r8, r8, #4294967295
 800ee56:	f04f 0e00 	mov.w	lr, #0
 800ee5a:	fbb8 f9f3 	udiv	r9, r8, r3
 800ee5e:	4676      	mov	r6, lr
 800ee60:	fb03 8a19 	mls	sl, r3, r9, r8
 800ee64:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ee68:	f1bc 0f09 	cmp.w	ip, #9
 800ee6c:	d816      	bhi.n	800ee9c <_strtol_l.constprop.0+0xa4>
 800ee6e:	4664      	mov	r4, ip
 800ee70:	42a3      	cmp	r3, r4
 800ee72:	dd24      	ble.n	800eebe <_strtol_l.constprop.0+0xc6>
 800ee74:	f1be 3fff 	cmp.w	lr, #4294967295
 800ee78:	d008      	beq.n	800ee8c <_strtol_l.constprop.0+0x94>
 800ee7a:	45b1      	cmp	r9, r6
 800ee7c:	d31c      	bcc.n	800eeb8 <_strtol_l.constprop.0+0xc0>
 800ee7e:	d101      	bne.n	800ee84 <_strtol_l.constprop.0+0x8c>
 800ee80:	45a2      	cmp	sl, r4
 800ee82:	db19      	blt.n	800eeb8 <_strtol_l.constprop.0+0xc0>
 800ee84:	fb06 4603 	mla	r6, r6, r3, r4
 800ee88:	f04f 0e01 	mov.w	lr, #1
 800ee8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee90:	e7e8      	b.n	800ee64 <_strtol_l.constprop.0+0x6c>
 800ee92:	2c2b      	cmp	r4, #43	; 0x2b
 800ee94:	bf04      	itt	eq
 800ee96:	782c      	ldrbeq	r4, [r5, #0]
 800ee98:	1cb5      	addeq	r5, r6, #2
 800ee9a:	e7ca      	b.n	800ee32 <_strtol_l.constprop.0+0x3a>
 800ee9c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800eea0:	f1bc 0f19 	cmp.w	ip, #25
 800eea4:	d801      	bhi.n	800eeaa <_strtol_l.constprop.0+0xb2>
 800eea6:	3c37      	subs	r4, #55	; 0x37
 800eea8:	e7e2      	b.n	800ee70 <_strtol_l.constprop.0+0x78>
 800eeaa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800eeae:	f1bc 0f19 	cmp.w	ip, #25
 800eeb2:	d804      	bhi.n	800eebe <_strtol_l.constprop.0+0xc6>
 800eeb4:	3c57      	subs	r4, #87	; 0x57
 800eeb6:	e7db      	b.n	800ee70 <_strtol_l.constprop.0+0x78>
 800eeb8:	f04f 3eff 	mov.w	lr, #4294967295
 800eebc:	e7e6      	b.n	800ee8c <_strtol_l.constprop.0+0x94>
 800eebe:	f1be 3fff 	cmp.w	lr, #4294967295
 800eec2:	d105      	bne.n	800eed0 <_strtol_l.constprop.0+0xd8>
 800eec4:	2322      	movs	r3, #34	; 0x22
 800eec6:	6003      	str	r3, [r0, #0]
 800eec8:	4646      	mov	r6, r8
 800eeca:	b942      	cbnz	r2, 800eede <_strtol_l.constprop.0+0xe6>
 800eecc:	4630      	mov	r0, r6
 800eece:	e79e      	b.n	800ee0e <_strtol_l.constprop.0+0x16>
 800eed0:	b107      	cbz	r7, 800eed4 <_strtol_l.constprop.0+0xdc>
 800eed2:	4276      	negs	r6, r6
 800eed4:	2a00      	cmp	r2, #0
 800eed6:	d0f9      	beq.n	800eecc <_strtol_l.constprop.0+0xd4>
 800eed8:	f1be 0f00 	cmp.w	lr, #0
 800eedc:	d000      	beq.n	800eee0 <_strtol_l.constprop.0+0xe8>
 800eede:	1e69      	subs	r1, r5, #1
 800eee0:	6011      	str	r1, [r2, #0]
 800eee2:	e7f3      	b.n	800eecc <_strtol_l.constprop.0+0xd4>
 800eee4:	2430      	movs	r4, #48	; 0x30
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d1b1      	bne.n	800ee4e <_strtol_l.constprop.0+0x56>
 800eeea:	2308      	movs	r3, #8
 800eeec:	e7af      	b.n	800ee4e <_strtol_l.constprop.0+0x56>
 800eeee:	2c30      	cmp	r4, #48	; 0x30
 800eef0:	d0a5      	beq.n	800ee3e <_strtol_l.constprop.0+0x46>
 800eef2:	230a      	movs	r3, #10
 800eef4:	e7ab      	b.n	800ee4e <_strtol_l.constprop.0+0x56>
 800eef6:	bf00      	nop
 800eef8:	08010c9a 	.word	0x08010c9a

0800eefc <strtol>:
 800eefc:	4613      	mov	r3, r2
 800eefe:	460a      	mov	r2, r1
 800ef00:	4601      	mov	r1, r0
 800ef02:	4802      	ldr	r0, [pc, #8]	; (800ef0c <strtol+0x10>)
 800ef04:	6800      	ldr	r0, [r0, #0]
 800ef06:	f7ff bf77 	b.w	800edf8 <_strtol_l.constprop.0>
 800ef0a:	bf00      	nop
 800ef0c:	20000174 	.word	0x20000174

0800ef10 <__utoa>:
 800ef10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef12:	4c1f      	ldr	r4, [pc, #124]	; (800ef90 <__utoa+0x80>)
 800ef14:	b08b      	sub	sp, #44	; 0x2c
 800ef16:	4605      	mov	r5, r0
 800ef18:	460b      	mov	r3, r1
 800ef1a:	466e      	mov	r6, sp
 800ef1c:	f104 0c20 	add.w	ip, r4, #32
 800ef20:	6820      	ldr	r0, [r4, #0]
 800ef22:	6861      	ldr	r1, [r4, #4]
 800ef24:	4637      	mov	r7, r6
 800ef26:	c703      	stmia	r7!, {r0, r1}
 800ef28:	3408      	adds	r4, #8
 800ef2a:	4564      	cmp	r4, ip
 800ef2c:	463e      	mov	r6, r7
 800ef2e:	d1f7      	bne.n	800ef20 <__utoa+0x10>
 800ef30:	7921      	ldrb	r1, [r4, #4]
 800ef32:	7139      	strb	r1, [r7, #4]
 800ef34:	1e91      	subs	r1, r2, #2
 800ef36:	6820      	ldr	r0, [r4, #0]
 800ef38:	6038      	str	r0, [r7, #0]
 800ef3a:	2922      	cmp	r1, #34	; 0x22
 800ef3c:	f04f 0100 	mov.w	r1, #0
 800ef40:	d904      	bls.n	800ef4c <__utoa+0x3c>
 800ef42:	7019      	strb	r1, [r3, #0]
 800ef44:	460b      	mov	r3, r1
 800ef46:	4618      	mov	r0, r3
 800ef48:	b00b      	add	sp, #44	; 0x2c
 800ef4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef4c:	1e58      	subs	r0, r3, #1
 800ef4e:	4684      	mov	ip, r0
 800ef50:	fbb5 f7f2 	udiv	r7, r5, r2
 800ef54:	fb02 5617 	mls	r6, r2, r7, r5
 800ef58:	3628      	adds	r6, #40	; 0x28
 800ef5a:	446e      	add	r6, sp
 800ef5c:	460c      	mov	r4, r1
 800ef5e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ef62:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ef66:	462e      	mov	r6, r5
 800ef68:	42b2      	cmp	r2, r6
 800ef6a:	f101 0101 	add.w	r1, r1, #1
 800ef6e:	463d      	mov	r5, r7
 800ef70:	d9ee      	bls.n	800ef50 <__utoa+0x40>
 800ef72:	2200      	movs	r2, #0
 800ef74:	545a      	strb	r2, [r3, r1]
 800ef76:	1919      	adds	r1, r3, r4
 800ef78:	1aa5      	subs	r5, r4, r2
 800ef7a:	42aa      	cmp	r2, r5
 800ef7c:	dae3      	bge.n	800ef46 <__utoa+0x36>
 800ef7e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ef82:	780e      	ldrb	r6, [r1, #0]
 800ef84:	7006      	strb	r6, [r0, #0]
 800ef86:	3201      	adds	r2, #1
 800ef88:	f801 5901 	strb.w	r5, [r1], #-1
 800ef8c:	e7f4      	b.n	800ef78 <__utoa+0x68>
 800ef8e:	bf00      	nop
 800ef90:	08010c74 	.word	0x08010c74

0800ef94 <std>:
 800ef94:	2300      	movs	r3, #0
 800ef96:	b510      	push	{r4, lr}
 800ef98:	4604      	mov	r4, r0
 800ef9a:	e9c0 3300 	strd	r3, r3, [r0]
 800ef9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800efa2:	6083      	str	r3, [r0, #8]
 800efa4:	8181      	strh	r1, [r0, #12]
 800efa6:	6643      	str	r3, [r0, #100]	; 0x64
 800efa8:	81c2      	strh	r2, [r0, #14]
 800efaa:	6183      	str	r3, [r0, #24]
 800efac:	4619      	mov	r1, r3
 800efae:	2208      	movs	r2, #8
 800efb0:	305c      	adds	r0, #92	; 0x5c
 800efb2:	f000 f902 	bl	800f1ba <memset>
 800efb6:	4b05      	ldr	r3, [pc, #20]	; (800efcc <std+0x38>)
 800efb8:	6263      	str	r3, [r4, #36]	; 0x24
 800efba:	4b05      	ldr	r3, [pc, #20]	; (800efd0 <std+0x3c>)
 800efbc:	62a3      	str	r3, [r4, #40]	; 0x28
 800efbe:	4b05      	ldr	r3, [pc, #20]	; (800efd4 <std+0x40>)
 800efc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800efc2:	4b05      	ldr	r3, [pc, #20]	; (800efd8 <std+0x44>)
 800efc4:	6224      	str	r4, [r4, #32]
 800efc6:	6323      	str	r3, [r4, #48]	; 0x30
 800efc8:	bd10      	pop	{r4, pc}
 800efca:	bf00      	nop
 800efcc:	0800f135 	.word	0x0800f135
 800efd0:	0800f157 	.word	0x0800f157
 800efd4:	0800f18f 	.word	0x0800f18f
 800efd8:	0800f1b3 	.word	0x0800f1b3

0800efdc <stdio_exit_handler>:
 800efdc:	4a02      	ldr	r2, [pc, #8]	; (800efe8 <stdio_exit_handler+0xc>)
 800efde:	4903      	ldr	r1, [pc, #12]	; (800efec <stdio_exit_handler+0x10>)
 800efe0:	4803      	ldr	r0, [pc, #12]	; (800eff0 <stdio_exit_handler+0x14>)
 800efe2:	f000 b869 	b.w	800f0b8 <_fwalk_sglue>
 800efe6:	bf00      	nop
 800efe8:	2000011c 	.word	0x2000011c
 800efec:	0800fcb5 	.word	0x0800fcb5
 800eff0:	20000128 	.word	0x20000128

0800eff4 <cleanup_stdio>:
 800eff4:	6841      	ldr	r1, [r0, #4]
 800eff6:	4b0c      	ldr	r3, [pc, #48]	; (800f028 <cleanup_stdio+0x34>)
 800eff8:	4299      	cmp	r1, r3
 800effa:	b510      	push	{r4, lr}
 800effc:	4604      	mov	r4, r0
 800effe:	d001      	beq.n	800f004 <cleanup_stdio+0x10>
 800f000:	f000 fe58 	bl	800fcb4 <_fflush_r>
 800f004:	68a1      	ldr	r1, [r4, #8]
 800f006:	4b09      	ldr	r3, [pc, #36]	; (800f02c <cleanup_stdio+0x38>)
 800f008:	4299      	cmp	r1, r3
 800f00a:	d002      	beq.n	800f012 <cleanup_stdio+0x1e>
 800f00c:	4620      	mov	r0, r4
 800f00e:	f000 fe51 	bl	800fcb4 <_fflush_r>
 800f012:	68e1      	ldr	r1, [r4, #12]
 800f014:	4b06      	ldr	r3, [pc, #24]	; (800f030 <cleanup_stdio+0x3c>)
 800f016:	4299      	cmp	r1, r3
 800f018:	d004      	beq.n	800f024 <cleanup_stdio+0x30>
 800f01a:	4620      	mov	r0, r4
 800f01c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f020:	f000 be48 	b.w	800fcb4 <_fflush_r>
 800f024:	bd10      	pop	{r4, pc}
 800f026:	bf00      	nop
 800f028:	20003e58 	.word	0x20003e58
 800f02c:	20003ec0 	.word	0x20003ec0
 800f030:	20003f28 	.word	0x20003f28

0800f034 <global_stdio_init.part.0>:
 800f034:	b510      	push	{r4, lr}
 800f036:	4b0b      	ldr	r3, [pc, #44]	; (800f064 <global_stdio_init.part.0+0x30>)
 800f038:	4c0b      	ldr	r4, [pc, #44]	; (800f068 <global_stdio_init.part.0+0x34>)
 800f03a:	4a0c      	ldr	r2, [pc, #48]	; (800f06c <global_stdio_init.part.0+0x38>)
 800f03c:	601a      	str	r2, [r3, #0]
 800f03e:	4620      	mov	r0, r4
 800f040:	2200      	movs	r2, #0
 800f042:	2104      	movs	r1, #4
 800f044:	f7ff ffa6 	bl	800ef94 <std>
 800f048:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f04c:	2201      	movs	r2, #1
 800f04e:	2109      	movs	r1, #9
 800f050:	f7ff ffa0 	bl	800ef94 <std>
 800f054:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f058:	2202      	movs	r2, #2
 800f05a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f05e:	2112      	movs	r1, #18
 800f060:	f7ff bf98 	b.w	800ef94 <std>
 800f064:	20003f90 	.word	0x20003f90
 800f068:	20003e58 	.word	0x20003e58
 800f06c:	0800efdd 	.word	0x0800efdd

0800f070 <__sfp_lock_acquire>:
 800f070:	4801      	ldr	r0, [pc, #4]	; (800f078 <__sfp_lock_acquire+0x8>)
 800f072:	f000 b989 	b.w	800f388 <__retarget_lock_acquire_recursive>
 800f076:	bf00      	nop
 800f078:	20003f99 	.word	0x20003f99

0800f07c <__sfp_lock_release>:
 800f07c:	4801      	ldr	r0, [pc, #4]	; (800f084 <__sfp_lock_release+0x8>)
 800f07e:	f000 b984 	b.w	800f38a <__retarget_lock_release_recursive>
 800f082:	bf00      	nop
 800f084:	20003f99 	.word	0x20003f99

0800f088 <__sinit>:
 800f088:	b510      	push	{r4, lr}
 800f08a:	4604      	mov	r4, r0
 800f08c:	f7ff fff0 	bl	800f070 <__sfp_lock_acquire>
 800f090:	6a23      	ldr	r3, [r4, #32]
 800f092:	b11b      	cbz	r3, 800f09c <__sinit+0x14>
 800f094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f098:	f7ff bff0 	b.w	800f07c <__sfp_lock_release>
 800f09c:	4b04      	ldr	r3, [pc, #16]	; (800f0b0 <__sinit+0x28>)
 800f09e:	6223      	str	r3, [r4, #32]
 800f0a0:	4b04      	ldr	r3, [pc, #16]	; (800f0b4 <__sinit+0x2c>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d1f5      	bne.n	800f094 <__sinit+0xc>
 800f0a8:	f7ff ffc4 	bl	800f034 <global_stdio_init.part.0>
 800f0ac:	e7f2      	b.n	800f094 <__sinit+0xc>
 800f0ae:	bf00      	nop
 800f0b0:	0800eff5 	.word	0x0800eff5
 800f0b4:	20003f90 	.word	0x20003f90

0800f0b8 <_fwalk_sglue>:
 800f0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0bc:	4607      	mov	r7, r0
 800f0be:	4688      	mov	r8, r1
 800f0c0:	4614      	mov	r4, r2
 800f0c2:	2600      	movs	r6, #0
 800f0c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f0c8:	f1b9 0901 	subs.w	r9, r9, #1
 800f0cc:	d505      	bpl.n	800f0da <_fwalk_sglue+0x22>
 800f0ce:	6824      	ldr	r4, [r4, #0]
 800f0d0:	2c00      	cmp	r4, #0
 800f0d2:	d1f7      	bne.n	800f0c4 <_fwalk_sglue+0xc>
 800f0d4:	4630      	mov	r0, r6
 800f0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0da:	89ab      	ldrh	r3, [r5, #12]
 800f0dc:	2b01      	cmp	r3, #1
 800f0de:	d907      	bls.n	800f0f0 <_fwalk_sglue+0x38>
 800f0e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f0e4:	3301      	adds	r3, #1
 800f0e6:	d003      	beq.n	800f0f0 <_fwalk_sglue+0x38>
 800f0e8:	4629      	mov	r1, r5
 800f0ea:	4638      	mov	r0, r7
 800f0ec:	47c0      	blx	r8
 800f0ee:	4306      	orrs	r6, r0
 800f0f0:	3568      	adds	r5, #104	; 0x68
 800f0f2:	e7e9      	b.n	800f0c8 <_fwalk_sglue+0x10>

0800f0f4 <siprintf>:
 800f0f4:	b40e      	push	{r1, r2, r3}
 800f0f6:	b500      	push	{lr}
 800f0f8:	b09c      	sub	sp, #112	; 0x70
 800f0fa:	ab1d      	add	r3, sp, #116	; 0x74
 800f0fc:	9002      	str	r0, [sp, #8]
 800f0fe:	9006      	str	r0, [sp, #24]
 800f100:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f104:	4809      	ldr	r0, [pc, #36]	; (800f12c <siprintf+0x38>)
 800f106:	9107      	str	r1, [sp, #28]
 800f108:	9104      	str	r1, [sp, #16]
 800f10a:	4909      	ldr	r1, [pc, #36]	; (800f130 <siprintf+0x3c>)
 800f10c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f110:	9105      	str	r1, [sp, #20]
 800f112:	6800      	ldr	r0, [r0, #0]
 800f114:	9301      	str	r3, [sp, #4]
 800f116:	a902      	add	r1, sp, #8
 800f118:	f000 fab8 	bl	800f68c <_svfiprintf_r>
 800f11c:	9b02      	ldr	r3, [sp, #8]
 800f11e:	2200      	movs	r2, #0
 800f120:	701a      	strb	r2, [r3, #0]
 800f122:	b01c      	add	sp, #112	; 0x70
 800f124:	f85d eb04 	ldr.w	lr, [sp], #4
 800f128:	b003      	add	sp, #12
 800f12a:	4770      	bx	lr
 800f12c:	20000174 	.word	0x20000174
 800f130:	ffff0208 	.word	0xffff0208

0800f134 <__sread>:
 800f134:	b510      	push	{r4, lr}
 800f136:	460c      	mov	r4, r1
 800f138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f13c:	f000 f8d6 	bl	800f2ec <_read_r>
 800f140:	2800      	cmp	r0, #0
 800f142:	bfab      	itete	ge
 800f144:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f146:	89a3      	ldrhlt	r3, [r4, #12]
 800f148:	181b      	addge	r3, r3, r0
 800f14a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f14e:	bfac      	ite	ge
 800f150:	6563      	strge	r3, [r4, #84]	; 0x54
 800f152:	81a3      	strhlt	r3, [r4, #12]
 800f154:	bd10      	pop	{r4, pc}

0800f156 <__swrite>:
 800f156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f15a:	461f      	mov	r7, r3
 800f15c:	898b      	ldrh	r3, [r1, #12]
 800f15e:	05db      	lsls	r3, r3, #23
 800f160:	4605      	mov	r5, r0
 800f162:	460c      	mov	r4, r1
 800f164:	4616      	mov	r6, r2
 800f166:	d505      	bpl.n	800f174 <__swrite+0x1e>
 800f168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f16c:	2302      	movs	r3, #2
 800f16e:	2200      	movs	r2, #0
 800f170:	f000 f8aa 	bl	800f2c8 <_lseek_r>
 800f174:	89a3      	ldrh	r3, [r4, #12]
 800f176:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f17a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f17e:	81a3      	strh	r3, [r4, #12]
 800f180:	4632      	mov	r2, r6
 800f182:	463b      	mov	r3, r7
 800f184:	4628      	mov	r0, r5
 800f186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f18a:	f000 b8c1 	b.w	800f310 <_write_r>

0800f18e <__sseek>:
 800f18e:	b510      	push	{r4, lr}
 800f190:	460c      	mov	r4, r1
 800f192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f196:	f000 f897 	bl	800f2c8 <_lseek_r>
 800f19a:	1c43      	adds	r3, r0, #1
 800f19c:	89a3      	ldrh	r3, [r4, #12]
 800f19e:	bf15      	itete	ne
 800f1a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f1a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f1a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f1aa:	81a3      	strheq	r3, [r4, #12]
 800f1ac:	bf18      	it	ne
 800f1ae:	81a3      	strhne	r3, [r4, #12]
 800f1b0:	bd10      	pop	{r4, pc}

0800f1b2 <__sclose>:
 800f1b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1b6:	f000 b877 	b.w	800f2a8 <_close_r>

0800f1ba <memset>:
 800f1ba:	4402      	add	r2, r0
 800f1bc:	4603      	mov	r3, r0
 800f1be:	4293      	cmp	r3, r2
 800f1c0:	d100      	bne.n	800f1c4 <memset+0xa>
 800f1c2:	4770      	bx	lr
 800f1c4:	f803 1b01 	strb.w	r1, [r3], #1
 800f1c8:	e7f9      	b.n	800f1be <memset+0x4>

0800f1ca <strncat>:
 800f1ca:	b530      	push	{r4, r5, lr}
 800f1cc:	4604      	mov	r4, r0
 800f1ce:	7825      	ldrb	r5, [r4, #0]
 800f1d0:	4623      	mov	r3, r4
 800f1d2:	3401      	adds	r4, #1
 800f1d4:	2d00      	cmp	r5, #0
 800f1d6:	d1fa      	bne.n	800f1ce <strncat+0x4>
 800f1d8:	3a01      	subs	r2, #1
 800f1da:	d304      	bcc.n	800f1e6 <strncat+0x1c>
 800f1dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1e0:	f803 4b01 	strb.w	r4, [r3], #1
 800f1e4:	b904      	cbnz	r4, 800f1e8 <strncat+0x1e>
 800f1e6:	bd30      	pop	{r4, r5, pc}
 800f1e8:	2a00      	cmp	r2, #0
 800f1ea:	d1f5      	bne.n	800f1d8 <strncat+0xe>
 800f1ec:	701a      	strb	r2, [r3, #0]
 800f1ee:	e7f3      	b.n	800f1d8 <strncat+0xe>

0800f1f0 <strtok>:
 800f1f0:	4b16      	ldr	r3, [pc, #88]	; (800f24c <strtok+0x5c>)
 800f1f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f1f4:	681e      	ldr	r6, [r3, #0]
 800f1f6:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800f1f8:	4605      	mov	r5, r0
 800f1fa:	b9fc      	cbnz	r4, 800f23c <strtok+0x4c>
 800f1fc:	2050      	movs	r0, #80	; 0x50
 800f1fe:	9101      	str	r1, [sp, #4]
 800f200:	f000 f936 	bl	800f470 <malloc>
 800f204:	9901      	ldr	r1, [sp, #4]
 800f206:	6470      	str	r0, [r6, #68]	; 0x44
 800f208:	4602      	mov	r2, r0
 800f20a:	b920      	cbnz	r0, 800f216 <strtok+0x26>
 800f20c:	4b10      	ldr	r3, [pc, #64]	; (800f250 <strtok+0x60>)
 800f20e:	4811      	ldr	r0, [pc, #68]	; (800f254 <strtok+0x64>)
 800f210:	215b      	movs	r1, #91	; 0x5b
 800f212:	f000 f8c3 	bl	800f39c <__assert_func>
 800f216:	e9c0 4400 	strd	r4, r4, [r0]
 800f21a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f21e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f222:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f226:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f22a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f22e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f232:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f236:	6184      	str	r4, [r0, #24]
 800f238:	7704      	strb	r4, [r0, #28]
 800f23a:	6244      	str	r4, [r0, #36]	; 0x24
 800f23c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800f23e:	2301      	movs	r3, #1
 800f240:	4628      	mov	r0, r5
 800f242:	b002      	add	sp, #8
 800f244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f248:	f000 b806 	b.w	800f258 <__strtok_r>
 800f24c:	20000174 	.word	0x20000174
 800f250:	08010d9a 	.word	0x08010d9a
 800f254:	08010db1 	.word	0x08010db1

0800f258 <__strtok_r>:
 800f258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f25a:	b908      	cbnz	r0, 800f260 <__strtok_r+0x8>
 800f25c:	6810      	ldr	r0, [r2, #0]
 800f25e:	b188      	cbz	r0, 800f284 <__strtok_r+0x2c>
 800f260:	4604      	mov	r4, r0
 800f262:	4620      	mov	r0, r4
 800f264:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f268:	460f      	mov	r7, r1
 800f26a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f26e:	b91e      	cbnz	r6, 800f278 <__strtok_r+0x20>
 800f270:	b965      	cbnz	r5, 800f28c <__strtok_r+0x34>
 800f272:	6015      	str	r5, [r2, #0]
 800f274:	4628      	mov	r0, r5
 800f276:	e005      	b.n	800f284 <__strtok_r+0x2c>
 800f278:	42b5      	cmp	r5, r6
 800f27a:	d1f6      	bne.n	800f26a <__strtok_r+0x12>
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d1f0      	bne.n	800f262 <__strtok_r+0xa>
 800f280:	6014      	str	r4, [r2, #0]
 800f282:	7003      	strb	r3, [r0, #0]
 800f284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f286:	461c      	mov	r4, r3
 800f288:	e00c      	b.n	800f2a4 <__strtok_r+0x4c>
 800f28a:	b915      	cbnz	r5, 800f292 <__strtok_r+0x3a>
 800f28c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f290:	460e      	mov	r6, r1
 800f292:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f296:	42ab      	cmp	r3, r5
 800f298:	d1f7      	bne.n	800f28a <__strtok_r+0x32>
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d0f3      	beq.n	800f286 <__strtok_r+0x2e>
 800f29e:	2300      	movs	r3, #0
 800f2a0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f2a4:	6014      	str	r4, [r2, #0]
 800f2a6:	e7ed      	b.n	800f284 <__strtok_r+0x2c>

0800f2a8 <_close_r>:
 800f2a8:	b538      	push	{r3, r4, r5, lr}
 800f2aa:	4d06      	ldr	r5, [pc, #24]	; (800f2c4 <_close_r+0x1c>)
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	4604      	mov	r4, r0
 800f2b0:	4608      	mov	r0, r1
 800f2b2:	602b      	str	r3, [r5, #0]
 800f2b4:	f7f3 fbfb 	bl	8002aae <_close>
 800f2b8:	1c43      	adds	r3, r0, #1
 800f2ba:	d102      	bne.n	800f2c2 <_close_r+0x1a>
 800f2bc:	682b      	ldr	r3, [r5, #0]
 800f2be:	b103      	cbz	r3, 800f2c2 <_close_r+0x1a>
 800f2c0:	6023      	str	r3, [r4, #0]
 800f2c2:	bd38      	pop	{r3, r4, r5, pc}
 800f2c4:	20003f94 	.word	0x20003f94

0800f2c8 <_lseek_r>:
 800f2c8:	b538      	push	{r3, r4, r5, lr}
 800f2ca:	4d07      	ldr	r5, [pc, #28]	; (800f2e8 <_lseek_r+0x20>)
 800f2cc:	4604      	mov	r4, r0
 800f2ce:	4608      	mov	r0, r1
 800f2d0:	4611      	mov	r1, r2
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	602a      	str	r2, [r5, #0]
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	f7f3 fc10 	bl	8002afc <_lseek>
 800f2dc:	1c43      	adds	r3, r0, #1
 800f2de:	d102      	bne.n	800f2e6 <_lseek_r+0x1e>
 800f2e0:	682b      	ldr	r3, [r5, #0]
 800f2e2:	b103      	cbz	r3, 800f2e6 <_lseek_r+0x1e>
 800f2e4:	6023      	str	r3, [r4, #0]
 800f2e6:	bd38      	pop	{r3, r4, r5, pc}
 800f2e8:	20003f94 	.word	0x20003f94

0800f2ec <_read_r>:
 800f2ec:	b538      	push	{r3, r4, r5, lr}
 800f2ee:	4d07      	ldr	r5, [pc, #28]	; (800f30c <_read_r+0x20>)
 800f2f0:	4604      	mov	r4, r0
 800f2f2:	4608      	mov	r0, r1
 800f2f4:	4611      	mov	r1, r2
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	602a      	str	r2, [r5, #0]
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	f7f3 fb9e 	bl	8002a3c <_read>
 800f300:	1c43      	adds	r3, r0, #1
 800f302:	d102      	bne.n	800f30a <_read_r+0x1e>
 800f304:	682b      	ldr	r3, [r5, #0]
 800f306:	b103      	cbz	r3, 800f30a <_read_r+0x1e>
 800f308:	6023      	str	r3, [r4, #0]
 800f30a:	bd38      	pop	{r3, r4, r5, pc}
 800f30c:	20003f94 	.word	0x20003f94

0800f310 <_write_r>:
 800f310:	b538      	push	{r3, r4, r5, lr}
 800f312:	4d07      	ldr	r5, [pc, #28]	; (800f330 <_write_r+0x20>)
 800f314:	4604      	mov	r4, r0
 800f316:	4608      	mov	r0, r1
 800f318:	4611      	mov	r1, r2
 800f31a:	2200      	movs	r2, #0
 800f31c:	602a      	str	r2, [r5, #0]
 800f31e:	461a      	mov	r2, r3
 800f320:	f7f3 fba9 	bl	8002a76 <_write>
 800f324:	1c43      	adds	r3, r0, #1
 800f326:	d102      	bne.n	800f32e <_write_r+0x1e>
 800f328:	682b      	ldr	r3, [r5, #0]
 800f32a:	b103      	cbz	r3, 800f32e <_write_r+0x1e>
 800f32c:	6023      	str	r3, [r4, #0]
 800f32e:	bd38      	pop	{r3, r4, r5, pc}
 800f330:	20003f94 	.word	0x20003f94

0800f334 <__errno>:
 800f334:	4b01      	ldr	r3, [pc, #4]	; (800f33c <__errno+0x8>)
 800f336:	6818      	ldr	r0, [r3, #0]
 800f338:	4770      	bx	lr
 800f33a:	bf00      	nop
 800f33c:	20000174 	.word	0x20000174

0800f340 <__libc_init_array>:
 800f340:	b570      	push	{r4, r5, r6, lr}
 800f342:	4d0d      	ldr	r5, [pc, #52]	; (800f378 <__libc_init_array+0x38>)
 800f344:	4c0d      	ldr	r4, [pc, #52]	; (800f37c <__libc_init_array+0x3c>)
 800f346:	1b64      	subs	r4, r4, r5
 800f348:	10a4      	asrs	r4, r4, #2
 800f34a:	2600      	movs	r6, #0
 800f34c:	42a6      	cmp	r6, r4
 800f34e:	d109      	bne.n	800f364 <__libc_init_array+0x24>
 800f350:	4d0b      	ldr	r5, [pc, #44]	; (800f380 <__libc_init_array+0x40>)
 800f352:	4c0c      	ldr	r4, [pc, #48]	; (800f384 <__libc_init_array+0x44>)
 800f354:	f001 f800 	bl	8010358 <_init>
 800f358:	1b64      	subs	r4, r4, r5
 800f35a:	10a4      	asrs	r4, r4, #2
 800f35c:	2600      	movs	r6, #0
 800f35e:	42a6      	cmp	r6, r4
 800f360:	d105      	bne.n	800f36e <__libc_init_array+0x2e>
 800f362:	bd70      	pop	{r4, r5, r6, pc}
 800f364:	f855 3b04 	ldr.w	r3, [r5], #4
 800f368:	4798      	blx	r3
 800f36a:	3601      	adds	r6, #1
 800f36c:	e7ee      	b.n	800f34c <__libc_init_array+0xc>
 800f36e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f372:	4798      	blx	r3
 800f374:	3601      	adds	r6, #1
 800f376:	e7f2      	b.n	800f35e <__libc_init_array+0x1e>
 800f378:	08010e84 	.word	0x08010e84
 800f37c:	08010e84 	.word	0x08010e84
 800f380:	08010e84 	.word	0x08010e84
 800f384:	08010e88 	.word	0x08010e88

0800f388 <__retarget_lock_acquire_recursive>:
 800f388:	4770      	bx	lr

0800f38a <__retarget_lock_release_recursive>:
 800f38a:	4770      	bx	lr

0800f38c <strcpy>:
 800f38c:	4603      	mov	r3, r0
 800f38e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f392:	f803 2b01 	strb.w	r2, [r3], #1
 800f396:	2a00      	cmp	r2, #0
 800f398:	d1f9      	bne.n	800f38e <strcpy+0x2>
 800f39a:	4770      	bx	lr

0800f39c <__assert_func>:
 800f39c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f39e:	4614      	mov	r4, r2
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	4b09      	ldr	r3, [pc, #36]	; (800f3c8 <__assert_func+0x2c>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	4605      	mov	r5, r0
 800f3a8:	68d8      	ldr	r0, [r3, #12]
 800f3aa:	b14c      	cbz	r4, 800f3c0 <__assert_func+0x24>
 800f3ac:	4b07      	ldr	r3, [pc, #28]	; (800f3cc <__assert_func+0x30>)
 800f3ae:	9100      	str	r1, [sp, #0]
 800f3b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f3b4:	4906      	ldr	r1, [pc, #24]	; (800f3d0 <__assert_func+0x34>)
 800f3b6:	462b      	mov	r3, r5
 800f3b8:	f000 fca4 	bl	800fd04 <fiprintf>
 800f3bc:	f000 fcec 	bl	800fd98 <abort>
 800f3c0:	4b04      	ldr	r3, [pc, #16]	; (800f3d4 <__assert_func+0x38>)
 800f3c2:	461c      	mov	r4, r3
 800f3c4:	e7f3      	b.n	800f3ae <__assert_func+0x12>
 800f3c6:	bf00      	nop
 800f3c8:	20000174 	.word	0x20000174
 800f3cc:	08010e0b 	.word	0x08010e0b
 800f3d0:	08010e18 	.word	0x08010e18
 800f3d4:	08010e46 	.word	0x08010e46

0800f3d8 <_free_r>:
 800f3d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3da:	2900      	cmp	r1, #0
 800f3dc:	d044      	beq.n	800f468 <_free_r+0x90>
 800f3de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3e2:	9001      	str	r0, [sp, #4]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	f1a1 0404 	sub.w	r4, r1, #4
 800f3ea:	bfb8      	it	lt
 800f3ec:	18e4      	addlt	r4, r4, r3
 800f3ee:	f000 f8e7 	bl	800f5c0 <__malloc_lock>
 800f3f2:	4a1e      	ldr	r2, [pc, #120]	; (800f46c <_free_r+0x94>)
 800f3f4:	9801      	ldr	r0, [sp, #4]
 800f3f6:	6813      	ldr	r3, [r2, #0]
 800f3f8:	b933      	cbnz	r3, 800f408 <_free_r+0x30>
 800f3fa:	6063      	str	r3, [r4, #4]
 800f3fc:	6014      	str	r4, [r2, #0]
 800f3fe:	b003      	add	sp, #12
 800f400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f404:	f000 b8e2 	b.w	800f5cc <__malloc_unlock>
 800f408:	42a3      	cmp	r3, r4
 800f40a:	d908      	bls.n	800f41e <_free_r+0x46>
 800f40c:	6825      	ldr	r5, [r4, #0]
 800f40e:	1961      	adds	r1, r4, r5
 800f410:	428b      	cmp	r3, r1
 800f412:	bf01      	itttt	eq
 800f414:	6819      	ldreq	r1, [r3, #0]
 800f416:	685b      	ldreq	r3, [r3, #4]
 800f418:	1949      	addeq	r1, r1, r5
 800f41a:	6021      	streq	r1, [r4, #0]
 800f41c:	e7ed      	b.n	800f3fa <_free_r+0x22>
 800f41e:	461a      	mov	r2, r3
 800f420:	685b      	ldr	r3, [r3, #4]
 800f422:	b10b      	cbz	r3, 800f428 <_free_r+0x50>
 800f424:	42a3      	cmp	r3, r4
 800f426:	d9fa      	bls.n	800f41e <_free_r+0x46>
 800f428:	6811      	ldr	r1, [r2, #0]
 800f42a:	1855      	adds	r5, r2, r1
 800f42c:	42a5      	cmp	r5, r4
 800f42e:	d10b      	bne.n	800f448 <_free_r+0x70>
 800f430:	6824      	ldr	r4, [r4, #0]
 800f432:	4421      	add	r1, r4
 800f434:	1854      	adds	r4, r2, r1
 800f436:	42a3      	cmp	r3, r4
 800f438:	6011      	str	r1, [r2, #0]
 800f43a:	d1e0      	bne.n	800f3fe <_free_r+0x26>
 800f43c:	681c      	ldr	r4, [r3, #0]
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	6053      	str	r3, [r2, #4]
 800f442:	440c      	add	r4, r1
 800f444:	6014      	str	r4, [r2, #0]
 800f446:	e7da      	b.n	800f3fe <_free_r+0x26>
 800f448:	d902      	bls.n	800f450 <_free_r+0x78>
 800f44a:	230c      	movs	r3, #12
 800f44c:	6003      	str	r3, [r0, #0]
 800f44e:	e7d6      	b.n	800f3fe <_free_r+0x26>
 800f450:	6825      	ldr	r5, [r4, #0]
 800f452:	1961      	adds	r1, r4, r5
 800f454:	428b      	cmp	r3, r1
 800f456:	bf04      	itt	eq
 800f458:	6819      	ldreq	r1, [r3, #0]
 800f45a:	685b      	ldreq	r3, [r3, #4]
 800f45c:	6063      	str	r3, [r4, #4]
 800f45e:	bf04      	itt	eq
 800f460:	1949      	addeq	r1, r1, r5
 800f462:	6021      	streq	r1, [r4, #0]
 800f464:	6054      	str	r4, [r2, #4]
 800f466:	e7ca      	b.n	800f3fe <_free_r+0x26>
 800f468:	b003      	add	sp, #12
 800f46a:	bd30      	pop	{r4, r5, pc}
 800f46c:	20003f9c 	.word	0x20003f9c

0800f470 <malloc>:
 800f470:	4b02      	ldr	r3, [pc, #8]	; (800f47c <malloc+0xc>)
 800f472:	4601      	mov	r1, r0
 800f474:	6818      	ldr	r0, [r3, #0]
 800f476:	f000 b823 	b.w	800f4c0 <_malloc_r>
 800f47a:	bf00      	nop
 800f47c:	20000174 	.word	0x20000174

0800f480 <sbrk_aligned>:
 800f480:	b570      	push	{r4, r5, r6, lr}
 800f482:	4e0e      	ldr	r6, [pc, #56]	; (800f4bc <sbrk_aligned+0x3c>)
 800f484:	460c      	mov	r4, r1
 800f486:	6831      	ldr	r1, [r6, #0]
 800f488:	4605      	mov	r5, r0
 800f48a:	b911      	cbnz	r1, 800f492 <sbrk_aligned+0x12>
 800f48c:	f000 fc66 	bl	800fd5c <_sbrk_r>
 800f490:	6030      	str	r0, [r6, #0]
 800f492:	4621      	mov	r1, r4
 800f494:	4628      	mov	r0, r5
 800f496:	f000 fc61 	bl	800fd5c <_sbrk_r>
 800f49a:	1c43      	adds	r3, r0, #1
 800f49c:	d00a      	beq.n	800f4b4 <sbrk_aligned+0x34>
 800f49e:	1cc4      	adds	r4, r0, #3
 800f4a0:	f024 0403 	bic.w	r4, r4, #3
 800f4a4:	42a0      	cmp	r0, r4
 800f4a6:	d007      	beq.n	800f4b8 <sbrk_aligned+0x38>
 800f4a8:	1a21      	subs	r1, r4, r0
 800f4aa:	4628      	mov	r0, r5
 800f4ac:	f000 fc56 	bl	800fd5c <_sbrk_r>
 800f4b0:	3001      	adds	r0, #1
 800f4b2:	d101      	bne.n	800f4b8 <sbrk_aligned+0x38>
 800f4b4:	f04f 34ff 	mov.w	r4, #4294967295
 800f4b8:	4620      	mov	r0, r4
 800f4ba:	bd70      	pop	{r4, r5, r6, pc}
 800f4bc:	20003fa0 	.word	0x20003fa0

0800f4c0 <_malloc_r>:
 800f4c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4c4:	1ccd      	adds	r5, r1, #3
 800f4c6:	f025 0503 	bic.w	r5, r5, #3
 800f4ca:	3508      	adds	r5, #8
 800f4cc:	2d0c      	cmp	r5, #12
 800f4ce:	bf38      	it	cc
 800f4d0:	250c      	movcc	r5, #12
 800f4d2:	2d00      	cmp	r5, #0
 800f4d4:	4607      	mov	r7, r0
 800f4d6:	db01      	blt.n	800f4dc <_malloc_r+0x1c>
 800f4d8:	42a9      	cmp	r1, r5
 800f4da:	d905      	bls.n	800f4e8 <_malloc_r+0x28>
 800f4dc:	230c      	movs	r3, #12
 800f4de:	603b      	str	r3, [r7, #0]
 800f4e0:	2600      	movs	r6, #0
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f5bc <_malloc_r+0xfc>
 800f4ec:	f000 f868 	bl	800f5c0 <__malloc_lock>
 800f4f0:	f8d8 3000 	ldr.w	r3, [r8]
 800f4f4:	461c      	mov	r4, r3
 800f4f6:	bb5c      	cbnz	r4, 800f550 <_malloc_r+0x90>
 800f4f8:	4629      	mov	r1, r5
 800f4fa:	4638      	mov	r0, r7
 800f4fc:	f7ff ffc0 	bl	800f480 <sbrk_aligned>
 800f500:	1c43      	adds	r3, r0, #1
 800f502:	4604      	mov	r4, r0
 800f504:	d155      	bne.n	800f5b2 <_malloc_r+0xf2>
 800f506:	f8d8 4000 	ldr.w	r4, [r8]
 800f50a:	4626      	mov	r6, r4
 800f50c:	2e00      	cmp	r6, #0
 800f50e:	d145      	bne.n	800f59c <_malloc_r+0xdc>
 800f510:	2c00      	cmp	r4, #0
 800f512:	d048      	beq.n	800f5a6 <_malloc_r+0xe6>
 800f514:	6823      	ldr	r3, [r4, #0]
 800f516:	4631      	mov	r1, r6
 800f518:	4638      	mov	r0, r7
 800f51a:	eb04 0903 	add.w	r9, r4, r3
 800f51e:	f000 fc1d 	bl	800fd5c <_sbrk_r>
 800f522:	4581      	cmp	r9, r0
 800f524:	d13f      	bne.n	800f5a6 <_malloc_r+0xe6>
 800f526:	6821      	ldr	r1, [r4, #0]
 800f528:	1a6d      	subs	r5, r5, r1
 800f52a:	4629      	mov	r1, r5
 800f52c:	4638      	mov	r0, r7
 800f52e:	f7ff ffa7 	bl	800f480 <sbrk_aligned>
 800f532:	3001      	adds	r0, #1
 800f534:	d037      	beq.n	800f5a6 <_malloc_r+0xe6>
 800f536:	6823      	ldr	r3, [r4, #0]
 800f538:	442b      	add	r3, r5
 800f53a:	6023      	str	r3, [r4, #0]
 800f53c:	f8d8 3000 	ldr.w	r3, [r8]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d038      	beq.n	800f5b6 <_malloc_r+0xf6>
 800f544:	685a      	ldr	r2, [r3, #4]
 800f546:	42a2      	cmp	r2, r4
 800f548:	d12b      	bne.n	800f5a2 <_malloc_r+0xe2>
 800f54a:	2200      	movs	r2, #0
 800f54c:	605a      	str	r2, [r3, #4]
 800f54e:	e00f      	b.n	800f570 <_malloc_r+0xb0>
 800f550:	6822      	ldr	r2, [r4, #0]
 800f552:	1b52      	subs	r2, r2, r5
 800f554:	d41f      	bmi.n	800f596 <_malloc_r+0xd6>
 800f556:	2a0b      	cmp	r2, #11
 800f558:	d917      	bls.n	800f58a <_malloc_r+0xca>
 800f55a:	1961      	adds	r1, r4, r5
 800f55c:	42a3      	cmp	r3, r4
 800f55e:	6025      	str	r5, [r4, #0]
 800f560:	bf18      	it	ne
 800f562:	6059      	strne	r1, [r3, #4]
 800f564:	6863      	ldr	r3, [r4, #4]
 800f566:	bf08      	it	eq
 800f568:	f8c8 1000 	streq.w	r1, [r8]
 800f56c:	5162      	str	r2, [r4, r5]
 800f56e:	604b      	str	r3, [r1, #4]
 800f570:	4638      	mov	r0, r7
 800f572:	f104 060b 	add.w	r6, r4, #11
 800f576:	f000 f829 	bl	800f5cc <__malloc_unlock>
 800f57a:	f026 0607 	bic.w	r6, r6, #7
 800f57e:	1d23      	adds	r3, r4, #4
 800f580:	1af2      	subs	r2, r6, r3
 800f582:	d0ae      	beq.n	800f4e2 <_malloc_r+0x22>
 800f584:	1b9b      	subs	r3, r3, r6
 800f586:	50a3      	str	r3, [r4, r2]
 800f588:	e7ab      	b.n	800f4e2 <_malloc_r+0x22>
 800f58a:	42a3      	cmp	r3, r4
 800f58c:	6862      	ldr	r2, [r4, #4]
 800f58e:	d1dd      	bne.n	800f54c <_malloc_r+0x8c>
 800f590:	f8c8 2000 	str.w	r2, [r8]
 800f594:	e7ec      	b.n	800f570 <_malloc_r+0xb0>
 800f596:	4623      	mov	r3, r4
 800f598:	6864      	ldr	r4, [r4, #4]
 800f59a:	e7ac      	b.n	800f4f6 <_malloc_r+0x36>
 800f59c:	4634      	mov	r4, r6
 800f59e:	6876      	ldr	r6, [r6, #4]
 800f5a0:	e7b4      	b.n	800f50c <_malloc_r+0x4c>
 800f5a2:	4613      	mov	r3, r2
 800f5a4:	e7cc      	b.n	800f540 <_malloc_r+0x80>
 800f5a6:	230c      	movs	r3, #12
 800f5a8:	603b      	str	r3, [r7, #0]
 800f5aa:	4638      	mov	r0, r7
 800f5ac:	f000 f80e 	bl	800f5cc <__malloc_unlock>
 800f5b0:	e797      	b.n	800f4e2 <_malloc_r+0x22>
 800f5b2:	6025      	str	r5, [r4, #0]
 800f5b4:	e7dc      	b.n	800f570 <_malloc_r+0xb0>
 800f5b6:	605b      	str	r3, [r3, #4]
 800f5b8:	deff      	udf	#255	; 0xff
 800f5ba:	bf00      	nop
 800f5bc:	20003f9c 	.word	0x20003f9c

0800f5c0 <__malloc_lock>:
 800f5c0:	4801      	ldr	r0, [pc, #4]	; (800f5c8 <__malloc_lock+0x8>)
 800f5c2:	f7ff bee1 	b.w	800f388 <__retarget_lock_acquire_recursive>
 800f5c6:	bf00      	nop
 800f5c8:	20003f98 	.word	0x20003f98

0800f5cc <__malloc_unlock>:
 800f5cc:	4801      	ldr	r0, [pc, #4]	; (800f5d4 <__malloc_unlock+0x8>)
 800f5ce:	f7ff bedc 	b.w	800f38a <__retarget_lock_release_recursive>
 800f5d2:	bf00      	nop
 800f5d4:	20003f98 	.word	0x20003f98

0800f5d8 <__ssputs_r>:
 800f5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5dc:	688e      	ldr	r6, [r1, #8]
 800f5de:	461f      	mov	r7, r3
 800f5e0:	42be      	cmp	r6, r7
 800f5e2:	680b      	ldr	r3, [r1, #0]
 800f5e4:	4682      	mov	sl, r0
 800f5e6:	460c      	mov	r4, r1
 800f5e8:	4690      	mov	r8, r2
 800f5ea:	d82c      	bhi.n	800f646 <__ssputs_r+0x6e>
 800f5ec:	898a      	ldrh	r2, [r1, #12]
 800f5ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f5f2:	d026      	beq.n	800f642 <__ssputs_r+0x6a>
 800f5f4:	6965      	ldr	r5, [r4, #20]
 800f5f6:	6909      	ldr	r1, [r1, #16]
 800f5f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f5fc:	eba3 0901 	sub.w	r9, r3, r1
 800f600:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f604:	1c7b      	adds	r3, r7, #1
 800f606:	444b      	add	r3, r9
 800f608:	106d      	asrs	r5, r5, #1
 800f60a:	429d      	cmp	r5, r3
 800f60c:	bf38      	it	cc
 800f60e:	461d      	movcc	r5, r3
 800f610:	0553      	lsls	r3, r2, #21
 800f612:	d527      	bpl.n	800f664 <__ssputs_r+0x8c>
 800f614:	4629      	mov	r1, r5
 800f616:	f7ff ff53 	bl	800f4c0 <_malloc_r>
 800f61a:	4606      	mov	r6, r0
 800f61c:	b360      	cbz	r0, 800f678 <__ssputs_r+0xa0>
 800f61e:	6921      	ldr	r1, [r4, #16]
 800f620:	464a      	mov	r2, r9
 800f622:	f000 fbab 	bl	800fd7c <memcpy>
 800f626:	89a3      	ldrh	r3, [r4, #12]
 800f628:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f62c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f630:	81a3      	strh	r3, [r4, #12]
 800f632:	6126      	str	r6, [r4, #16]
 800f634:	6165      	str	r5, [r4, #20]
 800f636:	444e      	add	r6, r9
 800f638:	eba5 0509 	sub.w	r5, r5, r9
 800f63c:	6026      	str	r6, [r4, #0]
 800f63e:	60a5      	str	r5, [r4, #8]
 800f640:	463e      	mov	r6, r7
 800f642:	42be      	cmp	r6, r7
 800f644:	d900      	bls.n	800f648 <__ssputs_r+0x70>
 800f646:	463e      	mov	r6, r7
 800f648:	6820      	ldr	r0, [r4, #0]
 800f64a:	4632      	mov	r2, r6
 800f64c:	4641      	mov	r1, r8
 800f64e:	f000 fb6b 	bl	800fd28 <memmove>
 800f652:	68a3      	ldr	r3, [r4, #8]
 800f654:	1b9b      	subs	r3, r3, r6
 800f656:	60a3      	str	r3, [r4, #8]
 800f658:	6823      	ldr	r3, [r4, #0]
 800f65a:	4433      	add	r3, r6
 800f65c:	6023      	str	r3, [r4, #0]
 800f65e:	2000      	movs	r0, #0
 800f660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f664:	462a      	mov	r2, r5
 800f666:	f000 fb9e 	bl	800fda6 <_realloc_r>
 800f66a:	4606      	mov	r6, r0
 800f66c:	2800      	cmp	r0, #0
 800f66e:	d1e0      	bne.n	800f632 <__ssputs_r+0x5a>
 800f670:	6921      	ldr	r1, [r4, #16]
 800f672:	4650      	mov	r0, sl
 800f674:	f7ff feb0 	bl	800f3d8 <_free_r>
 800f678:	230c      	movs	r3, #12
 800f67a:	f8ca 3000 	str.w	r3, [sl]
 800f67e:	89a3      	ldrh	r3, [r4, #12]
 800f680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f684:	81a3      	strh	r3, [r4, #12]
 800f686:	f04f 30ff 	mov.w	r0, #4294967295
 800f68a:	e7e9      	b.n	800f660 <__ssputs_r+0x88>

0800f68c <_svfiprintf_r>:
 800f68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f690:	4698      	mov	r8, r3
 800f692:	898b      	ldrh	r3, [r1, #12]
 800f694:	061b      	lsls	r3, r3, #24
 800f696:	b09d      	sub	sp, #116	; 0x74
 800f698:	4607      	mov	r7, r0
 800f69a:	460d      	mov	r5, r1
 800f69c:	4614      	mov	r4, r2
 800f69e:	d50e      	bpl.n	800f6be <_svfiprintf_r+0x32>
 800f6a0:	690b      	ldr	r3, [r1, #16]
 800f6a2:	b963      	cbnz	r3, 800f6be <_svfiprintf_r+0x32>
 800f6a4:	2140      	movs	r1, #64	; 0x40
 800f6a6:	f7ff ff0b 	bl	800f4c0 <_malloc_r>
 800f6aa:	6028      	str	r0, [r5, #0]
 800f6ac:	6128      	str	r0, [r5, #16]
 800f6ae:	b920      	cbnz	r0, 800f6ba <_svfiprintf_r+0x2e>
 800f6b0:	230c      	movs	r3, #12
 800f6b2:	603b      	str	r3, [r7, #0]
 800f6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f6b8:	e0d0      	b.n	800f85c <_svfiprintf_r+0x1d0>
 800f6ba:	2340      	movs	r3, #64	; 0x40
 800f6bc:	616b      	str	r3, [r5, #20]
 800f6be:	2300      	movs	r3, #0
 800f6c0:	9309      	str	r3, [sp, #36]	; 0x24
 800f6c2:	2320      	movs	r3, #32
 800f6c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f6c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6cc:	2330      	movs	r3, #48	; 0x30
 800f6ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f874 <_svfiprintf_r+0x1e8>
 800f6d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6d6:	f04f 0901 	mov.w	r9, #1
 800f6da:	4623      	mov	r3, r4
 800f6dc:	469a      	mov	sl, r3
 800f6de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6e2:	b10a      	cbz	r2, 800f6e8 <_svfiprintf_r+0x5c>
 800f6e4:	2a25      	cmp	r2, #37	; 0x25
 800f6e6:	d1f9      	bne.n	800f6dc <_svfiprintf_r+0x50>
 800f6e8:	ebba 0b04 	subs.w	fp, sl, r4
 800f6ec:	d00b      	beq.n	800f706 <_svfiprintf_r+0x7a>
 800f6ee:	465b      	mov	r3, fp
 800f6f0:	4622      	mov	r2, r4
 800f6f2:	4629      	mov	r1, r5
 800f6f4:	4638      	mov	r0, r7
 800f6f6:	f7ff ff6f 	bl	800f5d8 <__ssputs_r>
 800f6fa:	3001      	adds	r0, #1
 800f6fc:	f000 80a9 	beq.w	800f852 <_svfiprintf_r+0x1c6>
 800f700:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f702:	445a      	add	r2, fp
 800f704:	9209      	str	r2, [sp, #36]	; 0x24
 800f706:	f89a 3000 	ldrb.w	r3, [sl]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	f000 80a1 	beq.w	800f852 <_svfiprintf_r+0x1c6>
 800f710:	2300      	movs	r3, #0
 800f712:	f04f 32ff 	mov.w	r2, #4294967295
 800f716:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f71a:	f10a 0a01 	add.w	sl, sl, #1
 800f71e:	9304      	str	r3, [sp, #16]
 800f720:	9307      	str	r3, [sp, #28]
 800f722:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f726:	931a      	str	r3, [sp, #104]	; 0x68
 800f728:	4654      	mov	r4, sl
 800f72a:	2205      	movs	r2, #5
 800f72c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f730:	4850      	ldr	r0, [pc, #320]	; (800f874 <_svfiprintf_r+0x1e8>)
 800f732:	f7f0 fd6d 	bl	8000210 <memchr>
 800f736:	9a04      	ldr	r2, [sp, #16]
 800f738:	b9d8      	cbnz	r0, 800f772 <_svfiprintf_r+0xe6>
 800f73a:	06d0      	lsls	r0, r2, #27
 800f73c:	bf44      	itt	mi
 800f73e:	2320      	movmi	r3, #32
 800f740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f744:	0711      	lsls	r1, r2, #28
 800f746:	bf44      	itt	mi
 800f748:	232b      	movmi	r3, #43	; 0x2b
 800f74a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f74e:	f89a 3000 	ldrb.w	r3, [sl]
 800f752:	2b2a      	cmp	r3, #42	; 0x2a
 800f754:	d015      	beq.n	800f782 <_svfiprintf_r+0xf6>
 800f756:	9a07      	ldr	r2, [sp, #28]
 800f758:	4654      	mov	r4, sl
 800f75a:	2000      	movs	r0, #0
 800f75c:	f04f 0c0a 	mov.w	ip, #10
 800f760:	4621      	mov	r1, r4
 800f762:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f766:	3b30      	subs	r3, #48	; 0x30
 800f768:	2b09      	cmp	r3, #9
 800f76a:	d94d      	bls.n	800f808 <_svfiprintf_r+0x17c>
 800f76c:	b1b0      	cbz	r0, 800f79c <_svfiprintf_r+0x110>
 800f76e:	9207      	str	r2, [sp, #28]
 800f770:	e014      	b.n	800f79c <_svfiprintf_r+0x110>
 800f772:	eba0 0308 	sub.w	r3, r0, r8
 800f776:	fa09 f303 	lsl.w	r3, r9, r3
 800f77a:	4313      	orrs	r3, r2
 800f77c:	9304      	str	r3, [sp, #16]
 800f77e:	46a2      	mov	sl, r4
 800f780:	e7d2      	b.n	800f728 <_svfiprintf_r+0x9c>
 800f782:	9b03      	ldr	r3, [sp, #12]
 800f784:	1d19      	adds	r1, r3, #4
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	9103      	str	r1, [sp, #12]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	bfbb      	ittet	lt
 800f78e:	425b      	neglt	r3, r3
 800f790:	f042 0202 	orrlt.w	r2, r2, #2
 800f794:	9307      	strge	r3, [sp, #28]
 800f796:	9307      	strlt	r3, [sp, #28]
 800f798:	bfb8      	it	lt
 800f79a:	9204      	strlt	r2, [sp, #16]
 800f79c:	7823      	ldrb	r3, [r4, #0]
 800f79e:	2b2e      	cmp	r3, #46	; 0x2e
 800f7a0:	d10c      	bne.n	800f7bc <_svfiprintf_r+0x130>
 800f7a2:	7863      	ldrb	r3, [r4, #1]
 800f7a4:	2b2a      	cmp	r3, #42	; 0x2a
 800f7a6:	d134      	bne.n	800f812 <_svfiprintf_r+0x186>
 800f7a8:	9b03      	ldr	r3, [sp, #12]
 800f7aa:	1d1a      	adds	r2, r3, #4
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	9203      	str	r2, [sp, #12]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	bfb8      	it	lt
 800f7b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800f7b8:	3402      	adds	r4, #2
 800f7ba:	9305      	str	r3, [sp, #20]
 800f7bc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f884 <_svfiprintf_r+0x1f8>
 800f7c0:	7821      	ldrb	r1, [r4, #0]
 800f7c2:	2203      	movs	r2, #3
 800f7c4:	4650      	mov	r0, sl
 800f7c6:	f7f0 fd23 	bl	8000210 <memchr>
 800f7ca:	b138      	cbz	r0, 800f7dc <_svfiprintf_r+0x150>
 800f7cc:	9b04      	ldr	r3, [sp, #16]
 800f7ce:	eba0 000a 	sub.w	r0, r0, sl
 800f7d2:	2240      	movs	r2, #64	; 0x40
 800f7d4:	4082      	lsls	r2, r0
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	3401      	adds	r4, #1
 800f7da:	9304      	str	r3, [sp, #16]
 800f7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7e0:	4825      	ldr	r0, [pc, #148]	; (800f878 <_svfiprintf_r+0x1ec>)
 800f7e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7e6:	2206      	movs	r2, #6
 800f7e8:	f7f0 fd12 	bl	8000210 <memchr>
 800f7ec:	2800      	cmp	r0, #0
 800f7ee:	d038      	beq.n	800f862 <_svfiprintf_r+0x1d6>
 800f7f0:	4b22      	ldr	r3, [pc, #136]	; (800f87c <_svfiprintf_r+0x1f0>)
 800f7f2:	bb1b      	cbnz	r3, 800f83c <_svfiprintf_r+0x1b0>
 800f7f4:	9b03      	ldr	r3, [sp, #12]
 800f7f6:	3307      	adds	r3, #7
 800f7f8:	f023 0307 	bic.w	r3, r3, #7
 800f7fc:	3308      	adds	r3, #8
 800f7fe:	9303      	str	r3, [sp, #12]
 800f800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f802:	4433      	add	r3, r6
 800f804:	9309      	str	r3, [sp, #36]	; 0x24
 800f806:	e768      	b.n	800f6da <_svfiprintf_r+0x4e>
 800f808:	fb0c 3202 	mla	r2, ip, r2, r3
 800f80c:	460c      	mov	r4, r1
 800f80e:	2001      	movs	r0, #1
 800f810:	e7a6      	b.n	800f760 <_svfiprintf_r+0xd4>
 800f812:	2300      	movs	r3, #0
 800f814:	3401      	adds	r4, #1
 800f816:	9305      	str	r3, [sp, #20]
 800f818:	4619      	mov	r1, r3
 800f81a:	f04f 0c0a 	mov.w	ip, #10
 800f81e:	4620      	mov	r0, r4
 800f820:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f824:	3a30      	subs	r2, #48	; 0x30
 800f826:	2a09      	cmp	r2, #9
 800f828:	d903      	bls.n	800f832 <_svfiprintf_r+0x1a6>
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d0c6      	beq.n	800f7bc <_svfiprintf_r+0x130>
 800f82e:	9105      	str	r1, [sp, #20]
 800f830:	e7c4      	b.n	800f7bc <_svfiprintf_r+0x130>
 800f832:	fb0c 2101 	mla	r1, ip, r1, r2
 800f836:	4604      	mov	r4, r0
 800f838:	2301      	movs	r3, #1
 800f83a:	e7f0      	b.n	800f81e <_svfiprintf_r+0x192>
 800f83c:	ab03      	add	r3, sp, #12
 800f83e:	9300      	str	r3, [sp, #0]
 800f840:	462a      	mov	r2, r5
 800f842:	4b0f      	ldr	r3, [pc, #60]	; (800f880 <_svfiprintf_r+0x1f4>)
 800f844:	a904      	add	r1, sp, #16
 800f846:	4638      	mov	r0, r7
 800f848:	f3af 8000 	nop.w
 800f84c:	1c42      	adds	r2, r0, #1
 800f84e:	4606      	mov	r6, r0
 800f850:	d1d6      	bne.n	800f800 <_svfiprintf_r+0x174>
 800f852:	89ab      	ldrh	r3, [r5, #12]
 800f854:	065b      	lsls	r3, r3, #25
 800f856:	f53f af2d 	bmi.w	800f6b4 <_svfiprintf_r+0x28>
 800f85a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f85c:	b01d      	add	sp, #116	; 0x74
 800f85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f862:	ab03      	add	r3, sp, #12
 800f864:	9300      	str	r3, [sp, #0]
 800f866:	462a      	mov	r2, r5
 800f868:	4b05      	ldr	r3, [pc, #20]	; (800f880 <_svfiprintf_r+0x1f4>)
 800f86a:	a904      	add	r1, sp, #16
 800f86c:	4638      	mov	r0, r7
 800f86e:	f000 f879 	bl	800f964 <_printf_i>
 800f872:	e7eb      	b.n	800f84c <_svfiprintf_r+0x1c0>
 800f874:	08010e47 	.word	0x08010e47
 800f878:	08010e51 	.word	0x08010e51
 800f87c:	00000000 	.word	0x00000000
 800f880:	0800f5d9 	.word	0x0800f5d9
 800f884:	08010e4d 	.word	0x08010e4d

0800f888 <_printf_common>:
 800f888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f88c:	4616      	mov	r6, r2
 800f88e:	4699      	mov	r9, r3
 800f890:	688a      	ldr	r2, [r1, #8]
 800f892:	690b      	ldr	r3, [r1, #16]
 800f894:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f898:	4293      	cmp	r3, r2
 800f89a:	bfb8      	it	lt
 800f89c:	4613      	movlt	r3, r2
 800f89e:	6033      	str	r3, [r6, #0]
 800f8a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f8a4:	4607      	mov	r7, r0
 800f8a6:	460c      	mov	r4, r1
 800f8a8:	b10a      	cbz	r2, 800f8ae <_printf_common+0x26>
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	6033      	str	r3, [r6, #0]
 800f8ae:	6823      	ldr	r3, [r4, #0]
 800f8b0:	0699      	lsls	r1, r3, #26
 800f8b2:	bf42      	ittt	mi
 800f8b4:	6833      	ldrmi	r3, [r6, #0]
 800f8b6:	3302      	addmi	r3, #2
 800f8b8:	6033      	strmi	r3, [r6, #0]
 800f8ba:	6825      	ldr	r5, [r4, #0]
 800f8bc:	f015 0506 	ands.w	r5, r5, #6
 800f8c0:	d106      	bne.n	800f8d0 <_printf_common+0x48>
 800f8c2:	f104 0a19 	add.w	sl, r4, #25
 800f8c6:	68e3      	ldr	r3, [r4, #12]
 800f8c8:	6832      	ldr	r2, [r6, #0]
 800f8ca:	1a9b      	subs	r3, r3, r2
 800f8cc:	42ab      	cmp	r3, r5
 800f8ce:	dc26      	bgt.n	800f91e <_printf_common+0x96>
 800f8d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f8d4:	1e13      	subs	r3, r2, #0
 800f8d6:	6822      	ldr	r2, [r4, #0]
 800f8d8:	bf18      	it	ne
 800f8da:	2301      	movne	r3, #1
 800f8dc:	0692      	lsls	r2, r2, #26
 800f8de:	d42b      	bmi.n	800f938 <_printf_common+0xb0>
 800f8e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f8e4:	4649      	mov	r1, r9
 800f8e6:	4638      	mov	r0, r7
 800f8e8:	47c0      	blx	r8
 800f8ea:	3001      	adds	r0, #1
 800f8ec:	d01e      	beq.n	800f92c <_printf_common+0xa4>
 800f8ee:	6823      	ldr	r3, [r4, #0]
 800f8f0:	6922      	ldr	r2, [r4, #16]
 800f8f2:	f003 0306 	and.w	r3, r3, #6
 800f8f6:	2b04      	cmp	r3, #4
 800f8f8:	bf02      	ittt	eq
 800f8fa:	68e5      	ldreq	r5, [r4, #12]
 800f8fc:	6833      	ldreq	r3, [r6, #0]
 800f8fe:	1aed      	subeq	r5, r5, r3
 800f900:	68a3      	ldr	r3, [r4, #8]
 800f902:	bf0c      	ite	eq
 800f904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f908:	2500      	movne	r5, #0
 800f90a:	4293      	cmp	r3, r2
 800f90c:	bfc4      	itt	gt
 800f90e:	1a9b      	subgt	r3, r3, r2
 800f910:	18ed      	addgt	r5, r5, r3
 800f912:	2600      	movs	r6, #0
 800f914:	341a      	adds	r4, #26
 800f916:	42b5      	cmp	r5, r6
 800f918:	d11a      	bne.n	800f950 <_printf_common+0xc8>
 800f91a:	2000      	movs	r0, #0
 800f91c:	e008      	b.n	800f930 <_printf_common+0xa8>
 800f91e:	2301      	movs	r3, #1
 800f920:	4652      	mov	r2, sl
 800f922:	4649      	mov	r1, r9
 800f924:	4638      	mov	r0, r7
 800f926:	47c0      	blx	r8
 800f928:	3001      	adds	r0, #1
 800f92a:	d103      	bne.n	800f934 <_printf_common+0xac>
 800f92c:	f04f 30ff 	mov.w	r0, #4294967295
 800f930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f934:	3501      	adds	r5, #1
 800f936:	e7c6      	b.n	800f8c6 <_printf_common+0x3e>
 800f938:	18e1      	adds	r1, r4, r3
 800f93a:	1c5a      	adds	r2, r3, #1
 800f93c:	2030      	movs	r0, #48	; 0x30
 800f93e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f942:	4422      	add	r2, r4
 800f944:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f948:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f94c:	3302      	adds	r3, #2
 800f94e:	e7c7      	b.n	800f8e0 <_printf_common+0x58>
 800f950:	2301      	movs	r3, #1
 800f952:	4622      	mov	r2, r4
 800f954:	4649      	mov	r1, r9
 800f956:	4638      	mov	r0, r7
 800f958:	47c0      	blx	r8
 800f95a:	3001      	adds	r0, #1
 800f95c:	d0e6      	beq.n	800f92c <_printf_common+0xa4>
 800f95e:	3601      	adds	r6, #1
 800f960:	e7d9      	b.n	800f916 <_printf_common+0x8e>
	...

0800f964 <_printf_i>:
 800f964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f968:	7e0f      	ldrb	r7, [r1, #24]
 800f96a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f96c:	2f78      	cmp	r7, #120	; 0x78
 800f96e:	4691      	mov	r9, r2
 800f970:	4680      	mov	r8, r0
 800f972:	460c      	mov	r4, r1
 800f974:	469a      	mov	sl, r3
 800f976:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f97a:	d807      	bhi.n	800f98c <_printf_i+0x28>
 800f97c:	2f62      	cmp	r7, #98	; 0x62
 800f97e:	d80a      	bhi.n	800f996 <_printf_i+0x32>
 800f980:	2f00      	cmp	r7, #0
 800f982:	f000 80d4 	beq.w	800fb2e <_printf_i+0x1ca>
 800f986:	2f58      	cmp	r7, #88	; 0x58
 800f988:	f000 80c0 	beq.w	800fb0c <_printf_i+0x1a8>
 800f98c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f990:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f994:	e03a      	b.n	800fa0c <_printf_i+0xa8>
 800f996:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f99a:	2b15      	cmp	r3, #21
 800f99c:	d8f6      	bhi.n	800f98c <_printf_i+0x28>
 800f99e:	a101      	add	r1, pc, #4	; (adr r1, 800f9a4 <_printf_i+0x40>)
 800f9a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f9a4:	0800f9fd 	.word	0x0800f9fd
 800f9a8:	0800fa11 	.word	0x0800fa11
 800f9ac:	0800f98d 	.word	0x0800f98d
 800f9b0:	0800f98d 	.word	0x0800f98d
 800f9b4:	0800f98d 	.word	0x0800f98d
 800f9b8:	0800f98d 	.word	0x0800f98d
 800f9bc:	0800fa11 	.word	0x0800fa11
 800f9c0:	0800f98d 	.word	0x0800f98d
 800f9c4:	0800f98d 	.word	0x0800f98d
 800f9c8:	0800f98d 	.word	0x0800f98d
 800f9cc:	0800f98d 	.word	0x0800f98d
 800f9d0:	0800fb15 	.word	0x0800fb15
 800f9d4:	0800fa3d 	.word	0x0800fa3d
 800f9d8:	0800facf 	.word	0x0800facf
 800f9dc:	0800f98d 	.word	0x0800f98d
 800f9e0:	0800f98d 	.word	0x0800f98d
 800f9e4:	0800fb37 	.word	0x0800fb37
 800f9e8:	0800f98d 	.word	0x0800f98d
 800f9ec:	0800fa3d 	.word	0x0800fa3d
 800f9f0:	0800f98d 	.word	0x0800f98d
 800f9f4:	0800f98d 	.word	0x0800f98d
 800f9f8:	0800fad7 	.word	0x0800fad7
 800f9fc:	682b      	ldr	r3, [r5, #0]
 800f9fe:	1d1a      	adds	r2, r3, #4
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	602a      	str	r2, [r5, #0]
 800fa04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	e09f      	b.n	800fb50 <_printf_i+0x1ec>
 800fa10:	6820      	ldr	r0, [r4, #0]
 800fa12:	682b      	ldr	r3, [r5, #0]
 800fa14:	0607      	lsls	r7, r0, #24
 800fa16:	f103 0104 	add.w	r1, r3, #4
 800fa1a:	6029      	str	r1, [r5, #0]
 800fa1c:	d501      	bpl.n	800fa22 <_printf_i+0xbe>
 800fa1e:	681e      	ldr	r6, [r3, #0]
 800fa20:	e003      	b.n	800fa2a <_printf_i+0xc6>
 800fa22:	0646      	lsls	r6, r0, #25
 800fa24:	d5fb      	bpl.n	800fa1e <_printf_i+0xba>
 800fa26:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fa2a:	2e00      	cmp	r6, #0
 800fa2c:	da03      	bge.n	800fa36 <_printf_i+0xd2>
 800fa2e:	232d      	movs	r3, #45	; 0x2d
 800fa30:	4276      	negs	r6, r6
 800fa32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa36:	485a      	ldr	r0, [pc, #360]	; (800fba0 <_printf_i+0x23c>)
 800fa38:	230a      	movs	r3, #10
 800fa3a:	e012      	b.n	800fa62 <_printf_i+0xfe>
 800fa3c:	682b      	ldr	r3, [r5, #0]
 800fa3e:	6820      	ldr	r0, [r4, #0]
 800fa40:	1d19      	adds	r1, r3, #4
 800fa42:	6029      	str	r1, [r5, #0]
 800fa44:	0605      	lsls	r5, r0, #24
 800fa46:	d501      	bpl.n	800fa4c <_printf_i+0xe8>
 800fa48:	681e      	ldr	r6, [r3, #0]
 800fa4a:	e002      	b.n	800fa52 <_printf_i+0xee>
 800fa4c:	0641      	lsls	r1, r0, #25
 800fa4e:	d5fb      	bpl.n	800fa48 <_printf_i+0xe4>
 800fa50:	881e      	ldrh	r6, [r3, #0]
 800fa52:	4853      	ldr	r0, [pc, #332]	; (800fba0 <_printf_i+0x23c>)
 800fa54:	2f6f      	cmp	r7, #111	; 0x6f
 800fa56:	bf0c      	ite	eq
 800fa58:	2308      	moveq	r3, #8
 800fa5a:	230a      	movne	r3, #10
 800fa5c:	2100      	movs	r1, #0
 800fa5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa62:	6865      	ldr	r5, [r4, #4]
 800fa64:	60a5      	str	r5, [r4, #8]
 800fa66:	2d00      	cmp	r5, #0
 800fa68:	bfa2      	ittt	ge
 800fa6a:	6821      	ldrge	r1, [r4, #0]
 800fa6c:	f021 0104 	bicge.w	r1, r1, #4
 800fa70:	6021      	strge	r1, [r4, #0]
 800fa72:	b90e      	cbnz	r6, 800fa78 <_printf_i+0x114>
 800fa74:	2d00      	cmp	r5, #0
 800fa76:	d04b      	beq.n	800fb10 <_printf_i+0x1ac>
 800fa78:	4615      	mov	r5, r2
 800fa7a:	fbb6 f1f3 	udiv	r1, r6, r3
 800fa7e:	fb03 6711 	mls	r7, r3, r1, r6
 800fa82:	5dc7      	ldrb	r7, [r0, r7]
 800fa84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fa88:	4637      	mov	r7, r6
 800fa8a:	42bb      	cmp	r3, r7
 800fa8c:	460e      	mov	r6, r1
 800fa8e:	d9f4      	bls.n	800fa7a <_printf_i+0x116>
 800fa90:	2b08      	cmp	r3, #8
 800fa92:	d10b      	bne.n	800faac <_printf_i+0x148>
 800fa94:	6823      	ldr	r3, [r4, #0]
 800fa96:	07de      	lsls	r6, r3, #31
 800fa98:	d508      	bpl.n	800faac <_printf_i+0x148>
 800fa9a:	6923      	ldr	r3, [r4, #16]
 800fa9c:	6861      	ldr	r1, [r4, #4]
 800fa9e:	4299      	cmp	r1, r3
 800faa0:	bfde      	ittt	le
 800faa2:	2330      	movle	r3, #48	; 0x30
 800faa4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800faa8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800faac:	1b52      	subs	r2, r2, r5
 800faae:	6122      	str	r2, [r4, #16]
 800fab0:	f8cd a000 	str.w	sl, [sp]
 800fab4:	464b      	mov	r3, r9
 800fab6:	aa03      	add	r2, sp, #12
 800fab8:	4621      	mov	r1, r4
 800faba:	4640      	mov	r0, r8
 800fabc:	f7ff fee4 	bl	800f888 <_printf_common>
 800fac0:	3001      	adds	r0, #1
 800fac2:	d14a      	bne.n	800fb5a <_printf_i+0x1f6>
 800fac4:	f04f 30ff 	mov.w	r0, #4294967295
 800fac8:	b004      	add	sp, #16
 800faca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800face:	6823      	ldr	r3, [r4, #0]
 800fad0:	f043 0320 	orr.w	r3, r3, #32
 800fad4:	6023      	str	r3, [r4, #0]
 800fad6:	4833      	ldr	r0, [pc, #204]	; (800fba4 <_printf_i+0x240>)
 800fad8:	2778      	movs	r7, #120	; 0x78
 800fada:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fade:	6823      	ldr	r3, [r4, #0]
 800fae0:	6829      	ldr	r1, [r5, #0]
 800fae2:	061f      	lsls	r7, r3, #24
 800fae4:	f851 6b04 	ldr.w	r6, [r1], #4
 800fae8:	d402      	bmi.n	800faf0 <_printf_i+0x18c>
 800faea:	065f      	lsls	r7, r3, #25
 800faec:	bf48      	it	mi
 800faee:	b2b6      	uxthmi	r6, r6
 800faf0:	07df      	lsls	r7, r3, #31
 800faf2:	bf48      	it	mi
 800faf4:	f043 0320 	orrmi.w	r3, r3, #32
 800faf8:	6029      	str	r1, [r5, #0]
 800fafa:	bf48      	it	mi
 800fafc:	6023      	strmi	r3, [r4, #0]
 800fafe:	b91e      	cbnz	r6, 800fb08 <_printf_i+0x1a4>
 800fb00:	6823      	ldr	r3, [r4, #0]
 800fb02:	f023 0320 	bic.w	r3, r3, #32
 800fb06:	6023      	str	r3, [r4, #0]
 800fb08:	2310      	movs	r3, #16
 800fb0a:	e7a7      	b.n	800fa5c <_printf_i+0xf8>
 800fb0c:	4824      	ldr	r0, [pc, #144]	; (800fba0 <_printf_i+0x23c>)
 800fb0e:	e7e4      	b.n	800fada <_printf_i+0x176>
 800fb10:	4615      	mov	r5, r2
 800fb12:	e7bd      	b.n	800fa90 <_printf_i+0x12c>
 800fb14:	682b      	ldr	r3, [r5, #0]
 800fb16:	6826      	ldr	r6, [r4, #0]
 800fb18:	6961      	ldr	r1, [r4, #20]
 800fb1a:	1d18      	adds	r0, r3, #4
 800fb1c:	6028      	str	r0, [r5, #0]
 800fb1e:	0635      	lsls	r5, r6, #24
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	d501      	bpl.n	800fb28 <_printf_i+0x1c4>
 800fb24:	6019      	str	r1, [r3, #0]
 800fb26:	e002      	b.n	800fb2e <_printf_i+0x1ca>
 800fb28:	0670      	lsls	r0, r6, #25
 800fb2a:	d5fb      	bpl.n	800fb24 <_printf_i+0x1c0>
 800fb2c:	8019      	strh	r1, [r3, #0]
 800fb2e:	2300      	movs	r3, #0
 800fb30:	6123      	str	r3, [r4, #16]
 800fb32:	4615      	mov	r5, r2
 800fb34:	e7bc      	b.n	800fab0 <_printf_i+0x14c>
 800fb36:	682b      	ldr	r3, [r5, #0]
 800fb38:	1d1a      	adds	r2, r3, #4
 800fb3a:	602a      	str	r2, [r5, #0]
 800fb3c:	681d      	ldr	r5, [r3, #0]
 800fb3e:	6862      	ldr	r2, [r4, #4]
 800fb40:	2100      	movs	r1, #0
 800fb42:	4628      	mov	r0, r5
 800fb44:	f7f0 fb64 	bl	8000210 <memchr>
 800fb48:	b108      	cbz	r0, 800fb4e <_printf_i+0x1ea>
 800fb4a:	1b40      	subs	r0, r0, r5
 800fb4c:	6060      	str	r0, [r4, #4]
 800fb4e:	6863      	ldr	r3, [r4, #4]
 800fb50:	6123      	str	r3, [r4, #16]
 800fb52:	2300      	movs	r3, #0
 800fb54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb58:	e7aa      	b.n	800fab0 <_printf_i+0x14c>
 800fb5a:	6923      	ldr	r3, [r4, #16]
 800fb5c:	462a      	mov	r2, r5
 800fb5e:	4649      	mov	r1, r9
 800fb60:	4640      	mov	r0, r8
 800fb62:	47d0      	blx	sl
 800fb64:	3001      	adds	r0, #1
 800fb66:	d0ad      	beq.n	800fac4 <_printf_i+0x160>
 800fb68:	6823      	ldr	r3, [r4, #0]
 800fb6a:	079b      	lsls	r3, r3, #30
 800fb6c:	d413      	bmi.n	800fb96 <_printf_i+0x232>
 800fb6e:	68e0      	ldr	r0, [r4, #12]
 800fb70:	9b03      	ldr	r3, [sp, #12]
 800fb72:	4298      	cmp	r0, r3
 800fb74:	bfb8      	it	lt
 800fb76:	4618      	movlt	r0, r3
 800fb78:	e7a6      	b.n	800fac8 <_printf_i+0x164>
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	4632      	mov	r2, r6
 800fb7e:	4649      	mov	r1, r9
 800fb80:	4640      	mov	r0, r8
 800fb82:	47d0      	blx	sl
 800fb84:	3001      	adds	r0, #1
 800fb86:	d09d      	beq.n	800fac4 <_printf_i+0x160>
 800fb88:	3501      	adds	r5, #1
 800fb8a:	68e3      	ldr	r3, [r4, #12]
 800fb8c:	9903      	ldr	r1, [sp, #12]
 800fb8e:	1a5b      	subs	r3, r3, r1
 800fb90:	42ab      	cmp	r3, r5
 800fb92:	dcf2      	bgt.n	800fb7a <_printf_i+0x216>
 800fb94:	e7eb      	b.n	800fb6e <_printf_i+0x20a>
 800fb96:	2500      	movs	r5, #0
 800fb98:	f104 0619 	add.w	r6, r4, #25
 800fb9c:	e7f5      	b.n	800fb8a <_printf_i+0x226>
 800fb9e:	bf00      	nop
 800fba0:	08010e58 	.word	0x08010e58
 800fba4:	08010e69 	.word	0x08010e69

0800fba8 <__sflush_r>:
 800fba8:	898a      	ldrh	r2, [r1, #12]
 800fbaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbae:	4605      	mov	r5, r0
 800fbb0:	0710      	lsls	r0, r2, #28
 800fbb2:	460c      	mov	r4, r1
 800fbb4:	d458      	bmi.n	800fc68 <__sflush_r+0xc0>
 800fbb6:	684b      	ldr	r3, [r1, #4]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	dc05      	bgt.n	800fbc8 <__sflush_r+0x20>
 800fbbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	dc02      	bgt.n	800fbc8 <__sflush_r+0x20>
 800fbc2:	2000      	movs	r0, #0
 800fbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fbca:	2e00      	cmp	r6, #0
 800fbcc:	d0f9      	beq.n	800fbc2 <__sflush_r+0x1a>
 800fbce:	2300      	movs	r3, #0
 800fbd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fbd4:	682f      	ldr	r7, [r5, #0]
 800fbd6:	6a21      	ldr	r1, [r4, #32]
 800fbd8:	602b      	str	r3, [r5, #0]
 800fbda:	d032      	beq.n	800fc42 <__sflush_r+0x9a>
 800fbdc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fbde:	89a3      	ldrh	r3, [r4, #12]
 800fbe0:	075a      	lsls	r2, r3, #29
 800fbe2:	d505      	bpl.n	800fbf0 <__sflush_r+0x48>
 800fbe4:	6863      	ldr	r3, [r4, #4]
 800fbe6:	1ac0      	subs	r0, r0, r3
 800fbe8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fbea:	b10b      	cbz	r3, 800fbf0 <__sflush_r+0x48>
 800fbec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fbee:	1ac0      	subs	r0, r0, r3
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	4602      	mov	r2, r0
 800fbf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fbf6:	6a21      	ldr	r1, [r4, #32]
 800fbf8:	4628      	mov	r0, r5
 800fbfa:	47b0      	blx	r6
 800fbfc:	1c43      	adds	r3, r0, #1
 800fbfe:	89a3      	ldrh	r3, [r4, #12]
 800fc00:	d106      	bne.n	800fc10 <__sflush_r+0x68>
 800fc02:	6829      	ldr	r1, [r5, #0]
 800fc04:	291d      	cmp	r1, #29
 800fc06:	d82b      	bhi.n	800fc60 <__sflush_r+0xb8>
 800fc08:	4a29      	ldr	r2, [pc, #164]	; (800fcb0 <__sflush_r+0x108>)
 800fc0a:	410a      	asrs	r2, r1
 800fc0c:	07d6      	lsls	r6, r2, #31
 800fc0e:	d427      	bmi.n	800fc60 <__sflush_r+0xb8>
 800fc10:	2200      	movs	r2, #0
 800fc12:	6062      	str	r2, [r4, #4]
 800fc14:	04d9      	lsls	r1, r3, #19
 800fc16:	6922      	ldr	r2, [r4, #16]
 800fc18:	6022      	str	r2, [r4, #0]
 800fc1a:	d504      	bpl.n	800fc26 <__sflush_r+0x7e>
 800fc1c:	1c42      	adds	r2, r0, #1
 800fc1e:	d101      	bne.n	800fc24 <__sflush_r+0x7c>
 800fc20:	682b      	ldr	r3, [r5, #0]
 800fc22:	b903      	cbnz	r3, 800fc26 <__sflush_r+0x7e>
 800fc24:	6560      	str	r0, [r4, #84]	; 0x54
 800fc26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc28:	602f      	str	r7, [r5, #0]
 800fc2a:	2900      	cmp	r1, #0
 800fc2c:	d0c9      	beq.n	800fbc2 <__sflush_r+0x1a>
 800fc2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc32:	4299      	cmp	r1, r3
 800fc34:	d002      	beq.n	800fc3c <__sflush_r+0x94>
 800fc36:	4628      	mov	r0, r5
 800fc38:	f7ff fbce 	bl	800f3d8 <_free_r>
 800fc3c:	2000      	movs	r0, #0
 800fc3e:	6360      	str	r0, [r4, #52]	; 0x34
 800fc40:	e7c0      	b.n	800fbc4 <__sflush_r+0x1c>
 800fc42:	2301      	movs	r3, #1
 800fc44:	4628      	mov	r0, r5
 800fc46:	47b0      	blx	r6
 800fc48:	1c41      	adds	r1, r0, #1
 800fc4a:	d1c8      	bne.n	800fbde <__sflush_r+0x36>
 800fc4c:	682b      	ldr	r3, [r5, #0]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d0c5      	beq.n	800fbde <__sflush_r+0x36>
 800fc52:	2b1d      	cmp	r3, #29
 800fc54:	d001      	beq.n	800fc5a <__sflush_r+0xb2>
 800fc56:	2b16      	cmp	r3, #22
 800fc58:	d101      	bne.n	800fc5e <__sflush_r+0xb6>
 800fc5a:	602f      	str	r7, [r5, #0]
 800fc5c:	e7b1      	b.n	800fbc2 <__sflush_r+0x1a>
 800fc5e:	89a3      	ldrh	r3, [r4, #12]
 800fc60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc64:	81a3      	strh	r3, [r4, #12]
 800fc66:	e7ad      	b.n	800fbc4 <__sflush_r+0x1c>
 800fc68:	690f      	ldr	r7, [r1, #16]
 800fc6a:	2f00      	cmp	r7, #0
 800fc6c:	d0a9      	beq.n	800fbc2 <__sflush_r+0x1a>
 800fc6e:	0793      	lsls	r3, r2, #30
 800fc70:	680e      	ldr	r6, [r1, #0]
 800fc72:	bf08      	it	eq
 800fc74:	694b      	ldreq	r3, [r1, #20]
 800fc76:	600f      	str	r7, [r1, #0]
 800fc78:	bf18      	it	ne
 800fc7a:	2300      	movne	r3, #0
 800fc7c:	eba6 0807 	sub.w	r8, r6, r7
 800fc80:	608b      	str	r3, [r1, #8]
 800fc82:	f1b8 0f00 	cmp.w	r8, #0
 800fc86:	dd9c      	ble.n	800fbc2 <__sflush_r+0x1a>
 800fc88:	6a21      	ldr	r1, [r4, #32]
 800fc8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fc8c:	4643      	mov	r3, r8
 800fc8e:	463a      	mov	r2, r7
 800fc90:	4628      	mov	r0, r5
 800fc92:	47b0      	blx	r6
 800fc94:	2800      	cmp	r0, #0
 800fc96:	dc06      	bgt.n	800fca6 <__sflush_r+0xfe>
 800fc98:	89a3      	ldrh	r3, [r4, #12]
 800fc9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc9e:	81a3      	strh	r3, [r4, #12]
 800fca0:	f04f 30ff 	mov.w	r0, #4294967295
 800fca4:	e78e      	b.n	800fbc4 <__sflush_r+0x1c>
 800fca6:	4407      	add	r7, r0
 800fca8:	eba8 0800 	sub.w	r8, r8, r0
 800fcac:	e7e9      	b.n	800fc82 <__sflush_r+0xda>
 800fcae:	bf00      	nop
 800fcb0:	dfbffffe 	.word	0xdfbffffe

0800fcb4 <_fflush_r>:
 800fcb4:	b538      	push	{r3, r4, r5, lr}
 800fcb6:	690b      	ldr	r3, [r1, #16]
 800fcb8:	4605      	mov	r5, r0
 800fcba:	460c      	mov	r4, r1
 800fcbc:	b913      	cbnz	r3, 800fcc4 <_fflush_r+0x10>
 800fcbe:	2500      	movs	r5, #0
 800fcc0:	4628      	mov	r0, r5
 800fcc2:	bd38      	pop	{r3, r4, r5, pc}
 800fcc4:	b118      	cbz	r0, 800fcce <_fflush_r+0x1a>
 800fcc6:	6a03      	ldr	r3, [r0, #32]
 800fcc8:	b90b      	cbnz	r3, 800fcce <_fflush_r+0x1a>
 800fcca:	f7ff f9dd 	bl	800f088 <__sinit>
 800fcce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d0f3      	beq.n	800fcbe <_fflush_r+0xa>
 800fcd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fcd8:	07d0      	lsls	r0, r2, #31
 800fcda:	d404      	bmi.n	800fce6 <_fflush_r+0x32>
 800fcdc:	0599      	lsls	r1, r3, #22
 800fcde:	d402      	bmi.n	800fce6 <_fflush_r+0x32>
 800fce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fce2:	f7ff fb51 	bl	800f388 <__retarget_lock_acquire_recursive>
 800fce6:	4628      	mov	r0, r5
 800fce8:	4621      	mov	r1, r4
 800fcea:	f7ff ff5d 	bl	800fba8 <__sflush_r>
 800fcee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fcf0:	07da      	lsls	r2, r3, #31
 800fcf2:	4605      	mov	r5, r0
 800fcf4:	d4e4      	bmi.n	800fcc0 <_fflush_r+0xc>
 800fcf6:	89a3      	ldrh	r3, [r4, #12]
 800fcf8:	059b      	lsls	r3, r3, #22
 800fcfa:	d4e1      	bmi.n	800fcc0 <_fflush_r+0xc>
 800fcfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcfe:	f7ff fb44 	bl	800f38a <__retarget_lock_release_recursive>
 800fd02:	e7dd      	b.n	800fcc0 <_fflush_r+0xc>

0800fd04 <fiprintf>:
 800fd04:	b40e      	push	{r1, r2, r3}
 800fd06:	b503      	push	{r0, r1, lr}
 800fd08:	4601      	mov	r1, r0
 800fd0a:	ab03      	add	r3, sp, #12
 800fd0c:	4805      	ldr	r0, [pc, #20]	; (800fd24 <fiprintf+0x20>)
 800fd0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd12:	6800      	ldr	r0, [r0, #0]
 800fd14:	9301      	str	r3, [sp, #4]
 800fd16:	f000 f89f 	bl	800fe58 <_vfiprintf_r>
 800fd1a:	b002      	add	sp, #8
 800fd1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd20:	b003      	add	sp, #12
 800fd22:	4770      	bx	lr
 800fd24:	20000174 	.word	0x20000174

0800fd28 <memmove>:
 800fd28:	4288      	cmp	r0, r1
 800fd2a:	b510      	push	{r4, lr}
 800fd2c:	eb01 0402 	add.w	r4, r1, r2
 800fd30:	d902      	bls.n	800fd38 <memmove+0x10>
 800fd32:	4284      	cmp	r4, r0
 800fd34:	4623      	mov	r3, r4
 800fd36:	d807      	bhi.n	800fd48 <memmove+0x20>
 800fd38:	1e43      	subs	r3, r0, #1
 800fd3a:	42a1      	cmp	r1, r4
 800fd3c:	d008      	beq.n	800fd50 <memmove+0x28>
 800fd3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd46:	e7f8      	b.n	800fd3a <memmove+0x12>
 800fd48:	4402      	add	r2, r0
 800fd4a:	4601      	mov	r1, r0
 800fd4c:	428a      	cmp	r2, r1
 800fd4e:	d100      	bne.n	800fd52 <memmove+0x2a>
 800fd50:	bd10      	pop	{r4, pc}
 800fd52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fd56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fd5a:	e7f7      	b.n	800fd4c <memmove+0x24>

0800fd5c <_sbrk_r>:
 800fd5c:	b538      	push	{r3, r4, r5, lr}
 800fd5e:	4d06      	ldr	r5, [pc, #24]	; (800fd78 <_sbrk_r+0x1c>)
 800fd60:	2300      	movs	r3, #0
 800fd62:	4604      	mov	r4, r0
 800fd64:	4608      	mov	r0, r1
 800fd66:	602b      	str	r3, [r5, #0]
 800fd68:	f7f2 fed6 	bl	8002b18 <_sbrk>
 800fd6c:	1c43      	adds	r3, r0, #1
 800fd6e:	d102      	bne.n	800fd76 <_sbrk_r+0x1a>
 800fd70:	682b      	ldr	r3, [r5, #0]
 800fd72:	b103      	cbz	r3, 800fd76 <_sbrk_r+0x1a>
 800fd74:	6023      	str	r3, [r4, #0]
 800fd76:	bd38      	pop	{r3, r4, r5, pc}
 800fd78:	20003f94 	.word	0x20003f94

0800fd7c <memcpy>:
 800fd7c:	440a      	add	r2, r1
 800fd7e:	4291      	cmp	r1, r2
 800fd80:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd84:	d100      	bne.n	800fd88 <memcpy+0xc>
 800fd86:	4770      	bx	lr
 800fd88:	b510      	push	{r4, lr}
 800fd8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd92:	4291      	cmp	r1, r2
 800fd94:	d1f9      	bne.n	800fd8a <memcpy+0xe>
 800fd96:	bd10      	pop	{r4, pc}

0800fd98 <abort>:
 800fd98:	b508      	push	{r3, lr}
 800fd9a:	2006      	movs	r0, #6
 800fd9c:	f000 fa34 	bl	8010208 <raise>
 800fda0:	2001      	movs	r0, #1
 800fda2:	f7f2 fe41 	bl	8002a28 <_exit>

0800fda6 <_realloc_r>:
 800fda6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdaa:	4680      	mov	r8, r0
 800fdac:	4614      	mov	r4, r2
 800fdae:	460e      	mov	r6, r1
 800fdb0:	b921      	cbnz	r1, 800fdbc <_realloc_r+0x16>
 800fdb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdb6:	4611      	mov	r1, r2
 800fdb8:	f7ff bb82 	b.w	800f4c0 <_malloc_r>
 800fdbc:	b92a      	cbnz	r2, 800fdca <_realloc_r+0x24>
 800fdbe:	f7ff fb0b 	bl	800f3d8 <_free_r>
 800fdc2:	4625      	mov	r5, r4
 800fdc4:	4628      	mov	r0, r5
 800fdc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdca:	f000 fa39 	bl	8010240 <_malloc_usable_size_r>
 800fdce:	4284      	cmp	r4, r0
 800fdd0:	4607      	mov	r7, r0
 800fdd2:	d802      	bhi.n	800fdda <_realloc_r+0x34>
 800fdd4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fdd8:	d812      	bhi.n	800fe00 <_realloc_r+0x5a>
 800fdda:	4621      	mov	r1, r4
 800fddc:	4640      	mov	r0, r8
 800fdde:	f7ff fb6f 	bl	800f4c0 <_malloc_r>
 800fde2:	4605      	mov	r5, r0
 800fde4:	2800      	cmp	r0, #0
 800fde6:	d0ed      	beq.n	800fdc4 <_realloc_r+0x1e>
 800fde8:	42bc      	cmp	r4, r7
 800fdea:	4622      	mov	r2, r4
 800fdec:	4631      	mov	r1, r6
 800fdee:	bf28      	it	cs
 800fdf0:	463a      	movcs	r2, r7
 800fdf2:	f7ff ffc3 	bl	800fd7c <memcpy>
 800fdf6:	4631      	mov	r1, r6
 800fdf8:	4640      	mov	r0, r8
 800fdfa:	f7ff faed 	bl	800f3d8 <_free_r>
 800fdfe:	e7e1      	b.n	800fdc4 <_realloc_r+0x1e>
 800fe00:	4635      	mov	r5, r6
 800fe02:	e7df      	b.n	800fdc4 <_realloc_r+0x1e>

0800fe04 <__sfputc_r>:
 800fe04:	6893      	ldr	r3, [r2, #8]
 800fe06:	3b01      	subs	r3, #1
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	b410      	push	{r4}
 800fe0c:	6093      	str	r3, [r2, #8]
 800fe0e:	da08      	bge.n	800fe22 <__sfputc_r+0x1e>
 800fe10:	6994      	ldr	r4, [r2, #24]
 800fe12:	42a3      	cmp	r3, r4
 800fe14:	db01      	blt.n	800fe1a <__sfputc_r+0x16>
 800fe16:	290a      	cmp	r1, #10
 800fe18:	d103      	bne.n	800fe22 <__sfputc_r+0x1e>
 800fe1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe1e:	f000 b935 	b.w	801008c <__swbuf_r>
 800fe22:	6813      	ldr	r3, [r2, #0]
 800fe24:	1c58      	adds	r0, r3, #1
 800fe26:	6010      	str	r0, [r2, #0]
 800fe28:	7019      	strb	r1, [r3, #0]
 800fe2a:	4608      	mov	r0, r1
 800fe2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe30:	4770      	bx	lr

0800fe32 <__sfputs_r>:
 800fe32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe34:	4606      	mov	r6, r0
 800fe36:	460f      	mov	r7, r1
 800fe38:	4614      	mov	r4, r2
 800fe3a:	18d5      	adds	r5, r2, r3
 800fe3c:	42ac      	cmp	r4, r5
 800fe3e:	d101      	bne.n	800fe44 <__sfputs_r+0x12>
 800fe40:	2000      	movs	r0, #0
 800fe42:	e007      	b.n	800fe54 <__sfputs_r+0x22>
 800fe44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe48:	463a      	mov	r2, r7
 800fe4a:	4630      	mov	r0, r6
 800fe4c:	f7ff ffda 	bl	800fe04 <__sfputc_r>
 800fe50:	1c43      	adds	r3, r0, #1
 800fe52:	d1f3      	bne.n	800fe3c <__sfputs_r+0xa>
 800fe54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fe58 <_vfiprintf_r>:
 800fe58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe5c:	460d      	mov	r5, r1
 800fe5e:	b09d      	sub	sp, #116	; 0x74
 800fe60:	4614      	mov	r4, r2
 800fe62:	4698      	mov	r8, r3
 800fe64:	4606      	mov	r6, r0
 800fe66:	b118      	cbz	r0, 800fe70 <_vfiprintf_r+0x18>
 800fe68:	6a03      	ldr	r3, [r0, #32]
 800fe6a:	b90b      	cbnz	r3, 800fe70 <_vfiprintf_r+0x18>
 800fe6c:	f7ff f90c 	bl	800f088 <__sinit>
 800fe70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe72:	07d9      	lsls	r1, r3, #31
 800fe74:	d405      	bmi.n	800fe82 <_vfiprintf_r+0x2a>
 800fe76:	89ab      	ldrh	r3, [r5, #12]
 800fe78:	059a      	lsls	r2, r3, #22
 800fe7a:	d402      	bmi.n	800fe82 <_vfiprintf_r+0x2a>
 800fe7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe7e:	f7ff fa83 	bl	800f388 <__retarget_lock_acquire_recursive>
 800fe82:	89ab      	ldrh	r3, [r5, #12]
 800fe84:	071b      	lsls	r3, r3, #28
 800fe86:	d501      	bpl.n	800fe8c <_vfiprintf_r+0x34>
 800fe88:	692b      	ldr	r3, [r5, #16]
 800fe8a:	b99b      	cbnz	r3, 800feb4 <_vfiprintf_r+0x5c>
 800fe8c:	4629      	mov	r1, r5
 800fe8e:	4630      	mov	r0, r6
 800fe90:	f000 f93a 	bl	8010108 <__swsetup_r>
 800fe94:	b170      	cbz	r0, 800feb4 <_vfiprintf_r+0x5c>
 800fe96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe98:	07dc      	lsls	r4, r3, #31
 800fe9a:	d504      	bpl.n	800fea6 <_vfiprintf_r+0x4e>
 800fe9c:	f04f 30ff 	mov.w	r0, #4294967295
 800fea0:	b01d      	add	sp, #116	; 0x74
 800fea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fea6:	89ab      	ldrh	r3, [r5, #12]
 800fea8:	0598      	lsls	r0, r3, #22
 800feaa:	d4f7      	bmi.n	800fe9c <_vfiprintf_r+0x44>
 800feac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800feae:	f7ff fa6c 	bl	800f38a <__retarget_lock_release_recursive>
 800feb2:	e7f3      	b.n	800fe9c <_vfiprintf_r+0x44>
 800feb4:	2300      	movs	r3, #0
 800feb6:	9309      	str	r3, [sp, #36]	; 0x24
 800feb8:	2320      	movs	r3, #32
 800feba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800febe:	f8cd 800c 	str.w	r8, [sp, #12]
 800fec2:	2330      	movs	r3, #48	; 0x30
 800fec4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010078 <_vfiprintf_r+0x220>
 800fec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fecc:	f04f 0901 	mov.w	r9, #1
 800fed0:	4623      	mov	r3, r4
 800fed2:	469a      	mov	sl, r3
 800fed4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fed8:	b10a      	cbz	r2, 800fede <_vfiprintf_r+0x86>
 800feda:	2a25      	cmp	r2, #37	; 0x25
 800fedc:	d1f9      	bne.n	800fed2 <_vfiprintf_r+0x7a>
 800fede:	ebba 0b04 	subs.w	fp, sl, r4
 800fee2:	d00b      	beq.n	800fefc <_vfiprintf_r+0xa4>
 800fee4:	465b      	mov	r3, fp
 800fee6:	4622      	mov	r2, r4
 800fee8:	4629      	mov	r1, r5
 800feea:	4630      	mov	r0, r6
 800feec:	f7ff ffa1 	bl	800fe32 <__sfputs_r>
 800fef0:	3001      	adds	r0, #1
 800fef2:	f000 80a9 	beq.w	8010048 <_vfiprintf_r+0x1f0>
 800fef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fef8:	445a      	add	r2, fp
 800fefa:	9209      	str	r2, [sp, #36]	; 0x24
 800fefc:	f89a 3000 	ldrb.w	r3, [sl]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	f000 80a1 	beq.w	8010048 <_vfiprintf_r+0x1f0>
 800ff06:	2300      	movs	r3, #0
 800ff08:	f04f 32ff 	mov.w	r2, #4294967295
 800ff0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff10:	f10a 0a01 	add.w	sl, sl, #1
 800ff14:	9304      	str	r3, [sp, #16]
 800ff16:	9307      	str	r3, [sp, #28]
 800ff18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff1c:	931a      	str	r3, [sp, #104]	; 0x68
 800ff1e:	4654      	mov	r4, sl
 800ff20:	2205      	movs	r2, #5
 800ff22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff26:	4854      	ldr	r0, [pc, #336]	; (8010078 <_vfiprintf_r+0x220>)
 800ff28:	f7f0 f972 	bl	8000210 <memchr>
 800ff2c:	9a04      	ldr	r2, [sp, #16]
 800ff2e:	b9d8      	cbnz	r0, 800ff68 <_vfiprintf_r+0x110>
 800ff30:	06d1      	lsls	r1, r2, #27
 800ff32:	bf44      	itt	mi
 800ff34:	2320      	movmi	r3, #32
 800ff36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff3a:	0713      	lsls	r3, r2, #28
 800ff3c:	bf44      	itt	mi
 800ff3e:	232b      	movmi	r3, #43	; 0x2b
 800ff40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff44:	f89a 3000 	ldrb.w	r3, [sl]
 800ff48:	2b2a      	cmp	r3, #42	; 0x2a
 800ff4a:	d015      	beq.n	800ff78 <_vfiprintf_r+0x120>
 800ff4c:	9a07      	ldr	r2, [sp, #28]
 800ff4e:	4654      	mov	r4, sl
 800ff50:	2000      	movs	r0, #0
 800ff52:	f04f 0c0a 	mov.w	ip, #10
 800ff56:	4621      	mov	r1, r4
 800ff58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff5c:	3b30      	subs	r3, #48	; 0x30
 800ff5e:	2b09      	cmp	r3, #9
 800ff60:	d94d      	bls.n	800fffe <_vfiprintf_r+0x1a6>
 800ff62:	b1b0      	cbz	r0, 800ff92 <_vfiprintf_r+0x13a>
 800ff64:	9207      	str	r2, [sp, #28]
 800ff66:	e014      	b.n	800ff92 <_vfiprintf_r+0x13a>
 800ff68:	eba0 0308 	sub.w	r3, r0, r8
 800ff6c:	fa09 f303 	lsl.w	r3, r9, r3
 800ff70:	4313      	orrs	r3, r2
 800ff72:	9304      	str	r3, [sp, #16]
 800ff74:	46a2      	mov	sl, r4
 800ff76:	e7d2      	b.n	800ff1e <_vfiprintf_r+0xc6>
 800ff78:	9b03      	ldr	r3, [sp, #12]
 800ff7a:	1d19      	adds	r1, r3, #4
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	9103      	str	r1, [sp, #12]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	bfbb      	ittet	lt
 800ff84:	425b      	neglt	r3, r3
 800ff86:	f042 0202 	orrlt.w	r2, r2, #2
 800ff8a:	9307      	strge	r3, [sp, #28]
 800ff8c:	9307      	strlt	r3, [sp, #28]
 800ff8e:	bfb8      	it	lt
 800ff90:	9204      	strlt	r2, [sp, #16]
 800ff92:	7823      	ldrb	r3, [r4, #0]
 800ff94:	2b2e      	cmp	r3, #46	; 0x2e
 800ff96:	d10c      	bne.n	800ffb2 <_vfiprintf_r+0x15a>
 800ff98:	7863      	ldrb	r3, [r4, #1]
 800ff9a:	2b2a      	cmp	r3, #42	; 0x2a
 800ff9c:	d134      	bne.n	8010008 <_vfiprintf_r+0x1b0>
 800ff9e:	9b03      	ldr	r3, [sp, #12]
 800ffa0:	1d1a      	adds	r2, r3, #4
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	9203      	str	r2, [sp, #12]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	bfb8      	it	lt
 800ffaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800ffae:	3402      	adds	r4, #2
 800ffb0:	9305      	str	r3, [sp, #20]
 800ffb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010088 <_vfiprintf_r+0x230>
 800ffb6:	7821      	ldrb	r1, [r4, #0]
 800ffb8:	2203      	movs	r2, #3
 800ffba:	4650      	mov	r0, sl
 800ffbc:	f7f0 f928 	bl	8000210 <memchr>
 800ffc0:	b138      	cbz	r0, 800ffd2 <_vfiprintf_r+0x17a>
 800ffc2:	9b04      	ldr	r3, [sp, #16]
 800ffc4:	eba0 000a 	sub.w	r0, r0, sl
 800ffc8:	2240      	movs	r2, #64	; 0x40
 800ffca:	4082      	lsls	r2, r0
 800ffcc:	4313      	orrs	r3, r2
 800ffce:	3401      	adds	r4, #1
 800ffd0:	9304      	str	r3, [sp, #16]
 800ffd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffd6:	4829      	ldr	r0, [pc, #164]	; (801007c <_vfiprintf_r+0x224>)
 800ffd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ffdc:	2206      	movs	r2, #6
 800ffde:	f7f0 f917 	bl	8000210 <memchr>
 800ffe2:	2800      	cmp	r0, #0
 800ffe4:	d03f      	beq.n	8010066 <_vfiprintf_r+0x20e>
 800ffe6:	4b26      	ldr	r3, [pc, #152]	; (8010080 <_vfiprintf_r+0x228>)
 800ffe8:	bb1b      	cbnz	r3, 8010032 <_vfiprintf_r+0x1da>
 800ffea:	9b03      	ldr	r3, [sp, #12]
 800ffec:	3307      	adds	r3, #7
 800ffee:	f023 0307 	bic.w	r3, r3, #7
 800fff2:	3308      	adds	r3, #8
 800fff4:	9303      	str	r3, [sp, #12]
 800fff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fff8:	443b      	add	r3, r7
 800fffa:	9309      	str	r3, [sp, #36]	; 0x24
 800fffc:	e768      	b.n	800fed0 <_vfiprintf_r+0x78>
 800fffe:	fb0c 3202 	mla	r2, ip, r2, r3
 8010002:	460c      	mov	r4, r1
 8010004:	2001      	movs	r0, #1
 8010006:	e7a6      	b.n	800ff56 <_vfiprintf_r+0xfe>
 8010008:	2300      	movs	r3, #0
 801000a:	3401      	adds	r4, #1
 801000c:	9305      	str	r3, [sp, #20]
 801000e:	4619      	mov	r1, r3
 8010010:	f04f 0c0a 	mov.w	ip, #10
 8010014:	4620      	mov	r0, r4
 8010016:	f810 2b01 	ldrb.w	r2, [r0], #1
 801001a:	3a30      	subs	r2, #48	; 0x30
 801001c:	2a09      	cmp	r2, #9
 801001e:	d903      	bls.n	8010028 <_vfiprintf_r+0x1d0>
 8010020:	2b00      	cmp	r3, #0
 8010022:	d0c6      	beq.n	800ffb2 <_vfiprintf_r+0x15a>
 8010024:	9105      	str	r1, [sp, #20]
 8010026:	e7c4      	b.n	800ffb2 <_vfiprintf_r+0x15a>
 8010028:	fb0c 2101 	mla	r1, ip, r1, r2
 801002c:	4604      	mov	r4, r0
 801002e:	2301      	movs	r3, #1
 8010030:	e7f0      	b.n	8010014 <_vfiprintf_r+0x1bc>
 8010032:	ab03      	add	r3, sp, #12
 8010034:	9300      	str	r3, [sp, #0]
 8010036:	462a      	mov	r2, r5
 8010038:	4b12      	ldr	r3, [pc, #72]	; (8010084 <_vfiprintf_r+0x22c>)
 801003a:	a904      	add	r1, sp, #16
 801003c:	4630      	mov	r0, r6
 801003e:	f3af 8000 	nop.w
 8010042:	4607      	mov	r7, r0
 8010044:	1c78      	adds	r0, r7, #1
 8010046:	d1d6      	bne.n	800fff6 <_vfiprintf_r+0x19e>
 8010048:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801004a:	07d9      	lsls	r1, r3, #31
 801004c:	d405      	bmi.n	801005a <_vfiprintf_r+0x202>
 801004e:	89ab      	ldrh	r3, [r5, #12]
 8010050:	059a      	lsls	r2, r3, #22
 8010052:	d402      	bmi.n	801005a <_vfiprintf_r+0x202>
 8010054:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010056:	f7ff f998 	bl	800f38a <__retarget_lock_release_recursive>
 801005a:	89ab      	ldrh	r3, [r5, #12]
 801005c:	065b      	lsls	r3, r3, #25
 801005e:	f53f af1d 	bmi.w	800fe9c <_vfiprintf_r+0x44>
 8010062:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010064:	e71c      	b.n	800fea0 <_vfiprintf_r+0x48>
 8010066:	ab03      	add	r3, sp, #12
 8010068:	9300      	str	r3, [sp, #0]
 801006a:	462a      	mov	r2, r5
 801006c:	4b05      	ldr	r3, [pc, #20]	; (8010084 <_vfiprintf_r+0x22c>)
 801006e:	a904      	add	r1, sp, #16
 8010070:	4630      	mov	r0, r6
 8010072:	f7ff fc77 	bl	800f964 <_printf_i>
 8010076:	e7e4      	b.n	8010042 <_vfiprintf_r+0x1ea>
 8010078:	08010e47 	.word	0x08010e47
 801007c:	08010e51 	.word	0x08010e51
 8010080:	00000000 	.word	0x00000000
 8010084:	0800fe33 	.word	0x0800fe33
 8010088:	08010e4d 	.word	0x08010e4d

0801008c <__swbuf_r>:
 801008c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801008e:	460e      	mov	r6, r1
 8010090:	4614      	mov	r4, r2
 8010092:	4605      	mov	r5, r0
 8010094:	b118      	cbz	r0, 801009e <__swbuf_r+0x12>
 8010096:	6a03      	ldr	r3, [r0, #32]
 8010098:	b90b      	cbnz	r3, 801009e <__swbuf_r+0x12>
 801009a:	f7fe fff5 	bl	800f088 <__sinit>
 801009e:	69a3      	ldr	r3, [r4, #24]
 80100a0:	60a3      	str	r3, [r4, #8]
 80100a2:	89a3      	ldrh	r3, [r4, #12]
 80100a4:	071a      	lsls	r2, r3, #28
 80100a6:	d525      	bpl.n	80100f4 <__swbuf_r+0x68>
 80100a8:	6923      	ldr	r3, [r4, #16]
 80100aa:	b31b      	cbz	r3, 80100f4 <__swbuf_r+0x68>
 80100ac:	6823      	ldr	r3, [r4, #0]
 80100ae:	6922      	ldr	r2, [r4, #16]
 80100b0:	1a98      	subs	r0, r3, r2
 80100b2:	6963      	ldr	r3, [r4, #20]
 80100b4:	b2f6      	uxtb	r6, r6
 80100b6:	4283      	cmp	r3, r0
 80100b8:	4637      	mov	r7, r6
 80100ba:	dc04      	bgt.n	80100c6 <__swbuf_r+0x3a>
 80100bc:	4621      	mov	r1, r4
 80100be:	4628      	mov	r0, r5
 80100c0:	f7ff fdf8 	bl	800fcb4 <_fflush_r>
 80100c4:	b9e0      	cbnz	r0, 8010100 <__swbuf_r+0x74>
 80100c6:	68a3      	ldr	r3, [r4, #8]
 80100c8:	3b01      	subs	r3, #1
 80100ca:	60a3      	str	r3, [r4, #8]
 80100cc:	6823      	ldr	r3, [r4, #0]
 80100ce:	1c5a      	adds	r2, r3, #1
 80100d0:	6022      	str	r2, [r4, #0]
 80100d2:	701e      	strb	r6, [r3, #0]
 80100d4:	6962      	ldr	r2, [r4, #20]
 80100d6:	1c43      	adds	r3, r0, #1
 80100d8:	429a      	cmp	r2, r3
 80100da:	d004      	beq.n	80100e6 <__swbuf_r+0x5a>
 80100dc:	89a3      	ldrh	r3, [r4, #12]
 80100de:	07db      	lsls	r3, r3, #31
 80100e0:	d506      	bpl.n	80100f0 <__swbuf_r+0x64>
 80100e2:	2e0a      	cmp	r6, #10
 80100e4:	d104      	bne.n	80100f0 <__swbuf_r+0x64>
 80100e6:	4621      	mov	r1, r4
 80100e8:	4628      	mov	r0, r5
 80100ea:	f7ff fde3 	bl	800fcb4 <_fflush_r>
 80100ee:	b938      	cbnz	r0, 8010100 <__swbuf_r+0x74>
 80100f0:	4638      	mov	r0, r7
 80100f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100f4:	4621      	mov	r1, r4
 80100f6:	4628      	mov	r0, r5
 80100f8:	f000 f806 	bl	8010108 <__swsetup_r>
 80100fc:	2800      	cmp	r0, #0
 80100fe:	d0d5      	beq.n	80100ac <__swbuf_r+0x20>
 8010100:	f04f 37ff 	mov.w	r7, #4294967295
 8010104:	e7f4      	b.n	80100f0 <__swbuf_r+0x64>
	...

08010108 <__swsetup_r>:
 8010108:	b538      	push	{r3, r4, r5, lr}
 801010a:	4b2a      	ldr	r3, [pc, #168]	; (80101b4 <__swsetup_r+0xac>)
 801010c:	4605      	mov	r5, r0
 801010e:	6818      	ldr	r0, [r3, #0]
 8010110:	460c      	mov	r4, r1
 8010112:	b118      	cbz	r0, 801011c <__swsetup_r+0x14>
 8010114:	6a03      	ldr	r3, [r0, #32]
 8010116:	b90b      	cbnz	r3, 801011c <__swsetup_r+0x14>
 8010118:	f7fe ffb6 	bl	800f088 <__sinit>
 801011c:	89a3      	ldrh	r3, [r4, #12]
 801011e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010122:	0718      	lsls	r0, r3, #28
 8010124:	d422      	bmi.n	801016c <__swsetup_r+0x64>
 8010126:	06d9      	lsls	r1, r3, #27
 8010128:	d407      	bmi.n	801013a <__swsetup_r+0x32>
 801012a:	2309      	movs	r3, #9
 801012c:	602b      	str	r3, [r5, #0]
 801012e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010132:	81a3      	strh	r3, [r4, #12]
 8010134:	f04f 30ff 	mov.w	r0, #4294967295
 8010138:	e034      	b.n	80101a4 <__swsetup_r+0x9c>
 801013a:	0758      	lsls	r0, r3, #29
 801013c:	d512      	bpl.n	8010164 <__swsetup_r+0x5c>
 801013e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010140:	b141      	cbz	r1, 8010154 <__swsetup_r+0x4c>
 8010142:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010146:	4299      	cmp	r1, r3
 8010148:	d002      	beq.n	8010150 <__swsetup_r+0x48>
 801014a:	4628      	mov	r0, r5
 801014c:	f7ff f944 	bl	800f3d8 <_free_r>
 8010150:	2300      	movs	r3, #0
 8010152:	6363      	str	r3, [r4, #52]	; 0x34
 8010154:	89a3      	ldrh	r3, [r4, #12]
 8010156:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801015a:	81a3      	strh	r3, [r4, #12]
 801015c:	2300      	movs	r3, #0
 801015e:	6063      	str	r3, [r4, #4]
 8010160:	6923      	ldr	r3, [r4, #16]
 8010162:	6023      	str	r3, [r4, #0]
 8010164:	89a3      	ldrh	r3, [r4, #12]
 8010166:	f043 0308 	orr.w	r3, r3, #8
 801016a:	81a3      	strh	r3, [r4, #12]
 801016c:	6923      	ldr	r3, [r4, #16]
 801016e:	b94b      	cbnz	r3, 8010184 <__swsetup_r+0x7c>
 8010170:	89a3      	ldrh	r3, [r4, #12]
 8010172:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801017a:	d003      	beq.n	8010184 <__swsetup_r+0x7c>
 801017c:	4621      	mov	r1, r4
 801017e:	4628      	mov	r0, r5
 8010180:	f000 f88c 	bl	801029c <__smakebuf_r>
 8010184:	89a0      	ldrh	r0, [r4, #12]
 8010186:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801018a:	f010 0301 	ands.w	r3, r0, #1
 801018e:	d00a      	beq.n	80101a6 <__swsetup_r+0x9e>
 8010190:	2300      	movs	r3, #0
 8010192:	60a3      	str	r3, [r4, #8]
 8010194:	6963      	ldr	r3, [r4, #20]
 8010196:	425b      	negs	r3, r3
 8010198:	61a3      	str	r3, [r4, #24]
 801019a:	6923      	ldr	r3, [r4, #16]
 801019c:	b943      	cbnz	r3, 80101b0 <__swsetup_r+0xa8>
 801019e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80101a2:	d1c4      	bne.n	801012e <__swsetup_r+0x26>
 80101a4:	bd38      	pop	{r3, r4, r5, pc}
 80101a6:	0781      	lsls	r1, r0, #30
 80101a8:	bf58      	it	pl
 80101aa:	6963      	ldrpl	r3, [r4, #20]
 80101ac:	60a3      	str	r3, [r4, #8]
 80101ae:	e7f4      	b.n	801019a <__swsetup_r+0x92>
 80101b0:	2000      	movs	r0, #0
 80101b2:	e7f7      	b.n	80101a4 <__swsetup_r+0x9c>
 80101b4:	20000174 	.word	0x20000174

080101b8 <_raise_r>:
 80101b8:	291f      	cmp	r1, #31
 80101ba:	b538      	push	{r3, r4, r5, lr}
 80101bc:	4604      	mov	r4, r0
 80101be:	460d      	mov	r5, r1
 80101c0:	d904      	bls.n	80101cc <_raise_r+0x14>
 80101c2:	2316      	movs	r3, #22
 80101c4:	6003      	str	r3, [r0, #0]
 80101c6:	f04f 30ff 	mov.w	r0, #4294967295
 80101ca:	bd38      	pop	{r3, r4, r5, pc}
 80101cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80101ce:	b112      	cbz	r2, 80101d6 <_raise_r+0x1e>
 80101d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80101d4:	b94b      	cbnz	r3, 80101ea <_raise_r+0x32>
 80101d6:	4620      	mov	r0, r4
 80101d8:	f000 f830 	bl	801023c <_getpid_r>
 80101dc:	462a      	mov	r2, r5
 80101de:	4601      	mov	r1, r0
 80101e0:	4620      	mov	r0, r4
 80101e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101e6:	f000 b817 	b.w	8010218 <_kill_r>
 80101ea:	2b01      	cmp	r3, #1
 80101ec:	d00a      	beq.n	8010204 <_raise_r+0x4c>
 80101ee:	1c59      	adds	r1, r3, #1
 80101f0:	d103      	bne.n	80101fa <_raise_r+0x42>
 80101f2:	2316      	movs	r3, #22
 80101f4:	6003      	str	r3, [r0, #0]
 80101f6:	2001      	movs	r0, #1
 80101f8:	e7e7      	b.n	80101ca <_raise_r+0x12>
 80101fa:	2400      	movs	r4, #0
 80101fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010200:	4628      	mov	r0, r5
 8010202:	4798      	blx	r3
 8010204:	2000      	movs	r0, #0
 8010206:	e7e0      	b.n	80101ca <_raise_r+0x12>

08010208 <raise>:
 8010208:	4b02      	ldr	r3, [pc, #8]	; (8010214 <raise+0xc>)
 801020a:	4601      	mov	r1, r0
 801020c:	6818      	ldr	r0, [r3, #0]
 801020e:	f7ff bfd3 	b.w	80101b8 <_raise_r>
 8010212:	bf00      	nop
 8010214:	20000174 	.word	0x20000174

08010218 <_kill_r>:
 8010218:	b538      	push	{r3, r4, r5, lr}
 801021a:	4d07      	ldr	r5, [pc, #28]	; (8010238 <_kill_r+0x20>)
 801021c:	2300      	movs	r3, #0
 801021e:	4604      	mov	r4, r0
 8010220:	4608      	mov	r0, r1
 8010222:	4611      	mov	r1, r2
 8010224:	602b      	str	r3, [r5, #0]
 8010226:	f7f2 fbef 	bl	8002a08 <_kill>
 801022a:	1c43      	adds	r3, r0, #1
 801022c:	d102      	bne.n	8010234 <_kill_r+0x1c>
 801022e:	682b      	ldr	r3, [r5, #0]
 8010230:	b103      	cbz	r3, 8010234 <_kill_r+0x1c>
 8010232:	6023      	str	r3, [r4, #0]
 8010234:	bd38      	pop	{r3, r4, r5, pc}
 8010236:	bf00      	nop
 8010238:	20003f94 	.word	0x20003f94

0801023c <_getpid_r>:
 801023c:	f7f2 bbdc 	b.w	80029f8 <_getpid>

08010240 <_malloc_usable_size_r>:
 8010240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010244:	1f18      	subs	r0, r3, #4
 8010246:	2b00      	cmp	r3, #0
 8010248:	bfbc      	itt	lt
 801024a:	580b      	ldrlt	r3, [r1, r0]
 801024c:	18c0      	addlt	r0, r0, r3
 801024e:	4770      	bx	lr

08010250 <__swhatbuf_r>:
 8010250:	b570      	push	{r4, r5, r6, lr}
 8010252:	460c      	mov	r4, r1
 8010254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010258:	2900      	cmp	r1, #0
 801025a:	b096      	sub	sp, #88	; 0x58
 801025c:	4615      	mov	r5, r2
 801025e:	461e      	mov	r6, r3
 8010260:	da0d      	bge.n	801027e <__swhatbuf_r+0x2e>
 8010262:	89a3      	ldrh	r3, [r4, #12]
 8010264:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010268:	f04f 0100 	mov.w	r1, #0
 801026c:	bf0c      	ite	eq
 801026e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010272:	2340      	movne	r3, #64	; 0x40
 8010274:	2000      	movs	r0, #0
 8010276:	6031      	str	r1, [r6, #0]
 8010278:	602b      	str	r3, [r5, #0]
 801027a:	b016      	add	sp, #88	; 0x58
 801027c:	bd70      	pop	{r4, r5, r6, pc}
 801027e:	466a      	mov	r2, sp
 8010280:	f000 f848 	bl	8010314 <_fstat_r>
 8010284:	2800      	cmp	r0, #0
 8010286:	dbec      	blt.n	8010262 <__swhatbuf_r+0x12>
 8010288:	9901      	ldr	r1, [sp, #4]
 801028a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801028e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010292:	4259      	negs	r1, r3
 8010294:	4159      	adcs	r1, r3
 8010296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801029a:	e7eb      	b.n	8010274 <__swhatbuf_r+0x24>

0801029c <__smakebuf_r>:
 801029c:	898b      	ldrh	r3, [r1, #12]
 801029e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80102a0:	079d      	lsls	r5, r3, #30
 80102a2:	4606      	mov	r6, r0
 80102a4:	460c      	mov	r4, r1
 80102a6:	d507      	bpl.n	80102b8 <__smakebuf_r+0x1c>
 80102a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80102ac:	6023      	str	r3, [r4, #0]
 80102ae:	6123      	str	r3, [r4, #16]
 80102b0:	2301      	movs	r3, #1
 80102b2:	6163      	str	r3, [r4, #20]
 80102b4:	b002      	add	sp, #8
 80102b6:	bd70      	pop	{r4, r5, r6, pc}
 80102b8:	ab01      	add	r3, sp, #4
 80102ba:	466a      	mov	r2, sp
 80102bc:	f7ff ffc8 	bl	8010250 <__swhatbuf_r>
 80102c0:	9900      	ldr	r1, [sp, #0]
 80102c2:	4605      	mov	r5, r0
 80102c4:	4630      	mov	r0, r6
 80102c6:	f7ff f8fb 	bl	800f4c0 <_malloc_r>
 80102ca:	b948      	cbnz	r0, 80102e0 <__smakebuf_r+0x44>
 80102cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102d0:	059a      	lsls	r2, r3, #22
 80102d2:	d4ef      	bmi.n	80102b4 <__smakebuf_r+0x18>
 80102d4:	f023 0303 	bic.w	r3, r3, #3
 80102d8:	f043 0302 	orr.w	r3, r3, #2
 80102dc:	81a3      	strh	r3, [r4, #12]
 80102de:	e7e3      	b.n	80102a8 <__smakebuf_r+0xc>
 80102e0:	89a3      	ldrh	r3, [r4, #12]
 80102e2:	6020      	str	r0, [r4, #0]
 80102e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102e8:	81a3      	strh	r3, [r4, #12]
 80102ea:	9b00      	ldr	r3, [sp, #0]
 80102ec:	6163      	str	r3, [r4, #20]
 80102ee:	9b01      	ldr	r3, [sp, #4]
 80102f0:	6120      	str	r0, [r4, #16]
 80102f2:	b15b      	cbz	r3, 801030c <__smakebuf_r+0x70>
 80102f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102f8:	4630      	mov	r0, r6
 80102fa:	f000 f81d 	bl	8010338 <_isatty_r>
 80102fe:	b128      	cbz	r0, 801030c <__smakebuf_r+0x70>
 8010300:	89a3      	ldrh	r3, [r4, #12]
 8010302:	f023 0303 	bic.w	r3, r3, #3
 8010306:	f043 0301 	orr.w	r3, r3, #1
 801030a:	81a3      	strh	r3, [r4, #12]
 801030c:	89a3      	ldrh	r3, [r4, #12]
 801030e:	431d      	orrs	r5, r3
 8010310:	81a5      	strh	r5, [r4, #12]
 8010312:	e7cf      	b.n	80102b4 <__smakebuf_r+0x18>

08010314 <_fstat_r>:
 8010314:	b538      	push	{r3, r4, r5, lr}
 8010316:	4d07      	ldr	r5, [pc, #28]	; (8010334 <_fstat_r+0x20>)
 8010318:	2300      	movs	r3, #0
 801031a:	4604      	mov	r4, r0
 801031c:	4608      	mov	r0, r1
 801031e:	4611      	mov	r1, r2
 8010320:	602b      	str	r3, [r5, #0]
 8010322:	f7f2 fbd0 	bl	8002ac6 <_fstat>
 8010326:	1c43      	adds	r3, r0, #1
 8010328:	d102      	bne.n	8010330 <_fstat_r+0x1c>
 801032a:	682b      	ldr	r3, [r5, #0]
 801032c:	b103      	cbz	r3, 8010330 <_fstat_r+0x1c>
 801032e:	6023      	str	r3, [r4, #0]
 8010330:	bd38      	pop	{r3, r4, r5, pc}
 8010332:	bf00      	nop
 8010334:	20003f94 	.word	0x20003f94

08010338 <_isatty_r>:
 8010338:	b538      	push	{r3, r4, r5, lr}
 801033a:	4d06      	ldr	r5, [pc, #24]	; (8010354 <_isatty_r+0x1c>)
 801033c:	2300      	movs	r3, #0
 801033e:	4604      	mov	r4, r0
 8010340:	4608      	mov	r0, r1
 8010342:	602b      	str	r3, [r5, #0]
 8010344:	f7f2 fbcf 	bl	8002ae6 <_isatty>
 8010348:	1c43      	adds	r3, r0, #1
 801034a:	d102      	bne.n	8010352 <_isatty_r+0x1a>
 801034c:	682b      	ldr	r3, [r5, #0]
 801034e:	b103      	cbz	r3, 8010352 <_isatty_r+0x1a>
 8010350:	6023      	str	r3, [r4, #0]
 8010352:	bd38      	pop	{r3, r4, r5, pc}
 8010354:	20003f94 	.word	0x20003f94

08010358 <_init>:
 8010358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801035a:	bf00      	nop
 801035c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801035e:	bc08      	pop	{r3}
 8010360:	469e      	mov	lr, r3
 8010362:	4770      	bx	lr

08010364 <_fini>:
 8010364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010366:	bf00      	nop
 8010368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801036a:	bc08      	pop	{r3}
 801036c:	469e      	mov	lr, r3
 801036e:	4770      	bx	lr
