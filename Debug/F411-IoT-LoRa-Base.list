
F411-IoT-LoRa-Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010354  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000096c  080104f4  080104f4  000204f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e60  08010e60  00030198  2**0
                  CONTENTS
  4 .ARM          00000008  08010e60  08010e60  00020e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e68  08010e68  00030198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e68  08010e68  00020e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010e6c  08010e6c  00020e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  08010e70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000407c  20000198  08011008  00030198  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004214  08011008  00034214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ba4  00000000  00000000  0003020b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030a9  00000000  00000000  00045daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  00048e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e42  00000000  00000000  00049ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001888c  00000000  00000000  0004ae32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018345  00000000  00000000  000636be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093b8d  00000000  00000000  0007ba03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005680  00000000  00000000  0010f590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00114c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000198 	.word	0x20000198
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080104dc 	.word	0x080104dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000019c 	.word	0x2000019c
 80001dc:	080104dc 	.word	0x080104dc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	b08f      	sub	sp, #60	; 0x3c
 8000698:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5100 Environment-------------------------//

	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069a:	4bd0      	ldr	r3, [pc, #832]	; (80009dc <main+0x348>)
 800069c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a0:	22c0      	movs	r2, #192	; 0xc0
 80006a2:	771a      	strb	r2, [r3, #28]
		ETH.GAR[1]=168;
 80006a4:	4bcd      	ldr	r3, [pc, #820]	; (80009dc <main+0x348>)
 80006a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006aa:	22a8      	movs	r2, #168	; 0xa8
 80006ac:	775a      	strb	r2, [r3, #29]
		ETH.GAR[2]=0;
 80006ae:	4bcb      	ldr	r3, [pc, #812]	; (80009dc <main+0x348>)
 80006b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b4:	2200      	movs	r2, #0
 80006b6:	779a      	strb	r2, [r3, #30]
		ETH.GAR[3]=1;
 80006b8:	4bc8      	ldr	r3, [pc, #800]	; (80009dc <main+0x348>)
 80006ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006be:	2201      	movs	r2, #1
 80006c0:	77da      	strb	r2, [r3, #31]
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006c2:	4bc6      	ldr	r3, [pc, #792]	; (80009dc <main+0x348>)
 80006c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c8:	22ff      	movs	r2, #255	; 0xff
 80006ca:	f883 2020 	strb.w	r2, [r3, #32]
		ETH.SUBR[1]=255;
 80006ce:	4bc3      	ldr	r3, [pc, #780]	; (80009dc <main+0x348>)
 80006d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d4:	22ff      	movs	r2, #255	; 0xff
 80006d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		ETH.SUBR[2]=255;
 80006da:	4bc0      	ldr	r3, [pc, #768]	; (80009dc <main+0x348>)
 80006dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e0:	22ff      	movs	r2, #255	; 0xff
 80006e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ETH.SUBR[3]=0;
 80006e6:	4bbd      	ldr	r3, [pc, #756]	; (80009dc <main+0x348>)
 80006e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ec:	2200      	movs	r2, #0
 80006ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006f2:	4bba      	ldr	r3, [pc, #744]	; (80009dc <main+0x348>)
 80006f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.SHAR[1]=0x08;
 80006fe:	4bb7      	ldr	r3, [pc, #732]	; (80009dc <main+0x348>)
 8000700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000704:	2208      	movs	r2, #8
 8000706:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.SHAR[2]=0xDC;
 800070a:	4bb4      	ldr	r3, [pc, #720]	; (80009dc <main+0x348>)
 800070c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000710:	22dc      	movs	r2, #220	; 0xdc
 8000712:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.SHAR[3]=0x00;
 8000716:	4bb1      	ldr	r3, [pc, #708]	; (80009dc <main+0x348>)
 8000718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071c:	2200      	movs	r2, #0
 800071e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		ETH.SHAR[4]=0x00;
 8000722:	4bae      	ldr	r3, [pc, #696]	; (80009dc <main+0x348>)
 8000724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SHAR[5]=0x01;
 800072e:	4bab      	ldr	r3, [pc, #684]	; (80009dc <main+0x348>)
 8000730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000734:	2201      	movs	r2, #1
 8000736:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 800073a:	4ba8      	ldr	r3, [pc, #672]	; (80009dc <main+0x348>)
 800073c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000740:	22c0      	movs	r2, #192	; 0xc0
 8000742:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SIPR[1]=168;
 8000746:	4ba5      	ldr	r3, [pc, #660]	; (80009dc <main+0x348>)
 8000748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074c:	22a8      	movs	r2, #168	; 0xa8
 800074e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		ETH.SIPR[2]=0;
 8000752:	4ba2      	ldr	r3, [pc, #648]	; (80009dc <main+0x348>)
 8000754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000758:	2200      	movs	r2, #0
 800075a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SIPR[3]=6,//ETH.SIPR[3]=34,
 800075e:	4b9f      	ldr	r3, [pc, #636]	; (80009dc <main+0x348>)
 8000760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000764:	2206      	movs	r2, #6
 8000766:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	//  Socket RX memory
		ETH.RMSR=0x55;
 800076a:	4b9c      	ldr	r3, [pc, #624]	; (80009dc <main+0x348>)
 800076c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000770:	2255      	movs	r2, #85	; 0x55
 8000772:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	//  Socket TX memory


		ETH.TMSR=0x55;
 8000776:	4b99      	ldr	r3, [pc, #612]	; (80009dc <main+0x348>)
 8000778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077c:	2255      	movs	r2, #85	; 0x55
 800077e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	//  S0 Port Number
		ETH.S0_PORT[0]=0x01;
 8000782:	4b96      	ldr	r3, [pc, #600]	; (80009dc <main+0x348>)
 8000784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000788:	2201      	movs	r2, #1
 800078a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		ETH.S0_PORT[1]=0xF6;
 800078e:	4b93      	ldr	r3, [pc, #588]	; (80009dc <main+0x348>)
 8000790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000794:	22f6      	movs	r2, #246	; 0xf6
 8000796:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//	S0 Client IP ADDRESS
		ETH.S0_DIPR[0]=192;
 800079a:	4b90      	ldr	r3, [pc, #576]	; (80009dc <main+0x348>)
 800079c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a0:	22c0      	movs	r2, #192	; 0xc0
 80007a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		ETH.S0_DIPR[1]=168;
 80007a6:	4b8d      	ldr	r3, [pc, #564]	; (80009dc <main+0x348>)
 80007a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ac:	22a8      	movs	r2, #168	; 0xa8
 80007ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		ETH.S0_DIPR[2]=0;
 80007b2:	4b8a      	ldr	r3, [pc, #552]	; (80009dc <main+0x348>)
 80007b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		ETH.S0_DIPR[3]=3;
 80007be:	4b87      	ldr	r3, [pc, #540]	; (80009dc <main+0x348>)
 80007c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c4:	2203      	movs	r2, #3
 80007c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	//	S0 Client IP ADDRESS
		ETH.S0_DPORT[0]=0x01;
 80007ca:	4b84      	ldr	r3, [pc, #528]	; (80009dc <main+0x348>)
 80007cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d0:	2201      	movs	r2, #1
 80007d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		ETH.S0_DPORT[1]=0xF6;
 80007d6:	4b81      	ldr	r3, [pc, #516]	; (80009dc <main+0x348>)
 80007d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007dc:	22f6      	movs	r2, #246	; 0xf6
 80007de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		ETH.gS0_RX_BASE = 0x6000;
 80007e2:	4b7e      	ldr	r3, [pc, #504]	; (80009dc <main+0x348>)
 80007e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007e8:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80007ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		ETH.gS0_RX_MASK = 0x07FF;
 80007f0:	4b7a      	ldr	r3, [pc, #488]	; (80009dc <main+0x348>)
 80007f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		ETH.gS1_RX_BASE = 0x6800;
 80007fe:	4b77      	ldr	r3, [pc, #476]	; (80009dc <main+0x348>)
 8000800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000804:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 8000808:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		ETH.gS1_RX_MASK = 0x07FF;
 800080c:	4b73      	ldr	r3, [pc, #460]	; (80009dc <main+0x348>)
 800080e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000812:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000816:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		ETH.gS2_RX_BASE = 0x7000;
 800081a:	4b70      	ldr	r3, [pc, #448]	; (80009dc <main+0x348>)
 800081c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000820:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000824:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		ETH.gS2_RX_MASK = 0x07FF;
 8000828:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <main+0x348>)
 800082a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800082e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000832:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS3_RX_BASE = 0x7800;
 8000836:	4b69      	ldr	r3, [pc, #420]	; (80009dc <main+0x348>)
 8000838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800083c:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000840:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS3_RX_MASK = 0x07FF;
 8000844:	4b65      	ldr	r3, [pc, #404]	; (80009dc <main+0x348>)
 8000846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800084a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800084e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS0_TX_BASE = 0x4000;
 8000852:	4b62      	ldr	r3, [pc, #392]	; (80009dc <main+0x348>)
 8000854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000858:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS0_TX_MASK = 0x07FF;
 8000860:	4b5e      	ldr	r3, [pc, #376]	; (80009dc <main+0x348>)
 8000862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000866:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800086a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS1_TX_BASE = 0x4800;
 800086e:	4b5b      	ldr	r3, [pc, #364]	; (80009dc <main+0x348>)
 8000870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000874:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8000878:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS1_TX_MASK = 0x07FF;
 800087c:	4b57      	ldr	r3, [pc, #348]	; (80009dc <main+0x348>)
 800087e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000882:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000886:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS2_TX_BASE = 0x5000;
 800088a:	4b54      	ldr	r3, [pc, #336]	; (80009dc <main+0x348>)
 800088c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000890:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000894:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS2_TX_MASK = 0x07FF;
 8000898:	4b50      	ldr	r3, [pc, #320]	; (80009dc <main+0x348>)
 800089a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800089e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS3_TX_BASE = 0x5800;
 80008a6:	4b4d      	ldr	r3, [pc, #308]	; (80009dc <main+0x348>)
 80008a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ac:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS3_TX_MASK = 0x07FF;
 80008b4:	4b49      	ldr	r3, [pc, #292]	; (80009dc <main+0x348>)
 80008b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008be:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		ETH.S0_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c2:	4b46      	ldr	r3, [pc, #280]	; (80009dc <main+0x348>)
 80008c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	  //----------------------- LoRa ------------------------//

	  //----------------------- LoRa ------------------------//

	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008ce:	4844      	ldr	r0, [pc, #272]	; (80009e0 <main+0x34c>)
 80008d0:	f006 f832 	bl	8006938 <Inicializar>
 	  	wf.RESET_PORT=GPIOA;
 80008d4:	4b42      	ldr	r3, [pc, #264]	; (80009e0 <main+0x34c>)
 80008d6:	4a43      	ldr	r2, [pc, #268]	; (80009e4 <main+0x350>)
 80008d8:	601a      	str	r2, [r3, #0]
 	  	wf.RESET_PORT=GPIO_PIN_8;
 80008da:	4b41      	ldr	r3, [pc, #260]	; (80009e0 <main+0x34c>)
 80008dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008e0:	601a      	str	r2, [r3, #0]
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008e2:	4941      	ldr	r1, [pc, #260]	; (80009e8 <main+0x354>)
 80008e4:	4841      	ldr	r0, [pc, #260]	; (80009ec <main+0x358>)
 80008e6:	f00e fe13 	bl	800f510 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 80008ea:	4941      	ldr	r1, [pc, #260]	; (80009f0 <main+0x35c>)
 80008ec:	4841      	ldr	r0, [pc, #260]	; (80009f4 <main+0x360>)
 80008ee:	f00e fe0f 	bl	800f510 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 80008f2:	4941      	ldr	r1, [pc, #260]	; (80009f8 <main+0x364>)
 80008f4:	4841      	ldr	r0, [pc, #260]	; (80009fc <main+0x368>)
 80008f6:	f00e fe0b 	bl	800f510 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 80008fa:	4941      	ldr	r1, [pc, #260]	; (8000a00 <main+0x36c>)
 80008fc:	4841      	ldr	r0, [pc, #260]	; (8000a04 <main+0x370>)
 80008fe:	f00e fe07 	bl	800f510 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 8000902:	4941      	ldr	r1, [pc, #260]	; (8000a08 <main+0x374>)
 8000904:	4841      	ldr	r0, [pc, #260]	; (8000a0c <main+0x378>)
 8000906:	f00e fe03 	bl	800f510 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 800090a:	4941      	ldr	r1, [pc, #260]	; (8000a10 <main+0x37c>)
 800090c:	4841      	ldr	r0, [pc, #260]	; (8000a14 <main+0x380>)
 800090e:	f00e fdff 	bl	800f510 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 8000912:	4941      	ldr	r1, [pc, #260]	; (8000a18 <main+0x384>)
 8000914:	4841      	ldr	r0, [pc, #260]	; (8000a1c <main+0x388>)
 8000916:	f00e fdfb 	bl	800f510 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 800091a:	4941      	ldr	r1, [pc, #260]	; (8000a20 <main+0x38c>)
 800091c:	4841      	ldr	r0, [pc, #260]	; (8000a24 <main+0x390>)
 800091e:	f00e fdf7 	bl	800f510 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 8000922:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <main+0x34c>)
 8000924:	2200      	movs	r2, #0
 8000926:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800092a:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <main+0x34c>)
 800092c:	2200      	movs	r2, #0
 800092e:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[1]=0x00;
 8000932:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <main+0x34c>)
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[2]=0x00;
 800093a:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <main+0x34c>)
 800093c:	2200      	movs	r2, #0
 800093e:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[3]=0x00;
 8000942:	4b27      	ldr	r3, [pc, #156]	; (80009e0 <main+0x34c>)
 8000944:	2200      	movs	r2, #0
 8000946:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[4]=0x00;
 800094a:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <main+0x34c>)
 800094c:	2200      	movs	r2, #0
 800094e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[5]=0x06;
 8000952:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <main+0x34c>)
 8000954:	2206      	movs	r2, #6
 8000956:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[6]=0x01;
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <main+0x34c>)
 800095c:	2201      	movs	r2, #1
 800095e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[7]=0x03;
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <main+0x34c>)
 8000964:	2203      	movs	r2, #3
 8000966:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <main+0x34c>)
 800096c:	2200      	movs	r2, #0
 800096e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[9]=0x00;
 8000972:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <main+0x34c>)
 8000974:	2200      	movs	r2, #0
 8000976:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[10]=0x00;
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <main+0x34c>)
 800097c:	2200      	movs	r2, #0
 800097e:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[11]=0x0A;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <main+0x34c>)
 8000984:	220a      	movs	r2, #10
 8000986:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._data2SND[12]=0x00;
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <main+0x34c>)
 800098c:	2200      	movs	r2, #0
 800098e:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
		wf._data2SND[13]=0x33;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <main+0x34c>)
 8000994:	2233      	movs	r2, #51	; 0x33
 8000996:	f883 22a5 	strb.w	r2, [r3, #677]	; 0x2a5
		wf._data2SND[14]=0x34;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <main+0x34c>)
 800099c:	2234      	movs	r2, #52	; 0x34
 800099e:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6
		wf._data2SND[15]=0x35;
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <main+0x34c>)
 80009a4:	2235      	movs	r2, #53	; 0x35
 80009a6:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
		wf._n_D2SND=12;
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <main+0x34c>)
 80009ac:	220c      	movs	r2, #12
 80009ae:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <main+0x34c>)
 80009b4:	2264      	movs	r2, #100	; 0x64
 80009b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <main+0x34c>)
 80009bc:	2202      	movs	r2, #2
 80009be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._NO_IP=1;
 80009c2:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <main+0x34c>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	f8c3 2d58 	str.w	r2, [r3, #3416]	; 0xd58
		wf._DBG_EN=1;
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <main+0x34c>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	f8c3 2d5c 	str.w	r2, [r3, #3420]	; 0xd5c
		//wf._send_data=1;
		// ----------- INICIO - Seteo de módulo Ethernet W5100 ----------- //
	    // Conectado a SPI2
		// PIN NSS - PortB 12
		spi_no_debug=1;
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <main+0x394>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	701a      	strb	r2, [r3, #0]
 80009d8:	e028      	b.n	8000a2c <main+0x398>
 80009da:	bf00      	nop
 80009dc:	20002980 	.word	0x20002980
 80009e0:	20000b78 	.word	0x20000b78
 80009e4:	40020000 	.word	0x40020000
 80009e8:	20000024 	.word	0x20000024
 80009ec:	20000b7e 	.word	0x20000b7e
 80009f0:	2000002c 	.word	0x2000002c
 80009f4:	20000b9e 	.word	0x20000b9e
 80009f8:	20000038 	.word	0x20000038
 80009fc:	20000bae 	.word	0x20000bae
 8000a00:	20000048 	.word	0x20000048
 8000a04:	20000bbe 	.word	0x20000bbe
 8000a08:	20000050 	.word	0x20000050
 8000a0c:	20000bc4 	.word	0x20000bc4
 8000a10:	20000060 	.word	0x20000060
 8000a14:	20000bda 	.word	0x20000bda
 8000a18:	20000070 	.word	0x20000070
 8000a1c:	20000bea 	.word	0x20000bea
 8000a20:	20000080 	.word	0x20000080
 8000a24:	20000bd4 	.word	0x20000bd4
 8000a28:	20003a64 	.word	0x20003a64
		ETH.NSS_PORT=GPIOA;
 8000a2c:	4b84      	ldr	r3, [pc, #528]	; (8000c40 <main+0x5ac>)
 8000a2e:	4a85      	ldr	r2, [pc, #532]	; (8000c44 <main+0x5b0>)
 8000a30:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 8000a32:	4b83      	ldr	r3, [pc, #524]	; (8000c40 <main+0x5ac>)
 8000a34:	2210      	movs	r2, #16
 8000a36:	811a      	strh	r2, [r3, #8]
		ETH.SPI= &hspi1;
 8000a38:	4b81      	ldr	r3, [pc, #516]	; (8000c40 <main+0x5ac>)
 8000a3a:	4a83      	ldr	r2, [pc, #524]	; (8000c48 <main+0x5b4>)
 8000a3c:	601a      	str	r2, [r3, #0]

		// ----------- FIN - Seteo de módulo Ethernet W5100 ----------- //
		 //----------------------- WIFI ------------------------//
			decimal[0]=1;
 8000a3e:	4b83      	ldr	r3, [pc, #524]	; (8000c4c <main+0x5b8>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]
			decimal[1]=1;
 8000a44:	4b81      	ldr	r3, [pc, #516]	; (8000c4c <main+0x5b8>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	705a      	strb	r2, [r3, #1]
			decimal[2]=1;
 8000a4a:	4b80      	ldr	r3, [pc, #512]	; (8000c4c <main+0x5b8>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	709a      	strb	r2, [r3, #2]
			decimal[3]=1;
 8000a50:	4b7e      	ldr	r3, [pc, #504]	; (8000c4c <main+0x5b8>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	70da      	strb	r2, [r3, #3]
			decimal[4]=1;
 8000a56:	4b7d      	ldr	r3, [pc, #500]	; (8000c4c <main+0x5b8>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	711a      	strb	r2, [r3, #4]
			decimal[5]=1;
 8000a5c:	4b7b      	ldr	r3, [pc, #492]	; (8000c4c <main+0x5b8>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	715a      	strb	r2, [r3, #5]
			decimal[6]=1;
 8000a62:	4b7a      	ldr	r3, [pc, #488]	; (8000c4c <main+0x5b8>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	719a      	strb	r2, [r3, #6]
			decimal[7]=1;
 8000a68:	4b78      	ldr	r3, [pc, #480]	; (8000c4c <main+0x5b8>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	71da      	strb	r2, [r3, #7]
			decimal[8]=1;
 8000a6e:	4b77      	ldr	r3, [pc, #476]	; (8000c4c <main+0x5b8>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	721a      	strb	r2, [r3, #8]
			decimal[9]=1;
 8000a74:	4b75      	ldr	r3, [pc, #468]	; (8000c4c <main+0x5b8>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	725a      	strb	r2, [r3, #9]
			decimal[10]=1;
 8000a7a:	4b74      	ldr	r3, [pc, #464]	; (8000c4c <main+0x5b8>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	729a      	strb	r2, [r3, #10]
			decimal[11]=1;
 8000a80:	4b72      	ldr	r3, [pc, #456]	; (8000c4c <main+0x5b8>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	72da      	strb	r2, [r3, #11]
			decimal[12]=1;
 8000a86:	4b71      	ldr	r3, [pc, #452]	; (8000c4c <main+0x5b8>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	731a      	strb	r2, [r3, #12]
			decimal[13]=1;
 8000a8c:	4b6f      	ldr	r3, [pc, #444]	; (8000c4c <main+0x5b8>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	735a      	strb	r2, [r3, #13]
			decimal[14]=1;
 8000a92:	4b6e      	ldr	r3, [pc, #440]	; (8000c4c <main+0x5b8>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	739a      	strb	r2, [r3, #14]
			decimal[15]=1;
 8000a98:	4b6c      	ldr	r3, [pc, #432]	; (8000c4c <main+0x5b8>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	73da      	strb	r2, [r3, #15]
			decimal[16]=1;
 8000a9e:	4b6b      	ldr	r3, [pc, #428]	; (8000c4c <main+0x5b8>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	741a      	strb	r2, [r3, #16]
	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//

		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000aa4:	486a      	ldr	r0, [pc, #424]	; (8000c50 <main+0x5bc>)
 8000aa6:	f00b fea1 	bl	800c7ec <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000aaa:	4b69      	ldr	r3, [pc, #420]	; (8000c50 <main+0x5bc>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	711a      	strb	r2, [r3, #4]
		ModBUS_Config(&mb_wf);	//WIFI como servidor TCP, recibe comadno ModBUS
 8000ab0:	4868      	ldr	r0, [pc, #416]	; (8000c54 <main+0x5c0>)
 8000ab2:	f00b fe9b 	bl	800c7ec <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000ab6:	4b67      	ldr	r3, [pc, #412]	; (8000c54 <main+0x5c0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	711a      	strb	r2, [r3, #4]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000abc:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000ac0:	2103      	movs	r1, #3
 8000ac2:	4864      	ldr	r0, [pc, #400]	; (8000c54 <main+0x5c0>)
 8000ac4:	f00b ff35 	bl	800c932 <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac8:	f002 f8a6 	bl	8002c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000acc:	f000 faea 	bl	80010a4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000ad0:	4b61      	ldr	r3, [pc, #388]	; (8000c58 <main+0x5c4>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a61      	ldr	r2, [pc, #388]	; (8000c5c <main+0x5c8>)
 8000ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ada:	099b      	lsrs	r3, r3, #6
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fd8f 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae2:	f000 fcf1 	bl	80014c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ae6:	f000 fb45 	bl	8001174 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000aea:	f000 fc6f 	bl	80013cc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000aee:	f000 fc97 	bl	8001420 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000af2:	f000 fcbf 	bl	8001474 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000af6:	f000 fb73 	bl	80011e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000afa:	f000 fbeb 	bl	80012d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2102      	movs	r1, #2
 8000b02:	4850      	ldr	r0, [pc, #320]	; (8000c44 <main+0x5b0>)
 8000b04:	f002 fd5c 	bl	80035c0 <HAL_GPIO_WritePin>
  ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000b08:	210e      	movs	r1, #14
 8000b0a:	4855      	ldr	r0, [pc, #340]	; (8000c60 <main+0x5cc>)
 8000b0c:	f000 fd6e 	bl	80015ec <ITM0_Write>
     ESP8266_HW_Reset();	//WRNNG Hardcoded	  //Reseteo el modulo desde el pin de RESET
 8000b10:	f001 fc96 	bl	8002440 <ESP8266_HW_Reset>
     if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000b14:	4b53      	ldr	r3, [pc, #332]	; (8000c64 <main+0x5d0>)
 8000b16:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <main+0x492>
 8000b1e:	2113      	movs	r1, #19
 8000b20:	4851      	ldr	r0, [pc, #324]	; (8000c68 <main+0x5d4>)
 8000b22:	f000 fd63 	bl	80015ec <ITM0_Write>
     HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000b26:	2201      	movs	r2, #1
 8000b28:	4950      	ldr	r1, [pc, #320]	; (8000c6c <main+0x5d8>)
 8000b2a:	4851      	ldr	r0, [pc, #324]	; (8000c70 <main+0x5dc>)
 8000b2c:	f004 fe71 	bl	8005812 <HAL_UART_Receive_IT>
     HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1);
 8000b30:	2201      	movs	r2, #1
 8000b32:	4950      	ldr	r1, [pc, #320]	; (8000c74 <main+0x5e0>)
 8000b34:	4850      	ldr	r0, [pc, #320]	; (8000c78 <main+0x5e4>)
 8000b36:	f004 fe6c 	bl	8005812 <HAL_UART_Receive_IT>
     if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5100 \r\n",strlen("\r\n SET-UP W5100 \r\n"));
 8000b3a:	4b50      	ldr	r3, [pc, #320]	; (8000c7c <main+0x5e8>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <main+0x4b6>
 8000b42:	2112      	movs	r1, #18
 8000b44:	484e      	ldr	r0, [pc, #312]	; (8000c80 <main+0x5ec>)
 8000b46:	f000 fd51 	bl	80015ec <ITM0_Write>

   	 ETH.operacion=SPI_WRITE;
 8000b4a:	4b3d      	ldr	r3, [pc, #244]	; (8000c40 <main+0x5ac>)
 8000b4c:	22f0      	movs	r2, #240	; 0xf0
 8000b4e:	729a      	strb	r2, [r3, #10]
   	 ETH.TX[1]= 0;
 8000b50:	4b3b      	ldr	r3, [pc, #236]	; (8000c40 <main+0x5ac>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	755a      	strb	r2, [r3, #21]
   	 ETH.TX[2]= 1;
 8000b56:	4b3a      	ldr	r3, [pc, #232]	; (8000c40 <main+0x5ac>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	759a      	strb	r2, [r3, #22]
   	 ETH.TX[3]= 192;
 8000b5c:	4b38      	ldr	r3, [pc, #224]	; (8000c40 <main+0x5ac>)
 8000b5e:	22c0      	movs	r2, #192	; 0xc0
 8000b60:	75da      	strb	r2, [r3, #23]
   ETH.operacion=SPI_READ;
 8000b62:	4b37      	ldr	r3, [pc, #220]	; (8000c40 <main+0x5ac>)
 8000b64:	220f      	movs	r2, #15
 8000b66:	729a      	strb	r2, [r3, #10]
   ETH.TX[1]= 0;
 8000b68:	4b35      	ldr	r3, [pc, #212]	; (8000c40 <main+0x5ac>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	755a      	strb	r2, [r3, #21]
   ETH.TX[2]= 1;
 8000b6e:	4b34      	ldr	r3, [pc, #208]	; (8000c40 <main+0x5ac>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	759a      	strb	r2, [r3, #22]
   ETH.TX[3]= 0;
 8000b74:	4b32      	ldr	r3, [pc, #200]	; (8000c40 <main+0x5ac>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	75da      	strb	r2, [r3, #23]

     if(ESP8266_HW_Init(&huart1)==1)
 8000b7a:	483d      	ldr	r0, [pc, #244]	; (8000c70 <main+0x5dc>)
 8000b7c:	f001 fc88 	bl	8002490 <ESP8266_HW_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d10c      	bne.n	8000ba0 <main+0x50c>
     {
   	  ESP_HW_Init=1;
 8000b86:	4b3f      	ldr	r3, [pc, #252]	; (8000c84 <main+0x5f0>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]
   	  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b8c:	4b35      	ldr	r3, [pc, #212]	; (8000c64 <main+0x5d0>)
 8000b8e:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d025      	beq.n	8000be2 <main+0x54e>
 8000b96:	2113      	movs	r1, #19
 8000b98:	483b      	ldr	r0, [pc, #236]	; (8000c88 <main+0x5f4>)
 8000b9a:	f000 fd27 	bl	80015ec <ITM0_Write>
 8000b9e:	e020      	b.n	8000be2 <main+0x54e>
     }
     else
     {
   	  ESP8266_HW_Reset(); //WRNNG Hardcoded
 8000ba0:	f001 fc4e 	bl	8002440 <ESP8266_HW_Reset>
   	  if(ESP8266_HW_Init(&huart1)==1)
 8000ba4:	4832      	ldr	r0, [pc, #200]	; (8000c70 <main+0x5dc>)
 8000ba6:	f001 fc73 	bl	8002490 <ESP8266_HW_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d10c      	bne.n	8000bca <main+0x536>
   	  {
   		  ESP_HW_Init=1;
 8000bb0:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <main+0x5f0>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000bb6:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <main+0x5d0>)
 8000bb8:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d010      	beq.n	8000be2 <main+0x54e>
 8000bc0:	2113      	movs	r1, #19
 8000bc2:	4831      	ldr	r0, [pc, #196]	; (8000c88 <main+0x5f4>)
 8000bc4:	f000 fd12 	bl	80015ec <ITM0_Write>
 8000bc8:	e00b      	b.n	8000be2 <main+0x54e>
   	  }
   	  else
   	  {
   		  ESP_HW_Init=0;
 8000bca:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <main+0x5f0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
   		  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000bd0:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <main+0x5d0>)
 8000bd2:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d003      	beq.n	8000be2 <main+0x54e>
 8000bda:	2115      	movs	r1, #21
 8000bdc:	482b      	ldr	r0, [pc, #172]	; (8000c8c <main+0x5f8>)
 8000bde:	f000 fd05 	bl	80015ec <ITM0_Write>
   	  }
     }

     HAL_Delay(1000);
 8000be2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be6:	f002 f889 	bl	8002cfc <HAL_Delay>





	  	  if (ESP_HW_Init==1)
 8000bea:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <main+0x5f0>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	f040 809c 	bne.w	8000d2c <main+0x698>
	  	  {
	  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(lr._data_available))
 8000bf4:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <main+0x5fc>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	f040 8097 	bne.w	8000d2c <main+0x698>
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <main+0x5d0>)
 8000c00:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	f040 8091 	bne.w	8000d2c <main+0x698>
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <main+0x5d0>)
 8000c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c10:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000c14:	f340 808a 	ble.w	8000d2c <main+0x698>
 8000c18:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <main+0x600>)
 8000c1a:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 8084 	beq.w	8000d2c <main+0x698>
	  			{	lr._data_available=0;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <main+0x600>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
	  				wf_snd_flag_ticks=0;
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <main+0x604>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
	  				WF_SND_FLAG=0;
 8000c32:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <main+0x5fc>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
									ModBUS_F03_Read(&mb_eth,13),
									ModBUS_F03_Read(&mb_eth,14),
									ModBUS_F03_Read(&mb_eth,15),TEST_1,//ModBUS_F03_Read(&mb_eth,9),TEPELCO,
	  								post, body, 512))*/

		  				for(uint8_t i=0;i<=16;i++)
 8000c38:	2300      	movs	r3, #0
 8000c3a:	77fb      	strb	r3, [r7, #31]
 8000c3c:	e03c      	b.n	8000cb8 <main+0x624>
 8000c3e:	bf00      	nop
 8000c40:	20002980 	.word	0x20002980
 8000c44:	40020000 	.word	0x40020000
 8000c48:	200001b4 	.word	0x200001b4
 8000c4c:	20003a10 	.word	0x20003a10
 8000c50:	200018d8 	.word	0x200018d8
 8000c54:	20001f28 	.word	0x20001f28
 8000c58:	20000084 	.word	0x20000084
 8000c5c:	10624dd3 	.word	0x10624dd3
 8000c60:	080104f4 	.word	0x080104f4
 8000c64:	20000b78 	.word	0x20000b78
 8000c68:	08010504 	.word	0x08010504
 8000c6c:	2000407c 	.word	0x2000407c
 8000c70:	2000029c 	.word	0x2000029c
 8000c74:	20004080 	.word	0x20004080
 8000c78:	200002e0 	.word	0x200002e0
 8000c7c:	20002978 	.word	0x20002978
 8000c80:	08010518 	.word	0x08010518
 8000c84:	20003a67 	.word	0x20003a67
 8000c88:	0801052c 	.word	0x0801052c
 8000c8c:	08010540 	.word	0x08010540
 8000c90:	20002979 	.word	0x20002979
 8000c94:	20000370 	.word	0x20000370
 8000c98:	2000297c 	.word	0x2000297c
		  				{
		  					datos[i]=ModBUS_F03_Read(&mb_eth,i);//datos[i]=ModBUS_F03_Read(&mb_eth,i);
 8000c9c:	7ffc      	ldrb	r4, [r7, #31]
 8000c9e:	7ffb      	ldrb	r3, [r7, #31]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	487e      	ldr	r0, [pc, #504]	; (8000e9c <main+0x808>)
 8000ca4:	f00b fe74 	bl	800c990 <ModBUS_F03_Read>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	461a      	mov	r2, r3
 8000cac:	4b7c      	ldr	r3, [pc, #496]	; (8000ea0 <main+0x80c>)
 8000cae:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		  				for(uint8_t i=0;i<=16;i++)
 8000cb2:	7ffb      	ldrb	r3, [r7, #31]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	77fb      	strb	r3, [r7, #31]
 8000cb8:	7ffb      	ldrb	r3, [r7, #31]
 8000cba:	2b10      	cmp	r3, #16
 8000cbc:	d9ee      	bls.n	8000c9c <main+0x608>
		  				}

		  				if(httpPOST2(ENDPOINT, SERVER_IP,PORT,&datos,&decimal,16,TEST_1,post,body, 512))
 8000cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cc2:	9305      	str	r3, [sp, #20]
 8000cc4:	4b77      	ldr	r3, [pc, #476]	; (8000ea4 <main+0x810>)
 8000cc6:	9304      	str	r3, [sp, #16]
 8000cc8:	4b77      	ldr	r3, [pc, #476]	; (8000ea8 <main+0x814>)
 8000cca:	9303      	str	r3, [sp, #12]
 8000ccc:	2301      	movs	r3, #1
 8000cce:	9302      	str	r3, [sp, #8]
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	9301      	str	r3, [sp, #4]
 8000cd4:	4b75      	ldr	r3, [pc, #468]	; (8000eac <main+0x818>)
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	4b71      	ldr	r3, [pc, #452]	; (8000ea0 <main+0x80c>)
 8000cda:	4a75      	ldr	r2, [pc, #468]	; (8000eb0 <main+0x81c>)
 8000cdc:	4975      	ldr	r1, [pc, #468]	; (8000eb4 <main+0x820>)
 8000cde:	4876      	ldr	r0, [pc, #472]	; (8000eb8 <main+0x824>)
 8000ce0:	f00a fe9c 	bl	800ba1c <httpPOST2>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d020      	beq.n	8000d2c <main+0x698>
							{
										CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000cea:	486f      	ldr	r0, [pc, #444]	; (8000ea8 <main+0x814>)
 8000cec:	f7ff fa82 	bl	80001f4 <strlen>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	2341      	movs	r3, #65	; 0x41
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	496b      	ldr	r1, [pc, #428]	; (8000ea8 <main+0x814>)
 8000cfc:	486f      	ldr	r0, [pc, #444]	; (8000ebc <main+0x828>)
 8000cfe:	f00e f8d3 	bl	800eea8 <CopiaVector>
										wf._n_D2SND=strlen(post);
 8000d02:	4869      	ldr	r0, [pc, #420]	; (8000ea8 <main+0x814>)
 8000d04:	f7ff fa76 	bl	80001f4 <strlen>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b6c      	ldr	r3, [pc, #432]	; (8000ec0 <main+0x82c>)
 8000d0e:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
										if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000d12:	4b6b      	ldr	r3, [pc, #428]	; (8000ec0 <main+0x82c>)
 8000d14:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d807      	bhi.n	8000d2c <main+0x698>
										{
											EnviarDatos(&wf);
 8000d1c:	4868      	ldr	r0, [pc, #416]	; (8000ec0 <main+0x82c>)
 8000d1e:	f005 fdf5 	bl	800690c <EnviarDatos>
											wf._estado_conexion=TCP_SND_EN_CURSO;
 8000d22:	4b67      	ldr	r3, [pc, #412]	; (8000ec0 <main+0x82c>)
 8000d24:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000d28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							}
	  			}
	  	  }
	  /**************[ FIN PIDO ENVIAR DATOS ]**************/

	  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000d2c:	4b65      	ldr	r3, [pc, #404]	; (8000ec4 <main+0x830>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d003      	beq.n	8000d3c <main+0x6a8>
 8000d34:	4b64      	ldr	r3, [pc, #400]	; (8000ec8 <main+0x834>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d175      	bne.n	8000e28 <main+0x794>
	  		{
	  			if(FLAG_UART1==1)
 8000d3c:	4b61      	ldr	r3, [pc, #388]	; (8000ec4 <main+0x830>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d11c      	bne.n	8000d7e <main+0x6ea>
	  				{
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000d44:	4b61      	ldr	r3, [pc, #388]	; (8000ecc <main+0x838>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b61      	ldr	r3, [pc, #388]	; (8000ed0 <main+0x83c>)
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	4961      	ldr	r1, [pc, #388]	; (8000ed4 <main+0x840>)
 8000d50:	4861      	ldr	r0, [pc, #388]	; (8000ed8 <main+0x844>)
 8000d52:	f00e f8a9 	bl	800eea8 <CopiaVector>
	  					FLAG_UART1=0;
 8000d56:	4b5b      	ldr	r3, [pc, #364]	; (8000ec4 <main+0x830>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]

	  						if (error_rxdata==3)
 8000d5c:	4b5f      	ldr	r3, [pc, #380]	; (8000edc <main+0x848>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	d102      	bne.n	8000d6a <main+0x6d6>
	  						{
	  							error_rxdata=0;
 8000d64:	4b5d      	ldr	r3, [pc, #372]	; (8000edc <main+0x848>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
	  						}
	  						if (error_rxdata==1)
 8000d6a:	4b5c      	ldr	r3, [pc, #368]	; (8000edc <main+0x848>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d105      	bne.n	8000d7e <main+0x6ea>
	  						{
	  							error_rxdata=5;
 8000d72:	4b5a      	ldr	r3, [pc, #360]	; (8000edc <main+0x848>)
 8000d74:	2205      	movs	r2, #5
 8000d76:	701a      	strb	r2, [r3, #0]
	  							error_rxdata=0;
 8000d78:	4b58      	ldr	r3, [pc, #352]	; (8000edc <main+0x848>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
	  						}
	  				}
	  			if(FLAG_TIMEOUT==1)
 8000d7e:	4b52      	ldr	r3, [pc, #328]	; (8000ec8 <main+0x834>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d102      	bne.n	8000d8c <main+0x6f8>
	  					{
	  						FLAG_TIMEOUT=0;
 8000d86:	4b50      	ldr	r3, [pc, #320]	; (8000ec8 <main+0x834>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
	  					}

	  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000d8c:	4b54      	ldr	r3, [pc, #336]	; (8000ee0 <main+0x84c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d149      	bne.n	8000e28 <main+0x794>
	  				{
	  					/*************** Copio y proceso info recibida ***************/
	  					wf._n_orig=UART_RX_items;
 8000d94:	4b4d      	ldr	r3, [pc, #308]	; (8000ecc <main+0x838>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a49      	ldr	r2, [pc, #292]	; (8000ec0 <main+0x82c>)
 8000d9a:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
	  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000d9e:	4b4b      	ldr	r3, [pc, #300]	; (8000ecc <main+0x838>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b4b      	ldr	r3, [pc, #300]	; (8000ed0 <main+0x83c>)
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2301      	movs	r3, #1
 8000da8:	494a      	ldr	r1, [pc, #296]	; (8000ed4 <main+0x840>)
 8000daa:	484b      	ldr	r0, [pc, #300]	; (8000ed8 <main+0x844>)
 8000dac:	f00e f87c 	bl	800eea8 <CopiaVector>
	  					resultado=AT_ESP8266_ND(&wf);
 8000db0:	4843      	ldr	r0, [pc, #268]	; (8000ec0 <main+0x82c>)
 8000db2:	f005 fe91 	bl	8006ad8 <AT_ESP8266_ND>
 8000db6:	4603      	mov	r3, r0
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b4a      	ldr	r3, [pc, #296]	; (8000ee4 <main+0x850>)
 8000dbc:	701a      	strb	r2, [r3, #0]

	  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

	  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000dbe:	4b40      	ldr	r3, [pc, #256]	; (8000ec0 <main+0x82c>)
 8000dc0:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d12f      	bne.n	8000e28 <main+0x794>
 8000dc8:	4b3d      	ldr	r3, [pc, #244]	; (8000ec0 <main+0x82c>)
 8000dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dce:	2b63      	cmp	r3, #99	; 0x63
 8000dd0:	d12a      	bne.n	8000e28 <main+0x794>
	  					{

	  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000dd2:	4b3b      	ldr	r3, [pc, #236]	; (8000ec0 <main+0x82c>)
 8000dd4:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8000dd8:	2341      	movs	r3, #65	; 0x41
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	2300      	movs	r3, #0
 8000dde:	4942      	ldr	r1, [pc, #264]	; (8000ee8 <main+0x854>)
 8000de0:	4842      	ldr	r0, [pc, #264]	; (8000eec <main+0x858>)
 8000de2:	f00e f861 	bl	800eea8 <CopiaVector>
	  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000de6:	4b36      	ldr	r3, [pc, #216]	; (8000ec0 <main+0x82c>)
 8000de8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8000dec:	4a40      	ldr	r2, [pc, #256]	; (8000ef0 <main+0x85c>)
 8000dee:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

	  						ModBUS(&mb_wf);
 8000df2:	483f      	ldr	r0, [pc, #252]	; (8000ef0 <main+0x85c>)
 8000df4:	f00b fe52 	bl	800ca9c <ModBUS>

	  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000df8:	4b3d      	ldr	r3, [pc, #244]	; (8000ef0 <main+0x85c>)
 8000dfa:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000dfe:	2341      	movs	r3, #65	; 0x41
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2300      	movs	r3, #0
 8000e04:	493b      	ldr	r1, [pc, #236]	; (8000ef4 <main+0x860>)
 8000e06:	482d      	ldr	r0, [pc, #180]	; (8000ebc <main+0x828>)
 8000e08:	f00e f84e 	bl	800eea8 <CopiaVector>
	  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000e0c:	4b38      	ldr	r3, [pc, #224]	; (8000ef0 <main+0x85c>)
 8000e0e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000e12:	4a2b      	ldr	r2, [pc, #172]	; (8000ec0 <main+0x82c>)
 8000e14:	f8c2 3cf0 	str.w	r3, [r2, #3312]	; 0xcf0
	  						wf._new_data_rcv=0;//
 8000e18:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <main+0x82c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
	  						wf._send_data=1;
 8000e20:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <main+0x82c>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
	  						}
	  					}

	  		}
// AGREGAR TIMER EN MS TICKS PARA HABILITAR ESTADO Y CUENTA TODOS EN EL STRUCT
	  		if((FLAG_UART2 == 1)||(lr.tmr_dly_ON==1))  //Evento de dato recibido LoRA debo verificar que es
 8000e28:	4b33      	ldr	r3, [pc, #204]	; (8000ef8 <main+0x864>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d005      	beq.n	8000e3c <main+0x7a8>
 8000e30:	4b32      	ldr	r3, [pc, #200]	; (8000efc <main+0x868>)
 8000e32:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	f040 80f1 	bne.w	800101e <main+0x98a>
	  		{
	  			if(FLAG_UART2==1)
 8000e3c:	4b2e      	ldr	r3, [pc, #184]	; (8000ef8 <main+0x864>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	f040 809f 	bne.w	8000f84 <main+0x8f0>
	  				{
	  				FLAG_UART2=0;
 8000e46:	4b2c      	ldr	r3, [pc, #176]	; (8000ef8 <main+0x864>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
	  				LoRa_decode(&lr);
 8000e4c:	482b      	ldr	r0, [pc, #172]	; (8000efc <main+0x868>)
 8000e4e:	f00b f815 	bl	800be7c <LoRa_decode>
	  				if(lr._data_available)
 8000e52:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <main+0x868>)
 8000e54:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 8093 	beq.w	8000f84 <main+0x8f0>
	  				{
	  					CopiaVector(lr.dataRCV_hld,lr.dataRCV,lr._n_dataRCV,1,"D");
 8000e5e:	4b27      	ldr	r3, [pc, #156]	; (8000efc <main+0x868>)
 8000e60:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	; 0x4d8
 8000e64:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <main+0x86c>)
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2301      	movs	r3, #1
 8000e6a:	4926      	ldr	r1, [pc, #152]	; (8000f04 <main+0x870>)
 8000e6c:	4826      	ldr	r0, [pc, #152]	; (8000f08 <main+0x874>)
 8000e6e:	f00e f81b 	bl	800eea8 <CopiaVector>
	  					char num[6];
	  					int i=0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
	  					int n=0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
	  					int lnn=0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
	  					lnn=strlen(lr.dataRCV_hld);
 8000e7e:	4822      	ldr	r0, [pc, #136]	; (8000f08 <main+0x874>)
 8000e80:	f7ff f9b8 	bl	80001f4 <strlen>
 8000e84:	4603      	mov	r3, r0
 8000e86:	60fb      	str	r3, [r7, #12]
	  					while(i < lnn-1)
 8000e88:	e077      	b.n	8000f7a <main+0x8e6>
	  					{
							if( i!=0) i++;
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <main+0x802>
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	3301      	adds	r3, #1
 8000e94:	61bb      	str	r3, [r7, #24]
							int j=0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]

								while(lr.dataRCV_hld[i] != ';')
 8000e9a:	e050      	b.n	8000f3e <main+0x8aa>
 8000e9c:	200018d8 	.word	0x200018d8
 8000ea0:	200039f0 	.word	0x200039f0
 8000ea4:	20002778 	.word	0x20002778
 8000ea8:	20002578 	.word	0x20002578
 8000eac:	20003a10 	.word	0x20003a10
 8000eb0:	2000001c 	.word	0x2000001c
 8000eb4:	2000000c 	.word	0x2000000c
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	20000e10 	.word	0x20000e10
 8000ec0:	20000b78 	.word	0x20000b78
 8000ec4:	20003a6c 	.word	0x20003a6c
 8000ec8:	20003a6b 	.word	0x20003a6b
 8000ecc:	20004088 	.word	0x20004088
 8000ed0:	20004078 	.word	0x20004078
 8000ed4:	20003e78 	.word	0x20003e78
 8000ed8:	20001210 	.word	0x20001210
 8000edc:	20003a6f 	.word	0x20003a6f
 8000ee0:	20003a67 	.word	0x20003a67
 8000ee4:	20003a6e 	.word	0x20003a6e
 8000ee8:	20000c10 	.word	0x20000c10
 8000eec:	20001f3a 	.word	0x20001f3a
 8000ef0:	20001f28 	.word	0x20001f28
 8000ef4:	20002140 	.word	0x20002140
 8000ef8:	20003a6d 	.word	0x20003a6d
 8000efc:	20000370 	.word	0x20000370
 8000f00:	08010558 	.word	0x08010558
 8000f04:	20000546 	.word	0x20000546
 8000f08:	200006c6 	.word	0x200006c6
								{
									if(lr.dataRCV_hld[i] != '.')
 8000f0c:	4a58      	ldr	r2, [pc, #352]	; (8001070 <main+0x9dc>)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	4413      	add	r3, r2
 8000f12:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b2e      	cmp	r3, #46	; 0x2e
 8000f1a:	d00d      	beq.n	8000f38 <main+0x8a4>
									{
										num[j]=lr.dataRCV_hld[i];
 8000f1c:	4a54      	ldr	r2, [pc, #336]	; (8001070 <main+0x9dc>)
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	4413      	add	r3, r2
 8000f22:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000f26:	7819      	ldrb	r1, [r3, #0]
 8000f28:	1d3a      	adds	r2, r7, #4
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	460a      	mov	r2, r1
 8000f30:	701a      	strb	r2, [r3, #0]
										j++;
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	3301      	adds	r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
									}
									i++;
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	61bb      	str	r3, [r7, #24]
								while(lr.dataRCV_hld[i] != ';')
 8000f3e:	4a4c      	ldr	r2, [pc, #304]	; (8001070 <main+0x9dc>)
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	4413      	add	r3, r2
 8000f44:	f203 3356 	addw	r3, r3, #854	; 0x356
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b3b      	cmp	r3, #59	; 0x3b
 8000f4c:	d1de      	bne.n	8000f0c <main+0x878>
								}
							num[j]='\0';
 8000f4e:	1d3a      	adds	r2, r7, #4
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4413      	add	r3, r2
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
							ModBUS_F03_Assign(&mb_eth,n,atoi(num,10));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	b2dc      	uxtb	r4, r3
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	210a      	movs	r1, #10
 8000f60:	4618      	mov	r0, r3
 8000f62:	f00d ffec 	bl	800ef3e <atoi>
 8000f66:	4603      	mov	r3, r0
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4621      	mov	r1, r4
 8000f6e:	4841      	ldr	r0, [pc, #260]	; (8001074 <main+0x9e0>)
 8000f70:	f00b fcdf 	bl	800c932 <ModBUS_F03_Assign>
							n++;//Incremento posición  a almacenar
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	3301      	adds	r3, #1
 8000f78:	617b      	str	r3, [r7, #20]
	  					while(i < lnn-1)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	db82      	blt.n	8000e8a <main+0x7f6>
	  					}
	  				}
	  				}

	  			if(lr.tmr_dly_ON==1)
 8000f84:	4b3a      	ldr	r3, [pc, #232]	; (8001070 <main+0x9dc>)
 8000f86:	f893 37ee 	ldrb.w	r3, [r3, #2030]	; 0x7ee
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d147      	bne.n	800101e <main+0x98a>
	  				{
	  					lr.tmr_dly_ON=0;
 8000f8e:	4b38      	ldr	r3, [pc, #224]	; (8001070 <main+0x9dc>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
	  					LoRa_reset_sndTIMER(&lr,3000);
 8000f96:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000f9a:	4835      	ldr	r0, [pc, #212]	; (8001070 <main+0x9dc>)
 8000f9c:	f00a ff52 	bl	800be44 <LoRa_reset_sndTIMER>
						lr.dest_address[0]='\0';
 8000fa0:	4b33      	ldr	r3, [pc, #204]	; (8001070 <main+0x9dc>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	759a      	strb	r2, [r3, #22]
						lr.txbuff[0]='\0';
 8000fa6:	4b32      	ldr	r3, [pc, #200]	; (8001070 <main+0x9dc>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
			  			strncat(lr.dest_address,"1",1);
 8000fae:	4832      	ldr	r0, [pc, #200]	; (8001078 <main+0x9e4>)
 8000fb0:	f7ff f920 	bl	80001f4 <strlen>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <main+0x9e4>)
 8000fba:	4413      	add	r3, r2
 8000fbc:	492f      	ldr	r1, [pc, #188]	; (800107c <main+0x9e8>)
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	8013      	strh	r3, [r2, #0]
			  			strncat(lr.txbuff,"prueba de envio de mensaje de texto",strlen("prueba de envio de mensaje de texto"));
 8000fc6:	482e      	ldr	r0, [pc, #184]	; (8001080 <main+0x9ec>)
 8000fc8:	f7ff f914 	bl	80001f4 <strlen>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <main+0x9ec>)
 8000fd2:	4413      	add	r3, r2
 8000fd4:	4a2b      	ldr	r2, [pc, #172]	; (8001084 <main+0x9f0>)
 8000fd6:	4614      	mov	r4, r2
 8000fd8:	469c      	mov	ip, r3
 8000fda:	f104 0e20 	add.w	lr, r4, #32
 8000fde:	4665      	mov	r5, ip
 8000fe0:	4626      	mov	r6, r4
 8000fe2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000fe4:	6028      	str	r0, [r5, #0]
 8000fe6:	6069      	str	r1, [r5, #4]
 8000fe8:	60aa      	str	r2, [r5, #8]
 8000fea:	60eb      	str	r3, [r5, #12]
 8000fec:	3410      	adds	r4, #16
 8000fee:	f10c 0c10 	add.w	ip, ip, #16
 8000ff2:	4574      	cmp	r4, lr
 8000ff4:	d1f3      	bne.n	8000fde <main+0x94a>
 8000ff6:	4663      	mov	r3, ip
 8000ff8:	4622      	mov	r2, r4
 8000ffa:	6810      	ldr	r0, [r2, #0]
 8000ffc:	6018      	str	r0, [r3, #0]
			  			lr.txitems=strlen("prueba de envio de mensaje de texto");
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <main+0x9dc>)
 8001000:	2223      	movs	r2, #35	; 0x23
 8001002:	f8c3 27e0 	str.w	r2, [r3, #2016]	; 0x7e0
		  				lr.estado=_SENT;										//
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <main+0x9dc>)
 8001008:	2214      	movs	r2, #20
 800100a:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
			  			error=LoRa_Send(&lr,&huart2);
 800100e:	491e      	ldr	r1, [pc, #120]	; (8001088 <main+0x9f4>)
 8001010:	4817      	ldr	r0, [pc, #92]	; (8001070 <main+0x9dc>)
 8001012:	f00a fe69 	bl	800bce8 <LoRa_Send>
 8001016:	4603      	mov	r3, r0
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <main+0x9f8>)
 800101c:	701a      	strb	r2, [r3, #0]
	  				}
	  		}

	  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <main+0x9fc>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d108      	bne.n	8001038 <main+0x9a4>
	  			{
	  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8001026:	2201      	movs	r2, #1
 8001028:	491a      	ldr	r1, [pc, #104]	; (8001094 <main+0xa00>)
 800102a:	481b      	ldr	r0, [pc, #108]	; (8001098 <main+0xa04>)
 800102c:	f008 fffe 	bl	800a02c <WiFi_Conn_ND>
 8001030:	4603      	mov	r3, r0
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <main+0xa08>)
 8001036:	701a      	strb	r2, [r3, #0]
	  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	  				ITM0_Write("\r\n ESP WAIT 5s AFT RST\r\n",strlen("\r\n ESP WAIT 5s AFT RST\r\n"));
	  				HAL_Delay(5000);//210419
	  				esp_restart=0;
	  			}*/
	  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <main+0xa0c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b01      	cmp	r3, #1
 800103e:	f47f add4 	bne.w	8000bea <main+0x556>
	  			{

	  				HW_RESET(&wf);
 8001042:	4815      	ldr	r0, [pc, #84]	; (8001098 <main+0xa04>)
 8001044:	f005 fb74 	bl	8006730 <HW_RESET>
	  				HAL_Delay(5000);//210419
 8001048:	f241 3088 	movw	r0, #5000	; 0x1388
 800104c:	f001 fe56 	bl	8002cfc <HAL_Delay>
	  				esp_restart=0;
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <main+0xa0c>)
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
	  				wf._estado=0;
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <main+0xa04>)
 8001058:	2200      	movs	r2, #0
 800105a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  				wf._estado_conexion=100;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <main+0xa04>)
 8001060:	2264      	movs	r2, #100	; 0x64
 8001062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	  				ConectarWIFI(&wf);
 8001066:	480c      	ldr	r0, [pc, #48]	; (8001098 <main+0xa04>)
 8001068:	f005 fbb6 	bl	80067d8 <ConectarWIFI>
	  	  if (ESP_HW_Init==1)
 800106c:	e5bd      	b.n	8000bea <main+0x556>
 800106e:	bf00      	nop
 8001070:	20000370 	.word	0x20000370
 8001074:	200018d8 	.word	0x200018d8
 8001078:	20000386 	.word	0x20000386
 800107c:	0801055c 	.word	0x0801055c
 8001080:	2000084c 	.word	0x2000084c
 8001084:	08010560 	.word	0x08010560
 8001088:	200002e0 	.word	0x200002e0
 800108c:	20000b74 	.word	0x20000b74
 8001090:	20003a67 	.word	0x20003a67
 8001094:	2000029c 	.word	0x2000029c
 8001098:	20000b78 	.word	0x20000b78
 800109c:	20003a71 	.word	0x20003a71
 80010a0:	20003a70 	.word	0x20003a70

080010a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b094      	sub	sp, #80	; 0x50
 80010a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010aa:	f107 0320 	add.w	r3, r7, #32
 80010ae:	2230      	movs	r2, #48	; 0x30
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f00e f943 	bl	800f33e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	4b27      	ldr	r3, [pc, #156]	; (800116c <SystemClock_Config+0xc8>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	4a26      	ldr	r2, [pc, #152]	; (800116c <SystemClock_Config+0xc8>)
 80010d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d6:	6413      	str	r3, [r2, #64]	; 0x40
 80010d8:	4b24      	ldr	r3, [pc, #144]	; (800116c <SystemClock_Config+0xc8>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e4:	2300      	movs	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <SystemClock_Config+0xcc>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a20      	ldr	r2, [pc, #128]	; (8001170 <SystemClock_Config+0xcc>)
 80010ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <SystemClock_Config+0xcc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001100:	2301      	movs	r3, #1
 8001102:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001104:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110a:	2302      	movs	r3, #2
 800110c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800110e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001112:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001114:	230c      	movs	r3, #12
 8001116:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001118:	2360      	movs	r3, #96	; 0x60
 800111a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800111c:	2302      	movs	r3, #2
 800111e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001120:	2304      	movs	r3, #4
 8001122:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001124:	f107 0320 	add.w	r3, r7, #32
 8001128:	4618      	mov	r0, r3
 800112a:	f002 fa7d 	bl	8003628 <HAL_RCC_OscConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001134:	f001 fa5c 	bl	80025f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001138:	230f      	movs	r3, #15
 800113a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113c:	2302      	movs	r3, #2
 800113e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001148:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	2103      	movs	r1, #3
 8001154:	4618      	mov	r0, r3
 8001156:	f002 fcdf 	bl	8003b18 <HAL_RCC_ClockConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001160:	f001 fa46 	bl	80025f0 <Error_Handler>
  }
}
 8001164:	bf00      	nop
 8001166:	3750      	adds	r7, #80	; 0x50
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40023800 	.word	0x40023800
 8001170:	40007000 	.word	0x40007000

08001174 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <MX_SPI1_Init+0x64>)
 800117a:	4a18      	ldr	r2, [pc, #96]	; (80011dc <MX_SPI1_Init+0x68>)
 800117c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <MX_SPI1_Init+0x64>)
 8001180:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001184:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <MX_SPI1_Init+0x64>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <MX_SPI1_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_SPI1_Init+0x64>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_SPI1_Init+0x64>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <MX_SPI1_Init+0x64>)
 80011a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_SPI1_Init+0x64>)
 80011a8:	2210      	movs	r2, #16
 80011aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <MX_SPI1_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_SPI1_Init+0x64>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <MX_SPI1_Init+0x64>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <MX_SPI1_Init+0x64>)
 80011c0:	220a      	movs	r2, #10
 80011c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_SPI1_Init+0x64>)
 80011c6:	f002 fe87 	bl	8003ed8 <HAL_SPI_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011d0:	f001 fa0e 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200001b4 	.word	0x200001b4
 80011dc:	40013000 	.word	0x40013000

080011e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08e      	sub	sp, #56	; 0x38
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f4:	f107 0320 	add.w	r3, r7, #32
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
 800120c:	615a      	str	r2, [r3, #20]
 800120e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001210:	4b2f      	ldr	r3, [pc, #188]	; (80012d0 <MX_TIM2_Init+0xf0>)
 8001212:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001216:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8001218:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <MX_TIM2_Init+0xf0>)
 800121a:	2264      	movs	r2, #100	; 0x64
 800121c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121e:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <MX_TIM2_Init+0xf0>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001224:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <MX_TIM2_Init+0xf0>)
 8001226:	2264      	movs	r2, #100	; 0x64
 8001228:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <MX_TIM2_Init+0xf0>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001230:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <MX_TIM2_Init+0xf0>)
 8001232:	2280      	movs	r2, #128	; 0x80
 8001234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001236:	4826      	ldr	r0, [pc, #152]	; (80012d0 <MX_TIM2_Init+0xf0>)
 8001238:	f003 f944 	bl	80044c4 <HAL_TIM_Base_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001242:	f001 f9d5 	bl	80025f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800124c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001250:	4619      	mov	r1, r3
 8001252:	481f      	ldr	r0, [pc, #124]	; (80012d0 <MX_TIM2_Init+0xf0>)
 8001254:	f003 fd4c 	bl	8004cf0 <HAL_TIM_ConfigClockSource>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800125e:	f001 f9c7 	bl	80025f0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001262:	481b      	ldr	r0, [pc, #108]	; (80012d0 <MX_TIM2_Init+0xf0>)
 8001264:	f003 f97d 	bl	8004562 <HAL_TIM_OC_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800126e:	f001 f9bf 	bl	80025f0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8001272:	2108      	movs	r1, #8
 8001274:	4816      	ldr	r0, [pc, #88]	; (80012d0 <MX_TIM2_Init+0xf0>)
 8001276:	f003 fb7d 	bl	8004974 <HAL_TIM_OnePulse_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001280:	f001 f9b6 	bl	80025f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800128c:	f107 0320 	add.w	r3, r7, #32
 8001290:	4619      	mov	r1, r3
 8001292:	480f      	ldr	r0, [pc, #60]	; (80012d0 <MX_TIM2_Init+0xf0>)
 8001294:	f004 f8e8 	bl	8005468 <HAL_TIMEx_MasterConfigSynchronization>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 800129e:	f001 f9a7 	bl	80025f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 80012a2:	2320      	movs	r3, #32
 80012a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2200      	movs	r2, #0
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_TIM2_Init+0xf0>)
 80012ba:	f003 fcbd 	bl	8004c38 <HAL_TIM_OC_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80012c4:	f001 f994 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	3738      	adds	r7, #56	; 0x38
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2000020c 	.word	0x2000020c

080012d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08e      	sub	sp, #56	; 0x38
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
 8001300:	615a      	str	r2, [r3, #20]
 8001302:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001304:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <MX_TIM3_Init+0xf0>)
 8001306:	4a30      	ldr	r2, [pc, #192]	; (80013c8 <MX_TIM3_Init+0xf4>)
 8001308:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 800130a:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <MX_TIM3_Init+0xf0>)
 800130c:	2264      	movs	r2, #100	; 0x64
 800130e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001310:	4b2c      	ldr	r3, [pc, #176]	; (80013c4 <MX_TIM3_Init+0xf0>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 8001316:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <MX_TIM3_Init+0xf0>)
 8001318:	2296      	movs	r2, #150	; 0x96
 800131a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <MX_TIM3_Init+0xf0>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001322:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <MX_TIM3_Init+0xf0>)
 8001324:	2280      	movs	r2, #128	; 0x80
 8001326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001328:	4826      	ldr	r0, [pc, #152]	; (80013c4 <MX_TIM3_Init+0xf0>)
 800132a:	f003 f8cb 	bl	80044c4 <HAL_TIM_Base_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001334:	f001 f95c 	bl	80025f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800133e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001342:	4619      	mov	r1, r3
 8001344:	481f      	ldr	r0, [pc, #124]	; (80013c4 <MX_TIM3_Init+0xf0>)
 8001346:	f003 fcd3 	bl	8004cf0 <HAL_TIM_ConfigClockSource>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001350:	f001 f94e 	bl	80025f0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001354:	481b      	ldr	r0, [pc, #108]	; (80013c4 <MX_TIM3_Init+0xf0>)
 8001356:	f003 f904 	bl	8004562 <HAL_TIM_OC_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001360:	f001 f946 	bl	80025f0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8001364:	2108      	movs	r1, #8
 8001366:	4817      	ldr	r0, [pc, #92]	; (80013c4 <MX_TIM3_Init+0xf0>)
 8001368:	f003 fb04 	bl	8004974 <HAL_TIM_OnePulse_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001372:	f001 f93d 	bl	80025f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800137e:	f107 0320 	add.w	r3, r7, #32
 8001382:	4619      	mov	r1, r3
 8001384:	480f      	ldr	r0, [pc, #60]	; (80013c4 <MX_TIM3_Init+0xf0>)
 8001386:	f004 f86f 	bl	8005468 <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001390:	f001 f92e 	bl	80025f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8001394:	2320      	movs	r3, #32
 8001396:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	4619      	mov	r1, r3
 80013aa:	4806      	ldr	r0, [pc, #24]	; (80013c4 <MX_TIM3_Init+0xf0>)
 80013ac:	f003 fc44 	bl	8004c38 <HAL_TIM_OC_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80013b6:	f001 f91b 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	3738      	adds	r7, #56	; 0x38
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000254 	.word	0x20000254
 80013c8:	40000400 	.word	0x40000400

080013cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <MX_USART1_UART_Init+0x50>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_USART1_UART_Init+0x4c>)
 8001404:	f004 f8b2 	bl	800556c <HAL_UART_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800140e:	f001 f8ef 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2000029c 	.word	0x2000029c
 800141c:	40011000 	.word	0x40011000

08001420 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001426:	4a12      	ldr	r2, [pc, #72]	; (8001470 <MX_USART2_UART_Init+0x50>)
 8001428:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <MX_USART2_UART_Init+0x4c>)
 800142c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001430:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_USART2_UART_Init+0x4c>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001446:	220c      	movs	r2, #12
 8001448:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <MX_USART2_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_USART2_UART_Init+0x4c>)
 8001458:	f004 f888 	bl	800556c <HAL_UART_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001462:	f001 f8c5 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200002e0 	.word	0x200002e0
 8001470:	40004400 	.word	0x40004400

08001474 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_USART6_UART_Init+0x4c>)
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <MX_USART6_UART_Init+0x50>)
 800147c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <MX_USART6_UART_Init+0x4c>)
 8001480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001484:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_USART6_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_USART6_UART_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_USART6_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_USART6_UART_Init+0x4c>)
 800149a:	220c      	movs	r2, #12
 800149c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_USART6_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_USART6_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_USART6_UART_Init+0x4c>)
 80014ac:	f004 f85e 	bl	800556c <HAL_UART_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80014b6:	f001 f89b 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000324 	.word	0x20000324
 80014c4:	40011400 	.word	0x40011400

080014c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b3f      	ldr	r3, [pc, #252]	; (80015e0 <MX_GPIO_Init+0x118>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a3e      	ldr	r2, [pc, #248]	; (80015e0 <MX_GPIO_Init+0x118>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b3c      	ldr	r3, [pc, #240]	; (80015e0 <MX_GPIO_Init+0x118>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b38      	ldr	r3, [pc, #224]	; (80015e0 <MX_GPIO_Init+0x118>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a37      	ldr	r2, [pc, #220]	; (80015e0 <MX_GPIO_Init+0x118>)
 8001504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b35      	ldr	r3, [pc, #212]	; (80015e0 <MX_GPIO_Init+0x118>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <MX_GPIO_Init+0x118>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a30      	ldr	r2, [pc, #192]	; (80015e0 <MX_GPIO_Init+0x118>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <MX_GPIO_Init+0x118>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4b2a      	ldr	r3, [pc, #168]	; (80015e0 <MX_GPIO_Init+0x118>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a29      	ldr	r2, [pc, #164]	; (80015e0 <MX_GPIO_Init+0x118>)
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <MX_GPIO_Init+0x118>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001554:	4823      	ldr	r0, [pc, #140]	; (80015e4 <MX_GPIO_Init+0x11c>)
 8001556:	f002 f833 	bl	80035c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|WIFI_EN_Pin, GPIO_PIN_SET);
 800155a:	2201      	movs	r2, #1
 800155c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001560:	4821      	ldr	r0, [pc, #132]	; (80015e8 <MX_GPIO_Init+0x120>)
 8001562:	f002 f82d 	bl	80035c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 8001566:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800156a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156c:	2301      	movs	r3, #1
 800156e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4619      	mov	r1, r3
 800157e:	4819      	ldr	r0, [pc, #100]	; (80015e4 <MX_GPIO_Init+0x11c>)
 8001580:	f001 fdb6 	bl	80030f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_BTN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin;
 8001584:	2301      	movs	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001588:	2300      	movs	r3, #0
 800158a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_BTN_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	4814      	ldr	r0, [pc, #80]	; (80015e8 <MX_GPIO_Init+0x120>)
 8001598:	f001 fdaa 	bl	80030f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 800159c:	2310      	movs	r3, #16
 800159e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	2303      	movs	r3, #3
 80015aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	480d      	ldr	r0, [pc, #52]	; (80015e8 <MX_GPIO_Init+0x120>)
 80015b4:	f001 fd9c 	bl	80030f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_EN_Pin */
  GPIO_InitStruct.Pin = WIFI_EN_Pin;
 80015b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015be:	2301      	movs	r3, #1
 80015c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_EN_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_GPIO_Init+0x120>)
 80015d2:	f001 fd8d 	bl	80030f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015d6:	bf00      	nop
 80015d8:	3728      	adds	r7, #40	; 0x28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020800 	.word	0x40020800
 80015e8:	40020000 	.word	0x40020000

080015ec <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	e009      	b.n	8001610 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff f81d 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3301      	adds	r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	dbf1      	blt.n	80015fc <ITM0_Write+0x10>
  }
  return len;
 8001618:	683b      	ldr	r3, [r7, #0]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 800162a:	4b1c      	ldr	r3, [pc, #112]	; (800169c <SysTick_Handler+0x78>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	3301      	adds	r3, #1
 8001630:	4a1a      	ldr	r2, [pc, #104]	; (800169c <SysTick_Handler+0x78>)
 8001632:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <SysTick_Handler+0x7c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	3301      	adds	r3, #1
 800163a:	4a19      	ldr	r2, [pc, #100]	; (80016a0 <SysTick_Handler+0x7c>)
 800163c:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <SysTick_Handler+0x80>)
 8001640:	7a1b      	ldrb	r3, [r3, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d004      	beq.n	8001650 <SysTick_Handler+0x2c>
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <SysTick_Handler+0x84>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	3301      	adds	r3, #1
 800164c:	4a16      	ldr	r2, [pc, #88]	; (80016a8 <SysTick_Handler+0x84>)
 800164e:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <SysTick_Handler+0x80>)
 8001652:	7a1b      	ldrb	r3, [r3, #8]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00c      	beq.n	8001672 <SysTick_Handler+0x4e>
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <SysTick_Handler+0x80>)
 800165a:	88db      	ldrh	r3, [r3, #6]
 800165c:	461a      	mov	r2, r3
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <SysTick_Handler+0x84>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	da05      	bge.n	8001672 <SysTick_Handler+0x4e>
		{
			mb_eth._w_answer=0;
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <SysTick_Handler+0x80>)
 8001668:	2200      	movs	r2, #0
 800166a:	721a      	strb	r2, [r3, #8]
			MB_TOUT_ticks=0;
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <SysTick_Handler+0x84>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
		}

	if ((wf._estado == wf._estado_old)&&(lr._data_available)) { wf._wtchdog++;}  //Si hay datos y no hay comm suma
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <SysTick_Handler+0x88>)
 8001674:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <SysTick_Handler+0x88>)
 800167a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800167e:	429a      	cmp	r2, r3
 8001680:	d118      	bne.n	80016b4 <SysTick_Handler+0x90>
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <SysTick_Handler+0x8c>)
 8001684:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8001688:	2b00      	cmp	r3, #0
 800168a:	d013      	beq.n	80016b4 <SysTick_Handler+0x90>
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <SysTick_Handler+0x88>)
 800168e:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 8001692:	3301      	adds	r3, #1
 8001694:	4a05      	ldr	r2, [pc, #20]	; (80016ac <SysTick_Handler+0x88>)
 8001696:	f8c2 3cc0 	str.w	r3, [r2, #3264]	; 0xcc0
 800169a:	e015      	b.n	80016c8 <SysTick_Handler+0xa4>
 800169c:	20000368 	.word	0x20000368
 80016a0:	20004090 	.word	0x20004090
 80016a4:	200018d8 	.word	0x200018d8
 80016a8:	20004098 	.word	0x20004098
 80016ac:	20000b78 	.word	0x20000b78
 80016b0:	20000370 	.word	0x20000370
		else {
				wf._estado_old = wf._estado;
 80016b4:	4b63      	ldr	r3, [pc, #396]	; (8001844 <SysTick_Handler+0x220>)
 80016b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ba:	4a62      	ldr	r2, [pc, #392]	; (8001844 <SysTick_Handler+0x220>)
 80016bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
				wf._wtchdog=0;
 80016c0:	4b60      	ldr	r3, [pc, #384]	; (8001844 <SysTick_Handler+0x220>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
			 }

	if(wf._wtchdog>=30000)
 80016c8:	4b5e      	ldr	r3, [pc, #376]	; (8001844 <SysTick_Handler+0x220>)
 80016ca:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
 80016ce:	f247 522f 	movw	r2, #29999	; 0x752f
 80016d2:	4293      	cmp	r3, r2
 80016d4:	dd0a      	ble.n	80016ec <SysTick_Handler+0xc8>
	{
		wf._wtchdog=0;
 80016d6:	4b5b      	ldr	r3, [pc, #364]	; (8001844 <SysTick_Handler+0x220>)
 80016d8:	2200      	movs	r2, #0
 80016da:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
		wf._rst_rq=1;
 80016de:	4b59      	ldr	r3, [pc, #356]	; (8001844 <SysTick_Handler+0x220>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
		esp_restart=1;
 80016e6:	4b58      	ldr	r3, [pc, #352]	; (8001848 <SysTick_Handler+0x224>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]
	}

// ENVIO DATOS LoRa ---------------------------------------------------------------//

	if(lr.tmr_dly_en==1)
 80016ec:	4b57      	ldr	r3, [pc, #348]	; (800184c <SysTick_Handler+0x228>)
 80016ee:	f893 37ed 	ldrb.w	r3, [r3, #2029]	; 0x7ed
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d116      	bne.n	8001724 <SysTick_Handler+0x100>
	{
		lr.tmr_dlyCNT++;
 80016f6:	4b55      	ldr	r3, [pc, #340]	; (800184c <SysTick_Handler+0x228>)
 80016f8:	f8d3 37f4 	ldr.w	r3, [r3, #2036]	; 0x7f4
 80016fc:	3301      	adds	r3, #1
 80016fe:	4a53      	ldr	r2, [pc, #332]	; (800184c <SysTick_Handler+0x228>)
 8001700:	f8c2 37f4 	str.w	r3, [r2, #2036]	; 0x7f4
		if(lr.tmr_dlyCNT > lr.tmr_dly)
 8001704:	4b51      	ldr	r3, [pc, #324]	; (800184c <SysTick_Handler+0x228>)
 8001706:	f8d3 27f4 	ldr.w	r2, [r3, #2036]	; 0x7f4
 800170a:	4b50      	ldr	r3, [pc, #320]	; (800184c <SysTick_Handler+0x228>)
 800170c:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
 8001710:	429a      	cmp	r2, r3
 8001712:	dd07      	ble.n	8001724 <SysTick_Handler+0x100>
		{
			lr.tmr_dly_ON=1;
 8001714:	4b4d      	ldr	r3, [pc, #308]	; (800184c <SysTick_Handler+0x228>)
 8001716:	2201      	movs	r2, #1
 8001718:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
			lr.tmr_dly_en=0;
 800171c:	4b4b      	ldr	r3, [pc, #300]	; (800184c <SysTick_Handler+0x228>)
 800171e:	2200      	movs	r2, #0
 8001720:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		}
	}
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 8001724:	4b47      	ldr	r3, [pc, #284]	; (8001844 <SysTick_Handler+0x220>)
 8001726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800172a:	f240 2261 	movw	r2, #609	; 0x261
 800172e:	4293      	cmp	r3, r2
 8001730:	d005      	beq.n	800173e <SysTick_Handler+0x11a>
 8001732:	4b44      	ldr	r3, [pc, #272]	; (8001844 <SysTick_Handler+0x220>)
 8001734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001738:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800173c:	d109      	bne.n	8001752 <SysTick_Handler+0x12e>
 800173e:	4b41      	ldr	r3, [pc, #260]	; (8001844 <SysTick_Handler+0x220>)
 8001740:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001744:	2b00      	cmp	r3, #0
 8001746:	d104      	bne.n	8001752 <SysTick_Handler+0x12e>
 8001748:	4b41      	ldr	r3, [pc, #260]	; (8001850 <SysTick_Handler+0x22c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	4a40      	ldr	r2, [pc, #256]	; (8001850 <SysTick_Handler+0x22c>)
 8001750:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 2000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;
 8001752:	4b3f      	ldr	r3, [pc, #252]	; (8001850 <SysTick_Handler+0x22c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800175a:	db0c      	blt.n	8001776 <SysTick_Handler+0x152>
 800175c:	4b39      	ldr	r3, [pc, #228]	; (8001844 <SysTick_Handler+0x220>)
 800175e:	f8d3 3ab4 	ldr.w	r3, [r3, #2740]	; 0xab4
 8001762:	2b01      	cmp	r3, #1
 8001764:	d007      	beq.n	8001776 <SysTick_Handler+0x152>
 8001766:	4b37      	ldr	r3, [pc, #220]	; (8001844 <SysTick_Handler+0x220>)
 8001768:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <SysTick_Handler+0x152>
 8001770:	4b38      	ldr	r3, [pc, #224]	; (8001854 <SysTick_Handler+0x230>)
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S0_status == 0)
 8001776:	4b38      	ldr	r3, [pc, #224]	; (8001858 <SysTick_Handler+0x234>)
 8001778:	7b9b      	ldrb	r3, [r3, #14]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10e      	bne.n	800179c <SysTick_Handler+0x178>
	{
		ETH.ETH_WDG++;
 800177e:	4b36      	ldr	r3, [pc, #216]	; (8001858 <SysTick_Handler+0x234>)
 8001780:	899b      	ldrh	r3, [r3, #12]
 8001782:	3301      	adds	r3, #1
 8001784:	b29a      	uxth	r2, r3
 8001786:	4b34      	ldr	r3, [pc, #208]	; (8001858 <SysTick_Handler+0x234>)
 8001788:	819a      	strh	r2, [r3, #12]
		if (ETH.ETH_WDG>=64000)
 800178a:	4b33      	ldr	r3, [pc, #204]	; (8001858 <SysTick_Handler+0x234>)
 800178c:	899b      	ldrh	r3, [r3, #12]
 800178e:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001792:	d303      	bcc.n	800179c <SysTick_Handler+0x178>
		{
			ETH.ETH_WDG=64000;
 8001794:	4b30      	ldr	r3, [pc, #192]	; (8001858 <SysTick_Handler+0x234>)
 8001796:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800179a:	819a      	strh	r2, [r3, #12]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 800179c:	4b2f      	ldr	r3, [pc, #188]	; (800185c <SysTick_Handler+0x238>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b64      	cmp	r3, #100	; 0x64
 80017a2:	f040 841b 	bne.w	8001fdc <SysTick_Handler+0x9b8>
  {
	  dbgn++;
 80017a6:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <SysTick_Handler+0x23c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	3301      	adds	r3, #1
 80017ac:	4a2c      	ldr	r2, [pc, #176]	; (8001860 <SysTick_Handler+0x23c>)
 80017ae:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 80017b0:	4b2a      	ldr	r3, [pc, #168]	; (800185c <SysTick_Handler+0x238>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 80017b6:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <SysTick_Handler+0x240>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	4a29      	ldr	r2, [pc, #164]	; (8001864 <SysTick_Handler+0x240>)
 80017be:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 80017c0:	4b29      	ldr	r3, [pc, #164]	; (8001868 <SysTick_Handler+0x244>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80017c8:	d102      	bne.n	80017d0 <SysTick_Handler+0x1ac>
 80017ca:	4b27      	ldr	r3, [pc, #156]	; (8001868 <SysTick_Handler+0x244>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 80017d0:	4b26      	ldr	r3, [pc, #152]	; (800186c <SysTick_Handler+0x248>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d104      	bne.n	80017e2 <SysTick_Handler+0x1be>
 80017d8:	4b23      	ldr	r3, [pc, #140]	; (8001868 <SysTick_Handler+0x244>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3301      	adds	r3, #1
 80017de:	4a22      	ldr	r2, [pc, #136]	; (8001868 <SysTick_Handler+0x244>)
 80017e0:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 80017e2:	4b21      	ldr	r3, [pc, #132]	; (8001868 <SysTick_Handler+0x244>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b64      	cmp	r3, #100	; 0x64
 80017e8:	d102      	bne.n	80017f0 <SysTick_Handler+0x1cc>
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <SysTick_Handler+0x248>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 80017f0:	4b1e      	ldr	r3, [pc, #120]	; (800186c <SysTick_Handler+0x248>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d104      	bne.n	8001802 <SysTick_Handler+0x1de>
 80017f8:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <SysTick_Handler+0x244>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	4a1a      	ldr	r2, [pc, #104]	; (8001868 <SysTick_Handler+0x244>)
 8001800:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 8001802:	4b19      	ldr	r3, [pc, #100]	; (8001868 <SysTick_Handler+0x244>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d102      	bne.n	8001810 <SysTick_Handler+0x1ec>
 800180a:	4b18      	ldr	r3, [pc, #96]	; (800186c <SysTick_Handler+0x248>)
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]


	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001810:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001814:	4816      	ldr	r0, [pc, #88]	; (8001870 <SysTick_Handler+0x24c>)
 8001816:	f001 feec 	bl	80035f2 <HAL_GPIO_TogglePin>
	  if(spi_no_debug)
 800181a:	4b16      	ldr	r3, [pc, #88]	; (8001874 <SysTick_Handler+0x250>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 83cc 	beq.w	8001fbc <SysTick_Handler+0x998>
	  	  {
	  if(SPI_READ_EN)
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <SysTick_Handler+0x254>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 83cb 	beq.w	8001fc4 <SysTick_Handler+0x9a0>
	  {
	     ETH.S0_status=eth_rd_SOCKET_STAT(&ETH,0);
 800182e:	2100      	movs	r1, #0
 8001830:	4809      	ldr	r0, [pc, #36]	; (8001858 <SysTick_Handler+0x234>)
 8001832:	f00c fd59 	bl	800e2e8 <eth_rd_SOCKET_STAT>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <SysTick_Handler+0x234>)
 800183c:	739a      	strb	r2, [r3, #14]

		  switch(ETH.S0_status)	//Check Socket status
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <SysTick_Handler+0x234>)
 8001840:	7b9b      	ldrb	r3, [r3, #14]
 8001842:	e01b      	b.n	800187c <SysTick_Handler+0x258>
 8001844:	20000b78 	.word	0x20000b78
 8001848:	20003a70 	.word	0x20003a70
 800184c:	20000370 	.word	0x20000370
 8001850:	2000297c 	.word	0x2000297c
 8001854:	20002979 	.word	0x20002979
 8001858:	20002980 	.word	0x20002980
 800185c:	20000368 	.word	0x20000368
 8001860:	200040bc 	.word	0x200040bc
 8001864:	2000036c 	.word	0x2000036c
 8001868:	20004094 	.word	0x20004094
 800186c:	20003a72 	.word	0x20003a72
 8001870:	40020800 	.word	0x40020800
 8001874:	20003a64 	.word	0x20003a64
 8001878:	20003a74 	.word	0x20003a74
 800187c:	2b5f      	cmp	r3, #95	; 0x5f
 800187e:	f200 83a6 	bhi.w	8001fce <SysTick_Handler+0x9aa>
 8001882:	a201      	add	r2, pc, #4	; (adr r2, 8001888 <SysTick_Handler+0x264>)
 8001884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001888:	08001a09 	.word	0x08001a09
 800188c:	08001fcf 	.word	0x08001fcf
 8001890:	08001fcf 	.word	0x08001fcf
 8001894:	08001fcf 	.word	0x08001fcf
 8001898:	08001fcf 	.word	0x08001fcf
 800189c:	08001fcf 	.word	0x08001fcf
 80018a0:	08001fcf 	.word	0x08001fcf
 80018a4:	08001fcf 	.word	0x08001fcf
 80018a8:	08001fcf 	.word	0x08001fcf
 80018ac:	08001fcf 	.word	0x08001fcf
 80018b0:	08001fcf 	.word	0x08001fcf
 80018b4:	08001fcf 	.word	0x08001fcf
 80018b8:	08001fcf 	.word	0x08001fcf
 80018bc:	08001fcf 	.word	0x08001fcf
 80018c0:	08001fcf 	.word	0x08001fcf
 80018c4:	08001fcf 	.word	0x08001fcf
 80018c8:	08001fcf 	.word	0x08001fcf
 80018cc:	08001fcf 	.word	0x08001fcf
 80018d0:	08001fcf 	.word	0x08001fcf
 80018d4:	08001a41 	.word	0x08001a41
 80018d8:	08001a93 	.word	0x08001a93
 80018dc:	08001aab 	.word	0x08001aab
 80018e0:	08001ac3 	.word	0x08001ac3
 80018e4:	08001adb 	.word	0x08001adb
 80018e8:	08001e37 	.word	0x08001e37
 80018ec:	08001fcf 	.word	0x08001fcf
 80018f0:	08001e4f 	.word	0x08001e4f
 80018f4:	08001e67 	.word	0x08001e67
 80018f8:	08001ea5 	.word	0x08001ea5
 80018fc:	08001ee3 	.word	0x08001ee3
 8001900:	08001fcf 	.word	0x08001fcf
 8001904:	08001fcf 	.word	0x08001fcf
 8001908:	08001fcf 	.word	0x08001fcf
 800190c:	08001fcf 	.word	0x08001fcf
 8001910:	08001efb 	.word	0x08001efb
 8001914:	08001fcf 	.word	0x08001fcf
 8001918:	08001fcf 	.word	0x08001fcf
 800191c:	08001fcf 	.word	0x08001fcf
 8001920:	08001fcf 	.word	0x08001fcf
 8001924:	08001fcf 	.word	0x08001fcf
 8001928:	08001fcf 	.word	0x08001fcf
 800192c:	08001fcf 	.word	0x08001fcf
 8001930:	08001fcf 	.word	0x08001fcf
 8001934:	08001fcf 	.word	0x08001fcf
 8001938:	08001fcf 	.word	0x08001fcf
 800193c:	08001fcf 	.word	0x08001fcf
 8001940:	08001fcf 	.word	0x08001fcf
 8001944:	08001fcf 	.word	0x08001fcf
 8001948:	08001fcf 	.word	0x08001fcf
 800194c:	08001fcf 	.word	0x08001fcf
 8001950:	08001f75 	.word	0x08001f75
 8001954:	08001fcf 	.word	0x08001fcf
 8001958:	08001fcf 	.word	0x08001fcf
 800195c:	08001fcf 	.word	0x08001fcf
 8001960:	08001fcf 	.word	0x08001fcf
 8001964:	08001fcf 	.word	0x08001fcf
 8001968:	08001fcf 	.word	0x08001fcf
 800196c:	08001fcf 	.word	0x08001fcf
 8001970:	08001fcf 	.word	0x08001fcf
 8001974:	08001fcf 	.word	0x08001fcf
 8001978:	08001fcf 	.word	0x08001fcf
 800197c:	08001fcf 	.word	0x08001fcf
 8001980:	08001fcf 	.word	0x08001fcf
 8001984:	08001fcf 	.word	0x08001fcf
 8001988:	08001fcf 	.word	0x08001fcf
 800198c:	08001fcf 	.word	0x08001fcf
 8001990:	08001f8d 	.word	0x08001f8d
 8001994:	08001fcf 	.word	0x08001fcf
 8001998:	08001fcf 	.word	0x08001fcf
 800199c:	08001fcf 	.word	0x08001fcf
 80019a0:	08001fcf 	.word	0x08001fcf
 80019a4:	08001fcf 	.word	0x08001fcf
 80019a8:	08001fcf 	.word	0x08001fcf
 80019ac:	08001fcf 	.word	0x08001fcf
 80019b0:	08001fcf 	.word	0x08001fcf
 80019b4:	08001fcf 	.word	0x08001fcf
 80019b8:	08001fcf 	.word	0x08001fcf
 80019bc:	08001fcf 	.word	0x08001fcf
 80019c0:	08001fcf 	.word	0x08001fcf
 80019c4:	08001fcf 	.word	0x08001fcf
 80019c8:	08001fcf 	.word	0x08001fcf
 80019cc:	08001fcf 	.word	0x08001fcf
 80019d0:	08001fcf 	.word	0x08001fcf
 80019d4:	08001fcf 	.word	0x08001fcf
 80019d8:	08001fcf 	.word	0x08001fcf
 80019dc:	08001fcf 	.word	0x08001fcf
 80019e0:	08001fcf 	.word	0x08001fcf
 80019e4:	08001fcf 	.word	0x08001fcf
 80019e8:	08001fcf 	.word	0x08001fcf
 80019ec:	08001fcf 	.word	0x08001fcf
 80019f0:	08001fcf 	.word	0x08001fcf
 80019f4:	08001fcf 	.word	0x08001fcf
 80019f8:	08001fcf 	.word	0x08001fcf
 80019fc:	08001fcf 	.word	0x08001fcf
 8001a00:	08001fcf 	.word	0x08001fcf
 8001a04:	08001fa5 	.word	0x08001fa5
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 8001a08:	4b82      	ldr	r3, [pc, #520]	; (8001c14 <SysTick_Handler+0x5f0>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <SysTick_Handler+0x3f4>
 8001a10:	2113      	movs	r1, #19
 8001a12:	4881      	ldr	r0, [pc, #516]	; (8001c18 <SysTick_Handler+0x5f4>)
 8001a14:	f7ff fdea 	bl	80015ec <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH, 0 ,OPEN );
 8001a18:	2201      	movs	r2, #1
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	487f      	ldr	r0, [pc, #508]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001a1e:	f00c fb79 	bl	800e114 <eth_wr_SOCKET_CMD>
					 // Si no tengo intento de ARP por 5 segundos vuelvo a inicializar
					 if(ETH.ETH_WDG>=5000)
 8001a22:	4b7e      	ldr	r3, [pc, #504]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001a24:	899b      	ldrh	r3, [r3, #12]
 8001a26:	f241 3287 	movw	r2, #4999	; 0x1387
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	f240 82cc 	bls.w	8001fc8 <SysTick_Handler+0x9a4>
					 {
						 eth_init(&ETH);
 8001a30:	487a      	ldr	r0, [pc, #488]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001a32:	f00c fbab 	bl	800e18c <eth_init>

						 eth_socket_init(&ETH,0);
 8001a36:	2100      	movs	r1, #0
 8001a38:	4878      	ldr	r0, [pc, #480]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001a3a:	f00c fbfd 	bl	800e238 <eth_socket_init>
					 }

				 }
			 break;
 8001a3e:	e2c3      	b.n	8001fc8 <SysTick_Handler+0x9a4>
			 case  SOCK_INIT :
				 {
					 if(ETH.S0_ENserver == 1)
 8001a40:	4b76      	ldr	r3, [pc, #472]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d110      	bne.n	8001a70 <SysTick_Handler+0x44c>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 8001a4e:	4b71      	ldr	r3, [pc, #452]	; (8001c14 <SysTick_Handler+0x5f0>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <SysTick_Handler+0x43a>
 8001a56:	2111      	movs	r1, #17
 8001a58:	4871      	ldr	r0, [pc, #452]	; (8001c20 <SysTick_Handler+0x5fc>)
 8001a5a:	f7ff fdc7 	bl	80015ec <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, 0, LISTEN );
 8001a5e:	2202      	movs	r2, #2
 8001a60:	2100      	movs	r1, #0
 8001a62:	486e      	ldr	r0, [pc, #440]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001a64:	f00c fb56 	bl	800e114 <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 8001a68:	4b6c      	ldr	r3, [pc, #432]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	819a      	strh	r2, [r3, #12]
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 8001a6e:	e2ae      	b.n	8001fce <SysTick_Handler+0x9aa>
						 	eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
 8001a70:	2204      	movs	r2, #4
 8001a72:	2100      	movs	r1, #0
 8001a74:	4869      	ldr	r0, [pc, #420]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001a76:	f00c fb4d 	bl	800e114 <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));
 8001a7a:	4b66      	ldr	r3, [pc, #408]	; (8001c14 <SysTick_Handler+0x5f0>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <SysTick_Handler+0x466>
 8001a82:	2115      	movs	r1, #21
 8001a84:	4867      	ldr	r0, [pc, #412]	; (8001c24 <SysTick_Handler+0x600>)
 8001a86:	f7ff fdb1 	bl	80015ec <ITM0_Write>
						 	ETH.ETH_WDG=0;
 8001a8a:	4b64      	ldr	r3, [pc, #400]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	819a      	strh	r2, [r3, #12]
			 break;
 8001a90:	e29d      	b.n	8001fce <SysTick_Handler+0x9aa>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 8001a92:	4b60      	ldr	r3, [pc, #384]	; (8001c14 <SysTick_Handler+0x5f0>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <SysTick_Handler+0x47e>
 8001a9a:	2113      	movs	r1, #19
 8001a9c:	4862      	ldr	r0, [pc, #392]	; (8001c28 <SysTick_Handler+0x604>)
 8001a9e:	f7ff fda5 	bl	80015ec <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001aa2:	4b5e      	ldr	r3, [pc, #376]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001aa8:	e291      	b.n	8001fce <SysTick_Handler+0x9aa>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 8001aaa:	4b5a      	ldr	r3, [pc, #360]	; (8001c14 <SysTick_Handler+0x5f0>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <SysTick_Handler+0x496>
 8001ab2:	2114      	movs	r1, #20
 8001ab4:	485d      	ldr	r0, [pc, #372]	; (8001c2c <SysTick_Handler+0x608>)
 8001ab6:	f7ff fd99 	bl	80015ec <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001aba:	4b58      	ldr	r3, [pc, #352]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ac0:	e285      	b.n	8001fce <SysTick_Handler+0x9aa>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 8001ac2:	4b54      	ldr	r3, [pc, #336]	; (8001c14 <SysTick_Handler+0x5f0>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <SysTick_Handler+0x4ae>
 8001aca:	2114      	movs	r1, #20
 8001acc:	4858      	ldr	r0, [pc, #352]	; (8001c30 <SysTick_Handler+0x60c>)
 8001ace:	f7ff fd8d 	bl	80015ec <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001ad2:	4b52      	ldr	r3, [pc, #328]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ad8:	e279      	b.n	8001fce <SysTick_Handler+0x9aa>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 8001ada:	4b4e      	ldr	r3, [pc, #312]	; (8001c14 <SysTick_Handler+0x5f0>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <SysTick_Handler+0x4c6>
 8001ae2:	2118      	movs	r1, #24
 8001ae4:	4853      	ldr	r0, [pc, #332]	; (8001c34 <SysTick_Handler+0x610>)
 8001ae6:	f7ff fd81 	bl	80015ec <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001aea:	4b4c      	ldr	r3, [pc, #304]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	819a      	strh	r2, [r3, #12]

					if (ETH.S0_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 8001af0:	4b4a      	ldr	r3, [pc, #296]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	f040 80b0 	bne.w	8001c60 <SysTick_Handler+0x63c>
					{

							S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001b00:	2302      	movs	r3, #2
 8001b02:	9301      	str	r3, [sp, #4]
 8001b04:	4b4c      	ldr	r3, [pc, #304]	; (8001c38 <SysTick_Handler+0x614>)
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	230f      	movs	r3, #15
 8001b0a:	2226      	movs	r2, #38	; 0x26
 8001b0c:	2104      	movs	r1, #4
 8001b0e:	4843      	ldr	r0, [pc, #268]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001b10:	f00c f9d5 	bl	800debe <SPI_ETH_REG>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	4b48      	ldr	r3, [pc, #288]	; (8001c3c <SysTick_Handler+0x618>)
 8001b1a:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001b1c:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <SysTick_Handler+0x618>)
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 8253 	beq.w	8001fcc <SysTick_Handler+0x9a8>
							{
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001b26:	4b45      	ldr	r3, [pc, #276]	; (8001c3c <SysTick_Handler+0x618>)
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	4a45      	ldr	r2, [pc, #276]	; (8001c40 <SysTick_Handler+0x61c>)
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	483b      	ldr	r0, [pc, #236]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001b30:	f00c fc14 	bl	800e35c <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001b34:	4b42      	ldr	r3, [pc, #264]	; (8001c40 <SysTick_Handler+0x61c>)
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001b3e:	4837      	ldr	r0, [pc, #220]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001b40:	f00c fa35 	bl	800dfae <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001b44:	2240      	movs	r2, #64	; 0x40
 8001b46:	2100      	movs	r1, #0
 8001b48:	4834      	ldr	r0, [pc, #208]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001b4a:	f00c fae3 	bl	800e114 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001b4e:	bf00      	nop
 8001b50:	2100      	movs	r1, #0
 8001b52:	4832      	ldr	r0, [pc, #200]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001b54:	f00c fbe5 	bl	800e322 <eth_rd_SOCKET_CMD>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f8      	bne.n	8001b50 <SysTick_Handler+0x52c>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001b5e:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <SysTick_Handler+0x618>)
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	2300      	movs	r3, #0
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2300      	movs	r3, #0
 8001b6a:	4936      	ldr	r1, [pc, #216]	; (8001c44 <SysTick_Handler+0x620>)
 8001b6c:	4836      	ldr	r0, [pc, #216]	; (8001c48 <SysTick_Handler+0x624>)
 8001b6e:	f00d f99b 	bl	800eea8 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001b72:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <SysTick_Handler+0x618>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <SysTick_Handler+0x628>)
 8001b7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}					//Flag data received
 8001b7e:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <SysTick_Handler+0x618>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <SysTick_Handler+0x568>
 8001b86:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	749a      	strb	r2, [r3, #18]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001b8c:	4b2f      	ldr	r3, [pc, #188]	; (8001c4c <SysTick_Handler+0x628>)
 8001b8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001b92:	4619      	mov	r1, r3
 8001b94:	482c      	ldr	r0, [pc, #176]	; (8001c48 <SysTick_Handler+0x624>)
 8001b96:	f00a fe7d 	bl	800c894 <ModBUS_Check>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00d      	beq.n	8001bbc <SysTick_Handler+0x598>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001ba0:	482a      	ldr	r0, [pc, #168]	; (8001c4c <SysTick_Handler+0x628>)
 8001ba2:	f00a ff7b 	bl	800ca9c <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 8001ba6:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <SysTick_Handler+0x628>)
 8001ba8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8001bac:	2300      	movs	r3, #0
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	4927      	ldr	r1, [pc, #156]	; (8001c50 <SysTick_Handler+0x62c>)
 8001bb4:	4823      	ldr	r0, [pc, #140]	; (8001c44 <SysTick_Handler+0x620>)
 8001bb6:	f00d f977 	bl	800eea8 <CopiaVector>
 8001bba:	e007      	b.n	8001bcc <SysTick_Handler+0x5a8>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001bbc:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <SysTick_Handler+0x5f0>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <SysTick_Handler+0x5a8>
 8001bc4:	2111      	movs	r1, #17
 8001bc6:	4823      	ldr	r0, [pc, #140]	; (8001c54 <SysTick_Handler+0x630>)
 8001bc8:	f7ff fd10 	bl	80015ec <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001bcc:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <SysTick_Handler+0x628>)
 8001bce:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <SysTick_Handler+0x634>)
 8001bd6:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <SysTick_Handler+0x634>)
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	4a1f      	ldr	r2, [pc, #124]	; (8001c5c <SysTick_Handler+0x638>)
 8001bde:	2100      	movs	r1, #0
 8001be0:	480e      	ldr	r0, [pc, #56]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001be2:	f00c fc8b 	bl	800e4fc <eth_wr_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <SysTick_Handler+0x638>)
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	f240 4124 	movw	r1, #1060	; 0x424
 8001bf0:	480a      	ldr	r0, [pc, #40]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001bf2:	f00c f9dc 	bl	800dfae <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4808      	ldr	r0, [pc, #32]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001bfc:	f00c fa8a 	bl	800e114 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001c00:	bf00      	nop
 8001c02:	2100      	movs	r1, #0
 8001c04:	4805      	ldr	r0, [pc, #20]	; (8001c1c <SysTick_Handler+0x5f8>)
 8001c06:	f00c fb8c 	bl	800e322 <eth_rd_SOCKET_CMD>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f8      	bne.n	8001c02 <SysTick_Handler+0x5de>

							}
						}
					}
				 }
			 break;
 8001c10:	e1dc      	b.n	8001fcc <SysTick_Handler+0x9a8>
 8001c12:	bf00      	nop
 8001c14:	20002978 	.word	0x20002978
 8001c18:	08010584 	.word	0x08010584
 8001c1c:	20002980 	.word	0x20002980
 8001c20:	08010598 	.word	0x08010598
 8001c24:	080105ac 	.word	0x080105ac
 8001c28:	080105c4 	.word	0x080105c4
 8001c2c:	080105d8 	.word	0x080105d8
 8001c30:	080105f0 	.word	0x080105f0
 8001c34:	08010608 	.word	0x08010608
 8001c38:	20003a24 	.word	0x20003a24
 8001c3c:	200039e8 	.word	0x200039e8
 8001c40:	200039ec 	.word	0x200039ec
 8001c44:	2000299c 	.word	0x2000299c
 8001c48:	200018ea 	.word	0x200018ea
 8001c4c:	200018d8 	.word	0x200018d8
 8001c50:	20001af0 	.word	0x20001af0
 8001c54:	08010624 	.word	0x08010624
 8001c58:	200039ee 	.word	0x200039ee
 8001c5c:	200039ea 	.word	0x200039ea
						if (mb_eth._w_answer==0)
 8001c60:	4bac      	ldr	r3, [pc, #688]	; (8001f14 <SysTick_Handler+0x8f0>)
 8001c62:	7a1b      	ldrb	r3, [r3, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d167      	bne.n	8001d38 <SysTick_Handler+0x714>
							ETH.data[0]=0x00;
 8001c68:	4bab      	ldr	r3, [pc, #684]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	771a      	strb	r2, [r3, #28]
							ETH.data[1]=0x00;
 8001c6e:	4baa      	ldr	r3, [pc, #680]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	775a      	strb	r2, [r3, #29]
							ETH.data[2]=0x00;
 8001c74:	4ba8      	ldr	r3, [pc, #672]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	779a      	strb	r2, [r3, #30]
							ETH.data[3]=0x00;
 8001c7a:	4ba7      	ldr	r3, [pc, #668]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	77da      	strb	r2, [r3, #31]
							ETH.data[4]=0x00;
 8001c80:	4ba5      	ldr	r3, [pc, #660]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2020 	strb.w	r2, [r3, #32]
							ETH.data[5]=0x06;
 8001c88:	4ba3      	ldr	r3, [pc, #652]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001c8a:	2206      	movs	r2, #6
 8001c8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
							ETH.data[6]=0x01;
 8001c90:	4ba1      	ldr	r3, [pc, #644]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
							ETH.data[7]=0x03;
 8001c98:	4b9f      	ldr	r3, [pc, #636]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							ETH.data[8]=0x00;
 8001ca0:	4b9d      	ldr	r3, [pc, #628]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[9]=0x00;
 8001ca8:	4b9b      	ldr	r3, [pc, #620]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[10]=0x00;
 8001cb0:	4b99      	ldr	r3, [pc, #612]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[11]=0x0A;
 8001cb8:	4b97      	ldr	r3, [pc, #604]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001cba:	220a      	movs	r2, #10
 8001cbc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							send_size=12;
 8001cc0:	4b96      	ldr	r3, [pc, #600]	; (8001f1c <SysTick_Handler+0x8f8>)
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 8001cc6:	220f      	movs	r2, #15
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4892      	ldr	r0, [pc, #584]	; (8001f14 <SysTick_Handler+0x8f0>)
 8001ccc:	f00a fe8f 	bl	800c9ee <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	4991      	ldr	r1, [pc, #580]	; (8001f20 <SysTick_Handler+0x8fc>)
 8001cda:	4892      	ldr	r0, [pc, #584]	; (8001f24 <SysTick_Handler+0x900>)
 8001cdc:	f00d f8e4 	bl	800eea8 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,0, &tx_mem_pointer, send_size);	// write socket data
 8001ce0:	4b8e      	ldr	r3, [pc, #568]	; (8001f1c <SysTick_Handler+0x8f8>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	4a90      	ldr	r2, [pc, #576]	; (8001f28 <SysTick_Handler+0x904>)
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	488b      	ldr	r0, [pc, #556]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001cea:	f00c fc07 	bl	800e4fc <eth_wr_SOCKET_DATA>
							SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer);			// write tx memory pointer
 8001cee:	4b8e      	ldr	r3, [pc, #568]	; (8001f28 <SysTick_Handler+0x904>)
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f240 4124 	movw	r1, #1060	; 0x424
 8001cf8:	4887      	ldr	r0, [pc, #540]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001cfa:	f00c f958 	bl	800dfae <SPI_ETH_WR_REG_16>
							eth_wr_SOCKET_CMD(&ETH,0,SEND);							// write command to execute
 8001cfe:	2220      	movs	r2, #32
 8001d00:	2100      	movs	r1, #0
 8001d02:	4885      	ldr	r0, [pc, #532]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001d04:	f00c fa06 	bl	800e114 <eth_wr_SOCKET_CMD>
							while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001d08:	bf00      	nop
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4882      	ldr	r0, [pc, #520]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001d0e:	f00c fb08 	bl	800e322 <eth_rd_SOCKET_CMD>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1f8      	bne.n	8001d0a <SysTick_Handler+0x6e6>
							mb_eth._w_answer=1;	// Waiting answer flag
 8001d18:	4b7e      	ldr	r3, [pc, #504]	; (8001f14 <SysTick_Handler+0x8f0>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	721a      	strb	r2, [r3, #8]
							MB_TOUT_ticks=0;	// restart counting
 8001d1e:	4b83      	ldr	r3, [pc, #524]	; (8001f2c <SysTick_Handler+0x908>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001d24:	4b82      	ldr	r3, [pc, #520]	; (8001f30 <SysTick_Handler+0x90c>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 814f 	beq.w	8001fcc <SysTick_Handler+0x9a8>
 8001d2e:	2117      	movs	r1, #23
 8001d30:	4880      	ldr	r0, [pc, #512]	; (8001f34 <SysTick_Handler+0x910>)
 8001d32:	f7ff fc5b 	bl	80015ec <ITM0_Write>
			 break;
 8001d36:	e149      	b.n	8001fcc <SysTick_Handler+0x9a8>
						S0_get_size = SPI_ETH_REG(&ETH, S0_RX_SZ_ADDR_BASEHH,S0_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001d38:	2302      	movs	r3, #2
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	4b7e      	ldr	r3, [pc, #504]	; (8001f38 <SysTick_Handler+0x914>)
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	230f      	movs	r3, #15
 8001d42:	2226      	movs	r2, #38	; 0x26
 8001d44:	2104      	movs	r1, #4
 8001d46:	4874      	ldr	r0, [pc, #464]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001d48:	f00c f8b9 	bl	800debe <SPI_ETH_REG>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b7a      	ldr	r3, [pc, #488]	; (8001f3c <SysTick_Handler+0x918>)
 8001d52:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001d54:	4b79      	ldr	r3, [pc, #484]	; (8001f3c <SysTick_Handler+0x918>)
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 8137 	beq.w	8001fcc <SysTick_Handler+0x9a8>
								eth_rd_SOCKET_DATA(&ETH,0,&rx_mem_pointer,S0_get_size); // read socket data
 8001d5e:	4b77      	ldr	r3, [pc, #476]	; (8001f3c <SysTick_Handler+0x918>)
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	4a77      	ldr	r2, [pc, #476]	; (8001f40 <SysTick_Handler+0x91c>)
 8001d64:	2100      	movs	r1, #0
 8001d66:	486c      	ldr	r0, [pc, #432]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001d68:	f00c faf8 	bl	800e35c <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S0_RX_RD0,rx_mem_pointer );		// write rx memory pointer
 8001d6c:	4b74      	ldr	r3, [pc, #464]	; (8001f40 <SysTick_Handler+0x91c>)
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8001d76:	4868      	ldr	r0, [pc, #416]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001d78:	f00c f919 	bl	800dfae <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,0,RECV);							// write command to execute
 8001d7c:	2240      	movs	r2, #64	; 0x40
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4865      	ldr	r0, [pc, #404]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001d82:	f00c f9c7 	bl	800e114 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,0))						// wait until end of command execution
 8001d86:	bf00      	nop
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4863      	ldr	r0, [pc, #396]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001d8c:	f00c fac9 	bl	800e322 <eth_rd_SOCKET_CMD>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f8      	bne.n	8001d88 <SysTick_Handler+0x764>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001d96:	4b69      	ldr	r3, [pc, #420]	; (8001f3c <SysTick_Handler+0x918>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2300      	movs	r3, #0
 8001da2:	4960      	ldr	r1, [pc, #384]	; (8001f24 <SysTick_Handler+0x900>)
 8001da4:	4867      	ldr	r0, [pc, #412]	; (8001f44 <SysTick_Handler+0x920>)
 8001da6:	f00d f87f 	bl	800eea8 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001daa:	4b64      	ldr	r3, [pc, #400]	; (8001f3c <SysTick_Handler+0x918>)
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	4b58      	ldr	r3, [pc, #352]	; (8001f14 <SysTick_Handler+0x8f0>)
 8001db2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
								if(S0_get_size > 0)	{ ETH.S0_data_available=1;}
 8001db6:	4b61      	ldr	r3, [pc, #388]	; (8001f3c <SysTick_Handler+0x918>)
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <SysTick_Handler+0x7a0>
 8001dbe:	4b56      	ldr	r3, [pc, #344]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	749a      	strb	r2, [r3, #18]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001dc4:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <SysTick_Handler+0x8f0>)
 8001dc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001dca:	4619      	mov	r1, r3
 8001dcc:	485d      	ldr	r0, [pc, #372]	; (8001f44 <SysTick_Handler+0x920>)
 8001dce:	f00a fd61 	bl	800c894 <ModBUS_Check>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d024      	beq.n	8001e22 <SysTick_Handler+0x7fe>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001dd8:	4b4e      	ldr	r3, [pc, #312]	; (8001f14 <SysTick_Handler+0x8f0>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	721a      	strb	r2, [r3, #8]
										MB_TOUT_ticks=0;
 8001dde:	4b53      	ldr	r3, [pc, #332]	; (8001f2c <SysTick_Handler+0x908>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001de4:	484b      	ldr	r0, [pc, #300]	; (8001f14 <SysTick_Handler+0x8f0>)
 8001de6:	f00a fe59 	bl	800ca9c <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001dea:	4b4a      	ldr	r3, [pc, #296]	; (8001f14 <SysTick_Handler+0x8f0>)
 8001dec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001df0:	2300      	movs	r3, #0
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	2300      	movs	r3, #0
 8001df6:	4953      	ldr	r1, [pc, #332]	; (8001f44 <SysTick_Handler+0x920>)
 8001df8:	4853      	ldr	r0, [pc, #332]	; (8001f48 <SysTick_Handler+0x924>)
 8001dfa:	f00d f855 	bl	800eea8 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001dfe:	2300      	movs	r3, #0
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	2300      	movs	r3, #0
 8001e04:	2240      	movs	r2, #64	; 0x40
 8001e06:	4951      	ldr	r1, [pc, #324]	; (8001f4c <SysTick_Handler+0x928>)
 8001e08:	4851      	ldr	r0, [pc, #324]	; (8001f50 <SysTick_Handler+0x92c>)
 8001e0a:	f00d f84d 	bl	800eea8 <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));
 8001e0e:	4b48      	ldr	r3, [pc, #288]	; (8001f30 <SysTick_Handler+0x90c>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80da 	beq.w	8001fcc <SysTick_Handler+0x9a8>
 8001e18:	2117      	movs	r1, #23
 8001e1a:	484e      	ldr	r0, [pc, #312]	; (8001f54 <SysTick_Handler+0x930>)
 8001e1c:	f7ff fbe6 	bl	80015ec <ITM0_Write>
			 break;
 8001e20:	e0d4      	b.n	8001fcc <SysTick_Handler+0x9a8>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001e22:	4b43      	ldr	r3, [pc, #268]	; (8001f30 <SysTick_Handler+0x90c>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 80d0 	beq.w	8001fcc <SysTick_Handler+0x9a8>
 8001e2c:	2111      	movs	r1, #17
 8001e2e:	484a      	ldr	r0, [pc, #296]	; (8001f58 <SysTick_Handler+0x934>)
 8001e30:	f7ff fbdc 	bl	80015ec <ITM0_Write>
			 break;
 8001e34:	e0ca      	b.n	8001fcc <SysTick_Handler+0x9a8>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001e36:	4b3e      	ldr	r3, [pc, #248]	; (8001f30 <SysTick_Handler+0x90c>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <SysTick_Handler+0x822>
 8001e3e:	2115      	movs	r1, #21
 8001e40:	4846      	ldr	r0, [pc, #280]	; (8001f5c <SysTick_Handler+0x938>)
 8001e42:	f7ff fbd3 	bl	80015ec <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e46:	4b34      	ldr	r3, [pc, #208]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e4c:	e0bf      	b.n	8001fce <SysTick_Handler+0x9aa>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001e4e:	4b38      	ldr	r3, [pc, #224]	; (8001f30 <SysTick_Handler+0x90c>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <SysTick_Handler+0x83a>
 8001e56:	2114      	movs	r1, #20
 8001e58:	4841      	ldr	r0, [pc, #260]	; (8001f60 <SysTick_Handler+0x93c>)
 8001e5a:	f7ff fbc7 	bl	80015ec <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001e5e:	4b2e      	ldr	r3, [pc, #184]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001e64:	e0b3      	b.n	8001fce <SysTick_Handler+0x9aa>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001e66:	4b32      	ldr	r3, [pc, #200]	; (8001f30 <SysTick_Handler+0x90c>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <SysTick_Handler+0x852>
 8001e6e:	2116      	movs	r1, #22
 8001e70:	483c      	ldr	r0, [pc, #240]	; (8001f64 <SysTick_Handler+0x940>)
 8001e72:	f7ff fbbb 	bl	80015ec <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0, DISCON );
 8001e76:	2208      	movs	r2, #8
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4827      	ldr	r0, [pc, #156]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001e7c:	f00c f94a 	bl	800e114 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001e80:	bf00      	nop
 8001e82:	2301      	movs	r3, #1
 8001e84:	9301      	str	r3, [sp, #4]
 8001e86:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <SysTick_Handler+0x914>)
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	230f      	movs	r3, #15
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	2104      	movs	r1, #4
 8001e90:	4821      	ldr	r0, [pc, #132]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001e92:	f00c f814 	bl	800debe <SPI_ETH_REG>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f2      	bne.n	8001e82 <SysTick_Handler+0x85e>
					{}
					ETH.ETH_WDG=0;
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ea2:	e094      	b.n	8001fce <SysTick_Handler+0x9aa>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001ea4:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <SysTick_Handler+0x90c>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <SysTick_Handler+0x890>
 8001eac:	2117      	movs	r1, #23
 8001eae:	482e      	ldr	r0, [pc, #184]	; (8001f68 <SysTick_Handler+0x944>)
 8001eb0:	f7ff fb9c 	bl	80015ec <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,0,DISCON );
 8001eb4:	2208      	movs	r2, #8
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4817      	ldr	r0, [pc, #92]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001eba:	f00c f92b 	bl	800e114 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH, S0_CR_ADDR_BASEH,S0_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001ebe:	bf00      	nop
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <SysTick_Handler+0x914>)
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	230f      	movs	r3, #15
 8001eca:	2201      	movs	r2, #1
 8001ecc:	2104      	movs	r1, #4
 8001ece:	4812      	ldr	r0, [pc, #72]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001ed0:	f00b fff5 	bl	800debe <SPI_ETH_REG>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f2      	bne.n	8001ec0 <SysTick_Handler+0x89c>
					{}
					ETH.ETH_WDG=0;
 8001eda:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ee0:	e075      	b.n	8001fce <SysTick_Handler+0x9aa>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <SysTick_Handler+0x90c>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <SysTick_Handler+0x8ce>
 8001eea:	2115      	movs	r1, #21
 8001eec:	481f      	ldr	r0, [pc, #124]	; (8001f6c <SysTick_Handler+0x948>)
 8001eee:	f7ff fb7d 	bl	80015ec <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001ef8:	e069      	b.n	8001fce <SysTick_Handler+0x9aa>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <SysTick_Handler+0x90c>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <SysTick_Handler+0x8e6>
 8001f02:	2110      	movs	r1, #16
 8001f04:	481a      	ldr	r0, [pc, #104]	; (8001f70 <SysTick_Handler+0x94c>)
 8001f06:	f7ff fb71 	bl	80015ec <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001f0a:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <SysTick_Handler+0x8f4>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001f10:	e05d      	b.n	8001fce <SysTick_Handler+0x9aa>
 8001f12:	bf00      	nop
 8001f14:	200018d8 	.word	0x200018d8
 8001f18:	20002980 	.word	0x20002980
 8001f1c:	200039ee 	.word	0x200039ee
 8001f20:	20001af0 	.word	0x20001af0
 8001f24:	2000299c 	.word	0x2000299c
 8001f28:	200039ea 	.word	0x200039ea
 8001f2c:	20004098 	.word	0x20004098
 8001f30:	20002978 	.word	0x20002978
 8001f34:	08010634 	.word	0x08010634
 8001f38:	20003a24 	.word	0x20003a24
 8001f3c:	200039e8 	.word	0x200039e8
 8001f40:	200039ec 	.word	0x200039ec
 8001f44:	200018ea 	.word	0x200018ea
 8001f48:	2000319c 	.word	0x2000319c
 8001f4c:	20001cfc 	.word	0x20001cfc
 8001f50:	2000234c 	.word	0x2000234c
 8001f54:	08010648 	.word	0x08010648
 8001f58:	08010624 	.word	0x08010624
 8001f5c:	0801065c 	.word	0x0801065c
 8001f60:	08010674 	.word	0x08010674
 8001f64:	0801068c 	.word	0x0801068c
 8001f68:	080106a4 	.word	0x080106a4
 8001f6c:	080106bc 	.word	0x080106bc
 8001f70:	080106d4 	.word	0x080106d4
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));
 8001f74:	4b62      	ldr	r3, [pc, #392]	; (8002100 <SysTick_Handler+0xadc>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <SysTick_Handler+0x960>
 8001f7c:	2112      	movs	r1, #18
 8001f7e:	4861      	ldr	r0, [pc, #388]	; (8002104 <SysTick_Handler+0xae0>)
 8001f80:	f7ff fb34 	bl	80015ec <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001f84:	4b60      	ldr	r3, [pc, #384]	; (8002108 <SysTick_Handler+0xae4>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001f8a:	e020      	b.n	8001fce <SysTick_Handler+0x9aa>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));
 8001f8c:	4b5c      	ldr	r3, [pc, #368]	; (8002100 <SysTick_Handler+0xadc>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <SysTick_Handler+0x978>
 8001f94:	2113      	movs	r1, #19
 8001f96:	485d      	ldr	r0, [pc, #372]	; (800210c <SysTick_Handler+0xae8>)
 8001f98:	f7ff fb28 	bl	80015ec <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001f9c:	4b5a      	ldr	r3, [pc, #360]	; (8002108 <SysTick_Handler+0xae4>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001fa2:	e014      	b.n	8001fce <SysTick_Handler+0x9aa>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));
 8001fa4:	4b56      	ldr	r3, [pc, #344]	; (8002100 <SysTick_Handler+0xadc>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <SysTick_Handler+0x990>
 8001fac:	2111      	movs	r1, #17
 8001fae:	4858      	ldr	r0, [pc, #352]	; (8002110 <SysTick_Handler+0xaec>)
 8001fb0:	f7ff fb1c 	bl	80015ec <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001fb4:	4b54      	ldr	r3, [pc, #336]	; (8002108 <SysTick_Handler+0xae4>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	819a      	strh	r2, [r3, #12]
				 }
			 break;
 8001fba:	e008      	b.n	8001fce <SysTick_Handler+0x9aa>
				 }
	     }
	  }
	  }else
	  	  {
		  SPI_ETH(&ETH);
 8001fbc:	4852      	ldr	r0, [pc, #328]	; (8002108 <SysTick_Handler+0xae4>)
 8001fbe:	f00b ff57 	bl	800de70 <SPI_ETH>
 8001fc2:	e004      	b.n	8001fce <SysTick_Handler+0x9aa>
			 default:
 8001fc4:	bf00      	nop
 8001fc6:	e002      	b.n	8001fce <SysTick_Handler+0x9aa>
			 break;
 8001fc8:	bf00      	nop
 8001fca:	e000      	b.n	8001fce <SysTick_Handler+0x9aa>
			 break;
 8001fcc:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001fce:	4b51      	ldr	r3, [pc, #324]	; (8002114 <SysTick_Handler+0xaf0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d102      	bne.n	8001fdc <SysTick_Handler+0x9b8>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001fd6:	4b4f      	ldr	r3, [pc, #316]	; (8002114 <SysTick_Handler+0xaf0>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
		  }
  }

	if(EN_USART1_TMR==1) USART1_ticks++;
 8001fdc:	4b4e      	ldr	r3, [pc, #312]	; (8002118 <SysTick_Handler+0xaf4>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d104      	bne.n	8001fee <SysTick_Handler+0x9ca>
 8001fe4:	4b4d      	ldr	r3, [pc, #308]	; (800211c <SysTick_Handler+0xaf8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	4a4c      	ldr	r2, [pc, #304]	; (800211c <SysTick_Handler+0xaf8>)
 8001fec:	6013      	str	r3, [r2, #0]

	if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001fee:	4b4b      	ldr	r3, [pc, #300]	; (800211c <SysTick_Handler+0xaf8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	dd0f      	ble.n	8002016 <SysTick_Handler+0x9f2>
	{
		USART1_ticks=0;
 8001ff6:	4b49      	ldr	r3, [pc, #292]	; (800211c <SysTick_Handler+0xaf8>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
		FLAG_USART1=1;
 8001ffc:	4b48      	ldr	r3, [pc, #288]	; (8002120 <SysTick_Handler+0xafc>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	601a      	str	r2, [r3, #0]
		EN_USART1_TMR=0;
 8002002:	4b45      	ldr	r3, [pc, #276]	; (8002118 <SysTick_Handler+0xaf4>)
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
		items_rx=uart1pass;
 8002008:	4b46      	ldr	r3, [pc, #280]	; (8002124 <SysTick_Handler+0xb00>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a46      	ldr	r2, [pc, #280]	; (8002128 <SysTick_Handler+0xb04>)
 800200e:	6013      	str	r3, [r2, #0]
		uart1pass=0;
 8002010:	4b44      	ldr	r3, [pc, #272]	; (8002124 <SysTick_Handler+0xb00>)
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002016:	f000 fe51 	bl	8002cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 800201a:	4b44      	ldr	r3, [pc, #272]	; (800212c <SysTick_Handler+0xb08>)
 800201c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002020:	2b04      	cmp	r3, #4
 8002022:	d105      	bne.n	8002030 <SysTick_Handler+0xa0c>
	{
		ticks++;
 8002024:	4b42      	ldr	r3, [pc, #264]	; (8002130 <SysTick_Handler+0xb0c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3301      	adds	r3, #1
 800202a:	4a41      	ldr	r2, [pc, #260]	; (8002130 <SysTick_Handler+0xb0c>)
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e002      	b.n	8002036 <SysTick_Handler+0xa12>
	}
	else
	{
		ticks=0;
 8002030:	4b3f      	ldr	r3, [pc, #252]	; (8002130 <SysTick_Handler+0xb0c>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
	}

if(wf._ejecucion==1)
 8002036:	4b3d      	ldr	r3, [pc, #244]	; (800212c <SysTick_Handler+0xb08>)
 8002038:	f8d3 3ab4 	ldr.w	r3, [r3, #2740]	; 0xab4
 800203c:	2b01      	cmp	r3, #1
 800203e:	d158      	bne.n	80020f2 <SysTick_Handler+0xace>
	{
		if (FLAG_TIMEOUT!=1)
 8002040:	4b3c      	ldr	r3, [pc, #240]	; (8002134 <SysTick_Handler+0xb10>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d017      	beq.n	8002078 <SysTick_Handler+0xa54>
		{
			if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 8002048:	4b38      	ldr	r3, [pc, #224]	; (800212c <SysTick_Handler+0xb08>)
 800204a:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 800204e:	2b02      	cmp	r3, #2
 8002050:	d006      	beq.n	8002060 <SysTick_Handler+0xa3c>
 8002052:	4b36      	ldr	r3, [pc, #216]	; (800212c <SysTick_Handler+0xb08>)
 8002054:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8002058:	3301      	adds	r3, #1
 800205a:	4a34      	ldr	r2, [pc, #208]	; (800212c <SysTick_Handler+0xb08>)
 800205c:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
			if(wf._instruccion==2) wf._ticks2++;
 8002060:	4b32      	ldr	r3, [pc, #200]	; (800212c <SysTick_Handler+0xb08>)
 8002062:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8002066:	2b02      	cmp	r3, #2
 8002068:	d106      	bne.n	8002078 <SysTick_Handler+0xa54>
 800206a:	4b30      	ldr	r3, [pc, #192]	; (800212c <SysTick_Handler+0xb08>)
 800206c:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 8002070:	3301      	adds	r3, #1
 8002072:	4a2e      	ldr	r2, [pc, #184]	; (800212c <SysTick_Handler+0xb08>)
 8002074:	f8c2 3cbc 	str.w	r3, [r2, #3260]	; 0xcbc
		}


		if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 8002078:	4b2c      	ldr	r3, [pc, #176]	; (800212c <SysTick_Handler+0xb08>)
 800207a:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 800207e:	2b02      	cmp	r3, #2
 8002080:	d018      	beq.n	80020b4 <SysTick_Handler+0xa90>
 8002082:	4b2a      	ldr	r3, [pc, #168]	; (800212c <SysTick_Handler+0xb08>)
 8002084:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8002088:	f241 527c 	movw	r2, #5500	; 0x157c
 800208c:	4293      	cmp	r3, r2
 800208e:	dd11      	ble.n	80020b4 <SysTick_Handler+0xa90>
		{
			FLAG_TIMEOUT=1;
 8002090:	4b28      	ldr	r3, [pc, #160]	; (8002134 <SysTick_Handler+0xb10>)
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8002096:	4b28      	ldr	r3, [pc, #160]	; (8002138 <SysTick_Handler+0xb14>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f242 020c 	movw	r2, #8204	; 0x200c
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d107      	bne.n	80020b4 <SysTick_Handler+0xa90>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 80020a4:	2201      	movs	r2, #1
 80020a6:	4925      	ldr	r1, [pc, #148]	; (800213c <SysTick_Handler+0xb18>)
 80020a8:	4823      	ldr	r0, [pc, #140]	; (8002138 <SysTick_Handler+0xb14>)
 80020aa:	f003 fbb2 	bl	8005812 <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 80020ae:	4b24      	ldr	r3, [pc, #144]	; (8002140 <SysTick_Handler+0xb1c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
			}
			//wf._ticks=0;
		}
		if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 80020b4:	4b1d      	ldr	r3, [pc, #116]	; (800212c <SysTick_Handler+0xb08>)
 80020b6:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d11d      	bne.n	80020fa <SysTick_Handler+0xad6>
 80020be:	4b1b      	ldr	r3, [pc, #108]	; (800212c <SysTick_Handler+0xb08>)
 80020c0:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 80020c4:	f245 0214 	movw	r2, #20500	; 0x5014
 80020c8:	4293      	cmp	r3, r2
 80020ca:	dd16      	ble.n	80020fa <SysTick_Handler+0xad6>
		{
			FLAG_TIMEOUT=1;
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <SysTick_Handler+0xb10>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]
			if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 80020d2:	4b19      	ldr	r3, [pc, #100]	; (8002138 <SysTick_Handler+0xb14>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f242 020c 	movw	r2, #8204	; 0x200c
 80020dc:	4293      	cmp	r3, r2
 80020de:	d10c      	bne.n	80020fa <SysTick_Handler+0xad6>
			{
				HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 80020e0:	2201      	movs	r2, #1
 80020e2:	4916      	ldr	r1, [pc, #88]	; (800213c <SysTick_Handler+0xb18>)
 80020e4:	4814      	ldr	r0, [pc, #80]	; (8002138 <SysTick_Handler+0xb14>)
 80020e6:	f003 fb94 	bl	8005812 <HAL_UART_Receive_IT>
				EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <SysTick_Handler+0xb1c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
	else
	{
		wf._ticks=0;
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 80020f0:	e003      	b.n	80020fa <SysTick_Handler+0xad6>
		wf._ticks=0;
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <SysTick_Handler+0xb08>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20002978 	.word	0x20002978
 8002104:	080106e8 	.word	0x080106e8
 8002108:	20002980 	.word	0x20002980
 800210c:	080106fc 	.word	0x080106fc
 8002110:	08010710 	.word	0x08010710
 8002114:	2000036c 	.word	0x2000036c
 8002118:	20003a6a 	.word	0x20003a6a
 800211c:	200040a8 	.word	0x200040a8
 8002120:	200040ac 	.word	0x200040ac
 8002124:	200040a4 	.word	0x200040a4
 8002128:	200040b0 	.word	0x200040b0
 800212c:	20000b78 	.word	0x20000b78
 8002130:	2000409c 	.word	0x2000409c
 8002134:	20003a6b 	.word	0x20003a6b
 8002138:	2000029c 	.word	0x2000029c
 800213c:	2000407c 	.word	0x2000407c
 8002140:	20003a68 	.word	0x20003a68

08002144 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a22      	ldr	r2, [pc, #136]	; (80021dc <HAL_UART_ErrorCallback+0x98>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d11c      	bne.n	8002190 <HAL_UART_ErrorCallback+0x4c>
	{
		 volatile int aore=0;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_UART_ErrorCallback+0x9c>)
 8002160:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8002164:	3301      	adds	r3, #1
 8002166:	4a1e      	ldr	r2, [pc, #120]	; (80021e0 <HAL_UART_ErrorCallback+0x9c>)
 8002168:	f8c2 3d28 	str.w	r3, [r2, #3368]	; 0xd28
			aore=ERRUART->Instance->SR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	613b      	str	r3, [r7, #16]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f003 fa42 	bl	8005606 <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 8002182:	f7ff f923 	bl	80013cc <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8002186:	2201      	movs	r2, #1
 8002188:	4916      	ldr	r1, [pc, #88]	; (80021e4 <HAL_UART_ErrorCallback+0xa0>)
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f003 fb41 	bl	8005812 <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <HAL_UART_ErrorCallback+0xa4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d11c      	bne.n	80021d4 <HAL_UART_ErrorCallback+0x90>
	{
		 volatile int aore=0;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 800219e:	2300      	movs	r3, #0
 80021a0:	60bb      	str	r3, [r7, #8]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 80021a2:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <HAL_UART_ErrorCallback+0x9c>)
 80021a4:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 80021a8:	3301      	adds	r3, #1
 80021aa:	4a0d      	ldr	r2, [pc, #52]	; (80021e0 <HAL_UART_ErrorCallback+0x9c>)
 80021ac:	f8c2 3d28 	str.w	r3, [r2, #3368]	; 0xd28
			aore=ERRUART->Instance->SR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	60bb      	str	r3, [r7, #8]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f003 fa20 	bl	8005606 <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 80021c6:	f7ff f92b 	bl	8001420 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 80021ca:	2201      	movs	r2, #1
 80021cc:	4905      	ldr	r1, [pc, #20]	; (80021e4 <HAL_UART_ErrorCallback+0xa0>)
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f003 fb1f 	bl	8005812 <HAL_UART_Receive_IT>
	}
}
 80021d4:	bf00      	nop
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40011000 	.word	0x40011000
 80021e0:	20000b78 	.word	0x20000b78
 80021e4:	2000407c 	.word	0x2000407c
 80021e8:	40004400 	.word	0x40004400

080021ec <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a2c      	ldr	r2, [pc, #176]	; (80022ac <HAL_UART_RxCpltCallback+0xc0>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d123      	bne.n	8002246 <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 80021fe:	4b2c      	ldr	r3, [pc, #176]	; (80022b0 <HAL_UART_RxCpltCallback+0xc4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a2c      	ldr	r2, [pc, #176]	; (80022b4 <HAL_UART_RxCpltCallback+0xc8>)
 8002204:	7811      	ldrb	r1, [r2, #0]
 8002206:	4a2c      	ldr	r2, [pc, #176]	; (80022b8 <HAL_UART_RxCpltCallback+0xcc>)
 8002208:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 800220a:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <HAL_UART_RxCpltCallback+0xc4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	3301      	adds	r3, #1
 8002210:	4a27      	ldr	r2, [pc, #156]	; (80022b0 <HAL_UART_RxCpltCallback+0xc4>)
 8002212:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 8002214:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <HAL_UART_RxCpltCallback+0xc4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800221c:	db03      	blt.n	8002226 <HAL_UART_RxCpltCallback+0x3a>
 800221e:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <HAL_UART_RxCpltCallback+0xc4>)
 8002220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002224:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8002226:	2100      	movs	r1, #0
 8002228:	4824      	ldr	r0, [pc, #144]	; (80022bc <HAL_UART_RxCpltCallback+0xd0>)
 800222a:	f002 f9f3 	bl	8004614 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 800222e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002232:	2201      	movs	r2, #1
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 8002236:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <HAL_UART_RxCpltCallback+0xd4>)
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 800223c:	2201      	movs	r2, #1
 800223e:	491d      	ldr	r1, [pc, #116]	; (80022b4 <HAL_UART_RxCpltCallback+0xc8>)
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f003 fae6 	bl	8005812 <HAL_UART_Receive_IT>
		 }
// LoRa USART2 TIMER3
	if(INTSERIE->Instance==USART2)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a1e      	ldr	r2, [pc, #120]	; (80022c4 <HAL_UART_RxCpltCallback+0xd8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d128      	bne.n	80022a2 <HAL_UART_RxCpltCallback+0xb6>
		 {
			UART2_RX_vect[UART2_RX_pos]=UART2_RX_byte[0];
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_UART_RxCpltCallback+0xdc>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <HAL_UART_RxCpltCallback+0xe0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	b2d1      	uxtb	r1, r2
 800225a:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <HAL_UART_RxCpltCallback+0xe4>)
 800225c:	54d1      	strb	r1, [r2, r3]
			UART2_RX_pos++;
 800225e:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <HAL_UART_RxCpltCallback+0xe0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	3301      	adds	r3, #1
 8002264:	4a19      	ldr	r2, [pc, #100]	; (80022cc <HAL_UART_RxCpltCallback+0xe0>)
 8002266:	6013      	str	r3, [r2, #0]
			if(UART2_RX_pos>=512) UART2_RX_pos=512;
 8002268:	4b18      	ldr	r3, [pc, #96]	; (80022cc <HAL_UART_RxCpltCallback+0xe0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002270:	db03      	blt.n	800227a <HAL_UART_RxCpltCallback+0x8e>
 8002272:	4b16      	ldr	r3, [pc, #88]	; (80022cc <HAL_UART_RxCpltCallback+0xe0>)
 8002274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002278:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 800227a:	2201      	movs	r2, #1
 800227c:	2102      	movs	r1, #2
 800227e:	4815      	ldr	r0, [pc, #84]	; (80022d4 <HAL_UART_RxCpltCallback+0xe8>)
 8002280:	f001 f99e 	bl	80035c0 <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8002284:	2100      	movs	r1, #0
 8002286:	4814      	ldr	r0, [pc, #80]	; (80022d8 <HAL_UART_RxCpltCallback+0xec>)
 8002288:	f002 f9c4 	bl	8004614 <HAL_TIM_OC_Start_IT>
			TIM3->CNT=1;
 800228c:	4b13      	ldr	r3, [pc, #76]	; (80022dc <HAL_UART_RxCpltCallback+0xf0>)
 800228e:	2201      	movs	r2, #1
 8002290:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART2_TMR=1;	//Habilito Timeout de software
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <HAL_UART_RxCpltCallback+0xf4>)
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART2_RX_byte,1);
 8002298:	2201      	movs	r2, #1
 800229a:	490b      	ldr	r1, [pc, #44]	; (80022c8 <HAL_UART_RxCpltCallback+0xdc>)
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f003 fab8 	bl	8005812 <HAL_UART_Receive_IT>
		 }
 }
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40011000 	.word	0x40011000
 80022b0:	200040b4 	.word	0x200040b4
 80022b4:	2000407c 	.word	0x2000407c
 80022b8:	20003a78 	.word	0x20003a78
 80022bc:	2000020c 	.word	0x2000020c
 80022c0:	20003a68 	.word	0x20003a68
 80022c4:	40004400 	.word	0x40004400
 80022c8:	20004080 	.word	0x20004080
 80022cc:	200040b8 	.word	0x200040b8
 80022d0:	20003c78 	.word	0x20003c78
 80022d4:	40020000 	.word	0x40020000
 80022d8:	20000254 	.word	0x20000254
 80022dc:	40000400 	.word	0x40000400
 80022e0:	20003a69 	.word	0x20003a69

080022e4 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	6078      	str	r0, [r7, #4]
// WiFi	USART 1 TIMER2
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM2)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f4:	d12d      	bne.n	8002352 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 80022f6:	2100      	movs	r1, #0
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f002 fa89 	bl	8004810 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 80022fe:	4b39      	ldr	r3, [pc, #228]	; (80023e4 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8002300:	2201      	movs	r2, #1
 8002302:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 8002304:	4b38      	ldr	r3, [pc, #224]	; (80023e8 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 800230a:	4b38      	ldr	r3, [pc, #224]	; (80023ec <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a38      	ldr	r2, [pc, #224]	; (80023f0 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002310:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 8002312:	4b36      	ldr	r3, [pc, #216]	; (80023ec <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8002318:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 8002320:	4b33      	ldr	r3, [pc, #204]	; (80023f0 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b34      	ldr	r3, [pc, #208]	; (80023f8 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	2301      	movs	r3, #1
 800232a:	4932      	ldr	r1, [pc, #200]	; (80023f4 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 800232c:	4833      	ldr	r0, [pc, #204]	; (80023fc <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 800232e:	f00c fdbb 	bl	800eea8 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8002332:	2201      	movs	r2, #1
 8002334:	4932      	ldr	r1, [pc, #200]	; (8002400 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8002336:	4833      	ldr	r0, [pc, #204]	; (8002404 <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 8002338:	f003 fa6b 	bl	8005812 <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 800233c:	4b32      	ldr	r3, [pc, #200]	; (8002408 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 800233e:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 8002342:	2b01      	cmp	r3, #1
 8002344:	d105      	bne.n	8002352 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 8002346:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4619      	mov	r1, r3
 800234c:	482b      	ldr	r0, [pc, #172]	; (80023fc <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 800234e:	f7ff f94d 	bl	80015ec <ITM0_Write>
				 }
		}
		// LoRa USART2 TIMER3
		//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim2)
		if(TIMER->Instance==TIM3)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a2d      	ldr	r2, [pc, #180]	; (800240c <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d13f      	bne.n	80023dc <HAL_TIM_OC_DelayElapsedCallback+0xf8>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 800235c:	2100      	movs	r1, #0
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f002 fa56 	bl	8004810 <HAL_TIM_OC_Stop_IT>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8002364:	2200      	movs	r2, #0
 8002366:	2102      	movs	r1, #2
 8002368:	4829      	ldr	r0, [pc, #164]	; (8002410 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 800236a:	f001 f929 	bl	80035c0 <HAL_GPIO_WritePin>
				 FLAG_UART2=1;
 800236e:	4b29      	ldr	r3, [pc, #164]	; (8002414 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8002370:	2201      	movs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
				 EN_UART2_TMR=0;
 8002374:	4b28      	ldr	r3, [pc, #160]	; (8002418 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
				 UART2_RX_items=UART2_RX_pos;
 800237a:	4b28      	ldr	r3, [pc, #160]	; (800241c <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a28      	ldr	r2, [pc, #160]	; (8002420 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8002380:	6013      	str	r3, [r2, #0]
				 UART2_RX_pos=0;
 8002382:	4b26      	ldr	r3, [pc, #152]	; (800241c <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
				 //UART2_RX_vect[UART2_RX_items]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
				 UART2_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(lr.rxbuff,UART2_RX_vect,UART2_RX_items,1,CMP_VECT);
 8002390:	4b23      	ldr	r3, [pc, #140]	; (8002420 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2301      	movs	r3, #1
 800239a:	4922      	ldr	r1, [pc, #136]	; (8002424 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 800239c:	4822      	ldr	r0, [pc, #136]	; (8002428 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 800239e:	f00c fd83 	bl	800eea8 <CopiaVector>
				 lr.rxitems=UART2_RX_items;
 80023a2:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a21      	ldr	r2, [pc, #132]	; (800242c <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 80023a8:	f8c2 37dc 	str.w	r3, [r2, #2012]	; 0x7dc
				 HAL_UART_Receive_IT(&huart2,(uint8_t *)UART2_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 80023ac:	2201      	movs	r2, #1
 80023ae:	4920      	ldr	r1, [pc, #128]	; (8002430 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 80023b0:	4820      	ldr	r0, [pc, #128]	; (8002434 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 80023b2:	f003 fa2e 	bl	8005812 <HAL_UART_Receive_IT>
				// ITM0_Write("\r\nRecepcion LoRa \r\n",strlen("Recepcion LoRa \r\n"));
				 if (wf._DBG_EN==1)
 80023b6:	4b14      	ldr	r3, [pc, #80]	; (8002408 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 80023b8:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d10d      	bne.n	80023dc <HAL_TIM_OC_DelayElapsedCallback+0xf8>
				 {
					 ITM0_Write("\r\nData LoRa recibida = ",strlen("\r\nData LoRa recibida = "));
 80023c0:	2117      	movs	r1, #23
 80023c2:	481d      	ldr	r0, [pc, #116]	; (8002438 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 80023c4:	f7ff f912 	bl	80015ec <ITM0_Write>
					 ITM0_Write((uint8_t *)UART2_RX_vect,UART2_RX_items);
 80023c8:	4b15      	ldr	r3, [pc, #84]	; (8002420 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4619      	mov	r1, r3
 80023ce:	4815      	ldr	r0, [pc, #84]	; (8002424 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 80023d0:	f7ff f90c 	bl	80015ec <ITM0_Write>
					 ITM0_Write("\r\n",strlen("\r\n"));
 80023d4:	2102      	movs	r1, #2
 80023d6:	4819      	ldr	r0, [pc, #100]	; (800243c <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 80023d8:	f7ff f908 	bl	80015ec <ITM0_Write>
				 }
		}
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20003a6c 	.word	0x20003a6c
 80023e8:	20003a68 	.word	0x20003a68
 80023ec:	200040b4 	.word	0x200040b4
 80023f0:	20004088 	.word	0x20004088
 80023f4:	20003a78 	.word	0x20003a78
 80023f8:	20004078 	.word	0x20004078
 80023fc:	20003e78 	.word	0x20003e78
 8002400:	2000407c 	.word	0x2000407c
 8002404:	2000029c 	.word	0x2000029c
 8002408:	20000b78 	.word	0x20000b78
 800240c:	40000400 	.word	0x40000400
 8002410:	40020000 	.word	0x40020000
 8002414:	20003a6d 	.word	0x20003a6d
 8002418:	20003a69 	.word	0x20003a69
 800241c:	200040b8 	.word	0x200040b8
 8002420:	2000408c 	.word	0x2000408c
 8002424:	20003c78 	.word	0x20003c78
 8002428:	200003c6 	.word	0x200003c6
 800242c:	20000370 	.word	0x20000370
 8002430:	20004080 	.word	0x20004080
 8002434:	200002e0 	.word	0x200002e0
 8002438:	08010724 	.word	0x08010724
 800243c:	0801073c 	.word	0x0801073c

08002440 <ESP8266_HW_Reset>:

void ESP8266_HW_Reset(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
	  ESP_REinit=0;
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <ESP8266_HW_Reset+0x40>)
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800244a:	2200      	movs	r2, #0
 800244c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002450:	480c      	ldr	r0, [pc, #48]	; (8002484 <ESP8266_HW_Reset+0x44>)
 8002452:	f001 f8b5 	bl	80035c0 <HAL_GPIO_WritePin>
	  ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8002456:	2115      	movs	r1, #21
 8002458:	480b      	ldr	r0, [pc, #44]	; (8002488 <ESP8266_HW_Reset+0x48>)
 800245a:	f7ff f8c7 	bl	80015ec <ITM0_Write>
	  HAL_Delay(2000);											//Tiempo de reset del módulo
 800245e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002462:	f000 fc4b 	bl	8002cfc <HAL_Delay>
	  ITM0_Write("\r\n ESP ResetT\r\n",strlen("\r\n ESP ResetT\r\n"));
 8002466:	210f      	movs	r1, #15
 8002468:	4808      	ldr	r0, [pc, #32]	; (800248c <ESP8266_HW_Reset+0x4c>)
 800246a:	f7ff f8bf 	bl	80015ec <ITM0_Write>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//Habilito módulo
 800246e:	2201      	movs	r2, #1
 8002470:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002474:	4803      	ldr	r0, [pc, #12]	; (8002484 <ESP8266_HW_Reset+0x44>)
 8002476:	f001 f8a3 	bl	80035c0 <HAL_GPIO_WritePin>
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20003a65 	.word	0x20003a65
 8002484:	40020000 	.word	0x40020000
 8002488:	08010740 	.word	0x08010740
 800248c:	08010758 	.word	0x08010758

08002490 <ESP8266_HW_Init>:
uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af06      	add	r7, sp, #24
 8002496:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 8002498:	2364      	movs	r3, #100	; 0x64
 800249a:	220c      	movs	r2, #12
 800249c:	4945      	ldr	r1, [pc, #276]	; (80025b4 <ESP8266_HW_Init+0x124>)
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f003 f8e0 	bl	8005664 <HAL_UART_Transmit>
		  HAL_Delay(500);
 80024a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024a8:	f000 fc28 	bl	8002cfc <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 80024ac:	4b42      	ldr	r3, [pc, #264]	; (80025b8 <ESP8266_HW_Init+0x128>)
 80024ae:	2205      	movs	r2, #5
 80024b0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
		  wf._n_orig=UART_RX_items;
 80024b4:	4b41      	ldr	r3, [pc, #260]	; (80025bc <ESP8266_HW_Init+0x12c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a3f      	ldr	r2, [pc, #252]	; (80025b8 <ESP8266_HW_Init+0x128>)
 80024ba:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 80024be:	e00e      	b.n	80024de <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 80024c0:	4b3e      	ldr	r3, [pc, #248]	; (80025bc <ESP8266_HW_Init+0x12c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a3c      	ldr	r2, [pc, #240]	; (80025b8 <ESP8266_HW_Init+0x128>)
 80024c6:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
			  	  if (ESP_ticks>=5000)
 80024ca:	4b3d      	ldr	r3, [pc, #244]	; (80025c0 <ESP8266_HW_Init+0x130>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f241 3287 	movw	r2, #4999	; 0x1387
 80024d2:	4293      	cmp	r3, r2
 80024d4:	dd03      	ble.n	80024de <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 80024d6:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <ESP8266_HW_Init+0x134>)
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
			  		 break;
 80024dc:	e014      	b.n	8002508 <ESP8266_HW_Init+0x78>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 80024de:	4b3a      	ldr	r3, [pc, #232]	; (80025c8 <ESP8266_HW_Init+0x138>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	9205      	str	r2, [sp, #20]
 80024e4:	9304      	str	r3, [sp, #16]
 80024e6:	4b39      	ldr	r3, [pc, #228]	; (80025cc <ESP8266_HW_Init+0x13c>)
 80024e8:	9303      	str	r3, [sp, #12]
 80024ea:	4b39      	ldr	r3, [pc, #228]	; (80025d0 <ESP8266_HW_Init+0x140>)
 80024ec:	9302      	str	r3, [sp, #8]
 80024ee:	4b39      	ldr	r3, [pc, #228]	; (80025d4 <ESP8266_HW_Init+0x144>)
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	4b39      	ldr	r3, [pc, #228]	; (80025d8 <ESP8266_HW_Init+0x148>)
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	4b39      	ldr	r3, [pc, #228]	; (80025dc <ESP8266_HW_Init+0x14c>)
 80024f8:	4a39      	ldr	r2, [pc, #228]	; (80025e0 <ESP8266_HW_Init+0x150>)
 80024fa:	493a      	ldr	r1, [pc, #232]	; (80025e4 <ESP8266_HW_Init+0x154>)
 80024fc:	483a      	ldr	r0, [pc, #232]	; (80025e8 <ESP8266_HW_Init+0x158>)
 80024fe:	f00c f8e1 	bl	800e6c4 <FT_String_ND>
 8002502:	4603      	mov	r3, r0
 8002504:	2b01      	cmp	r3, #1
 8002506:	d1db      	bne.n	80024c0 <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 8002508:	4b2e      	ldr	r3, [pc, #184]	; (80025c4 <ESP8266_HW_Init+0x134>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d12b      	bne.n	8002568 <ESP8266_HW_Init+0xd8>
		  {
			  wf._n_fcomp=strlen("ready");
 8002510:	4b29      	ldr	r3, [pc, #164]	; (80025b8 <ESP8266_HW_Init+0x128>)
 8002512:	2205      	movs	r2, #5
 8002514:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
			  wf._n_orig=UART_RX_items;
 8002518:	4b28      	ldr	r3, [pc, #160]	; (80025bc <ESP8266_HW_Init+0x12c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a26      	ldr	r2, [pc, #152]	; (80025b8 <ESP8266_HW_Init+0x128>)
 800251e:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 8002522:	e00a      	b.n	800253a <ESP8266_HW_Init+0xaa>
			  {
				  wf._n_orig=UART_RX_items;
 8002524:	4b25      	ldr	r3, [pc, #148]	; (80025bc <ESP8266_HW_Init+0x12c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a23      	ldr	r2, [pc, #140]	; (80025b8 <ESP8266_HW_Init+0x128>)
 800252a:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
				  if (ESP_ticks>=5000)
 800252e:	4b24      	ldr	r3, [pc, #144]	; (80025c0 <ESP8266_HW_Init+0x130>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f241 3287 	movw	r2, #4999	; 0x1387
 8002536:	4293      	cmp	r3, r2
 8002538:	dc15      	bgt.n	8002566 <ESP8266_HW_Init+0xd6>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,&wf._overflowVector,FIND)!=1)
 800253a:	4b23      	ldr	r3, [pc, #140]	; (80025c8 <ESP8266_HW_Init+0x138>)
 800253c:	2200      	movs	r2, #0
 800253e:	9205      	str	r2, [sp, #20]
 8002540:	9304      	str	r3, [sp, #16]
 8002542:	4b22      	ldr	r3, [pc, #136]	; (80025cc <ESP8266_HW_Init+0x13c>)
 8002544:	9303      	str	r3, [sp, #12]
 8002546:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <ESP8266_HW_Init+0x140>)
 8002548:	9302      	str	r3, [sp, #8]
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <ESP8266_HW_Init+0x144>)
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	4b22      	ldr	r3, [pc, #136]	; (80025d8 <ESP8266_HW_Init+0x148>)
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	4b22      	ldr	r3, [pc, #136]	; (80025dc <ESP8266_HW_Init+0x14c>)
 8002554:	4a22      	ldr	r2, [pc, #136]	; (80025e0 <ESP8266_HW_Init+0x150>)
 8002556:	4923      	ldr	r1, [pc, #140]	; (80025e4 <ESP8266_HW_Init+0x154>)
 8002558:	4823      	ldr	r0, [pc, #140]	; (80025e8 <ESP8266_HW_Init+0x158>)
 800255a:	f00c f8b3 	bl	800e6c4 <FT_String_ND>
 800255e:	4603      	mov	r3, r0
 8002560:	2b01      	cmp	r3, #1
 8002562:	d1df      	bne.n	8002524 <ESP8266_HW_Init+0x94>
 8002564:	e000      	b.n	8002568 <ESP8266_HW_Init+0xd8>
					 {
					 break;
 8002566:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 8002568:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <ESP8266_HW_Init+0x130>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002570:	4293      	cmp	r3, r2
 8002572:	dc06      	bgt.n	8002582 <ESP8266_HW_Init+0xf2>
		  {
			  ESP_REinit=10;
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <ESP8266_HW_Init+0x15c>)
 8002576:	220a      	movs	r2, #10
 8002578:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800257a:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <ESP8266_HW_Init+0x130>)
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e008      	b.n	8002594 <ESP8266_HW_Init+0x104>
		  }
		  else
		  {
			  ESP_REinit++;
 8002582:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <ESP8266_HW_Init+0x15c>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	3301      	adds	r3, #1
 8002588:	b2da      	uxtb	r2, r3
 800258a:	4b18      	ldr	r3, [pc, #96]	; (80025ec <ESP8266_HW_Init+0x15c>)
 800258c:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800258e:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <ESP8266_HW_Init+0x130>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 8002594:	4b15      	ldr	r3, [pc, #84]	; (80025ec <ESP8266_HW_Init+0x15c>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b05      	cmp	r3, #5
 800259a:	f67f af7d 	bls.w	8002498 <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 800259e:	4b13      	ldr	r3, [pc, #76]	; (80025ec <ESP8266_HW_Init+0x15c>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b0a      	cmp	r3, #10
 80025a4:	d101      	bne.n	80025aa <ESP8266_HW_Init+0x11a>
	  {
		  return(1);
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <ESP8266_HW_Init+0x11c>
	  }
	  else
	  {
		  return(0);
 80025aa:	2300      	movs	r3, #0
	  }
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	08010768 	.word	0x08010768
 80025b8:	20000b78 	.word	0x20000b78
 80025bc:	20004088 	.word	0x20004088
 80025c0:	20004090 	.word	0x20004090
 80025c4:	20003a66 	.word	0x20003a66
 80025c8:	200018cc 	.word	0x200018cc
 80025cc:	20001610 	.word	0x20001610
 80025d0:	200040a0 	.word	0x200040a0
 80025d4:	20001864 	.word	0x20001864
 80025d8:	20001410 	.word	0x20001410
 80025dc:	20001870 	.word	0x20001870
 80025e0:	08010778 	.word	0x08010778
 80025e4:	2000185c 	.word	0x2000185c
 80025e8:	20003e78 	.word	0x20003e78
 80025ec:	20003a65 	.word	0x20003a65

080025f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025f4:	b672      	cpsid	i
}
 80025f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <Error_Handler+0x8>
	...

080025fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <HAL_MspInit+0x4c>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	4a0f      	ldr	r2, [pc, #60]	; (8002648 <HAL_MspInit+0x4c>)
 800260c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002610:	6453      	str	r3, [r2, #68]	; 0x44
 8002612:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <HAL_MspInit+0x4c>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261a:	607b      	str	r3, [r7, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	603b      	str	r3, [r7, #0]
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_MspInit+0x4c>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	4a08      	ldr	r2, [pc, #32]	; (8002648 <HAL_MspInit+0x4c>)
 8002628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262c:	6413      	str	r3, [r2, #64]	; 0x40
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_MspInit+0x4c>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800

0800264c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a19      	ldr	r2, [pc, #100]	; (80026d0 <HAL_SPI_MspInit+0x84>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d12b      	bne.n	80026c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <HAL_SPI_MspInit+0x88>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	4a17      	ldr	r2, [pc, #92]	; (80026d4 <HAL_SPI_MspInit+0x88>)
 8002678:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800267c:	6453      	str	r3, [r2, #68]	; 0x44
 800267e:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <HAL_SPI_MspInit+0x88>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <HAL_SPI_MspInit+0x88>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4a10      	ldr	r2, [pc, #64]	; (80026d4 <HAL_SPI_MspInit+0x88>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6313      	str	r3, [r2, #48]	; 0x30
 800269a:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <HAL_SPI_MspInit+0x88>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80026a6:	23e0      	movs	r3, #224	; 0xe0
 80026a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	2302      	movs	r3, #2
 80026ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b2:	2303      	movs	r3, #3
 80026b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026b6:	2305      	movs	r3, #5
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ba:	f107 0314 	add.w	r3, r7, #20
 80026be:	4619      	mov	r1, r3
 80026c0:	4805      	ldr	r0, [pc, #20]	; (80026d8 <HAL_SPI_MspInit+0x8c>)
 80026c2:	f000 fd15 	bl	80030f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026c6:	bf00      	nop
 80026c8:	3728      	adds	r7, #40	; 0x28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40013000 	.word	0x40013000
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40020000 	.word	0x40020000

080026dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ec:	d116      	bne.n	800271c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	4b1a      	ldr	r3, [pc, #104]	; (800275c <HAL_TIM_Base_MspInit+0x80>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	4a19      	ldr	r2, [pc, #100]	; (800275c <HAL_TIM_Base_MspInit+0x80>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	6413      	str	r3, [r2, #64]	; 0x40
 80026fe:	4b17      	ldr	r3, [pc, #92]	; (800275c <HAL_TIM_Base_MspInit+0x80>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800270a:	2200      	movs	r2, #0
 800270c:	2100      	movs	r1, #0
 800270e:	201c      	movs	r0, #28
 8002710:	f000 fc17 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002714:	201c      	movs	r0, #28
 8002716:	f000 fc30 	bl	8002f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800271a:	e01a      	b.n	8002752 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0f      	ldr	r2, [pc, #60]	; (8002760 <HAL_TIM_Base_MspInit+0x84>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d115      	bne.n	8002752 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <HAL_TIM_Base_MspInit+0x80>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	4a0b      	ldr	r2, [pc, #44]	; (800275c <HAL_TIM_Base_MspInit+0x80>)
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	6413      	str	r3, [r2, #64]	; 0x40
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <HAL_TIM_Base_MspInit+0x80>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002742:	2200      	movs	r2, #0
 8002744:	2100      	movs	r1, #0
 8002746:	201d      	movs	r0, #29
 8002748:	f000 fbfb 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800274c:	201d      	movs	r0, #29
 800274e:	f000 fc14 	bl	8002f7a <HAL_NVIC_EnableIRQ>
}
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	40000400 	.word	0x40000400

08002764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08e      	sub	sp, #56	; 0x38
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a54      	ldr	r2, [pc, #336]	; (80028d4 <HAL_UART_MspInit+0x170>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d135      	bne.n	80027f2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	623b      	str	r3, [r7, #32]
 800278a:	4b53      	ldr	r3, [pc, #332]	; (80028d8 <HAL_UART_MspInit+0x174>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	4a52      	ldr	r2, [pc, #328]	; (80028d8 <HAL_UART_MspInit+0x174>)
 8002790:	f043 0310 	orr.w	r3, r3, #16
 8002794:	6453      	str	r3, [r2, #68]	; 0x44
 8002796:	4b50      	ldr	r3, [pc, #320]	; (80028d8 <HAL_UART_MspInit+0x174>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	623b      	str	r3, [r7, #32]
 80027a0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	4b4c      	ldr	r3, [pc, #304]	; (80028d8 <HAL_UART_MspInit+0x174>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	4a4b      	ldr	r2, [pc, #300]	; (80028d8 <HAL_UART_MspInit+0x174>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6313      	str	r3, [r2, #48]	; 0x30
 80027b2:	4b49      	ldr	r3, [pc, #292]	; (80028d8 <HAL_UART_MspInit+0x174>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	61fb      	str	r3, [r7, #28]
 80027bc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_WF_Pin|USART1_RX_WF_Pin;
 80027be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c4:	2302      	movs	r3, #2
 80027c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027cc:	2303      	movs	r3, #3
 80027ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027d0:	2307      	movs	r3, #7
 80027d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027d8:	4619      	mov	r1, r3
 80027da:	4840      	ldr	r0, [pc, #256]	; (80028dc <HAL_UART_MspInit+0x178>)
 80027dc:	f000 fc88 	bl	80030f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027e0:	2200      	movs	r2, #0
 80027e2:	2100      	movs	r1, #0
 80027e4:	2025      	movs	r0, #37	; 0x25
 80027e6:	f000 fbac 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027ea:	2025      	movs	r0, #37	; 0x25
 80027ec:	f000 fbc5 	bl	8002f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80027f0:	e06b      	b.n	80028ca <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a3a      	ldr	r2, [pc, #232]	; (80028e0 <HAL_UART_MspInit+0x17c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d134      	bne.n	8002866 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027fc:	2300      	movs	r3, #0
 80027fe:	61bb      	str	r3, [r7, #24]
 8002800:	4b35      	ldr	r3, [pc, #212]	; (80028d8 <HAL_UART_MspInit+0x174>)
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	4a34      	ldr	r2, [pc, #208]	; (80028d8 <HAL_UART_MspInit+0x174>)
 8002806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280a:	6413      	str	r3, [r2, #64]	; 0x40
 800280c:	4b32      	ldr	r3, [pc, #200]	; (80028d8 <HAL_UART_MspInit+0x174>)
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	4b2e      	ldr	r3, [pc, #184]	; (80028d8 <HAL_UART_MspInit+0x174>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	4a2d      	ldr	r2, [pc, #180]	; (80028d8 <HAL_UART_MspInit+0x174>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6313      	str	r3, [r2, #48]	; 0x30
 8002828:	4b2b      	ldr	r3, [pc, #172]	; (80028d8 <HAL_UART_MspInit+0x174>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART2_TX_LR_Pin|USART2_RX_LR_Pin;
 8002834:	230c      	movs	r3, #12
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002840:	2303      	movs	r3, #3
 8002842:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002844:	2307      	movs	r3, #7
 8002846:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800284c:	4619      	mov	r1, r3
 800284e:	4823      	ldr	r0, [pc, #140]	; (80028dc <HAL_UART_MspInit+0x178>)
 8002850:	f000 fc4e 	bl	80030f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002854:	2200      	movs	r2, #0
 8002856:	2100      	movs	r1, #0
 8002858:	2026      	movs	r0, #38	; 0x26
 800285a:	f000 fb72 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800285e:	2026      	movs	r0, #38	; 0x26
 8002860:	f000 fb8b 	bl	8002f7a <HAL_NVIC_EnableIRQ>
}
 8002864:	e031      	b.n	80028ca <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a1e      	ldr	r2, [pc, #120]	; (80028e4 <HAL_UART_MspInit+0x180>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d12c      	bne.n	80028ca <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	4b18      	ldr	r3, [pc, #96]	; (80028d8 <HAL_UART_MspInit+0x174>)
 8002876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002878:	4a17      	ldr	r2, [pc, #92]	; (80028d8 <HAL_UART_MspInit+0x174>)
 800287a:	f043 0320 	orr.w	r3, r3, #32
 800287e:	6453      	str	r3, [r2, #68]	; 0x44
 8002880:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <HAL_UART_MspInit+0x174>)
 8002882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HAL_UART_MspInit+0x174>)
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	4a10      	ldr	r2, [pc, #64]	; (80028d8 <HAL_UART_MspInit+0x174>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	6313      	str	r3, [r2, #48]	; 0x30
 800289c:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <HAL_UART_MspInit+0x174>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80028a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b6:	2303      	movs	r3, #3
 80028b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80028ba:	2308      	movs	r3, #8
 80028bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c2:	4619      	mov	r1, r3
 80028c4:	4805      	ldr	r0, [pc, #20]	; (80028dc <HAL_UART_MspInit+0x178>)
 80028c6:	f000 fc13 	bl	80030f0 <HAL_GPIO_Init>
}
 80028ca:	bf00      	nop
 80028cc:	3738      	adds	r7, #56	; 0x38
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40011000 	.word	0x40011000
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40020000 	.word	0x40020000
 80028e0:	40004400 	.word	0x40004400
 80028e4:	40011400 	.word	0x40011400

080028e8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1c      	ldr	r2, [pc, #112]	; (8002968 <HAL_UART_MspDeInit+0x80>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d10e      	bne.n	8002918 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80028fa:	4b1c      	ldr	r3, [pc, #112]	; (800296c <HAL_UART_MspDeInit+0x84>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	4a1b      	ldr	r2, [pc, #108]	; (800296c <HAL_UART_MspDeInit+0x84>)
 8002900:	f023 0310 	bic.w	r3, r3, #16
 8002904:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART1_TX_WF_Pin|USART1_RX_WF_Pin);
 8002906:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800290a:	4819      	ldr	r0, [pc, #100]	; (8002970 <HAL_UART_MspDeInit+0x88>)
 800290c:	f000 fd74 	bl	80033f8 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002910:	2025      	movs	r0, #37	; 0x25
 8002912:	f000 fb40 	bl	8002f96 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8002916:	e022      	b.n	800295e <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a15      	ldr	r2, [pc, #84]	; (8002974 <HAL_UART_MspDeInit+0x8c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d10d      	bne.n	800293e <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <HAL_UART_MspDeInit+0x84>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	4a11      	ldr	r2, [pc, #68]	; (800296c <HAL_UART_MspDeInit+0x84>)
 8002928:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800292c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART2_TX_LR_Pin|USART2_RX_LR_Pin);
 800292e:	210c      	movs	r1, #12
 8002930:	480f      	ldr	r0, [pc, #60]	; (8002970 <HAL_UART_MspDeInit+0x88>)
 8002932:	f000 fd61 	bl	80033f8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002936:	2026      	movs	r0, #38	; 0x26
 8002938:	f000 fb2d 	bl	8002f96 <HAL_NVIC_DisableIRQ>
}
 800293c:	e00f      	b.n	800295e <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART6)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a0d      	ldr	r2, [pc, #52]	; (8002978 <HAL_UART_MspDeInit+0x90>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d10a      	bne.n	800295e <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART6_CLK_DISABLE();
 8002948:	4b08      	ldr	r3, [pc, #32]	; (800296c <HAL_UART_MspDeInit+0x84>)
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	4a07      	ldr	r2, [pc, #28]	; (800296c <HAL_UART_MspDeInit+0x84>)
 800294e:	f023 0320 	bic.w	r3, r3, #32
 8002952:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8002954:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002958:	4805      	ldr	r0, [pc, #20]	; (8002970 <HAL_UART_MspDeInit+0x88>)
 800295a:	f000 fd4d 	bl	80033f8 <HAL_GPIO_DeInit>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40011000 	.word	0x40011000
 800296c:	40023800 	.word	0x40023800
 8002970:	40020000 	.word	0x40020000
 8002974:	40004400 	.word	0x40004400
 8002978:	40011400 	.word	0x40011400

0800297c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002980:	e7fe      	b.n	8002980 <NMI_Handler+0x4>

08002982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002986:	e7fe      	b.n	8002986 <HardFault_Handler+0x4>

08002988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800298c:	e7fe      	b.n	800298c <MemManage_Handler+0x4>

0800298e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002992:	e7fe      	b.n	8002992 <BusFault_Handler+0x4>

08002994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002998:	e7fe      	b.n	8002998 <UsageFault_Handler+0x4>

0800299a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029b6:	b480      	push	{r7}
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029c8:	4802      	ldr	r0, [pc, #8]	; (80029d4 <TIM2_IRQHandler+0x10>)
 80029ca:	f002 f82d 	bl	8004a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	2000020c 	.word	0x2000020c

080029d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029dc:	4802      	ldr	r0, [pc, #8]	; (80029e8 <TIM3_IRQHandler+0x10>)
 80029de:	f002 f823 	bl	8004a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000254 	.word	0x20000254

080029ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029f0:	4802      	ldr	r0, [pc, #8]	; (80029fc <USART1_IRQHandler+0x10>)
 80029f2:	f002 ff3f 	bl	8005874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	2000029c 	.word	0x2000029c

08002a00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a04:	4802      	ldr	r0, [pc, #8]	; (8002a10 <USART2_IRQHandler+0x10>)
 8002a06:	f002 ff35 	bl	8005874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	200002e0 	.word	0x200002e0

08002a14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
	return 1;
 8002a18:	2301      	movs	r3, #1
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <_kill>:

int _kill(int pid, int sig)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a2e:	f00c fd43 	bl	800f4b8 <__errno>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2216      	movs	r2, #22
 8002a36:	601a      	str	r2, [r3, #0]
	return -1;
 8002a38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <_exit>:

void _exit (int status)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff ffe7 	bl	8002a24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a56:	e7fe      	b.n	8002a56 <_exit+0x12>

08002a58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	e00a      	b.n	8002a80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a6a:	f3af 8000 	nop.w
 8002a6e:	4601      	mov	r1, r0
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	60ba      	str	r2, [r7, #8]
 8002a76:	b2ca      	uxtb	r2, r1
 8002a78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	dbf0      	blt.n	8002a6a <_read+0x12>
	}

return len;
 8002a88:	687b      	ldr	r3, [r7, #4]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b086      	sub	sp, #24
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	e009      	b.n	8002ab8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	60ba      	str	r2, [r7, #8]
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	dbf1      	blt.n	8002aa4 <_write+0x12>
	}
	return len;
 8002ac0:	687b      	ldr	r3, [r7, #4]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <_close>:

int _close(int file)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
	return -1;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002af2:	605a      	str	r2, [r3, #4]
	return 0;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <_isatty>:

int _isatty(int file)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
	return 1;
 8002b0a:	2301      	movs	r3, #1
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
	return 0;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b3c:	4a14      	ldr	r2, [pc, #80]	; (8002b90 <_sbrk+0x5c>)
 8002b3e:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <_sbrk+0x60>)
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b48:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <_sbrk+0x64>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d102      	bne.n	8002b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <_sbrk+0x64>)
 8002b52:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <_sbrk+0x68>)
 8002b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b56:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <_sbrk+0x64>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d207      	bcs.n	8002b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b64:	f00c fca8 	bl	800f4b8 <__errno>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	220c      	movs	r2, #12
 8002b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b72:	e009      	b.n	8002b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b74:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <_sbrk+0x64>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b7a:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <_sbrk+0x64>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	4a05      	ldr	r2, [pc, #20]	; (8002b98 <_sbrk+0x64>)
 8002b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b86:	68fb      	ldr	r3, [r7, #12]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20020000 	.word	0x20020000
 8002b94:	00000400 	.word	0x00000400
 8002b98:	200040c0 	.word	0x200040c0
 8002b9c:	20004218 	.word	0x20004218

08002ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <SystemInit+0x20>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <SystemInit+0x20>)
 8002bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bc8:	480d      	ldr	r0, [pc, #52]	; (8002c00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bca:	490e      	ldr	r1, [pc, #56]	; (8002c04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bcc:	4a0e      	ldr	r2, [pc, #56]	; (8002c08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bd0:	e002      	b.n	8002bd8 <LoopCopyDataInit>

08002bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bd6:	3304      	adds	r3, #4

08002bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bdc:	d3f9      	bcc.n	8002bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bde:	4a0b      	ldr	r2, [pc, #44]	; (8002c0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002be0:	4c0b      	ldr	r4, [pc, #44]	; (8002c10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002be4:	e001      	b.n	8002bea <LoopFillZerobss>

08002be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002be8:	3204      	adds	r2, #4

08002bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bec:	d3fb      	bcc.n	8002be6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bee:	f7ff ffd7 	bl	8002ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bf2:	f00c fc67 	bl	800f4c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bf6:	f7fd fd4d 	bl	8000694 <main>
  bx  lr    
 8002bfa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c04:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8002c08:	08010e70 	.word	0x08010e70
  ldr r2, =_sbss
 8002c0c:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8002c10:	20004214 	.word	0x20004214

08002c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c14:	e7fe      	b.n	8002c14 <ADC_IRQHandler>
	...

08002c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <HAL_Init+0x40>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0d      	ldr	r2, [pc, #52]	; (8002c58 <HAL_Init+0x40>)
 8002c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_Init+0x40>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <HAL_Init+0x40>)
 8002c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c34:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <HAL_Init+0x40>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a07      	ldr	r2, [pc, #28]	; (8002c58 <HAL_Init+0x40>)
 8002c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c40:	2003      	movs	r0, #3
 8002c42:	f000 f973 	bl	8002f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c46:	200f      	movs	r0, #15
 8002c48:	f000 f808 	bl	8002c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c4c:	f7ff fcd6 	bl	80025fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40023c00 	.word	0x40023c00

08002c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c64:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <HAL_InitTick+0x54>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <HAL_InitTick+0x58>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 f999 	bl	8002fb2 <HAL_SYSTICK_Config>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e00e      	b.n	8002ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b0f      	cmp	r3, #15
 8002c8e:	d80a      	bhi.n	8002ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c90:	2200      	movs	r2, #0
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	f04f 30ff 	mov.w	r0, #4294967295
 8002c98:	f000 f953 	bl	8002f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c9c:	4a06      	ldr	r2, [pc, #24]	; (8002cb8 <HAL_InitTick+0x5c>)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	e000      	b.n	8002ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000084 	.word	0x20000084
 8002cb4:	2000008c 	.word	0x2000008c
 8002cb8:	20000088 	.word	0x20000088

08002cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_IncTick+0x20>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_IncTick+0x24>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4413      	add	r3, r2
 8002ccc:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <HAL_IncTick+0x24>)
 8002cce:	6013      	str	r3, [r2, #0]
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	2000008c 	.word	0x2000008c
 8002ce0:	200040c4 	.word	0x200040c4

08002ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <HAL_GetTick+0x14>)
 8002cea:	681b      	ldr	r3, [r3, #0]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	200040c4 	.word	0x200040c4

08002cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d04:	f7ff ffee 	bl	8002ce4 <HAL_GetTick>
 8002d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d14:	d005      	beq.n	8002d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <HAL_Delay+0x44>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4413      	add	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d22:	bf00      	nop
 8002d24:	f7ff ffde 	bl	8002ce4 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d8f7      	bhi.n	8002d24 <HAL_Delay+0x28>
  {
  }
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	2000008c 	.word	0x2000008c

08002d44 <__NVIC_SetPriorityGrouping>:
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d60:	4013      	ands	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d76:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	60d3      	str	r3, [r2, #12]
}
 8002d7c:	bf00      	nop
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <__NVIC_GetPriorityGrouping>:
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d90:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <__NVIC_GetPriorityGrouping+0x18>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	f003 0307 	and.w	r3, r3, #7
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <__NVIC_EnableIRQ>:
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	db0b      	blt.n	8002dd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	f003 021f 	and.w	r2, r3, #31
 8002dc0:	4907      	ldr	r1, [pc, #28]	; (8002de0 <__NVIC_EnableIRQ+0x38>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2001      	movs	r0, #1
 8002dca:	fa00 f202 	lsl.w	r2, r0, r2
 8002dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	e000e100 	.word	0xe000e100

08002de4 <__NVIC_DisableIRQ>:
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	db12      	blt.n	8002e1c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	f003 021f 	and.w	r2, r3, #31
 8002dfc:	490a      	ldr	r1, [pc, #40]	; (8002e28 <__NVIC_DisableIRQ+0x44>)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	2001      	movs	r0, #1
 8002e06:	fa00 f202 	lsl.w	r2, r0, r2
 8002e0a:	3320      	adds	r3, #32
 8002e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e10:	f3bf 8f4f 	dsb	sy
}
 8002e14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e16:	f3bf 8f6f 	isb	sy
}
 8002e1a:	bf00      	nop
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	e000e100 	.word	0xe000e100

08002e2c <__NVIC_SetPriority>:
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	6039      	str	r1, [r7, #0]
 8002e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	db0a      	blt.n	8002e56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	490c      	ldr	r1, [pc, #48]	; (8002e78 <__NVIC_SetPriority+0x4c>)
 8002e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4a:	0112      	lsls	r2, r2, #4
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	440b      	add	r3, r1
 8002e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e54:	e00a      	b.n	8002e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	4908      	ldr	r1, [pc, #32]	; (8002e7c <__NVIC_SetPriority+0x50>)
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	3b04      	subs	r3, #4
 8002e64:	0112      	lsls	r2, r2, #4
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	440b      	add	r3, r1
 8002e6a:	761a      	strb	r2, [r3, #24]
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000e100 	.word	0xe000e100
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <NVIC_EncodePriority>:
{
 8002e80:	b480      	push	{r7}
 8002e82:	b089      	sub	sp, #36	; 0x24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f1c3 0307 	rsb	r3, r3, #7
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	bf28      	it	cs
 8002e9e:	2304      	movcs	r3, #4
 8002ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	2b06      	cmp	r3, #6
 8002ea8:	d902      	bls.n	8002eb0 <NVIC_EncodePriority+0x30>
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3b03      	subs	r3, #3
 8002eae:	e000      	b.n	8002eb2 <NVIC_EncodePriority+0x32>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43da      	mvns	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	43d9      	mvns	r1, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed8:	4313      	orrs	r3, r2
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3724      	adds	r7, #36	; 0x24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <SysTick_Config>:
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ef8:	d301      	bcc.n	8002efe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002efa:	2301      	movs	r3, #1
 8002efc:	e00f      	b.n	8002f1e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002efe:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <SysTick_Config+0x40>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f06:	210f      	movs	r1, #15
 8002f08:	f04f 30ff 	mov.w	r0, #4294967295
 8002f0c:	f7ff ff8e 	bl	8002e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <SysTick_Config+0x40>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f16:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <SysTick_Config+0x40>)
 8002f18:	2207      	movs	r2, #7
 8002f1a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	e000e010 	.word	0xe000e010

08002f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff ff05 	bl	8002d44 <__NVIC_SetPriorityGrouping>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b086      	sub	sp, #24
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	4603      	mov	r3, r0
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f54:	f7ff ff1a 	bl	8002d8c <__NVIC_GetPriorityGrouping>
 8002f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	6978      	ldr	r0, [r7, #20]
 8002f60:	f7ff ff8e 	bl	8002e80 <NVIC_EncodePriority>
 8002f64:	4602      	mov	r2, r0
 8002f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff5d 	bl	8002e2c <__NVIC_SetPriority>
}
 8002f72:	bf00      	nop
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff0d 	bl	8002da8 <__NVIC_EnableIRQ>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ff1d 	bl	8002de4 <__NVIC_DisableIRQ>
}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff ff94 	bl	8002ee8 <SysTick_Config>
 8002fc0:	4603      	mov	r3, r0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fd8:	f7ff fe84 	bl	8002ce4 <HAL_GetTick>
 8002fdc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d008      	beq.n	8002ffc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2280      	movs	r2, #128	; 0x80
 8002fee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e052      	b.n	80030a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0216 	bic.w	r2, r2, #22
 800300a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695a      	ldr	r2, [r3, #20]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800301a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	2b00      	cmp	r3, #0
 8003022:	d103      	bne.n	800302c <HAL_DMA_Abort+0x62>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003028:	2b00      	cmp	r3, #0
 800302a:	d007      	beq.n	800303c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0208 	bic.w	r2, r2, #8
 800303a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0201 	bic.w	r2, r2, #1
 800304a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800304c:	e013      	b.n	8003076 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800304e:	f7ff fe49 	bl	8002ce4 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b05      	cmp	r3, #5
 800305a:	d90c      	bls.n	8003076 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2203      	movs	r2, #3
 8003066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e015      	b.n	80030a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e4      	bne.n	800304e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003088:	223f      	movs	r2, #63	; 0x3f
 800308a:	409a      	lsls	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d004      	beq.n	80030c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2280      	movs	r2, #128	; 0x80
 80030c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e00c      	b.n	80030e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2205      	movs	r2, #5
 80030cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0201 	bic.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b089      	sub	sp, #36	; 0x24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003102:	2300      	movs	r3, #0
 8003104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	e159      	b.n	80033c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800310c:	2201      	movs	r2, #1
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	429a      	cmp	r2, r3
 8003126:	f040 8148 	bne.w	80033ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b01      	cmp	r3, #1
 8003134:	d005      	beq.n	8003142 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800313e:	2b02      	cmp	r3, #2
 8003140:	d130      	bne.n	80031a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	2203      	movs	r2, #3
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43db      	mvns	r3, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4013      	ands	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003178:	2201      	movs	r2, #1
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f003 0201 	and.w	r2, r3, #1
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d017      	beq.n	80031e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	2203      	movs	r2, #3
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d123      	bne.n	8003234 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	08da      	lsrs	r2, r3, #3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3208      	adds	r2, #8
 80031f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	220f      	movs	r2, #15
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	08da      	lsrs	r2, r3, #3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3208      	adds	r2, #8
 800322e:	69b9      	ldr	r1, [r7, #24]
 8003230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	2203      	movs	r2, #3
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 0203 	and.w	r2, r3, #3
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80a2 	beq.w	80033ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	4b57      	ldr	r3, [pc, #348]	; (80033d8 <HAL_GPIO_Init+0x2e8>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	4a56      	ldr	r2, [pc, #344]	; (80033d8 <HAL_GPIO_Init+0x2e8>)
 8003280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003284:	6453      	str	r3, [r2, #68]	; 0x44
 8003286:	4b54      	ldr	r3, [pc, #336]	; (80033d8 <HAL_GPIO_Init+0x2e8>)
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003292:	4a52      	ldr	r2, [pc, #328]	; (80033dc <HAL_GPIO_Init+0x2ec>)
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	089b      	lsrs	r3, r3, #2
 8003298:	3302      	adds	r3, #2
 800329a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	220f      	movs	r2, #15
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43db      	mvns	r3, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4013      	ands	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a49      	ldr	r2, [pc, #292]	; (80033e0 <HAL_GPIO_Init+0x2f0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d019      	beq.n	80032f2 <HAL_GPIO_Init+0x202>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a48      	ldr	r2, [pc, #288]	; (80033e4 <HAL_GPIO_Init+0x2f4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d013      	beq.n	80032ee <HAL_GPIO_Init+0x1fe>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a47      	ldr	r2, [pc, #284]	; (80033e8 <HAL_GPIO_Init+0x2f8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00d      	beq.n	80032ea <HAL_GPIO_Init+0x1fa>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a46      	ldr	r2, [pc, #280]	; (80033ec <HAL_GPIO_Init+0x2fc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d007      	beq.n	80032e6 <HAL_GPIO_Init+0x1f6>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a45      	ldr	r2, [pc, #276]	; (80033f0 <HAL_GPIO_Init+0x300>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d101      	bne.n	80032e2 <HAL_GPIO_Init+0x1f2>
 80032de:	2304      	movs	r3, #4
 80032e0:	e008      	b.n	80032f4 <HAL_GPIO_Init+0x204>
 80032e2:	2307      	movs	r3, #7
 80032e4:	e006      	b.n	80032f4 <HAL_GPIO_Init+0x204>
 80032e6:	2303      	movs	r3, #3
 80032e8:	e004      	b.n	80032f4 <HAL_GPIO_Init+0x204>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e002      	b.n	80032f4 <HAL_GPIO_Init+0x204>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_GPIO_Init+0x204>
 80032f2:	2300      	movs	r3, #0
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	f002 0203 	and.w	r2, r2, #3
 80032fa:	0092      	lsls	r2, r2, #2
 80032fc:	4093      	lsls	r3, r2
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4313      	orrs	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003304:	4935      	ldr	r1, [pc, #212]	; (80033dc <HAL_GPIO_Init+0x2ec>)
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	089b      	lsrs	r3, r3, #2
 800330a:	3302      	adds	r3, #2
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003312:	4b38      	ldr	r3, [pc, #224]	; (80033f4 <HAL_GPIO_Init+0x304>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	43db      	mvns	r3, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4013      	ands	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003336:	4a2f      	ldr	r2, [pc, #188]	; (80033f4 <HAL_GPIO_Init+0x304>)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800333c:	4b2d      	ldr	r3, [pc, #180]	; (80033f4 <HAL_GPIO_Init+0x304>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003360:	4a24      	ldr	r2, [pc, #144]	; (80033f4 <HAL_GPIO_Init+0x304>)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003366:	4b23      	ldr	r3, [pc, #140]	; (80033f4 <HAL_GPIO_Init+0x304>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800338a:	4a1a      	ldr	r2, [pc, #104]	; (80033f4 <HAL_GPIO_Init+0x304>)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003390:	4b18      	ldr	r3, [pc, #96]	; (80033f4 <HAL_GPIO_Init+0x304>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	43db      	mvns	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033b4:	4a0f      	ldr	r2, [pc, #60]	; (80033f4 <HAL_GPIO_Init+0x304>)
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3301      	adds	r3, #1
 80033be:	61fb      	str	r3, [r7, #28]
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	2b0f      	cmp	r3, #15
 80033c4:	f67f aea2 	bls.w	800310c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop
 80033cc:	3724      	adds	r7, #36	; 0x24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40023800 	.word	0x40023800
 80033dc:	40013800 	.word	0x40013800
 80033e0:	40020000 	.word	0x40020000
 80033e4:	40020400 	.word	0x40020400
 80033e8:	40020800 	.word	0x40020800
 80033ec:	40020c00 	.word	0x40020c00
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40013c00 	.word	0x40013c00

080033f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003402:	2300      	movs	r3, #0
 8003404:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800340a:	2300      	movs	r3, #0
 800340c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	e0bb      	b.n	800358c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003414:	2201      	movs	r2, #1
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	429a      	cmp	r2, r3
 800342c:	f040 80ab 	bne.w	8003586 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003430:	4a5c      	ldr	r2, [pc, #368]	; (80035a4 <HAL_GPIO_DeInit+0x1ac>)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	089b      	lsrs	r3, r3, #2
 8003436:	3302      	adds	r3, #2
 8003438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	220f      	movs	r2, #15
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	4013      	ands	r3, r2
 8003450:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a54      	ldr	r2, [pc, #336]	; (80035a8 <HAL_GPIO_DeInit+0x1b0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d019      	beq.n	800348e <HAL_GPIO_DeInit+0x96>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a53      	ldr	r2, [pc, #332]	; (80035ac <HAL_GPIO_DeInit+0x1b4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d013      	beq.n	800348a <HAL_GPIO_DeInit+0x92>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a52      	ldr	r2, [pc, #328]	; (80035b0 <HAL_GPIO_DeInit+0x1b8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00d      	beq.n	8003486 <HAL_GPIO_DeInit+0x8e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a51      	ldr	r2, [pc, #324]	; (80035b4 <HAL_GPIO_DeInit+0x1bc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d007      	beq.n	8003482 <HAL_GPIO_DeInit+0x8a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a50      	ldr	r2, [pc, #320]	; (80035b8 <HAL_GPIO_DeInit+0x1c0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d101      	bne.n	800347e <HAL_GPIO_DeInit+0x86>
 800347a:	2304      	movs	r3, #4
 800347c:	e008      	b.n	8003490 <HAL_GPIO_DeInit+0x98>
 800347e:	2307      	movs	r3, #7
 8003480:	e006      	b.n	8003490 <HAL_GPIO_DeInit+0x98>
 8003482:	2303      	movs	r3, #3
 8003484:	e004      	b.n	8003490 <HAL_GPIO_DeInit+0x98>
 8003486:	2302      	movs	r3, #2
 8003488:	e002      	b.n	8003490 <HAL_GPIO_DeInit+0x98>
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <HAL_GPIO_DeInit+0x98>
 800348e:	2300      	movs	r3, #0
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	f002 0203 	and.w	r2, r2, #3
 8003496:	0092      	lsls	r2, r2, #2
 8003498:	4093      	lsls	r3, r2
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	429a      	cmp	r2, r3
 800349e:	d132      	bne.n	8003506 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80034a0:	4b46      	ldr	r3, [pc, #280]	; (80035bc <HAL_GPIO_DeInit+0x1c4>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	43db      	mvns	r3, r3
 80034a8:	4944      	ldr	r1, [pc, #272]	; (80035bc <HAL_GPIO_DeInit+0x1c4>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80034ae:	4b43      	ldr	r3, [pc, #268]	; (80035bc <HAL_GPIO_DeInit+0x1c4>)
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	4941      	ldr	r1, [pc, #260]	; (80035bc <HAL_GPIO_DeInit+0x1c4>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80034bc:	4b3f      	ldr	r3, [pc, #252]	; (80035bc <HAL_GPIO_DeInit+0x1c4>)
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	43db      	mvns	r3, r3
 80034c4:	493d      	ldr	r1, [pc, #244]	; (80035bc <HAL_GPIO_DeInit+0x1c4>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80034ca:	4b3c      	ldr	r3, [pc, #240]	; (80035bc <HAL_GPIO_DeInit+0x1c4>)
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	43db      	mvns	r3, r3
 80034d2:	493a      	ldr	r1, [pc, #232]	; (80035bc <HAL_GPIO_DeInit+0x1c4>)
 80034d4:	4013      	ands	r3, r2
 80034d6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	220f      	movs	r2, #15
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80034e8:	4a2e      	ldr	r2, [pc, #184]	; (80035a4 <HAL_GPIO_DeInit+0x1ac>)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	089b      	lsrs	r3, r3, #2
 80034ee:	3302      	adds	r3, #2
 80034f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	43da      	mvns	r2, r3
 80034f8:	482a      	ldr	r0, [pc, #168]	; (80035a4 <HAL_GPIO_DeInit+0x1ac>)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	089b      	lsrs	r3, r3, #2
 80034fe:	400a      	ands	r2, r1
 8003500:	3302      	adds	r3, #2
 8003502:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	2103      	movs	r1, #3
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	401a      	ands	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	08da      	lsrs	r2, r3, #3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3208      	adds	r2, #8
 8003524:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	220f      	movs	r2, #15
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	08d2      	lsrs	r2, r2, #3
 800353c:	4019      	ands	r1, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3208      	adds	r2, #8
 8003542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	2103      	movs	r1, #3
 8003550:	fa01 f303 	lsl.w	r3, r1, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	401a      	ands	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	2101      	movs	r1, #1
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	fa01 f303 	lsl.w	r3, r1, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	401a      	ands	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	2103      	movs	r1, #3
 800357a:	fa01 f303 	lsl.w	r3, r1, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	401a      	ands	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	3301      	adds	r3, #1
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2b0f      	cmp	r3, #15
 8003590:	f67f af40 	bls.w	8003414 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003594:	bf00      	nop
 8003596:	bf00      	nop
 8003598:	371c      	adds	r7, #28
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40013800 	.word	0x40013800
 80035a8:	40020000 	.word	0x40020000
 80035ac:	40020400 	.word	0x40020400
 80035b0:	40020800 	.word	0x40020800
 80035b4:	40020c00 	.word	0x40020c00
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40013c00 	.word	0x40013c00

080035c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	807b      	strh	r3, [r7, #2]
 80035cc:	4613      	mov	r3, r2
 80035ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035d0:	787b      	ldrb	r3, [r7, #1]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035d6:	887a      	ldrh	r2, [r7, #2]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035dc:	e003      	b.n	80035e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035de:	887b      	ldrh	r3, [r7, #2]
 80035e0:	041a      	lsls	r2, r3, #16
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	619a      	str	r2, [r3, #24]
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b085      	sub	sp, #20
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	460b      	mov	r3, r1
 80035fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003604:	887a      	ldrh	r2, [r7, #2]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4013      	ands	r3, r2
 800360a:	041a      	lsls	r2, r3, #16
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	43d9      	mvns	r1, r3
 8003610:	887b      	ldrh	r3, [r7, #2]
 8003612:	400b      	ands	r3, r1
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	619a      	str	r2, [r3, #24]
}
 800361a:	bf00      	nop
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e267      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d075      	beq.n	8003732 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003646:	4b88      	ldr	r3, [pc, #544]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	2b04      	cmp	r3, #4
 8003650:	d00c      	beq.n	800366c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003652:	4b85      	ldr	r3, [pc, #532]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800365a:	2b08      	cmp	r3, #8
 800365c:	d112      	bne.n	8003684 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800365e:	4b82      	ldr	r3, [pc, #520]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800366a:	d10b      	bne.n	8003684 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800366c:	4b7e      	ldr	r3, [pc, #504]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d05b      	beq.n	8003730 <HAL_RCC_OscConfig+0x108>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d157      	bne.n	8003730 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e242      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368c:	d106      	bne.n	800369c <HAL_RCC_OscConfig+0x74>
 800368e:	4b76      	ldr	r3, [pc, #472]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a75      	ldr	r2, [pc, #468]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 8003694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	e01d      	b.n	80036d8 <HAL_RCC_OscConfig+0xb0>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036a4:	d10c      	bne.n	80036c0 <HAL_RCC_OscConfig+0x98>
 80036a6:	4b70      	ldr	r3, [pc, #448]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a6f      	ldr	r2, [pc, #444]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 80036ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	4b6d      	ldr	r3, [pc, #436]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a6c      	ldr	r2, [pc, #432]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 80036b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	e00b      	b.n	80036d8 <HAL_RCC_OscConfig+0xb0>
 80036c0:	4b69      	ldr	r3, [pc, #420]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a68      	ldr	r2, [pc, #416]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 80036c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	4b66      	ldr	r3, [pc, #408]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a65      	ldr	r2, [pc, #404]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 80036d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d013      	beq.n	8003708 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7ff fb00 	bl	8002ce4 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e8:	f7ff fafc 	bl	8002ce4 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b64      	cmp	r3, #100	; 0x64
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e207      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fa:	4b5b      	ldr	r3, [pc, #364]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0xc0>
 8003706:	e014      	b.n	8003732 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003708:	f7ff faec 	bl	8002ce4 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003710:	f7ff fae8 	bl	8002ce4 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	; 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e1f3      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003722:	4b51      	ldr	r3, [pc, #324]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0xe8>
 800372e:	e000      	b.n	8003732 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d063      	beq.n	8003806 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800373e:	4b4a      	ldr	r3, [pc, #296]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00b      	beq.n	8003762 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800374a:	4b47      	ldr	r3, [pc, #284]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003752:	2b08      	cmp	r3, #8
 8003754:	d11c      	bne.n	8003790 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003756:	4b44      	ldr	r3, [pc, #272]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d116      	bne.n	8003790 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003762:	4b41      	ldr	r3, [pc, #260]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <HAL_RCC_OscConfig+0x152>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d001      	beq.n	800377a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e1c7      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377a:	4b3b      	ldr	r3, [pc, #236]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	4937      	ldr	r1, [pc, #220]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 800378a:	4313      	orrs	r3, r2
 800378c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378e:	e03a      	b.n	8003806 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d020      	beq.n	80037da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003798:	4b34      	ldr	r3, [pc, #208]	; (800386c <HAL_RCC_OscConfig+0x244>)
 800379a:	2201      	movs	r2, #1
 800379c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379e:	f7ff faa1 	bl	8002ce4 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a6:	f7ff fa9d 	bl	8002ce4 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e1a8      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b8:	4b2b      	ldr	r3, [pc, #172]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c4:	4b28      	ldr	r3, [pc, #160]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	4925      	ldr	r1, [pc, #148]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	600b      	str	r3, [r1, #0]
 80037d8:	e015      	b.n	8003806 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037da:	4b24      	ldr	r3, [pc, #144]	; (800386c <HAL_RCC_OscConfig+0x244>)
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7ff fa80 	bl	8002ce4 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e8:	f7ff fa7c 	bl	8002ce4 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e187      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fa:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d036      	beq.n	8003880 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d016      	beq.n	8003848 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800381a:	4b15      	ldr	r3, [pc, #84]	; (8003870 <HAL_RCC_OscConfig+0x248>)
 800381c:	2201      	movs	r2, #1
 800381e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003820:	f7ff fa60 	bl	8002ce4 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003828:	f7ff fa5c 	bl	8002ce4 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e167      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800383a:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <HAL_RCC_OscConfig+0x240>)
 800383c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCC_OscConfig+0x200>
 8003846:	e01b      	b.n	8003880 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003848:	4b09      	ldr	r3, [pc, #36]	; (8003870 <HAL_RCC_OscConfig+0x248>)
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384e:	f7ff fa49 	bl	8002ce4 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003854:	e00e      	b.n	8003874 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003856:	f7ff fa45 	bl	8002ce4 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d907      	bls.n	8003874 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e150      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
 8003868:	40023800 	.word	0x40023800
 800386c:	42470000 	.word	0x42470000
 8003870:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003874:	4b88      	ldr	r3, [pc, #544]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1ea      	bne.n	8003856 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 8097 	beq.w	80039bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800388e:	2300      	movs	r3, #0
 8003890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003892:	4b81      	ldr	r3, [pc, #516]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10f      	bne.n	80038be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	4b7d      	ldr	r3, [pc, #500]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	4a7c      	ldr	r2, [pc, #496]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 80038a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ac:	6413      	str	r3, [r2, #64]	; 0x40
 80038ae:	4b7a      	ldr	r3, [pc, #488]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b6:	60bb      	str	r3, [r7, #8]
 80038b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ba:	2301      	movs	r3, #1
 80038bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038be:	4b77      	ldr	r3, [pc, #476]	; (8003a9c <HAL_RCC_OscConfig+0x474>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d118      	bne.n	80038fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ca:	4b74      	ldr	r3, [pc, #464]	; (8003a9c <HAL_RCC_OscConfig+0x474>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a73      	ldr	r2, [pc, #460]	; (8003a9c <HAL_RCC_OscConfig+0x474>)
 80038d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d6:	f7ff fa05 	bl	8002ce4 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038de:	f7ff fa01 	bl	8002ce4 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e10c      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f0:	4b6a      	ldr	r3, [pc, #424]	; (8003a9c <HAL_RCC_OscConfig+0x474>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d106      	bne.n	8003912 <HAL_RCC_OscConfig+0x2ea>
 8003904:	4b64      	ldr	r3, [pc, #400]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	4a63      	ldr	r2, [pc, #396]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	6713      	str	r3, [r2, #112]	; 0x70
 8003910:	e01c      	b.n	800394c <HAL_RCC_OscConfig+0x324>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2b05      	cmp	r3, #5
 8003918:	d10c      	bne.n	8003934 <HAL_RCC_OscConfig+0x30c>
 800391a:	4b5f      	ldr	r3, [pc, #380]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391e:	4a5e      	ldr	r2, [pc, #376]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003920:	f043 0304 	orr.w	r3, r3, #4
 8003924:	6713      	str	r3, [r2, #112]	; 0x70
 8003926:	4b5c      	ldr	r3, [pc, #368]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392a:	4a5b      	ldr	r2, [pc, #364]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	6713      	str	r3, [r2, #112]	; 0x70
 8003932:	e00b      	b.n	800394c <HAL_RCC_OscConfig+0x324>
 8003934:	4b58      	ldr	r3, [pc, #352]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003938:	4a57      	ldr	r2, [pc, #348]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 800393a:	f023 0301 	bic.w	r3, r3, #1
 800393e:	6713      	str	r3, [r2, #112]	; 0x70
 8003940:	4b55      	ldr	r3, [pc, #340]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003944:	4a54      	ldr	r2, [pc, #336]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003946:	f023 0304 	bic.w	r3, r3, #4
 800394a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d015      	beq.n	8003980 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003954:	f7ff f9c6 	bl	8002ce4 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395a:	e00a      	b.n	8003972 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800395c:	f7ff f9c2 	bl	8002ce4 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	f241 3288 	movw	r2, #5000	; 0x1388
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e0cb      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003972:	4b49      	ldr	r3, [pc, #292]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0ee      	beq.n	800395c <HAL_RCC_OscConfig+0x334>
 800397e:	e014      	b.n	80039aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003980:	f7ff f9b0 	bl	8002ce4 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003986:	e00a      	b.n	800399e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003988:	f7ff f9ac 	bl	8002ce4 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f241 3288 	movw	r2, #5000	; 0x1388
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e0b5      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800399e:	4b3e      	ldr	r3, [pc, #248]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 80039a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1ee      	bne.n	8003988 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d105      	bne.n	80039bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b0:	4b39      	ldr	r3, [pc, #228]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	4a38      	ldr	r2, [pc, #224]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 80039b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80a1 	beq.w	8003b08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039c6:	4b34      	ldr	r3, [pc, #208]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d05c      	beq.n	8003a8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d141      	bne.n	8003a5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039da:	4b31      	ldr	r3, [pc, #196]	; (8003aa0 <HAL_RCC_OscConfig+0x478>)
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e0:	f7ff f980 	bl	8002ce4 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e8:	f7ff f97c 	bl	8002ce4 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e087      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fa:	4b27      	ldr	r3, [pc, #156]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69da      	ldr	r2, [r3, #28]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	019b      	lsls	r3, r3, #6
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1c:	085b      	lsrs	r3, r3, #1
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	041b      	lsls	r3, r3, #16
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	061b      	lsls	r3, r3, #24
 8003a2a:	491b      	ldr	r1, [pc, #108]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a30:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <HAL_RCC_OscConfig+0x478>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a36:	f7ff f955 	bl	8002ce4 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3e:	f7ff f951 	bl	8002ce4 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e05c      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a50:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x416>
 8003a5c:	e054      	b.n	8003b08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5e:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <HAL_RCC_OscConfig+0x478>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a64:	f7ff f93e 	bl	8002ce4 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a6c:	f7ff f93a 	bl	8002ce4 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e045      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7e:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <HAL_RCC_OscConfig+0x470>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x444>
 8003a8a:	e03d      	b.n	8003b08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d107      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e038      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	40007000 	.word	0x40007000
 8003aa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003aa4:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <HAL_RCC_OscConfig+0x4ec>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d028      	beq.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d121      	bne.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d11a      	bne.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ada:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d111      	bne.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aea:	085b      	lsrs	r3, r3, #1
 8003aec:	3b01      	subs	r3, #1
 8003aee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d107      	bne.n	8003b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d001      	beq.n	8003b08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800

08003b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0cc      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b2c:	4b68      	ldr	r3, [pc, #416]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d90c      	bls.n	8003b54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3a:	4b65      	ldr	r3, [pc, #404]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b42:	4b63      	ldr	r3, [pc, #396]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d001      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0b8      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d020      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b6c:	4b59      	ldr	r3, [pc, #356]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4a58      	ldr	r2, [pc, #352]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b84:	4b53      	ldr	r3, [pc, #332]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	4a52      	ldr	r2, [pc, #328]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b90:	4b50      	ldr	r3, [pc, #320]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	494d      	ldr	r1, [pc, #308]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d044      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d107      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb6:	4b47      	ldr	r3, [pc, #284]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d119      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e07f      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d003      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d107      	bne.n	8003be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd6:	4b3f      	ldr	r3, [pc, #252]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d109      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e06f      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be6:	4b3b      	ldr	r3, [pc, #236]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e067      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bf6:	4b37      	ldr	r3, [pc, #220]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f023 0203 	bic.w	r2, r3, #3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	4934      	ldr	r1, [pc, #208]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c08:	f7ff f86c 	bl	8002ce4 <HAL_GetTick>
 8003c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0e:	e00a      	b.n	8003c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c10:	f7ff f868 	bl	8002ce4 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e04f      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c26:	4b2b      	ldr	r3, [pc, #172]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 020c 	and.w	r2, r3, #12
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d1eb      	bne.n	8003c10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c38:	4b25      	ldr	r3, [pc, #148]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d20c      	bcs.n	8003c60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c46:	4b22      	ldr	r3, [pc, #136]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4e:	4b20      	ldr	r3, [pc, #128]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e032      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c6c:	4b19      	ldr	r3, [pc, #100]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4916      	ldr	r1, [pc, #88]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d009      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c8a:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	490e      	ldr	r1, [pc, #56]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c9e:	f000 f821 	bl	8003ce4 <HAL_RCC_GetSysClockFreq>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	490a      	ldr	r1, [pc, #40]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb0:	5ccb      	ldrb	r3, [r1, r3]
 8003cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb6:	4a09      	ldr	r2, [pc, #36]	; (8003cdc <HAL_RCC_ClockConfig+0x1c4>)
 8003cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cba:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe ffcc 	bl	8002c5c <HAL_InitTick>

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40023c00 	.word	0x40023c00
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	08010c40 	.word	0x08010c40
 8003cdc:	20000084 	.word	0x20000084
 8003ce0:	20000088 	.word	0x20000088

08003ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ce8:	b090      	sub	sp, #64	; 0x40
 8003cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	637b      	str	r3, [r7, #52]	; 0x34
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cfc:	4b59      	ldr	r3, [pc, #356]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 030c 	and.w	r3, r3, #12
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d00d      	beq.n	8003d24 <HAL_RCC_GetSysClockFreq+0x40>
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	f200 80a1 	bhi.w	8003e50 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x34>
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d003      	beq.n	8003d1e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d16:	e09b      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d18:	4b53      	ldr	r3, [pc, #332]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d1a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d1c:	e09b      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d1e:	4b53      	ldr	r3, [pc, #332]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x188>)
 8003d20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d22:	e098      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d24:	4b4f      	ldr	r3, [pc, #316]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d2c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d2e:	4b4d      	ldr	r3, [pc, #308]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d028      	beq.n	8003d8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d3a:	4b4a      	ldr	r3, [pc, #296]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	099b      	lsrs	r3, r3, #6
 8003d40:	2200      	movs	r2, #0
 8003d42:	623b      	str	r3, [r7, #32]
 8003d44:	627a      	str	r2, [r7, #36]	; 0x24
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x188>)
 8003d50:	fb03 f201 	mul.w	r2, r3, r1
 8003d54:	2300      	movs	r3, #0
 8003d56:	fb00 f303 	mul.w	r3, r0, r3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	4a43      	ldr	r2, [pc, #268]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x188>)
 8003d5e:	fba0 1202 	umull	r1, r2, r0, r2
 8003d62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d64:	460a      	mov	r2, r1
 8003d66:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d6a:	4413      	add	r3, r2
 8003d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d70:	2200      	movs	r2, #0
 8003d72:	61bb      	str	r3, [r7, #24]
 8003d74:	61fa      	str	r2, [r7, #28]
 8003d76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d7e:	f7fc fa97 	bl	80002b0 <__aeabi_uldivmod>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	4613      	mov	r3, r2
 8003d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d8a:	e053      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d8c:	4b35      	ldr	r3, [pc, #212]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	099b      	lsrs	r3, r3, #6
 8003d92:	2200      	movs	r2, #0
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	617a      	str	r2, [r7, #20]
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d9e:	f04f 0b00 	mov.w	fp, #0
 8003da2:	4652      	mov	r2, sl
 8003da4:	465b      	mov	r3, fp
 8003da6:	f04f 0000 	mov.w	r0, #0
 8003daa:	f04f 0100 	mov.w	r1, #0
 8003dae:	0159      	lsls	r1, r3, #5
 8003db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003db4:	0150      	lsls	r0, r2, #5
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	ebb2 080a 	subs.w	r8, r2, sl
 8003dbe:	eb63 090b 	sbc.w	r9, r3, fp
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003dce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003dd2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003dd6:	ebb2 0408 	subs.w	r4, r2, r8
 8003dda:	eb63 0509 	sbc.w	r5, r3, r9
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	00eb      	lsls	r3, r5, #3
 8003de8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dec:	00e2      	lsls	r2, r4, #3
 8003dee:	4614      	mov	r4, r2
 8003df0:	461d      	mov	r5, r3
 8003df2:	eb14 030a 	adds.w	r3, r4, sl
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	eb45 030b 	adc.w	r3, r5, fp
 8003dfc:	607b      	str	r3, [r7, #4]
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	f04f 0300 	mov.w	r3, #0
 8003e06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e0a:	4629      	mov	r1, r5
 8003e0c:	028b      	lsls	r3, r1, #10
 8003e0e:	4621      	mov	r1, r4
 8003e10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e14:	4621      	mov	r1, r4
 8003e16:	028a      	lsls	r2, r1, #10
 8003e18:	4610      	mov	r0, r2
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1e:	2200      	movs	r2, #0
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	60fa      	str	r2, [r7, #12]
 8003e24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e28:	f7fc fa42 	bl	80002b0 <__aeabi_uldivmod>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4613      	mov	r3, r2
 8003e32:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e34:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	0c1b      	lsrs	r3, r3, #16
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	3301      	adds	r3, #1
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003e44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e4e:	e002      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3740      	adds	r7, #64	; 0x40
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e62:	bf00      	nop
 8003e64:	40023800 	.word	0x40023800
 8003e68:	00f42400 	.word	0x00f42400
 8003e6c:	017d7840 	.word	0x017d7840

08003e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e74:	4b03      	ldr	r3, [pc, #12]	; (8003e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e76:	681b      	ldr	r3, [r3, #0]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	20000084 	.word	0x20000084

08003e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e8c:	f7ff fff0 	bl	8003e70 <HAL_RCC_GetHCLKFreq>
 8003e90:	4602      	mov	r2, r0
 8003e92:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	0a9b      	lsrs	r3, r3, #10
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	4903      	ldr	r1, [pc, #12]	; (8003eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	08010c50 	.word	0x08010c50

08003eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003eb4:	f7ff ffdc 	bl	8003e70 <HAL_RCC_GetHCLKFreq>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	0b5b      	lsrs	r3, r3, #13
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	4903      	ldr	r1, [pc, #12]	; (8003ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ec6:	5ccb      	ldrb	r3, [r1, r3]
 8003ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	08010c50 	.word	0x08010c50

08003ed8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e07b      	b.n	8003fe2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d108      	bne.n	8003f04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003efa:	d009      	beq.n	8003f10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	61da      	str	r2, [r3, #28]
 8003f02:	e005      	b.n	8003f10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fe fb8e 	bl	800264c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f94:	ea42 0103 	orr.w	r1, r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	0c1b      	lsrs	r3, r3, #16
 8003fae:	f003 0104 	and.w	r1, r3, #4
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	f003 0210 	and.w	r2, r3, #16
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69da      	ldr	r2, [r3, #28]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b08c      	sub	sp, #48	; 0x30
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	607a      	str	r2, [r7, #4]
 8003ff6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_SPI_TransmitReceive+0x26>
 800400c:	2302      	movs	r3, #2
 800400e:	e18a      	b.n	8004326 <HAL_SPI_TransmitReceive+0x33c>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004018:	f7fe fe64 	bl	8002ce4 <HAL_GetTick>
 800401c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800402e:	887b      	ldrh	r3, [r7, #2]
 8004030:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004032:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004036:	2b01      	cmp	r3, #1
 8004038:	d00f      	beq.n	800405a <HAL_SPI_TransmitReceive+0x70>
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004040:	d107      	bne.n	8004052 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d103      	bne.n	8004052 <HAL_SPI_TransmitReceive+0x68>
 800404a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800404e:	2b04      	cmp	r3, #4
 8004050:	d003      	beq.n	800405a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004052:	2302      	movs	r3, #2
 8004054:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004058:	e15b      	b.n	8004312 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_SPI_TransmitReceive+0x82>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_SPI_TransmitReceive+0x82>
 8004066:	887b      	ldrh	r3, [r7, #2]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d103      	bne.n	8004074 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004072:	e14e      	b.n	8004312 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b04      	cmp	r3, #4
 800407e:	d003      	beq.n	8004088 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2205      	movs	r2, #5
 8004084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	887a      	ldrh	r2, [r7, #2]
 8004098:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	887a      	ldrh	r2, [r7, #2]
 800409e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	887a      	ldrh	r2, [r7, #2]
 80040aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	887a      	ldrh	r2, [r7, #2]
 80040b0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c8:	2b40      	cmp	r3, #64	; 0x40
 80040ca:	d007      	beq.n	80040dc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e4:	d178      	bne.n	80041d8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <HAL_SPI_TransmitReceive+0x10a>
 80040ee:	8b7b      	ldrh	r3, [r7, #26]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d166      	bne.n	80041c2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	881a      	ldrh	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004104:	1c9a      	adds	r2, r3, #2
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004118:	e053      	b.n	80041c2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b02      	cmp	r3, #2
 8004126:	d11b      	bne.n	8004160 <HAL_SPI_TransmitReceive+0x176>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d016      	beq.n	8004160 <HAL_SPI_TransmitReceive+0x176>
 8004132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004134:	2b01      	cmp	r3, #1
 8004136:	d113      	bne.n	8004160 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	881a      	ldrh	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	1c9a      	adds	r2, r3, #2
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b01      	cmp	r3, #1
 800416c:	d119      	bne.n	80041a2 <HAL_SPI_TransmitReceive+0x1b8>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d014      	beq.n	80041a2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004182:	b292      	uxth	r2, r2
 8004184:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418a:	1c9a      	adds	r2, r3, #2
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004194:	b29b      	uxth	r3, r3
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800419e:	2301      	movs	r3, #1
 80041a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041a2:	f7fe fd9f 	bl	8002ce4 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d807      	bhi.n	80041c2 <HAL_SPI_TransmitReceive+0x1d8>
 80041b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b8:	d003      	beq.n	80041c2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80041c0:	e0a7      	b.n	8004312 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1a6      	bne.n	800411a <HAL_SPI_TransmitReceive+0x130>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1a1      	bne.n	800411a <HAL_SPI_TransmitReceive+0x130>
 80041d6:	e07c      	b.n	80042d2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <HAL_SPI_TransmitReceive+0x1fc>
 80041e0:	8b7b      	ldrh	r3, [r7, #26]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d16b      	bne.n	80042be <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	330c      	adds	r3, #12
 80041f0:	7812      	ldrb	r2, [r2, #0]
 80041f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800420c:	e057      	b.n	80042be <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b02      	cmp	r3, #2
 800421a:	d11c      	bne.n	8004256 <HAL_SPI_TransmitReceive+0x26c>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d017      	beq.n	8004256 <HAL_SPI_TransmitReceive+0x26c>
 8004226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004228:	2b01      	cmp	r3, #1
 800422a:	d114      	bne.n	8004256 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	330c      	adds	r3, #12
 8004236:	7812      	ldrb	r2, [r2, #0]
 8004238:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004248:	b29b      	uxth	r3, r3
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b01      	cmp	r3, #1
 8004262:	d119      	bne.n	8004298 <HAL_SPI_TransmitReceive+0x2ae>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d014      	beq.n	8004298 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800428a:	b29b      	uxth	r3, r3
 800428c:	3b01      	subs	r3, #1
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004294:	2301      	movs	r3, #1
 8004296:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004298:	f7fe fd24 	bl	8002ce4 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d803      	bhi.n	80042b0 <HAL_SPI_TransmitReceive+0x2c6>
 80042a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ae:	d102      	bne.n	80042b6 <HAL_SPI_TransmitReceive+0x2cc>
 80042b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d103      	bne.n	80042be <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80042bc:	e029      	b.n	8004312 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1a2      	bne.n	800420e <HAL_SPI_TransmitReceive+0x224>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d19d      	bne.n	800420e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f8b2 	bl	8004440 <SPI_EndRxTxTransaction>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d006      	beq.n	80042f0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2220      	movs	r2, #32
 80042ec:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80042ee:	e010      	b.n	8004312 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10b      	bne.n	8004310 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	e000      	b.n	8004312 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004310:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004322:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004326:	4618      	mov	r0, r3
 8004328:	3730      	adds	r7, #48	; 0x30
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	4613      	mov	r3, r2
 800433e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004340:	f7fe fcd0 	bl	8002ce4 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004348:	1a9b      	subs	r3, r3, r2
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	4413      	add	r3, r2
 800434e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004350:	f7fe fcc8 	bl	8002ce4 <HAL_GetTick>
 8004354:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004356:	4b39      	ldr	r3, [pc, #228]	; (800443c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	015b      	lsls	r3, r3, #5
 800435c:	0d1b      	lsrs	r3, r3, #20
 800435e:	69fa      	ldr	r2, [r7, #28]
 8004360:	fb02 f303 	mul.w	r3, r2, r3
 8004364:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004366:	e054      	b.n	8004412 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436e:	d050      	beq.n	8004412 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004370:	f7fe fcb8 	bl	8002ce4 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	429a      	cmp	r2, r3
 800437e:	d902      	bls.n	8004386 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d13d      	bne.n	8004402 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004394:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800439e:	d111      	bne.n	80043c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a8:	d004      	beq.n	80043b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b2:	d107      	bne.n	80043c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043cc:	d10f      	bne.n	80043ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e017      	b.n	8004432 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	3b01      	subs	r3, #1
 8004410:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	4013      	ands	r3, r2
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	429a      	cmp	r2, r3
 8004420:	bf0c      	ite	eq
 8004422:	2301      	moveq	r3, #1
 8004424:	2300      	movne	r3, #0
 8004426:	b2db      	uxtb	r3, r3
 8004428:	461a      	mov	r2, r3
 800442a:	79fb      	ldrb	r3, [r7, #7]
 800442c:	429a      	cmp	r2, r3
 800442e:	d19b      	bne.n	8004368 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3720      	adds	r7, #32
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	20000084 	.word	0x20000084

08004440 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af02      	add	r7, sp, #8
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800444c:	4b1b      	ldr	r3, [pc, #108]	; (80044bc <SPI_EndRxTxTransaction+0x7c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1b      	ldr	r2, [pc, #108]	; (80044c0 <SPI_EndRxTxTransaction+0x80>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	0d5b      	lsrs	r3, r3, #21
 8004458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800445c:	fb02 f303 	mul.w	r3, r2, r3
 8004460:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800446a:	d112      	bne.n	8004492 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2200      	movs	r2, #0
 8004474:	2180      	movs	r1, #128	; 0x80
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f7ff ff5a 	bl	8004330 <SPI_WaitFlagStateUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d016      	beq.n	80044b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004486:	f043 0220 	orr.w	r2, r3, #32
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e00f      	b.n	80044b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	3b01      	subs	r3, #1
 800449c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a8:	2b80      	cmp	r3, #128	; 0x80
 80044aa:	d0f2      	beq.n	8004492 <SPI_EndRxTxTransaction+0x52>
 80044ac:	e000      	b.n	80044b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80044ae:	bf00      	nop
  }

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20000084 	.word	0x20000084
 80044c0:	165e9f81 	.word	0x165e9f81

080044c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e041      	b.n	800455a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7fe f8f6 	bl	80026dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3304      	adds	r3, #4
 8004500:	4619      	mov	r1, r3
 8004502:	4610      	mov	r0, r2
 8004504:	f000 fce4 	bl	8004ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b082      	sub	sp, #8
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e041      	b.n	80045f8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d106      	bne.n	800458e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f839 	bl	8004600 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2202      	movs	r2, #2
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	3304      	adds	r3, #4
 800459e:	4619      	mov	r1, r3
 80045a0:	4610      	mov	r0, r2
 80045a2:	f000 fc95 	bl	8004ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d109      	bne.n	800463c <HAL_TIM_OC_Start_IT+0x28>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b01      	cmp	r3, #1
 8004632:	bf14      	ite	ne
 8004634:	2301      	movne	r3, #1
 8004636:	2300      	moveq	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	e022      	b.n	8004682 <HAL_TIM_OC_Start_IT+0x6e>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2b04      	cmp	r3, #4
 8004640:	d109      	bne.n	8004656 <HAL_TIM_OC_Start_IT+0x42>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b01      	cmp	r3, #1
 800464c:	bf14      	ite	ne
 800464e:	2301      	movne	r3, #1
 8004650:	2300      	moveq	r3, #0
 8004652:	b2db      	uxtb	r3, r3
 8004654:	e015      	b.n	8004682 <HAL_TIM_OC_Start_IT+0x6e>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b08      	cmp	r3, #8
 800465a:	d109      	bne.n	8004670 <HAL_TIM_OC_Start_IT+0x5c>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	bf14      	ite	ne
 8004668:	2301      	movne	r3, #1
 800466a:	2300      	moveq	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	e008      	b.n	8004682 <HAL_TIM_OC_Start_IT+0x6e>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b01      	cmp	r3, #1
 800467a:	bf14      	ite	ne
 800467c:	2301      	movne	r3, #1
 800467e:	2300      	moveq	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e0b3      	b.n	80047f2 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d104      	bne.n	800469a <HAL_TIM_OC_Start_IT+0x86>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004698:	e013      	b.n	80046c2 <HAL_TIM_OC_Start_IT+0xae>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b04      	cmp	r3, #4
 800469e:	d104      	bne.n	80046aa <HAL_TIM_OC_Start_IT+0x96>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046a8:	e00b      	b.n	80046c2 <HAL_TIM_OC_Start_IT+0xae>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d104      	bne.n	80046ba <HAL_TIM_OC_Start_IT+0xa6>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046b8:	e003      	b.n	80046c2 <HAL_TIM_OC_Start_IT+0xae>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2202      	movs	r2, #2
 80046be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b0c      	cmp	r3, #12
 80046c6:	d841      	bhi.n	800474c <HAL_TIM_OC_Start_IT+0x138>
 80046c8:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <HAL_TIM_OC_Start_IT+0xbc>)
 80046ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ce:	bf00      	nop
 80046d0:	08004705 	.word	0x08004705
 80046d4:	0800474d 	.word	0x0800474d
 80046d8:	0800474d 	.word	0x0800474d
 80046dc:	0800474d 	.word	0x0800474d
 80046e0:	08004717 	.word	0x08004717
 80046e4:	0800474d 	.word	0x0800474d
 80046e8:	0800474d 	.word	0x0800474d
 80046ec:	0800474d 	.word	0x0800474d
 80046f0:	08004729 	.word	0x08004729
 80046f4:	0800474d 	.word	0x0800474d
 80046f8:	0800474d 	.word	0x0800474d
 80046fc:	0800474d 	.word	0x0800474d
 8004700:	0800473b 	.word	0x0800473b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0202 	orr.w	r2, r2, #2
 8004712:	60da      	str	r2, [r3, #12]
      break;
 8004714:	e01d      	b.n	8004752 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0204 	orr.w	r2, r2, #4
 8004724:	60da      	str	r2, [r3, #12]
      break;
 8004726:	e014      	b.n	8004752 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0208 	orr.w	r2, r2, #8
 8004736:	60da      	str	r2, [r3, #12]
      break;
 8004738:	e00b      	b.n	8004752 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0210 	orr.w	r2, r2, #16
 8004748:	60da      	str	r2, [r3, #12]
      break;
 800474a:	e002      	b.n	8004752 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	73fb      	strb	r3, [r7, #15]
      break;
 8004750:	bf00      	nop
  }

  if (status == HAL_OK)
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d14b      	bne.n	80047f0 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2201      	movs	r2, #1
 800475e:	6839      	ldr	r1, [r7, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f000 fe5b 	bl	800541c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a24      	ldr	r2, [pc, #144]	; (80047fc <HAL_TIM_OC_Start_IT+0x1e8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d107      	bne.n	8004780 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800477e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a1d      	ldr	r2, [pc, #116]	; (80047fc <HAL_TIM_OC_Start_IT+0x1e8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d018      	beq.n	80047bc <HAL_TIM_OC_Start_IT+0x1a8>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004792:	d013      	beq.n	80047bc <HAL_TIM_OC_Start_IT+0x1a8>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a19      	ldr	r2, [pc, #100]	; (8004800 <HAL_TIM_OC_Start_IT+0x1ec>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00e      	beq.n	80047bc <HAL_TIM_OC_Start_IT+0x1a8>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a18      	ldr	r2, [pc, #96]	; (8004804 <HAL_TIM_OC_Start_IT+0x1f0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d009      	beq.n	80047bc <HAL_TIM_OC_Start_IT+0x1a8>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a16      	ldr	r2, [pc, #88]	; (8004808 <HAL_TIM_OC_Start_IT+0x1f4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_TIM_OC_Start_IT+0x1a8>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a15      	ldr	r2, [pc, #84]	; (800480c <HAL_TIM_OC_Start_IT+0x1f8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d111      	bne.n	80047e0 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b06      	cmp	r3, #6
 80047cc:	d010      	beq.n	80047f0 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f042 0201 	orr.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047de:	e007      	b.n	80047f0 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40010000 	.word	0x40010000
 8004800:	40000400 	.word	0x40000400
 8004804:	40000800 	.word	0x40000800
 8004808:	40000c00 	.word	0x40000c00
 800480c:	40014000 	.word	0x40014000

08004810 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b0c      	cmp	r3, #12
 8004822:	d841      	bhi.n	80048a8 <HAL_TIM_OC_Stop_IT+0x98>
 8004824:	a201      	add	r2, pc, #4	; (adr r2, 800482c <HAL_TIM_OC_Stop_IT+0x1c>)
 8004826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482a:	bf00      	nop
 800482c:	08004861 	.word	0x08004861
 8004830:	080048a9 	.word	0x080048a9
 8004834:	080048a9 	.word	0x080048a9
 8004838:	080048a9 	.word	0x080048a9
 800483c:	08004873 	.word	0x08004873
 8004840:	080048a9 	.word	0x080048a9
 8004844:	080048a9 	.word	0x080048a9
 8004848:	080048a9 	.word	0x080048a9
 800484c:	08004885 	.word	0x08004885
 8004850:	080048a9 	.word	0x080048a9
 8004854:	080048a9 	.word	0x080048a9
 8004858:	080048a9 	.word	0x080048a9
 800485c:	08004897 	.word	0x08004897
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0202 	bic.w	r2, r2, #2
 800486e:	60da      	str	r2, [r3, #12]
      break;
 8004870:	e01d      	b.n	80048ae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0204 	bic.w	r2, r2, #4
 8004880:	60da      	str	r2, [r3, #12]
      break;
 8004882:	e014      	b.n	80048ae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0208 	bic.w	r2, r2, #8
 8004892:	60da      	str	r2, [r3, #12]
      break;
 8004894:	e00b      	b.n	80048ae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0210 	bic.w	r2, r2, #16
 80048a4:	60da      	str	r2, [r3, #12]
      break;
 80048a6:	e002      	b.n	80048ae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	73fb      	strb	r3, [r7, #15]
      break;
 80048ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d157      	bne.n	8004964 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2200      	movs	r2, #0
 80048ba:	6839      	ldr	r1, [r7, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 fdad 	bl	800541c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a2a      	ldr	r2, [pc, #168]	; (8004970 <HAL_TIM_OC_Stop_IT+0x160>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d117      	bne.n	80048fc <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6a1a      	ldr	r2, [r3, #32]
 80048d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10f      	bne.n	80048fc <HAL_TIM_OC_Stop_IT+0xec>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6a1a      	ldr	r2, [r3, #32]
 80048e2:	f240 4344 	movw	r3, #1092	; 0x444
 80048e6:	4013      	ands	r3, r2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d107      	bne.n	80048fc <HAL_TIM_OC_Stop_IT+0xec>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048fa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6a1a      	ldr	r2, [r3, #32]
 8004902:	f241 1311 	movw	r3, #4369	; 0x1111
 8004906:	4013      	ands	r3, r2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10f      	bne.n	800492c <HAL_TIM_OC_Stop_IT+0x11c>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6a1a      	ldr	r2, [r3, #32]
 8004912:	f240 4344 	movw	r3, #1092	; 0x444
 8004916:	4013      	ands	r3, r2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d107      	bne.n	800492c <HAL_TIM_OC_Stop_IT+0x11c>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0201 	bic.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d104      	bne.n	800493c <HAL_TIM_OC_Stop_IT+0x12c>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800493a:	e013      	b.n	8004964 <HAL_TIM_OC_Stop_IT+0x154>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b04      	cmp	r3, #4
 8004940:	d104      	bne.n	800494c <HAL_TIM_OC_Stop_IT+0x13c>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800494a:	e00b      	b.n	8004964 <HAL_TIM_OC_Stop_IT+0x154>
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2b08      	cmp	r3, #8
 8004950:	d104      	bne.n	800495c <HAL_TIM_OC_Stop_IT+0x14c>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800495a:	e003      	b.n	8004964 <HAL_TIM_OC_Stop_IT+0x154>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004964:	7bfb      	ldrb	r3, [r7, #15]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	40010000 	.word	0x40010000

08004974 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e041      	b.n	8004a0c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d106      	bne.n	80049a2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f839 	bl	8004a14 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2202      	movs	r2, #2
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3304      	adds	r3, #4
 80049b2:	4619      	mov	r1, r3
 80049b4:	4610      	mov	r0, r2
 80049b6:	f000 fa8b 	bl	8004ed0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0208 	bic.w	r2, r2, #8
 80049c8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6819      	ldr	r1, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d122      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d11b      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0202 	mvn.w	r2, #2
 8004a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fa11 	bl	8004e92 <HAL_TIM_IC_CaptureCallback>
 8004a70:	e005      	b.n	8004a7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7fd fc36 	bl	80022e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 fa14 	bl	8004ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d122      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d11b      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0204 	mvn.w	r2, #4
 8004aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2202      	movs	r2, #2
 8004aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f9e7 	bl	8004e92 <HAL_TIM_IC_CaptureCallback>
 8004ac4:	e005      	b.n	8004ad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fd fc0c 	bl	80022e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f9ea 	bl	8004ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d122      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d11b      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f06f 0208 	mvn.w	r2, #8
 8004afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2204      	movs	r2, #4
 8004b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f9bd 	bl	8004e92 <HAL_TIM_IC_CaptureCallback>
 8004b18:	e005      	b.n	8004b26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fd fbe2 	bl	80022e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f9c0 	bl	8004ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f003 0310 	and.w	r3, r3, #16
 8004b36:	2b10      	cmp	r3, #16
 8004b38:	d122      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b10      	cmp	r3, #16
 8004b46:	d11b      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0210 	mvn.w	r2, #16
 8004b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2208      	movs	r2, #8
 8004b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f993 	bl	8004e92 <HAL_TIM_IC_CaptureCallback>
 8004b6c:	e005      	b.n	8004b7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fd fbb8 	bl	80022e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f996 	bl	8004ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d10e      	bne.n	8004bac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d107      	bne.n	8004bac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0201 	mvn.w	r2, #1
 8004ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f969 	bl	8004e7e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb6:	2b80      	cmp	r3, #128	; 0x80
 8004bb8:	d10e      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc4:	2b80      	cmp	r3, #128	; 0x80
 8004bc6:	d107      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fcc0 	bl	8005558 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be2:	2b40      	cmp	r3, #64	; 0x40
 8004be4:	d10e      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d107      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f95b 	bl	8004eba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b20      	cmp	r3, #32
 8004c10:	d10e      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	d107      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f06f 0220 	mvn.w	r2, #32
 8004c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fc8a 	bl	8005544 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c30:	bf00      	nop
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004c52:	2302      	movs	r3, #2
 8004c54:	e048      	b.n	8004ce8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b0c      	cmp	r3, #12
 8004c62:	d839      	bhi.n	8004cd8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004c64:	a201      	add	r2, pc, #4	; (adr r2, 8004c6c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6a:	bf00      	nop
 8004c6c:	08004ca1 	.word	0x08004ca1
 8004c70:	08004cd9 	.word	0x08004cd9
 8004c74:	08004cd9 	.word	0x08004cd9
 8004c78:	08004cd9 	.word	0x08004cd9
 8004c7c:	08004caf 	.word	0x08004caf
 8004c80:	08004cd9 	.word	0x08004cd9
 8004c84:	08004cd9 	.word	0x08004cd9
 8004c88:	08004cd9 	.word	0x08004cd9
 8004c8c:	08004cbd 	.word	0x08004cbd
 8004c90:	08004cd9 	.word	0x08004cd9
 8004c94:	08004cd9 	.word	0x08004cd9
 8004c98:	08004cd9 	.word	0x08004cd9
 8004c9c:	08004ccb 	.word	0x08004ccb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68b9      	ldr	r1, [r7, #8]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 f992 	bl	8004fd0 <TIM_OC1_SetConfig>
      break;
 8004cac:	e017      	b.n	8004cde <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 f9f1 	bl	800509c <TIM_OC2_SetConfig>
      break;
 8004cba:	e010      	b.n	8004cde <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68b9      	ldr	r1, [r7, #8]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fa56 	bl	8005174 <TIM_OC3_SetConfig>
      break;
 8004cc8:	e009      	b.n	8004cde <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68b9      	ldr	r1, [r7, #8]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fab9 	bl	8005248 <TIM_OC4_SetConfig>
      break;
 8004cd6:	e002      	b.n	8004cde <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	75fb      	strb	r3, [r7, #23]
      break;
 8004cdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3718      	adds	r7, #24
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_TIM_ConfigClockSource+0x1c>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e0b4      	b.n	8004e76 <HAL_TIM_ConfigClockSource+0x186>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d44:	d03e      	beq.n	8004dc4 <HAL_TIM_ConfigClockSource+0xd4>
 8004d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d4a:	f200 8087 	bhi.w	8004e5c <HAL_TIM_ConfigClockSource+0x16c>
 8004d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d52:	f000 8086 	beq.w	8004e62 <HAL_TIM_ConfigClockSource+0x172>
 8004d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5a:	d87f      	bhi.n	8004e5c <HAL_TIM_ConfigClockSource+0x16c>
 8004d5c:	2b70      	cmp	r3, #112	; 0x70
 8004d5e:	d01a      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0xa6>
 8004d60:	2b70      	cmp	r3, #112	; 0x70
 8004d62:	d87b      	bhi.n	8004e5c <HAL_TIM_ConfigClockSource+0x16c>
 8004d64:	2b60      	cmp	r3, #96	; 0x60
 8004d66:	d050      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x11a>
 8004d68:	2b60      	cmp	r3, #96	; 0x60
 8004d6a:	d877      	bhi.n	8004e5c <HAL_TIM_ConfigClockSource+0x16c>
 8004d6c:	2b50      	cmp	r3, #80	; 0x50
 8004d6e:	d03c      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0xfa>
 8004d70:	2b50      	cmp	r3, #80	; 0x50
 8004d72:	d873      	bhi.n	8004e5c <HAL_TIM_ConfigClockSource+0x16c>
 8004d74:	2b40      	cmp	r3, #64	; 0x40
 8004d76:	d058      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0x13a>
 8004d78:	2b40      	cmp	r3, #64	; 0x40
 8004d7a:	d86f      	bhi.n	8004e5c <HAL_TIM_ConfigClockSource+0x16c>
 8004d7c:	2b30      	cmp	r3, #48	; 0x30
 8004d7e:	d064      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0x15a>
 8004d80:	2b30      	cmp	r3, #48	; 0x30
 8004d82:	d86b      	bhi.n	8004e5c <HAL_TIM_ConfigClockSource+0x16c>
 8004d84:	2b20      	cmp	r3, #32
 8004d86:	d060      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0x15a>
 8004d88:	2b20      	cmp	r3, #32
 8004d8a:	d867      	bhi.n	8004e5c <HAL_TIM_ConfigClockSource+0x16c>
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d05c      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0x15a>
 8004d90:	2b10      	cmp	r3, #16
 8004d92:	d05a      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0x15a>
 8004d94:	e062      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6818      	ldr	r0, [r3, #0]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	6899      	ldr	r1, [r3, #8]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f000 fb19 	bl	80053dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004db8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	609a      	str	r2, [r3, #8]
      break;
 8004dc2:	e04f      	b.n	8004e64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	6899      	ldr	r1, [r3, #8]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f000 fb02 	bl	80053dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004de6:	609a      	str	r2, [r3, #8]
      break;
 8004de8:	e03c      	b.n	8004e64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	6859      	ldr	r1, [r3, #4]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	461a      	mov	r2, r3
 8004df8:	f000 fa76 	bl	80052e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2150      	movs	r1, #80	; 0x50
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 facf 	bl	80053a6 <TIM_ITRx_SetConfig>
      break;
 8004e08:	e02c      	b.n	8004e64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6818      	ldr	r0, [r3, #0]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	6859      	ldr	r1, [r3, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	461a      	mov	r2, r3
 8004e18:	f000 fa95 	bl	8005346 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2160      	movs	r1, #96	; 0x60
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fabf 	bl	80053a6 <TIM_ITRx_SetConfig>
      break;
 8004e28:	e01c      	b.n	8004e64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6818      	ldr	r0, [r3, #0]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	6859      	ldr	r1, [r3, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	461a      	mov	r2, r3
 8004e38:	f000 fa56 	bl	80052e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2140      	movs	r1, #64	; 0x40
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 faaf 	bl	80053a6 <TIM_ITRx_SetConfig>
      break;
 8004e48:	e00c      	b.n	8004e64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4619      	mov	r1, r3
 8004e54:	4610      	mov	r0, r2
 8004e56:	f000 faa6 	bl	80053a6 <TIM_ITRx_SetConfig>
      break;
 8004e5a:	e003      	b.n	8004e64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e60:	e000      	b.n	8004e64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
	...

08004ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a34      	ldr	r2, [pc, #208]	; (8004fb4 <TIM_Base_SetConfig+0xe4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00f      	beq.n	8004f08 <TIM_Base_SetConfig+0x38>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eee:	d00b      	beq.n	8004f08 <TIM_Base_SetConfig+0x38>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a31      	ldr	r2, [pc, #196]	; (8004fb8 <TIM_Base_SetConfig+0xe8>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d007      	beq.n	8004f08 <TIM_Base_SetConfig+0x38>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a30      	ldr	r2, [pc, #192]	; (8004fbc <TIM_Base_SetConfig+0xec>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d003      	beq.n	8004f08 <TIM_Base_SetConfig+0x38>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a2f      	ldr	r2, [pc, #188]	; (8004fc0 <TIM_Base_SetConfig+0xf0>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d108      	bne.n	8004f1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a25      	ldr	r2, [pc, #148]	; (8004fb4 <TIM_Base_SetConfig+0xe4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d01b      	beq.n	8004f5a <TIM_Base_SetConfig+0x8a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f28:	d017      	beq.n	8004f5a <TIM_Base_SetConfig+0x8a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a22      	ldr	r2, [pc, #136]	; (8004fb8 <TIM_Base_SetConfig+0xe8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d013      	beq.n	8004f5a <TIM_Base_SetConfig+0x8a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a21      	ldr	r2, [pc, #132]	; (8004fbc <TIM_Base_SetConfig+0xec>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d00f      	beq.n	8004f5a <TIM_Base_SetConfig+0x8a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a20      	ldr	r2, [pc, #128]	; (8004fc0 <TIM_Base_SetConfig+0xf0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00b      	beq.n	8004f5a <TIM_Base_SetConfig+0x8a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a1f      	ldr	r2, [pc, #124]	; (8004fc4 <TIM_Base_SetConfig+0xf4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d007      	beq.n	8004f5a <TIM_Base_SetConfig+0x8a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a1e      	ldr	r2, [pc, #120]	; (8004fc8 <TIM_Base_SetConfig+0xf8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d003      	beq.n	8004f5a <TIM_Base_SetConfig+0x8a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a1d      	ldr	r2, [pc, #116]	; (8004fcc <TIM_Base_SetConfig+0xfc>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d108      	bne.n	8004f6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a08      	ldr	r2, [pc, #32]	; (8004fb4 <TIM_Base_SetConfig+0xe4>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d103      	bne.n	8004fa0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	615a      	str	r2, [r3, #20]
}
 8004fa6:	bf00      	nop
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40010000 	.word	0x40010000
 8004fb8:	40000400 	.word	0x40000400
 8004fbc:	40000800 	.word	0x40000800
 8004fc0:	40000c00 	.word	0x40000c00
 8004fc4:	40014000 	.word	0x40014000
 8004fc8:	40014400 	.word	0x40014400
 8004fcc:	40014800 	.word	0x40014800

08004fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f023 0201 	bic.w	r2, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0303 	bic.w	r3, r3, #3
 8005006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f023 0302 	bic.w	r3, r3, #2
 8005018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a1c      	ldr	r2, [pc, #112]	; (8005098 <TIM_OC1_SetConfig+0xc8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d10c      	bne.n	8005046 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f023 0308 	bic.w	r3, r3, #8
 8005032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	4313      	orrs	r3, r2
 800503c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f023 0304 	bic.w	r3, r3, #4
 8005044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a13      	ldr	r2, [pc, #76]	; (8005098 <TIM_OC1_SetConfig+0xc8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d111      	bne.n	8005072 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800505c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	621a      	str	r2, [r3, #32]
}
 800508c:	bf00      	nop
 800508e:	371c      	adds	r7, #28
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	40010000 	.word	0x40010000

0800509c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f023 0210 	bic.w	r2, r3, #16
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f023 0320 	bic.w	r3, r3, #32
 80050e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a1e      	ldr	r2, [pc, #120]	; (8005170 <TIM_OC2_SetConfig+0xd4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d10d      	bne.n	8005118 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005116:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a15      	ldr	r2, [pc, #84]	; (8005170 <TIM_OC2_SetConfig+0xd4>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d113      	bne.n	8005148 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005126:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800512e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	bf00      	nop
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	40010000 	.word	0x40010000

08005174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0303 	bic.w	r3, r3, #3
 80051aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	021b      	lsls	r3, r3, #8
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a1d      	ldr	r2, [pc, #116]	; (8005244 <TIM_OC3_SetConfig+0xd0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d10d      	bne.n	80051ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	021b      	lsls	r3, r3, #8
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a14      	ldr	r2, [pc, #80]	; (8005244 <TIM_OC3_SetConfig+0xd0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d113      	bne.n	800521e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	621a      	str	r2, [r3, #32]
}
 8005238:	bf00      	nop
 800523a:	371c      	adds	r7, #28
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	40010000 	.word	0x40010000

08005248 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800527e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	021b      	lsls	r3, r3, #8
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4313      	orrs	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005292:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	031b      	lsls	r3, r3, #12
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a10      	ldr	r2, [pc, #64]	; (80052e4 <TIM_OC4_SetConfig+0x9c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d109      	bne.n	80052bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	019b      	lsls	r3, r3, #6
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	621a      	str	r2, [r3, #32]
}
 80052d6:	bf00      	nop
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40010000 	.word	0x40010000

080052e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	f023 0201 	bic.w	r2, r3, #1
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f023 030a 	bic.w	r3, r3, #10
 8005324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	621a      	str	r2, [r3, #32]
}
 800533a:	bf00      	nop
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005346:	b480      	push	{r7}
 8005348:	b087      	sub	sp, #28
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	f023 0210 	bic.w	r2, r3, #16
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005370:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	031b      	lsls	r3, r3, #12
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005382:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	4313      	orrs	r3, r2
 800538c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	621a      	str	r2, [r3, #32]
}
 800539a:	bf00      	nop
 800539c:	371c      	adds	r7, #28
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b085      	sub	sp, #20
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f043 0307 	orr.w	r3, r3, #7
 80053c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	609a      	str	r2, [r3, #8]
}
 80053d0:	bf00      	nop
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	021a      	lsls	r2, r3, #8
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	431a      	orrs	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4313      	orrs	r3, r2
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	609a      	str	r2, [r3, #8]
}
 8005410:	bf00      	nop
 8005412:	371c      	adds	r7, #28
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f003 031f 	and.w	r3, r3, #31
 800542e:	2201      	movs	r2, #1
 8005430:	fa02 f303 	lsl.w	r3, r2, r3
 8005434:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a1a      	ldr	r2, [r3, #32]
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	43db      	mvns	r3, r3
 800543e:	401a      	ands	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a1a      	ldr	r2, [r3, #32]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f003 031f 	and.w	r3, r3, #31
 800544e:	6879      	ldr	r1, [r7, #4]
 8005450:	fa01 f303 	lsl.w	r3, r1, r3
 8005454:	431a      	orrs	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	621a      	str	r2, [r3, #32]
}
 800545a:	bf00      	nop
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
	...

08005468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800547c:	2302      	movs	r3, #2
 800547e:	e050      	b.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a1c      	ldr	r2, [pc, #112]	; (8005530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d018      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054cc:	d013      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a18      	ldr	r2, [pc, #96]	; (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00e      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a16      	ldr	r2, [pc, #88]	; (8005538 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d009      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a15      	ldr	r2, [pc, #84]	; (800553c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d004      	beq.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a13      	ldr	r2, [pc, #76]	; (8005540 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d10c      	bne.n	8005510 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	4313      	orrs	r3, r2
 8005506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40010000 	.word	0x40010000
 8005534:	40000400 	.word	0x40000400
 8005538:	40000800 	.word	0x40000800
 800553c:	40000c00 	.word	0x40000c00
 8005540:	40014000 	.word	0x40014000

08005544 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e03f      	b.n	80055fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d106      	bne.n	8005598 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7fd f8e6 	bl	8002764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2224      	movs	r2, #36	; 0x24
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fe49 	bl	8006248 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	691a      	ldr	r2, [r3, #16]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	695a      	ldr	r2, [r3, #20]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68da      	ldr	r2, [r3, #12]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2220      	movs	r2, #32
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b082      	sub	sp, #8
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e021      	b.n	800565c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2224      	movs	r2, #36	; 0x24
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800562e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7fd f959 	bl	80028e8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08a      	sub	sp, #40	; 0x28
 8005668:	af02      	add	r7, sp, #8
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	603b      	str	r3, [r7, #0]
 8005670:	4613      	mov	r3, r2
 8005672:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b20      	cmp	r3, #32
 8005682:	d17c      	bne.n	800577e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <HAL_UART_Transmit+0x2c>
 800568a:	88fb      	ldrh	r3, [r7, #6]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e075      	b.n	8005780 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800569a:	2b01      	cmp	r3, #1
 800569c:	d101      	bne.n	80056a2 <HAL_UART_Transmit+0x3e>
 800569e:	2302      	movs	r3, #2
 80056a0:	e06e      	b.n	8005780 <HAL_UART_Transmit+0x11c>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2221      	movs	r2, #33	; 0x21
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056b8:	f7fd fb14 	bl	8002ce4 <HAL_GetTick>
 80056bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	88fa      	ldrh	r2, [r7, #6]
 80056c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	88fa      	ldrh	r2, [r7, #6]
 80056c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d2:	d108      	bne.n	80056e6 <HAL_UART_Transmit+0x82>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d104      	bne.n	80056e6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80056dc:	2300      	movs	r3, #0
 80056de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	61bb      	str	r3, [r7, #24]
 80056e4:	e003      	b.n	80056ee <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80056f6:	e02a      	b.n	800574e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2200      	movs	r2, #0
 8005700:	2180      	movs	r1, #128	; 0x80
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 fb5a 	bl	8005dbc <UART_WaitOnFlagUntilTimeout>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e036      	b.n	8005780 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10b      	bne.n	8005730 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	461a      	mov	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005726:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	3302      	adds	r3, #2
 800572c:	61bb      	str	r3, [r7, #24]
 800572e:	e007      	b.n	8005740 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	781a      	ldrb	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	3301      	adds	r3, #1
 800573e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b01      	subs	r3, #1
 8005748:	b29a      	uxth	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005752:	b29b      	uxth	r3, r3
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1cf      	bne.n	80056f8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	2200      	movs	r2, #0
 8005760:	2140      	movs	r1, #64	; 0x40
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 fb2a 	bl	8005dbc <UART_WaitOnFlagUntilTimeout>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e006      	b.n	8005780 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2220      	movs	r2, #32
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	e000      	b.n	8005780 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800577e:	2302      	movs	r3, #2
  }
}
 8005780:	4618      	mov	r0, r3
 8005782:	3720      	adds	r7, #32
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	4613      	mov	r3, r2
 8005794:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b20      	cmp	r3, #32
 80057a0:	d130      	bne.n	8005804 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_UART_Transmit_IT+0x26>
 80057a8:	88fb      	ldrh	r3, [r7, #6]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e029      	b.n	8005806 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_UART_Transmit_IT+0x38>
 80057bc:	2302      	movs	r3, #2
 80057be:	e022      	b.n	8005806 <HAL_UART_Transmit_IT+0x7e>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	88fa      	ldrh	r2, [r7, #6]
 80057d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	88fa      	ldrh	r2, [r7, #6]
 80057d8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2221      	movs	r2, #33	; 0x21
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057fe:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	e000      	b.n	8005806 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005804:	2302      	movs	r3, #2
  }
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	60f8      	str	r0, [r7, #12]
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	4613      	mov	r3, r2
 800581e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b20      	cmp	r3, #32
 800582a:	d11d      	bne.n	8005868 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <HAL_UART_Receive_IT+0x26>
 8005832:	88fb      	ldrh	r3, [r7, #6]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e016      	b.n	800586a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005842:	2b01      	cmp	r3, #1
 8005844:	d101      	bne.n	800584a <HAL_UART_Receive_IT+0x38>
 8005846:	2302      	movs	r3, #2
 8005848:	e00f      	b.n	800586a <HAL_UART_Receive_IT+0x58>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005858:	88fb      	ldrh	r3, [r7, #6]
 800585a:	461a      	mov	r2, r3
 800585c:	68b9      	ldr	r1, [r7, #8]
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 fb1a 	bl	8005e98 <UART_Start_Receive_IT>
 8005864:	4603      	mov	r3, r0
 8005866:	e000      	b.n	800586a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005868:	2302      	movs	r3, #2
  }
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b0ba      	sub	sp, #232	; 0xe8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800589a:	2300      	movs	r3, #0
 800589c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80058b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10f      	bne.n	80058da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <HAL_UART_IRQHandler+0x66>
 80058c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ca:	f003 0320 	and.w	r3, r3, #32
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fbfd 	bl	80060d2 <UART_Receive_IT>
      return;
 80058d8:	e256      	b.n	8005d88 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 80de 	beq.w	8005aa0 <HAL_UART_IRQHandler+0x22c>
 80058e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d106      	bne.n	80058fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 80d1 	beq.w	8005aa0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00b      	beq.n	8005922 <HAL_UART_IRQHandler+0xae>
 800590a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800590e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005912:	2b00      	cmp	r3, #0
 8005914:	d005      	beq.n	8005922 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	f043 0201 	orr.w	r2, r3, #1
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00b      	beq.n	8005946 <HAL_UART_IRQHandler+0xd2>
 800592e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d005      	beq.n	8005946 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	f043 0202 	orr.w	r2, r3, #2
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00b      	beq.n	800596a <HAL_UART_IRQHandler+0xf6>
 8005952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d005      	beq.n	800596a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	f043 0204 	orr.w	r2, r3, #4
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800596a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b00      	cmp	r3, #0
 8005974:	d011      	beq.n	800599a <HAL_UART_IRQHandler+0x126>
 8005976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800597a:	f003 0320 	and.w	r3, r3, #32
 800597e:	2b00      	cmp	r3, #0
 8005980:	d105      	bne.n	800598e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d005      	beq.n	800599a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	f043 0208 	orr.w	r2, r3, #8
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 81ed 	beq.w	8005d7e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <HAL_UART_IRQHandler+0x14e>
 80059b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b4:	f003 0320 	and.w	r3, r3, #32
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fb88 	bl	80060d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059cc:	2b40      	cmp	r3, #64	; 0x40
 80059ce:	bf0c      	ite	eq
 80059d0:	2301      	moveq	r3, #1
 80059d2:	2300      	movne	r3, #0
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	f003 0308 	and.w	r3, r3, #8
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d103      	bne.n	80059ee <HAL_UART_IRQHandler+0x17a>
 80059e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d04f      	beq.n	8005a8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 fa90 	bl	8005f14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fe:	2b40      	cmp	r3, #64	; 0x40
 8005a00:	d141      	bne.n	8005a86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3314      	adds	r3, #20
 8005a08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a10:	e853 3f00 	ldrex	r3, [r3]
 8005a14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3314      	adds	r3, #20
 8005a2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a3e:	e841 2300 	strex	r3, r2, [r1]
 8005a42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1d9      	bne.n	8005a02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d013      	beq.n	8005a7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	4a7d      	ldr	r2, [pc, #500]	; (8005c50 <HAL_UART_IRQHandler+0x3dc>)
 8005a5c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fd fb21 	bl	80030aa <HAL_DMA_Abort_IT>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d016      	beq.n	8005a9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a78:	4610      	mov	r0, r2
 8005a7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a7c:	e00e      	b.n	8005a9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7fc fb60 	bl	8002144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a84:	e00a      	b.n	8005a9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fc fb5c 	bl	8002144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a8c:	e006      	b.n	8005a9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7fc fb58 	bl	8002144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a9a:	e170      	b.n	8005d7e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9c:	bf00      	nop
    return;
 8005a9e:	e16e      	b.n	8005d7e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	f040 814a 	bne.w	8005d3e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aae:	f003 0310 	and.w	r3, r3, #16
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 8143 	beq.w	8005d3e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005abc:	f003 0310 	and.w	r3, r3, #16
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 813c 	beq.w	8005d3e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60bb      	str	r3, [r7, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	60bb      	str	r3, [r7, #8]
 8005ada:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae6:	2b40      	cmp	r3, #64	; 0x40
 8005ae8:	f040 80b4 	bne.w	8005c54 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005af8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 8140 	beq.w	8005d82 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	f080 8139 	bcs.w	8005d82 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b16:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b22:	f000 8088 	beq.w	8005c36 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b34:	e853 3f00 	ldrex	r3, [r3]
 8005b38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	330c      	adds	r3, #12
 8005b4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1d9      	bne.n	8005b26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3314      	adds	r3, #20
 8005b78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
 8005b80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b84:	f023 0301 	bic.w	r3, r3, #1
 8005b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3314      	adds	r3, #20
 8005b92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ba2:	e841 2300 	strex	r3, r2, [r1]
 8005ba6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1e1      	bne.n	8005b72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3314      	adds	r3, #20
 8005bb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bb8:	e853 3f00 	ldrex	r3, [r3]
 8005bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3314      	adds	r3, #20
 8005bce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005bd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005bd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005bd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005bda:	e841 2300 	strex	r3, r2, [r1]
 8005bde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005be0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1e3      	bne.n	8005bae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	330c      	adds	r3, #12
 8005bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bfe:	e853 3f00 	ldrex	r3, [r3]
 8005c02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c06:	f023 0310 	bic.w	r3, r3, #16
 8005c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	330c      	adds	r3, #12
 8005c14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c18:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c1a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c20:	e841 2300 	strex	r3, r2, [r1]
 8005c24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1e3      	bne.n	8005bf4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fd f9ca 	bl	8002fca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	4619      	mov	r1, r3
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f8ac 	bl	8005da4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c4c:	e099      	b.n	8005d82 <HAL_UART_IRQHandler+0x50e>
 8005c4e:	bf00      	nop
 8005c50:	08005fdb 	.word	0x08005fdb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 808b 	beq.w	8005d86 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 8086 	beq.w	8005d86 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	330c      	adds	r3, #12
 8005c80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	330c      	adds	r3, #12
 8005c9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c9e:	647a      	str	r2, [r7, #68]	; 0x44
 8005ca0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ca4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ca6:	e841 2300 	strex	r3, r2, [r1]
 8005caa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1e3      	bne.n	8005c7a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	3314      	adds	r3, #20
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	e853 3f00 	ldrex	r3, [r3]
 8005cc0:	623b      	str	r3, [r7, #32]
   return(result);
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	f023 0301 	bic.w	r3, r3, #1
 8005cc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	3314      	adds	r3, #20
 8005cd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005cd6:	633a      	str	r2, [r7, #48]	; 0x30
 8005cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cde:	e841 2300 	strex	r3, r2, [r1]
 8005ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1e3      	bne.n	8005cb2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	330c      	adds	r3, #12
 8005cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	e853 3f00 	ldrex	r3, [r3]
 8005d06:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 0310 	bic.w	r3, r3, #16
 8005d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	330c      	adds	r3, #12
 8005d18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d1c:	61fa      	str	r2, [r7, #28]
 8005d1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d20:	69b9      	ldr	r1, [r7, #24]
 8005d22:	69fa      	ldr	r2, [r7, #28]
 8005d24:	e841 2300 	strex	r3, r2, [r1]
 8005d28:	617b      	str	r3, [r7, #20]
   return(result);
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1e3      	bne.n	8005cf8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d34:	4619      	mov	r1, r3
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f834 	bl	8005da4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d3c:	e023      	b.n	8005d86 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d009      	beq.n	8005d5e <HAL_UART_IRQHandler+0x4ea>
 8005d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f953 	bl	8006002 <UART_Transmit_IT>
    return;
 8005d5c:	e014      	b.n	8005d88 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00e      	beq.n	8005d88 <HAL_UART_IRQHandler+0x514>
 8005d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d008      	beq.n	8005d88 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f993 	bl	80060a2 <UART_EndTransmit_IT>
    return;
 8005d7c:	e004      	b.n	8005d88 <HAL_UART_IRQHandler+0x514>
    return;
 8005d7e:	bf00      	nop
 8005d80:	e002      	b.n	8005d88 <HAL_UART_IRQHandler+0x514>
      return;
 8005d82:	bf00      	nop
 8005d84:	e000      	b.n	8005d88 <HAL_UART_IRQHandler+0x514>
      return;
 8005d86:	bf00      	nop
  }
}
 8005d88:	37e8      	adds	r7, #232	; 0xe8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop

08005d90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b090      	sub	sp, #64	; 0x40
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	603b      	str	r3, [r7, #0]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dcc:	e050      	b.n	8005e70 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd4:	d04c      	beq.n	8005e70 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d007      	beq.n	8005dec <UART_WaitOnFlagUntilTimeout+0x30>
 8005ddc:	f7fc ff82 	bl	8002ce4 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d241      	bcs.n	8005e70 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	330c      	adds	r3, #12
 8005df2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df6:	e853 3f00 	ldrex	r3, [r3]
 8005dfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	330c      	adds	r3, #12
 8005e0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e0c:	637a      	str	r2, [r7, #52]	; 0x34
 8005e0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e14:	e841 2300 	strex	r3, r2, [r1]
 8005e18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e5      	bne.n	8005dec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3314      	adds	r3, #20
 8005e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	e853 3f00 	ldrex	r3, [r3]
 8005e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f023 0301 	bic.w	r3, r3, #1
 8005e36:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3314      	adds	r3, #20
 8005e3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e40:	623a      	str	r2, [r7, #32]
 8005e42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e44:	69f9      	ldr	r1, [r7, #28]
 8005e46:	6a3a      	ldr	r2, [r7, #32]
 8005e48:	e841 2300 	strex	r3, r2, [r1]
 8005e4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1e5      	bne.n	8005e20 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e00f      	b.n	8005e90 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	bf0c      	ite	eq
 8005e80:	2301      	moveq	r3, #1
 8005e82:	2300      	movne	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	461a      	mov	r2, r3
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d09f      	beq.n	8005dce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3740      	adds	r7, #64	; 0x40
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	88fa      	ldrh	r2, [r7, #6]
 8005eb0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	88fa      	ldrh	r2, [r7, #6]
 8005eb6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2222      	movs	r2, #34	; 0x22
 8005ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d007      	beq.n	8005ee6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ee4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695a      	ldr	r2, [r3, #20]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f042 0201 	orr.w	r2, r2, #1
 8005ef4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f042 0220 	orr.w	r2, r2, #32
 8005f04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b095      	sub	sp, #84	; 0x54
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	330c      	adds	r3, #12
 8005f22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f26:	e853 3f00 	ldrex	r3, [r3]
 8005f2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	330c      	adds	r3, #12
 8005f3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f3c:	643a      	str	r2, [r7, #64]	; 0x40
 8005f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f44:	e841 2300 	strex	r3, r2, [r1]
 8005f48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1e5      	bne.n	8005f1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3314      	adds	r3, #20
 8005f56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	e853 3f00 	ldrex	r3, [r3]
 8005f5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	f023 0301 	bic.w	r3, r3, #1
 8005f66:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3314      	adds	r3, #20
 8005f6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f78:	e841 2300 	strex	r3, r2, [r1]
 8005f7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e5      	bne.n	8005f50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d119      	bne.n	8005fc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	330c      	adds	r3, #12
 8005f92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	e853 3f00 	ldrex	r3, [r3]
 8005f9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f023 0310 	bic.w	r3, r3, #16
 8005fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	330c      	adds	r3, #12
 8005faa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fac:	61ba      	str	r2, [r7, #24]
 8005fae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb0:	6979      	ldr	r1, [r7, #20]
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	e841 2300 	strex	r3, r2, [r1]
 8005fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1e5      	bne.n	8005f8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005fce:	bf00      	nop
 8005fd0:	3754      	adds	r7, #84	; 0x54
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b084      	sub	sp, #16
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f7fc f8a5 	bl	8002144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ffa:	bf00      	nop
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006002:	b480      	push	{r7}
 8006004:	b085      	sub	sp, #20
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b21      	cmp	r3, #33	; 0x21
 8006014:	d13e      	bne.n	8006094 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800601e:	d114      	bne.n	800604a <UART_Transmit_IT+0x48>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d110      	bne.n	800604a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	461a      	mov	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800603c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	1c9a      	adds	r2, r3, #2
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	621a      	str	r2, [r3, #32]
 8006048:	e008      	b.n	800605c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	1c59      	adds	r1, r3, #1
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	6211      	str	r1, [r2, #32]
 8006054:	781a      	ldrb	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006060:	b29b      	uxth	r3, r3
 8006062:	3b01      	subs	r3, #1
 8006064:	b29b      	uxth	r3, r3
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	4619      	mov	r1, r3
 800606a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10f      	bne.n	8006090 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800607e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68da      	ldr	r2, [r3, #12]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800608e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006090:	2300      	movs	r3, #0
 8006092:	e000      	b.n	8006096 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006094:	2302      	movs	r3, #2
  }
}
 8006096:	4618      	mov	r0, r3
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b082      	sub	sp, #8
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68da      	ldr	r2, [r3, #12]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7ff fe64 	bl	8005d90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b08c      	sub	sp, #48	; 0x30
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b22      	cmp	r3, #34	; 0x22
 80060e4:	f040 80ab 	bne.w	800623e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f0:	d117      	bne.n	8006122 <UART_Receive_IT+0x50>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d113      	bne.n	8006122 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060fa:	2300      	movs	r3, #0
 80060fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006102:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	b29b      	uxth	r3, r3
 800610c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006110:	b29a      	uxth	r2, r3
 8006112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006114:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611a:	1c9a      	adds	r2, r3, #2
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	629a      	str	r2, [r3, #40]	; 0x28
 8006120:	e026      	b.n	8006170 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006126:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006128:	2300      	movs	r3, #0
 800612a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006134:	d007      	beq.n	8006146 <UART_Receive_IT+0x74>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10a      	bne.n	8006154 <UART_Receive_IT+0x82>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	b2da      	uxtb	r2, r3
 800614e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006150:	701a      	strb	r2, [r3, #0]
 8006152:	e008      	b.n	8006166 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	b2db      	uxtb	r3, r3
 800615c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006160:	b2da      	uxtb	r2, r3
 8006162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006164:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006174:	b29b      	uxth	r3, r3
 8006176:	3b01      	subs	r3, #1
 8006178:	b29b      	uxth	r3, r3
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	4619      	mov	r1, r3
 800617e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006180:	2b00      	cmp	r3, #0
 8006182:	d15a      	bne.n	800623a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68da      	ldr	r2, [r3, #12]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0220 	bic.w	r2, r2, #32
 8006192:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	695a      	ldr	r2, [r3, #20]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0201 	bic.w	r2, r2, #1
 80061b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2220      	movs	r2, #32
 80061b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d135      	bne.n	8006230 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	330c      	adds	r3, #12
 80061d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	e853 3f00 	ldrex	r3, [r3]
 80061d8:	613b      	str	r3, [r7, #16]
   return(result);
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f023 0310 	bic.w	r3, r3, #16
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	330c      	adds	r3, #12
 80061e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ea:	623a      	str	r2, [r7, #32]
 80061ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ee:	69f9      	ldr	r1, [r7, #28]
 80061f0:	6a3a      	ldr	r2, [r7, #32]
 80061f2:	e841 2300 	strex	r3, r2, [r1]
 80061f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1e5      	bne.n	80061ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0310 	and.w	r3, r3, #16
 8006208:	2b10      	cmp	r3, #16
 800620a:	d10a      	bne.n	8006222 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800620c:	2300      	movs	r3, #0
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006226:	4619      	mov	r1, r3
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff fdbb 	bl	8005da4 <HAL_UARTEx_RxEventCallback>
 800622e:	e002      	b.n	8006236 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7fb ffdb 	bl	80021ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	e002      	b.n	8006240 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	e000      	b.n	8006240 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800623e:	2302      	movs	r3, #2
  }
}
 8006240:	4618      	mov	r0, r3
 8006242:	3730      	adds	r7, #48	; 0x30
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800624c:	b0c0      	sub	sp, #256	; 0x100
 800624e:	af00      	add	r7, sp, #0
 8006250:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006264:	68d9      	ldr	r1, [r3, #12]
 8006266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	ea40 0301 	orr.w	r3, r0, r1
 8006270:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	431a      	orrs	r2, r3
 8006280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	431a      	orrs	r2, r3
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	4313      	orrs	r3, r2
 8006290:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062a0:	f021 010c 	bic.w	r1, r1, #12
 80062a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062ae:	430b      	orrs	r3, r1
 80062b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c2:	6999      	ldr	r1, [r3, #24]
 80062c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	ea40 0301 	orr.w	r3, r0, r1
 80062ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	4b8f      	ldr	r3, [pc, #572]	; (8006514 <UART_SetConfig+0x2cc>)
 80062d8:	429a      	cmp	r2, r3
 80062da:	d005      	beq.n	80062e8 <UART_SetConfig+0xa0>
 80062dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	4b8d      	ldr	r3, [pc, #564]	; (8006518 <UART_SetConfig+0x2d0>)
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d104      	bne.n	80062f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062e8:	f7fd fde2 	bl	8003eb0 <HAL_RCC_GetPCLK2Freq>
 80062ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062f0:	e003      	b.n	80062fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062f2:	f7fd fdc9 	bl	8003e88 <HAL_RCC_GetPCLK1Freq>
 80062f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fe:	69db      	ldr	r3, [r3, #28]
 8006300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006304:	f040 810c 	bne.w	8006520 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800630c:	2200      	movs	r2, #0
 800630e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006312:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006316:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800631a:	4622      	mov	r2, r4
 800631c:	462b      	mov	r3, r5
 800631e:	1891      	adds	r1, r2, r2
 8006320:	65b9      	str	r1, [r7, #88]	; 0x58
 8006322:	415b      	adcs	r3, r3
 8006324:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006326:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800632a:	4621      	mov	r1, r4
 800632c:	eb12 0801 	adds.w	r8, r2, r1
 8006330:	4629      	mov	r1, r5
 8006332:	eb43 0901 	adc.w	r9, r3, r1
 8006336:	f04f 0200 	mov.w	r2, #0
 800633a:	f04f 0300 	mov.w	r3, #0
 800633e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006342:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006346:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800634a:	4690      	mov	r8, r2
 800634c:	4699      	mov	r9, r3
 800634e:	4623      	mov	r3, r4
 8006350:	eb18 0303 	adds.w	r3, r8, r3
 8006354:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006358:	462b      	mov	r3, r5
 800635a:	eb49 0303 	adc.w	r3, r9, r3
 800635e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800636e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006372:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006376:	460b      	mov	r3, r1
 8006378:	18db      	adds	r3, r3, r3
 800637a:	653b      	str	r3, [r7, #80]	; 0x50
 800637c:	4613      	mov	r3, r2
 800637e:	eb42 0303 	adc.w	r3, r2, r3
 8006382:	657b      	str	r3, [r7, #84]	; 0x54
 8006384:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006388:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800638c:	f7f9 ff90 	bl	80002b0 <__aeabi_uldivmod>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4b61      	ldr	r3, [pc, #388]	; (800651c <UART_SetConfig+0x2d4>)
 8006396:	fba3 2302 	umull	r2, r3, r3, r2
 800639a:	095b      	lsrs	r3, r3, #5
 800639c:	011c      	lsls	r4, r3, #4
 800639e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063a2:	2200      	movs	r2, #0
 80063a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80063ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80063b0:	4642      	mov	r2, r8
 80063b2:	464b      	mov	r3, r9
 80063b4:	1891      	adds	r1, r2, r2
 80063b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80063b8:	415b      	adcs	r3, r3
 80063ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063c0:	4641      	mov	r1, r8
 80063c2:	eb12 0a01 	adds.w	sl, r2, r1
 80063c6:	4649      	mov	r1, r9
 80063c8:	eb43 0b01 	adc.w	fp, r3, r1
 80063cc:	f04f 0200 	mov.w	r2, #0
 80063d0:	f04f 0300 	mov.w	r3, #0
 80063d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063e0:	4692      	mov	sl, r2
 80063e2:	469b      	mov	fp, r3
 80063e4:	4643      	mov	r3, r8
 80063e6:	eb1a 0303 	adds.w	r3, sl, r3
 80063ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063ee:	464b      	mov	r3, r9
 80063f0:	eb4b 0303 	adc.w	r3, fp, r3
 80063f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006404:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006408:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800640c:	460b      	mov	r3, r1
 800640e:	18db      	adds	r3, r3, r3
 8006410:	643b      	str	r3, [r7, #64]	; 0x40
 8006412:	4613      	mov	r3, r2
 8006414:	eb42 0303 	adc.w	r3, r2, r3
 8006418:	647b      	str	r3, [r7, #68]	; 0x44
 800641a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800641e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006422:	f7f9 ff45 	bl	80002b0 <__aeabi_uldivmod>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	4611      	mov	r1, r2
 800642c:	4b3b      	ldr	r3, [pc, #236]	; (800651c <UART_SetConfig+0x2d4>)
 800642e:	fba3 2301 	umull	r2, r3, r3, r1
 8006432:	095b      	lsrs	r3, r3, #5
 8006434:	2264      	movs	r2, #100	; 0x64
 8006436:	fb02 f303 	mul.w	r3, r2, r3
 800643a:	1acb      	subs	r3, r1, r3
 800643c:	00db      	lsls	r3, r3, #3
 800643e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006442:	4b36      	ldr	r3, [pc, #216]	; (800651c <UART_SetConfig+0x2d4>)
 8006444:	fba3 2302 	umull	r2, r3, r3, r2
 8006448:	095b      	lsrs	r3, r3, #5
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006450:	441c      	add	r4, r3
 8006452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006456:	2200      	movs	r2, #0
 8006458:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800645c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006460:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006464:	4642      	mov	r2, r8
 8006466:	464b      	mov	r3, r9
 8006468:	1891      	adds	r1, r2, r2
 800646a:	63b9      	str	r1, [r7, #56]	; 0x38
 800646c:	415b      	adcs	r3, r3
 800646e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006470:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006474:	4641      	mov	r1, r8
 8006476:	1851      	adds	r1, r2, r1
 8006478:	6339      	str	r1, [r7, #48]	; 0x30
 800647a:	4649      	mov	r1, r9
 800647c:	414b      	adcs	r3, r1
 800647e:	637b      	str	r3, [r7, #52]	; 0x34
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	f04f 0300 	mov.w	r3, #0
 8006488:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800648c:	4659      	mov	r1, fp
 800648e:	00cb      	lsls	r3, r1, #3
 8006490:	4651      	mov	r1, sl
 8006492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006496:	4651      	mov	r1, sl
 8006498:	00ca      	lsls	r2, r1, #3
 800649a:	4610      	mov	r0, r2
 800649c:	4619      	mov	r1, r3
 800649e:	4603      	mov	r3, r0
 80064a0:	4642      	mov	r2, r8
 80064a2:	189b      	adds	r3, r3, r2
 80064a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064a8:	464b      	mov	r3, r9
 80064aa:	460a      	mov	r2, r1
 80064ac:	eb42 0303 	adc.w	r3, r2, r3
 80064b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80064c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80064c8:	460b      	mov	r3, r1
 80064ca:	18db      	adds	r3, r3, r3
 80064cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ce:	4613      	mov	r3, r2
 80064d0:	eb42 0303 	adc.w	r3, r2, r3
 80064d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80064de:	f7f9 fee7 	bl	80002b0 <__aeabi_uldivmod>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	4b0d      	ldr	r3, [pc, #52]	; (800651c <UART_SetConfig+0x2d4>)
 80064e8:	fba3 1302 	umull	r1, r3, r3, r2
 80064ec:	095b      	lsrs	r3, r3, #5
 80064ee:	2164      	movs	r1, #100	; 0x64
 80064f0:	fb01 f303 	mul.w	r3, r1, r3
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	00db      	lsls	r3, r3, #3
 80064f8:	3332      	adds	r3, #50	; 0x32
 80064fa:	4a08      	ldr	r2, [pc, #32]	; (800651c <UART_SetConfig+0x2d4>)
 80064fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006500:	095b      	lsrs	r3, r3, #5
 8006502:	f003 0207 	and.w	r2, r3, #7
 8006506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4422      	add	r2, r4
 800650e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006510:	e106      	b.n	8006720 <UART_SetConfig+0x4d8>
 8006512:	bf00      	nop
 8006514:	40011000 	.word	0x40011000
 8006518:	40011400 	.word	0x40011400
 800651c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006524:	2200      	movs	r2, #0
 8006526:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800652a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800652e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006532:	4642      	mov	r2, r8
 8006534:	464b      	mov	r3, r9
 8006536:	1891      	adds	r1, r2, r2
 8006538:	6239      	str	r1, [r7, #32]
 800653a:	415b      	adcs	r3, r3
 800653c:	627b      	str	r3, [r7, #36]	; 0x24
 800653e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006542:	4641      	mov	r1, r8
 8006544:	1854      	adds	r4, r2, r1
 8006546:	4649      	mov	r1, r9
 8006548:	eb43 0501 	adc.w	r5, r3, r1
 800654c:	f04f 0200 	mov.w	r2, #0
 8006550:	f04f 0300 	mov.w	r3, #0
 8006554:	00eb      	lsls	r3, r5, #3
 8006556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800655a:	00e2      	lsls	r2, r4, #3
 800655c:	4614      	mov	r4, r2
 800655e:	461d      	mov	r5, r3
 8006560:	4643      	mov	r3, r8
 8006562:	18e3      	adds	r3, r4, r3
 8006564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006568:	464b      	mov	r3, r9
 800656a:	eb45 0303 	adc.w	r3, r5, r3
 800656e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800657e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006582:	f04f 0200 	mov.w	r2, #0
 8006586:	f04f 0300 	mov.w	r3, #0
 800658a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800658e:	4629      	mov	r1, r5
 8006590:	008b      	lsls	r3, r1, #2
 8006592:	4621      	mov	r1, r4
 8006594:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006598:	4621      	mov	r1, r4
 800659a:	008a      	lsls	r2, r1, #2
 800659c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80065a0:	f7f9 fe86 	bl	80002b0 <__aeabi_uldivmod>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	4b60      	ldr	r3, [pc, #384]	; (800672c <UART_SetConfig+0x4e4>)
 80065aa:	fba3 2302 	umull	r2, r3, r3, r2
 80065ae:	095b      	lsrs	r3, r3, #5
 80065b0:	011c      	lsls	r4, r3, #4
 80065b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80065c4:	4642      	mov	r2, r8
 80065c6:	464b      	mov	r3, r9
 80065c8:	1891      	adds	r1, r2, r2
 80065ca:	61b9      	str	r1, [r7, #24]
 80065cc:	415b      	adcs	r3, r3
 80065ce:	61fb      	str	r3, [r7, #28]
 80065d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065d4:	4641      	mov	r1, r8
 80065d6:	1851      	adds	r1, r2, r1
 80065d8:	6139      	str	r1, [r7, #16]
 80065da:	4649      	mov	r1, r9
 80065dc:	414b      	adcs	r3, r1
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	f04f 0300 	mov.w	r3, #0
 80065e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065ec:	4659      	mov	r1, fp
 80065ee:	00cb      	lsls	r3, r1, #3
 80065f0:	4651      	mov	r1, sl
 80065f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065f6:	4651      	mov	r1, sl
 80065f8:	00ca      	lsls	r2, r1, #3
 80065fa:	4610      	mov	r0, r2
 80065fc:	4619      	mov	r1, r3
 80065fe:	4603      	mov	r3, r0
 8006600:	4642      	mov	r2, r8
 8006602:	189b      	adds	r3, r3, r2
 8006604:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006608:	464b      	mov	r3, r9
 800660a:	460a      	mov	r2, r1
 800660c:	eb42 0303 	adc.w	r3, r2, r3
 8006610:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	67bb      	str	r3, [r7, #120]	; 0x78
 800661e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006620:	f04f 0200 	mov.w	r2, #0
 8006624:	f04f 0300 	mov.w	r3, #0
 8006628:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800662c:	4649      	mov	r1, r9
 800662e:	008b      	lsls	r3, r1, #2
 8006630:	4641      	mov	r1, r8
 8006632:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006636:	4641      	mov	r1, r8
 8006638:	008a      	lsls	r2, r1, #2
 800663a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800663e:	f7f9 fe37 	bl	80002b0 <__aeabi_uldivmod>
 8006642:	4602      	mov	r2, r0
 8006644:	460b      	mov	r3, r1
 8006646:	4611      	mov	r1, r2
 8006648:	4b38      	ldr	r3, [pc, #224]	; (800672c <UART_SetConfig+0x4e4>)
 800664a:	fba3 2301 	umull	r2, r3, r3, r1
 800664e:	095b      	lsrs	r3, r3, #5
 8006650:	2264      	movs	r2, #100	; 0x64
 8006652:	fb02 f303 	mul.w	r3, r2, r3
 8006656:	1acb      	subs	r3, r1, r3
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	3332      	adds	r3, #50	; 0x32
 800665c:	4a33      	ldr	r2, [pc, #204]	; (800672c <UART_SetConfig+0x4e4>)
 800665e:	fba2 2303 	umull	r2, r3, r2, r3
 8006662:	095b      	lsrs	r3, r3, #5
 8006664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006668:	441c      	add	r4, r3
 800666a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800666e:	2200      	movs	r2, #0
 8006670:	673b      	str	r3, [r7, #112]	; 0x70
 8006672:	677a      	str	r2, [r7, #116]	; 0x74
 8006674:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006678:	4642      	mov	r2, r8
 800667a:	464b      	mov	r3, r9
 800667c:	1891      	adds	r1, r2, r2
 800667e:	60b9      	str	r1, [r7, #8]
 8006680:	415b      	adcs	r3, r3
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006688:	4641      	mov	r1, r8
 800668a:	1851      	adds	r1, r2, r1
 800668c:	6039      	str	r1, [r7, #0]
 800668e:	4649      	mov	r1, r9
 8006690:	414b      	adcs	r3, r1
 8006692:	607b      	str	r3, [r7, #4]
 8006694:	f04f 0200 	mov.w	r2, #0
 8006698:	f04f 0300 	mov.w	r3, #0
 800669c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066a0:	4659      	mov	r1, fp
 80066a2:	00cb      	lsls	r3, r1, #3
 80066a4:	4651      	mov	r1, sl
 80066a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066aa:	4651      	mov	r1, sl
 80066ac:	00ca      	lsls	r2, r1, #3
 80066ae:	4610      	mov	r0, r2
 80066b0:	4619      	mov	r1, r3
 80066b2:	4603      	mov	r3, r0
 80066b4:	4642      	mov	r2, r8
 80066b6:	189b      	adds	r3, r3, r2
 80066b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80066ba:	464b      	mov	r3, r9
 80066bc:	460a      	mov	r2, r1
 80066be:	eb42 0303 	adc.w	r3, r2, r3
 80066c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	663b      	str	r3, [r7, #96]	; 0x60
 80066ce:	667a      	str	r2, [r7, #100]	; 0x64
 80066d0:	f04f 0200 	mov.w	r2, #0
 80066d4:	f04f 0300 	mov.w	r3, #0
 80066d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80066dc:	4649      	mov	r1, r9
 80066de:	008b      	lsls	r3, r1, #2
 80066e0:	4641      	mov	r1, r8
 80066e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066e6:	4641      	mov	r1, r8
 80066e8:	008a      	lsls	r2, r1, #2
 80066ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066ee:	f7f9 fddf 	bl	80002b0 <__aeabi_uldivmod>
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	4b0d      	ldr	r3, [pc, #52]	; (800672c <UART_SetConfig+0x4e4>)
 80066f8:	fba3 1302 	umull	r1, r3, r3, r2
 80066fc:	095b      	lsrs	r3, r3, #5
 80066fe:	2164      	movs	r1, #100	; 0x64
 8006700:	fb01 f303 	mul.w	r3, r1, r3
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	011b      	lsls	r3, r3, #4
 8006708:	3332      	adds	r3, #50	; 0x32
 800670a:	4a08      	ldr	r2, [pc, #32]	; (800672c <UART_SetConfig+0x4e4>)
 800670c:	fba2 2303 	umull	r2, r3, r2, r3
 8006710:	095b      	lsrs	r3, r3, #5
 8006712:	f003 020f 	and.w	r2, r3, #15
 8006716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4422      	add	r2, r4
 800671e:	609a      	str	r2, [r3, #8]
}
 8006720:	bf00      	nop
 8006722:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006726:	46bd      	mov	sp, r7
 8006728:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800672c:	51eb851f 	.word	0x51eb851f

08006730 <HW_RESET>:


//No se puede quedar esperano en las funciones, hay que detectar a situaci�n y salir del bucle.
//pensar que solo entra cuando recibe datos, si no vuelve a entrar queda ah� eternamentes.
void HW_RESET(struct WIFI *a)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_RESET);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6818      	ldr	r0, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	889b      	ldrh	r3, [r3, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	4619      	mov	r1, r3
 8006744:	f7fc ff3c 	bl	80035c0 <HAL_GPIO_WritePin>
    ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8006748:	2115      	movs	r1, #21
 800674a:	480b      	ldr	r0, [pc, #44]	; (8006778 <HW_RESET+0x48>)
 800674c:	f7fa ff4e 	bl	80015ec <ITM0_Write>
    HAL_Delay(2000);											//Tiempo de reset del módulo
 8006750:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006754:	f7fc fad2 	bl	8002cfc <HAL_Delay>
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
 8006758:	210e      	movs	r1, #14
 800675a:	4808      	ldr	r0, [pc, #32]	; (800677c <HW_RESET+0x4c>)
 800675c:	f7fa ff46 	bl	80015ec <ITM0_Write>
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6818      	ldr	r0, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	889b      	ldrh	r3, [r3, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	4619      	mov	r1, r3
 800676c:	f7fc ff28 	bl	80035c0 <HAL_GPIO_WritePin>
}
 8006770:	bf00      	nop
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	08010780 	.word	0x08010780
 800677c:	08010798 	.word	0x08010798

08006780 <NOP>:
void NOP(struct WIFI *a)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=0;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <MUX>:
void MUX(struct WIFI *a)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2204      	movs	r2, #4
 8006810:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <IPDef>:
void IPDef(struct WIFI *a)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2205      	movs	r2, #5
 800683c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2206      	movs	r2, #6
 8006894:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2208      	movs	r2, #8
 80068c0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2209      	movs	r2, #9
 80068ec:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2207      	movs	r2, #7
 8006918:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	a->_enviaruart=1;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	a->_pasos=0; //210416
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <Inicializar>:
void Inicializar(struct WIFI *a)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
a->_data2SND[64]='\0';			//Data a enviar por TCP
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2898 	strb.w	r2, [r3, #2200]	; 0x898
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2a98 	strb.w	r2, [r3, #2712]	; 0xa98
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_instruccion=0;				//Funcion que se desea realizar
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_ejecucion=0;				//Funcion en ejecucion	
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2af8 	strb.w	r2, [r3, #2808]	; 0xaf8
a->_ticks=0;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_ticks2=0;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug=0;					//utilizada par fines de debugging
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_str=0;				//utilizada par fines de debugging
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_pos=0;				//utilizada par fines de debugging
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
a->_debug_chrs=0;				//utilizada par fines de debugging
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_rx_ok=0;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
a->_debug_rx_no_ok=0;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
a->_debug_SEND_OK=0;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_CLOSED=0;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38
a->_debug_WF_DISCONNECT=0;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
a->_debug_FAIL=0;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
a->_debug_CONNECT=0;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_count=0;				//Cuento la catidad de ipds	
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count_old=0;			//Cuento la catidad de ipds
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count2=0;				//SEND OK para enviar datos
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count4=0;				//SEDN OK recibido directo
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count5=0;				//Cuento la catidad de ipds	
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count6=0;				//Cuento la catidad de ipds	
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count7=0;				//Cuento la catidad de ipds
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_debug_count8=0;				//Cuento la catidad de ipds
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_count9=0;				//Cuento la catidad de ipds
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count10=0;			//Cuento la catidad de ipds
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_subpaso=0;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
a->_overflowVector=512;			//Maximo tamaño del vector al procesar un +IPD
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ac6:	f8c3 2d54 	str.w	r2, [r3, #3412]	; 0xd54
}
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
	...

08006ad8 <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 8006ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ada:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006ade:	af06      	add	r7, sp, #24
 8006ae0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ae4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ae8:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8006af0:	2300      	movs	r3, #0
 8006af2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006af6:	2300      	movs	r3, #0
 8006af8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8006afc:	2300      	movs	r3, #0
 8006afe:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8006b02:	2300      	movs	r3, #0
 8006b04:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 8006b08:	2320      	movs	r3, #32
 8006b0a:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 8006b0e:	2322      	movs	r3, #34	; 0x22
 8006b10:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 8006b14:	4b7c      	ldr	r3, [pc, #496]	; (8006d08 <AT_ESP8266_ND+0x230>)
 8006b16:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 8006b1a:	4a7c      	ldr	r2, [pc, #496]	; (8006d0c <AT_ESP8266_ND+0x234>)
 8006b1c:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8006b20:	6812      	ldr	r2, [r2, #0]
 8006b22:	4611      	mov	r1, r2
 8006b24:	8019      	strh	r1, [r3, #0]
 8006b26:	3302      	adds	r3, #2
 8006b28:	0c12      	lsrs	r2, r2, #16
 8006b2a:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 8006b2c:	f642 4322 	movw	r3, #11298	; 0x2c22
 8006b30:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 8006b34:	f640 230d 	movw	r3, #2573	; 0xa0d
 8006b38:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8006b42:	2300      	movs	r3, #0
 8006b44:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 8006b48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 8006b58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7f9 fb44 	bl	80001f4 <strlen>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	461a      	mov	r2, r3
 8006b70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 8006b7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 8006b8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7f9 fb29 	bl	80001f4 <strlen>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006baa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los +IPD proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 8006bb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2206      	movs	r2, #6
 8006bc0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006bc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006bd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006be0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006be4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006bee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bf2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006bfc:	603b      	str	r3, [r7, #0]
 8006bfe:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006c02:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006c06:	6812      	ldr	r2, [r2, #0]
 8006c08:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006c0c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006c10:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006c14:	6809      	ldr	r1, [r1, #0]
 8006c16:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006c1a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006c1e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006c22:	6800      	ldr	r0, [r0, #0]
 8006c24:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006c28:	2300      	movs	r3, #0
 8006c2a:	9305      	str	r3, [sp, #20]
 8006c2c:	9004      	str	r0, [sp, #16]
 8006c2e:	9103      	str	r1, [sp, #12]
 8006c30:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006c34:	9102      	str	r1, [sp, #8]
 8006c36:	9201      	str	r2, [sp, #4]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	4633      	mov	r3, r6
 8006c3e:	4a34      	ldr	r2, [pc, #208]	; (8006d10 <AT_ESP8266_ND+0x238>)
 8006c40:	4629      	mov	r1, r5
 8006c42:	4620      	mov	r0, r4
 8006c44:	f007 fd3e 	bl	800e6c4 <FT_String_ND>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	f040 8140 	bne.w	8006ed0 <AT_ESP8266_ND+0x3f8>
		 {
			a->_n_fcomp=strlen("\r\n+IPD");
 8006c50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2206      	movs	r2, #6
 8006c5c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
			if(a->_TCP_Local_Server_EN==0)
 8006c60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d150      	bne.n	8006d14 <AT_ESP8266_ND+0x23c>
				{
					a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATA);
 8006c72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006c80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006c8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006c9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ca0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006caa:	603b      	str	r3, [r7, #0]
 8006cac:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006cb0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006cb4:	6812      	ldr	r2, [r2, #0]
 8006cb6:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006cba:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006cbe:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006cc2:	6809      	ldr	r1, [r1, #0]
 8006cc4:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006cc8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006ccc:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006cd0:	6800      	ldr	r0, [r0, #0]
 8006cd2:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006cd6:	2304      	movs	r3, #4
 8006cd8:	9305      	str	r3, [sp, #20]
 8006cda:	9004      	str	r0, [sp, #16]
 8006cdc:	9103      	str	r1, [sp, #12]
 8006cde:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ce2:	9102      	str	r1, [sp, #8]
 8006ce4:	9201      	str	r2, [sp, #4]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	4633      	mov	r3, r6
 8006cec:	4a08      	ldr	r2, [pc, #32]	; (8006d10 <AT_ESP8266_ND+0x238>)
 8006cee:	4629      	mov	r1, r5
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	f007 fce7 	bl	800e6c4 <FT_String_ND>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
 8006d06:	e04f      	b.n	8006da8 <AT_ESP8266_ND+0x2d0>
 8006d08:	00222c22 	.word	0x00222c22
 8006d0c:	08010994 	.word	0x08010994
 8006d10:	080107a8 	.word	0x080107a8
				}
				else
				{
					a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATASRVR);
 8006d14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006d22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006d30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006d3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006d4c:	603b      	str	r3, [r7, #0]
 8006d4e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d52:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d56:	6812      	ldr	r2, [r2, #0]
 8006d58:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006d5c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d60:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d64:	6809      	ldr	r1, [r1, #0]
 8006d66:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006d6a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006d6e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006d72:	6800      	ldr	r0, [r0, #0]
 8006d74:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006d78:	2305      	movs	r3, #5
 8006d7a:	9305      	str	r3, [sp, #20]
 8006d7c:	9004      	str	r0, [sp, #16]
 8006d7e:	9103      	str	r1, [sp, #12]
 8006d80:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d84:	9102      	str	r1, [sp, #8]
 8006d86:	9201      	str	r2, [sp, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	4633      	mov	r3, r6
 8006d8e:	4ad2      	ldr	r2, [pc, #840]	; (80070d8 <AT_ESP8266_ND+0x600>)
 8006d90:	4629      	mov	r1, r5
 8006d92:	4620      	mov	r0, r4
 8006d94:	f007 fc96 	bl	800e6c4 <FT_String_ND>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
				}

			if(a->_estado_data==4)
 8006da8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	d15a      	bne.n	8006e70 <AT_ESP8266_ND+0x398>
				{
					a->_estado_rcv_data=99;
 8006dba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2263      	movs	r2, #99	; 0x63
 8006dc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					a->_n_dataRCV=a->_n_tok;
 8006dca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f8d3 2cec 	ldr.w	r2, [r3, #3308]	; 0xcec
 8006dd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ddc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
					CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006de6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8006df4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006df8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f603 0198 	addw	r1, r3, #2200	; 0x898
 8006e02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f8d3 2cec 	ldr.w	r2, [r3, #3308]	; 0xcec
 8006e10:	2341      	movs	r3, #65	; 0x41
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	2300      	movs	r3, #0
 8006e16:	f008 f847 	bl	800eea8 <CopiaVector>
					CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8006e1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f503 7026 	add.w	r0, r3, #664	; 0x298
 8006e28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f603 0198 	addw	r1, r3, #2200	; 0x898
 8006e36:	2341      	movs	r3, #65	; 0x41
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	2205      	movs	r2, #5
 8006e3e:	f008 f833 	bl	800eea8 <CopiaVector>

					a->_debug_rx_ok++;
 8006e42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f8d3 3cd8 	ldr.w	r3, [r3, #3288]	; 0xcd8
 8006e50:	1c5a      	adds	r2, r3, #1
 8006e52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					a->_new_data_rcv=1;
 8006e60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
				}
			if(a->_estado_data==5)
 8006e70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8006e7e:	2b05      	cmp	r3, #5
 8006e80:	d126      	bne.n	8006ed0 <AT_ESP8266_ND+0x3f8>
				{
					a->_estado_rcv_data=55;
 8006e82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2237      	movs	r2, #55	; 0x37
 8006e8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					a->_n_dataRCV=0;
 8006e92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
					a->_debug_rx_no_ok++;
 8006ea2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ea6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	; 0xce0
 8006eb0:	1c5a      	adds	r2, r3, #1
 8006eb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f8c3 2ce0 	str.w	r2, [r3, #3296]	; 0xce0
					a->_new_data_rcv=1;
 8006ec0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ec4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
		 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8006ed0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ed4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2204      	movs	r2, #4
 8006edc:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006ee0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ee4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006eee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ef2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006efc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006f0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006f18:	603b      	str	r3, [r7, #0]
 8006f1a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f1e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f22:	6812      	ldr	r2, [r2, #0]
 8006f24:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006f28:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f2c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f30:	6809      	ldr	r1, [r1, #0]
 8006f32:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006f36:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006f3a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006f3e:	6800      	ldr	r0, [r0, #0]
 8006f40:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006f44:	2300      	movs	r3, #0
 8006f46:	9305      	str	r3, [sp, #20]
 8006f48:	9004      	str	r0, [sp, #16]
 8006f4a:	9103      	str	r1, [sp, #12]
 8006f4c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f50:	9102      	str	r1, [sp, #8]
 8006f52:	9201      	str	r2, [sp, #4]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	4633      	mov	r3, r6
 8006f5a:	4a60      	ldr	r2, [pc, #384]	; (80070dc <AT_ESP8266_ND+0x604>)
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f007 fbb0 	bl	800e6c4 <FT_String_ND>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	f040 83ab 	bne.w	80076c2 <AT_ESP8266_ND+0xbea>
	{
		AT_decode=at_ok;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND OK\r\n");
 8006f72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	220b      	movs	r2, #11
 8006f7e:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Transmision ok
 8006f82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8006f90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8006f9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fa2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8006fac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8006fba:	603b      	str	r3, [r7, #0]
 8006fbc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006fc0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006fc4:	6812      	ldr	r2, [r2, #0]
 8006fc6:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8006fca:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006fce:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006fd2:	6809      	ldr	r1, [r1, #0]
 8006fd4:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8006fd8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006fdc:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006fe0:	6800      	ldr	r0, [r0, #0]
 8006fe2:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	9305      	str	r3, [sp, #20]
 8006fea:	9004      	str	r0, [sp, #16]
 8006fec:	9103      	str	r1, [sp, #12]
 8006fee:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ff2:	9102      	str	r1, [sp, #8]
 8006ff4:	9201      	str	r2, [sp, #4]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	4633      	mov	r3, r6
 8006ffc:	4a38      	ldr	r2, [pc, #224]	; (80070e0 <AT_ESP8266_ND+0x608>)
 8006ffe:	4629      	mov	r1, r5
 8007000:	4620      	mov	r0, r4
 8007002:	f007 fb5f 	bl	800e6c4 <FT_String_ND>
 8007006:	4603      	mov	r3, r0
 8007008:	2b01      	cmp	r3, #1
 800700a:	d113      	bne.n	8007034 <AT_ESP8266_ND+0x55c>
			 {
			 AT_decode=at_tcp_enviado_ok;
 800700c:	2313      	movs	r3, #19
 800700e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 8007012:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007016:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007026:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 8007030:	f001 badf 	b.w	80085f2 <AT_ESP8266_ND+0x1b1a>
			 }
		 else
		 {
			//------------------CONFIRMO CIERRE DE  CONEXION------------------//
			a->_n_fcomp=strlen("AT+CWQAP");
 8007034:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007038:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2208      	movs	r2, #8
 8007040:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007044:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007048:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007052:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007056:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007060:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007064:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800706e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007072:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800707c:	603b      	str	r3, [r7, #0]
 800707e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007082:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007086:	6812      	ldr	r2, [r2, #0]
 8007088:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800708c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007090:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007094:	6809      	ldr	r1, [r1, #0]
 8007096:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800709a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800709e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80070a2:	6800      	ldr	r0, [r0, #0]
 80070a4:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80070a8:	2300      	movs	r3, #0
 80070aa:	9305      	str	r3, [sp, #20]
 80070ac:	9004      	str	r0, [sp, #16]
 80070ae:	9103      	str	r1, [sp, #12]
 80070b0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80070b4:	9102      	str	r1, [sp, #8]
 80070b6:	9201      	str	r2, [sp, #4]
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	4633      	mov	r3, r6
 80070be:	4a09      	ldr	r2, [pc, #36]	; (80070e4 <AT_ESP8266_ND+0x60c>)
 80070c0:	4629      	mov	r1, r5
 80070c2:	4620      	mov	r0, r4
 80070c4:	f007 fafe 	bl	800e6c4 <FT_String_ND>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d10c      	bne.n	80070e8 <AT_ESP8266_ND+0x610>
				{
				AT_decode=at_deconectar_ok;
 80070ce:	230d      	movs	r3, #13
 80070d0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80070d4:	f001 ba8d 	b.w	80085f2 <AT_ESP8266_ND+0x1b1a>
 80070d8:	080107a8 	.word	0x080107a8
 80070dc:	080107b0 	.word	0x080107b0
 80070e0:	080107b8 	.word	0x080107b8
 80070e4:	080107c4 	.word	0x080107c4
				}
			else
			{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 80070e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	220a      	movs	r2, #10
 80070f4:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 80070f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007106:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800710a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007114:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007118:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007122:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007126:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007130:	603b      	str	r3, [r7, #0]
 8007132:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007136:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800713a:	6812      	ldr	r2, [r2, #0]
 800713c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007140:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007144:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007148:	6809      	ldr	r1, [r1, #0]
 800714a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800714e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007152:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007156:	6800      	ldr	r0, [r0, #0]
 8007158:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800715c:	2300      	movs	r3, #0
 800715e:	9305      	str	r3, [sp, #20]
 8007160:	9004      	str	r0, [sp, #16]
 8007162:	9103      	str	r1, [sp, #12]
 8007164:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007168:	9102      	str	r1, [sp, #8]
 800716a:	9201      	str	r2, [sp, #4]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	4633      	mov	r3, r6
 8007172:	4aaa      	ldr	r2, [pc, #680]	; (800741c <AT_ESP8266_ND+0x944>)
 8007174:	4629      	mov	r1, r5
 8007176:	4620      	mov	r0, r4
 8007178:	f007 faa4 	bl	800e6c4 <FT_String_ND>
 800717c:	4603      	mov	r3, r0
 800717e:	2b01      	cmp	r3, #1
 8007180:	d104      	bne.n	800718c <AT_ESP8266_ND+0x6b4>
					{
						AT_decode=at_cambiar_modo_ok;
 8007182:	231c      	movs	r3, #28
 8007184:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007188:	f001 ba33 	b.w	80085f2 <AT_ESP8266_ND+0x1b1a>
					}
				else
				{
					//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
					a->_n_fcomp=strlen("no change\r\nOK\r\n");
 800718c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007190:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	220f      	movs	r2, #15
 8007198:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
						if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800719c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80071aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80071b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80071c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80071d4:	603b      	str	r3, [r7, #0]
 80071d6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80071da:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80071de:	6812      	ldr	r2, [r2, #0]
 80071e0:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80071e4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80071e8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80071ec:	6809      	ldr	r1, [r1, #0]
 80071ee:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80071f2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80071f6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80071fa:	6800      	ldr	r0, [r0, #0]
 80071fc:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007200:	2300      	movs	r3, #0
 8007202:	9305      	str	r3, [sp, #20]
 8007204:	9004      	str	r0, [sp, #16]
 8007206:	9103      	str	r1, [sp, #12]
 8007208:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800720c:	9102      	str	r1, [sp, #8]
 800720e:	9201      	str	r2, [sp, #4]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	4633      	mov	r3, r6
 8007216:	4a82      	ldr	r2, [pc, #520]	; (8007420 <AT_ESP8266_ND+0x948>)
 8007218:	4629      	mov	r1, r5
 800721a:	4620      	mov	r0, r4
 800721c:	f007 fa52 	bl	800e6c4 <FT_String_ND>
 8007220:	4603      	mov	r3, r0
 8007222:	2b01      	cmp	r3, #1
 8007224:	d104      	bne.n	8007230 <AT_ESP8266_ND+0x758>
						{
							AT_decode=at_tcp_srvr_ok_noch;
 8007226:	2317      	movs	r3, #23
 8007228:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800722c:	f001 b9e1 	b.w	80085f2 <AT_ESP8266_ND+0x1b1a>
						}
					else
					{
						//------------------OK PARA ENVIAR------------------//
						a->_n_fcomp=strlen("\r\n>");
 8007230:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007234:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2203      	movs	r2, #3
 800723c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
						if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8007240:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007244:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800724e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007252:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 800725c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007260:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800726a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800726e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007278:	603b      	str	r3, [r7, #0]
 800727a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800727e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007282:	6812      	ldr	r2, [r2, #0]
 8007284:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007288:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800728c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007290:	6809      	ldr	r1, [r1, #0]
 8007292:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007296:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800729a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800729e:	6800      	ldr	r0, [r0, #0]
 80072a0:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80072a4:	2300      	movs	r3, #0
 80072a6:	9305      	str	r3, [sp, #20]
 80072a8:	9004      	str	r0, [sp, #16]
 80072aa:	9103      	str	r1, [sp, #12]
 80072ac:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80072b0:	9102      	str	r1, [sp, #8]
 80072b2:	9201      	str	r2, [sp, #4]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	4633      	mov	r3, r6
 80072ba:	4a5a      	ldr	r2, [pc, #360]	; (8007424 <AT_ESP8266_ND+0x94c>)
 80072bc:	4629      	mov	r1, r5
 80072be:	4620      	mov	r0, r4
 80072c0:	f007 fa00 	bl	800e6c4 <FT_String_ND>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d104      	bne.n	80072d4 <AT_ESP8266_ND+0x7fc>
							{
								AT_decode=at_tcp_ok_to_send;
 80072ca:	2314      	movs	r3, #20
 80072cc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80072d0:	f001 b98f 	b.w	80085f2 <AT_ESP8266_ND+0x1b1a>
							}
						else
						{
							//------------------OK SERVIDOR------------------//
							a->_n_fcomp=strlen("AT+CIPSERVER");
 80072d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	220c      	movs	r2, #12
 80072e0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80072e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80072f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007300:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007304:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800730e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007312:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800731c:	603b      	str	r3, [r7, #0]
 800731e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007322:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007326:	6812      	ldr	r2, [r2, #0]
 8007328:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800732c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007330:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007334:	6809      	ldr	r1, [r1, #0]
 8007336:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800733a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800733e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007342:	6800      	ldr	r0, [r0, #0]
 8007344:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007348:	2300      	movs	r3, #0
 800734a:	9305      	str	r3, [sp, #20]
 800734c:	9004      	str	r0, [sp, #16]
 800734e:	9103      	str	r1, [sp, #12]
 8007350:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007354:	9102      	str	r1, [sp, #8]
 8007356:	9201      	str	r2, [sp, #4]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	4633      	mov	r3, r6
 800735e:	4a32      	ldr	r2, [pc, #200]	; (8007428 <AT_ESP8266_ND+0x950>)
 8007360:	4629      	mov	r1, r5
 8007362:	4620      	mov	r0, r4
 8007364:	f007 f9ae 	bl	800e6c4 <FT_String_ND>
 8007368:	4603      	mov	r3, r0
 800736a:	2b01      	cmp	r3, #1
 800736c:	d104      	bne.n	8007378 <AT_ESP8266_ND+0x8a0>
							{
								AT_decode=at_tcp_srvr_ok;
 800736e:	2315      	movs	r3, #21
 8007370:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007374:	f001 b93d 	b.w	80085f2 <AT_ESP8266_ND+0x1b1a>
							}
							else
							{
								//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
								a->_n_fcomp=strlen("AT+CIPCLOSE");
 8007378:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800737c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	220b      	movs	r2, #11
 8007384:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
								if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007388:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800738c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007396:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800739a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80073a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80073b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80073c0:	603b      	str	r3, [r7, #0]
 80073c2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80073c6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80073ca:	6812      	ldr	r2, [r2, #0]
 80073cc:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80073d0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80073d4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80073d8:	6809      	ldr	r1, [r1, #0]
 80073da:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80073de:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80073e2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80073e6:	6800      	ldr	r0, [r0, #0]
 80073e8:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80073ec:	2300      	movs	r3, #0
 80073ee:	9305      	str	r3, [sp, #20]
 80073f0:	9004      	str	r0, [sp, #16]
 80073f2:	9103      	str	r1, [sp, #12]
 80073f4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80073f8:	9102      	str	r1, [sp, #8]
 80073fa:	9201      	str	r2, [sp, #4]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	4633      	mov	r3, r6
 8007402:	4a0a      	ldr	r2, [pc, #40]	; (800742c <AT_ESP8266_ND+0x954>)
 8007404:	4629      	mov	r1, r5
 8007406:	4620      	mov	r0, r4
 8007408:	f007 f95c 	bl	800e6c4 <FT_String_ND>
 800740c:	4603      	mov	r3, r0
 800740e:	2b01      	cmp	r3, #1
 8007410:	d10e      	bne.n	8007430 <AT_ESP8266_ND+0x958>
									{
										AT_decode=at_tcp_closed_ok;
 8007412:	2309      	movs	r3, #9
 8007414:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007418:	f001 b8eb 	b.w	80085f2 <AT_ESP8266_ND+0x1b1a>
 800741c:	080107d0 	.word	0x080107d0
 8007420:	080107dc 	.word	0x080107dc
 8007424:	080107ec 	.word	0x080107ec
 8007428:	080107f0 	.word	0x080107f0
 800742c:	08010800 	.word	0x08010800
									}
								else
								{
									//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
									a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007430:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007434:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	220b      	movs	r2, #11
 800743c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
									if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007440:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007444:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800744e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007452:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 800745c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007460:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800746a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800746e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007478:	603b      	str	r3, [r7, #0]
 800747a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800747e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007482:	6812      	ldr	r2, [r2, #0]
 8007484:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007488:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800748c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007490:	6809      	ldr	r1, [r1, #0]
 8007492:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007496:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800749a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800749e:	6800      	ldr	r0, [r0, #0]
 80074a0:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80074a4:	2300      	movs	r3, #0
 80074a6:	9305      	str	r3, [sp, #20]
 80074a8:	9004      	str	r0, [sp, #16]
 80074aa:	9103      	str	r1, [sp, #12]
 80074ac:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80074b0:	9102      	str	r1, [sp, #8]
 80074b2:	9201      	str	r2, [sp, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	4633      	mov	r3, r6
 80074ba:	4aaf      	ldr	r2, [pc, #700]	; (8007778 <AT_ESP8266_ND+0xca0>)
 80074bc:	4629      	mov	r1, r5
 80074be:	4620      	mov	r0, r4
 80074c0:	f007 f900 	bl	800e6c4 <FT_String_ND>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d104      	bne.n	80074d4 <AT_ESP8266_ND+0x9fc>
										{
											AT_decode=at_multiple_conn_ok;
 80074ca:	2307      	movs	r3, #7
 80074cc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80074d0:	f001 b88f 	b.w	80085f2 <AT_ESP8266_ND+0x1b1a>
										}
									else
									{
										//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
										a->_n_fcomp=strlen("AT+CIPMUX=0");
 80074d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	220b      	movs	r2, #11
 80074e0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
										if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80074e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80074f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007500:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007504:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800750e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007512:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800751c:	603b      	str	r3, [r7, #0]
 800751e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007522:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007526:	6812      	ldr	r2, [r2, #0]
 8007528:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800752c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007530:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007534:	6809      	ldr	r1, [r1, #0]
 8007536:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800753a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800753e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007542:	6800      	ldr	r0, [r0, #0]
 8007544:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007548:	2300      	movs	r3, #0
 800754a:	9305      	str	r3, [sp, #20]
 800754c:	9004      	str	r0, [sp, #16]
 800754e:	9103      	str	r1, [sp, #12]
 8007550:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007554:	9102      	str	r1, [sp, #8]
 8007556:	9201      	str	r2, [sp, #4]
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	4633      	mov	r3, r6
 800755e:	4a87      	ldr	r2, [pc, #540]	; (800777c <AT_ESP8266_ND+0xca4>)
 8007560:	4629      	mov	r1, r5
 8007562:	4620      	mov	r0, r4
 8007564:	f007 f8ae 	bl	800e6c4 <FT_String_ND>
 8007568:	4603      	mov	r3, r0
 800756a:	2b01      	cmp	r3, #1
 800756c:	d104      	bne.n	8007578 <AT_ESP8266_ND+0xaa0>
											{
												AT_decode=at_no_multiple_conn_ok;
 800756e:	2308      	movs	r3, #8
 8007570:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007574:	f001 b83d 	b.w	80085f2 <AT_ESP8266_ND+0x1b1a>
											}
										else
										{
											//------------------DEFIIR IP OK------------------//
											a->_n_fcomp=strlen("AT+CIPSTA=");
 8007578:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800757c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	220a      	movs	r2, #10
 8007584:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
											if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007588:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800758c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007596:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800759a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80075a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80075b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80075c0:	603b      	str	r3, [r7, #0]
 80075c2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80075c6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80075ca:	6812      	ldr	r2, [r2, #0]
 80075cc:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80075d0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80075d4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80075d8:	6809      	ldr	r1, [r1, #0]
 80075da:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80075de:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80075e2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80075e6:	6800      	ldr	r0, [r0, #0]
 80075e8:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80075ec:	2300      	movs	r3, #0
 80075ee:	9305      	str	r3, [sp, #20]
 80075f0:	9004      	str	r0, [sp, #16]
 80075f2:	9103      	str	r1, [sp, #12]
 80075f4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80075f8:	9102      	str	r1, [sp, #8]
 80075fa:	9201      	str	r2, [sp, #4]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	4633      	mov	r3, r6
 8007602:	4a5f      	ldr	r2, [pc, #380]	; (8007780 <AT_ESP8266_ND+0xca8>)
 8007604:	4629      	mov	r1, r5
 8007606:	4620      	mov	r0, r4
 8007608:	f007 f85c 	bl	800e6c4 <FT_String_ND>
 800760c:	4603      	mov	r3, r0
 800760e:	2b01      	cmp	r3, #1
 8007610:	d104      	bne.n	800761c <AT_ESP8266_ND+0xb44>
												{
													AT_decode=at_def_ip_ok;
 8007612:	231b      	movs	r3, #27
 8007614:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007618:	f000 bfeb 	b.w	80085f2 <AT_ESP8266_ND+0x1b1a>
												}
											else
											{
										//------------------TCP CONECTADO------------------//
										a->_n_fcomp=strlen("CONNECT");
 800761c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007620:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2207      	movs	r2, #7
 8007628:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
										if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 800762c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007630:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800763a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800763e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007648:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800764c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007656:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800765a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007664:	603b      	str	r3, [r7, #0]
 8007666:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800766a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800766e:	6812      	ldr	r2, [r2, #0]
 8007670:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007674:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007678:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800767c:	6809      	ldr	r1, [r1, #0]
 800767e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007682:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007686:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800768a:	6800      	ldr	r0, [r0, #0]
 800768c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007690:	2300      	movs	r3, #0
 8007692:	9305      	str	r3, [sp, #20]
 8007694:	9004      	str	r0, [sp, #16]
 8007696:	9103      	str	r1, [sp, #12]
 8007698:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800769c:	9102      	str	r1, [sp, #8]
 800769e:	9201      	str	r2, [sp, #4]
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	4633      	mov	r3, r6
 80076a6:	4a37      	ldr	r2, [pc, #220]	; (8007784 <AT_ESP8266_ND+0xcac>)
 80076a8:	4629      	mov	r1, r5
 80076aa:	4620      	mov	r0, r4
 80076ac:	f007 f80a 	bl	800e6c4 <FT_String_ND>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	f040 879d 	bne.w	80085f2 <AT_ESP8266_ND+0x1b1a>
											{
											AT_decode=at_tcp_conectado;
 80076b8:	230f      	movs	r3, #15
 80076ba:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80076be:	f000 bf98 	b.w	80085f2 <AT_ESP8266_ND+0x1b1a>
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\nCLOSED\r\n");
 80076c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	220f      	movs	r2, #15
 80076ce:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\nCLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80076d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80076e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80076ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80076fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007700:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007710:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007714:	6812      	ldr	r2, [r2, #0]
 8007716:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800771a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800771e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007722:	6809      	ldr	r1, [r1, #0]
 8007724:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007728:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800772c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007730:	6800      	ldr	r0, [r0, #0]
 8007732:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007736:	2300      	movs	r3, #0
 8007738:	9305      	str	r3, [sp, #20]
 800773a:	9004      	str	r0, [sp, #16]
 800773c:	9103      	str	r1, [sp, #12]
 800773e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007742:	9102      	str	r1, [sp, #8]
 8007744:	9201      	str	r2, [sp, #4]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	4633      	mov	r3, r6
 800774c:	4a0e      	ldr	r2, [pc, #56]	; (8007788 <AT_ESP8266_ND+0xcb0>)
 800774e:	4629      	mov	r1, r5
 8007750:	4620      	mov	r0, r4
 8007752:	f006 ffb7 	bl	800e6c4 <FT_String_ND>
 8007756:	4603      	mov	r3, r0
 8007758:	2b01      	cmp	r3, #1
 800775a:	d117      	bne.n	800778c <AT_ESP8266_ND+0xcb4>
		{
				AT_decode=at_tcp_conn_err;
 800775c:	2306      	movs	r3, #6
 800775e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("ERROR\r\nCLOSED\r\n");
 8007762:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007766:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	220f      	movs	r2, #15
 800776e:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
 8007772:	f000 bf3e 	b.w	80085f2 <AT_ESP8266_ND+0x1b1a>
 8007776:	bf00      	nop
 8007778:	0801080c 	.word	0x0801080c
 800777c:	08010818 	.word	0x08010818
 8007780:	08010824 	.word	0x08010824
 8007784:	08010830 	.word	0x08010830
 8007788:	08010838 	.word	0x08010838
		}
		else
		{
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Intentando conectar con servidor TCP caido
 800778c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007790:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800779a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800779e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80077a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80077b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80077c4:	603b      	str	r3, [r7, #0]
 80077c6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80077ca:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80077ce:	6812      	ldr	r2, [r2, #0]
 80077d0:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80077d4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80077d8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80077dc:	6809      	ldr	r1, [r1, #0]
 80077de:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80077e2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80077e6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80077ea:	6800      	ldr	r0, [r0, #0]
 80077ec:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80077f0:	2300      	movs	r3, #0
 80077f2:	9305      	str	r3, [sp, #20]
 80077f4:	9004      	str	r0, [sp, #16]
 80077f6:	9103      	str	r1, [sp, #12]
 80077f8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80077fc:	9102      	str	r1, [sp, #8]
 80077fe:	9201      	str	r2, [sp, #4]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	4633      	mov	r3, r6
 8007806:	4aaa      	ldr	r2, [pc, #680]	; (8007ab0 <AT_ESP8266_ND+0xfd8>)
 8007808:	4629      	mov	r1, r5
 800780a:	4620      	mov	r0, r4
 800780c:	f006 ff5a 	bl	800e6c4 <FT_String_ND>
 8007810:	4603      	mov	r3, r0
 8007812:	2b01      	cmp	r3, #1
 8007814:	d104      	bne.n	8007820 <AT_ESP8266_ND+0xd48>
			{
					AT_decode=at_error;
 8007816:	2302      	movs	r3, #2
 8007818:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800781c:	f000 bee9 	b.w	80085f2 <AT_ESP8266_ND+0x1b1a>
			}
			 else
			 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 8007820:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007824:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2215      	movs	r2, #21
 800782c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8007830:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007834:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800783e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007842:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 800784c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007850:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800785a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800785e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007868:	603b      	str	r3, [r7, #0]
 800786a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800786e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007872:	6812      	ldr	r2, [r2, #0]
 8007874:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007878:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800787c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007880:	6809      	ldr	r1, [r1, #0]
 8007882:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007886:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800788a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800788e:	6800      	ldr	r0, [r0, #0]
 8007890:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007894:	2300      	movs	r3, #0
 8007896:	9305      	str	r3, [sp, #20]
 8007898:	9004      	str	r0, [sp, #16]
 800789a:	9103      	str	r1, [sp, #12]
 800789c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80078a0:	9102      	str	r1, [sp, #8]
 80078a2:	9201      	str	r2, [sp, #4]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	4633      	mov	r3, r6
 80078aa:	4a82      	ldr	r2, [pc, #520]	; (8007ab4 <AT_ESP8266_ND+0xfdc>)
 80078ac:	4629      	mov	r1, r5
 80078ae:	4620      	mov	r0, r4
 80078b0:	f006 ff08 	bl	800e6c4 <FT_String_ND>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d104      	bne.n	80078c4 <AT_ESP8266_ND+0xdec>
				{
						AT_decode=at_tcp_alrdy_cnntd_err;
 80078ba:	230e      	movs	r3, #14
 80078bc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80078c0:	f000 be97 	b.w	80085f2 <AT_ESP8266_ND+0x1b1a>
				}
				else
				{
					//------------------OK PARA ENVIAR------------------//
					a->_n_fcomp=strlen("AT+CIPSERVER");
 80078c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	220c      	movs	r2, #12
 80078d0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
					if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80078d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80078e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80078f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80078fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007902:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800790c:	603b      	str	r3, [r7, #0]
 800790e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007912:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007916:	6812      	ldr	r2, [r2, #0]
 8007918:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800791c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007920:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007924:	6809      	ldr	r1, [r1, #0]
 8007926:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800792a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800792e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007932:	6800      	ldr	r0, [r0, #0]
 8007934:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007938:	2300      	movs	r3, #0
 800793a:	9305      	str	r3, [sp, #20]
 800793c:	9004      	str	r0, [sp, #16]
 800793e:	9103      	str	r1, [sp, #12]
 8007940:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007944:	9102      	str	r1, [sp, #8]
 8007946:	9201      	str	r2, [sp, #4]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	4633      	mov	r3, r6
 800794e:	4a5a      	ldr	r2, [pc, #360]	; (8007ab8 <AT_ESP8266_ND+0xfe0>)
 8007950:	4629      	mov	r1, r5
 8007952:	4620      	mov	r0, r4
 8007954:	f006 feb6 	bl	800e6c4 <FT_String_ND>
 8007958:	4603      	mov	r3, r0
 800795a:	2b01      	cmp	r3, #1
 800795c:	d104      	bne.n	8007968 <AT_ESP8266_ND+0xe90>
					{
						AT_decode=at_tcp_srvr_err;
 800795e:	2316      	movs	r3, #22
 8007960:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007964:	f000 be45 	b.w	80085f2 <AT_ESP8266_ND+0x1b1a>
					}
					else
					{
						//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
						a->_n_fcomp=strlen("AT+CIPCLOSE");
 8007968:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800796c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	220b      	movs	r2, #11
 8007974:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
						if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8007978:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800797c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007986:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800798a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007994:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007998:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80079a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80079b0:	603b      	str	r3, [r7, #0]
 80079b2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80079b6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80079ba:	6812      	ldr	r2, [r2, #0]
 80079bc:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80079c0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80079c4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80079c8:	6809      	ldr	r1, [r1, #0]
 80079ca:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80079ce:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80079d2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80079d6:	6800      	ldr	r0, [r0, #0]
 80079d8:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80079dc:	2300      	movs	r3, #0
 80079de:	9305      	str	r3, [sp, #20]
 80079e0:	9004      	str	r0, [sp, #16]
 80079e2:	9103      	str	r1, [sp, #12]
 80079e4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80079e8:	9102      	str	r1, [sp, #8]
 80079ea:	9201      	str	r2, [sp, #4]
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	4633      	mov	r3, r6
 80079f2:	4a32      	ldr	r2, [pc, #200]	; (8007abc <AT_ESP8266_ND+0xfe4>)
 80079f4:	4629      	mov	r1, r5
 80079f6:	4620      	mov	r0, r4
 80079f8:	f006 fe64 	bl	800e6c4 <FT_String_ND>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d104      	bne.n	8007a0c <AT_ESP8266_ND+0xf34>
							{
								AT_decode=at_tcp_close_err;
 8007a02:	231a      	movs	r3, #26
 8007a04:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007a08:	f000 bdf3 	b.w	80085f2 <AT_ESP8266_ND+0x1b1a>
							}
						else
							{
							//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
							a->_n_fcomp=strlen("link is not valid");
 8007a0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2211      	movs	r2, #17
 8007a18:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007a1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007a2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007a38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007a46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007a54:	603b      	str	r3, [r7, #0]
 8007a56:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a5a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007a5e:	6812      	ldr	r2, [r2, #0]
 8007a60:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007a64:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007a68:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a6c:	6809      	ldr	r1, [r1, #0]
 8007a6e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007a72:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007a76:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007a7a:	6800      	ldr	r0, [r0, #0]
 8007a7c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007a80:	2300      	movs	r3, #0
 8007a82:	9305      	str	r3, [sp, #20]
 8007a84:	9004      	str	r0, [sp, #16]
 8007a86:	9103      	str	r1, [sp, #12]
 8007a88:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a8c:	9102      	str	r1, [sp, #8]
 8007a8e:	9201      	str	r2, [sp, #4]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	4633      	mov	r3, r6
 8007a96:	4a0a      	ldr	r2, [pc, #40]	; (8007ac0 <AT_ESP8266_ND+0xfe8>)
 8007a98:	4629      	mov	r1, r5
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	f006 fe12 	bl	800e6c4 <FT_String_ND>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d10e      	bne.n	8007ac4 <AT_ESP8266_ND+0xfec>
								{
									AT_decode=at_tcp_snd_err;
 8007aa6:	2311      	movs	r3, #17
 8007aa8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007aac:	f000 bda1 	b.w	80085f2 <AT_ESP8266_ND+0x1b1a>
 8007ab0:	08010848 	.word	0x08010848
 8007ab4:	08010850 	.word	0x08010850
 8007ab8:	080107f0 	.word	0x080107f0
 8007abc:	08010800 	.word	0x08010800
 8007ac0:	08010868 	.word	0x08010868
								}
							else
								{
								//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
								a->_n_fcomp=strlen("AT+CWMODE=");
 8007ac4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ac8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	220a      	movs	r2, #10
 8007ad0:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
								if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8007ad4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ad8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007ae2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ae6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007af0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007af4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007afe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007b0c:	603b      	str	r3, [r7, #0]
 8007b0e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b12:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b16:	6812      	ldr	r2, [r2, #0]
 8007b18:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007b1c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b20:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b24:	6809      	ldr	r1, [r1, #0]
 8007b26:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007b2a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007b2e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007b32:	6800      	ldr	r0, [r0, #0]
 8007b34:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007b38:	2300      	movs	r3, #0
 8007b3a:	9305      	str	r3, [sp, #20]
 8007b3c:	9004      	str	r0, [sp, #16]
 8007b3e:	9103      	str	r1, [sp, #12]
 8007b40:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b44:	9102      	str	r1, [sp, #8]
 8007b46:	9201      	str	r2, [sp, #4]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	4633      	mov	r3, r6
 8007b4e:	4aa8      	ldr	r2, [pc, #672]	; (8007df0 <AT_ESP8266_ND+0x1318>)
 8007b50:	4629      	mov	r1, r5
 8007b52:	4620      	mov	r0, r4
 8007b54:	f006 fdb6 	bl	800e6c4 <FT_String_ND>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d104      	bne.n	8007b68 <AT_ESP8266_ND+0x1090>
									{
										AT_decode=at_cambiar_modo_err;
 8007b5e:	231d      	movs	r3, #29
 8007b60:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007b64:	f000 bd45 	b.w	80085f2 <AT_ESP8266_ND+0x1b1a>
									}
								else
								{
									//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
									a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007b68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	220b      	movs	r2, #11
 8007b74:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
									if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007b78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007b86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007b94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007ba2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ba6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007bb0:	603b      	str	r3, [r7, #0]
 8007bb2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007bb6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007bba:	6812      	ldr	r2, [r2, #0]
 8007bbc:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007bc0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007bc4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007bc8:	6809      	ldr	r1, [r1, #0]
 8007bca:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007bce:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007bd2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007bd6:	6800      	ldr	r0, [r0, #0]
 8007bd8:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007bdc:	2300      	movs	r3, #0
 8007bde:	9305      	str	r3, [sp, #20]
 8007be0:	9004      	str	r0, [sp, #16]
 8007be2:	9103      	str	r1, [sp, #12]
 8007be4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007be8:	9102      	str	r1, [sp, #8]
 8007bea:	9201      	str	r2, [sp, #4]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	4633      	mov	r3, r6
 8007bf2:	4a80      	ldr	r2, [pc, #512]	; (8007df4 <AT_ESP8266_ND+0x131c>)
 8007bf4:	4629      	mov	r1, r5
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f006 fd64 	bl	800e6c4 <FT_String_ND>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d104      	bne.n	8007c0c <AT_ESP8266_ND+0x1134>
										{
											AT_decode=at_multiple_conn_err;
 8007c02:	231e      	movs	r3, #30
 8007c04:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007c08:	f000 bcf3 	b.w	80085f2 <AT_ESP8266_ND+0x1b1a>
										}
									else
									{
										//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
										a->_n_fcomp=strlen("AT+CIPMUX=0");
 8007c0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	220b      	movs	r2, #11
 8007c18:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
										if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007c1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007c2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007c38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007c46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007c54:	603b      	str	r3, [r7, #0]
 8007c56:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c5a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007c5e:	6812      	ldr	r2, [r2, #0]
 8007c60:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007c64:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c68:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c6c:	6809      	ldr	r1, [r1, #0]
 8007c6e:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007c72:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007c76:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007c7a:	6800      	ldr	r0, [r0, #0]
 8007c7c:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007c80:	2300      	movs	r3, #0
 8007c82:	9305      	str	r3, [sp, #20]
 8007c84:	9004      	str	r0, [sp, #16]
 8007c86:	9103      	str	r1, [sp, #12]
 8007c88:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007c8c:	9102      	str	r1, [sp, #8]
 8007c8e:	9201      	str	r2, [sp, #4]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	4633      	mov	r3, r6
 8007c96:	4a58      	ldr	r2, [pc, #352]	; (8007df8 <AT_ESP8266_ND+0x1320>)
 8007c98:	4629      	mov	r1, r5
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f006 fd12 	bl	800e6c4 <FT_String_ND>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	f000 84a5 	beq.w	80085f2 <AT_ESP8266_ND+0x1b1a>
												//AT_decode=at_no_multiple_conn_err;
											}
										else
										{
											//------------------ERROR AL CONECTAR WIFI------------------//
											a->_n_fcomp=strlen("AT+CWJAP");
 8007ca8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2208      	movs	r2, #8
 8007cb4:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
											if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007cb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007cc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007cd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007ce2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ce6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007cf0:	603b      	str	r3, [r7, #0]
 8007cf2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007cf6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007cfa:	6812      	ldr	r2, [r2, #0]
 8007cfc:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007d00:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007d04:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007d08:	6809      	ldr	r1, [r1, #0]
 8007d0a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007d0e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007d12:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007d16:	6800      	ldr	r0, [r0, #0]
 8007d18:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	9305      	str	r3, [sp, #20]
 8007d20:	9004      	str	r0, [sp, #16]
 8007d22:	9103      	str	r1, [sp, #12]
 8007d24:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007d28:	9102      	str	r1, [sp, #8]
 8007d2a:	9201      	str	r2, [sp, #4]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	4633      	mov	r3, r6
 8007d32:	4a32      	ldr	r2, [pc, #200]	; (8007dfc <AT_ESP8266_ND+0x1324>)
 8007d34:	4629      	mov	r1, r5
 8007d36:	4620      	mov	r0, r4
 8007d38:	f006 fcc4 	bl	800e6c4 <FT_String_ND>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d104      	bne.n	8007d4c <AT_ESP8266_ND+0x1274>
												{
													AT_decode=at_conn_wifi_err;
 8007d42:	2320      	movs	r3, #32
 8007d44:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007d48:	f000 bc53 	b.w	80085f2 <AT_ESP8266_ND+0x1b1a>
												}
											else
											{
												//------------------ERROR AL CONECTAR WIFI------------------//
												a->_n_fcomp=strlen("AT+CIPSTA=");
 8007d4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	220a      	movs	r2, #10
 8007d58:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
												if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007d5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007d6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007d78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007d86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007d94:	603b      	str	r3, [r7, #0]
 8007d96:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d9a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d9e:	6812      	ldr	r2, [r2, #0]
 8007da0:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007da4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007da8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007dac:	6809      	ldr	r1, [r1, #0]
 8007dae:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007db2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007db6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007dba:	6800      	ldr	r0, [r0, #0]
 8007dbc:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	9305      	str	r3, [sp, #20]
 8007dc4:	9004      	str	r0, [sp, #16]
 8007dc6:	9103      	str	r1, [sp, #12]
 8007dc8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007dcc:	9102      	str	r1, [sp, #8]
 8007dce:	9201      	str	r2, [sp, #4]
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	4633      	mov	r3, r6
 8007dd6:	4a0a      	ldr	r2, [pc, #40]	; (8007e00 <AT_ESP8266_ND+0x1328>)
 8007dd8:	4629      	mov	r1, r5
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f006 fc72 	bl	800e6c4 <FT_String_ND>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d10e      	bne.n	8007e04 <AT_ESP8266_ND+0x132c>
													{
														AT_decode=at_def_ip_err;
 8007de6:	2321      	movs	r3, #33	; 0x21
 8007de8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007dec:	f000 bc01 	b.w	80085f2 <AT_ESP8266_ND+0x1b1a>
 8007df0:	080107d0 	.word	0x080107d0
 8007df4:	0801080c 	.word	0x0801080c
 8007df8:	08010818 	.word	0x08010818
 8007dfc:	0801087c 	.word	0x0801087c
 8007e00:	08010824 	.word	0x08010824
													}
												else
												{
													//------------------ERROR AL CONECTAR WIFI------------------//
													a->_n_fcomp=strlen("no ip");
 8007e04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2205      	movs	r2, #5
 8007e10:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
													if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007e14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007e22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007e30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007e3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007e4c:	603b      	str	r3, [r7, #0]
 8007e4e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007e52:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007e56:	6812      	ldr	r2, [r2, #0]
 8007e58:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007e5c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007e60:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007e64:	6809      	ldr	r1, [r1, #0]
 8007e66:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007e6a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007e6e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007e72:	6800      	ldr	r0, [r0, #0]
 8007e74:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007e78:	2300      	movs	r3, #0
 8007e7a:	9305      	str	r3, [sp, #20]
 8007e7c:	9004      	str	r0, [sp, #16]
 8007e7e:	9103      	str	r1, [sp, #12]
 8007e80:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007e84:	9102      	str	r1, [sp, #8]
 8007e86:	9201      	str	r2, [sp, #4]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	4633      	mov	r3, r6
 8007e8e:	4abe      	ldr	r2, [pc, #760]	; (8008188 <AT_ESP8266_ND+0x16b0>)
 8007e90:	4629      	mov	r1, r5
 8007e92:	4620      	mov	r0, r4
 8007e94:	f006 fc16 	bl	800e6c4 <FT_String_ND>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d103      	bne.n	8007ea6 <AT_ESP8266_ND+0x13ce>
														{
															AT_decode=at_tcp_noip_err;  //PROCESAR
 8007e9e:	2322      	movs	r3, #34	; 0x22
 8007ea0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007ea4:	e3a5      	b.n	80085f2 <AT_ESP8266_ND+0x1b1a>
													{

														 //--------------------------------------------------------------------------------------------------------------//
														 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
														 //--------------------------------------------------------------------------------------------------------------//
														a->_n_fcomp=strlen("WIFI DISCONNECT");
 8007ea6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eaa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	220f      	movs	r2, #15
 8007eb2:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
														if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 8007eb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007ec4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ec8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007ed2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ed6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007ee0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ee4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007ef4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ef8:	6812      	ldr	r2, [r2, #0]
 8007efa:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007efe:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007f02:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007f06:	6809      	ldr	r1, [r1, #0]
 8007f08:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007f0c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007f10:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007f14:	6800      	ldr	r0, [r0, #0]
 8007f16:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	9305      	str	r3, [sp, #20]
 8007f1e:	9004      	str	r0, [sp, #16]
 8007f20:	9103      	str	r1, [sp, #12]
 8007f22:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007f26:	9102      	str	r1, [sp, #8]
 8007f28:	9201      	str	r2, [sp, #4]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	4633      	mov	r3, r6
 8007f30:	4a96      	ldr	r2, [pc, #600]	; (800818c <AT_ESP8266_ND+0x16b4>)
 8007f32:	4629      	mov	r1, r5
 8007f34:	4620      	mov	r0, r4
 8007f36:	f006 fbc5 	bl	800e6c4 <FT_String_ND>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d112      	bne.n	8007f66 <AT_ESP8266_ND+0x148e>
															{
																 AT_decode=at_wifi_disconnect;
 8007f40:	230a      	movs	r3, #10
 8007f42:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
																 a->_debug_WF_DISCONNECT++;
 8007f46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
 8007f64:	e345      	b.n	80085f2 <AT_ESP8266_ND+0x1b1a>
															}
														else
														{
															//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
															a->_n_fcomp=strlen(",CLOSED\r\n");
 8007f66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2209      	movs	r2, #9
 8007f72:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
															if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007f76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8007f84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8007f92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8007fa0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fa4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8007fae:	603b      	str	r3, [r7, #0]
 8007fb0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007fb4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007fb8:	6812      	ldr	r2, [r2, #0]
 8007fba:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8007fbe:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007fc2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007fc6:	6809      	ldr	r1, [r1, #0]
 8007fc8:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 8007fcc:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007fd0:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007fd4:	6800      	ldr	r0, [r0, #0]
 8007fd6:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 8007fda:	2300      	movs	r3, #0
 8007fdc:	9305      	str	r3, [sp, #20]
 8007fde:	9004      	str	r0, [sp, #16]
 8007fe0:	9103      	str	r1, [sp, #12]
 8007fe2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007fe6:	9102      	str	r1, [sp, #8]
 8007fe8:	9201      	str	r2, [sp, #4]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	4633      	mov	r3, r6
 8007ff0:	4a67      	ldr	r2, [pc, #412]	; (8008190 <AT_ESP8266_ND+0x16b8>)
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f006 fb65 	bl	800e6c4 <FT_String_ND>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d112      	bne.n	8008026 <AT_ESP8266_ND+0x154e>
																{
																	AT_decode=at_tcp_client_desc;
 8008000:	2319      	movs	r3, #25
 8008002:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
																	a->_debug_CLOSED++;
 8008006:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800800a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
 8008014:	1c5a      	adds	r2, r3, #1
 8008016:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800801a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38
 8008024:	e2e5      	b.n	80085f2 <AT_ESP8266_ND+0x1b1a>
																//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
																// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
																// primero ve el SEND OKse queda en el estado 705 por error al     //
																//  enviar														  //
																//-----------------------------------------------------------------//
																a->_n_fcomp=strlen("CLOSED\r\n");
 8008026:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800802a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2208      	movs	r2, #8
 8008032:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8008036:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800803a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8008044:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008048:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8008052:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008056:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8008060:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008064:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800806e:	603b      	str	r3, [r7, #0]
 8008070:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008074:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008078:	6812      	ldr	r2, [r2, #0]
 800807a:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800807e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008082:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008086:	6809      	ldr	r1, [r1, #0]
 8008088:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800808c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008090:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008094:	6800      	ldr	r0, [r0, #0]
 8008096:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800809a:	2300      	movs	r3, #0
 800809c:	9305      	str	r3, [sp, #20]
 800809e:	9004      	str	r0, [sp, #16]
 80080a0:	9103      	str	r1, [sp, #12]
 80080a2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80080a6:	9102      	str	r1, [sp, #8]
 80080a8:	9201      	str	r2, [sp, #4]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	4633      	mov	r3, r6
 80080b0:	4a38      	ldr	r2, [pc, #224]	; (8008194 <AT_ESP8266_ND+0x16bc>)
 80080b2:	4629      	mov	r1, r5
 80080b4:	4620      	mov	r0, r4
 80080b6:	f006 fb05 	bl	800e6c4 <FT_String_ND>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d103      	bne.n	80080c8 <AT_ESP8266_ND+0x15f0>
																	{
																		AT_decode=at_tcp_desconectado;
 80080c0:	2310      	movs	r3, #16
 80080c2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80080c6:	e294      	b.n	80085f2 <AT_ESP8266_ND+0x1b1a>
																	}
																else
																{

																	//------------------ENVIADO = RECIBIDO ------------------//
																	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 80080c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80080d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80080e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f503 6693 	add.w	r6, r3, #1176	; 0x498
 80080f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f603 4ce8 	addw	ip, r3, #3304	; 0xce8
 8008100:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008104:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800810e:	603b      	str	r3, [r7, #0]
 8008110:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008114:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008118:	6812      	ldr	r2, [r2, #0]
 800811a:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 800811e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008122:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008126:	6809      	ldr	r1, [r1, #0]
 8008128:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800812c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008130:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008134:	6800      	ldr	r0, [r0, #0]
 8008136:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800813a:	2300      	movs	r3, #0
 800813c:	9305      	str	r3, [sp, #20]
 800813e:	9004      	str	r0, [sp, #16]
 8008140:	9103      	str	r1, [sp, #12]
 8008142:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008146:	9102      	str	r1, [sp, #8]
 8008148:	9201      	str	r2, [sp, #4]
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	4663      	mov	r3, ip
 8008150:	4632      	mov	r2, r6
 8008152:	4629      	mov	r1, r5
 8008154:	4620      	mov	r0, r4
 8008156:	f006 fab5 	bl	800e6c4 <FT_String_ND>
 800815a:	4603      	mov	r3, r0
 800815c:	2b01      	cmp	r3, #1
 800815e:	d11b      	bne.n	8008198 <AT_ESP8266_ND+0x16c0>
																		 {
																			if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8008160:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008164:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f893 3698 	ldrb.w	r3, [r3, #1688]	; 0x698
 800816e:	2b00      	cmp	r3, #0
 8008170:	f000 823f 	beq.w	80085f2 <AT_ESP8266_ND+0x1b1a>
																				{
																				//AT_decode=10;
																				a->_n_orig=0;
 8008174:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008178:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2200      	movs	r2, #0
 8008180:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
 8008184:	e235      	b.n	80085f2 <AT_ESP8266_ND+0x1b1a>
 8008186:	bf00      	nop
 8008188:	08010888 	.word	0x08010888
 800818c:	08010890 	.word	0x08010890
 8008190:	080108a0 	.word	0x080108a0
 8008194:	080108ac 	.word	0x080108ac
																				}
																			}
																	else
																	{
																		//------------------PAQUETE ENVIADO EN FALLA--------------//
																		a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8008198:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800819c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	220d      	movs	r2, #13
 80081a4:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 80081a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80081b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80081c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80081d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80081e0:	603b      	str	r3, [r7, #0]
 80081e2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80081e6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80081ea:	6812      	ldr	r2, [r2, #0]
 80081ec:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80081f0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80081f4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80081f8:	6809      	ldr	r1, [r1, #0]
 80081fa:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80081fe:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008202:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008206:	6800      	ldr	r0, [r0, #0]
 8008208:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800820c:	2300      	movs	r3, #0
 800820e:	9305      	str	r3, [sp, #20]
 8008210:	9004      	str	r0, [sp, #16]
 8008212:	9103      	str	r1, [sp, #12]
 8008214:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008218:	9102      	str	r1, [sp, #8]
 800821a:	9201      	str	r2, [sp, #4]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	4633      	mov	r3, r6
 8008222:	4ac6      	ldr	r2, [pc, #792]	; (800853c <AT_ESP8266_ND+0x1a64>)
 8008224:	4629      	mov	r1, r5
 8008226:	4620      	mov	r0, r4
 8008228:	f006 fa4c 	bl	800e6c4 <FT_String_ND>
 800822c:	4603      	mov	r3, r0
 800822e:	2b01      	cmp	r3, #1
 8008230:	d112      	bne.n	8008258 <AT_ESP8266_ND+0x1780>
																			{
																			 AT_decode=at_tcp_enviado_error;
 8008232:	2312      	movs	r3, #18
 8008234:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
																			 a->_debug_FAIL++;
 8008238:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800823c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800824c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
 8008256:	e1cc      	b.n	80085f2 <AT_ESP8266_ND+0x1b1a>



																			//------------------OBTENCI�N DE IP------------------//
																			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
																			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8008258:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800825c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	220d      	movs	r2, #13
 8008264:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Obtiene IP
 8008268:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800826c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8008276:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800827a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8008284:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008288:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8008292:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008296:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80082a0:	603b      	str	r3, [r7, #0]
 80082a2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80082a6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80082aa:	6812      	ldr	r2, [r2, #0]
 80082ac:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80082b0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80082b4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80082b8:	6809      	ldr	r1, [r1, #0]
 80082ba:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80082be:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80082c2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80082c6:	6800      	ldr	r0, [r0, #0]
 80082c8:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80082cc:	2300      	movs	r3, #0
 80082ce:	9305      	str	r3, [sp, #20]
 80082d0:	9004      	str	r0, [sp, #16]
 80082d2:	9103      	str	r1, [sp, #12]
 80082d4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80082d8:	9102      	str	r1, [sp, #8]
 80082da:	9201      	str	r2, [sp, #4]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	4633      	mov	r3, r6
 80082e2:	4a97      	ldr	r2, [pc, #604]	; (8008540 <AT_ESP8266_ND+0x1a68>)
 80082e4:	4629      	mov	r1, r5
 80082e6:	4620      	mov	r0, r4
 80082e8:	f006 f9ec 	bl	800e6c4 <FT_String_ND>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d112      	bne.n	8008318 <AT_ESP8266_ND+0x1840>
																				{
																					a->_debug_WF_GOTIP++;
 80082f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8008300:	1c5a      	adds	r2, r3, #1
 8008302:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008306:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f8c3 2d4c 	str.w	r2, [r3, #3404]	; 0xd4c
																					AT_decode=at_wifi_gotip;
 8008310:	230c      	movs	r3, #12
 8008312:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8008316:	e16c      	b.n	80085f2 <AT_ESP8266_ND+0x1b1a>
																				}
																			else
																			{
																					//------------------WIFI CONECTADA------------------//
																				a->_n_fcomp=strlen("WIFI CONNECTED");
 8008318:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800831c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	220e      	movs	r2, #14
 8008324:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//WIFI CONECTADA
 8008328:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800832c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 8008336:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800833a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8008344:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008348:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8008352:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008356:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8008360:	603b      	str	r3, [r7, #0]
 8008362:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008366:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800836a:	6812      	ldr	r2, [r2, #0]
 800836c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8008370:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008374:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008378:	6809      	ldr	r1, [r1, #0]
 800837a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800837e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008382:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008386:	6800      	ldr	r0, [r0, #0]
 8008388:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800838c:	2300      	movs	r3, #0
 800838e:	9305      	str	r3, [sp, #20]
 8008390:	9004      	str	r0, [sp, #16]
 8008392:	9103      	str	r1, [sp, #12]
 8008394:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008398:	9102      	str	r1, [sp, #8]
 800839a:	9201      	str	r2, [sp, #4]
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	4633      	mov	r3, r6
 80083a2:	4a68      	ldr	r2, [pc, #416]	; (8008544 <AT_ESP8266_ND+0x1a6c>)
 80083a4:	4629      	mov	r1, r5
 80083a6:	4620      	mov	r0, r4
 80083a8:	f006 f98c 	bl	800e6c4 <FT_String_ND>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d112      	bne.n	80083d8 <AT_ESP8266_ND+0x1900>
																					{
																						a->_debug_WF_CNNCTD++;
 80083b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 80083c0:	1c5a      	adds	r2, r3, #1
 80083c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
																							 AT_decode=at_wifi_connected;
 80083d0:	230b      	movs	r3, #11
 80083d2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80083d6:	e10c      	b.n	80085f2 <AT_ESP8266_ND+0x1b1a>
																					}
																				else
																				{

																					//------------------CLIENTE TCP CONECTADO------------------//
																					a->_n_fcomp=strlen(",CONNECT\r\n");
 80083d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	220a      	movs	r2, #10
 80083e4:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																					if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 80083e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80083f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 8008404:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008408:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 8008412:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008416:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8008420:	603b      	str	r3, [r7, #0]
 8008422:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008426:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800842a:	6812      	ldr	r2, [r2, #0]
 800842c:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 8008430:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008434:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008438:	6809      	ldr	r1, [r1, #0]
 800843a:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 800843e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008442:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008446:	6800      	ldr	r0, [r0, #0]
 8008448:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800844c:	2300      	movs	r3, #0
 800844e:	9305      	str	r3, [sp, #20]
 8008450:	9004      	str	r0, [sp, #16]
 8008452:	9103      	str	r1, [sp, #12]
 8008454:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008458:	9102      	str	r1, [sp, #8]
 800845a:	9201      	str	r2, [sp, #4]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	4633      	mov	r3, r6
 8008462:	4a39      	ldr	r2, [pc, #228]	; (8008548 <AT_ESP8266_ND+0x1a70>)
 8008464:	4629      	mov	r1, r5
 8008466:	4620      	mov	r0, r4
 8008468:	f006 f92c 	bl	800e6c4 <FT_String_ND>
 800846c:	4603      	mov	r3, r0
 800846e:	2b01      	cmp	r3, #1
 8008470:	d112      	bne.n	8008498 <AT_ESP8266_ND+0x19c0>
																						  {
																							  AT_decode=at_tcp_client_conectado;
 8008472:	2318      	movs	r3, #24
 8008474:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
																							  a->_debug_CONNECT++;
 8008478:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800847c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 8008486:	1c5a      	adds	r2, r3, #1
 8008488:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800848c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 8008496:	e0ac      	b.n	80085f2 <AT_ESP8266_ND+0x1b1a>
																						  }
																					else
																					{

																						//------------------FALLA------------------//
																						a->_n_fcomp=strlen("\r\nFAIL\r\n");
 8008498:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800849c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2208      	movs	r2, #8
 80084a4:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 80084a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 80084b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 80084c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 80084d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80084e0:	603b      	str	r3, [r7, #0]
 80084e2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80084e6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80084ea:	6812      	ldr	r2, [r2, #0]
 80084ec:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80084f0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80084f4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80084f8:	6809      	ldr	r1, [r1, #0]
 80084fa:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80084fe:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008502:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008506:	6800      	ldr	r0, [r0, #0]
 8008508:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 800850c:	2300      	movs	r3, #0
 800850e:	9305      	str	r3, [sp, #20]
 8008510:	9004      	str	r0, [sp, #16]
 8008512:	9103      	str	r1, [sp, #12]
 8008514:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008518:	9102      	str	r1, [sp, #8]
 800851a:	9201      	str	r2, [sp, #4]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	4633      	mov	r3, r6
 8008522:	4a0a      	ldr	r2, [pc, #40]	; (800854c <AT_ESP8266_ND+0x1a74>)
 8008524:	4629      	mov	r1, r5
 8008526:	4620      	mov	r0, r4
 8008528:	f006 f8cc 	bl	800e6c4 <FT_String_ND>
 800852c:	4603      	mov	r3, r0
 800852e:	2b01      	cmp	r3, #1
 8008530:	d10e      	bne.n	8008550 <AT_ESP8266_ND+0x1a78>
																							{
																								AT_decode=at_fail;
 8008532:	2303      	movs	r3, #3
 8008534:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8008538:	e05b      	b.n	80085f2 <AT_ESP8266_ND+0x1b1a>
 800853a:	bf00      	nop
 800853c:	080108b8 	.word	0x080108b8
 8008540:	080108c8 	.word	0x080108c8
 8008544:	080108d8 	.word	0x080108d8
 8008548:	080108e8 	.word	0x080108e8
 800854c:	080108f4 	.word	0x080108f4
																							}
																						else
																						{
																						//------------------busy processing------------------//
																							a->_n_fcomp=strlen("busy p...");
 8008550:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008554:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2209      	movs	r2, #9
 800855c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
																							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8008560:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008564:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f503 64d3 	add.w	r4, r3, #1688	; 0x698
 800856e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008572:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f603 45e4 	addw	r5, r3, #3300	; 0xce4
 800857c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008580:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f603 46f8 	addw	r6, r3, #3320	; 0xcf8
 800858a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800858e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8008598:	603b      	str	r3, [r7, #0]
 800859a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800859e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80085a2:	6812      	ldr	r2, [r2, #0]
 80085a4:	f602 42ec 	addw	r2, r2, #3308	; 0xcec
 80085a8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80085ac:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80085b0:	6809      	ldr	r1, [r1, #0]
 80085b2:	f601 2198 	addw	r1, r1, #2712	; 0xa98
 80085b6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80085ba:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80085be:	6800      	ldr	r0, [r0, #0]
 80085c0:	f8d0 0d54 	ldr.w	r0, [r0, #3412]	; 0xd54
 80085c4:	2300      	movs	r3, #0
 80085c6:	9305      	str	r3, [sp, #20]
 80085c8:	9004      	str	r0, [sp, #16]
 80085ca:	9103      	str	r1, [sp, #12]
 80085cc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80085d0:	9102      	str	r1, [sp, #8]
 80085d2:	9201      	str	r2, [sp, #4]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	4633      	mov	r3, r6
 80085da:	4a78      	ldr	r2, [pc, #480]	; (80087bc <AT_ESP8266_ND+0x1ce4>)
 80085dc:	4629      	mov	r1, r5
 80085de:	4620      	mov	r0, r4
 80085e0:	f006 f870 	bl	800e6c4 <FT_String_ND>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d103      	bne.n	80085f2 <AT_ESP8266_ND+0x1b1a>
																								{
																								AT_decode=at_busy_p;
 80085ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80085ee:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}
}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 80085f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8008600:	3b01      	subs	r3, #1
 8008602:	2b08      	cmp	r3, #8
 8008604:	f201 84db 	bhi.w	8009fbe <AT_ESP8266_ND+0x34e6>
 8008608:	a201      	add	r2, pc, #4	; (adr r2, 8008610 <AT_ESP8266_ND+0x1b38>)
 800860a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860e:	bf00      	nop
 8008610:	08008635 	.word	0x08008635
 8008614:	080087c5 	.word	0x080087c5
 8008618:	08008a47 	.word	0x08008a47
 800861c:	08008bc5 	.word	0x08008bc5
 8008620:	08008d9d 	.word	0x08008d9d
 8008624:	08009071 	.word	0x08009071
 8008628:	08009331 	.word	0x08009331
 800862c:	08009861 	.word	0x08009861
 8008630:	08009a37 	.word	0x08009a37
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008634:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008638:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2200      	movs	r2, #0
 8008640:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8008644:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008648:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008652:	2b01      	cmp	r3, #1
 8008654:	d14f      	bne.n	80086f6 <AT_ESP8266_ND+0x1c1e>
 8008656:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800865a:	2b01      	cmp	r3, #1
 800865c:	d04b      	beq.n	80086f6 <AT_ESP8266_ND+0x1c1e>
									   &&(AT_decode!=at_error)
 800865e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008662:	2b02      	cmp	r3, #2
 8008664:	d047      	beq.n	80086f6 <AT_ESP8266_ND+0x1c1e>
									   &&(AT_decode!=at_restart)
 8008666:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800866a:	2b04      	cmp	r3, #4
 800866c:	d043      	beq.n	80086f6 <AT_ESP8266_ND+0x1c1e>
									   &&(AT_decode!=at_tcp_enviado_ok))
 800866e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008672:	2b13      	cmp	r3, #19
 8008674:	d03f      	beq.n	80086f6 <AT_ESP8266_ND+0x1c1e>
						{
						a->_pasos=0;
 8008676:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800867a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2200      	movs	r2, #0
 8008682:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8008686:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800868a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2201      	movs	r2, #1
 8008692:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 8008696:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800869a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80086a4:	4620      	mov	r0, r4
 80086a6:	f7f7 fda5 	bl	80001f4 <strlen>
 80086aa:	4603      	mov	r3, r0
 80086ac:	4423      	add	r3, r4
 80086ae:	4a44      	ldr	r2, [pc, #272]	; (80087c0 <AT_ESP8266_ND+0x1ce8>)
 80086b0:	461c      	mov	r4, r3
 80086b2:	4613      	mov	r3, r2
 80086b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80086b6:	6020      	str	r0, [r4, #0]
 80086b8:	6061      	str	r1, [r4, #4]
 80086ba:	60a2      	str	r2, [r4, #8]
 80086bc:	881b      	ldrh	r3, [r3, #0]
 80086be:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 80086c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7f7 fd90 	bl	80001f4 <strlen>
 80086d4:	4603      	mov	r3, r0
 80086d6:	461a      	mov	r2, r3
 80086d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=100;
 80086e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2264      	movs	r2, #100	; 0x64
 80086f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 80086f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008704:	1c5a      	adds	r2, r3, #1
 8008706:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800870a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 8008714:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008718:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008722:	2b00      	cmp	r3, #0
 8008724:	d11b      	bne.n	800875e <AT_ESP8266_ND+0x1c86>
 8008726:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800872a:	2b01      	cmp	r3, #1
 800872c:	d023      	beq.n	8008776 <AT_ESP8266_ND+0x1c9e>
 800872e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008732:	2b1c      	cmp	r3, #28
 8008734:	d01f      	beq.n	8008776 <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_error)
 8008736:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800873a:	2b02      	cmp	r3, #2
 800873c:	d01b      	beq.n	8008776 <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_restart)
 800873e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008742:	2b04      	cmp	r3, #4
 8008744:	d017      	beq.n	8008776 <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_wifi_connected)
 8008746:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800874a:	2b0b      	cmp	r3, #11
 800874c:	d013      	beq.n	8008776 <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_wifi_gotip)
 800874e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008752:	2b0c      	cmp	r3, #12
 8008754:	d00f      	beq.n	8008776 <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_tcp_enviado_ok)))
 8008756:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800875a:	2b13      	cmp	r3, #19
 800875c:	d00b      	beq.n	8008776 <AT_ESP8266_ND+0x1c9e>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 800875e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008762:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 800876c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008770:	4293      	cmp	r3, r2
 8008772:	f341 842e 	ble.w	8009fd2 <AT_ESP8266_ND+0x34fa>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008776:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800877a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008788:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800878c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2200      	movs	r2, #0
 8008794:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8008798:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800879c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 80087a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 80087b8:	f001 bc0b 	b.w	8009fd2 <AT_ESP8266_ND+0x34fa>
 80087bc:	08010900 	.word	0x08010900
 80087c0:	0801090c 	.word	0x0801090c
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80087c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 80087d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	f040 80c8 	bne.w	8008978 <AT_ESP8266_ND+0x1ea0>
 80087e8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	f000 80c3 	beq.w	8008978 <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_error)
 80087f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	f000 80be 	beq.w	8008978 <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_fail)
 80087fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008800:	2b03      	cmp	r3, #3
 8008802:	f000 80b9 	beq.w	8008978 <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_restart)
 8008806:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800880a:	2b04      	cmp	r3, #4
 800880c:	f000 80b4 	beq.w	8008978 <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_wifi_disconnect)
 8008810:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008814:	2b0a      	cmp	r3, #10
 8008816:	f000 80af 	beq.w	8008978 <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_wifi_connected)
 800881a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800881e:	2b0b      	cmp	r3, #11
 8008820:	f000 80aa 	beq.w	8008978 <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_wifi_gotip))
 8008824:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008828:	2b0c      	cmp	r3, #12
 800882a:	f000 80a5 	beq.w	8008978 <AT_ESP8266_ND+0x1ea0>
						{
						a->_pasos=0;
 800882e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008832:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2200      	movs	r2, #0
 800883a:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 800883e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008842:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2201      	movs	r2, #1
 800884a:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 800884e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008852:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800885c:	4620      	mov	r0, r4
 800885e:	f7f7 fcc9 	bl	80001f4 <strlen>
 8008862:	4603      	mov	r3, r0
 8008864:	4423      	add	r3, r4
 8008866:	49d5      	ldr	r1, [pc, #852]	; (8008bbc <AT_ESP8266_ND+0x20e4>)
 8008868:	461a      	mov	r2, r3
 800886a:	460b      	mov	r3, r1
 800886c:	cb03      	ldmia	r3!, {r0, r1}
 800886e:	6010      	str	r0, [r2, #0]
 8008870:	6051      	str	r1, [r2, #4]
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 8008876:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800887a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008884:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008888:	2201      	movs	r2, #1
 800888a:	4618      	mov	r0, r3
 800888c:	f006 fd5f 	bl	800f34e <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 8008890:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008894:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800889e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	1d9d      	adds	r5, r3, #6
 80088aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3306      	adds	r3, #6
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7f7 fc9c 	bl	80001f4 <strlen>
 80088bc:	4603      	mov	r3, r0
 80088be:	461a      	mov	r2, r3
 80088c0:	4629      	mov	r1, r5
 80088c2:	4620      	mov	r0, r4
 80088c4:	f006 fd43 	bl	800f34e <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 80088c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80088d6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80088da:	4618      	mov	r0, r3
 80088dc:	f7f7 fc8a 	bl	80001f4 <strlen>
 80088e0:	4602      	mov	r2, r0
 80088e2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80088e6:	4619      	mov	r1, r3
 80088e8:	4620      	mov	r0, r4
 80088ea:	f006 fd30 	bl	800f34e <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 80088ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80088fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008900:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800890a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800890e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	3326      	adds	r3, #38	; 0x26
 8008916:	4618      	mov	r0, r3
 8008918:	f7f7 fc6c 	bl	80001f4 <strlen>
 800891c:	4603      	mov	r3, r0
 800891e:	461a      	mov	r2, r3
 8008920:	4629      	mov	r1, r5
 8008922:	4620      	mov	r0, r4
 8008924:	f006 fd13 	bl	800f34e <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 8008928:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800892c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008936:	f507 7109 	add.w	r1, r7, #548	; 0x224
 800893a:	2203      	movs	r2, #3
 800893c:	4618      	mov	r0, r3
 800893e:	f006 fd06 	bl	800f34e <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 8008942:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008946:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008950:	4618      	mov	r0, r3
 8008952:	f7f7 fc4f 	bl	80001f4 <strlen>
 8008956:	4603      	mov	r3, r0
 8008958:	461a      	mov	r2, r3
 800895a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800895e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=200;
 8008968:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800896c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	22c8      	movs	r2, #200	; 0xc8
 8008974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 8008978:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800897c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008986:	1c5a      	adds	r2, r3, #1
 8008988:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800898c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 8008996:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800899a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d11b      	bne.n	80089e0 <AT_ESP8266_ND+0x1f08>
 80089a8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d023      	beq.n	80089f8 <AT_ESP8266_ND+0x1f20>
 80089b0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d01f      	beq.n	80089f8 <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_fail)
 80089b8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089bc:	2b03      	cmp	r3, #3
 80089be:	d01b      	beq.n	80089f8 <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_restart)
 80089c0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089c4:	2b04      	cmp	r3, #4
 80089c6:	d017      	beq.n	80089f8 <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_wifi_disconnect)
 80089c8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089cc:	2b0a      	cmp	r3, #10
 80089ce:	d013      	beq.n	80089f8 <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_wifi_connected)
 80089d0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089d4:	2b0b      	cmp	r3, #11
 80089d6:	d00f      	beq.n	80089f8 <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_wifi_gotip)))
 80089d8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089dc:	2b0c      	cmp	r3, #12
 80089de:	d00b      	beq.n	80089f8 <AT_ESP8266_ND+0x1f20>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 80089e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f8d3 3cbc 	ldr.w	r3, [r3, #3260]	; 0xcbc
 80089ee:	f644 6220 	movw	r2, #20000	; 0x4e20
 80089f2:	4293      	cmp	r3, r2
 80089f4:	f341 82ef 	ble.w	8009fd6 <AT_ESP8266_ND+0x34fe>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80089f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008a06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 8008a0a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a0e:	2b0a      	cmp	r3, #10
 8008a10:	d00f      	beq.n	8008a32 <AT_ESP8266_ND+0x1f5a>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 8008a12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							a->_ejecucion=0;
 8008a22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 8008a32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
					}

			}
			break;
 8008a42:	f001 bac8 	b.w	8009fd6 <AT_ESP8266_ND+0x34fe>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008a46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 8008a56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d14d      	bne.n	8008b04 <AT_ESP8266_ND+0x202c>
 8008a68:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a6c:	2b04      	cmp	r3, #4
 8008a6e:	d049      	beq.n	8008b04 <AT_ESP8266_ND+0x202c>
 8008a70:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a74:	2b0a      	cmp	r3, #10
 8008a76:	d045      	beq.n	8008b04 <AT_ESP8266_ND+0x202c>
 8008a78:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a7c:	2b0d      	cmp	r3, #13
 8008a7e:	d041      	beq.n	8008b04 <AT_ESP8266_ND+0x202c>
						{
						a->_pasos=0;
 8008a80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8008a90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",10);
 8008aa0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aa4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f7f7 fba0 	bl	80001f4 <strlen>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	4423      	add	r3, r4
 8008ab8:	4941      	ldr	r1, [pc, #260]	; (8008bc0 <AT_ESP8266_ND+0x20e8>)
 8008aba:	461a      	mov	r2, r3
 8008abc:	460b      	mov	r3, r1
 8008abe:	cb03      	ldmia	r3!, {r0, r1}
 8008ac0:	6010      	str	r0, [r2, #0]
 8008ac2:	6051      	str	r1, [r2, #4]
 8008ac4:	8819      	ldrh	r1, [r3, #0]
 8008ac6:	789b      	ldrb	r3, [r3, #2]
 8008ac8:	8111      	strh	r1, [r2, #8]
 8008aca:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008acc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ad0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7f7 fb8a 	bl	80001f4 <strlen>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ae8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 8008af2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008af6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008b00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008b04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008b12:	1c5a      	adds	r2, r3, #1
 8008b14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008b22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d113      	bne.n	8008b5c <AT_ESP8266_ND+0x2084>
 8008b34:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b38:	2b0a      	cmp	r3, #10
 8008b3a:	d01b      	beq.n	8008b74 <AT_ESP8266_ND+0x209c>
 8008b3c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b40:	2b0b      	cmp	r3, #11
 8008b42:	d017      	beq.n	8008b74 <AT_ESP8266_ND+0x209c>
																		  ||(AT_decode==at_wifi_gotip)
 8008b44:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b48:	2b0c      	cmp	r3, #12
 8008b4a:	d013      	beq.n	8008b74 <AT_ESP8266_ND+0x209c>
																		  ||(AT_decode==at_restart	)
 8008b4c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b50:	2b04      	cmp	r3, #4
 8008b52:	d00f      	beq.n	8008b74 <AT_ESP8266_ND+0x209c>
																		  ||(AT_decode==at_deconectar_ok )))
 8008b54:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b58:	2b0d      	cmp	r3, #13
 8008b5a:	d00b      	beq.n	8008b74 <AT_ESP8266_ND+0x209c>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008b5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8008b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	f341 8233 	ble.w	8009fda <AT_ESP8266_ND+0x3502>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008b74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008b82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008b86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8008b96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8008ba6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008baa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008bb6:	f001 ba10 	b.w	8009fda <AT_ESP8266_ND+0x3502>
 8008bba:	bf00      	nop
 8008bbc:	0801091c 	.word	0x0801091c
 8008bc0:	08010928 	.word	0x08010928
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008bc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 8008bd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d16b      	bne.n	8008cbe <AT_ESP8266_ND+0x21e6>
 8008be6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bea:	2b04      	cmp	r3, #4
 8008bec:	d067      	beq.n	8008cbe <AT_ESP8266_ND+0x21e6>
									   &&(AT_decode!=at_ok)
 8008bee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d063      	beq.n	8008cbe <AT_ESP8266_ND+0x21e6>
									   &&(AT_decode!=at_error))
 8008bf6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d05f      	beq.n	8008cbe <AT_ESP8266_ND+0x21e6>
						{
						a->_pasos=0;
 8008bfe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8008c0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 8008c1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d115      	bne.n	8008c5c <AT_ESP8266_ND+0x2184>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 8008c30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f7f7 fad8 	bl	80001f4 <strlen>
 8008c44:	4603      	mov	r3, r0
 8008c46:	4423      	add	r3, r4
 8008c48:	4a52      	ldr	r2, [pc, #328]	; (8008d94 <AT_ESP8266_ND+0x22bc>)
 8008c4a:	461c      	mov	r4, r3
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008c50:	6020      	str	r0, [r4, #0]
 8008c52:	6061      	str	r1, [r4, #4]
 8008c54:	60a2      	str	r2, [r4, #8]
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	81a3      	strh	r3, [r4, #12]
 8008c5a:	e014      	b.n	8008c86 <AT_ESP8266_ND+0x21ae>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 8008c5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f7f7 fac2 	bl	80001f4 <strlen>
 8008c70:	4603      	mov	r3, r0
 8008c72:	4423      	add	r3, r4
 8008c74:	4a48      	ldr	r2, [pc, #288]	; (8008d98 <AT_ESP8266_ND+0x22c0>)
 8008c76:	461c      	mov	r4, r3
 8008c78:	4613      	mov	r3, r2
 8008c7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008c7c:	6020      	str	r0, [r4, #0]
 8008c7e:	6061      	str	r1, [r4, #4]
 8008c80:	60a2      	str	r2, [r4, #8]
 8008c82:	881b      	ldrh	r3, [r3, #0]
 8008c84:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008c86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7f7 faad 	bl	80001f4 <strlen>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ca2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 8008cac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008cba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008cbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008ccc:	1c5a      	adds	r2, r3, #1
 8008cce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008cdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ce0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d123      	bne.n	8008d36 <AT_ESP8266_ND+0x225e>
 8008cee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d02b      	beq.n	8008d4e <AT_ESP8266_ND+0x2276>
 8008cf6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cfa:	2b0b      	cmp	r3, #11
 8008cfc:	d027      	beq.n	8008d4e <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_wifi_gotip)
 8008cfe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d02:	2b0c      	cmp	r3, #12
 8008d04:	d023      	beq.n	8008d4e <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_restart)
 8008d06:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d0a:	2b04      	cmp	r3, #4
 8008d0c:	d01f      	beq.n	8008d4e <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_error)
 8008d0e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d01b      	beq.n	8008d4e <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_multiple_conn_ok)
 8008d16:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d1a:	2b07      	cmp	r3, #7
 8008d1c:	d017      	beq.n	8008d4e <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_no_multiple_conn_ok)
 8008d1e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d22:	2b08      	cmp	r3, #8
 8008d24:	d013      	beq.n	8008d4e <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_multiple_conn_err)
 8008d26:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d2a:	2b1e      	cmp	r3, #30
 8008d2c:	d00f      	beq.n	8008d4e <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_no_multiple_conn_err)))
 8008d2e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d32:	2b1f      	cmp	r3, #31
 8008d34:	d00b      	beq.n	8008d4e <AT_ESP8266_ND+0x2276>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008d36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8008d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	f341 8148 	ble.w	8009fde <AT_ESP8266_ND+0x3506>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008d4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008d5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008d60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8008d70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8008d80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008d90:	f001 b925 	b.w	8009fde <AT_ESP8266_ND+0x3506>
 8008d94:	08010934 	.word	0x08010934
 8008d98:	08010944 	.word	0x08010944
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008d9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008da0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 8008dac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008db0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	f040 80f3 	bne.w	8008fa6 <AT_ESP8266_ND+0x24ce>
 8008dc0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008dc4:	2b04      	cmp	r3, #4
 8008dc6:	f000 80ee 	beq.w	8008fa6 <AT_ESP8266_ND+0x24ce>
									   &&(AT_decode!=at_ok)
 8008dca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	f000 80e9 	beq.w	8008fa6 <AT_ESP8266_ND+0x24ce>
									   &&(AT_decode!=at_error)
 8008dd4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	f000 80e4 	beq.w	8008fa6 <AT_ESP8266_ND+0x24ce>
									   &&(AT_decode!=at_def_ip_err)
 8008dde:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008de2:	2b21      	cmp	r3, #33	; 0x21
 8008de4:	f000 80df 	beq.w	8008fa6 <AT_ESP8266_ND+0x24ce>
									   &&(AT_decode!=at_def_ip_ok))
 8008de8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008dec:	2b1b      	cmp	r3, #27
 8008dee:	f000 80da 	beq.w	8008fa6 <AT_ESP8266_ND+0x24ce>
						{
						a->_pasos=0;
 8008df2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008df6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8008e02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 8008e12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008e20:	4620      	mov	r0, r4
 8008e22:	f7f7 f9e7 	bl	80001f4 <strlen>
 8008e26:	4603      	mov	r3, r0
 8008e28:	4423      	add	r3, r4
 8008e2a:	4990      	ldr	r1, [pc, #576]	; (800906c <AT_ESP8266_ND+0x2594>)
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	460b      	mov	r3, r1
 8008e30:	cb03      	ldmia	r3!, {r0, r1}
 8008e32:	6010      	str	r0, [r2, #0]
 8008e34:	6051      	str	r1, [r2, #4]
 8008e36:	8819      	ldrh	r1, [r3, #0]
 8008e38:	789b      	ldrb	r3, [r3, #2]
 8008e3a:	8111      	strh	r1, [r2, #8]
 8008e3c:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 8008e3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008e4c:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008e50:	2201      	movs	r2, #1
 8008e52:	4618      	mov	r0, r3
 8008e54:	f006 fa7b 	bl	800f34e <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8008e58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008e66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8008e74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	334c      	adds	r3, #76	; 0x4c
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7f7 f9b7 	bl	80001f4 <strlen>
 8008e86:	4603      	mov	r3, r0
 8008e88:	461a      	mov	r2, r3
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	f006 fa5e 	bl	800f34e <strncat>
						strncat(a->_uart2snd,separador,3);
 8008e92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008ea0:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008ea4:	2203      	movs	r2, #3
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f006 fa51 	bl	800f34e <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 8008eac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008eba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ebe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f103 0562 	add.w	r5, r3, #98	; 0x62
 8008ec8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ecc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	3362      	adds	r3, #98	; 0x62
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7f7 f98d 	bl	80001f4 <strlen>
 8008eda:	4603      	mov	r3, r0
 8008edc:	461a      	mov	r2, r3
 8008ede:	4629      	mov	r1, r5
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	f006 fa34 	bl	800f34e <strncat>
						strncat(a->_uart2snd,separador,3);
 8008ee6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008ef4:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008ef8:	2203      	movs	r2, #3
 8008efa:	4618      	mov	r0, r3
 8008efc:	f006 fa27 	bl	800f34e <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8008f00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8008f0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f103 0572 	add.w	r5, r3, #114	; 0x72
 8008f1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	3372      	adds	r3, #114	; 0x72
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7f7 f963 	bl	80001f4 <strlen>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	461a      	mov	r2, r3
 8008f32:	4629      	mov	r1, r5
 8008f34:	4620      	mov	r0, r4
 8008f36:	f006 fa0a 	bl	800f34e <strncat>
						strncat(a->_uart2snd,&comillas,1);
 8008f3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008f48:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f006 f9fd 	bl	800f34e <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008f54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008f62:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008f66:	2202      	movs	r2, #2
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f006 f9f0 	bl	800f34e <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8008f6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7f7 f939 	bl	80001f4 <strlen>
 8008f82:	4603      	mov	r3, r0
 8008f84:	461a      	mov	r2, r3
 8008f86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008f94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008fa6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008faa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008fb4:	1c5a      	adds	r2, r3, #1
 8008fb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008fc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d11b      	bne.n	800900e <AT_ESP8266_ND+0x2536>
 8008fd6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d023      	beq.n	8009026 <AT_ESP8266_ND+0x254e>
 8008fde:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008fe2:	2b0b      	cmp	r3, #11
 8008fe4:	d01f      	beq.n	8009026 <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_wifi_gotip)
 8008fe6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008fea:	2b0c      	cmp	r3, #12
 8008fec:	d01b      	beq.n	8009026 <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_restart)
 8008fee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ff2:	2b04      	cmp	r3, #4
 8008ff4:	d017      	beq.n	8009026 <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_error)
 8008ff6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d013      	beq.n	8009026 <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_def_ip_err)
 8008ffe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009002:	2b21      	cmp	r3, #33	; 0x21
 8009004:	d00f      	beq.n	8009026 <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_def_ip_ok)))
 8009006:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800900a:	2b1b      	cmp	r3, #27
 800900c:	d00b      	beq.n	8009026 <AT_ESP8266_ND+0x254e>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 800900e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009012:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 800901c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009020:	4293      	cmp	r3, r2
 8009022:	f340 87de 	ble.w	8009fe2 <AT_ESP8266_ND+0x350a>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8009026:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800902a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8009038:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800903c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2200      	movs	r2, #0
 8009044:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8009048:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800904c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2200      	movs	r2, #0
 8009054:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8009058:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800905c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2200      	movs	r2, #0
 8009064:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8009068:	f000 bfbb 	b.w	8009fe2 <AT_ESP8266_ND+0x350a>
 800906c:	08010824 	.word	0x08010824
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009070:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009074:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8009080:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009084:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800908e:	2b01      	cmp	r3, #1
 8009090:	f040 80e2 	bne.w	8009258 <AT_ESP8266_ND+0x2780>
 8009094:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009098:	2b0b      	cmp	r3, #11
 800909a:	f000 80dd 	beq.w	8009258 <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_wifi_gotip)
 800909e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090a2:	2b0c      	cmp	r3, #12
 80090a4:	f000 80d8 	beq.w	8009258 <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 80090a8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090ac:	2b0e      	cmp	r3, #14
 80090ae:	f000 80d3 	beq.w	8009258 <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_tcp_conectado)
 80090b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090b6:	2b0f      	cmp	r3, #15
 80090b8:	f000 80ce 	beq.w	8009258 <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_tcp_desconectado)
 80090bc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090c0:	2b10      	cmp	r3, #16
 80090c2:	f000 80c9 	beq.w	8009258 <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_error))
 80090c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	f000 80c4 	beq.w	8009258 <AT_ESP8266_ND+0x2780>
						{
						a->_pasos=0;
 80090d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2200      	movs	r2, #0
 80090dc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 80090e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 80090f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80090fe:	4620      	mov	r0, r4
 8009100:	f7f7 f878 	bl	80001f4 <strlen>
 8009104:	4603      	mov	r3, r0
 8009106:	4423      	add	r3, r4
 8009108:	4aa7      	ldr	r2, [pc, #668]	; (80093a8 <AT_ESP8266_ND+0x28d0>)
 800910a:	461c      	mov	r4, r3
 800910c:	4613      	mov	r3, r2
 800910e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009110:	6020      	str	r0, [r4, #0]
 8009112:	6061      	str	r1, [r4, #4]
 8009114:	60a2      	str	r2, [r4, #8]
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 800911a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800911e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009128:	f207 212f 	addw	r1, r7, #559	; 0x22f
 800912c:	2201      	movs	r2, #1
 800912e:	4618      	mov	r0, r3
 8009130:	f006 f90d 	bl	800f34e <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8009134:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009138:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8009142:	4620      	mov	r0, r4
 8009144:	f7f7 f856 	bl	80001f4 <strlen>
 8009148:	4603      	mov	r3, r0
 800914a:	4423      	add	r3, r4
 800914c:	4a97      	ldr	r2, [pc, #604]	; (80093ac <AT_ESP8266_ND+0x28d4>)
 800914e:	6810      	ldr	r0, [r2, #0]
 8009150:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8009152:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009156:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009160:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8009164:	2203      	movs	r2, #3
 8009166:	4618      	mov	r0, r3
 8009168:	f006 f8f1 	bl	800f34e <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 800916c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009170:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 800917a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800917e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8009188:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800918c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	3336      	adds	r3, #54	; 0x36
 8009194:	4618      	mov	r0, r3
 8009196:	f7f7 f82d 	bl	80001f4 <strlen>
 800919a:	4603      	mov	r3, r0
 800919c:	461a      	mov	r2, r3
 800919e:	4629      	mov	r1, r5
 80091a0:	4620      	mov	r0, r4
 80091a2:	f006 f8d4 	bl	800f34e <strncat>
						strncat(a->_uart2snd,separador2,2);
 80091a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80091b4:	f507 7108 	add.w	r1, r7, #544	; 0x220
 80091b8:	2202      	movs	r2, #2
 80091ba:	4618      	mov	r0, r3
 80091bc:	f006 f8c7 	bl	800f34e <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 80091c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80091ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f103 0546 	add.w	r5, r3, #70	; 0x46
 80091dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	3346      	adds	r3, #70	; 0x46
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7f7 f803 	bl	80001f4 <strlen>
 80091ee:	4603      	mov	r3, r0
 80091f0:	461a      	mov	r2, r3
 80091f2:	4629      	mov	r1, r5
 80091f4:	4620      	mov	r0, r4
 80091f6:	f006 f8aa 	bl	800f34e <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80091fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8009208:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800920c:	4618      	mov	r0, r3
 800920e:	f7f6 fff1 	bl	80001f4 <strlen>
 8009212:	4602      	mov	r2, r0
 8009214:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009218:	4619      	mov	r1, r3
 800921a:	4620      	mov	r0, r4
 800921c:	f006 f897 	bl	800f34e <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8009220:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009224:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800922e:	4618      	mov	r0, r3
 8009230:	f7f6 ffe0 	bl	80001f4 <strlen>
 8009234:	4603      	mov	r3, r0
 8009236:	461a      	mov	r2, r3
 8009238:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800923c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=600;
 8009246:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800924a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8009258:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800925c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8009266:	1c5a      	adds	r2, r3, #1
 8009268:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800926c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8009276:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800927a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009284:	2b00      	cmp	r3, #0
 8009286:	d124      	bne.n	80092d2 <AT_ESP8266_ND+0x27fa>
 8009288:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800928c:	2b0a      	cmp	r3, #10
 800928e:	d02c      	beq.n	80092ea <AT_ESP8266_ND+0x2812>
 8009290:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009294:	2b0b      	cmp	r3, #11
 8009296:	d028      	beq.n	80092ea <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_fail)
 8009298:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800929c:	2b03      	cmp	r3, #3
 800929e:	d024      	beq.n	80092ea <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_wifi_gotip)
 80092a0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092a4:	2b0c      	cmp	r3, #12
 80092a6:	d020      	beq.n	80092ea <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 80092a8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092ac:	2b0e      	cmp	r3, #14
 80092ae:	d01c      	beq.n	80092ea <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_tcp_conectado)
 80092b0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092b4:	2b0f      	cmp	r3, #15
 80092b6:	d018      	beq.n	80092ea <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_tcp_desconectado)
 80092b8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092bc:	2b10      	cmp	r3, #16
 80092be:	d014      	beq.n	80092ea <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_error)
 80092c0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d010      	beq.n	80092ea <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_busy_p)))
 80092c8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092d0:	d00b      	beq.n	80092ea <AT_ESP8266_ND+0x2812>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80092d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80092e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092e4:	4293      	cmp	r3, r2
 80092e6:	f340 867e 	ble.w	8009fe6 <AT_ESP8266_ND+0x350e>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80092ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80092f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80092fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009300:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2200      	movs	r2, #0
 8009308:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 800930c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009310:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2200      	movs	r2, #0
 8009318:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 800931c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009320:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2200      	movs	r2, #0
 8009328:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 800932c:	f000 be5b 	b.w	8009fe6 <AT_ESP8266_ND+0x350e>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 8009330:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009334:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8009338:	2200      	movs	r2, #0
 800933a:	601a      	str	r2, [r3, #0]
 800933c:	2200      	movs	r2, #0
 800933e:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail)
 8009340:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009344:	2b10      	cmp	r3, #16
 8009346:	d00b      	beq.n	8009360 <AT_ESP8266_ND+0x2888>
 8009348:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800934c:	2b0a      	cmp	r3, #10
 800934e:	d007      	beq.n	8009360 <AT_ESP8266_ND+0x2888>
 8009350:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009354:	2b03      	cmp	r3, #3
 8009356:	d003      	beq.n	8009360 <AT_ESP8266_ND+0x2888>
						||(AT_decode==at_error))//240420
 8009358:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800935c:	2b02      	cmp	r3, #2
 800935e:	d127      	bne.n	80093b0 <AT_ESP8266_ND+0x28d8>
				{
					a->_estado=AT_decode;
 8009360:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009364:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800936e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8009372:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009376:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2200      	movs	r2, #0
 800937e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_ejecucion=0;
 8009382:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009386:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2200      	movs	r2, #0
 800938e:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
					a->_subpaso=0;
 8009392:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009396:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2200      	movs	r2, #0
 800939e:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80093a2:	f000 be22 	b.w	8009fea <AT_ESP8266_ND+0x3512>
 80093a6:	bf00      	nop
 80093a8:	08010954 	.word	0x08010954
 80093ac:	08010964 	.word	0x08010964
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 80093b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80093be:	2b01      	cmp	r3, #1
 80093c0:	f040 80d1 	bne.w	8009566 <AT_ESP8266_ND+0x2a8e>
 80093c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f040 80c7 	bne.w	8009566 <AT_ESP8266_ND+0x2a8e>
										a->_ejecucion=1;
 80093d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
										a->_estado=24;
 80093e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2218      	movs	r2, #24
 80093f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80093f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8009408:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800940c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009416:	1c5a      	adds	r2, r3, #1
 8009418:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800941c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_pasos=0;
 8009426:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800942a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2200      	movs	r2, #0
 8009432:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8009436:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800943a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2200      	movs	r2, #0
 8009442:	f883 2ab8 	strb.w	r2, [r3, #2744]	; 0xab8
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 8009446:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800944a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8009454:	4620      	mov	r0, r4
 8009456:	f7f6 fecd 	bl	80001f4 <strlen>
 800945a:	4603      	mov	r3, r0
 800945c:	4423      	add	r3, r4
 800945e:	4ac0      	ldr	r2, [pc, #768]	; (8009760 <AT_ESP8266_ND+0x2c88>)
 8009460:	461c      	mov	r4, r3
 8009462:	4613      	mov	r3, r2
 8009464:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009466:	6020      	str	r0, [r4, #0]
 8009468:	6061      	str	r1, [r4, #4]
 800946a:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 800946c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009470:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800947a:	f107 0214 	add.w	r2, r7, #20
 800947e:	4611      	mov	r1, r2
 8009480:	4618      	mov	r0, r3
 8009482:	f005 fc67 	bl	800ed54 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8009486:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800948a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8009494:	f107 0314 	add.w	r3, r7, #20
 8009498:	4618      	mov	r0, r3
 800949a:	f7f6 feab 	bl	80001f4 <strlen>
 800949e:	4602      	mov	r2, r0
 80094a0:	f107 0314 	add.w	r3, r7, #20
 80094a4:	4619      	mov	r1, r3
 80094a6:	4620      	mov	r0, r4
 80094a8:	f005 ff51 	bl	800f34e <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 80094ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f603 22b8 	addw	r2, r3, #2744	; 0xab8
 80094ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80094c8:	4619      	mov	r1, r3
 80094ca:	4610      	mov	r0, r2
 80094cc:	f006 f820 	bl	800f510 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80094d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80094de:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 80094e2:	2202      	movs	r2, #2
 80094e4:	4618      	mov	r0, r3
 80094e6:	f005 ff32 	bl	800f34e <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 80094ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7f6 fe7b 	bl	80001f4 <strlen>
 80094fe:	4603      	mov	r3, r0
 8009500:	461a      	mov	r2, r3
 8009502:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009506:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009510:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009514:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f603 24b8 	addw	r4, r3, #2744	; 0xab8
 800951e:	4620      	mov	r0, r4
 8009520:	f7f6 fe68 	bl	80001f4 <strlen>
 8009524:	4603      	mov	r3, r0
 8009526:	4423      	add	r3, r4
 8009528:	4a8e      	ldr	r2, [pc, #568]	; (8009764 <AT_ESP8266_ND+0x2c8c>)
 800952a:	461c      	mov	r4, r3
 800952c:	4613      	mov	r3, r2
 800952e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009530:	6020      	str	r0, [r4, #0]
 8009532:	6061      	str	r1, [r4, #4]
 8009534:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8009536:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800953a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 8009544:	1c5a      	adds	r2, r3, #1
 8009546:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800954a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
										a->_estado=700;
 8009554:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009558:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8009562:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8009566:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800956a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8009574:	1c5a      	adds	r2, r3, #1
 8009576:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800957a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 8009584:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009588:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009592:	2b00      	cmp	r3, #0
 8009594:	f040 80a6 	bne.w	80096e4 <AT_ESP8266_ND+0x2c0c>
 8009598:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800959c:	2b13      	cmp	r3, #19
 800959e:	f000 80a1 	beq.w	80096e4 <AT_ESP8266_ND+0x2c0c>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 80095a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f503 62d3 	add.w	r2, r3, #1688	; 0x698
 80095b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 80095be:	4619      	mov	r1, r3
 80095c0:	4610      	mov	r0, r2
 80095c2:	f7f6 fe0d 	bl	80001e0 <strcmp>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d01b      	beq.n	8009604 <AT_ESP8266_ND+0x2b2c>
 80095cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d017      	beq.n	8009604 <AT_ESP8266_ND+0x2b2c>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 80095d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095d8:	2b14      	cmp	r3, #20
 80095da:	d013      	beq.n	8009604 <AT_ESP8266_ND+0x2b2c>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 80095dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80095ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80095ee:	4293      	cmp	r3, r2
 80095f0:	dd78      	ble.n	80096e4 <AT_ESP8266_ND+0x2c0c>
 80095f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009600:	2b01      	cmp	r3, #1
 8009602:	d16f      	bne.n	80096e4 <AT_ESP8266_ND+0x2c0c>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 8009604:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009608:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8009612:	f241 3288 	movw	r2, #5000	; 0x1388
 8009616:	4293      	cmp	r3, r2
 8009618:	dd0e      	ble.n	8009638 <AT_ESP8266_ND+0x2b60>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 800961a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800961e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
 8009628:	1c5a      	adds	r2, r3, #1
 800962a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800962e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
								a->_debug_count4++;
 8009638:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800963c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8009646:	1c5a      	adds	r2, r3, #1
 8009648:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800964c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_subpaso++;
 8009656:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800965a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009664:	1c5a      	adds	r2, r3, #1
 8009666:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800966a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
								a->_enviaruart=1;
 8009674:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009678:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2201      	movs	r2, #1
 8009680:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009684:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009688:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f503 6093 	add.w	r0, r3, #1176	; 0x498
 8009692:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009696:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80096a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 80096ae:	2361      	movs	r3, #97	; 0x61
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	2301      	movs	r3, #1
 80096b4:	f005 fbf8 	bl	800eea8 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 80096b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 80096c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 80096d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2200      	movs	r2, #0
 80096e0:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 80096e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096f2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80096f6:	f040 8478 	bne.w	8009fea <AT_ESP8266_ND+0x3512>
 80096fa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096fe:	2b13      	cmp	r3, #19
 8009700:	d032      	beq.n	8009768 <AT_ESP8266_ND+0x2c90>
 8009702:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009706:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8009710:	f241 3288 	movw	r2, #5000	; 0x1388
 8009714:	4293      	cmp	r3, r2
 8009716:	dc27      	bgt.n	8009768 <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_wifi_disconnect)
 8009718:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800971c:	2b0a      	cmp	r3, #10
 800971e:	d023      	beq.n	8009768 <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_fail)
 8009720:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009724:	2b03      	cmp	r3, #3
 8009726:	d01f      	beq.n	8009768 <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_wifi_connected)
 8009728:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800972c:	2b0b      	cmp	r3, #11
 800972e:	d01b      	beq.n	8009768 <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_wifi_gotip)
 8009730:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009734:	2b0c      	cmp	r3, #12
 8009736:	d017      	beq.n	8009768 <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_tcp_desconectado)
 8009738:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800973c:	2b10      	cmp	r3, #16
 800973e:	d013      	beq.n	8009768 <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_tcp_snd_err)
 8009740:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009744:	2b11      	cmp	r3, #17
 8009746:	d00f      	beq.n	8009768 <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_tcp_enviado_error)
 8009748:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800974c:	2b12      	cmp	r3, #18
 800974e:	d00b      	beq.n	8009768 <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_busy_p)))
 8009750:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009754:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009758:	f040 8447 	bne.w	8009fea <AT_ESP8266_ND+0x3512>
 800975c:	e004      	b.n	8009768 <AT_ESP8266_ND+0x2c90>
 800975e:	bf00      	nop
 8009760:	08010968 	.word	0x08010968
 8009764:	08010974 	.word	0x08010974
									a->_debug_count5++;
 8009768:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800976c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009776:	1c5a      	adds	r2, r3, #1
 8009778:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800977c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
									if(a->_ticks > 5000)
 8009786:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800978a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8009794:	f241 3288 	movw	r2, #5000	; 0x1388
 8009798:	4293      	cmp	r3, r2
 800979a:	dd25      	ble.n	80097e8 <AT_ESP8266_ND+0x2d10>
										a->_debug_count8++;
 800979c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 80097aa:	1c5a      	adds	r2, r3, #1
 80097ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
										a->_subpaso++;
 80097ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 80097c8:	1c5a      	adds	r2, r3, #1
 80097ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_ticks=0;
 80097d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 80097e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	dd10      	ble.n	800981c <AT_ESP8266_ND+0x2d44>
 80097fa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097fe:	2b10      	cmp	r3, #16
 8009800:	d00c      	beq.n	800981c <AT_ESP8266_ND+0x2d44>
 8009802:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009806:	2b0a      	cmp	r3, #10
 8009808:	d008      	beq.n	800981c <AT_ESP8266_ND+0x2d44>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 800980a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800980e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	220f      	movs	r2, #15
 8009816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800981a:	e008      	b.n	800982e <AT_ESP8266_ND+0x2d56>
										a->_estado=AT_decode;	//Devuelvo el estado
 800981c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009820:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800982a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 800982e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009832:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2200      	movs	r2, #0
 800983a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_ejecucion=0;
 800983e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009842:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2200      	movs	r2, #0
 800984a:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
									a->_subpaso=0;
 800984e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009852:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2200      	movs	r2, #0
 800985a:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
			break;
 800985e:	e3c4      	b.n	8009fea <AT_ESP8266_ND+0x3512>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009860:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009864:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2200      	movs	r2, #0
 800986c:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498

				if( a->_enviaruart==1)
 8009870:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009874:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800987e:	2b01      	cmp	r3, #1
 8009880:	d16f      	bne.n	8009962 <AT_ESP8266_ND+0x2e8a>
						{
						a->_pasos=0;
 8009882:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009886:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2200      	movs	r2, #0
 800988e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=1;
 8009892:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009896:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2201      	movs	r2, #1
 800989e:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 80098a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80098b0:	4620      	mov	r0, r4
 80098b2:	f7f6 fc9f 	bl	80001f4 <strlen>
 80098b6:	4603      	mov	r3, r0
 80098b8:	4423      	add	r3, r4
 80098ba:	4a7a      	ldr	r2, [pc, #488]	; (8009aa4 <AT_ESP8266_ND+0x2fcc>)
 80098bc:	461c      	mov	r4, r3
 80098be:	4615      	mov	r5, r2
 80098c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098c2:	6020      	str	r0, [r4, #0]
 80098c4:	6061      	str	r1, [r4, #4]
 80098c6:	60a2      	str	r2, [r4, #8]
 80098c8:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 80098ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 80098d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 80098e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	335c      	adds	r3, #92	; 0x5c
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7f6 fc7e 	bl	80001f4 <strlen>
 80098f8:	4603      	mov	r3, r0
 80098fa:	461a      	mov	r2, r3
 80098fc:	4629      	mov	r1, r5
 80098fe:	4620      	mov	r0, r4
 8009900:	f005 fd25 	bl	800f34e <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009904:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009908:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8009912:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009916:	4618      	mov	r0, r3
 8009918:	f7f6 fc6c 	bl	80001f4 <strlen>
 800991c:	4602      	mov	r2, r0
 800991e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009922:	4619      	mov	r1, r3
 8009924:	4620      	mov	r0, r4
 8009926:	f005 fd12 	bl	800f34e <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 800992a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800992e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009938:	4618      	mov	r0, r3
 800993a:	f7f6 fc5b 	bl	80001f4 <strlen>
 800993e:	4603      	mov	r3, r0
 8009940:	461a      	mov	r2, r3
 8009942:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009946:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
						a->_estado=800;
 8009950:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009954:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800995e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 8009962:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009966:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8009970:	1c5a      	adds	r2, r3, #1
 8009972:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009976:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8009980:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009984:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800998e:	2b00      	cmp	r3, #0
 8009990:	d123      	bne.n	80099da <AT_ESP8266_ND+0x2f02>
 8009992:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009996:	2b0a      	cmp	r3, #10
 8009998:	d02b      	beq.n	80099f2 <AT_ESP8266_ND+0x2f1a>
 800999a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800999e:	2b0b      	cmp	r3, #11
 80099a0:	d027      	beq.n	80099f2 <AT_ESP8266_ND+0x2f1a>
 80099a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099a6:	2b0c      	cmp	r3, #12
 80099a8:	d023      	beq.n	80099f2 <AT_ESP8266_ND+0x2f1a>
 80099aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099ae:	2b0e      	cmp	r3, #14
 80099b0:	d01f      	beq.n	80099f2 <AT_ESP8266_ND+0x2f1a>
 80099b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099b6:	2b0f      	cmp	r3, #15
 80099b8:	d01b      	beq.n	80099f2 <AT_ESP8266_ND+0x2f1a>
 80099ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099be:	2b10      	cmp	r3, #16
 80099c0:	d017      	beq.n	80099f2 <AT_ESP8266_ND+0x2f1a>
 80099c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099c6:	2b15      	cmp	r3, #21
 80099c8:	d013      	beq.n	80099f2 <AT_ESP8266_ND+0x2f1a>
 80099ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099ce:	2b16      	cmp	r3, #22
 80099d0:	d00f      	beq.n	80099f2 <AT_ESP8266_ND+0x2f1a>
 80099d2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099d6:	2b17      	cmp	r3, #23
 80099d8:	d00b      	beq.n	80099f2 <AT_ESP8266_ND+0x2f1a>
 80099da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80099e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ec:	4293      	cmp	r3, r2
 80099ee:	f340 82fe 	ble.w	8009fee <AT_ESP8266_ND+0x3516>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80099f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009a00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8009a04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ejecucion=0;
 8009a14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
						a->_ticks=0;
 8009a24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}
			}
			break;
 8009a34:	e2db      	b.n	8009fee <AT_ESP8266_ND+0x3516>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 8009a36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a3a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009a3e:	2200      	movs	r2, #0
 8009a40:	601a      	str	r2, [r3, #0]
 8009a42:	2200      	movs	r2, #0
 8009a44:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail))
 8009a46:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a4a:	2b10      	cmp	r3, #16
 8009a4c:	d007      	beq.n	8009a5e <AT_ESP8266_ND+0x2f86>
 8009a4e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a52:	2b0a      	cmp	r3, #10
 8009a54:	d003      	beq.n	8009a5e <AT_ESP8266_ND+0x2f86>
 8009a56:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a5a:	2b03      	cmp	r3, #3
 8009a5c:	d124      	bne.n	8009aa8 <AT_ESP8266_ND+0x2fd0>
				{
					a->_estado=AT_decode;
 8009a5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8009a70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_ejecucion=0;
 8009a80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
					a->_subpaso=0;
 8009a90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8009aa0:	e2a7      	b.n	8009ff2 <AT_ESP8266_ND+0x351a>
 8009aa2:	bf00      	nop
 8009aa4:	08010980 	.word	0x08010980
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8009aa8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009aac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	f040 8102 	bne.w	8009cc0 <AT_ESP8266_ND+0x31e8>
 8009abc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ac0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f040 80f8 	bne.w	8009cc0 <AT_ESP8266_ND+0x31e8>
										a->_ejecucion=1;
 8009ad0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ad4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
										a->_estado=24;
 8009ae0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ae4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2218      	movs	r2, #24
 8009aec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009af0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009af4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8009b00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009b0e:	1c5a      	adds	r2, r3, #1
 8009b10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_pasos=0;
 8009b1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8009b2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f883 2ab8 	strb.w	r2, [r3, #2744]	; 0xab8
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 8009b3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	f7f6 fb51 	bl	80001f4 <strlen>
 8009b52:	4603      	mov	r3, r0
 8009b54:	4423      	add	r3, r4
 8009b56:	4a83      	ldr	r2, [pc, #524]	; (8009d64 <AT_ESP8266_ND+0x328c>)
 8009b58:	461c      	mov	r4, r3
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009b5e:	6020      	str	r0, [r4, #0]
 8009b60:	6061      	str	r1, [r4, #4]
 8009b62:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 8009b64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 8009b72:	f107 020c 	add.w	r2, r7, #12
 8009b76:	4611      	mov	r1, r2
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f005 f8eb 	bl	800ed54 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 8009b7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8009b8c:	f107 030c 	add.w	r3, r7, #12
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7f6 fb2f 	bl	80001f4 <strlen>
 8009b96:	4602      	mov	r2, r0
 8009b98:	f107 030c 	add.w	r3, r7, #12
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	f005 fbd5 	bl	800f34e <strncat>
										strncat(a->_uart2snd,",",1);
 8009ba4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ba8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f7f6 fb1e 	bl	80001f4 <strlen>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	4423      	add	r3, r4
 8009bbc:	496a      	ldr	r1, [pc, #424]	; (8009d68 <AT_ESP8266_ND+0x3290>)
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	881b      	ldrh	r3, [r3, #0]
 8009bc4:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8009bc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8009bd4:	f107 020c 	add.w	r2, r7, #12
 8009bd8:	4611      	mov	r1, r2
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f005 f8ba 	bl	800ed54 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8009be0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009be4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8009bee:	f107 030c 	add.w	r3, r7, #12
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7f6 fafe 	bl	80001f4 <strlen>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	f107 030c 	add.w	r3, r7, #12
 8009bfe:	4619      	mov	r1, r3
 8009c00:	4620      	mov	r0, r4
 8009c02:	f005 fba4 	bl	800f34e <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8009c06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f603 22b8 	addw	r2, r3, #2744	; 0xab8
 8009c14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009c22:	4619      	mov	r1, r3
 8009c24:	4610      	mov	r0, r2
 8009c26:	f005 fc73 	bl	800f510 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009c2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009c38:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f005 fb85 	bl	800f34e <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8009c44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7f6 face 	bl	80001f4 <strlen>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009c6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f603 24b8 	addw	r4, r3, #2744	; 0xab8
 8009c78:	4620      	mov	r0, r4
 8009c7a:	f7f6 fabb 	bl	80001f4 <strlen>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	4423      	add	r3, r4
 8009c82:	4a3a      	ldr	r2, [pc, #232]	; (8009d6c <AT_ESP8266_ND+0x3294>)
 8009c84:	461c      	mov	r4, r3
 8009c86:	4613      	mov	r3, r2
 8009c88:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009c8a:	6020      	str	r0, [r4, #0]
 8009c8c:	6061      	str	r1, [r4, #4]
 8009c8e:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8009c90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 8009c9e:	1c5a      	adds	r2, r3, #1
 8009ca0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ca4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
										a->_estado=900;
 8009cae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009cbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8009cc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8009cce:	1c5a      	adds	r2, r3, #1
 8009cd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009cde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ce2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	f040 80b8 	bne.w	8009e62 <AT_ESP8266_ND+0x338a>
 8009cf2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009cf6:	2b13      	cmp	r3, #19
 8009cf8:	f000 80b3 	beq.w	8009e62 <AT_ESP8266_ND+0x338a>
 8009cfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f503 62d3 	add.w	r2, r3, #1688	; 0x698
 8009d0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f603 23b8 	addw	r3, r3, #2744	; 0xab8
 8009d18:	4619      	mov	r1, r3
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	f7f6 fa60 	bl	80001e0 <strcmp>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d024      	beq.n	8009d70 <AT_ESP8266_ND+0x3298>
 8009d26:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d020      	beq.n	8009d70 <AT_ESP8266_ND+0x3298>
 8009d2e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d32:	2b14      	cmp	r3, #20
 8009d34:	d01c      	beq.n	8009d70 <AT_ESP8266_ND+0x3298>
 8009d36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8009d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	f340 808a 	ble.w	8009e62 <AT_ESP8266_ND+0x338a>
 8009d4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	f040 8080 	bne.w	8009e62 <AT_ESP8266_ND+0x338a>
 8009d62:	e005      	b.n	8009d70 <AT_ESP8266_ND+0x3298>
 8009d64:	08010968 	.word	0x08010968
 8009d68:	08010990 	.word	0x08010990
 8009d6c:	08010974 	.word	0x08010974
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 8009d70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8009d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d82:	4293      	cmp	r3, r2
 8009d84:	dd17      	ble.n	8009db6 <AT_ESP8266_ND+0x32de>
 8009d86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d10e      	bne.n	8009db6 <AT_ESP8266_ND+0x32de>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8009d98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
 8009da6:	1c5a      	adds	r2, r3, #1
 8009da8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009dac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
								a->_debug_count4++;
 8009db6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009dba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8009dc4:	1c5a      	adds	r2, r3, #1
 8009dc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009dca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_subpaso++;
 8009dd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009dd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009de2:	1c5a      	adds	r2, r3, #1
 8009de4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009de8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
								a->_enviaruart=1;
 8009df2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009df6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009e02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f503 6093 	add.w	r0, r3, #1176	; 0x498
 8009e10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8009e1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 8009e2c:	2361      	movs	r3, #97	; 0x61
 8009e2e:	9300      	str	r3, [sp, #0]
 8009e30:	2301      	movs	r3, #1
 8009e32:	f005 f839 	bl	800eea8 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009e36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 8009e44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009e52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 8009e62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e70:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009e74:	f040 80bd 	bne.w	8009ff2 <AT_ESP8266_ND+0x351a>
 8009e78:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009e7c:	2b13      	cmp	r3, #19
 8009e7e:	d02b      	beq.n	8009ed8 <AT_ESP8266_ND+0x3400>
 8009e80:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009e84:	2b0b      	cmp	r3, #11
 8009e86:	d027      	beq.n	8009ed8 <AT_ESP8266_ND+0x3400>
 8009e88:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009e8c:	2b0c      	cmp	r3, #12
 8009e8e:	d023      	beq.n	8009ed8 <AT_ESP8266_ND+0x3400>
 8009e90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8009e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	dc18      	bgt.n	8009ed8 <AT_ESP8266_ND+0x3400>
 8009ea6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009eaa:	2b0a      	cmp	r3, #10
 8009eac:	d014      	beq.n	8009ed8 <AT_ESP8266_ND+0x3400>
 8009eae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009eb2:	2b10      	cmp	r3, #16
 8009eb4:	d010      	beq.n	8009ed8 <AT_ESP8266_ND+0x3400>
 8009eb6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009eba:	2b11      	cmp	r3, #17
 8009ebc:	d00c      	beq.n	8009ed8 <AT_ESP8266_ND+0x3400>
 8009ebe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009ec2:	2b12      	cmp	r3, #18
 8009ec4:	d008      	beq.n	8009ed8 <AT_ESP8266_ND+0x3400>
 8009ec6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009eca:	2b16      	cmp	r3, #22
 8009ecc:	d004      	beq.n	8009ed8 <AT_ESP8266_ND+0x3400>
 8009ece:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009ed2:	2b19      	cmp	r3, #25
 8009ed4:	f040 808d 	bne.w	8009ff2 <AT_ESP8266_ND+0x351a>
									a->_debug_count5++;
 8009ed8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009edc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009ee6:	1c5a      	adds	r2, r3, #1
 8009ee8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009eec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
									if(a->_ticks > 5000)
 8009ef6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009efa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8009f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	dd25      	ble.n	8009f58 <AT_ESP8266_ND+0x3480>
										a->_debug_count8++;
 8009f0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8009f1a:	1c5a      	adds	r2, r3, #1
 8009f1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
										a->_subpaso++;
 8009f2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009f38:	1c5a      	adds	r2, r3, #1
 8009f3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
										a->_ticks=0;
 8009f48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009f58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	dd07      	ble.n	8009f7a <AT_ESP8266_ND+0x34a2>
 8009f6a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009f6e:	2b10      	cmp	r3, #16
 8009f70:	d003      	beq.n	8009f7a <AT_ESP8266_ND+0x34a2>
 8009f72:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009f76:	2b0a      	cmp	r3, #10
 8009f78:	d108      	bne.n	8009f8c <AT_ESP8266_ND+0x34b4>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009f7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009f88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009f8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_ejecucion=0;
 8009f9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009fa0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
									a->_subpaso=0;
 8009fac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009fb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
			break;
 8009fbc:	e019      	b.n	8009ff2 <AT_ESP8266_ND+0x351a>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8009fbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009fc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009fcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8009fd0:	e010      	b.n	8009ff4 <AT_ESP8266_ND+0x351c>
			break;
 8009fd2:	bf00      	nop
 8009fd4:	e00e      	b.n	8009ff4 <AT_ESP8266_ND+0x351c>
			break;
 8009fd6:	bf00      	nop
 8009fd8:	e00c      	b.n	8009ff4 <AT_ESP8266_ND+0x351c>
			break;
 8009fda:	bf00      	nop
 8009fdc:	e00a      	b.n	8009ff4 <AT_ESP8266_ND+0x351c>
			break;
 8009fde:	bf00      	nop
 8009fe0:	e008      	b.n	8009ff4 <AT_ESP8266_ND+0x351c>
			break;
 8009fe2:	bf00      	nop
 8009fe4:	e006      	b.n	8009ff4 <AT_ESP8266_ND+0x351c>
			break;
 8009fe6:	bf00      	nop
 8009fe8:	e004      	b.n	8009ff4 <AT_ESP8266_ND+0x351c>
			break;
 8009fea:	bf00      	nop
 8009fec:	e002      	b.n	8009ff4 <AT_ESP8266_ND+0x351c>
			break;
 8009fee:	bf00      	nop
 8009ff0:	e000      	b.n	8009ff4 <AT_ESP8266_ND+0x351c>
			break;
 8009ff2:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8009ff4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ff8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
		a->_n_orig=0;
 800a004:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a008:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2200      	movs	r2, #0
 800a010:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

		return (a->_estado);
 800a014:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a018:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 800a022:	4618      	mov	r0, r3
 800a024:	f507 7715 	add.w	r7, r7, #596	; 0x254
 800a028:	46bd      	mov	sp, r7
 800a02a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a02c <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a03e:	f240 328d 	movw	r2, #909	; 0x38d
 800a042:	4293      	cmp	r3, r2
 800a044:	f001 8449 	beq.w	800b8da <WiFi_Conn_ND+0x18ae>
 800a048:	f240 328d 	movw	r2, #909	; 0x38d
 800a04c:	4293      	cmp	r3, r2
 800a04e:	f301 84de 	bgt.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a052:	f240 3289 	movw	r2, #905	; 0x389
 800a056:	4293      	cmp	r3, r2
 800a058:	f001 83b6 	beq.w	800b7c8 <WiFi_Conn_ND+0x179c>
 800a05c:	f240 3289 	movw	r2, #905	; 0x389
 800a060:	4293      	cmp	r3, r2
 800a062:	f301 84d4 	bgt.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a066:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800a06a:	f001 82a5 	beq.w	800b5b8 <WiFi_Conn_ND+0x158c>
 800a06e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800a072:	f301 84cc 	bgt.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a076:	f240 3229 	movw	r2, #809	; 0x329
 800a07a:	4293      	cmp	r3, r2
 800a07c:	f301 84c7 	bgt.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a080:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800a084:	f280 80a5 	bge.w	800a1d2 <WiFi_Conn_ND+0x1a6>
 800a088:	f240 22c5 	movw	r2, #709	; 0x2c5
 800a08c:	4293      	cmp	r3, r2
 800a08e:	f000 87d9 	beq.w	800b044 <WiFi_Conn_ND+0x1018>
 800a092:	f240 22c5 	movw	r2, #709	; 0x2c5
 800a096:	4293      	cmp	r3, r2
 800a098:	f301 84b9 	bgt.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a09c:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	f000 8750 	beq.w	800af46 <WiFi_Conn_ND+0xf1a>
 800a0a6:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	f301 84af 	bgt.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a0b0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a0b4:	f000 866b 	beq.w	800ad8e <WiFi_Conn_ND+0xd62>
 800a0b8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a0bc:	f301 84a7 	bgt.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a0c0:	f240 2261 	movw	r2, #609	; 0x261
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	f000 85ec 	beq.w	800aca2 <WiFi_Conn_ND+0xc76>
 800a0ca:	f240 2261 	movw	r2, #609	; 0x261
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	f301 849d 	bgt.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a0d4:	f240 225d 	movw	r2, #605	; 0x25d
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	f000 8582 	beq.w	800abe2 <WiFi_Conn_ND+0xbb6>
 800a0de:	f240 225d 	movw	r2, #605	; 0x25d
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	f301 8493 	bgt.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a0e8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a0ec:	f000 8500 	beq.w	800aaf0 <WiFi_Conn_ND+0xac4>
 800a0f0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a0f4:	f301 848b 	bgt.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a0f8:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	f000 8496 	beq.w	800aa2e <WiFi_Conn_ND+0xa02>
 800a102:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800a106:	f281 8482 	bge.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a10a:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a10e:	4293      	cmp	r3, r2
 800a110:	f000 844c 	beq.w	800a9ac <WiFi_Conn_ND+0x980>
 800a114:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 800a118:	f281 8479 	bge.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a11c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a120:	f000 83d7 	beq.w	800a8d2 <WiFi_Conn_ND+0x8a6>
 800a124:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a128:	f301 8471 	bgt.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a12c:	f240 1299 	movw	r2, #409	; 0x199
 800a130:	4293      	cmp	r3, r2
 800a132:	f000 8378 	beq.w	800a826 <WiFi_Conn_ND+0x7fa>
 800a136:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 800a13a:	f281 8468 	bge.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a13e:	f240 1295 	movw	r2, #405	; 0x195
 800a142:	4293      	cmp	r3, r2
 800a144:	f000 8333 	beq.w	800a7ae <WiFi_Conn_ND+0x782>
 800a148:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 800a14c:	f281 845f 	bge.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a150:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a154:	f000 82aa 	beq.w	800a6ac <WiFi_Conn_ND+0x680>
 800a158:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a15c:	f301 8457 	bgt.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a160:	f240 1235 	movw	r2, #309	; 0x135
 800a164:	4293      	cmp	r3, r2
 800a166:	f000 827b 	beq.w	800a660 <WiFi_Conn_ND+0x634>
 800a16a:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800a16e:	f281 844e 	bge.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a172:	f240 1231 	movw	r2, #305	; 0x131
 800a176:	4293      	cmp	r3, r2
 800a178:	f000 826d 	beq.w	800a656 <WiFi_Conn_ND+0x62a>
 800a17c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800a180:	f281 8445 	bge.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a184:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a188:	f000 8211 	beq.w	800a5ae <WiFi_Conn_ND+0x582>
 800a18c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a190:	f301 843d 	bgt.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a194:	2bd1      	cmp	r3, #209	; 0xd1
 800a196:	f000 81a5 	beq.w	800a4e4 <WiFi_Conn_ND+0x4b8>
 800a19a:	2bd1      	cmp	r3, #209	; 0xd1
 800a19c:	f301 8437 	bgt.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a1a0:	2bcd      	cmp	r3, #205	; 0xcd
 800a1a2:	f000 8175 	beq.w	800a490 <WiFi_Conn_ND+0x464>
 800a1a6:	2bcd      	cmp	r3, #205	; 0xcd
 800a1a8:	f301 8431 	bgt.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a1ac:	2bc8      	cmp	r3, #200	; 0xc8
 800a1ae:	f000 80f1 	beq.w	800a394 <WiFi_Conn_ND+0x368>
 800a1b2:	2bc8      	cmp	r3, #200	; 0xc8
 800a1b4:	f301 842b 	bgt.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a1b8:	2b6d      	cmp	r3, #109	; 0x6d
 800a1ba:	f000 80b3 	beq.w	800a324 <WiFi_Conn_ND+0x2f8>
 800a1be:	2b6d      	cmp	r3, #109	; 0x6d
 800a1c0:	f301 8425 	bgt.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a1c4:	2b64      	cmp	r3, #100	; 0x64
 800a1c6:	d021      	beq.n	800a20c <WiFi_Conn_ND+0x1e0>
 800a1c8:	2b69      	cmp	r3, #105	; 0x69
 800a1ca:	f000 8096 	beq.w	800a2fa <WiFi_Conn_ND+0x2ce>
 800a1ce:	f001 bc1e 	b.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a1d2:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800a1d6:	2b09      	cmp	r3, #9
 800a1d8:	f201 8419 	bhi.w	800ba0e <WiFi_Conn_ND+0x19e2>
 800a1dc:	a201      	add	r2, pc, #4	; (adr r2, 800a1e4 <WiFi_Conn_ND+0x1b8>)
 800a1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e2:	bf00      	nop
 800a1e4:	0800b15b 	.word	0x0800b15b
 800a1e8:	0800ba0f 	.word	0x0800ba0f
 800a1ec:	0800ba0f 	.word	0x0800ba0f
 800a1f0:	0800ba0f 	.word	0x0800ba0f
 800a1f4:	0800ba0f 	.word	0x0800ba0f
 800a1f8:	0800b229 	.word	0x0800b229
 800a1fc:	0800b2d3 	.word	0x0800b2d3
 800a200:	0800b37d 	.word	0x0800b37d
 800a204:	0800b427 	.word	0x0800b427
 800a208:	0800b4d1 	.word	0x0800b4d1
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a212:	2b64      	cmp	r3, #100	; 0x64
 800a214:	d046      	beq.n	800a2a4 <WiFi_Conn_ND+0x278>
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d041      	beq.n	800a2a4 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a226:	2b1c      	cmp	r3, #28
 800a228:	d03c      	beq.n	800a2a4 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a230:	2b02      	cmp	r3, #2
 800a232:	d037      	beq.n	800a2a4 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a23a:	2b04      	cmp	r3, #4
 800a23c:	d032      	beq.n	800a2a4 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a244:	2b13      	cmp	r3, #19
 800a246:	d02d      	beq.n	800a2a4 <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f7fc faaf 	bl	80067ac <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a254:	2b01      	cmp	r3, #1
 800a256:	d14e      	bne.n	800a2f6 <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f7fc fc3d 	bl	8006ad8 <AT_ESP8266_ND>
 800a25e:	4602      	mov	r2, r0
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2200      	movs	r2, #0
 800a26a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a274:	2b01      	cmp	r3, #1
 800a276:	d109      	bne.n	800a28c <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a284:	4619      	mov	r1, r3
 800a286:	4610      	mov	r0, r2
 800a288:	f7f7 f9b0 	bl	80015ec <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a298:	b29a      	uxth	r2, r3
 800a29a:	2364      	movs	r3, #100	; 0x64
 800a29c:	68b8      	ldr	r0, [r7, #8]
 800a29e:	f7fb f9e1 	bl	8005664 <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 800a2a2:	e028      	b.n	800a2f6 <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d004      	beq.n	800a2b8 <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 800a2b4:	2b1c      	cmp	r3, #28
 800a2b6:	d103      	bne.n	800a2c0 <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	226d      	movs	r2, #109	; 0x6d
 800a2bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d00f      	beq.n	800a2ea <WiFi_Conn_ND+0x2be>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2d0:	2b04      	cmp	r3, #4
 800a2d2:	d00a      	beq.n	800a2ea <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2da:	2b0b      	cmp	r3, #11
 800a2dc:	d005      	beq.n	800a2ea <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2e4:	2b0c      	cmp	r3, #12
 800a2e6:	f041 8363 	bne.w	800b9b0 <WiFi_Conn_ND+0x1984>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2269      	movs	r2, #105	; 0x69
 800a2ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 800a2f2:	f001 bb5d 	b.w	800b9b0 <WiFi_Conn_ND+0x1984>
 800a2f6:	f001 bb5b 	b.w	800b9b0 <WiFi_Conn_ND+0x1984>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f7fc fa56 	bl	80067ac <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2264      	movs	r2, #100	; 0x64
 800a304:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2200      	movs	r2, #0
 800a314:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 800a320:	f001 bb75 	b.w	800ba0e <WiFi_Conn_ND+0x19e2>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00c      	beq.n	800a348 <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f7fc fa68 	bl	8006804 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a33a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2200      	movs	r2, #0
 800a342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800a346:	e00e      	b.n	800a366 <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f7fc fa45 	bl	80067d8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	22c8      	movs	r2, #200	; 0xc8
 800a352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2200      	movs	r2, #0
 800a35a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2200      	movs	r2, #0
 800a362:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a36c:	2b04      	cmp	r3, #4
 800a36e:	f041 8321 	bne.w	800b9b4 <WiFi_Conn_ND+0x1988>
					{
						Cambiar_CWMODE(b);
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f7fc fa1a 	bl	80067ac <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2264      	movs	r2, #100	; 0x64
 800a37c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2200      	movs	r2, #0
 800a384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a390:	f001 bb10 	b.w	800b9b4 <WiFi_Conn_ND+0x1988>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a39a:	2bc8      	cmp	r3, #200	; 0xc8
 800a39c:	d04f      	beq.n	800a43e <WiFi_Conn_ND+0x412>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d04a      	beq.n	800a43e <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d045      	beq.n	800a43e <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3b8:	2b03      	cmp	r3, #3
 800a3ba:	d040      	beq.n	800a43e <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3c2:	2b04      	cmp	r3, #4
 800a3c4:	d03b      	beq.n	800a43e <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3cc:	2b0a      	cmp	r3, #10
 800a3ce:	d036      	beq.n	800a43e <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3d6:	2b0b      	cmp	r3, #11
 800a3d8:	d031      	beq.n	800a43e <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3e0:	2b0c      	cmp	r3, #12
 800a3e2:	d02c      	beq.n	800a43e <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f7fc f9f7 	bl	80067d8 <ConectarWIFI>
						if(b->_enviaruart==1)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d124      	bne.n	800a43e <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f7fc fb6f 	bl	8006ad8 <AT_ESP8266_ND>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2200      	movs	r2, #0
 800a406:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a410:	2b01      	cmp	r3, #1
 800a412:	d109      	bne.n	800a428 <WiFi_Conn_ND+0x3fc>
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a420:	4619      	mov	r1, r3
 800a422:	4610      	mov	r0, r2
 800a424:	f7f7 f8e2 	bl	80015ec <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a434:	b29a      	uxth	r2, r3
 800a436:	2364      	movs	r3, #100	; 0x64
 800a438:	68b8      	ldr	r0, [r7, #8]
 800a43a:	f7fb f913 	bl	8005664 <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a444:	2b01      	cmp	r3, #1
 800a446:	d004      	beq.n	800a452 <WiFi_Conn_ND+0x426>
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a44e:	2b0c      	cmp	r3, #12
 800a450:	d103      	bne.n	800a45a <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	22d1      	movs	r2, #209	; 0xd1
 800a456:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)||(b->_estado==at_wifi_disconnect)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a460:	2b02      	cmp	r3, #2
 800a462:	d00f      	beq.n	800a484 <WiFi_Conn_ND+0x458>
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a46a:	2b03      	cmp	r3, #3
 800a46c:	d00a      	beq.n	800a484 <WiFi_Conn_ND+0x458>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a474:	2b20      	cmp	r3, #32
 800a476:	d005      	beq.n	800a484 <WiFi_Conn_ND+0x458>
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a47e:	2b0a      	cmp	r3, #10
 800a480:	f041 829a 	bne.w	800b9b8 <WiFi_Conn_ND+0x198c>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	22cd      	movs	r2, #205	; 0xcd
 800a488:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a48c:	f001 ba94 	b.w	800b9b8 <WiFi_Conn_ND+0x198c>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 800a490:	f241 3088 	movw	r0, #5000	; 0x1388
 800a494:	f7f8 fc32 	bl	8002cfc <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f7fc f99d 	bl	80067d8 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	22c8      	movs	r2, #200	; 0xc8
 800a4a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4bc:	2b04      	cmp	r3, #4
 800a4be:	f041 827d 	bne.w	800b9bc <WiFi_Conn_ND+0x1990>
					{
						Cambiar_CWMODE(b);
 800a4c2:	68f8      	ldr	r0, [r7, #12]
 800a4c4:	f7fc f972 	bl	80067ac <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2264      	movs	r2, #100	; 0x64
 800a4cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a4e0:	f001 ba6c 	b.w	800b9bc <WiFi_Conn_ND+0x1990>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d108      	bne.n	800a508 <WiFi_Conn_ND+0x4dc>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f240 3229 	movw	r2, #809	; 0x329
 800a4fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2200      	movs	r2, #0
 800a504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a50e:	2b0a      	cmp	r3, #10
 800a510:	d009      	beq.n	800a526 <WiFi_Conn_ND+0x4fa>
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a518:	2b0d      	cmp	r3, #13
 800a51a:	d004      	beq.n	800a526 <WiFi_Conn_ND+0x4fa>
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a522:	2b03      	cmp	r3, #3
 800a524:	d10a      	bne.n	800a53c <WiFi_Conn_ND+0x510>
				{
					ConectarWIFI(b);
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f7fc f956 	bl	80067d8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	22c8      	movs	r2, #200	; 0xc8
 800a530:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2200      	movs	r2, #0
 800a538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a542:	2b04      	cmp	r3, #4
 800a544:	d10e      	bne.n	800a564 <WiFi_Conn_ND+0x538>
					{
						Cambiar_CWMODE(b);
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	f7fc f930 	bl	80067ac <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2264      	movs	r2, #100	; 0x64
 800a550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2200      	movs	r2, #0
 800a558:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d011      	beq.n	800a592 <WiFi_Conn_ND+0x566>
				{//
					CrearServidorTCP(b);
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f7fc f9a0 	bl	80068b4 <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a57a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2200      	movs	r2, #0
 800a582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 800a58e:	f001 ba3e 	b.w	800ba0e <WiFi_Conn_ND+0x19e2>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f7fc f936 	bl	8006804 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a59e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a5aa:	f001 ba30 	b.w	800ba0e <WiFi_Conn_ND+0x19e2>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5b4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a5b8:	d03b      	beq.n	800a632 <WiFi_Conn_ND+0x606>
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5c0:	2b04      	cmp	r3, #4
 800a5c2:	d036      	beq.n	800a632 <WiFi_Conn_ND+0x606>
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ca:	2b0a      	cmp	r3, #10
 800a5cc:	d031      	beq.n	800a632 <WiFi_Conn_ND+0x606>
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d4:	2b0d      	cmp	r3, #13
 800a5d6:	d02c      	beq.n	800a632 <WiFi_Conn_ND+0x606>
				{
						DesconectarWIFI(b);
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	f7fc f93f 	bl	800685c <DesconectarWIFI>
						if(b->_enviaruart==1)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d124      	bne.n	800a632 <WiFi_Conn_ND+0x606>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	f7fc fa75 	bl	8006ad8 <AT_ESP8266_ND>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a604:	2b01      	cmp	r3, #1
 800a606:	d109      	bne.n	800a61c <WiFi_Conn_ND+0x5f0>
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a614:	4619      	mov	r1, r3
 800a616:	4610      	mov	r0, r2
 800a618:	f7f6 ffe8 	bl	80015ec <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a628:	b29a      	uxth	r2, r3
 800a62a:	2364      	movs	r3, #100	; 0x64
 800a62c:	68b8      	ldr	r0, [r7, #8]
 800a62e:	f7fb f819 	bl	8005664 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a638:	2b0a      	cmp	r3, #10
 800a63a:	d005      	beq.n	800a648 <WiFi_Conn_ND+0x61c>
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a642:	2b0d      	cmp	r3, #13
 800a644:	f041 81bc 	bne.w	800b9c0 <WiFi_Conn_ND+0x1994>
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f240 1235 	movw	r2, #309	; 0x135
 800a64e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a652:	f001 b9b5 	b.w	800b9c0 <WiFi_Conn_ND+0x1994>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f7fc f892 	bl	8006780 <NOP>
			}
			break;
 800a65c:	f001 b9d7 	b.w	800ba0e <WiFi_Conn_ND+0x19e2>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2200      	movs	r2, #0
 800a664:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

				ConectarWIFI(b);
 800a668:	68f8      	ldr	r0, [r7, #12]
 800a66a:	f7fc f8b5 	bl	80067d8 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	22c8      	movs	r2, #200	; 0xc8
 800a672:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a684:	2b04      	cmp	r3, #4
 800a686:	f041 819d 	bne.w	800b9c4 <WiFi_Conn_ND+0x1998>
					{
						Cambiar_CWMODE(b);
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f7fc f88e 	bl	80067ac <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2264      	movs	r2, #100	; 0x64
 800a694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a6a8:	f001 b98c 	b.w	800b9c4 <WiFi_Conn_ND+0x1998>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6b2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a6b6:	d04f      	beq.n	800a758 <WiFi_Conn_ND+0x72c>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6be:	2b04      	cmp	r3, #4
 800a6c0:	d04a      	beq.n	800a758 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_ok)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d045      	beq.n	800a758 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_error)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d040      	beq.n	800a758 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_multiple_conn_ok)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6dc:	2b07      	cmp	r3, #7
 800a6de:	d03b      	beq.n	800a758 <WiFi_Conn_ND+0x72c>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6e6:	2b08      	cmp	r3, #8
 800a6e8:	d036      	beq.n	800a758 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_multiple_conn_err)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6f0:	2b1e      	cmp	r3, #30
 800a6f2:	d031      	beq.n	800a758 <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6fa:	2b1f      	cmp	r3, #31
 800a6fc:	d02c      	beq.n	800a758 <WiFi_Conn_ND+0x72c>
				{
						MUX(b);
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f7fc f880 	bl	8006804 <MUX>
						if(b->_enviaruart==1)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d124      	bne.n	800a758 <WiFi_Conn_ND+0x72c>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f7fc f9e2 	bl	8006ad8 <AT_ESP8266_ND>
 800a714:	4602      	mov	r2, r0
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d109      	bne.n	800a742 <WiFi_Conn_ND+0x716>
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a73a:	4619      	mov	r1, r3
 800a73c:	4610      	mov	r0, r2
 800a73e:	f7f6 ff55 	bl	80015ec <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a74e:	b29a      	uxth	r2, r3
 800a750:	2364      	movs	r3, #100	; 0x64
 800a752:	68b8      	ldr	r0, [r7, #8]
 800a754:	f7fa ff86 	bl	8005664 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d009      	beq.n	800a776 <WiFi_Conn_ND+0x74a>
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a768:	2b07      	cmp	r3, #7
 800a76a:	d004      	beq.n	800a776 <WiFi_Conn_ND+0x74a>
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a772:	2b08      	cmp	r3, #8
 800a774:	d104      	bne.n	800a780 <WiFi_Conn_ND+0x754>
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f240 1299 	movw	r2, #409	; 0x199
 800a77c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err))
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a786:	2b02      	cmp	r3, #2
 800a788:	d00a      	beq.n	800a7a0 <WiFi_Conn_ND+0x774>
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a790:	2b1e      	cmp	r3, #30
 800a792:	d005      	beq.n	800a7a0 <WiFi_Conn_ND+0x774>
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a79a:	2b1f      	cmp	r3, #31
 800a79c:	f041 8114 	bne.w	800b9c8 <WiFi_Conn_ND+0x199c>
					{
					b->_estado_conexion=MUX_CONN_ERROR;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f240 1295 	movw	r2, #405	; 0x195
 800a7a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				//----Condiciones de cambio de estado
			}
			break;
 800a7aa:	f001 b90d 	b.w	800b9c8 <WiFi_Conn_ND+0x199c>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f7fb ffe6 	bl	8006780 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7ba:	2b04      	cmp	r3, #4
 800a7bc:	d112      	bne.n	800a7e4 <WiFi_Conn_ND+0x7b8>
				{
					Cambiar_CWMODE(b);
 800a7be:	68f8      	ldr	r0, [r7, #12]
 800a7c0:	f7fb fff4 	bl	80067ac <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2264      	movs	r2, #100	; 0x64
 800a7c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7ea:	2b0a      	cmp	r3, #10
 800a7ec:	d00a      	beq.n	800a804 <WiFi_Conn_ND+0x7d8>
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7f4:	2b0d      	cmp	r3, #13
 800a7f6:	d005      	beq.n	800a804 <WiFi_Conn_ND+0x7d8>
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7fe:	2b03      	cmp	r3, #3
 800a800:	f041 80e4 	bne.w	800b9cc <WiFi_Conn_ND+0x19a0>
				{
					ConectarWIFI(b);
 800a804:	68f8      	ldr	r0, [r7, #12]
 800a806:	f7fb ffe7 	bl	80067d8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	22c8      	movs	r2, #200	; 0xc8
 800a80e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2200      	movs	r2, #0
 800a816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 800a822:	f001 b8d3 	b.w	800b9cc <WiFi_Conn_ND+0x19a0>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a826:	68f8      	ldr	r0, [r7, #12]
 800a828:	f7fb ffaa 	bl	8006780 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2200      	movs	r2, #0
 800a830:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a83a:	2b04      	cmp	r3, #4
 800a83c:	d10e      	bne.n	800a85c <WiFi_Conn_ND+0x830>
					{
						Cambiar_CWMODE(b);
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f7fb ffb4 	bl	80067ac <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2264      	movs	r2, #100	; 0x64
 800a848:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2200      	movs	r2, #0
 800a850:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2200      	movs	r2, #0
 800a858:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a862:	2b0a      	cmp	r3, #10
 800a864:	d009      	beq.n	800a87a <WiFi_Conn_ND+0x84e>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a86c:	2b0d      	cmp	r3, #13
 800a86e:	d004      	beq.n	800a87a <WiFi_Conn_ND+0x84e>
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a876:	2b03      	cmp	r3, #3
 800a878:	d10a      	bne.n	800a890 <WiFi_Conn_ND+0x864>
					{
						ConectarWIFI(b);
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	f7fb ffac 	bl	80067d8 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	22c8      	movs	r2, #200	; 0xc8
 800a884:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}
					if(b->_NO_IP==0)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f8d3 3d58 	ldr.w	r3, [r3, #3416]	; 0xd58
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10d      	bne.n	800a8b6 <WiFi_Conn_ND+0x88a>
					{
						IPDef(b);
 800a89a:	68f8      	ldr	r0, [r7, #12]
 800a89c:	f7fb ffc8 	bl	8006830 <IPDef>
						b->_estado_conexion=DEF_IP_EN_CURSO;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a8a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_estado=0;
					}


			}
			break;
 800a8b2:	f001 b8ac 	b.w	800ba0e <WiFi_Conn_ND+0x19e2>
						IPDef(b);
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f7fb ffba 	bl	8006830 <IPDef>
						b->_estado_conexion=DEF_IP_OK;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a8c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a8ce:	f001 b89e 	b.w	800ba0e <WiFi_Conn_ND+0x19e2>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a8dc:	d045      	beq.n	800a96a <WiFi_Conn_ND+0x93e>
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8e4:	2b04      	cmp	r3, #4
 800a8e6:	d040      	beq.n	800a96a <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_ok)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d03b      	beq.n	800a96a <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_error)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	d036      	beq.n	800a96a <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_def_ip_ok)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a902:	2b1b      	cmp	r3, #27
 800a904:	d031      	beq.n	800a96a <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a90c:	2b21      	cmp	r3, #33	; 0x21
 800a90e:	d02c      	beq.n	800a96a <WiFi_Conn_ND+0x93e>
				{
						IPDef(b);
 800a910:	68f8      	ldr	r0, [r7, #12]
 800a912:	f7fb ff8d 	bl	8006830 <IPDef>
						if(b->_enviaruart==1)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d124      	bne.n	800a96a <WiFi_Conn_ND+0x93e>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f7fc f8d9 	bl	8006ad8 <AT_ESP8266_ND>
 800a926:	4602      	mov	r2, r0
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2200      	movs	r2, #0
 800a932:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d109      	bne.n	800a954 <WiFi_Conn_ND+0x928>
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a94c:	4619      	mov	r1, r3
 800a94e:	4610      	mov	r0, r2
 800a950:	f7f6 fe4c 	bl	80015ec <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800a960:	b29a      	uxth	r2, r3
 800a962:	2364      	movs	r3, #100	; 0x64
 800a964:	68b8      	ldr	r0, [r7, #8]
 800a966:	f7fa fe7d 	bl	8005664 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a970:	2b01      	cmp	r3, #1
 800a972:	d004      	beq.n	800a97e <WiFi_Conn_ND+0x952>
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a97a:	2b1b      	cmp	r3, #27
 800a97c:	d104      	bne.n	800a988 <WiFi_Conn_ND+0x95c>
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a984:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a98e:	2b02      	cmp	r3, #2
 800a990:	d005      	beq.n	800a99e <WiFi_Conn_ND+0x972>
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a998:	2b21      	cmp	r3, #33	; 0x21
 800a99a:	f041 8019 	bne.w	800b9d0 <WiFi_Conn_ND+0x19a4>
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a9a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a9a8:	f001 b812 	b.w	800b9d0 <WiFi_Conn_ND+0x19a4>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	f7fb fee7 	bl	8006780 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9b8:	2b04      	cmp	r3, #4
 800a9ba:	d004      	beq.n	800a9c6 <WiFi_Conn_ND+0x99a>
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d112      	bne.n	800a9ec <WiFi_Conn_ND+0x9c0>
				{
					Cambiar_CWMODE(b);
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f7fb fef0 	bl	80067ac <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2264      	movs	r2, #100	; 0x64
 800a9d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9f2:	2b0a      	cmp	r3, #10
 800a9f4:	d00a      	beq.n	800aa0c <WiFi_Conn_ND+0x9e0>
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9fc:	2b0d      	cmp	r3, #13
 800a9fe:	d005      	beq.n	800aa0c <WiFi_Conn_ND+0x9e0>
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa06:	2b03      	cmp	r3, #3
 800aa08:	f040 87e4 	bne.w	800b9d4 <WiFi_Conn_ND+0x19a8>
				{
					ConectarWIFI(b);
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f7fb fee3 	bl	80067d8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	22c8      	movs	r2, #200	; 0xc8
 800aa16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2200      	movs	r2, #0
 800aa26:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 800aa2a:	f000 bfd3 	b.w	800b9d4 <WiFi_Conn_ND+0x19a8>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f7fb fea6 	bl	8006780 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa3a:	2b04      	cmp	r3, #4
 800aa3c:	d112      	bne.n	800aa64 <WiFi_Conn_ND+0xa38>
					{
						Cambiar_CWMODE(b);
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f7fb feb4 	bl	80067ac <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2264      	movs	r2, #100	; 0x64
 800aa48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa6a:	2b0a      	cmp	r3, #10
 800aa6c:	d009      	beq.n	800aa82 <WiFi_Conn_ND+0xa56>
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa74:	2b0d      	cmp	r3, #13
 800aa76:	d004      	beq.n	800aa82 <WiFi_Conn_ND+0xa56>
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa7e:	2b03      	cmp	r3, #3
 800aa80:	d10e      	bne.n	800aaa0 <WiFi_Conn_ND+0xa74>
					{
						ConectarWIFI(b);
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f7fb fea8 	bl	80067d8 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	22c8      	movs	r2, #200	; 0xc8
 800aa8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d111      	bne.n	800aace <WiFi_Conn_ND+0xaa2>
					{
						ConectarTCP(b);
 800aaaa:	68f8      	ldr	r0, [r7, #12]
 800aaac:	f7fb feec 	bl	8006888 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aab6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2200      	movs	r2, #0
 800aabe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2200      	movs	r2, #0
 800aac6:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
						b->_estado=0;//
						b->_n_orig=0;// //Borro el vector RX

					}
			}
			break;
 800aaca:	f000 bfa0 	b.w	800ba0e <WiFi_Conn_ND+0x19e2>
						ConectarWIFI(b);//
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f7fb fe82 	bl	80067d8 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	22c8      	movs	r2, #200	; 0xc8
 800aad8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			break;
 800aaec:	f000 bf8f 	b.w	800ba0e <WiFi_Conn_ND+0x19e2>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaf6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800aafa:	d04a      	beq.n	800ab92 <WiFi_Conn_ND+0xb66>
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab02:	2b02      	cmp	r3, #2
 800ab04:	d045      	beq.n	800ab92 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_ok)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d040      	beq.n	800ab92 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_wifi_disconnect)
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab16:	2b0a      	cmp	r3, #10
 800ab18:	d03b      	beq.n	800ab92 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab20:	2b0e      	cmp	r3, #14
 800ab22:	d036      	beq.n	800ab92 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_conectado)
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab2a:	2b0f      	cmp	r3, #15
 800ab2c:	d031      	beq.n	800ab92 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab34:	2b10      	cmp	r3, #16
 800ab36:	d02c      	beq.n	800ab92 <WiFi_Conn_ND+0xb66>
				{
					ConectarTCP(b);
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f7fb fea5 	bl	8006888 <ConectarTCP>
						if(b->_enviaruart==1)
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d124      	bne.n	800ab92 <WiFi_Conn_ND+0xb66>
							{
								b->_estado=AT_ESP8266_ND(b);
 800ab48:	68f8      	ldr	r0, [r7, #12]
 800ab4a:	f7fb ffc5 	bl	8006ad8 <AT_ESP8266_ND>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d109      	bne.n	800ab7c <WiFi_Conn_ND+0xb50>
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800ab74:	4619      	mov	r1, r3
 800ab76:	4610      	mov	r0, r2
 800ab78:	f7f6 fd38 	bl	80015ec <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800ab88:	b29a      	uxth	r2, r3
 800ab8a:	2364      	movs	r3, #100	; 0x64
 800ab8c:	68b8      	ldr	r0, [r7, #8]
 800ab8e:	f7fa fd69 	bl	8005664 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d009      	beq.n	800abb0 <WiFi_Conn_ND+0xb84>
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aba2:	2b0e      	cmp	r3, #14
 800aba4:	d004      	beq.n	800abb0 <WiFi_Conn_ND+0xb84>
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abac:	2b0f      	cmp	r3, #15
 800abae:	d106      	bne.n	800abbe <WiFi_Conn_ND+0xb92>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f240 2261 	movw	r2, #609	; 0x261
 800abb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800abba:	f000 bf0d 	b.w	800b9d8 <WiFi_Conn_ND+0x19ac>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	d005      	beq.n	800abd4 <WiFi_Conn_ND+0xba8>
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abce:	2b10      	cmp	r3, #16
 800abd0:	f040 8702 	bne.w	800b9d8 <WiFi_Conn_ND+0x19ac>
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f240 225d 	movw	r2, #605	; 0x25d
 800abda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800abde:	f000 befb 	b.w	800b9d8 <WiFi_Conn_ND+0x19ac>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f7fb fdcc 	bl	8006780 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abee:	2b04      	cmp	r3, #4
 800abf0:	d112      	bne.n	800ac18 <WiFi_Conn_ND+0xbec>
				{
					Cambiar_CWMODE(b);
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f7fb fdda 	bl	80067ac <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2264      	movs	r2, #100	; 0x64
 800abfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2200      	movs	r2, #0
 800ac14:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_tcp_noip_err)||(b->_estado==at_error)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac1e:	2b0a      	cmp	r3, #10
 800ac20:	d013      	beq.n	800ac4a <WiFi_Conn_ND+0xc1e>
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac28:	2b0d      	cmp	r3, #13
 800ac2a:	d00e      	beq.n	800ac4a <WiFi_Conn_ND+0xc1e>
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac32:	2b22      	cmp	r3, #34	; 0x22
 800ac34:	d009      	beq.n	800ac4a <WiFi_Conn_ND+0xc1e>
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac3c:	2b02      	cmp	r3, #2
 800ac3e:	d004      	beq.n	800ac4a <WiFi_Conn_ND+0xc1e>
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac46:	2b03      	cmp	r3, #3
 800ac48:	d10e      	bne.n	800ac68 <WiFi_Conn_ND+0xc3c>
				{
					ConectarWIFI(b);
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f7fb fdc4 	bl	80067d8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	22c8      	movs	r2, #200	; 0xc8
 800ac54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2200      	movs	r2, #0
 800ac64:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}

				if((b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac6e:	2b10      	cmp	r3, #16
 800ac70:	d005      	beq.n	800ac7e <WiFi_Conn_ND+0xc52>
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac78:	2b0e      	cmp	r3, #14
 800ac7a:	f040 86af 	bne.w	800b9dc <WiFi_Conn_ND+0x19b0>
				{
					ConectarTCP(b);
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	f7fb fe02 	bl	8006888 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ac8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 800ac9e:	f000 be9d 	b.w	800b9dc <WiFi_Conn_ND+0x19b0>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800aca2:	68f8      	ldr	r0, [r7, #12]
 800aca4:	f7fb fd6c 	bl	8006780 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acae:	2b04      	cmp	r3, #4
 800acb0:	d112      	bne.n	800acd8 <WiFi_Conn_ND+0xcac>
					{
						Cambiar_CWMODE(b);
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f7fb fd7a 	bl	80067ac <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2264      	movs	r2, #100	; 0x64
 800acbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2200      	movs	r2, #0
 800acc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2200      	movs	r2, #0
 800accc:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2200      	movs	r2, #0
 800acd4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acde:	2b0a      	cmp	r3, #10
 800ace0:	d009      	beq.n	800acf6 <WiFi_Conn_ND+0xcca>
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ace8:	2b0d      	cmp	r3, #13
 800acea:	d004      	beq.n	800acf6 <WiFi_Conn_ND+0xcca>
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acf2:	2b03      	cmp	r3, #3
 800acf4:	d10e      	bne.n	800ad14 <WiFi_Conn_ND+0xce8>
					{
						ConectarWIFI(b);
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	f7fb fd6e 	bl	80067d8 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	22c8      	movs	r2, #200	; 0xc8
 800ad00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2200      	movs	r2, #0
 800ad08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad1a:	2b02      	cmp	r3, #2
 800ad1c:	d004      	beq.n	800ad28 <WiFi_Conn_ND+0xcfc>
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad24:	2b10      	cmp	r3, #16
 800ad26:	d10f      	bne.n	800ad48 <WiFi_Conn_ND+0xd1c>
					{
						ConectarTCP(b);
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f7fb fdad 	bl	8006888 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ad34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad4e:	2b0e      	cmp	r3, #14
 800ad50:	d005      	beq.n	800ad5e <WiFi_Conn_ND+0xd32>
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad58:	2b0f      	cmp	r3, #15
 800ad5a:	f040 8641 	bne.w	800b9e0 <WiFi_Conn_ND+0x19b4>
					{
						if(b->_automatizacion >= WF_SEND )
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ad64:	2b02      	cmp	r3, #2
 800ad66:	f240 863b 	bls.w	800b9e0 <WiFi_Conn_ND+0x19b4>
						{
							EnviarDatos(b);
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f7fb fdce 	bl	800690c <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800ad76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
						}
					}
			}
			break;
 800ad8a:	f000 be29 	b.w	800b9e0 <WiFi_Conn_ND+0x19b4>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad94:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800ad98:	d054      	beq.n	800ae44 <WiFi_Conn_ND+0xe18>
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ada0:	2b02      	cmp	r3, #2
 800ada2:	d04f      	beq.n	800ae44 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_wifi_disconnect)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adaa:	2b0a      	cmp	r3, #10
 800adac:	d04a      	beq.n	800ae44 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_desconectado)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adb4:	2b10      	cmp	r3, #16
 800adb6:	d045      	beq.n	800ae44 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_snd_err)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adbe:	2b11      	cmp	r3, #17
 800adc0:	d040      	beq.n	800ae44 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_ok_to_send)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adc8:	2b14      	cmp	r3, #20
 800adca:	d03b      	beq.n	800ae44 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800add2:	2b12      	cmp	r3, #18
 800add4:	d036      	beq.n	800ae44 <WiFi_Conn_ND+0xe18>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800addc:	2b02      	cmp	r3, #2
 800adde:	d907      	bls.n	800adf0 <WiFi_Conn_ND+0xdc4>
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d002      	beq.n	800adf0 <WiFi_Conn_ND+0xdc4>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f7fb fd8e 	bl	800690c <EnviarDatos>
					}
						if(b->_enviaruart==1)
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d124      	bne.n	800ae44 <WiFi_Conn_ND+0xe18>
							{
								b->_estado=AT_ESP8266_ND(b);
 800adfa:	68f8      	ldr	r0, [r7, #12]
 800adfc:	f7fb fe6c 	bl	8006ad8 <AT_ESP8266_ND>
 800ae00:	4602      	mov	r2, r0
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d109      	bne.n	800ae2e <WiFi_Conn_ND+0xe02>
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800ae26:	4619      	mov	r1, r3
 800ae28:	4610      	mov	r0, r2
 800ae2a:	f7f6 fbdf 	bl	80015ec <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800ae3a:	b29a      	uxth	r2, r3
 800ae3c:	2364      	movs	r3, #100	; 0x64
 800ae3e:	68b8      	ldr	r0, [r7, #8]
 800ae40:	f7fa fc10 	bl	8005664 <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae4a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800ae4e:	d145      	bne.n	800aedc <WiFi_Conn_ND+0xeb0>
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d140      	bne.n	800aedc <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_error)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae60:	2b02      	cmp	r3, #2
 800ae62:	d03b      	beq.n	800aedc <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_tcp_noip_err)
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae6a:	2b22      	cmp	r3, #34	; 0x22
 800ae6c:	d036      	beq.n	800aedc <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_wifi_disconnect)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae74:	2b0a      	cmp	r3, #10
 800ae76:	d031      	beq.n	800aedc <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_tcp_desconectado)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae7e:	2b10      	cmp	r3, #16
 800ae80:	d02c      	beq.n	800aedc <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_fail)		//240419
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae88:	2b03      	cmp	r3, #3
 800ae8a:	d027      	beq.n	800aedc <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_tcp_snd_err)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae92:	2b11      	cmp	r3, #17
 800ae94:	d022      	beq.n	800aedc <WiFi_Conn_ND+0xeb0>
											&&(b->_estado!=at_tcp_enviado_error))
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae9c:	2b12      	cmp	r3, #18
 800ae9e:	d01d      	beq.n	800aedc <WiFi_Conn_ND+0xeb0>
							{
								b->_enviaruart=0;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2200      	movs	r2, #0
 800aea4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d109      	bne.n	800aec6 <WiFi_Conn_ND+0xe9a>
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800aebe:	4619      	mov	r1, r3
 800aec0:	4610      	mov	r0, r2
 800aec2:	f7f6 fb93 	bl	80015ec <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800aed2:	b29a      	uxth	r2, r3
 800aed4:	2364      	movs	r3, #100	; 0x64
 800aed6:	68b8      	ldr	r0, [r7, #8]
 800aed8:	f7fa fbc4 	bl	8005664 <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aee2:	2b13      	cmp	r3, #19
 800aee4:	d104      	bne.n	800aef0 <WiFi_Conn_ND+0xec4>
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f240 22c5 	movw	r2, #709	; 0x2c5
 800aeec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	d01e      	beq.n	800af38 <WiFi_Conn_ND+0xf0c>
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af00:	2b0a      	cmp	r3, #10
 800af02:	d019      	beq.n	800af38 <WiFi_Conn_ND+0xf0c>
										 ||(b->_estado==at_fail)
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af0a:	2b03      	cmp	r3, #3
 800af0c:	d014      	beq.n	800af38 <WiFi_Conn_ND+0xf0c>
										 ||(b->_estado==at_tcp_noip_err)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af14:	2b22      	cmp	r3, #34	; 0x22
 800af16:	d00f      	beq.n	800af38 <WiFi_Conn_ND+0xf0c>
										 ||(b->_estado==at_tcp_desconectado)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af1e:	2b10      	cmp	r3, #16
 800af20:	d00a      	beq.n	800af38 <WiFi_Conn_ND+0xf0c>
										 ||(b->_estado==at_tcp_snd_err)
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af28:	2b11      	cmp	r3, #17
 800af2a:	d005      	beq.n	800af38 <WiFi_Conn_ND+0xf0c>
										 ||(b->_estado==at_tcp_enviado_error))
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af32:	2b12      	cmp	r3, #18
 800af34:	f040 8556 	bne.w	800b9e4 <WiFi_Conn_ND+0x19b8>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f240 22c1 	movw	r2, #705	; 0x2c1
 800af3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800af42:	f000 bd4f 	b.w	800b9e4 <WiFi_Conn_ND+0x19b8>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800af46:	68f8      	ldr	r0, [r7, #12]
 800af48:	f7fb fc1a 	bl	8006780 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af52:	2b04      	cmp	r3, #4
 800af54:	d112      	bne.n	800af7c <WiFi_Conn_ND+0xf50>
				{
					Cambiar_CWMODE(b);
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f7fb fc28 	bl	80067ac <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2264      	movs	r2, #100	; 0x64
 800af60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2200      	movs	r2, #0
 800af68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2200      	movs	r2, #0
 800af70:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2200      	movs	r2, #0
 800af78:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af82:	2b0a      	cmp	r3, #10
 800af84:	d013      	beq.n	800afae <WiFi_Conn_ND+0xf82>
						||(b->_estado==at_deconectar_ok )
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af8c:	2b0d      	cmp	r3, #13
 800af8e:	d00e      	beq.n	800afae <WiFi_Conn_ND+0xf82>
						||(b->_estado==at_fail)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af96:	2b03      	cmp	r3, #3
 800af98:	d009      	beq.n	800afae <WiFi_Conn_ND+0xf82>
						||(b->_estado!=at_error)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	d104      	bne.n	800afae <WiFi_Conn_ND+0xf82>
						||(b->_estado!=at_tcp_noip_err)) //Si me desconecto, me vuelvo a conectar 240419
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afaa:	2b22      	cmp	r3, #34	; 0x22
 800afac:	d00e      	beq.n	800afcc <WiFi_Conn_ND+0xfa0>
				{
					ConectarWIFI(b);
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	f7fb fc12 	bl	80067d8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	22c8      	movs	r2, #200	; 0xc8
 800afb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afd2:	2b0c      	cmp	r3, #12
 800afd4:	d10f      	bne.n	800aff6 <WiFi_Conn_ND+0xfca>
				{
					ConectarTCP(b);
 800afd6:	68f8      	ldr	r0, [r7, #12]
 800afd8:	f7fb fc56 	bl	8006888 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f44f 7216 	mov.w	r2, #600	; 0x258
 800afe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2200      	movs	r2, #0
 800afea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2200      	movs	r2, #0
 800aff2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800affc:	2b02      	cmp	r3, #2
 800affe:	d00f      	beq.n	800b020 <WiFi_Conn_ND+0xff4>
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b006:	2b10      	cmp	r3, #16
 800b008:	d00a      	beq.n	800b020 <WiFi_Conn_ND+0xff4>
										 ||(b->_estado==at_tcp_snd_err)
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b010:	2b11      	cmp	r3, #17
 800b012:	d005      	beq.n	800b020 <WiFi_Conn_ND+0xff4>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b01a:	2b12      	cmp	r3, #18
 800b01c:	f040 84e4 	bne.w	800b9e8 <WiFi_Conn_ND+0x19bc>
				{
					ConectarTCP(b);
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f7fb fc31 	bl	8006888 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b02c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2200      	movs	r2, #0
 800b034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
				}
			}
			break;
 800b040:	f000 bcd2 	b.w	800b9e8 <WiFi_Conn_ND+0x19bc>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f7fb fb9b 	bl	8006780 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b050:	2b04      	cmp	r3, #4
 800b052:	d112      	bne.n	800b07a <WiFi_Conn_ND+0x104e>
					{
						Cambiar_CWMODE(b);
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f7fb fba9 	bl	80067ac <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2264      	movs	r2, #100	; 0x64
 800b05e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2200      	movs	r2, #0
 800b066:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2200      	movs	r2, #0
 800b076:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b080:	2b0a      	cmp	r3, #10
 800b082:	d009      	beq.n	800b098 <WiFi_Conn_ND+0x106c>
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b08a:	2b0d      	cmp	r3, #13
 800b08c:	d004      	beq.n	800b098 <WiFi_Conn_ND+0x106c>
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b094:	2b03      	cmp	r3, #3
 800b096:	d10e      	bne.n	800b0b6 <WiFi_Conn_ND+0x108a>
					{
						ConectarWIFI(b);
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f7fb fb9d 	bl	80067d8 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	22c8      	movs	r2, #200	; 0xc8
 800b0a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	d00e      	beq.n	800b0de <WiFi_Conn_ND+0x10b2>
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0c6:	2b0b      	cmp	r3, #11
 800b0c8:	d009      	beq.n	800b0de <WiFi_Conn_ND+0x10b2>
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0d0:	2b0c      	cmp	r3, #12
 800b0d2:	d004      	beq.n	800b0de <WiFi_Conn_ND+0x10b2>
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0da:	2b10      	cmp	r3, #16
 800b0dc:	d10f      	bne.n	800b0fe <WiFi_Conn_ND+0x10d2>
					{
						ConectarTCP(b);
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	f7fb fbd2 	bl	8006888 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b0ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800b0fe:	20c8      	movs	r0, #200	; 0xc8
 800b100:	f7f7 fdfc 	bl	8002cfc <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	d916      	bls.n	800b13c <WiFi_Conn_ND+0x1110>
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d011      	beq.n	800b13c <WiFi_Conn_ND+0x1110>
					{
							EnviarDatos(b);
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f7fb fbf7 	bl	800690c <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800b124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2200      	movs	r2, #0
 800b12c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2200      	movs	r2, #0
 800b134:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800b138:	f000 bc69 	b.w	800ba0e <WiFi_Conn_ND+0x19e2>
							b->_estado_conexion=TCP_CONN_OK;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f240 2261 	movw	r2, #609	; 0x261
 800b142:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2200      	movs	r2, #0
 800b14a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2200      	movs	r2, #0
 800b152:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
			break;
 800b156:	f000 bc5a 	b.w	800ba0e <WiFi_Conn_ND+0x19e2>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b160:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800b164:	d045      	beq.n	800b1f2 <WiFi_Conn_ND+0x11c6>
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	d040      	beq.n	800b1f2 <WiFi_Conn_ND+0x11c6>
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b176:	2b0a      	cmp	r3, #10
 800b178:	d03b      	beq.n	800b1f2 <WiFi_Conn_ND+0x11c6>
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b180:	2b15      	cmp	r3, #21
 800b182:	d036      	beq.n	800b1f2 <WiFi_Conn_ND+0x11c6>
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b18a:	2b16      	cmp	r3, #22
 800b18c:	d031      	beq.n	800b1f2 <WiFi_Conn_ND+0x11c6>
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b194:	2b17      	cmp	r3, #23
 800b196:	d02c      	beq.n	800b1f2 <WiFi_Conn_ND+0x11c6>
							{
								CrearServidorTCP(b);
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f7fb fb8b 	bl	80068b4 <CrearServidorTCP>
									if(b->_enviaruart==1)
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d124      	bne.n	800b1f2 <WiFi_Conn_ND+0x11c6>
										{
											b->_estado=AT_ESP8266_ND(b);
 800b1a8:	68f8      	ldr	r0, [r7, #12]
 800b1aa:	f7fb fc95 	bl	8006ad8 <AT_ESP8266_ND>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d109      	bne.n	800b1dc <WiFi_Conn_ND+0x11b0>
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	4610      	mov	r0, r2
 800b1d8:	f7f6 fa08 	bl	80015ec <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800b1e8:	b29a      	uxth	r2, r3
 800b1ea:	2364      	movs	r3, #100	; 0x64
 800b1ec:	68b8      	ldr	r0, [r7, #8]
 800b1ee:	f7fa fa39 	bl	8005664 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1f8:	2b15      	cmp	r3, #21
 800b1fa:	d004      	beq.n	800b206 <WiFi_Conn_ND+0x11da>
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b202:	2b17      	cmp	r3, #23
 800b204:	d104      	bne.n	800b210 <WiFi_Conn_ND+0x11e4>
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f240 3229 	movw	r2, #809	; 0x329
 800b20c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b216:	2b16      	cmp	r3, #22
 800b218:	f040 83e8 	bne.w	800b9ec <WiFi_Conn_ND+0x19c0>
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f240 3225 	movw	r2, #805	; 0x325
 800b222:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800b226:	e3e1      	b.n	800b9ec <WiFi_Conn_ND+0x19c0>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b228:	68f8      	ldr	r0, [r7, #12]
 800b22a:	f7fb faa9 	bl	8006780 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b234:	2b04      	cmp	r3, #4
 800b236:	d112      	bne.n	800b25e <WiFi_Conn_ND+0x1232>
							{
								Cambiar_CWMODE(b);
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f7fb fab7 	bl	80067ac <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2264      	movs	r2, #100	; 0x64
 800b242:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2200      	movs	r2, #0
 800b24a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2200      	movs	r2, #0
 800b252:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2200      	movs	r2, #0
 800b25a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b264:	2b0a      	cmp	r3, #10
 800b266:	d009      	beq.n	800b27c <WiFi_Conn_ND+0x1250>
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b26e:	2b0d      	cmp	r3, #13
 800b270:	d004      	beq.n	800b27c <WiFi_Conn_ND+0x1250>
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b278:	2b03      	cmp	r3, #3
 800b27a:	d10e      	bne.n	800b29a <WiFi_Conn_ND+0x126e>
							{
								ConectarWIFI(b);
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f7fb faab 	bl	80067d8 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	22c8      	movs	r2, #200	; 0xc8
 800b286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2200      	movs	r2, #0
 800b28e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2200      	movs	r2, #0
 800b296:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	d005      	beq.n	800b2b0 <WiFi_Conn_ND+0x1284>
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2aa:	2b10      	cmp	r3, #16
 800b2ac:	f040 83a0 	bne.w	800b9f0 <WiFi_Conn_ND+0x19c4>
							{
								ConectarTCP(b);
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f7fb fae9 	bl	8006888 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b2bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800b2d0:	e38e      	b.n	800b9f0 <WiFi_Conn_ND+0x19c4>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f7fb fa54 	bl	8006780 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2de:	2b04      	cmp	r3, #4
 800b2e0:	d112      	bne.n	800b308 <WiFi_Conn_ND+0x12dc>
							{
								Cambiar_CWMODE(b);
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f7fb fa62 	bl	80067ac <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2264      	movs	r2, #100	; 0x64
 800b2ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2200      	movs	r2, #0
 800b304:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b30e:	2b0a      	cmp	r3, #10
 800b310:	d009      	beq.n	800b326 <WiFi_Conn_ND+0x12fa>
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b318:	2b0d      	cmp	r3, #13
 800b31a:	d004      	beq.n	800b326 <WiFi_Conn_ND+0x12fa>
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b322:	2b03      	cmp	r3, #3
 800b324:	d10e      	bne.n	800b344 <WiFi_Conn_ND+0x1318>
							{
								ConectarWIFI(b);
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f7fb fa56 	bl	80067d8 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	22c8      	movs	r2, #200	; 0xc8
 800b330:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2200      	movs	r2, #0
 800b338:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2200      	movs	r2, #0
 800b340:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	d005      	beq.n	800b35a <WiFi_Conn_ND+0x132e>
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b354:	2b10      	cmp	r3, #16
 800b356:	f040 834d 	bne.w	800b9f4 <WiFi_Conn_ND+0x19c8>
							{
								ConectarTCP(b);
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f7fb fa94 	bl	8006888 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b366:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2200      	movs	r2, #0
 800b36e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2200      	movs	r2, #0
 800b376:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}
						}
						break;
 800b37a:	e33b      	b.n	800b9f4 <WiFi_Conn_ND+0x19c8>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b37c:	68f8      	ldr	r0, [r7, #12]
 800b37e:	f7fb f9ff 	bl	8006780 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b388:	2b04      	cmp	r3, #4
 800b38a:	d112      	bne.n	800b3b2 <WiFi_Conn_ND+0x1386>
							{
								Cambiar_CWMODE(b);
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f7fb fa0d 	bl	80067ac <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2264      	movs	r2, #100	; 0x64
 800b396:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2200      	movs	r2, #0
 800b39e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3b8:	2b0a      	cmp	r3, #10
 800b3ba:	d009      	beq.n	800b3d0 <WiFi_Conn_ND+0x13a4>
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3c2:	2b0d      	cmp	r3, #13
 800b3c4:	d004      	beq.n	800b3d0 <WiFi_Conn_ND+0x13a4>
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3cc:	2b03      	cmp	r3, #3
 800b3ce:	d10e      	bne.n	800b3ee <WiFi_Conn_ND+0x13c2>
							{
								ConectarWIFI(b);
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f7fb fa01 	bl	80067d8 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	22c8      	movs	r2, #200	; 0xc8
 800b3da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3f4:	2b02      	cmp	r3, #2
 800b3f6:	d005      	beq.n	800b404 <WiFi_Conn_ND+0x13d8>
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3fe:	2b10      	cmp	r3, #16
 800b400:	f040 82fa 	bne.w	800b9f8 <WiFi_Conn_ND+0x19cc>
							{
								ConectarTCP(b);
 800b404:	68f8      	ldr	r0, [r7, #12]
 800b406:	f7fb fa3f 	bl	8006888 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2200      	movs	r2, #0
 800b418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2200      	movs	r2, #0
 800b420:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}
						}
						break;
 800b424:	e2e8      	b.n	800b9f8 <WiFi_Conn_ND+0x19cc>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b426:	68f8      	ldr	r0, [r7, #12]
 800b428:	f7fb f9aa 	bl	8006780 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b432:	2b04      	cmp	r3, #4
 800b434:	d112      	bne.n	800b45c <WiFi_Conn_ND+0x1430>
							{
								Cambiar_CWMODE(b);
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f7fb f9b8 	bl	80067ac <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2264      	movs	r2, #100	; 0x64
 800b440:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2200      	movs	r2, #0
 800b448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2200      	movs	r2, #0
 800b450:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2200      	movs	r2, #0
 800b458:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b462:	2b0a      	cmp	r3, #10
 800b464:	d009      	beq.n	800b47a <WiFi_Conn_ND+0x144e>
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b46c:	2b0d      	cmp	r3, #13
 800b46e:	d004      	beq.n	800b47a <WiFi_Conn_ND+0x144e>
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b476:	2b03      	cmp	r3, #3
 800b478:	d10e      	bne.n	800b498 <WiFi_Conn_ND+0x146c>
							{
								ConectarWIFI(b);
 800b47a:	68f8      	ldr	r0, [r7, #12]
 800b47c:	f7fb f9ac 	bl	80067d8 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	22c8      	movs	r2, #200	; 0xc8
 800b484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2200      	movs	r2, #0
 800b494:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d005      	beq.n	800b4ae <WiFi_Conn_ND+0x1482>
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4a8:	2b10      	cmp	r3, #16
 800b4aa:	f040 82a7 	bne.w	800b9fc <WiFi_Conn_ND+0x19d0>
							{
								ConectarTCP(b);
 800b4ae:	68f8      	ldr	r0, [r7, #12]
 800b4b0:	f7fb f9ea 	bl	8006888 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b4ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}
						}
						break;
 800b4ce:	e295      	b.n	800b9fc <WiFi_Conn_ND+0x19d0>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f7fb f955 	bl	8006780 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4e4:	2b04      	cmp	r3, #4
 800b4e6:	d112      	bne.n	800b50e <WiFi_Conn_ND+0x14e2>
								{
									Cambiar_CWMODE(b);
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f7fb f95f 	bl	80067ac <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2264      	movs	r2, #100	; 0x64
 800b4f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2200      	movs	r2, #0
 800b502:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2200      	movs	r2, #0
 800b50a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b514:	2b0a      	cmp	r3, #10
 800b516:	d009      	beq.n	800b52c <WiFi_Conn_ND+0x1500>
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b51e:	2b0d      	cmp	r3, #13
 800b520:	d004      	beq.n	800b52c <WiFi_Conn_ND+0x1500>
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b528:	2b03      	cmp	r3, #3
 800b52a:	d10e      	bne.n	800b54a <WiFi_Conn_ND+0x151e>
								{
									ConectarWIFI(b);
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f7fb f953 	bl	80067d8 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	22c8      	movs	r2, #200	; 0xc8
 800b536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2200      	movs	r2, #0
 800b53e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2200      	movs	r2, #0
 800b546:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b550:	2b02      	cmp	r3, #2
 800b552:	d004      	beq.n	800b55e <WiFi_Conn_ND+0x1532>
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b55a:	2b10      	cmp	r3, #16
 800b55c:	d10f      	bne.n	800b57e <WiFi_Conn_ND+0x1552>
								{
									ConectarTCP(b);
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	f7fb f992 	bl	8006888 <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b56a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2200      	movs	r2, #0
 800b572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2200      	movs	r2, #0
 800b57a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800b584:	2b01      	cmp	r3, #1
 800b586:	f040 823b 	bne.w	800ba00 <WiFi_Conn_ND+0x19d4>
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800b590:	2b00      	cmp	r3, #0
 800b592:	f000 8235 	beq.w	800ba00 <WiFi_Conn_ND+0x19d4>
								{
									EnviarDatosSRVR(b);
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f7fb f9a2 	bl	80068e0 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b5a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800b5b6:	e223      	b.n	800ba00 <WiFi_Conn_ND+0x19d4>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5be:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b5c2:	d063      	beq.n	800b68c <WiFi_Conn_ND+0x1660>
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5ca:	2b02      	cmp	r3, #2
 800b5cc:	d05e      	beq.n	800b68c <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_wifi_disconnect)&&
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b5d4:	2b0a      	cmp	r3, #10
 800b5d6:	d059      	beq.n	800b68c <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_wifi_connected)&&
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800b5de:	2b0b      	cmp	r3, #11
 800b5e0:	d054      	beq.n	800b68c <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_wifi_gotip)&&
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800b5e8:	2b0c      	cmp	r3, #12
 800b5ea:	d04f      	beq.n	800b68c <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_tcp_desconectado)&&
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800b5f2:	2b10      	cmp	r3, #16
 800b5f4:	d04a      	beq.n	800b68c <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_tcp_snd_err)&&
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800b5fc:	2b11      	cmp	r3, #17
 800b5fe:	d045      	beq.n	800b68c <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_tcp_enviado_error)&&
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800b606:	2b12      	cmp	r3, #18
 800b608:	d040      	beq.n	800b68c <WiFi_Conn_ND+0x1660>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800b610:	2b13      	cmp	r3, #19
 800b612:	d03b      	beq.n	800b68c <WiFi_Conn_ND+0x1660>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b61a:	2b16      	cmp	r3, #22
 800b61c:	d036      	beq.n	800b68c <WiFi_Conn_ND+0x1660>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b624:	2b19      	cmp	r3, #25
 800b626:	d031      	beq.n	800b68c <WiFi_Conn_ND+0x1660>
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d02c      	beq.n	800b68c <WiFi_Conn_ND+0x1660>
								{
								EnviarDatosSRVR(b);
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f7fb f954 	bl	80068e0 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d124      	bne.n	800b68c <WiFi_Conn_ND+0x1660>
										{
											b->_estado=AT_ESP8266_ND(b);
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	f7fb fa48 	bl	8006ad8 <AT_ESP8266_ND>
 800b648:	4602      	mov	r2, r0
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2200      	movs	r2, #0
 800b654:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d109      	bne.n	800b676 <WiFi_Conn_ND+0x164a>
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800b66e:	4619      	mov	r1, r3
 800b670:	4610      	mov	r0, r2
 800b672:	f7f5 ffbb 	bl	80015ec <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800b682:	b29a      	uxth	r2, r3
 800b684:	2364      	movs	r3, #100	; 0x64
 800b686:	68b8      	ldr	r0, [r7, #8]
 800b688:	f7f9 ffec 	bl	8005664 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b692:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b696:	d154      	bne.n	800b742 <WiFi_Conn_ND+0x1716>
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d14f      	bne.n	800b742 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_error)&&
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b6a8:	2b02      	cmp	r3, #2
 800b6aa:	d04a      	beq.n	800b742 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_wifi_disconnect)&&
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800b6b2:	2b0a      	cmp	r3, #10
 800b6b4:	d045      	beq.n	800b742 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_wifi_connected)&&
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800b6bc:	2b0b      	cmp	r3, #11
 800b6be:	d040      	beq.n	800b742 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_wifi_gotip)&&
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800b6c6:	2b0c      	cmp	r3, #12
 800b6c8:	d03b      	beq.n	800b742 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_tcp_desconectado)&&
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800b6d0:	2b10      	cmp	r3, #16
 800b6d2:	d036      	beq.n	800b742 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_tcp_snd_err)&&
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800b6da:	2b11      	cmp	r3, #17
 800b6dc:	d031      	beq.n	800b742 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_tcp_enviado_error)&&
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800b6e4:	2b12      	cmp	r3, #18
 800b6e6:	d02c      	beq.n	800b742 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800b6ee:	2b13      	cmp	r3, #19
 800b6f0:	d027      	beq.n	800b742 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b6f8:	2b16      	cmp	r3, #22
 800b6fa:	d022      	beq.n	800b742 <WiFi_Conn_ND+0x1716>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b702:	2b19      	cmp	r3, #25
 800b704:	d01d      	beq.n	800b742 <WiFi_Conn_ND+0x1716>
										{
											b->_enviaruart=0;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2200      	movs	r2, #0
 800b70a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	; 0xd5c
 800b714:	2b01      	cmp	r3, #1
 800b716:	d109      	bne.n	800b72c <WiFi_Conn_ND+0x1700>
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800b724:	4619      	mov	r1, r3
 800b726:	4610      	mov	r0, r2
 800b728:	f7f5 ff60 	bl	80015ec <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800b738:	b29a      	uxth	r2, r3
 800b73a:	2364      	movs	r3, #100	; 0x64
 800b73c:	68b8      	ldr	r0, [r7, #8]
 800b73e:	f7f9 ff91 	bl	8005664 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b748:	2b13      	cmp	r3, #19
 800b74a:	d104      	bne.n	800b756 <WiFi_Conn_ND+0x172a>
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f240 328d 	movw	r2, #909	; 0x38d
 800b752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b75c:	2b02      	cmp	r3, #2
 800b75e:	d02d      	beq.n	800b7bc <WiFi_Conn_ND+0x1790>
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b766:	2b04      	cmp	r3, #4
 800b768:	d028      	beq.n	800b7bc <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b770:	2b0a      	cmp	r3, #10
 800b772:	d023      	beq.n	800b7bc <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b77a:	2b0b      	cmp	r3, #11
 800b77c:	d01e      	beq.n	800b7bc <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b784:	2b0c      	cmp	r3, #12
 800b786:	d019      	beq.n	800b7bc <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b78e:	2b10      	cmp	r3, #16
 800b790:	d014      	beq.n	800b7bc <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b798:	2b11      	cmp	r3, #17
 800b79a:	d00f      	beq.n	800b7bc <WiFi_Conn_ND+0x1790>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7a2:	2b12      	cmp	r3, #18
 800b7a4:	d00a      	beq.n	800b7bc <WiFi_Conn_ND+0x1790>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b7ac:	2b16      	cmp	r3, #22
 800b7ae:	d005      	beq.n	800b7bc <WiFi_Conn_ND+0x1790>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7b6:	2b19      	cmp	r3, #25
 800b7b8:	f040 8124 	bne.w	800ba04 <WiFi_Conn_ND+0x19d8>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f240 3289 	movw	r2, #905	; 0x389
 800b7c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800b7c6:	e11d      	b.n	800ba04 <WiFi_Conn_ND+0x19d8>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800b7c8:	68f8      	ldr	r0, [r7, #12]
 800b7ca:	f7fa ffd9 	bl	8006780 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7d4:	2b04      	cmp	r3, #4
 800b7d6:	d009      	beq.n	800b7ec <WiFi_Conn_ND+0x17c0>
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7de:	2b0b      	cmp	r3, #11
 800b7e0:	d004      	beq.n	800b7ec <WiFi_Conn_ND+0x17c0>
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7e8:	2b0c      	cmp	r3, #12
 800b7ea:	d112      	bne.n	800b812 <WiFi_Conn_ND+0x17e6>
							{
								Cambiar_CWMODE(b);
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f7fa ffdd 	bl	80067ac <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2264      	movs	r2, #100	; 0x64
 800b7f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2200      	movs	r2, #0
 800b806:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2200      	movs	r2, #0
 800b80e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b818:	2b0a      	cmp	r3, #10
 800b81a:	d009      	beq.n	800b830 <WiFi_Conn_ND+0x1804>
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b822:	2b0d      	cmp	r3, #13
 800b824:	d004      	beq.n	800b830 <WiFi_Conn_ND+0x1804>
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b82c:	2b03      	cmp	r3, #3
 800b82e:	d10e      	bne.n	800b84e <WiFi_Conn_ND+0x1822>
							{
								ConectarWIFI(b);
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f7fa ffd1 	bl	80067d8 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	22c8      	movs	r2, #200	; 0xc8
 800b83a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2200      	movs	r2, #0
 800b842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b854:	2b16      	cmp	r3, #22
 800b856:	d10c      	bne.n	800b872 <WiFi_Conn_ND+0x1846>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f240 3225 	movw	r2, #805	; 0x325
 800b85e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2200      	movs	r2, #0
 800b866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2200      	movs	r2, #0
 800b86e:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b878:	2b18      	cmp	r3, #24
 800b87a:	d10c      	bne.n	800b896 <WiFi_Conn_ND+0x186a>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f240 3229 	movw	r2, #809	; 0x329
 800b882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2200      	movs	r2, #0
 800b88a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2200      	movs	r2, #0
 800b892:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b89c:	2b19      	cmp	r3, #25
 800b89e:	d008      	beq.n	800b8b2 <WiFi_Conn_ND+0x1886>
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8a6:	2b11      	cmp	r3, #17
 800b8a8:	d003      	beq.n	800b8b2 <WiFi_Conn_ND+0x1886>
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2212      	movs	r2, #18
 800b8ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	f040 80a5 	bne.w	800ba08 <WiFi_Conn_ND+0x19dc>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b8c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

							}


						}
						break;
 800b8d8:	e096      	b.n	800ba08 <WiFi_Conn_ND+0x19dc>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b8da:	68f8      	ldr	r0, [r7, #12]
 800b8dc:	f7fa ff50 	bl	8006780 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8e6:	2b04      	cmp	r3, #4
 800b8e8:	d009      	beq.n	800b8fe <WiFi_Conn_ND+0x18d2>
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8f0:	2b0b      	cmp	r3, #11
 800b8f2:	d004      	beq.n	800b8fe <WiFi_Conn_ND+0x18d2>
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8fa:	2b0c      	cmp	r3, #12
 800b8fc:	d112      	bne.n	800b924 <WiFi_Conn_ND+0x18f8>
								{
									Cambiar_CWMODE(b);
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f7fa ff54 	bl	80067ac <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2264      	movs	r2, #100	; 0x64
 800b908:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2200      	movs	r2, #0
 800b910:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2200      	movs	r2, #0
 800b918:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2200      	movs	r2, #0
 800b920:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b92a:	2b0a      	cmp	r3, #10
 800b92c:	d009      	beq.n	800b942 <WiFi_Conn_ND+0x1916>
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b934:	2b0d      	cmp	r3, #13
 800b936:	d004      	beq.n	800b942 <WiFi_Conn_ND+0x1916>
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b93e:	2b03      	cmp	r3, #3
 800b940:	d10e      	bne.n	800b960 <WiFi_Conn_ND+0x1934>
								{
									ConectarWIFI(b);
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f7fa ff48 	bl	80067d8 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	22c8      	movs	r2, #200	; 0xc8
 800b94c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2200      	movs	r2, #0
 800b954:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f8d3 3cdc 	ldr.w	r3, [r3, #3292]	; 0xcdc
 800b966:	2b01      	cmp	r3, #1
 800b968:	d004      	beq.n	800b974 <WiFi_Conn_ND+0x1948>
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800b970:	2b01      	cmp	r3, #1
 800b972:	d14b      	bne.n	800ba0c <WiFi_Conn_ND+0x19e0>
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d046      	beq.n	800ba0c <WiFi_Conn_ND+0x19e0>
								{
									EnviarDatosSRVR(b);
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f7fa ffae 	bl	80068e0 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b98a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2200      	movs	r2, #0
 800b992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2200      	movs	r2, #0
 800b99a:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
									b->_new_data_rcv=0;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
									b->_send_data=0;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
								}

						}
						break;
 800b9ae:	e02d      	b.n	800ba0c <WiFi_Conn_ND+0x19e0>
			break;
 800b9b0:	bf00      	nop
 800b9b2:	e02c      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
			break;
 800b9b4:	bf00      	nop
 800b9b6:	e02a      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
			break;
 800b9b8:	bf00      	nop
 800b9ba:	e028      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
			break;
 800b9bc:	bf00      	nop
 800b9be:	e026      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
			break;
 800b9c0:	bf00      	nop
 800b9c2:	e024      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
			break;
 800b9c4:	bf00      	nop
 800b9c6:	e022      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
			break;
 800b9c8:	bf00      	nop
 800b9ca:	e020      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
			break;
 800b9cc:	bf00      	nop
 800b9ce:	e01e      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
			break;
 800b9d0:	bf00      	nop
 800b9d2:	e01c      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
			break;
 800b9d4:	bf00      	nop
 800b9d6:	e01a      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
			break;
 800b9d8:	bf00      	nop
 800b9da:	e018      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
			break;
 800b9dc:	bf00      	nop
 800b9de:	e016      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
			break;
 800b9e0:	bf00      	nop
 800b9e2:	e014      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
			break;
 800b9e4:	bf00      	nop
 800b9e6:	e012      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
			break;
 800b9e8:	bf00      	nop
 800b9ea:	e010      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
						break;
 800b9ec:	bf00      	nop
 800b9ee:	e00e      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
						break;
 800b9f0:	bf00      	nop
 800b9f2:	e00c      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
						break;
 800b9f4:	bf00      	nop
 800b9f6:	e00a      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
						break;
 800b9f8:	bf00      	nop
 800b9fa:	e008      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
						break;
 800b9fc:	bf00      	nop
 800b9fe:	e006      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
						break;
 800ba00:	bf00      	nop
 800ba02:	e004      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
						break;
 800ba04:	bf00      	nop
 800ba06:	e002      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
						break;
 800ba08:	bf00      	nop
 800ba0a:	e000      	b.n	800ba0e <WiFi_Conn_ND+0x19e2>
						break;
 800ba0c:	bf00      	nop

		}
		return(b->_estado_conexion);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3710      	adds	r7, #16
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <httpPOST2>:
			return 0;
		}
}

httpPOST2(char * endpoint, char* server_ip, char * port,  uint16_t * vect_data, uint8_t * decimal,int cdad, uint16_t devId, char  * post, char * body, int max_char)
{
 800ba1c:	b5b0      	push	{r4, r5, r7, lr}
 800ba1e:	b08c      	sub	sp, #48	; 0x30
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	607a      	str	r2, [r7, #4]
 800ba28:	603b      	str	r3, [r7, #0]
	post[0]='\0';
 800ba2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800ba30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba32:	2200      	movs	r2, #0
 800ba34:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800ba36:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ba38:	f7f4 fbdc 	bl	80001f4 <strlen>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	461a      	mov	r2, r3
 800ba40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba42:	4413      	add	r3, r2
 800ba44:	4a9d      	ldr	r2, [pc, #628]	; (800bcbc <httpPOST2+0x2a0>)
 800ba46:	6810      	ldr	r0, [r2, #0]
 800ba48:	6018      	str	r0, [r3, #0]
 800ba4a:	8892      	ldrh	r2, [r2, #4]
 800ba4c:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800ba4e:	68f8      	ldr	r0, [r7, #12]
 800ba50:	f7f4 fbd0 	bl	80001f4 <strlen>
 800ba54:	4603      	mov	r3, r0
 800ba56:	461a      	mov	r2, r3
 800ba58:	68f9      	ldr	r1, [r7, #12]
 800ba5a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ba5c:	f003 fc77 	bl	800f34e <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800ba60:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ba62:	f7f4 fbc7 	bl	80001f4 <strlen>
 800ba66:	4603      	mov	r3, r0
 800ba68:	461a      	mov	r2, r3
 800ba6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba6c:	4413      	add	r3, r2
 800ba6e:	4994      	ldr	r1, [pc, #592]	; (800bcc0 <httpPOST2+0x2a4>)
 800ba70:	461a      	mov	r2, r3
 800ba72:	460b      	mov	r3, r1
 800ba74:	cb03      	ldmia	r3!, {r0, r1}
 800ba76:	6010      	str	r0, [r2, #0]
 800ba78:	6051      	str	r1, [r2, #4]
 800ba7a:	8819      	ldrh	r1, [r3, #0]
 800ba7c:	789b      	ldrb	r3, [r3, #2]
 800ba7e:	8111      	strh	r1, [r2, #8]
 800ba80:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800ba82:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ba84:	f7f4 fbb6 	bl	80001f4 <strlen>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba8e:	4413      	add	r3, r2
 800ba90:	4a8c      	ldr	r2, [pc, #560]	; (800bcc4 <httpPOST2+0x2a8>)
 800ba92:	8811      	ldrh	r1, [r2, #0]
 800ba94:	7892      	ldrb	r2, [r2, #2]
 800ba96:	8019      	strh	r1, [r3, #0]
 800ba98:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800ba9a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ba9c:	f7f4 fbaa 	bl	80001f4 <strlen>
 800baa0:	4603      	mov	r3, r0
 800baa2:	461a      	mov	r2, r3
 800baa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baa6:	4413      	add	r3, r2
 800baa8:	4a87      	ldr	r2, [pc, #540]	; (800bcc8 <httpPOST2+0x2ac>)
 800baaa:	6810      	ldr	r0, [r2, #0]
 800baac:	6018      	str	r0, [r3, #0]
 800baae:	8891      	ldrh	r1, [r2, #4]
 800bab0:	7992      	ldrb	r2, [r2, #6]
 800bab2:	8099      	strh	r1, [r3, #4]
 800bab4:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800bab6:	68b8      	ldr	r0, [r7, #8]
 800bab8:	f7f4 fb9c 	bl	80001f4 <strlen>
 800babc:	4603      	mov	r3, r0
 800babe:	461a      	mov	r2, r3
 800bac0:	68b9      	ldr	r1, [r7, #8]
 800bac2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bac4:	f003 fc43 	bl	800f34e <strncat>
	strncat(post,":",1);
 800bac8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800baca:	f7f4 fb93 	bl	80001f4 <strlen>
 800bace:	4603      	mov	r3, r0
 800bad0:	461a      	mov	r2, r3
 800bad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bad4:	4413      	add	r3, r2
 800bad6:	497d      	ldr	r1, [pc, #500]	; (800bccc <httpPOST2+0x2b0>)
 800bad8:	461a      	mov	r2, r3
 800bada:	460b      	mov	r3, r1
 800badc:	881b      	ldrh	r3, [r3, #0]
 800bade:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f7f4 fb87 	bl	80001f4 <strlen>
 800bae6:	4603      	mov	r3, r0
 800bae8:	461a      	mov	r2, r3
 800baea:	6879      	ldr	r1, [r7, #4]
 800baec:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800baee:	f003 fc2e 	bl	800f34e <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800baf2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800baf4:	f7f4 fb7e 	bl	80001f4 <strlen>
 800baf8:	4603      	mov	r3, r0
 800bafa:	461a      	mov	r2, r3
 800bafc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bafe:	4413      	add	r3, r2
 800bb00:	4a70      	ldr	r2, [pc, #448]	; (800bcc4 <httpPOST2+0x2a8>)
 800bb02:	8811      	ldrh	r1, [r2, #0]
 800bb04:	7892      	ldrb	r2, [r2, #2]
 800bb06:	8019      	strh	r1, [r3, #0]
 800bb08:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800bb0a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bb0c:	f7f4 fb72 	bl	80001f4 <strlen>
 800bb10:	4603      	mov	r3, r0
 800bb12:	461a      	mov	r2, r3
 800bb14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb16:	4413      	add	r3, r2
 800bb18:	4a6d      	ldr	r2, [pc, #436]	; (800bcd0 <httpPOST2+0x2b4>)
 800bb1a:	461d      	mov	r5, r3
 800bb1c:	4614      	mov	r4, r2
 800bb1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bb20:	6028      	str	r0, [r5, #0]
 800bb22:	6069      	str	r1, [r5, #4]
 800bb24:	60aa      	str	r2, [r5, #8]
 800bb26:	60eb      	str	r3, [r5, #12]
 800bb28:	cc07      	ldmia	r4!, {r0, r1, r2}
 800bb2a:	6128      	str	r0, [r5, #16]
 800bb2c:	6169      	str	r1, [r5, #20]
 800bb2e:	61aa      	str	r2, [r5, #24]
 800bb30:	8823      	ldrh	r3, [r4, #0]
 800bb32:	78a2      	ldrb	r2, [r4, #2]
 800bb34:	83ab      	strh	r3, [r5, #28]
 800bb36:	4613      	mov	r3, r2
 800bb38:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800bb3a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bb3c:	f7f4 fb5a 	bl	80001f4 <strlen>
 800bb40:	4603      	mov	r3, r0
 800bb42:	461a      	mov	r2, r3
 800bb44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb46:	4413      	add	r3, r2
 800bb48:	4a5e      	ldr	r2, [pc, #376]	; (800bcc4 <httpPOST2+0x2a8>)
 800bb4a:	8811      	ldrh	r1, [r2, #0]
 800bb4c:	7892      	ldrb	r2, [r2, #2]
 800bb4e:	8019      	strh	r1, [r3, #0]
 800bb50:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800bb52:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bb54:	f7f4 fb4e 	bl	80001f4 <strlen>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb5e:	4413      	add	r3, r2
 800bb60:	4a5c      	ldr	r2, [pc, #368]	; (800bcd4 <httpPOST2+0x2b8>)
 800bb62:	461c      	mov	r4, r3
 800bb64:	4615      	mov	r5, r2
 800bb66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb68:	6020      	str	r0, [r4, #0]
 800bb6a:	6061      	str	r1, [r4, #4]
 800bb6c:	60a2      	str	r2, [r4, #8]
 800bb6e:	60e3      	str	r3, [r4, #12]

	char _devId[8];
	_devId[0]='\0';
 800bb70:	2300      	movs	r3, #0
 800bb72:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	INTOA(devId, _devId);
 800bb76:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bb7a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800bb7e:	4611      	mov	r1, r2
 800bb80:	4618      	mov	r0, r3
 800bb82:	f003 f8e7 	bl	800ed54 <INTOA>
	char d[8];
	d[0]='\0';
 800bb86:	2300      	movs	r3, #0
 800bb88:	773b      	strb	r3, [r7, #28]
	for (int i=0; i < cdad;i++)
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb8e:	e037      	b.n	800bc00 <httpPOST2+0x1e4>
	{
		FTOA(vect_data[i],d,decimal[i]);
 800bb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb92:	005b      	lsls	r3, r3, #1
 800bb94:	683a      	ldr	r2, [r7, #0]
 800bb96:	4413      	add	r3, r2
 800bb98:	881b      	ldrh	r3, [r3, #0]
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bba0:	4413      	add	r3, r2
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	461a      	mov	r2, r3
 800bba6:	f107 031c 	add.w	r3, r7, #28
 800bbaa:	4619      	mov	r1, r3
 800bbac:	f003 f906 	bl	800edbc <FTOA>
		strncat(body,data[i],strlen(data[i]));
 800bbb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	009b      	lsls	r3, r3, #2
 800bbb6:	4413      	add	r3, r2
 800bbb8:	005b      	lsls	r3, r3, #1
 800bbba:	4a47      	ldr	r2, [pc, #284]	; (800bcd8 <httpPOST2+0x2bc>)
 800bbbc:	189c      	adds	r4, r3, r2
 800bbbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	4413      	add	r3, r2
 800bbc6:	005b      	lsls	r3, r3, #1
 800bbc8:	4a43      	ldr	r2, [pc, #268]	; (800bcd8 <httpPOST2+0x2bc>)
 800bbca:	4413      	add	r3, r2
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7f4 fb11 	bl	80001f4 <strlen>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	4621      	mov	r1, r4
 800bbd8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bbda:	f003 fbb8 	bl	800f34e <strncat>
		strncat(body,d,strlen(d));
 800bbde:	f107 031c 	add.w	r3, r7, #28
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7f4 fb06 	bl	80001f4 <strlen>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	f107 031c 	add.w	r3, r7, #28
 800bbee:	4619      	mov	r1, r3
 800bbf0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bbf2:	f003 fbac 	bl	800f34e <strncat>
		d[0]='\0';
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	773b      	strb	r3, [r7, #28]
	for (int i=0; i < cdad;i++)
 800bbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc04:	429a      	cmp	r2, r3
 800bc06:	dbc3      	blt.n	800bb90 <httpPOST2+0x174>
	}
	// Conversión de datos recibido por ModBUS

	strncat(body,deviceId,strlen(deviceId));
 800bc08:	4834      	ldr	r0, [pc, #208]	; (800bcdc <httpPOST2+0x2c0>)
 800bc0a:	f7f4 faf3 	bl	80001f4 <strlen>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	461a      	mov	r2, r3
 800bc12:	4932      	ldr	r1, [pc, #200]	; (800bcdc <httpPOST2+0x2c0>)
 800bc14:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bc16:	f003 fb9a 	bl	800f34e <strncat>
	strncat(body,_devId,strlen(_devId));
 800bc1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7f4 fae8 	bl	80001f4 <strlen>
 800bc24:	4602      	mov	r2, r0
 800bc26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bc2e:	f003 fb8e 	bl	800f34e <strncat>

	strncat(body,"}",strlen("}"));
 800bc32:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bc34:	f7f4 fade 	bl	80001f4 <strlen>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc3e:	4413      	add	r3, r2
 800bc40:	4927      	ldr	r1, [pc, #156]	; (800bce0 <httpPOST2+0x2c4>)
 800bc42:	461a      	mov	r2, r3
 800bc44:	460b      	mov	r3, r1
 800bc46:	881b      	ldrh	r3, [r3, #0]
 800bc48:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800bc4a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bc4c:	f7f4 fad2 	bl	80001f4 <strlen>
 800bc50:	4602      	mov	r2, r0
 800bc52:	f107 0314 	add.w	r3, r7, #20
 800bc56:	4619      	mov	r1, r3
 800bc58:	4610      	mov	r0, r2
 800bc5a:	f003 f87b 	bl	800ed54 <INTOA>
	strncat(post,length,strlen(length));
 800bc5e:	f107 0314 	add.w	r3, r7, #20
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7f4 fac6 	bl	80001f4 <strlen>
 800bc68:	4602      	mov	r2, r0
 800bc6a:	f107 0314 	add.w	r3, r7, #20
 800bc6e:	4619      	mov	r1, r3
 800bc70:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bc72:	f003 fb6c 	bl	800f34e <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800bc76:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bc78:	f7f4 fabc 	bl	80001f4 <strlen>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	461a      	mov	r2, r3
 800bc80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc82:	4413      	add	r3, r2
 800bc84:	4a17      	ldr	r2, [pc, #92]	; (800bce4 <httpPOST2+0x2c8>)
 800bc86:	6810      	ldr	r0, [r2, #0]
 800bc88:	6018      	str	r0, [r3, #0]
 800bc8a:	7912      	ldrb	r2, [r2, #4]
 800bc8c:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800bc8e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bc90:	f7f4 fab0 	bl	80001f4 <strlen>
 800bc94:	4602      	mov	r2, r0
 800bc96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d20a      	bcs.n	800bcb2 <httpPOST2+0x296>
	{
		strncat(post,body,strlen(body));
 800bc9c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bc9e:	f7f4 faa9 	bl	80001f4 <strlen>
 800bca2:	4603      	mov	r3, r0
 800bca4:	461a      	mov	r2, r3
 800bca6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bca8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bcaa:	f003 fb50 	bl	800f34e <strncat>
		return 1 ;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	e000      	b.n	800bcb4 <httpPOST2+0x298>
	}
		else
		{
			return 0;
 800bcb2:	2300      	movs	r3, #0
		}
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3730      	adds	r7, #48	; 0x30
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bdb0      	pop	{r4, r5, r7, pc}
 800bcbc:	080109a8 	.word	0x080109a8
 800bcc0:	080109b0 	.word	0x080109b0
 800bcc4:	080109bc 	.word	0x080109bc
 800bcc8:	080109c0 	.word	0x080109c0
 800bccc:	080109c8 	.word	0x080109c8
 800bcd0:	080109cc 	.word	0x080109cc
 800bcd4:	080109ec 	.word	0x080109ec
 800bcd8:	20000090 	.word	0x20000090
 800bcdc:	20000130 	.word	0x20000130
 800bce0:	080109fc 	.word	0x080109fc
 800bce4:	08010a00 	.word	0x08010a00

0800bce8 <LoRa_Send>:
#include "RYLR896.h"
#include "string.h"
#include "STR_Chelo.h"

int LoRa_Send(struct LoRa *a, UART_HandleTypeDef * SERIAL)
{
 800bce8:	b5b0      	push	{r4, r5, r7, lr}
 800bcea:	b086      	sub	sp, #24
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]

	char items[4];

	if(a->txitems > 241)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800bcf8:	2bf1      	cmp	r3, #241	; 0xf1
 800bcfa:	dd01      	ble.n	800bd00 <LoRa_Send+0x18>
	{
		return ERROR_BUFFER_SIZE;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e099      	b.n	800be34 <LoRa_Send+0x14c>
	}
	else
	{

		items[0]='\0';
 800bd00:	2300      	movs	r3, #0
 800bd02:	723b      	strb	r3, [r7, #8]
		itoa(a->txitems, items,10);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800bd0a:	f107 0108 	add.w	r1, r7, #8
 800bd0e:	220a      	movs	r2, #10
 800bd10:	4618      	mov	r0, r3
 800bd12:	f003 f930 	bl	800ef76 <itoa>
		a->txbuff2SND[0]='\0'; 													//Borro el vector
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		strncat(a->txbuff2SND,"AT+SEND=",strlen("AT+SEND="));					//AT+SEND=
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bd24:	4620      	mov	r0, r4
 800bd26:	f7f4 fa65 	bl	80001f4 <strlen>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	4423      	add	r3, r4
 800bd2e:	4943      	ldr	r1, [pc, #268]	; (800be3c <LoRa_Send+0x154>)
 800bd30:	461a      	mov	r2, r3
 800bd32:	460b      	mov	r3, r1
 800bd34:	cb03      	ldmia	r3!, {r0, r1}
 800bd36:	6010      	str	r0, [r2, #0]
 800bd38:	6051      	str	r1, [r2, #4]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	7213      	strb	r3, [r2, #8]
		strncat(a->txbuff2SND,a->dest_address,strlen(a->dest_address));			//AT+SEND=1
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f103 0516 	add.w	r5, r3, #22
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	3316      	adds	r3, #22
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7f4 fa50 	bl	80001f4 <strlen>
 800bd54:	4603      	mov	r3, r0
 800bd56:	461a      	mov	r2, r3
 800bd58:	4629      	mov	r1, r5
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	f003 faf7 	bl	800f34e <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bd66:	4620      	mov	r0, r4
 800bd68:	f7f4 fa44 	bl	80001f4 <strlen>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	4423      	add	r3, r4
 800bd70:	4933      	ldr	r1, [pc, #204]	; (800be40 <LoRa_Send+0x158>)
 800bd72:	461a      	mov	r2, r3
 800bd74:	460b      	mov	r3, r1
 800bd76:	881b      	ldrh	r3, [r3, #0]
 800bd78:	8013      	strh	r3, [r2, #0]
		strncat(a->txbuff2SND,items,strlen(items));								//AT+SEND=1,4
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bd80:	f107 0308 	add.w	r3, r7, #8
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7f4 fa35 	bl	80001f4 <strlen>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	f107 0308 	add.w	r3, r7, #8
 800bd90:	4619      	mov	r1, r3
 800bd92:	4620      	mov	r0, r4
 800bd94:	f003 fadb 	bl	800f34e <strncat>
		strncat(a->txbuff2SND,",",1);											//AT+SEND=1,4,
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f203 645c 	addw	r4, r3, #1628	; 0x65c
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f7f4 fa28 	bl	80001f4 <strlen>
 800bda4:	4603      	mov	r3, r0
 800bda6:	4423      	add	r3, r4
 800bda8:	4925      	ldr	r1, [pc, #148]	; (800be40 <LoRa_Send+0x158>)
 800bdaa:	461a      	mov	r2, r3
 800bdac:	460b      	mov	r3, r1
 800bdae:	881b      	ldrh	r3, [r3, #0]
 800bdb0:	8013      	strh	r3, [r2, #0]

		int la=strlen(a->txbuff2SND);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7f4 fa1b 	bl	80001f4 <strlen>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	617b      	str	r3, [r7, #20]
		int lb=la+a->txitems;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	; 0x7e0
 800bdc8:	697a      	ldr	r2, [r7, #20]
 800bdca:	4413      	add	r3, r2
 800bdcc:	60fb      	str	r3, [r7, #12]
		int lc=0;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800bdd2:	e012      	b.n	800bdfa <LoRa_Send+0x112>
		{
			a->txbuff2SND[la]=a->txbuff[lc];
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	4413      	add	r3, r2
 800bdda:	f203 43dc 	addw	r3, r3, #1244	; 0x4dc
 800bdde:	7819      	ldrb	r1, [r3, #0]
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	4413      	add	r3, r2
 800bde6:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800bdea:	460a      	mov	r2, r1
 800bdec:	701a      	strb	r2, [r3, #0]
			la++;
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	617b      	str	r3, [r7, #20]
			lc++;
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	613b      	str	r3, [r7, #16]
		while(la < lb )
 800bdfa:	697a      	ldr	r2, [r7, #20]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	dbe8      	blt.n	800bdd4 <LoRa_Send+0xec>
		}
		a->txbuff2SND[la++]='\r';
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	1c5a      	adds	r2, r3, #1
 800be06:	617a      	str	r2, [r7, #20]
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	4413      	add	r3, r2
 800be0c:	220d      	movs	r2, #13
 800be0e:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		a->txbuff2SND[la++]='\n';
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	1c5a      	adds	r2, r3, #1
 800be16:	617a      	str	r2, [r7, #20]
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	4413      	add	r3, r2
 800be1c:	220a      	movs	r2, #10
 800be1e:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
		HAL_UART_Transmit_IT(SERIAL, a->txbuff2SND, la);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f203 635c 	addw	r3, r3, #1628	; 0x65c
 800be28:	697a      	ldr	r2, [r7, #20]
 800be2a:	b292      	uxth	r2, r2
 800be2c:	4619      	mov	r1, r3
 800be2e:	6838      	ldr	r0, [r7, #0]
 800be30:	f7f9 fcaa 	bl	8005788 <HAL_UART_Transmit_IT>
	}

}
 800be34:	4618      	mov	r0, r3
 800be36:	3718      	adds	r7, #24
 800be38:	46bd      	mov	sp, r7
 800be3a:	bdb0      	pop	{r4, r5, r7, pc}
 800be3c:	08010a08 	.word	0x08010a08
 800be40:	08010a14 	.word	0x08010a14

0800be44 <LoRa_reset_sndTIMER>:
		a->tmr_dly_en=1;
		a->tmr_dlyCNT=0;
 }

void LoRa_reset_sndTIMER(struct LoRa *a,int msec)
 {
 800be44:	b480      	push	{r7}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
	 	a->tmr_dly_ON=0;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2200      	movs	r2, #0
 800be52:	f883 27ee 	strb.w	r2, [r3, #2030]	; 0x7ee
		a->tmr_dly=msec;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	683a      	ldr	r2, [r7, #0]
 800be5a:	f8c3 27f0 	str.w	r2, [r3, #2032]	; 0x7f0
		a->tmr_dly_en=0;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	f883 27ed 	strb.w	r2, [r3, #2029]	; 0x7ed
		a->tmr_dlyCNT=0;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	f8c3 27f4 	str.w	r2, [r3, #2036]	; 0x7f4
 }
 800be6e:	bf00      	nop
 800be70:	370c      	adds	r7, #12
 800be72:	46bd      	mov	sp, r7
 800be74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be78:	4770      	bx	lr
	...

0800be7c <LoRa_decode>:
		break;
	}
}

void LoRa_decode(struct LoRa *b)
 {
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b086      	sub	sp, #24
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
	switch (Lora_idSTR(b))
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 fa25 	bl	800c2d4 <Lora_idSTR>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b10      	cmp	r3, #16
 800be8e:	f200 820c 	bhi.w	800c2aa <LoRa_decode+0x42e>
 800be92:	a201      	add	r2, pc, #4	; (adr r2, 800be98 <LoRa_decode+0x1c>)
 800be94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be98:	0800bedd 	.word	0x0800bedd
 800be9c:	0800bfb5 	.word	0x0800bfb5
 800bea0:	0800c1e9 	.word	0x0800c1e9
 800bea4:	0800c1f3 	.word	0x0800c1f3
 800bea8:	0800c1fd 	.word	0x0800c1fd
 800beac:	0800c207 	.word	0x0800c207
 800beb0:	0800c211 	.word	0x0800c211
 800beb4:	0800c21b 	.word	0x0800c21b
 800beb8:	0800c225 	.word	0x0800c225
 800bebc:	0800c22f 	.word	0x0800c22f
 800bec0:	0800c239 	.word	0x0800c239
 800bec4:	0800c279 	.word	0x0800c279
 800bec8:	0800c283 	.word	0x0800c283
 800becc:	0800c297 	.word	0x0800c297
 800bed0:	0800c28d 	.word	0x0800c28d
 800bed4:	0800c1df 	.word	0x0800c1df
 800bed8:	0800c2a1 	.word	0x0800c2a1
	{
		case _OK:
		{
			switch(b->estado)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 800bee2:	3b01      	subs	r3, #1
 800bee4:	2b13      	cmp	r3, #19
 800bee6:	d860      	bhi.n	800bfaa <LoRa_decode+0x12e>
 800bee8:	a201      	add	r2, pc, #4	; (adr r2, 800bef0 <LoRa_decode+0x74>)
 800beea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beee:	bf00      	nop
 800bef0:	0800bf41 	.word	0x0800bf41
 800bef4:	0800bfab 	.word	0x0800bfab
 800bef8:	0800bfab 	.word	0x0800bfab
 800befc:	0800bfab 	.word	0x0800bfab
 800bf00:	0800bfab 	.word	0x0800bfab
 800bf04:	0800bfab 	.word	0x0800bfab
 800bf08:	0800bf4b 	.word	0x0800bf4b
 800bf0c:	0800bf55 	.word	0x0800bf55
 800bf10:	0800bfab 	.word	0x0800bfab
 800bf14:	0800bf5f 	.word	0x0800bf5f
 800bf18:	0800bfab 	.word	0x0800bfab
 800bf1c:	0800bf69 	.word	0x0800bf69
 800bf20:	0800bfab 	.word	0x0800bfab
 800bf24:	0800bf73 	.word	0x0800bf73
 800bf28:	0800bfab 	.word	0x0800bfab
 800bf2c:	0800bf7d 	.word	0x0800bf7d
 800bf30:	0800bfab 	.word	0x0800bfab
 800bf34:	0800bf87 	.word	0x0800bf87
 800bf38:	0800bfab 	.word	0x0800bfab
 800bf3c:	0800bf91 	.word	0x0800bf91
			{
				case _AT_SENT:
					b->estado=_IDLE;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2200      	movs	r2, #0
 800bf44:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bf48:	e02f      	b.n	800bfaa <LoRa_decode+0x12e>
				case _MODE_SENT:
					b->estado=_MODE_OK;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2206      	movs	r2, #6
 800bf4e:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bf52:	e02a      	b.n	800bfaa <LoRa_decode+0x12e>
				case _PARAMETER_SENT:
					b->estado=_PARAMETER_OK;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2209      	movs	r2, #9
 800bf58:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bf5c:	e025      	b.n	800bfaa <LoRa_decode+0x12e>
				case _BAND_SENT:
					b->estado=_BAND_OK;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	220b      	movs	r2, #11
 800bf62:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bf66:	e020      	b.n	800bfaa <LoRa_decode+0x12e>
				case _ADDR_SENT:
					b->estado=_ADDR_OK;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	220d      	movs	r2, #13
 800bf6c:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bf70:	e01b      	b.n	800bfaa <LoRa_decode+0x12e>
				case _NETWORK_SENT:
					b->estado=_NETWORK_OK;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	220f      	movs	r2, #15
 800bf76:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bf7a:	e016      	b.n	800bfaa <LoRa_decode+0x12e>
				case _CPIN_SENT:
					b->estado=_CPIN_OK;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2211      	movs	r2, #17
 800bf80:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bf84:	e011      	b.n	800bfaa <LoRa_decode+0x12e>
				case _CRFOP_SENT:
					b->estado=_CRFOP_OK;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2213      	movs	r2, #19
 800bf8a:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
					break;
 800bf8e:	e00c      	b.n	800bfaa <LoRa_decode+0x12e>
				case _SENT:
					{
						b->estado=_SENT_OK;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2215      	movs	r2, #21
 800bf94:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
						b->rxbuff[0]='\0';
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
						ITM0_Write("\r\nLora _SENT_OK\r\n",strlen("\r\nLora _SENT_OK\r\n"));
 800bfa0:	2111      	movs	r1, #17
 800bfa2:	48a8      	ldr	r0, [pc, #672]	; (800c244 <LoRa_decode+0x3c8>)
 800bfa4:	f7f5 fb22 	bl	80015ec <ITM0_Write>
					}
					break;
 800bfa8:	bf00      	nop

			}

			ITM0_Write("\r\nLora _OK\r\n",strlen("\r\nLora _OK\r\n"));
 800bfaa:	210c      	movs	r1, #12
 800bfac:	48a6      	ldr	r0, [pc, #664]	; (800c248 <LoRa_decode+0x3cc>)
 800bfae:	f7f5 fb1d 	bl	80015ec <ITM0_Write>
						//Clean rxbuff_hld
		}
			break;
 800bfb2:	e17f      	b.n	800c2b4 <LoRa_decode+0x438>
		case _RCV:
		{
			ITM0_Write("\r\nLora _RCV\r\n",strlen("\r\nLora _RCV\r\n"));
 800bfb4:	210d      	movs	r1, #13
 800bfb6:	48a5      	ldr	r0, [pc, #660]	; (800c24c <LoRa_decode+0x3d0>)
 800bfb8:	f7f5 fb18 	bl	80015ec <ITM0_Write>
				b->estado=_DATO_RECIBIDO;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	221a      	movs	r2, #26
 800bfc0:	f883 27ec 	strb.w	r2, [r3, #2028]	; 0x7ec
				b->_data_available=1;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
					int i=0;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	617b      	str	r3, [r7, #20]
					int j=0;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	613b      	str	r3, [r7, #16]
					int lngt=0;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	60fb      	str	r3, [r7, #12]
					while (b->rxbuff[i] != '=')
 800bfd8:	e002      	b.n	800bfe0 <LoRa_decode+0x164>
					{ i++;}
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i] != '=')
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	3356      	adds	r3, #86	; 0x56
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	2b3d      	cmp	r3, #61	; 0x3d
 800bfec:	d1f5      	bne.n	800bfda <LoRa_decode+0x15e>
					i++;
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	3301      	adds	r3, #1
 800bff2:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800bff4:	e017      	b.n	800c026 <LoRa_decode+0x1aa>
					{
						b->rxaddress[j]=b->rxbuff[i];			//Save the address
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	4413      	add	r3, r2
 800bffc:	3356      	adds	r3, #86	; 0x56
 800bffe:	7819      	ldrb	r1, [r3, #0]
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	4413      	add	r3, r2
 800c006:	3306      	adds	r3, #6
 800c008:	460a      	mov	r2, r1
 800c00a:	701a      	strb	r2, [r3, #0]
						i++;
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	3301      	adds	r3, #1
 800c010:	617b      	str	r3, [r7, #20]
						j++;
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	3301      	adds	r3, #1
 800c016:	613b      	str	r3, [r7, #16]
						if (j > 6)
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	2b06      	cmp	r3, #6
 800c01c:	dd03      	ble.n	800c026 <LoRa_decode+0x1aa>
						{
							Lora_rx_del(b);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 fbca 	bl	800c7b8 <Lora_rx_del>
							break;
 800c024:	e006      	b.n	800c034 <LoRa_decode+0x1b8>
					while (b->rxbuff[i]!= ',')
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	4413      	add	r3, r2
 800c02c:	3356      	adds	r3, #86	; 0x56
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	2b2c      	cmp	r3, #44	; 0x2c
 800c032:	d1e0      	bne.n	800bff6 <LoRa_decode+0x17a>
						}
					}
					b->rxaddress[j]='\0';
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	4413      	add	r3, r2
 800c03a:	3306      	adds	r3, #6
 800c03c:	2200      	movs	r2, #0
 800c03e:	701a      	strb	r2, [r3, #0]
					j=0;
 800c040:	2300      	movs	r3, #0
 800c042:	613b      	str	r3, [r7, #16]
					i++;
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	3301      	adds	r3, #1
 800c048:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800c04a:	e017      	b.n	800c07c <LoRa_decode+0x200>
					{
						b->rx_items[j]=b->rxbuff[i];			//Save the qty of data
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	4413      	add	r3, r2
 800c052:	3356      	adds	r3, #86	; 0x56
 800c054:	7819      	ldrb	r1, [r3, #0]
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	4413      	add	r3, r2
 800c05c:	330c      	adds	r3, #12
 800c05e:	460a      	mov	r2, r1
 800c060:	701a      	strb	r2, [r3, #0]
						i++;
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	3301      	adds	r3, #1
 800c066:	617b      	str	r3, [r7, #20]
						j++;
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	3301      	adds	r3, #1
 800c06c:	613b      	str	r3, [r7, #16]
						if (j > 4)
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	2b04      	cmp	r3, #4
 800c072:	dd03      	ble.n	800c07c <LoRa_decode+0x200>
						{
							Lora_rx_del(b);
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 fb9f 	bl	800c7b8 <Lora_rx_del>
							break;
 800c07a:	e006      	b.n	800c08a <LoRa_decode+0x20e>
					while (b->rxbuff[i]!= ',')
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	4413      	add	r3, r2
 800c082:	3356      	adds	r3, #86	; 0x56
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	2b2c      	cmp	r3, #44	; 0x2c
 800c088:	d1e0      	bne.n	800c04c <LoRa_decode+0x1d0>
						}
					}
					b->rx_items[j]='\0';
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	4413      	add	r3, r2
 800c090:	330c      	adds	r3, #12
 800c092:	2200      	movs	r2, #0
 800c094:	701a      	strb	r2, [r3, #0]
					j=0;
 800c096:	2300      	movs	r3, #0
 800c098:	613b      	str	r3, [r7, #16]
					i++;
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	3301      	adds	r3, #1
 800c09e:	617b      	str	r3, [r7, #20]
					lngt=atoi(b->rx_items,10);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	330c      	adds	r3, #12
 800c0a4:	210a      	movs	r1, #10
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f002 ff49 	bl	800ef3e <atoi>
 800c0ac:	60f8      	str	r0, [r7, #12]
					//lngt=lngt+i;
					//while(lngt>i)   //Ahota busco leer lo datos recibid y luego verificar si ok
					while (b->rxbuff[i]!= ',')
 800c0ae:	e019      	b.n	800c0e4 <LoRa_decode+0x268>
					{
						b->dataRCV[j]=b->rxbuff[i];			//Save the data
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	4413      	add	r3, r2
 800c0b6:	3356      	adds	r3, #86	; 0x56
 800c0b8:	7819      	ldrb	r1, [r3, #0]
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	4413      	add	r3, r2
 800c0c0:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800c0c4:	460a      	mov	r2, r1
 800c0c6:	701a      	strb	r2, [r3, #0]
						j++;
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	613b      	str	r3, [r7, #16]
						i++;
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	617b      	str	r3, [r7, #20]
						if (j > lngt)
 800c0d4:	693a      	ldr	r2, [r7, #16]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	dd03      	ble.n	800c0e4 <LoRa_decode+0x268>
						{
							Lora_rx_del(b);
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 fb6b 	bl	800c7b8 <Lora_rx_del>
							break;
 800c0e2:	e006      	b.n	800c0f2 <LoRa_decode+0x276>
					while (b->rxbuff[i]!= ',')
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	3356      	adds	r3, #86	; 0x56
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	2b2c      	cmp	r3, #44	; 0x2c
 800c0f0:	d1de      	bne.n	800c0b0 <LoRa_decode+0x234>
						}
					}
					b->_n_dataRCV=j;							//Save amount of data received
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	693a      	ldr	r2, [r7, #16]
 800c0f6:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
					j=0;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	613b      	str	r3, [r7, #16]
					i++;
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	3301      	adds	r3, #1
 800c102:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= ',')
 800c104:	e017      	b.n	800c136 <LoRa_decode+0x2ba>
					{
						b->rx_convert[j]=b->rxbuff[i];			//save RSSI
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	4413      	add	r3, r2
 800c10c:	3356      	adds	r3, #86	; 0x56
 800c10e:	7819      	ldrb	r1, [r3, #0]
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	4413      	add	r3, r2
 800c116:	3310      	adds	r3, #16
 800c118:	460a      	mov	r2, r1
 800c11a:	701a      	strb	r2, [r3, #0]
						i++;
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	3301      	adds	r3, #1
 800c120:	617b      	str	r3, [r7, #20]
						j++;
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	3301      	adds	r3, #1
 800c126:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	2b05      	cmp	r3, #5
 800c12c:	dd03      	ble.n	800c136 <LoRa_decode+0x2ba>
						{
							Lora_rx_del(b);
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 fb42 	bl	800c7b8 <Lora_rx_del>
							break;
 800c134:	e006      	b.n	800c144 <LoRa_decode+0x2c8>
					while (b->rxbuff[i]!= ',')
 800c136:	687a      	ldr	r2, [r7, #4]
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	4413      	add	r3, r2
 800c13c:	3356      	adds	r3, #86	; 0x56
 800c13e:	781b      	ldrb	r3, [r3, #0]
 800c140:	2b2c      	cmp	r3, #44	; 0x2c
 800c142:	d1e0      	bne.n	800c106 <LoRa_decode+0x28a>
						}
					}
					b->rxRSSI=atoi(b->rx_convert,10);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	3310      	adds	r3, #16
 800c148:	210a      	movs	r1, #10
 800c14a:	4618      	mov	r0, r3
 800c14c:	f002 fef7 	bl	800ef3e <atoi>
 800c150:	4602      	mov	r2, r0
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
					b->rx_convert[j]='\0';
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	4413      	add	r3, r2
 800c15e:	3310      	adds	r3, #16
 800c160:	2200      	movs	r2, #0
 800c162:	701a      	strb	r2, [r3, #0]
					j=0;
 800c164:	2300      	movs	r3, #0
 800c166:	613b      	str	r3, [r7, #16]
					i++;
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	3301      	adds	r3, #1
 800c16c:	617b      	str	r3, [r7, #20]
					while (b->rxbuff[i]!= '\r')
 800c16e:	e017      	b.n	800c1a0 <LoRa_decode+0x324>
					{
						b->rx_convert[j]=b->rxbuff[i];			// Save SNR
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	4413      	add	r3, r2
 800c176:	3356      	adds	r3, #86	; 0x56
 800c178:	7819      	ldrb	r1, [r3, #0]
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	4413      	add	r3, r2
 800c180:	3310      	adds	r3, #16
 800c182:	460a      	mov	r2, r1
 800c184:	701a      	strb	r2, [r3, #0]
						i++;
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	3301      	adds	r3, #1
 800c18a:	617b      	str	r3, [r7, #20]
						j++;
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	3301      	adds	r3, #1
 800c190:	613b      	str	r3, [r7, #16]
						if (j > 5)
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	2b05      	cmp	r3, #5
 800c196:	dd03      	ble.n	800c1a0 <LoRa_decode+0x324>
						{
							Lora_rx_del(b);
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 fb0d 	bl	800c7b8 <Lora_rx_del>
							break;
 800c19e:	e006      	b.n	800c1ae <LoRa_decode+0x332>
					while (b->rxbuff[i]!= '\r')
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	4413      	add	r3, r2
 800c1a6:	3356      	adds	r3, #86	; 0x56
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	2b0d      	cmp	r3, #13
 800c1ac:	d1e0      	bne.n	800c170 <LoRa_decode+0x2f4>
						}
					}

					b->rx_convert[j]='\0';
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	3310      	adds	r3, #16
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	701a      	strb	r2, [r3, #0]
					b->rxSNR=atoi(b->rx_convert,10);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	3310      	adds	r3, #16
 800c1be:	210a      	movs	r1, #10
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f002 febc 	bl	800ef3e <atoi>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
					b->rx_convert[0]='\0';
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	741a      	strb	r2, [r3, #16]


			    //Timer de enviar data cuando antes se recibe
				//LoRa_set_sndTIMER(b, 3000);
				b->rxbuff[0]='\0';
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		}
			break;
 800c1dc:	e06a      	b.n	800c2b4 <LoRa_decode+0x438>
		case _ERR:
			ITM0_Write("\r\nLora _ERR\r\n",strlen("\r\nLora _ERR\r\n"));
 800c1de:	210d      	movs	r1, #13
 800c1e0:	481b      	ldr	r0, [pc, #108]	; (800c250 <LoRa_decode+0x3d4>)
 800c1e2:	f7f5 fa03 	bl	80015ec <ITM0_Write>
			break;
 800c1e6:	e065      	b.n	800c2b4 <LoRa_decode+0x438>
		case _RESET:
			ITM0_Write("\r\nLora _RESET\r\n",strlen("\r\nLora _RESET\r\n"));
 800c1e8:	210f      	movs	r1, #15
 800c1ea:	481a      	ldr	r0, [pc, #104]	; (800c254 <LoRa_decode+0x3d8>)
 800c1ec:	f7f5 f9fe 	bl	80015ec <ITM0_Write>
			break;
 800c1f0:	e060      	b.n	800c2b4 <LoRa_decode+0x438>
		case _READY:
			ITM0_Write("\r\nLora _READY\r\n",strlen("\r\nLora _READY\r\n"));
 800c1f2:	210f      	movs	r1, #15
 800c1f4:	4818      	ldr	r0, [pc, #96]	; (800c258 <LoRa_decode+0x3dc>)
 800c1f6:	f7f5 f9f9 	bl	80015ec <ITM0_Write>
			break;
 800c1fa:	e05b      	b.n	800c2b4 <LoRa_decode+0x438>
		case _MODE:
			ITM0_Write("\r\nLora _MODE\r\n",strlen("\r\nLora _MODE\r\n"));
 800c1fc:	210e      	movs	r1, #14
 800c1fe:	4817      	ldr	r0, [pc, #92]	; (800c25c <LoRa_decode+0x3e0>)
 800c200:	f7f5 f9f4 	bl	80015ec <ITM0_Write>
			break;
 800c204:	e056      	b.n	800c2b4 <LoRa_decode+0x438>
		case _IPR:
			ITM0_Write("\r\nLora _IPR\r\n",strlen("\r\nLora _IPR\r\n"));
 800c206:	210d      	movs	r1, #13
 800c208:	4815      	ldr	r0, [pc, #84]	; (800c260 <LoRa_decode+0x3e4>)
 800c20a:	f7f5 f9ef 	bl	80015ec <ITM0_Write>
			break;
 800c20e:	e051      	b.n	800c2b4 <LoRa_decode+0x438>
		case _PARAMETER:
			ITM0_Write("\r\nLora _PARAMETER\r\n",strlen("\r\nLora _PARAMETER\r\n"));
 800c210:	2113      	movs	r1, #19
 800c212:	4814      	ldr	r0, [pc, #80]	; (800c264 <LoRa_decode+0x3e8>)
 800c214:	f7f5 f9ea 	bl	80015ec <ITM0_Write>
			break;
 800c218:	e04c      	b.n	800c2b4 <LoRa_decode+0x438>
		case _BAND:
			ITM0_Write("\r\nLora _BAND\r\n",strlen("\r\nLora _BAND\r\n"));
 800c21a:	210e      	movs	r1, #14
 800c21c:	4812      	ldr	r0, [pc, #72]	; (800c268 <LoRa_decode+0x3ec>)
 800c21e:	f7f5 f9e5 	bl	80015ec <ITM0_Write>
			break;
 800c222:	e047      	b.n	800c2b4 <LoRa_decode+0x438>
		case _ADDRESS:
			ITM0_Write("\r\nLora _ADDRESS\r\n",strlen("\r\nLora _ADDRESS\r\n"));
 800c224:	2111      	movs	r1, #17
 800c226:	4811      	ldr	r0, [pc, #68]	; (800c26c <LoRa_decode+0x3f0>)
 800c228:	f7f5 f9e0 	bl	80015ec <ITM0_Write>
			break;
 800c22c:	e042      	b.n	800c2b4 <LoRa_decode+0x438>
		case _NETWORK:
			ITM0_Write("\r\nLora _NETWORK\r\n",strlen("\r\nLora _NETWORK\r\n"));
 800c22e:	2111      	movs	r1, #17
 800c230:	480f      	ldr	r0, [pc, #60]	; (800c270 <LoRa_decode+0x3f4>)
 800c232:	f7f5 f9db 	bl	80015ec <ITM0_Write>
			break;
 800c236:	e03d      	b.n	800c2b4 <LoRa_decode+0x438>
		case _CPIN:
			ITM0_Write("\r\nLora _CPIN\r\n",strlen("\r\nLora _CPIN\r\n"));
 800c238:	210e      	movs	r1, #14
 800c23a:	480e      	ldr	r0, [pc, #56]	; (800c274 <LoRa_decode+0x3f8>)
 800c23c:	f7f5 f9d6 	bl	80015ec <ITM0_Write>
			break;
 800c240:	e038      	b.n	800c2b4 <LoRa_decode+0x438>
 800c242:	bf00      	nop
 800c244:	08010a44 	.word	0x08010a44
 800c248:	08010a58 	.word	0x08010a58
 800c24c:	08010a68 	.word	0x08010a68
 800c250:	08010a78 	.word	0x08010a78
 800c254:	08010a88 	.word	0x08010a88
 800c258:	08010a98 	.word	0x08010a98
 800c25c:	08010aa8 	.word	0x08010aa8
 800c260:	08010ab8 	.word	0x08010ab8
 800c264:	08010ac8 	.word	0x08010ac8
 800c268:	08010adc 	.word	0x08010adc
 800c26c:	08010aec 	.word	0x08010aec
 800c270:	08010b00 	.word	0x08010b00
 800c274:	08010b14 	.word	0x08010b14
		case _CRFOP:
			ITM0_Write("\r\nLora _CRFOP\r\n",strlen("\r\nLora _CRFOP\r\n"));
 800c278:	210f      	movs	r1, #15
 800c27a:	4810      	ldr	r0, [pc, #64]	; (800c2bc <LoRa_decode+0x440>)
 800c27c:	f7f5 f9b6 	bl	80015ec <ITM0_Write>
			break;
 800c280:	e018      	b.n	800c2b4 <LoRa_decode+0x438>
		case _SEND:
			ITM0_Write("\r\nLora _SEND\r\n",strlen("\r\nLora _SEND\r\n"));
 800c282:	210e      	movs	r1, #14
 800c284:	480e      	ldr	r0, [pc, #56]	; (800c2c0 <LoRa_decode+0x444>)
 800c286:	f7f5 f9b1 	bl	80015ec <ITM0_Write>
			break;
 800c28a:	e013      	b.n	800c2b4 <LoRa_decode+0x438>
		case _UID:
			ITM0_Write("\r\nLora _UID\r\n",strlen("\r\nLora _UID\r\n"));
 800c28c:	210d      	movs	r1, #13
 800c28e:	480d      	ldr	r0, [pc, #52]	; (800c2c4 <LoRa_decode+0x448>)
 800c290:	f7f5 f9ac 	bl	80015ec <ITM0_Write>
			break;
 800c294:	e00e      	b.n	800c2b4 <LoRa_decode+0x438>
		case _VER:
			ITM0_Write("\r\nLora _VER\r\n",strlen("\r\nLora _VER\r\n"));
 800c296:	210d      	movs	r1, #13
 800c298:	480b      	ldr	r0, [pc, #44]	; (800c2c8 <LoRa_decode+0x44c>)
 800c29a:	f7f5 f9a7 	bl	80015ec <ITM0_Write>
			break;
 800c29e:	e009      	b.n	800c2b4 <LoRa_decode+0x438>
		case _ERR_RCV_OF:
			ITM0_Write("\r\nLora _ERR_RCV_OF\r\n",strlen("\r\nLora _ERR_RCV_OF\r\n"));
 800c2a0:	2114      	movs	r1, #20
 800c2a2:	480a      	ldr	r0, [pc, #40]	; (800c2cc <LoRa_decode+0x450>)
 800c2a4:	f7f5 f9a2 	bl	80015ec <ITM0_Write>
			break;
 800c2a8:	e004      	b.n	800c2b4 <LoRa_decode+0x438>
		default:
			ITM0_Write("\r\nLora default\r\n",strlen("\r\nLora default\r\n"));
 800c2aa:	2110      	movs	r1, #16
 800c2ac:	4808      	ldr	r0, [pc, #32]	; (800c2d0 <LoRa_decode+0x454>)
 800c2ae:	f7f5 f99d 	bl	80015ec <ITM0_Write>
			break;
 800c2b2:	bf00      	nop
	}
 }
 800c2b4:	bf00      	nop
 800c2b6:	3718      	adds	r7, #24
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}
 800c2bc:	08010b24 	.word	0x08010b24
 800c2c0:	08010b34 	.word	0x08010b34
 800c2c4:	08010b44 	.word	0x08010b44
 800c2c8:	08010b54 	.word	0x08010b54
 800c2cc:	08010b64 	.word	0x08010b64
 800c2d0:	08010b7c 	.word	0x08010b7c

0800c2d4 <Lora_idSTR>:
int Lora_idSTR(struct LoRa *a)
{		int f,g,h,i;
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b090      	sub	sp, #64	; 0x40
 800c2d8:	af06      	add	r7, sp, #24
 800c2da:	6078      	str	r0, [r7, #4]
		if(a->rxitems > 270) return _ERR_RCV_OF;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 800c2e2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c2e6:	dd01      	ble.n	800c2ec <Lora_idSTR+0x18>
 800c2e8:	2310      	movs	r3, #16
 800c2ea:	e257      	b.n	800c79c <Lora_idSTR+0x4c8>
		char data[10];
		int ndata=0;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	60fb      	str	r3, [r7, #12]
		i=strlen("+OK=");
 800c2f0:	2304      	movs	r3, #4
 800c2f2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+OK=",&i,data,&ndata,&g,&h,512, 0)==1) return _OK ;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c300:	f107 021c 	add.w	r2, r7, #28
 800c304:	2300      	movs	r3, #0
 800c306:	9305      	str	r3, [sp, #20]
 800c308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c30c:	9304      	str	r3, [sp, #16]
 800c30e:	f107 0320 	add.w	r3, r7, #32
 800c312:	9303      	str	r3, [sp, #12]
 800c314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c318:	9302      	str	r3, [sp, #8]
 800c31a:	f107 030c 	add.w	r3, r7, #12
 800c31e:	9301      	str	r3, [sp, #4]
 800c320:	f107 0310 	add.w	r3, r7, #16
 800c324:	9300      	str	r3, [sp, #0]
 800c326:	4613      	mov	r3, r2
 800c328:	4ab7      	ldr	r2, [pc, #732]	; (800c608 <Lora_idSTR+0x334>)
 800c32a:	f002 f9cb 	bl	800e6c4 <FT_String_ND>
 800c32e:	4603      	mov	r3, r0
 800c330:	2b01      	cmp	r3, #1
 800c332:	d101      	bne.n	800c338 <Lora_idSTR+0x64>
 800c334:	2300      	movs	r3, #0
 800c336:	e231      	b.n	800c79c <Lora_idSTR+0x4c8>
		i=strlen("+RCV=");
 800c338:	2305      	movs	r3, #5
 800c33a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RCV=",&i,data,&ndata,&g,&h,512, 0)==1) return _RCV ;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c348:	f107 021c 	add.w	r2, r7, #28
 800c34c:	2300      	movs	r3, #0
 800c34e:	9305      	str	r3, [sp, #20]
 800c350:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c354:	9304      	str	r3, [sp, #16]
 800c356:	f107 0320 	add.w	r3, r7, #32
 800c35a:	9303      	str	r3, [sp, #12]
 800c35c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c360:	9302      	str	r3, [sp, #8]
 800c362:	f107 030c 	add.w	r3, r7, #12
 800c366:	9301      	str	r3, [sp, #4]
 800c368:	f107 0310 	add.w	r3, r7, #16
 800c36c:	9300      	str	r3, [sp, #0]
 800c36e:	4613      	mov	r3, r2
 800c370:	4aa6      	ldr	r2, [pc, #664]	; (800c60c <Lora_idSTR+0x338>)
 800c372:	f002 f9a7 	bl	800e6c4 <FT_String_ND>
 800c376:	4603      	mov	r3, r0
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d101      	bne.n	800c380 <Lora_idSTR+0xac>
 800c37c:	2301      	movs	r3, #1
 800c37e:	e20d      	b.n	800c79c <Lora_idSTR+0x4c8>
		i=strlen("+ERR=");
 800c380:	2305      	movs	r3, #5
 800c382:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ERR=",&i,data,&ndata,&g,&h,512, 0)==1) return _ERR ;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c390:	f107 021c 	add.w	r2, r7, #28
 800c394:	2300      	movs	r3, #0
 800c396:	9305      	str	r3, [sp, #20]
 800c398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c39c:	9304      	str	r3, [sp, #16]
 800c39e:	f107 0320 	add.w	r3, r7, #32
 800c3a2:	9303      	str	r3, [sp, #12]
 800c3a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3a8:	9302      	str	r3, [sp, #8]
 800c3aa:	f107 030c 	add.w	r3, r7, #12
 800c3ae:	9301      	str	r3, [sp, #4]
 800c3b0:	f107 0310 	add.w	r3, r7, #16
 800c3b4:	9300      	str	r3, [sp, #0]
 800c3b6:	4613      	mov	r3, r2
 800c3b8:	4a95      	ldr	r2, [pc, #596]	; (800c610 <Lora_idSTR+0x33c>)
 800c3ba:	f002 f983 	bl	800e6c4 <FT_String_ND>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d101      	bne.n	800c3c8 <Lora_idSTR+0xf4>
 800c3c4:	230f      	movs	r3, #15
 800c3c6:	e1e9      	b.n	800c79c <Lora_idSTR+0x4c8>
		i=strlen("+RESET");
 800c3c8:	2306      	movs	r3, #6
 800c3ca:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+RESET",&i,data,&ndata,&g,&h,512, 0)==1)return _RESET;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c3d8:	f107 021c 	add.w	r2, r7, #28
 800c3dc:	2300      	movs	r3, #0
 800c3de:	9305      	str	r3, [sp, #20]
 800c3e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3e4:	9304      	str	r3, [sp, #16]
 800c3e6:	f107 0320 	add.w	r3, r7, #32
 800c3ea:	9303      	str	r3, [sp, #12]
 800c3ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3f0:	9302      	str	r3, [sp, #8]
 800c3f2:	f107 030c 	add.w	r3, r7, #12
 800c3f6:	9301      	str	r3, [sp, #4]
 800c3f8:	f107 0310 	add.w	r3, r7, #16
 800c3fc:	9300      	str	r3, [sp, #0]
 800c3fe:	4613      	mov	r3, r2
 800c400:	4a84      	ldr	r2, [pc, #528]	; (800c614 <Lora_idSTR+0x340>)
 800c402:	f002 f95f 	bl	800e6c4 <FT_String_ND>
 800c406:	4603      	mov	r3, r0
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d101      	bne.n	800c410 <Lora_idSTR+0x13c>
 800c40c:	2302      	movs	r3, #2
 800c40e:	e1c5      	b.n	800c79c <Lora_idSTR+0x4c8>
		i=strlen("+READY");
 800c410:	2306      	movs	r3, #6
 800c412:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+READY",&i,data,&ndata,&g,&h,512, 0)==1) return _READY ;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c420:	f107 021c 	add.w	r2, r7, #28
 800c424:	2300      	movs	r3, #0
 800c426:	9305      	str	r3, [sp, #20]
 800c428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c42c:	9304      	str	r3, [sp, #16]
 800c42e:	f107 0320 	add.w	r3, r7, #32
 800c432:	9303      	str	r3, [sp, #12]
 800c434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c438:	9302      	str	r3, [sp, #8]
 800c43a:	f107 030c 	add.w	r3, r7, #12
 800c43e:	9301      	str	r3, [sp, #4]
 800c440:	f107 0310 	add.w	r3, r7, #16
 800c444:	9300      	str	r3, [sp, #0]
 800c446:	4613      	mov	r3, r2
 800c448:	4a73      	ldr	r2, [pc, #460]	; (800c618 <Lora_idSTR+0x344>)
 800c44a:	f002 f93b 	bl	800e6c4 <FT_String_ND>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b01      	cmp	r3, #1
 800c452:	d101      	bne.n	800c458 <Lora_idSTR+0x184>
 800c454:	2303      	movs	r3, #3
 800c456:	e1a1      	b.n	800c79c <Lora_idSTR+0x4c8>
		i=strlen("+MODE=");
 800c458:	2306      	movs	r3, #6
 800c45a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+MODE=",&i,data,&ndata,&g,&h,512, 0)==1) return _MODE ;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c468:	f107 021c 	add.w	r2, r7, #28
 800c46c:	2300      	movs	r3, #0
 800c46e:	9305      	str	r3, [sp, #20]
 800c470:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c474:	9304      	str	r3, [sp, #16]
 800c476:	f107 0320 	add.w	r3, r7, #32
 800c47a:	9303      	str	r3, [sp, #12]
 800c47c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c480:	9302      	str	r3, [sp, #8]
 800c482:	f107 030c 	add.w	r3, r7, #12
 800c486:	9301      	str	r3, [sp, #4]
 800c488:	f107 0310 	add.w	r3, r7, #16
 800c48c:	9300      	str	r3, [sp, #0]
 800c48e:	4613      	mov	r3, r2
 800c490:	4a62      	ldr	r2, [pc, #392]	; (800c61c <Lora_idSTR+0x348>)
 800c492:	f002 f917 	bl	800e6c4 <FT_String_ND>
 800c496:	4603      	mov	r3, r0
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d101      	bne.n	800c4a0 <Lora_idSTR+0x1cc>
 800c49c:	2304      	movs	r3, #4
 800c49e:	e17d      	b.n	800c79c <Lora_idSTR+0x4c8>
		i=strlen("+IPR=");
 800c4a0:	2305      	movs	r3, #5
 800c4a2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+IPR=",&i,data,&ndata,&g,&h,512, 0)==1) return _IPR ;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c4b0:	f107 021c 	add.w	r2, r7, #28
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	9305      	str	r3, [sp, #20]
 800c4b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c4bc:	9304      	str	r3, [sp, #16]
 800c4be:	f107 0320 	add.w	r3, r7, #32
 800c4c2:	9303      	str	r3, [sp, #12]
 800c4c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4c8:	9302      	str	r3, [sp, #8]
 800c4ca:	f107 030c 	add.w	r3, r7, #12
 800c4ce:	9301      	str	r3, [sp, #4]
 800c4d0:	f107 0310 	add.w	r3, r7, #16
 800c4d4:	9300      	str	r3, [sp, #0]
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	4a51      	ldr	r2, [pc, #324]	; (800c620 <Lora_idSTR+0x34c>)
 800c4da:	f002 f8f3 	bl	800e6c4 <FT_String_ND>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d101      	bne.n	800c4e8 <Lora_idSTR+0x214>
 800c4e4:	2305      	movs	r3, #5
 800c4e6:	e159      	b.n	800c79c <Lora_idSTR+0x4c8>
		i=strlen("+PARAMETER=");
 800c4e8:	230b      	movs	r3, #11
 800c4ea:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+PARAMETER=",&i,data,&ndata,&g,&h,512, 0)==1) return _PARAMETER ;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c4f8:	f107 021c 	add.w	r2, r7, #28
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	9305      	str	r3, [sp, #20]
 800c500:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c504:	9304      	str	r3, [sp, #16]
 800c506:	f107 0320 	add.w	r3, r7, #32
 800c50a:	9303      	str	r3, [sp, #12]
 800c50c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c510:	9302      	str	r3, [sp, #8]
 800c512:	f107 030c 	add.w	r3, r7, #12
 800c516:	9301      	str	r3, [sp, #4]
 800c518:	f107 0310 	add.w	r3, r7, #16
 800c51c:	9300      	str	r3, [sp, #0]
 800c51e:	4613      	mov	r3, r2
 800c520:	4a40      	ldr	r2, [pc, #256]	; (800c624 <Lora_idSTR+0x350>)
 800c522:	f002 f8cf 	bl	800e6c4 <FT_String_ND>
 800c526:	4603      	mov	r3, r0
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d101      	bne.n	800c530 <Lora_idSTR+0x25c>
 800c52c:	2306      	movs	r3, #6
 800c52e:	e135      	b.n	800c79c <Lora_idSTR+0x4c8>
		i=strlen("+BAND=");
 800c530:	2306      	movs	r3, #6
 800c532:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+BAND=",&i,data,&ndata,&g,&h,512, 0)==1) return _BAND ;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c540:	f107 021c 	add.w	r2, r7, #28
 800c544:	2300      	movs	r3, #0
 800c546:	9305      	str	r3, [sp, #20]
 800c548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c54c:	9304      	str	r3, [sp, #16]
 800c54e:	f107 0320 	add.w	r3, r7, #32
 800c552:	9303      	str	r3, [sp, #12]
 800c554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c558:	9302      	str	r3, [sp, #8]
 800c55a:	f107 030c 	add.w	r3, r7, #12
 800c55e:	9301      	str	r3, [sp, #4]
 800c560:	f107 0310 	add.w	r3, r7, #16
 800c564:	9300      	str	r3, [sp, #0]
 800c566:	4613      	mov	r3, r2
 800c568:	4a2f      	ldr	r2, [pc, #188]	; (800c628 <Lora_idSTR+0x354>)
 800c56a:	f002 f8ab 	bl	800e6c4 <FT_String_ND>
 800c56e:	4603      	mov	r3, r0
 800c570:	2b01      	cmp	r3, #1
 800c572:	d101      	bne.n	800c578 <Lora_idSTR+0x2a4>
 800c574:	2307      	movs	r3, #7
 800c576:	e111      	b.n	800c79c <Lora_idSTR+0x4c8>
		i=strlen("+ADDRESS=");
 800c578:	2309      	movs	r3, #9
 800c57a:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+ADDRESS=",&i,data,&ndata,&g,&h,512, 0)==1) return _ADDRESS ;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c588:	f107 021c 	add.w	r2, r7, #28
 800c58c:	2300      	movs	r3, #0
 800c58e:	9305      	str	r3, [sp, #20]
 800c590:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c594:	9304      	str	r3, [sp, #16]
 800c596:	f107 0320 	add.w	r3, r7, #32
 800c59a:	9303      	str	r3, [sp, #12]
 800c59c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5a0:	9302      	str	r3, [sp, #8]
 800c5a2:	f107 030c 	add.w	r3, r7, #12
 800c5a6:	9301      	str	r3, [sp, #4]
 800c5a8:	f107 0310 	add.w	r3, r7, #16
 800c5ac:	9300      	str	r3, [sp, #0]
 800c5ae:	4613      	mov	r3, r2
 800c5b0:	4a1e      	ldr	r2, [pc, #120]	; (800c62c <Lora_idSTR+0x358>)
 800c5b2:	f002 f887 	bl	800e6c4 <FT_String_ND>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d101      	bne.n	800c5c0 <Lora_idSTR+0x2ec>
 800c5bc:	2308      	movs	r3, #8
 800c5be:	e0ed      	b.n	800c79c <Lora_idSTR+0x4c8>
		i=strlen("+NETWORK=");
 800c5c0:	2309      	movs	r3, #9
 800c5c2:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+NETWORK=",&i,data,&ndata,&g,&h,512, 0)==1) return _NETWORK ;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c5d0:	f107 021c 	add.w	r2, r7, #28
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	9305      	str	r3, [sp, #20]
 800c5d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5dc:	9304      	str	r3, [sp, #16]
 800c5de:	f107 0320 	add.w	r3, r7, #32
 800c5e2:	9303      	str	r3, [sp, #12]
 800c5e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5e8:	9302      	str	r3, [sp, #8]
 800c5ea:	f107 030c 	add.w	r3, r7, #12
 800c5ee:	9301      	str	r3, [sp, #4]
 800c5f0:	f107 0310 	add.w	r3, r7, #16
 800c5f4:	9300      	str	r3, [sp, #0]
 800c5f6:	4613      	mov	r3, r2
 800c5f8:	4a0d      	ldr	r2, [pc, #52]	; (800c630 <Lora_idSTR+0x35c>)
 800c5fa:	f002 f863 	bl	800e6c4 <FT_String_ND>
 800c5fe:	4603      	mov	r3, r0
 800c600:	2b01      	cmp	r3, #1
 800c602:	d117      	bne.n	800c634 <Lora_idSTR+0x360>
 800c604:	2309      	movs	r3, #9
 800c606:	e0c9      	b.n	800c79c <Lora_idSTR+0x4c8>
 800c608:	08010b90 	.word	0x08010b90
 800c60c:	08010b98 	.word	0x08010b98
 800c610:	08010ba0 	.word	0x08010ba0
 800c614:	08010ba8 	.word	0x08010ba8
 800c618:	08010bb0 	.word	0x08010bb0
 800c61c:	08010bb8 	.word	0x08010bb8
 800c620:	08010bc0 	.word	0x08010bc0
 800c624:	08010bc8 	.word	0x08010bc8
 800c628:	08010bd4 	.word	0x08010bd4
 800c62c:	08010bdc 	.word	0x08010bdc
 800c630:	08010be8 	.word	0x08010be8
		i=strlen("+CPIN=");
 800c634:	2306      	movs	r3, #6
 800c636:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CPIN=",&i,data,&ndata,&g,&h,512, 0)==1) return _CPIN ;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c644:	f107 021c 	add.w	r2, r7, #28
 800c648:	2300      	movs	r3, #0
 800c64a:	9305      	str	r3, [sp, #20]
 800c64c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c650:	9304      	str	r3, [sp, #16]
 800c652:	f107 0320 	add.w	r3, r7, #32
 800c656:	9303      	str	r3, [sp, #12]
 800c658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c65c:	9302      	str	r3, [sp, #8]
 800c65e:	f107 030c 	add.w	r3, r7, #12
 800c662:	9301      	str	r3, [sp, #4]
 800c664:	f107 0310 	add.w	r3, r7, #16
 800c668:	9300      	str	r3, [sp, #0]
 800c66a:	4613      	mov	r3, r2
 800c66c:	4a4d      	ldr	r2, [pc, #308]	; (800c7a4 <Lora_idSTR+0x4d0>)
 800c66e:	f002 f829 	bl	800e6c4 <FT_String_ND>
 800c672:	4603      	mov	r3, r0
 800c674:	2b01      	cmp	r3, #1
 800c676:	d101      	bne.n	800c67c <Lora_idSTR+0x3a8>
 800c678:	230a      	movs	r3, #10
 800c67a:	e08f      	b.n	800c79c <Lora_idSTR+0x4c8>
		i=strlen("+CRFOP=");
 800c67c:	2307      	movs	r3, #7
 800c67e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+CRFOP=",&i,data,&ndata,&g,&h,512, 0)==1) return _CRFOP ;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c68c:	f107 021c 	add.w	r2, r7, #28
 800c690:	2300      	movs	r3, #0
 800c692:	9305      	str	r3, [sp, #20]
 800c694:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c698:	9304      	str	r3, [sp, #16]
 800c69a:	f107 0320 	add.w	r3, r7, #32
 800c69e:	9303      	str	r3, [sp, #12]
 800c6a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6a4:	9302      	str	r3, [sp, #8]
 800c6a6:	f107 030c 	add.w	r3, r7, #12
 800c6aa:	9301      	str	r3, [sp, #4]
 800c6ac:	f107 0310 	add.w	r3, r7, #16
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	4613      	mov	r3, r2
 800c6b4:	4a3c      	ldr	r2, [pc, #240]	; (800c7a8 <Lora_idSTR+0x4d4>)
 800c6b6:	f002 f805 	bl	800e6c4 <FT_String_ND>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d101      	bne.n	800c6c4 <Lora_idSTR+0x3f0>
 800c6c0:	230b      	movs	r3, #11
 800c6c2:	e06b      	b.n	800c79c <Lora_idSTR+0x4c8>
		i=strlen("+SEND=");
 800c6c4:	2306      	movs	r3, #6
 800c6c6:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+SEND=",&i,data,&ndata,&g,&h,512, 0)==1) return _SEND ;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c6d4:	f107 021c 	add.w	r2, r7, #28
 800c6d8:	2300      	movs	r3, #0
 800c6da:	9305      	str	r3, [sp, #20]
 800c6dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6e0:	9304      	str	r3, [sp, #16]
 800c6e2:	f107 0320 	add.w	r3, r7, #32
 800c6e6:	9303      	str	r3, [sp, #12]
 800c6e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6ec:	9302      	str	r3, [sp, #8]
 800c6ee:	f107 030c 	add.w	r3, r7, #12
 800c6f2:	9301      	str	r3, [sp, #4]
 800c6f4:	f107 0310 	add.w	r3, r7, #16
 800c6f8:	9300      	str	r3, [sp, #0]
 800c6fa:	4613      	mov	r3, r2
 800c6fc:	4a2b      	ldr	r2, [pc, #172]	; (800c7ac <Lora_idSTR+0x4d8>)
 800c6fe:	f001 ffe1 	bl	800e6c4 <FT_String_ND>
 800c702:	4603      	mov	r3, r0
 800c704:	2b01      	cmp	r3, #1
 800c706:	d101      	bne.n	800c70c <Lora_idSTR+0x438>
 800c708:	230c      	movs	r3, #12
 800c70a:	e047      	b.n	800c79c <Lora_idSTR+0x4c8>
		i=strlen("+UID=");
 800c70c:	2305      	movs	r3, #5
 800c70e:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+UID=",&i,data,&ndata,&g,&h,512, 0)==1) return _UID ;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c71c:	f107 021c 	add.w	r2, r7, #28
 800c720:	2300      	movs	r3, #0
 800c722:	9305      	str	r3, [sp, #20]
 800c724:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c728:	9304      	str	r3, [sp, #16]
 800c72a:	f107 0320 	add.w	r3, r7, #32
 800c72e:	9303      	str	r3, [sp, #12]
 800c730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c734:	9302      	str	r3, [sp, #8]
 800c736:	f107 030c 	add.w	r3, r7, #12
 800c73a:	9301      	str	r3, [sp, #4]
 800c73c:	f107 0310 	add.w	r3, r7, #16
 800c740:	9300      	str	r3, [sp, #0]
 800c742:	4613      	mov	r3, r2
 800c744:	4a1a      	ldr	r2, [pc, #104]	; (800c7b0 <Lora_idSTR+0x4dc>)
 800c746:	f001 ffbd 	bl	800e6c4 <FT_String_ND>
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d101      	bne.n	800c754 <Lora_idSTR+0x480>
 800c750:	230e      	movs	r3, #14
 800c752:	e023      	b.n	800c79c <Lora_idSTR+0x4c8>
		i=strlen("+VER=");
 800c754:	2305      	movs	r3, #5
 800c756:	61fb      	str	r3, [r7, #28]
		if(FT_String_ND(a->rxbuff,&a->rxitems,"+VER=",&i,data,&ndata,&g,&h,512, 0)==1) return _VER ;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f103 0056 	add.w	r0, r3, #86	; 0x56
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f203 71dc 	addw	r1, r3, #2012	; 0x7dc
 800c764:	f107 021c 	add.w	r2, r7, #28
 800c768:	2300      	movs	r3, #0
 800c76a:	9305      	str	r3, [sp, #20]
 800c76c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c770:	9304      	str	r3, [sp, #16]
 800c772:	f107 0320 	add.w	r3, r7, #32
 800c776:	9303      	str	r3, [sp, #12]
 800c778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c77c:	9302      	str	r3, [sp, #8]
 800c77e:	f107 030c 	add.w	r3, r7, #12
 800c782:	9301      	str	r3, [sp, #4]
 800c784:	f107 0310 	add.w	r3, r7, #16
 800c788:	9300      	str	r3, [sp, #0]
 800c78a:	4613      	mov	r3, r2
 800c78c:	4a09      	ldr	r2, [pc, #36]	; (800c7b4 <Lora_idSTR+0x4e0>)
 800c78e:	f001 ff99 	bl	800e6c4 <FT_String_ND>
 800c792:	4603      	mov	r3, r0
 800c794:	2b01      	cmp	r3, #1
 800c796:	d101      	bne.n	800c79c <Lora_idSTR+0x4c8>
 800c798:	230d      	movs	r3, #13
 800c79a:	e7ff      	b.n	800c79c <Lora_idSTR+0x4c8>
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3728      	adds	r7, #40	; 0x28
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	08010bf4 	.word	0x08010bf4
 800c7a8:	08010bfc 	.word	0x08010bfc
 800c7ac:	08010c04 	.word	0x08010c04
 800c7b0:	08010c0c 	.word	0x08010c0c
 800c7b4:	08010c14 	.word	0x08010c14

0800c7b8 <Lora_rx_del>:
void Lora_rx_del(struct LoRa *a)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
	a->rxbuff[0]='\0';
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	a->rx_items[0]='\0';
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	731a      	strb	r2, [r3, #12]
	//a->dataRCV[0]='\0';
	a->rxRSSI=0;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
	a->rxSNR=0;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
}
 800c7de:	bf00      	nop
 800c7e0:	370c      	adds	r7, #12
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr
	...

0800c7ec <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	711a      	strb	r2, [r3, #4]
	m->_timeout=500;						//Timeout para la recepción de respuesta.
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c806:	80da      	strh	r2, [r3, #6]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2201      	movs	r2, #1
 800c80c:	729a      	strb	r2, [r3, #10]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2220      	movs	r2, #32
 800c812:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
	m->_Coils=0xF0F0AF5A;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	4a1c      	ldr	r2, [pc, #112]	; (800c88c <ModBUS_Config+0xa0>)
 800c81a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2201      	movs	r2, #1
 800c822:	72da      	strb	r2, [r3, #11]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2220      	movs	r2, #32
 800c828:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
	m->_Inputs=0xA5FA0F0F;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4a18      	ldr	r2, [pc, #96]	; (800c890 <ModBUS_Config+0xa4>)
 800c830:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2201      	movs	r2, #1
 800c838:	731a      	strb	r2, [r3, #12]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2210      	movs	r2, #16
 800c83e:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2201      	movs	r2, #1
 800c846:	735a      	strb	r2, [r3, #13]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2210      	movs	r2, #16
 800c84c:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2201      	movs	r2, #1
 800c854:	739a      	strb	r2, [r3, #14]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2220      	movs	r2, #32
 800c85a:	f883 2638 	strb.w	r2, [r3, #1592]	; 0x638

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2201      	movs	r2, #1
 800c862:	73da      	strb	r2, [r3, #15]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2201      	movs	r2, #1
 800c868:	741a      	strb	r2, [r3, #16]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2220      	movs	r2, #32
 800c86e:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2201      	movs	r2, #1
 800c876:	745a      	strb	r2, [r3, #17]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2220      	movs	r2, #32
 800c87c:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
}
 800c880:	bf00      	nop
 800c882:	370c      	adds	r7, #12
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr
 800c88c:	f0f0af5a 	.word	0xf0f0af5a
 800c890:	a5fa0f0f 	.word	0xa5fa0f0f

0800c894 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800c894:	b480      	push	{r7}
 800c896:	b083      	sub	sp, #12
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	3305      	adds	r3, #5
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	3306      	adds	r3, #6
 800c8a6:	683a      	ldr	r2, [r7, #0]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d10b      	bne.n	800c8c4 <ModBUS_Check+0x30>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	3302      	adds	r3, #2
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	3303      	adds	r3, #3
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	4413      	add	r3, r2
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d101      	bne.n	800c8c4 <ModBUS_Check+0x30>
	{
		return(1);
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	e000      	b.n	800c8c6 <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800c8c4:	2300      	movs	r3, #0
	}
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	370c      	adds	r7, #12
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr

0800c8d2 <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800c8d2:	b480      	push	{r7}
 800c8d4:	b083      	sub	sp, #12
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f893 2218 	ldrb.w	r2, [r3, #536]	; 0x218
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	7c9b      	ldrb	r3, [r3, #18]
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d11d      	bne.n	800c924 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f893 2219 	ldrb.w	r2, [r3, #537]	; 0x219
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	7cdb      	ldrb	r3, [r3, #19]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d116      	bne.n	800c924 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800c900:	429a      	cmp	r2, r3
 800c902:	d10f      	bne.n	800c924 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f893 221b 	ldrb.w	r2, [r3, #539]	; 0x21b
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	7d5b      	ldrb	r3, [r3, #21]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800c90e:	429a      	cmp	r2, r3
 800c910:	d108      	bne.n	800c924 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f893 221f 	ldrb.w	r2, [r3, #543]	; 0x21f
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	7e5b      	ldrb	r3, [r3, #25]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d101      	bne.n	800c924 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800c920:	2301      	movs	r3, #1
 800c922:	e000      	b.n	800c926 <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800c924:	2300      	movs	r3, #0
	}
}
 800c926:	4618      	mov	r0, r3
 800c928:	370c      	adds	r7, #12
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr

0800c932 <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t address, uint16_t data)
{
 800c932:	b480      	push	{r7}
 800c934:	b085      	sub	sp, #20
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
 800c93a:	460b      	mov	r3, r1
 800c93c:	70fb      	strb	r3, [r7, #3]
 800c93e:	4613      	mov	r3, r2
 800c940:	803b      	strh	r3, [r7, #0]

	uint8_t c=0;
 800c942:	2300      	movs	r3, #0
 800c944:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800c94c:	78fa      	ldrb	r2, [r7, #3]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d901      	bls.n	800c956 <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800c952:	2301      	movs	r3, #1
 800c954:	e016      	b.n	800c984 <ModBUS_F03_Assign+0x52>
	}
	else
	{
		address=address*2;
 800c956:	78fb      	ldrb	r3, [r7, #3]
 800c958:	005b      	lsls	r3, r3, #1
 800c95a:	70fb      	strb	r3, [r7, #3]
		m2->_Holding_Registers[(address)+1]=data;
 800c95c:	78fb      	ldrb	r3, [r7, #3]
 800c95e:	3301      	adds	r3, #1
 800c960:	883a      	ldrh	r2, [r7, #0]
 800c962:	b2d1      	uxtb	r1, r2
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	4413      	add	r3, r2
 800c968:	460a      	mov	r2, r1
 800c96a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
		c=data>>8;
 800c96e:	883b      	ldrh	r3, [r7, #0]
 800c970:	0a1b      	lsrs	r3, r3, #8
 800c972:	b29b      	uxth	r3, r3
 800c974:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(address)]=c;
 800c976:	78fb      	ldrb	r3, [r7, #3]
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	4413      	add	r3, r2
 800c97c:	7bfa      	ldrb	r2, [r7, #15]
 800c97e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

		return(0);
 800c982:	2300      	movs	r3, #0
	}
}
 800c984:	4618      	mov	r0, r3
 800c986:	3714      	adds	r7, #20
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t address)
{
 800c990:	b480      	push	{r7}
 800c992:	b085      	sub	sp, #20
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	460b      	mov	r3, r1
 800c99a:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800c99c:	2300      	movs	r3, #0
 800c99e:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800c9aa:	78fa      	ldrb	r2, [r7, #3]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d901      	bls.n	800c9b4 <ModBUS_F03_Read+0x24>
	{
		return(1);
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	e016      	b.n	800c9e2 <ModBUS_F03_Read+0x52>
	}
	else
	{
		address=address*2;
 800c9b4:	78fb      	ldrb	r3, [r7, #3]
 800c9b6:	005b      	lsls	r3, r3, #1
 800c9b8:	70fb      	strb	r3, [r7, #3]
		n=m2->_Holding_Registers[(address)];
 800c9ba:	78fb      	ldrb	r3, [r7, #3]
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	4413      	add	r3, r2
 800c9c0:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800c9c4:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800c9c6:	89fb      	ldrh	r3, [r7, #14]
 800c9c8:	021b      	lsls	r3, r3, #8
 800c9ca:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(address)+1];
 800c9cc:	78fb      	ldrb	r3, [r7, #3]
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	4413      	add	r3, r2
 800c9d4:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800c9d8:	b29a      	uxth	r2, r3
 800c9da:	89fb      	ldrh	r3, [r7, #14]
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	81fb      	strh	r3, [r7, #14]
		return(n);
 800c9e0:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3714      	adds	r7, #20
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr

0800c9ee <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800c9ee:	b480      	push	{r7}
 800c9f0:	b083      	sub	sp, #12
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
 800c9f6:	460b      	mov	r3, r1
 800c9f8:	807b      	strh	r3, [r7, #2]
 800c9fa:	4613      	mov	r3, r2
 800c9fc:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800c9fe:	887b      	ldrh	r3, [r7, #2]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	bf14      	ite	ne
 800ca04:	2301      	movne	r3, #1
 800ca06:	2300      	moveq	r3, #0
 800ca08:	b2db      	uxtb	r3, r3
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
	addr&=0xF0;
 800ca12:	887b      	ldrh	r3, [r7, #2]
 800ca14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca18:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800ca1a:	887b      	ldrh	r3, [r7, #2]
 800ca1c:	0a1b      	lsrs	r3, r3, #8
 800ca1e:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800ca20:	887b      	ldrh	r3, [r7, #2]
 800ca22:	f003 030f 	and.w	r3, r3, #15
 800ca26:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	m2->_MBUS_2SND[1]=0x00;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2200      	movs	r2, #0
 800ca34:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
	m2->_MBUS_2SND[2]=0x00;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
	m2->_MBUS_2SND[3]=0x00;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
	m2->_MBUS_2SND[4]=0x00;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	m2->_MBUS_2SND[5]=0x06;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2206      	movs	r2, #6
 800ca54:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	m2->_MBUS_2SND[6]=m2->_address;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	781a      	ldrb	r2, [r3, #0]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
	m2->_MBUS_2SND[7]=0x03;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2203      	movs	r2, #3
 800ca66:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
	m2->_MBUS_2SND[8]=addr;
 800ca6a:	887b      	ldrh	r3, [r7, #2]
 800ca6c:	b2da      	uxtb	r2, r3
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220

	m2->_MBUS_2SND[10]=0x00;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2200      	movs	r2, #0
 800ca78:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
	m2->_MBUS_2SND[11]=qty;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	787a      	ldrb	r2, [r7, #1]
 800ca80:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	220c      	movs	r2, #12
 800ca88:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

}
 800ca8c:	bf00      	nop
 800ca8e:	4618      	mov	r0, r3
 800ca90:	370c      	adds	r7, #12
 800ca92:	46bd      	mov	sp, r7
 800ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca98:	4770      	bx	lr
	...

0800ca9c <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b09c      	sub	sp, #112	; 0x70
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	791b      	ldrb	r3, [r3, #4]
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	f041 813f 	bne.w	800dd2c <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f103 0212 	add.w	r2, r3, #18
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800caba:	4619      	mov	r1, r3
 800cabc:	4610      	mov	r0, r2
 800cabe:	f7ff fee9 	bl	800c894 <ModBUS_Check>
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f001 812f 	beq.w	800dd28 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	7e5b      	ldrb	r3, [r3, #25]
 800cace:	3b01      	subs	r3, #1
 800cad0:	2b0f      	cmp	r3, #15
 800cad2:	f201 80f3 	bhi.w	800dcbc <ModBUS+0x1220>
 800cad6:	a201      	add	r2, pc, #4	; (adr r2, 800cadc <ModBUS+0x40>)
 800cad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cadc:	0800cb1d 	.word	0x0800cb1d
 800cae0:	0800cd5d 	.word	0x0800cd5d
 800cae4:	0800cf9d 	.word	0x0800cf9d
 800cae8:	0800d1d5 	.word	0x0800d1d5
 800caec:	0800d40d 	.word	0x0800d40d
 800caf0:	0800d623 	.word	0x0800d623
 800caf4:	0800dcbd 	.word	0x0800dcbd
 800caf8:	0800dcbd 	.word	0x0800dcbd
 800cafc:	0800dcbd 	.word	0x0800dcbd
 800cb00:	0800dcbd 	.word	0x0800dcbd
 800cb04:	0800dcbd 	.word	0x0800dcbd
 800cb08:	0800dcbd 	.word	0x0800dcbd
 800cb0c:	0800dcbd 	.word	0x0800dcbd
 800cb10:	0800dcbd 	.word	0x0800dcbd
 800cb14:	0800d7df 	.word	0x0800d7df
 800cb18:	0800da6f 	.word	0x0800da6f

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	7d9a      	ldrb	r2, [r3, #22]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	7d5a      	ldrb	r2, [r3, #21]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	7d1a      	ldrb	r2, [r3, #20]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	7cda      	ldrb	r2, [r3, #19]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	7c9a      	ldrb	r2, [r3, #18]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	7a9b      	ldrb	r3, [r3, #10]
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	f040 80e6 	bne.w	800cd28 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	7e9b      	ldrb	r3, [r3, #26]
 800cb60:	b29a      	uxth	r2, r3
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800cb6e:	021b      	lsls	r3, r3, #8
 800cb70:	b29a      	uxth	r2, r3
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800cb7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cb82:	b29a      	uxth	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8b3 2622 	ldrh.w	r2, [r3, #1570]	; 0x622
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	7edb      	ldrb	r3, [r3, #27]
 800cb94:	b29b      	uxth	r3, r3
 800cb96:	4313      	orrs	r3, r2
 800cb98:	b29a      	uxth	r2, r3
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	7f1b      	ldrb	r3, [r3, #28]
 800cba4:	b29a      	uxth	r2, r3
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800cbb2:	021b      	lsls	r3, r3, #8
 800cbb4:	b29a      	uxth	r2, r3
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800cbc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cbc6:	b29a      	uxth	r2, r3
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	7f5b      	ldrb	r3, [r3, #29]
 800cbd8:	b29b      	uxth	r3, r3
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	b29a      	uxth	r2, r3
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d87e      	bhi.n	800ccf4 <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800cc04:	4413      	add	r3, r2
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	f892 2620 	ldrb.w	r2, [r2, #1568]	; 0x620
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	dc57      	bgt.n	800ccc0 <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800cc10:	2300      	movs	r3, #0
 800cc12:	613b      	str	r3, [r7, #16]
 800cc14:	2300      	movs	r3, #0
 800cc16:	60fb      	str	r3, [r7, #12]
 800cc18:	2300      	movs	r3, #0
 800cc1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800cc20:	2300      	movs	r3, #0
 800cc22:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	f8b2 2622 	ldrh.w	r2, [r2, #1570]	; 0x622
 800cc30:	40d3      	lsrs	r3, r2
 800cc32:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800cc3a:	08db      	lsrs	r3, r3, #3
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800cc46:	f003 0307 	and.w	r3, r3, #7
 800cc4a:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d102      	bne.n	800cc58 <ModBUS+0x1bc>
									{
										bytes=div;
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cc56:	e002      	b.n	800cc5e <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800cc5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc60:	b2da      	uxtb	r2, r3
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800cc68:	e00e      	b.n	800cc88 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800cc6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc6c:	3308      	adds	r3, #8
 800cc6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cc70:	b2d1      	uxtb	r1, r2
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	4413      	add	r3, r2
 800cc76:	460a      	mov	r2, r1
 800cc78:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800cc7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc7e:	0a1b      	lsrs	r3, r3, #8
 800cc80:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800cc82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc84:	3b01      	subs	r3, #1
 800cc86:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800cc88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	dced      	bgt.n	800cc6a <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2201      	movs	r2, #1
 800cc92:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2201      	movs	r2, #1
 800cc9a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800cca4:	3303      	adds	r3, #3
 800cca6:	b2da      	uxtb	r2, r3
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ccb4:	1d9a      	adds	r2, r3, #6
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800ccbc:	f001 b8d4 	b.w	800de68 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2202      	movs	r2, #2
 800ccc4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x81;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2281      	movs	r2, #129	; 0x81
 800cccc:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2203      	movs	r2, #3
 800ccdc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cce6:	1d9a      	adds	r2, r3, #6
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800ccee:	2302      	movs	r3, #2
 800ccf0:	f001 b8ba 	b.w	800de68 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2203      	movs	r2, #3
 800ccf8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x81;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2281      	movs	r2, #129	; 0x81
 800cd00:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2201      	movs	r2, #1
 800cd08:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2203      	movs	r2, #3
 800cd10:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cd1a:	1d9a      	adds	r2, r3, #6
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800cd22:	2303      	movs	r3, #3
 800cd24:	f001 b8a0 	b.w	800de68 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x81;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2281      	movs	r2, #129	; 0x81
 800cd34:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2203      	movs	r2, #3
 800cd44:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cd4e:	1d9a      	adds	r2, r3, #6
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800cd56:	2301      	movs	r3, #1
 800cd58:	f001 b886 	b.w	800de68 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	7d9a      	ldrb	r2, [r3, #22]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	7d5a      	ldrb	r2, [r3, #21]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	7d1a      	ldrb	r2, [r3, #20]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	7cda      	ldrb	r2, [r3, #19]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	7c9a      	ldrb	r2, [r3, #18]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	7adb      	ldrb	r3, [r3, #11]
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	f040 80e6 	bne.w	800cf68 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	7e9b      	ldrb	r3, [r3, #26]
 800cda0:	b29a      	uxth	r2, r3
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800cdae:	021b      	lsls	r3, r3, #8
 800cdb0:	b29a      	uxth	r2, r3
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800cdbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cdc2:	b29a      	uxth	r2, r3
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	7edb      	ldrb	r3, [r3, #27]
 800cdd4:	b29b      	uxth	r3, r3
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	b29a      	uxth	r2, r3
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	7f1b      	ldrb	r3, [r3, #28]
 800cde4:	b29a      	uxth	r2, r3
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800cdf2:	021b      	lsls	r3, r3, #8
 800cdf4:	b29a      	uxth	r2, r3
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800ce02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	7f5b      	ldrb	r3, [r3, #29]
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	b29a      	uxth	r2, r3
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
 800ce30:	b29b      	uxth	r3, r3
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d87e      	bhi.n	800cf34 <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800ce44:	4413      	add	r3, r2
 800ce46:	687a      	ldr	r2, [r7, #4]
 800ce48:	f892 2626 	ldrb.w	r2, [r2, #1574]	; 0x626
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	dc57      	bgt.n	800cf00 <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800ce50:	2300      	movs	r3, #0
 800ce52:	623b      	str	r3, [r7, #32]
 800ce54:	2300      	movs	r3, #0
 800ce56:	61fb      	str	r3, [r7, #28]
 800ce58:	2300      	movs	r3, #0
 800ce5a:	667b      	str	r3, [r7, #100]	; 0x64
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800ce60:	2300      	movs	r3, #0
 800ce62:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800ce6a:	687a      	ldr	r2, [r7, #4]
 800ce6c:	f8b2 2628 	ldrh.w	r2, [r2, #1576]	; 0x628
 800ce70:	40d3      	lsrs	r3, r2
 800ce72:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800ce7a:	08db      	lsrs	r3, r3, #3
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800ce86:	f003 0307 	and.w	r3, r3, #7
 800ce8a:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800ce8c:	69fb      	ldr	r3, [r7, #28]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d102      	bne.n	800ce98 <ModBUS+0x3fc>
									{
										bytes=div;
 800ce92:	6a3b      	ldr	r3, [r7, #32]
 800ce94:	667b      	str	r3, [r7, #100]	; 0x64
 800ce96:	e002      	b.n	800ce9e <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800ce98:	6a3b      	ldr	r3, [r7, #32]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800ce9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cea0:	b2da      	uxtb	r2, r3
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800cea8:	e00e      	b.n	800cec8 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800ceaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ceac:	3308      	adds	r3, #8
 800ceae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ceb0:	b2d1      	uxtb	r1, r2
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	4413      	add	r3, r2
 800ceb6:	460a      	mov	r2, r1
 800ceb8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800cebc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cebe:	0a1b      	lsrs	r3, r3, #8
 800cec0:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800cec2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cec4:	3b01      	subs	r3, #1
 800cec6:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800cec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	dced      	bgt.n	800ceaa <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2202      	movs	r2, #2
 800ced2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2201      	movs	r2, #1
 800ceda:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800cee4:	3303      	adds	r3, #3
 800cee6:	b2da      	uxtb	r2, r3
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cef4:	1d9a      	adds	r2, r3, #6
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cefc:	f000 bfb4 	b.w	800de68 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2202      	movs	r2, #2
 800cf04:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x82;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2282      	movs	r2, #130	; 0x82
 800cf0c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2201      	movs	r2, #1
 800cf14:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2203      	movs	r2, #3
 800cf1c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf26:	1d9a      	adds	r2, r3, #6
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800cf2e:	2302      	movs	r3, #2
 800cf30:	f000 bf9a 	b.w	800de68 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2203      	movs	r2, #3
 800cf38:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x82;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2282      	movs	r2, #130	; 0x82
 800cf40:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2201      	movs	r2, #1
 800cf48:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2203      	movs	r2, #3
 800cf50:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf5a:	1d9a      	adds	r2, r3, #6
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800cf62:	2303      	movs	r3, #3
 800cf64:	f000 bf80 	b.w	800de68 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x82;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2282      	movs	r2, #130	; 0x82
 800cf74:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2203      	movs	r2, #3
 800cf84:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf8e:	1d9a      	adds	r2, r3, #6
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800cf96:	2301      	movs	r3, #1
 800cf98:	f000 bf66 	b.w	800de68 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	7d9a      	ldrb	r2, [r3, #22]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	7d5a      	ldrb	r2, [r3, #21]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	7d1a      	ldrb	r2, [r3, #20]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	7cda      	ldrb	r2, [r3, #19]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	7c9a      	ldrb	r2, [r3, #18]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	7b1b      	ldrb	r3, [r3, #12]
 800cfd6:	2b01      	cmp	r3, #1
 800cfd8:	f040 80e2 	bne.w	800d1a0 <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	7e9b      	ldrb	r3, [r3, #26]
 800cfe0:	b29a      	uxth	r2, r3
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800cfee:	021b      	lsls	r3, r3, #8
 800cff0:	b29a      	uxth	r2, r3
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800cffe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d002:	b29a      	uxth	r2, r3
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f8b3 262e 	ldrh.w	r2, [r3, #1582]	; 0x62e
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	7edb      	ldrb	r3, [r3, #27]
 800d014:	b29b      	uxth	r3, r3
 800d016:	4313      	orrs	r3, r2
 800d018:	b29a      	uxth	r2, r3
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	7f1b      	ldrb	r3, [r3, #28]
 800d024:	b29a      	uxth	r2, r3
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d032:	021b      	lsls	r3, r3, #8
 800d034:	b29a      	uxth	r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d042:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d046:	b29a      	uxth	r2, r3
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	7f5b      	ldrb	r3, [r3, #29]
 800d058:	b29b      	uxth	r3, r3
 800d05a:	4313      	orrs	r3, r2
 800d05c:	b29a      	uxth	r2, r3
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800d070:	b29b      	uxth	r3, r3
 800d072:	429a      	cmp	r2, r3
 800d074:	d87a      	bhi.n	800d16c <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d07c:	461a      	mov	r2, r3
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d084:	4413      	add	r3, r2
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	f892 262c 	ldrb.w	r2, [r2, #1580]	; 0x62c
 800d08c:	4293      	cmp	r3, r2
 800d08e:	dc53      	bgt.n	800d138 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800d090:	e029      	b.n	800d0e6 <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d098:	461a      	mov	r2, r3
 800d09a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d09c:	4413      	add	r3, r2
 800d09e:	005a      	lsls	r2, r3, #1
 800d0a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0a2:	005b      	lsls	r3, r3, #1
 800d0a4:	3309      	adds	r3, #9
 800d0a6:	6879      	ldr	r1, [r7, #4]
 800d0a8:	440a      	add	r2, r1
 800d0aa:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	460a      	mov	r2, r1
 800d0b4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800d0be:	461a      	mov	r2, r3
 800d0c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0c2:	4413      	add	r3, r2
 800d0c4:	005b      	lsls	r3, r3, #1
 800d0c6:	1c5a      	adds	r2, r3, #1
 800d0c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0ca:	3305      	adds	r3, #5
 800d0cc:	005b      	lsls	r3, r3, #1
 800d0ce:	6879      	ldr	r1, [r7, #4]
 800d0d0:	440a      	add	r2, r1
 800d0d2:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	4413      	add	r3, r2
 800d0da:	460a      	mov	r2, r1
 800d0dc:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800d0e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	dbce      	blt.n	800d092 <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800d0fa:	b2db      	uxtb	r3, r3
 800d0fc:	005b      	lsls	r3, r3, #1
 800d0fe:	b2da      	uxtb	r2, r3
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x03;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2203      	movs	r2, #3
 800d10a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2201      	movs	r2, #1
 800d112:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d11c:	3303      	adds	r3, #3
 800d11e:	b2da      	uxtb	r2, r3
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d12c:	1d9a      	adds	r2, r3, #6
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d134:	f000 be98 	b.w	800de68 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2202      	movs	r2, #2
 800d13c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x83;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2283      	movs	r2, #131	; 0x83
 800d144:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2201      	movs	r2, #1
 800d14c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2203      	movs	r2, #3
 800d154:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d15e:	1d9a      	adds	r2, r3, #6
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800d166:	2302      	movs	r3, #2
 800d168:	f000 be7e 	b.w	800de68 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2203      	movs	r2, #3
 800d170:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x83;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2283      	movs	r2, #131	; 0x83
 800d178:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2201      	movs	r2, #1
 800d180:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2203      	movs	r2, #3
 800d188:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d192:	1d9a      	adds	r2, r3, #6
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800d19a:	2303      	movs	r3, #3
 800d19c:	f000 be64 	b.w	800de68 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x83;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2283      	movs	r2, #131	; 0x83
 800d1ac:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2203      	movs	r2, #3
 800d1bc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d1c6:	1d9a      	adds	r2, r3, #6
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	f000 be4a 	b.w	800de68 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	7d9a      	ldrb	r2, [r3, #22]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	7d5a      	ldrb	r2, [r3, #21]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	7d1a      	ldrb	r2, [r3, #20]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	7cda      	ldrb	r2, [r3, #19]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	7c9a      	ldrb	r2, [r3, #18]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800d206:	2300      	movs	r3, #0
 800d208:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	7b5b      	ldrb	r3, [r3, #13]
 800d20e:	2b01      	cmp	r3, #1
 800d210:	f040 80e2 	bne.w	800d3d8 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	7e9b      	ldrb	r3, [r3, #26]
 800d218:	b29a      	uxth	r2, r3
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d226:	021b      	lsls	r3, r3, #8
 800d228:	b29a      	uxth	r2, r3
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d236:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f8b3 2634 	ldrh.w	r2, [r3, #1588]	; 0x634
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	7edb      	ldrb	r3, [r3, #27]
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	4313      	orrs	r3, r2
 800d250:	b29a      	uxth	r2, r3
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	7f1b      	ldrb	r3, [r3, #28]
 800d25c:	b29a      	uxth	r2, r3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d26a:	021b      	lsls	r3, r3, #8
 800d26c:	b29a      	uxth	r2, r3
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d27a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d27e:	b29a      	uxth	r2, r3
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	7f5b      	ldrb	r3, [r3, #29]
 800d290:	b29b      	uxth	r3, r3
 800d292:	4313      	orrs	r3, r2
 800d294:	b29a      	uxth	r2, r3
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f893 3632 	ldrb.w	r3, [r3, #1586]	; 0x632
 800d2a8:	b29b      	uxth	r3, r3
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d87a      	bhi.n	800d3a4 <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d2bc:	4413      	add	r3, r2
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	f892 2632 	ldrb.w	r2, [r2, #1586]	; 0x632
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	dc53      	bgt.n	800d370 <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800d2c8:	e029      	b.n	800d31e <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2d4:	4413      	add	r3, r2
 800d2d6:	005a      	lsls	r2, r3, #1
 800d2d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2da:	005b      	lsls	r3, r3, #1
 800d2dc:	3309      	adds	r3, #9
 800d2de:	6879      	ldr	r1, [r7, #4]
 800d2e0:	440a      	add	r2, r1
 800d2e2:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800d2e6:	687a      	ldr	r2, [r7, #4]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	460a      	mov	r2, r1
 800d2ec:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2fa:	4413      	add	r3, r2
 800d2fc:	005b      	lsls	r3, r3, #1
 800d2fe:	1c5a      	adds	r2, r3, #1
 800d300:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d302:	3305      	adds	r3, #5
 800d304:	005b      	lsls	r3, r3, #1
 800d306:	6879      	ldr	r1, [r7, #4]
 800d308:	440a      	add	r2, r1
 800d30a:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	4413      	add	r3, r2
 800d312:	460a      	mov	r2, r1
 800d314:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800d318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d31a:	3301      	adds	r3, #1
 800d31c:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d324:	461a      	mov	r2, r3
 800d326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d328:	4293      	cmp	r3, r2
 800d32a:	dbce      	blt.n	800d2ca <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800d332:	b2db      	uxtb	r3, r3
 800d334:	005b      	lsls	r3, r3, #1
 800d336:	b2da      	uxtb	r2, r3
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x04;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2204      	movs	r2, #4
 800d342:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2201      	movs	r2, #1
 800d34a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d354:	3303      	adds	r3, #3
 800d356:	b2da      	uxtb	r2, r3
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d364:	1d9a      	adds	r2, r3, #6
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d36c:	f000 bd7c 	b.w	800de68 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2202      	movs	r2, #2
 800d374:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x84;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2284      	movs	r2, #132	; 0x84
 800d37c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2201      	movs	r2, #1
 800d384:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2203      	movs	r2, #3
 800d38c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d396:	1d9a      	adds	r2, r3, #6
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800d39e:	2302      	movs	r3, #2
 800d3a0:	f000 bd62 	b.w	800de68 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2203      	movs	r2, #3
 800d3a8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x84;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2284      	movs	r2, #132	; 0x84
 800d3b0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2203      	movs	r2, #3
 800d3c0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d3ca:	1d9a      	adds	r2, r3, #6
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800d3d2:	2303      	movs	r3, #3
 800d3d4:	f000 bd48 	b.w	800de68 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2201      	movs	r2, #1
 800d3dc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x84;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2284      	movs	r2, #132	; 0x84
 800d3e4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2203      	movs	r2, #3
 800d3f4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d3fe:	1d9a      	adds	r2, r3, #6
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d406:	2301      	movs	r3, #1
 800d408:	f000 bd2e 	b.w	800de68 <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	7d9a      	ldrb	r2, [r3, #22]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	7d5a      	ldrb	r2, [r3, #21]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	7d1a      	ldrb	r2, [r3, #20]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	7cda      	ldrb	r2, [r3, #19]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	7c9a      	ldrb	r2, [r3, #18]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

								int qty_reg=0;
 800d43e:	2300      	movs	r3, #0
 800d440:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	7b9b      	ldrb	r3, [r3, #14]
 800d446:	2b01      	cmp	r3, #1
 800d448:	f040 80d1 	bne.w	800d5ee <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	7e9b      	ldrb	r3, [r3, #26]
 800d450:	b29a      	uxth	r2, r3
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800d45e:	021b      	lsls	r3, r3, #8
 800d460:	b29a      	uxth	r2, r3
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800d46e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d472:	b29a      	uxth	r2, r3
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f8b3 263a 	ldrh.w	r2, [r3, #1594]	; 0x63a
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	7edb      	ldrb	r3, [r3, #27]
 800d484:	b29b      	uxth	r3, r3
 800d486:	4313      	orrs	r3, r2
 800d488:	b29a      	uxth	r2, r3
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	7f1b      	ldrb	r3, [r3, #28]
 800d494:	b29a      	uxth	r2, r3
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d4a2:	021b      	lsls	r3, r3, #8
 800d4a4:	b29a      	uxth	r2, r3
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d4b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d4b6:	b29a      	uxth	r2, r3
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f8b3 263c 	ldrh.w	r2, [r3, #1596]	; 0x63c
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	7f5b      	ldrb	r3, [r3, #29]
 800d4c8:	b29b      	uxth	r3, r3
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	b29a      	uxth	r2, r3
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f893 3638 	ldrb.w	r3, [r3, #1592]	; 0x638
 800d4da:	461a      	mov	r2, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	dd69      	ble.n	800d5ba <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d005      	beq.n	800d4fc <ModBUS+0xa60>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d4f6:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d4fa:	d144      	bne.n	800d586 <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800d502:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800d506:	d10d      	bne.n	800d524 <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800d50e:	687a      	ldr	r2, [r7, #4]
 800d510:	f8b2 263a 	ldrh.w	r2, [r2, #1594]	; 0x63a
 800d514:	4611      	mov	r1, r2
 800d516:	2201      	movs	r2, #1
 800d518:	408a      	lsls	r2, r1
 800d51a:	431a      	orrs	r2, r3
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800d522:	e003      	b.n	800d52c <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2200      	movs	r2, #0
 800d528:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	7f5a      	ldrb	r2, [r3, #29]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	7f1a      	ldrb	r2, [r3, #28]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	7eda      	ldrb	r2, [r3, #27]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	7e9a      	ldrb	r2, [r3, #26]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x05;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2205      	movs	r2, #5
 800d558:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2201      	movs	r2, #1
 800d560:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d56a:	3306      	adds	r3, #6
 800d56c:	b2da      	uxtb	r2, r3
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d57a:	1d9a      	adds	r2, r3, #6
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800d582:	f000 bc71 	b.w	800de68 <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2202      	movs	r2, #2
 800d58a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x85;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2285      	movs	r2, #133	; 0x85
 800d592:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2201      	movs	r2, #1
 800d59a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2203      	movs	r2, #3
 800d5a2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d5ac:	1d9a      	adds	r2, r3, #6
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
												return(2);//Error excepcion 02
 800d5b4:	2302      	movs	r3, #2
 800d5b6:	f000 bc57 	b.w	800de68 <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2203      	movs	r2, #3
 800d5be:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
											m3->_MBUS_2SND[7]=0x85;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2285      	movs	r2, #133	; 0x85
 800d5c6:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2203      	movs	r2, #3
 800d5d6:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d5e0:	1d9a      	adds	r2, r3, #6
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
											return(3);//Erroe excepcion 03
 800d5e8:	2303      	movs	r3, #3
 800d5ea:	f000 bc3d 	b.w	800de68 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x85;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2285      	movs	r2, #133	; 0x85
 800d5fa:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2201      	movs	r2, #1
 800d602:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2203      	movs	r2, #3
 800d60a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d614:	1d9a      	adds	r2, r3, #6
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(1);//Error excepcion 01
 800d61c:	2301      	movs	r3, #1
 800d61e:	f000 bc23 	b.w	800de68 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	7d9a      	ldrb	r2, [r3, #22]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	7d5a      	ldrb	r2, [r3, #21]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	7d1a      	ldrb	r2, [r3, #20]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	7cda      	ldrb	r2, [r3, #19]
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	7c9a      	ldrb	r2, [r3, #18]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800d654:	2300      	movs	r3, #0
 800d656:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d658:	2300      	movs	r3, #0
 800d65a:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	7bdb      	ldrb	r3, [r3, #15]
 800d660:	2b01      	cmp	r3, #1
 800d662:	f040 80a3 	bne.w	800d7ac <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	7e9b      	ldrb	r3, [r3, #26]
 800d66a:	b29a      	uxth	r2, r3
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800d678:	021b      	lsls	r3, r3, #8
 800d67a:	b29a      	uxth	r2, r3
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800d688:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d68c:	b29a      	uxth	r2, r3
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	7edb      	ldrb	r3, [r3, #27]
 800d69e:	b29b      	uxth	r3, r3
 800d6a0:	4313      	orrs	r3, r2
 800d6a2:	b29a      	uxth	r2, r3
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646

							start_address=m3->_06_WriteSingleRegister_Addr;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800d6b0:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	7f1b      	ldrb	r3, [r3, #28]
 800d6b6:	b29a      	uxth	r2, r3
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800d6c4:	021b      	lsls	r3, r3, #8
 800d6c6:	b29a      	uxth	r2, r3
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800d6d4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d6d8:	b29a      	uxth	r2, r3
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8b3 2648 	ldrh.w	r2, [r3, #1608]	; 0x648
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	7f5b      	ldrb	r3, [r3, #29]
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	b29a      	uxth	r2, r3
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 800d702:	b29b      	uxth	r3, r3
 800d704:	429a      	cmp	r2, r3
 800d706:	d838      	bhi.n	800d77a <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800d708:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d70a:	687a      	ldr	r2, [r7, #4]
 800d70c:	7f11      	ldrb	r1, [r2, #28]
 800d70e:	687a      	ldr	r2, [r7, #4]
 800d710:	4413      	add	r3, r2
 800d712:	460a      	mov	r2, r1
 800d714:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800d718:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d71a:	3301      	adds	r3, #1
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	7f51      	ldrb	r1, [r2, #29]
 800d720:	687a      	ldr	r2, [r7, #4]
 800d722:	4413      	add	r3, r2
 800d724:	460a      	mov	r2, r1
 800d726:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	7f5a      	ldrb	r2, [r3, #29]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	7f1a      	ldrb	r2, [r3, #28]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	7eda      	ldrb	r2, [r3, #27]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	7e9a      	ldrb	r2, [r3, #26]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x06;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2206      	movs	r2, #6
 800d756:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2201      	movs	r2, #1
 800d75e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2206      	movs	r2, #6
 800d766:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d770:	1d9a      	adds	r2, r3, #6
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d778:	e376      	b.n	800de68 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2202      	movs	r2, #2
 800d77e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x86;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2286      	movs	r2, #134	; 0x86
 800d786:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2201      	movs	r2, #1
 800d78e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2203      	movs	r2, #3
 800d796:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d7a0:	1d9a      	adds	r2, r3, #6
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800d7a8:	2302      	movs	r3, #2
 800d7aa:	e35d      	b.n	800de68 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x86;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2286      	movs	r2, #134	; 0x86
 800d7b8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2201      	movs	r2, #1
 800d7c0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2203      	movs	r2, #3
 800d7c8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d7d2:	1d9a      	adds	r2, r3, #6
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800d7da:	2301      	movs	r3, #1
 800d7dc:	e344      	b.n	800de68 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	7d9a      	ldrb	r2, [r3, #22]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	7d5a      	ldrb	r2, [r3, #21]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	7d1a      	ldrb	r2, [r3, #20]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	7cda      	ldrb	r2, [r3, #19]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	7c9a      	ldrb	r2, [r3, #18]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800d810:	2300      	movs	r3, #0
 800d812:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	7c1b      	ldrb	r3, [r3, #16]
 800d818:	2b01      	cmp	r3, #1
 800d81a:	f040 810f 	bne.w	800da3c <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	7e9b      	ldrb	r3, [r3, #26]
 800d822:	b29a      	uxth	r2, r3
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800d830:	021b      	lsls	r3, r3, #8
 800d832:	b29a      	uxth	r2, r3
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800d840:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d844:	b29a      	uxth	r2, r3
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8b3 2640 	ldrh.w	r2, [r3, #1600]	; 0x640
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	7edb      	ldrb	r3, [r3, #27]
 800d856:	b29b      	uxth	r3, r3
 800d858:	4313      	orrs	r3, r2
 800d85a:	b29a      	uxth	r2, r3
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	7f1b      	ldrb	r3, [r3, #28]
 800d866:	b29a      	uxth	r2, r3
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800d874:	021b      	lsls	r3, r3, #8
 800d876:	b29a      	uxth	r2, r3
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800d884:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d888:	b29a      	uxth	r2, r3
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	7f5b      	ldrb	r3, [r3, #29]
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	4313      	orrs	r3, r2
 800d89e:	b29a      	uxth	r2, r3
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f893 363e 	ldrb.w	r3, [r3, #1598]	; 0x63e
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	f200 80a8 	bhi.w	800da0a <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800d8c8:	4413      	add	r3, r2
 800d8ca:	687a      	ldr	r2, [r7, #4]
 800d8cc:	f892 263e 	ldrb.w	r2, [r2, #1598]	; 0x63e
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	f300 8081 	bgt.w	800d9d8 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	657b      	str	r3, [r7, #84]	; 0x54
 800d8da:	2300      	movs	r3, #0
 800d8dc:	653b      	str	r3, [r7, #80]	; 0x50
 800d8de:	2300      	movs	r3, #0
 800d8e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	7f9b      	ldrb	r3, [r3, #30]
 800d8ea:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800d8ec:	e00e      	b.n	800d90c <ModBUS+0xe70>
									{
										data=data<<8;
 800d8ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8f0:	021b      	lsls	r3, r3, #8
 800d8f2:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800d8f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8f6:	330c      	adds	r3, #12
 800d8f8:	687a      	ldr	r2, [r7, #4]
 800d8fa:	4413      	add	r3, r2
 800d8fc:	7c9b      	ldrb	r3, [r3, #18]
 800d8fe:	461a      	mov	r2, r3
 800d900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d902:	4313      	orrs	r3, r2
 800d904:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800d906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d908:	3b01      	subs	r3, #1
 800d90a:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800d90c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d1ed      	bne.n	800d8ee <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800d918:	461a      	mov	r2, r3
 800d91a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d91c:	4093      	lsls	r3, r2
 800d91e:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800d920:	e00f      	b.n	800d942 <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800d928:	461a      	mov	r2, r3
 800d92a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d92c:	4413      	add	r3, r2
 800d92e:	2201      	movs	r2, #1
 800d930:	fa02 f303 	lsl.w	r3, r2, r3
 800d934:	461a      	mov	r2, r3
 800d936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d938:	4313      	orrs	r3, r2
 800d93a:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800d93c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d93e:	3301      	adds	r3, #1
 800d940:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800d948:	461a      	mov	r2, r3
 800d94a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d3e8      	bcc.n	800d922 <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800d950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d952:	43db      	mvns	r3, r3
 800d954:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800d95c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d95e:	401a      	ands	r2, r3
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c


									data &= ~mascara;
 800d966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d968:	43db      	mvns	r3, r3
 800d96a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d96c:	4013      	ands	r3, r2
 800d96e:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800d976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d978:	431a      	orrs	r2, r3
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	7f5a      	ldrb	r2, [r3, #29]
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	7f1a      	ldrb	r2, [r3, #28]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	7eda      	ldrb	r2, [r3, #27]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	7e9a      	ldrb	r2, [r3, #26]
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x0F;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	220f      	movs	r2, #15
 800d9ac:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d9be:	3306      	adds	r3, #6
 800d9c0:	b2da      	uxtb	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d9ce:	1d9a      	adds	r2, r3, #6
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800d9d6:	e247      	b.n	800de68 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2202      	movs	r2, #2
 800d9dc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x8F;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	228f      	movs	r2, #143	; 0x8f
 800d9e4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2203      	movs	r2, #3
 800d9f4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d9fe:	1d9a      	adds	r2, r3, #6
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800da06:	2302      	movs	r3, #2
 800da08:	e22e      	b.n	800de68 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2203      	movs	r2, #3
 800da0e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x8F;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	228f      	movs	r2, #143	; 0x8f
 800da16:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2201      	movs	r2, #1
 800da1e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2203      	movs	r2, #3
 800da26:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800da30:	1d9a      	adds	r2, r3, #6
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800da38:	2303      	movs	r3, #3
 800da3a:	e215      	b.n	800de68 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2201      	movs	r2, #1
 800da40:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x8F;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	228f      	movs	r2, #143	; 0x8f
 800da48:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2201      	movs	r2, #1
 800da50:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2203      	movs	r2, #3
 800da58:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800da62:	1d9a      	adds	r2, r3, #6
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800da6a:	2301      	movs	r3, #1
 800da6c:	e1fc      	b.n	800de68 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	7d9a      	ldrb	r2, [r3, #22]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	7d5a      	ldrb	r2, [r3, #21]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	7d1a      	ldrb	r2, [r3, #20]
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	7cda      	ldrb	r2, [r3, #19]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	7c9a      	ldrb	r2, [r3, #18]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800daa0:	2300      	movs	r3, #0
 800daa2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800daa6:	2300      	movs	r3, #0
 800daa8:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	7c5b      	ldrb	r3, [r3, #17]
 800daae:	2b01      	cmp	r3, #1
 800dab0:	f040 80eb 	bne.w	800dc8a <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	7e9b      	ldrb	r3, [r3, #26]
 800dab8:	b29a      	uxth	r2, r3
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800dac6:	021b      	lsls	r3, r3, #8
 800dac8:	b29a      	uxth	r2, r3
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800dad6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dada:	b29a      	uxth	r2, r3
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f8b3 264c 	ldrh.w	r2, [r3, #1612]	; 0x64c
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	7edb      	ldrb	r3, [r3, #27]
 800daec:	b29b      	uxth	r3, r3
 800daee:	4313      	orrs	r3, r2
 800daf0:	b29a      	uxth	r2, r3
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800dafe:	005b      	lsls	r3, r3, #1
 800db00:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	7f1b      	ldrb	r3, [r3, #28]
 800db06:	b29a      	uxth	r2, r3
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800db14:	021b      	lsls	r3, r3, #8
 800db16:	b29a      	uxth	r2, r3
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800db24:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800db28:	b29a      	uxth	r2, r3
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	7f5b      	ldrb	r3, [r3, #29]
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	4313      	orrs	r3, r2
 800db3e:	b29a      	uxth	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 800db52:	b29b      	uxth	r3, r3
 800db54:	429a      	cmp	r2, r3
 800db56:	d87f      	bhi.n	800dc58 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800db5e:	461a      	mov	r2, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800db66:	4413      	add	r3, r2
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	f892 264a 	ldrb.w	r2, [r2, #1610]	; 0x64a
 800db6e:	4293      	cmp	r3, r2
 800db70:	dc59      	bgt.n	800dc26 <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800db72:	e029      	b.n	800dbc8 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800db74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800db78:	f103 020d 	add.w	r2, r3, #13
 800db7c:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800db7e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800db82:	440b      	add	r3, r1
 800db84:	6879      	ldr	r1, [r7, #4]
 800db86:	440a      	add	r2, r1
 800db88:	7c91      	ldrb	r1, [r2, #18]
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	4413      	add	r3, r2
 800db8e:	460a      	mov	r2, r1
 800db90:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800db94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800db98:	3301      	adds	r3, #1
 800db9a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800db9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dba2:	f103 020d 	add.w	r2, r3, #13
 800dba6:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800dba8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dbac:	440b      	add	r3, r1
 800dbae:	6879      	ldr	r1, [r7, #4]
 800dbb0:	440a      	add	r2, r1
 800dbb2:	7c91      	ldrb	r1, [r2, #18]
 800dbb4:	687a      	ldr	r2, [r7, #4]
 800dbb6:	4413      	add	r3, r2
 800dbb8:	460a      	mov	r2, r1
 800dbba:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										qty_reg++;
 800dbbe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	7f9b      	ldrb	r3, [r3, #30]
 800dbcc:	b29b      	uxth	r3, r3
 800dbce:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d3ce      	bcc.n	800db74 <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	7f5a      	ldrb	r2, [r3, #29]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	7f1a      	ldrb	r2, [r3, #28]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	7eda      	ldrb	r2, [r3, #27]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	7e9a      	ldrb	r2, [r3, #26]
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x10;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2210      	movs	r2, #16
 800dc02:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2201      	movs	r2, #1
 800dc0a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2206      	movs	r2, #6
 800dc12:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dc1c:	1d9a      	adds	r2, r3, #6
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800dc24:	e120      	b.n	800de68 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2202      	movs	r2, #2
 800dc2a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x90;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2290      	movs	r2, #144	; 0x90
 800dc32:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2201      	movs	r2, #1
 800dc3a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2203      	movs	r2, #3
 800dc42:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dc4c:	1d9a      	adds	r2, r3, #6
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800dc54:	2302      	movs	r3, #2
 800dc56:	e107      	b.n	800de68 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2203      	movs	r2, #3
 800dc5c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x90;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2290      	movs	r2, #144	; 0x90
 800dc64:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2203      	movs	r2, #3
 800dc74:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dc7e:	1d9a      	adds	r2, r3, #6
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800dc86:	2303      	movs	r3, #3
 800dc88:	e0ee      	b.n	800de68 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x90;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2290      	movs	r2, #144	; 0x90
 800dc96:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2203      	movs	r2, #3
 800dca6:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dcb0:	1d9a      	adds	r2, r3, #6
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800dcb8:	2301      	movs	r3, #1
 800dcba:	e0d5      	b.n	800de68 <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	7e5b      	ldrb	r3, [r3, #25]
 800dcc8:	3b80      	subs	r3, #128	; 0x80
 800dcca:	b2da      	uxtb	r2, r3
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	7e1a      	ldrb	r2, [r3, #24]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
					m3->_MBUS_2SND[5]=0x03;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2203      	movs	r2, #3
 800dce0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	7d9a      	ldrb	r2, [r3, #22]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	7d5a      	ldrb	r2, [r3, #21]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	7d1a      	ldrb	r2, [r3, #20]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	7cda      	ldrb	r2, [r3, #19]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	7c9a      	ldrb	r2, [r3, #18]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800dd1c:	1d9a      	adds	r2, r3, #6
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
					return(1);
 800dd24:	2301      	movs	r3, #1
 800dd26:	e09f      	b.n	800de68 <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800dd28:	2301      	movs	r3, #1
 800dd2a:	e09d      	b.n	800de68 <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	791b      	ldrb	r3, [r3, #4]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	f040 8099 	bne.w	800de68 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f103 0212 	add.w	r2, r3, #18
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dd42:	4619      	mov	r1, r3
 800dd44:	4610      	mov	r0, r2
 800dd46:	f7fe fda5 	bl	800c894 <ModBUS_Check>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	f000 808b 	beq.w	800de68 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f7fe fdbd 	bl	800c8d2 <ModBUS_Check_tid>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d04f      	beq.n	800ddfe <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	7e5b      	ldrb	r3, [r3, #25]
 800dd62:	2b03      	cmp	r3, #3
 800dd64:	d143      	bne.n	800ddee <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800dd66:	2300      	movs	r3, #0
 800dd68:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800dd76:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800dd78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dd7a:	021b      	lsls	r3, r3, #8
 800dd7c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
 800dd84:	b29a      	uxth	r2, r3
 800dd86:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 800dd92:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800dd96:	2300      	movs	r3, #0
 800dd98:	643b      	str	r3, [r7, #64]	; 0x40
 800dd9a:	e022      	b.n	800dde2 <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800dd9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd9e:	005b      	lsls	r3, r3, #1
 800dda0:	f103 0209 	add.w	r2, r3, #9
 800dda4:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800dda6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dda8:	440b      	add	r3, r1
 800ddaa:	005b      	lsls	r3, r3, #1
 800ddac:	6879      	ldr	r1, [r7, #4]
 800ddae:	440a      	add	r2, r1
 800ddb0:	7c91      	ldrb	r1, [r2, #18]
 800ddb2:	687a      	ldr	r2, [r7, #4]
 800ddb4:	4413      	add	r3, r2
 800ddb6:	460a      	mov	r2, r1
 800ddb8:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800ddbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddbe:	3305      	adds	r3, #5
 800ddc0:	005a      	lsls	r2, r3, #1
 800ddc2:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800ddc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddc6:	440b      	add	r3, r1
 800ddc8:	005b      	lsls	r3, r3, #1
 800ddca:	3301      	adds	r3, #1
 800ddcc:	6879      	ldr	r1, [r7, #4]
 800ddce:	440a      	add	r2, r1
 800ddd0:	7c91      	ldrb	r1, [r2, #18]
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	4413      	add	r3, r2
 800ddd6:	460a      	mov	r2, r1
 800ddd8:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
						for (int i=0;i< qty; i++)
 800dddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddde:	3301      	adds	r3, #1
 800dde0:	643b      	str	r3, [r7, #64]	; 0x40
 800dde2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800dde6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dde8:	429a      	cmp	r2, r3
 800ddea:	dbd7      	blt.n	800dd9c <ModBUS+0x1300>

						}


					}
					break;
 800ddec:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	7ddb      	ldrb	r3, [r3, #23]
 800ddf2:	461a      	mov	r2, r3
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	7e9b      	ldrb	r3, [r3, #26]
 800ddf8:	1ad3      	subs	r3, r2, r3
 800ddfa:	63bb      	str	r3, [r7, #56]	; 0x38
 800ddfc:	e034      	b.n	800de68 <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	7e5b      	ldrb	r3, [r3, #25]
 800de02:	3b81      	subs	r3, #129	; 0x81
 800de04:	2b15      	cmp	r3, #21
 800de06:	d82f      	bhi.n	800de68 <ModBUS+0x13cc>
 800de08:	a201      	add	r2, pc, #4	; (adr r2, 800de10 <ModBUS+0x1374>)
 800de0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de0e:	bf00      	nop
 800de10:	0800de69 	.word	0x0800de69
 800de14:	0800de69 	.word	0x0800de69
 800de18:	0800de69 	.word	0x0800de69
 800de1c:	0800de69 	.word	0x0800de69
 800de20:	0800de69 	.word	0x0800de69
 800de24:	0800de69 	.word	0x0800de69
 800de28:	0800de69 	.word	0x0800de69
 800de2c:	0800de69 	.word	0x0800de69
 800de30:	0800de69 	.word	0x0800de69
 800de34:	0800de69 	.word	0x0800de69
 800de38:	0800de69 	.word	0x0800de69
 800de3c:	0800de69 	.word	0x0800de69
 800de40:	0800de69 	.word	0x0800de69
 800de44:	0800de69 	.word	0x0800de69
 800de48:	0800de69 	.word	0x0800de69
 800de4c:	0800de69 	.word	0x0800de69
 800de50:	0800de69 	.word	0x0800de69
 800de54:	0800de69 	.word	0x0800de69
 800de58:	0800de69 	.word	0x0800de69
 800de5c:	0800de69 	.word	0x0800de69
 800de60:	0800de69 	.word	0x0800de69
 800de64:	0800de69 	.word	0x0800de69
			}
		}
	}


}
 800de68:	4618      	mov	r0, r3
 800de6a:	3770      	adds	r7, #112	; 0x70
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <SPI_ETH>:

#include "ETH_W5100.h"


uint8_t  SPI_ETH(struct  W5100_SPI * x )
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b084      	sub	sp, #16
 800de74:	af02      	add	r7, sp, #8
 800de76:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6858      	ldr	r0, [r3, #4]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	891b      	ldrh	r3, [r3, #8]
 800de80:	2200      	movs	r2, #0
 800de82:	4619      	mov	r1, r3
 800de84:	f7f5 fb9c 	bl	80035c0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6818      	ldr	r0, [r3, #0]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f103 0114 	add.w	r1, r3, #20
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f103 0218 	add.w	r2, r3, #24
 800de98:	2364      	movs	r3, #100	; 0x64
 800de9a:	9300      	str	r3, [sp, #0]
 800de9c:	2304      	movs	r3, #4
 800de9e:	f7f6 f8a4 	bl	8003fea <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6858      	ldr	r0, [r3, #4]
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	891b      	ldrh	r3, [r3, #8]
 800deaa:	2201      	movs	r2, #1
 800deac:	4619      	mov	r1, r3
 800deae:	f7f5 fb87 	bl	80035c0 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	7edb      	ldrb	r3, [r3, #27]
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3708      	adds	r7, #8
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}

0800debe <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5100_SPI * x, uint8_t addrh, uint8_t addrl, uint8_t op, uint8_t * data, uint8_t lnght)
{
 800debe:	b580      	push	{r7, lr}
 800dec0:	b086      	sub	sp, #24
 800dec2:	af00      	add	r7, sp, #0
 800dec4:	6078      	str	r0, [r7, #4]
 800dec6:	4608      	mov	r0, r1
 800dec8:	4611      	mov	r1, r2
 800deca:	461a      	mov	r2, r3
 800decc:	4603      	mov	r3, r0
 800dece:	70fb      	strb	r3, [r7, #3]
 800ded0:	460b      	mov	r3, r1
 800ded2:	70bb      	strb	r3, [r7, #2]
 800ded4:	4613      	mov	r3, r2
 800ded6:	707b      	strb	r3, [r7, #1]
 uint16_t res=0;
 800ded8:	2300      	movs	r3, #0
 800deda:	82fb      	strh	r3, [r7, #22]

 x->TX[0]= op; //asigno lectura o escritura
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	787a      	ldrb	r2, [r7, #1]
 800dee0:	751a      	strb	r2, [r3, #20]
 x->TX[1]= addrh;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	78fa      	ldrb	r2, [r7, #3]
 800dee6:	755a      	strb	r2, [r3, #21]
 x->TX[2]= addrl;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	78ba      	ldrb	r2, [r7, #2]
 800deec:	759a      	strb	r2, [r3, #22]
 x->TX[3]=0x00;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2200      	movs	r2, #0
 800def2:	75da      	strb	r2, [r3, #23]
 if(op == SPI_WRITE)
 800def4:	787b      	ldrb	r3, [r7, #1]
 800def6:	2bf0      	cmp	r3, #240	; 0xf0
 800def8:	d11d      	bne.n	800df36 <SPI_ETH_REG+0x78>
 {
	 for(int i=0; i<(lnght); i++)
 800defa:	2300      	movs	r3, #0
 800defc:	613b      	str	r3, [r7, #16]
 800defe:	e013      	b.n	800df28 <SPI_ETH_REG+0x6a>
	 {
		x->TX[3]=data[i];
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	6a3a      	ldr	r2, [r7, #32]
 800df04:	4413      	add	r3, r2
 800df06:	781a      	ldrb	r2, [r3, #0]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f7ff ffaf 	bl	800de70 <SPI_ETH>
 800df12:	4603      	mov	r3, r0
 800df14:	82fb      	strh	r3, [r7, #22]
		x->TX[2]++;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	7d9b      	ldrb	r3, [r3, #22]
 800df1a:	3301      	adds	r3, #1
 800df1c:	b2da      	uxtb	r2, r3
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	759a      	strb	r2, [r3, #22]
	 for(int i=0; i<(lnght); i++)
 800df22:	693b      	ldr	r3, [r7, #16]
 800df24:	3301      	adds	r3, #1
 800df26:	613b      	str	r3, [r7, #16]
 800df28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800df2c:	693a      	ldr	r2, [r7, #16]
 800df2e:	429a      	cmp	r2, r3
 800df30:	dbe6      	blt.n	800df00 <SPI_ETH_REG+0x42>
	 }
	 return(res);
 800df32:	8afb      	ldrh	r3, [r7, #22]
 800df34:	e037      	b.n	800dfa6 <SPI_ETH_REG+0xe8>
 }
	 if(op == SPI_READ)
 800df36:	787b      	ldrb	r3, [r7, #1]
 800df38:	2b0f      	cmp	r3, #15
 800df3a:	d134      	bne.n	800dfa6 <SPI_ETH_REG+0xe8>
	 {
		 x->TX[3]=0x00;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2200      	movs	r2, #0
 800df40:	75da      	strb	r2, [r3, #23]
		 if (lnght==2)
 800df42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800df46:	2b02      	cmp	r3, #2
 800df48:	d120      	bne.n	800df8c <SPI_ETH_REG+0xce>
		{
		for(int i=0; i<(lnght); i++)
 800df4a:	2300      	movs	r3, #0
 800df4c:	60fb      	str	r3, [r7, #12]
 800df4e:	e016      	b.n	800df7e <SPI_ETH_REG+0xc0>
			{
			res|=SPI_ETH(x);
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f7ff ff8d 	bl	800de70 <SPI_ETH>
 800df56:	4603      	mov	r3, r0
 800df58:	b29a      	uxth	r2, r3
 800df5a:	8afb      	ldrh	r3, [r7, #22]
 800df5c:	4313      	orrs	r3, r2
 800df5e:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	7d9b      	ldrb	r3, [r3, #22]
 800df64:	3301      	adds	r3, #1
 800df66:	b2da      	uxtb	r2, r3
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	759a      	strb	r2, [r3, #22]
			if (i==0)res=res<<8;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d102      	bne.n	800df78 <SPI_ETH_REG+0xba>
 800df72:	8afb      	ldrh	r3, [r7, #22]
 800df74:	021b      	lsls	r3, r3, #8
 800df76:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	3301      	adds	r3, #1
 800df7c:	60fb      	str	r3, [r7, #12]
 800df7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800df82:	68fa      	ldr	r2, [r7, #12]
 800df84:	429a      	cmp	r2, r3
 800df86:	dbe3      	blt.n	800df50 <SPI_ETH_REG+0x92>
			}
		 return(res);
 800df88:	8afb      	ldrh	r3, [r7, #22]
 800df8a:	e00c      	b.n	800dfa6 <SPI_ETH_REG+0xe8>
		}else
		{
			res=SPI_ETH(x);
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f7ff ff6f 	bl	800de70 <SPI_ETH>
 800df92:	4603      	mov	r3, r0
 800df94:	82fb      	strh	r3, [r7, #22]
			x->TX[2]++;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	7d9b      	ldrb	r3, [r3, #22]
 800df9a:	3301      	adds	r3, #1
 800df9c:	b2da      	uxtb	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	759a      	strb	r2, [r3, #22]
			return(res);
 800dfa2:	8afb      	ldrh	r3, [r7, #22]
 800dfa4:	e7ff      	b.n	800dfa6 <SPI_ETH_REG+0xe8>
		}
 	 }
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3718      	adds	r7, #24
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}

0800dfae <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5100_SPI * x, uint16_t addr, uint16_t  data)
{
 800dfae:	b580      	push	{r7, lr}
 800dfb0:	b086      	sub	sp, #24
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	6078      	str	r0, [r7, #4]
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	807b      	strh	r3, [r7, #2]
 800dfba:	4613      	mov	r3, r2
 800dfbc:	803b      	strh	r3, [r7, #0]
 uint16_t res=0;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	82fb      	strh	r3, [r7, #22]
 uint8_t num[2];

 x->TX[0]= SPI_WRITE; //asigno lectura o escritura
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	22f0      	movs	r2, #240	; 0xf0
 800dfc6:	751a      	strb	r2, [r3, #20]

 num[1] = data & 0x00FF ;
 800dfc8:	883b      	ldrh	r3, [r7, #0]
 800dfca:	b2db      	uxtb	r3, r3
 800dfcc:	737b      	strb	r3, [r7, #13]
 num[0] = (data & 0xFF00)>>8 ;
 800dfce:	883b      	ldrh	r3, [r7, #0]
 800dfd0:	0a1b      	lsrs	r3, r3, #8
 800dfd2:	b29b      	uxth	r3, r3
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	733b      	strb	r3, [r7, #12]

	 for(int i=0; i<(2); i++)
 800dfd8:	2300      	movs	r3, #0
 800dfda:	613b      	str	r3, [r7, #16]
 800dfdc:	e01b      	b.n	800e016 <SPI_ETH_WR_REG_16+0x68>
	 {
		x->TX[2]= addr & 0x00FF;
 800dfde:	887b      	ldrh	r3, [r7, #2]
 800dfe0:	b2da      	uxtb	r2, r3
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	759a      	strb	r2, [r3, #22]
		x->TX[1]=(addr & 0xFF00)>>8;
 800dfe6:	887b      	ldrh	r3, [r7, #2]
 800dfe8:	0a1b      	lsrs	r3, r3, #8
 800dfea:	b29b      	uxth	r3, r3
 800dfec:	b2da      	uxtb	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	755a      	strb	r2, [r3, #21]
		addr++;
 800dff2:	887b      	ldrh	r3, [r7, #2]
 800dff4:	3301      	adds	r3, #1
 800dff6:	807b      	strh	r3, [r7, #2]
		x->TX[3]=num[i];
 800dff8:	f107 020c 	add.w	r2, r7, #12
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	4413      	add	r3, r2
 800e000:	781a      	ldrb	r2, [r3, #0]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	75da      	strb	r2, [r3, #23]
		res=SPI_ETH(x);
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	f7ff ff32 	bl	800de70 <SPI_ETH>
 800e00c:	4603      	mov	r3, r0
 800e00e:	82fb      	strh	r3, [r7, #22]
	 for(int i=0; i<(2); i++)
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	3301      	adds	r3, #1
 800e014:	613b      	str	r3, [r7, #16]
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	2b01      	cmp	r3, #1
 800e01a:	dde0      	ble.n	800dfde <SPI_ETH_WR_REG_16+0x30>
	 }
	 return(res);
 800e01c:	8afb      	ldrh	r3, [r7, #22]
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3718      	adds	r7, #24
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}

0800e026 <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800e026:	b590      	push	{r4, r7, lr}
 800e028:	b087      	sub	sp, #28
 800e02a:	af00      	add	r7, sp, #0
 800e02c:	60f8      	str	r0, [r7, #12]
 800e02e:	607a      	str	r2, [r7, #4]
 800e030:	461a      	mov	r2, r3
 800e032:	460b      	mov	r3, r1
 800e034:	817b      	strh	r3, [r7, #10]
 800e036:	4613      	mov	r3, r2
 800e038:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0x0F; //read operation
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	220f      	movs	r2, #15
 800e03e:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800e040:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e046:	d226      	bcs.n	800e096 <SPI_ETH_RD_RCV_REG_16+0x70>
	{
			x->TX[3]=0x00;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2200      	movs	r2, #0
 800e04c:	75da      	strb	r2, [r3, #23]
			for(int i=0; i<(lnght); i++)
 800e04e:	2300      	movs	r3, #0
 800e050:	617b      	str	r3, [r7, #20]
 800e052:	e01a      	b.n	800e08a <SPI_ETH_RD_RCV_REG_16+0x64>
				{
				x->TX[2] = addr & 0x00FF;
 800e054:	897b      	ldrh	r3, [r7, #10]
 800e056:	b2da      	uxtb	r2, r3
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800e05c:	897b      	ldrh	r3, [r7, #10]
 800e05e:	0a1b      	lsrs	r3, r3, #8
 800e060:	b29b      	uxth	r3, r3
 800e062:	b2da      	uxtb	r2, r3
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	755a      	strb	r2, [r3, #21]
				data[i+offset]=SPI_ETH(x);
 800e068:	893a      	ldrh	r2, [r7, #8]
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	4413      	add	r3, r2
 800e06e:	461a      	mov	r2, r3
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	189c      	adds	r4, r3, r2
 800e074:	68f8      	ldr	r0, [r7, #12]
 800e076:	f7ff fefb 	bl	800de70 <SPI_ETH>
 800e07a:	4603      	mov	r3, r0
 800e07c:	7023      	strb	r3, [r4, #0]
				addr++;
 800e07e:	897b      	ldrh	r3, [r7, #10]
 800e080:	3301      	adds	r3, #1
 800e082:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	3301      	adds	r3, #1
 800e088:	617b      	str	r3, [r7, #20]
 800e08a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e08c:	697a      	ldr	r2, [r7, #20]
 800e08e:	429a      	cmp	r2, r3
 800e090:	dbe0      	blt.n	800e054 <SPI_ETH_RD_RCV_REG_16+0x2e>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800e092:	2300      	movs	r3, #0
 800e094:	e000      	b.n	800e098 <SPI_ETH_RD_RCV_REG_16+0x72>
	}
	else
	{
	return(1);
 800e096:	2301      	movs	r3, #1
	}
}
 800e098:	4618      	mov	r0, r3
 800e09a:	371c      	adds	r7, #28
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd90      	pop	{r4, r7, pc}

0800e0a0 <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5100_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght )
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b086      	sub	sp, #24
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	60f8      	str	r0, [r7, #12]
 800e0a8:	607a      	str	r2, [r7, #4]
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	460b      	mov	r3, r1
 800e0ae:	817b      	strh	r3, [r7, #10]
 800e0b0:	4613      	mov	r3, r2
 800e0b2:	813b      	strh	r3, [r7, #8]
	x->TX[0]=0xF0; //write operation
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	22f0      	movs	r2, #240	; 0xf0
 800e0b8:	751a      	strb	r2, [r3, #20]
	if(lnght < 2048)
 800e0ba:	8c3b      	ldrh	r3, [r7, #32]
 800e0bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e0c0:	d223      	bcs.n	800e10a <SPI_ETH_WR_TX_REG_16+0x6a>
	{

			for(int i=0; i<(lnght); i++)
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	617b      	str	r3, [r7, #20]
 800e0c6:	e01a      	b.n	800e0fe <SPI_ETH_WR_TX_REG_16+0x5e>
				{
				x->TX[2] = addr & 0x00FF;
 800e0c8:	897b      	ldrh	r3, [r7, #10]
 800e0ca:	b2da      	uxtb	r2, r3
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	759a      	strb	r2, [r3, #22]
				x->TX[1] = (addr & 0xFF00)>>8;
 800e0d0:	897b      	ldrh	r3, [r7, #10]
 800e0d2:	0a1b      	lsrs	r3, r3, #8
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	b2da      	uxtb	r2, r3
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	755a      	strb	r2, [r3, #21]
				x->TX[3]= x->data[i+offset];
 800e0dc:	893a      	ldrh	r2, [r7, #8]
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	4413      	add	r3, r2
 800e0e2:	68fa      	ldr	r2, [r7, #12]
 800e0e4:	4413      	add	r3, r2
 800e0e6:	7f1a      	ldrb	r2, [r3, #28]
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	75da      	strb	r2, [r3, #23]
				SPI_ETH(x);
 800e0ec:	68f8      	ldr	r0, [r7, #12]
 800e0ee:	f7ff febf 	bl	800de70 <SPI_ETH>
				addr++;
 800e0f2:	897b      	ldrh	r3, [r7, #10]
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	617b      	str	r3, [r7, #20]
 800e0fe:	8c3b      	ldrh	r3, [r7, #32]
 800e100:	697a      	ldr	r2, [r7, #20]
 800e102:	429a      	cmp	r2, r3
 800e104:	dbe0      	blt.n	800e0c8 <SPI_ETH_WR_TX_REG_16+0x28>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800e106:	2300      	movs	r3, #0
 800e108:	e000      	b.n	800e10c <SPI_ETH_WR_TX_REG_16+0x6c>
	}
	else
	{
	return(1);
 800e10a:	2301      	movs	r3, #1
	}
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3718      	adds	r7, #24
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b082      	sub	sp, #8
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	460b      	mov	r3, r1
 800e11e:	70fb      	strb	r3, [r7, #3]
 800e120:	4613      	mov	r3, r2
 800e122:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	22f0      	movs	r2, #240	; 0xf0
 800e128:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_CR_ADDR_BASEH + s;
 800e12a:	78fb      	ldrb	r3, [r7, #3]
 800e12c:	3304      	adds	r3, #4
 800e12e:	b2da      	uxtb	r2, r3
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_CR_ADDR_BASEL ;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2201      	movs	r2, #1
 800e138:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	78ba      	ldrb	r2, [r7, #2]
 800e13e:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f7ff fe95 	bl	800de70 <SPI_ETH>
}
 800e146:	bf00      	nop
 800e148:	4618      	mov	r0, r3
 800e14a:	3708      	adds	r7, #8
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5100_SPI * y, uint8_t s, uint8_t z)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	460b      	mov	r3, r1
 800e15a:	70fb      	strb	r3, [r7, #3]
 800e15c:	4613      	mov	r3, r2
 800e15e:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= SPI_WRITE ;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	22f0      	movs	r2, #240	; 0xf0
 800e164:	751a      	strb	r2, [r3, #20]
	y->TX[1]= S0_MR_ADDR_BASEH + s;
 800e166:	78fb      	ldrb	r3, [r7, #3]
 800e168:	3304      	adds	r3, #4
 800e16a:	b2da      	uxtb	r2, r3
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	755a      	strb	r2, [r3, #21]
	y->TX[2]= S0_MR_ADDR_BASEL ;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	759a      	strb	r2, [r3, #22]
	y->TX[3]= z ;		//Lo carga en la info a enviar
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	78ba      	ldrb	r2, [r7, #2]
 800e17a:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f7ff fe77 	bl	800de70 <SPI_ETH>
}
 800e182:	bf00      	nop
 800e184:	4618      	mov	r0, r3
 800e186:	3708      	adds	r7, #8
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <eth_init>:


uint8_t eth_init(struct W5100_SPI * ETH)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b084      	sub	sp, #16
 800e190:	af02      	add	r7, sp, #8
 800e192:	6078      	str	r0, [r7, #4]
	 SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e19a:	331c      	adds	r3, #28
 800e19c:	2204      	movs	r2, #4
 800e19e:	9201      	str	r2, [sp, #4]
 800e1a0:	9300      	str	r3, [sp, #0]
 800e1a2:	23f0      	movs	r3, #240	; 0xf0
 800e1a4:	2201      	movs	r2, #1
 800e1a6:	2100      	movs	r1, #0
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f7ff fe88 	bl	800debe <SPI_ETH_REG>
	 // ITM0_Write("\r\nETH-W5100-GATEWAY SET\r\n",strlen("\r\nETH-W5100-GATEWAY SET\r\n"));									//same for server and client
	 SPI_ETH_REG(ETH, SUBR_ADDR_BASEH,SUBR_ADDR_BASEL,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e1b4:	2204      	movs	r2, #4
 800e1b6:	9201      	str	r2, [sp, #4]
 800e1b8:	9300      	str	r3, [sp, #0]
 800e1ba:	23f0      	movs	r3, #240	; 0xf0
 800e1bc:	2205      	movs	r2, #5
 800e1be:	2100      	movs	r1, #0
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f7ff fe7c 	bl	800debe <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-SUBNET SET\r\n",strlen("\r\nETH-W5100-SUBNET SET"));											//same for server and client
	 SPI_ETH_REG(ETH, SHAR_ADDR_BASEH,SHAR_ADDR_BASEL,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e1cc:	3304      	adds	r3, #4
 800e1ce:	2206      	movs	r2, #6
 800e1d0:	9201      	str	r2, [sp, #4]
 800e1d2:	9300      	str	r3, [sp, #0]
 800e1d4:	23f0      	movs	r3, #240	; 0xf0
 800e1d6:	2209      	movs	r2, #9
 800e1d8:	2100      	movs	r1, #0
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f7ff fe6f 	bl	800debe <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-MAC SET\r\n",strlen("\r\nETH-W5100-MAC SET"));												//same for server and client
	 SPI_ETH_REG(ETH, SIPR_ADDR_BASEH,SIPR_ADDR_BASEL,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e1e6:	330a      	adds	r3, #10
 800e1e8:	2204      	movs	r2, #4
 800e1ea:	9201      	str	r2, [sp, #4]
 800e1ec:	9300      	str	r3, [sp, #0]
 800e1ee:	23f0      	movs	r3, #240	; 0xf0
 800e1f0:	220f      	movs	r2, #15
 800e1f2:	2100      	movs	r1, #0
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	f7ff fe62 	bl	800debe <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-IP SET\r\n",strlen("\r\nETH-W5100-IP SET"));													//same for server and client
	 SPI_ETH_REG(ETH, RMSR_ADDR_BASEH,RMSR_ADDR_BASEL,SPI_WRITE, &ETH->RMSR,1);												//same for server and client
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e200:	330e      	adds	r3, #14
 800e202:	2201      	movs	r2, #1
 800e204:	9201      	str	r2, [sp, #4]
 800e206:	9300      	str	r3, [sp, #0]
 800e208:	23f0      	movs	r3, #240	; 0xf0
 800e20a:	221a      	movs	r2, #26
 800e20c:	2100      	movs	r1, #0
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f7ff fe55 	bl	800debe <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET RX MEMORY 2K\r\n")); 	//same for server and client
	 SPI_ETH_REG(ETH, TMSR_ADDR_BASEH,TMSR_ADDR_BASEL,SPI_WRITE, &ETH->TMSR,1);												//same for server and client
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e21a:	330f      	adds	r3, #15
 800e21c:	2201      	movs	r2, #1
 800e21e:	9201      	str	r2, [sp, #4]
 800e220:	9300      	str	r3, [sp, #0]
 800e222:	23f0      	movs	r3, #240	; 0xf0
 800e224:	221b      	movs	r2, #27
 800e226:	2100      	movs	r1, #0
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f7ff fe48 	bl	800debe <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n",strlen("\r\nETH-W5100-DEFINE SOCKET TX MEMORY 2K\r\n"));		//same for server and client

}
 800e22e:	bf00      	nop
 800e230:	4618      	mov	r0, r3
 800e232:	3708      	adds	r7, #8
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <eth_socket_init>:

uint8_t eth_socket_init(struct W5100_SPI * ETH, uint8_t socket)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af02      	add	r7, sp, #8
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	460b      	mov	r3, r1
 800e242:	70fb      	strb	r3, [r7, #3]
	 eth_wr_SOCKET_MODE(ETH,socket, MODE_TCP);																				//same for server and client
 800e244:	78fb      	ldrb	r3, [r7, #3]
 800e246:	2201      	movs	r2, #1
 800e248:	4619      	mov	r1, r3
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f7ff ff80 	bl	800e150 <eth_wr_SOCKET_MODE>
	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP SET"));									//same for server and client
	 SPI_ETH_REG(ETH, S0_PORT_ADDR_BASELH,S0_PORT_ADDR_BASELL,SPI_WRITE, ETH->S0_PORT,2);									//same for server and client
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e256:	331a      	adds	r3, #26
 800e258:	2202      	movs	r2, #2
 800e25a:	9201      	str	r2, [sp, #4]
 800e25c:	9300      	str	r3, [sp, #0]
 800e25e:	23f0      	movs	r3, #240	; 0xf0
 800e260:	2204      	movs	r2, #4
 800e262:	2104      	movs	r1, #4
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f7ff fe2a 	bl	800debe <SPI_ETH_REG>

	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
	 SPI_ETH_REG(ETH, 0x04,0x0C,SPI_WRITE, ETH->S0_DIPR,4);									// client
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800e270:	331c      	adds	r3, #28
 800e272:	2204      	movs	r2, #4
 800e274:	9201      	str	r2, [sp, #4]
 800e276:	9300      	str	r3, [sp, #0]
 800e278:	23f0      	movs	r3, #240	; 0xf0
 800e27a:	220c      	movs	r2, #12
 800e27c:	2104      	movs	r1, #4
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f7ff fe1d 	bl	800debe <SPI_ETH_REG>
	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5100-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
	 SPI_ETH_REG(ETH, 0x04,0x10,SPI_WRITE, ETH->S0_DPORT,2);									// client
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e28a:	2202      	movs	r2, #2
 800e28c:	9201      	str	r2, [sp, #4]
 800e28e:	9300      	str	r3, [sp, #0]
 800e290:	23f0      	movs	r3, #240	; 0xf0
 800e292:	2210      	movs	r2, #16
 800e294:	2104      	movs	r1, #4
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f7ff fe11 	bl	800debe <SPI_ETH_REG>


	 //ITM0_Write("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5100-SOCK0 TCP PORT SET\r\n"));						//same for server and client
	 eth_wr_SOCKET_CMD(ETH,socket, OPEN);																					//same for server and client
 800e29c:	78fb      	ldrb	r3, [r7, #3]
 800e29e:	2201      	movs	r2, #1
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f7ff ff36 	bl	800e114 <eth_wr_SOCKET_CMD>
	 //ITM0_Write("\r\nETH-W5100-OPEN SOCKET\r\n",strlen("\r\nETH-W5100-OPEN SOCKET\r\n"));									//same for server and client

	 if(ETH->S0_ENserver == 1)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	d106      	bne.n	800e2c4 <eth_socket_init+0x8c>
	 {
		 eth_wr_SOCKET_CMD(ETH,socket, LISTEN);																				//only for server
 800e2b6:	78fb      	ldrb	r3, [r7, #3]
 800e2b8:	2202      	movs	r2, #2
 800e2ba:	4619      	mov	r1, r3
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f7ff ff29 	bl	800e114 <eth_wr_SOCKET_CMD>
 800e2c2:	e009      	b.n	800e2d8 <eth_socket_init+0xa0>
		 //ITM0_Write("\r\nETH-W5100-LISTEN SOCKET\r\n",strlen("\r\nETH-W5100-LISTEN SOCKET\r\n"));							//only for server
	 }
	 else
	 {

		 	 eth_wr_SOCKET_CMD(ETH,socket, CONNECT);																				//only for server
 800e2c4:	78fb      	ldrb	r3, [r7, #3]
 800e2c6:	2204      	movs	r2, #4
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f7ff ff22 	bl	800e114 <eth_wr_SOCKET_CMD>
			 ITM0_Write("\r\nETH-W5100-CONNECT\r\n",strlen("\r\nETH-W5100-CONNECT\r\n"));											//only fir server
 800e2d0:	2115      	movs	r1, #21
 800e2d2:	4804      	ldr	r0, [pc, #16]	; (800e2e4 <eth_socket_init+0xac>)
 800e2d4:	f7f3 f98a 	bl	80015ec <ITM0_Write>
	 }
}
 800e2d8:	bf00      	nop
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3708      	adds	r7, #8
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	08010c1c 	.word	0x08010c1c

0800e2e8 <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5100_SPI * y, uint8_t socket)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	460b      	mov	r3, r1
 800e2f2:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	220f      	movs	r2, #15
 800e2f8:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_SR_ADDR_BASEH + socket;
 800e2fa:	78fb      	ldrb	r3, [r7, #3]
 800e2fc:	3304      	adds	r3, #4
 800e2fe:	b2da      	uxtb	r2, r3
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_SR_ADDR_BASEL ;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2203      	movs	r2, #3
 800e308:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2200      	movs	r2, #0
 800e30e:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f7ff fdad 	bl	800de70 <SPI_ETH>
	return(y->RX[3]);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	7edb      	ldrb	r3, [r3, #27]
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3708      	adds	r7, #8
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}

0800e322 <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5100_SPI * y, uint8_t socket)
{
 800e322:	b580      	push	{r7, lr}
 800e324:	b082      	sub	sp, #8
 800e326:	af00      	add	r7, sp, #0
 800e328:	6078      	str	r0, [r7, #4]
 800e32a:	460b      	mov	r3, r1
 800e32c:	70fb      	strb	r3, [r7, #3]
	y->TX[0]= SPI_READ;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	220f      	movs	r2, #15
 800e332:	751a      	strb	r2, [r3, #20]
	y->TX[1]=  S0_CR_ADDR_BASEH + socket;
 800e334:	78fb      	ldrb	r3, [r7, #3]
 800e336:	3304      	adds	r3, #4
 800e338:	b2da      	uxtb	r2, r3
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	755a      	strb	r2, [r3, #21]
	y->TX[2]=  S0_CR_ADDR_BASEL ;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2201      	movs	r2, #1
 800e342:	759a      	strb	r2, [r3, #22]
	y->TX[3]= 0 ;		//Lo carga en la info a enviar
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2200      	movs	r2, #0
 800e348:	75da      	strb	r2, [r3, #23]
	SPI_ETH(y);
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f7ff fd90 	bl	800de70 <SPI_ETH>
	return(y->RX[3]);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	7edb      	ldrb	r3, [r3, #27]
}
 800e354:	4618      	mov	r0, r3
 800e356:	3708      	adds	r7, #8
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b08c      	sub	sp, #48	; 0x30
 800e360:	af02      	add	r7, sp, #8
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	607a      	str	r2, [r7, #4]
 800e366:	461a      	mov	r2, r3
 800e368:	460b      	mov	r3, r1
 800e36a:	72fb      	strb	r3, [r7, #11]
 800e36c:	4613      	mov	r3, r2
 800e36e:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e370:	2300      	movs	r3, #0
 800e372:	847b      	strh	r3, [r7, #34]	; 0x22
			 left_size=0,
 800e374:	2300      	movs	r3, #0
 800e376:	843b      	strh	r3, [r7, #32]
			 upper_size=0,
 800e378:	2300      	movs	r3, #0
 800e37a:	83fb      	strh	r3, [r7, #30]
			 destination_addr=0,
 800e37c:	2300      	movs	r3, #0
 800e37e:	83bb      	strh	r3, [r7, #28]
			 S0_RX_RD=0,
 800e380:	2300      	movs	r3, #0
 800e382:	837b      	strh	r3, [r7, #26]
			 S0_get_offset=0,
 800e384:	2300      	movs	r3, #0
 800e386:	833b      	strh	r3, [r7, #24]
			 S0_get_start_address=0,
 800e388:	2300      	movs	r3, #0
 800e38a:	82fb      	strh	r3, [r7, #22]
			 S0_mem_pointer=0,
 800e38c:	2300      	movs	r3, #0
 800e38e:	82bb      	strh	r3, [r7, #20]
			 RX_MASK=0,
 800e390:	2300      	movs	r3, #0
 800e392:	84fb      	strh	r3, [r7, #38]	; 0x26
			 RX_BASE=0;
 800e394:	2300      	movs	r3, #0
 800e396:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t spi_Data[2];

	switch (socket)
 800e398:	7afb      	ldrb	r3, [r7, #11]
 800e39a:	2b03      	cmp	r3, #3
 800e39c:	d83e      	bhi.n	800e41c <eth_rd_SOCKET_DATA+0xc0>
 800e39e:	a201      	add	r2, pc, #4	; (adr r2, 800e3a4 <eth_rd_SOCKET_DATA+0x48>)
 800e3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3a4:	0800e3b5 	.word	0x0800e3b5
 800e3a8:	0800e3cf 	.word	0x0800e3cf
 800e3ac:	0800e3e9 	.word	0x0800e3e9
 800e3b0:	0800e403 	.word	0x0800e403
	{
		case 0 :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e3be:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e3ca:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e3cc:	e033      	b.n	800e436 <eth_rd_SOCKET_DATA+0xda>
		case 1 :
		{
			RX_MASK=ETH->gS1_RX_MASK;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3d4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800e3d8:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS1_RX_BASE;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3e0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e3e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e3e6:	e026      	b.n	800e436 <eth_rd_SOCKET_DATA+0xda>
		case 2 :
		{
			RX_MASK=ETH->gS2_RX_MASK;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e3f2:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS2_RX_BASE;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3fa:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e3fe:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e400:	e019      	b.n	800e436 <eth_rd_SOCKET_DATA+0xda>
		case 3 :
		{
			RX_MASK=ETH->gS3_RX_MASK;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e408:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800e40c:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS3_RX_BASE;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e414:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e418:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e41a:	e00c      	b.n	800e436 <eth_rd_SOCKET_DATA+0xda>
		default :
		{
			RX_MASK=ETH->gS0_RX_MASK;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e422:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e426:	84fb      	strh	r3, [r7, #38]	; 0x26
			RX_BASE=ETH->gS0_RX_BASE;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e42e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e432:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		break;
 800e434:	bf00      	nop
	}

	S0_RX_RD = SPI_ETH_REG(ETH, S0_RX_RD_ADDR_BASEHH + socket ,S0_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800e436:	7afb      	ldrb	r3, [r7, #11]
 800e438:	3304      	adds	r3, #4
 800e43a:	b2d9      	uxtb	r1, r3
 800e43c:	2302      	movs	r3, #2
 800e43e:	9301      	str	r3, [sp, #4]
 800e440:	f107 0310 	add.w	r3, r7, #16
 800e444:	9300      	str	r3, [sp, #0]
 800e446:	230f      	movs	r3, #15
 800e448:	2228      	movs	r2, #40	; 0x28
 800e44a:	68f8      	ldr	r0, [r7, #12]
 800e44c:	f7ff fd37 	bl	800debe <SPI_ETH_REG>
 800e450:	4603      	mov	r3, r0
 800e452:	837b      	strh	r3, [r7, #26]
	S0_get_offset = S0_RX_RD & RX_MASK;
 800e454:	8b7a      	ldrh	r2, [r7, #26]
 800e456:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e458:	4013      	ands	r3, r2
 800e45a:	833b      	strh	r3, [r7, #24]
	S0_get_start_address  = RX_BASE + S0_get_offset;
 800e45c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e45e:	8b3b      	ldrh	r3, [r7, #24]
 800e460:	4413      	add	r3, r2
 800e462:	82fb      	strh	r3, [r7, #22]
	if((S0_get_offset  + sizedata )>(RX_MASK + 1))
 800e464:	8b3a      	ldrh	r2, [r7, #24]
 800e466:	893b      	ldrh	r3, [r7, #8]
 800e468:	441a      	add	r2, r3
 800e46a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e46c:	3301      	adds	r3, #1
 800e46e:	429a      	cmp	r2, r3
 800e470:	dd2c      	ble.n	800e4cc <eth_rd_SOCKET_DATA+0x170>
		{
			upper_size = (RX_MASK + 1) - S0_get_offset ;
 800e472:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e474:	8b3b      	ldrh	r3, [r7, #24]
 800e476:	1ad3      	subs	r3, r2, r3
 800e478:	b29b      	uxth	r3, r3
 800e47a:	3301      	adds	r3, #1
 800e47c:	83fb      	strh	r3, [r7, #30]
			SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	f103 021c 	add.w	r2, r3, #28
 800e484:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e486:	8af9      	ldrh	r1, [r7, #22]
 800e488:	8bfb      	ldrh	r3, [r7, #30]
 800e48a:	9300      	str	r3, [sp, #0]
 800e48c:	4603      	mov	r3, r0
 800e48e:	68f8      	ldr	r0, [r7, #12]
 800e490:	f7ff fdc9 	bl	800e026 <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800e494:	8bba      	ldrh	r2, [r7, #28]
 800e496:	8bfb      	ldrh	r3, [r7, #30]
 800e498:	4413      	add	r3, r2
 800e49a:	83bb      	strh	r3, [r7, #28]
			left_size=sizedata-upper_size;
 800e49c:	893a      	ldrh	r2, [r7, #8]
 800e49e:	8bfb      	ldrh	r3, [r7, #30]
 800e4a0:	1ad3      	subs	r3, r2, r3
 800e4a2:	843b      	strh	r3, [r7, #32]
			S0_bf_rcv_offset=upper_size;
 800e4a4:	8bfb      	ldrh	r3, [r7, #30]
 800e4a6:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f103 021c 	add.w	r2, r3, #28
 800e4ae:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e4b0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e4b2:	8c3b      	ldrh	r3, [r7, #32]
 800e4b4:	9300      	str	r3, [sp, #0]
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	68f8      	ldr	r0, [r7, #12]
 800e4ba:	f7ff fdb4 	bl	800e026 <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S0_RX_RD + sizedata;
 800e4be:	8b7a      	ldrh	r2, [r7, #26]
 800e4c0:	893b      	ldrh	r3, [r7, #8]
 800e4c2:	4413      	add	r3, r2
 800e4c4:	b29a      	uxth	r2, r3
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	801a      	strh	r2, [r3, #0]
 800e4ca:	e010      	b.n	800e4ee <eth_rd_SOCKET_DATA+0x192>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S0_get_start_address , ETH->data , S0_bf_rcv_offset, sizedata);
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f103 021c 	add.w	r2, r3, #28
 800e4d2:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800e4d4:	8af9      	ldrh	r1, [r7, #22]
 800e4d6:	893b      	ldrh	r3, [r7, #8]
 800e4d8:	9300      	str	r3, [sp, #0]
 800e4da:	4603      	mov	r3, r0
 800e4dc:	68f8      	ldr	r0, [r7, #12]
 800e4de:	f7ff fda2 	bl	800e026 <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S0_RX_RD + sizedata;
 800e4e2:	8b7a      	ldrh	r2, [r7, #26]
 800e4e4:	893b      	ldrh	r3, [r7, #8]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	b29a      	uxth	r2, r3
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	b29b      	uxth	r3, r3
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	3728      	adds	r7, #40	; 0x28
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}
 800e4fa:	bf00      	nop

0800e4fc <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5100_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b08c      	sub	sp, #48	; 0x30
 800e500:	af02      	add	r7, sp, #8
 800e502:	60f8      	str	r0, [r7, #12]
 800e504:	607a      	str	r2, [r7, #4]
 800e506:	461a      	mov	r2, r3
 800e508:	460b      	mov	r3, r1
 800e50a:	72fb      	strb	r3, [r7, #11]
 800e50c:	4613      	mov	r3, r2
 800e50e:	813b      	strh	r3, [r7, #8]
	uint16_t S0_bf_rcv_offset=0,
 800e510:	2300      	movs	r3, #0
 800e512:	843b      	strh	r3, [r7, #32]
			 left_size=0,
 800e514:	2300      	movs	r3, #0
 800e516:	83fb      	strh	r3, [r7, #30]
			 upper_size=0,
 800e518:	2300      	movs	r3, #0
 800e51a:	83bb      	strh	r3, [r7, #28]
			 source_addr=0,
 800e51c:	2300      	movs	r3, #0
 800e51e:	837b      	strh	r3, [r7, #26]
			 Sn_TX_WR=0,
 800e520:	2300      	movs	r3, #0
 800e522:	833b      	strh	r3, [r7, #24]
			 get_offset=0,
 800e524:	2300      	movs	r3, #0
 800e526:	82fb      	strh	r3, [r7, #22]
			 get_free_size=0,
 800e528:	2300      	movs	r3, #0
 800e52a:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800e52c:	2300      	movs	r3, #0
 800e52e:	82bb      	strh	r3, [r7, #20]
			 S0_mem_pointer=0,
 800e530:	2300      	movs	r3, #0
 800e532:	827b      	strh	r3, [r7, #18]
			 TX_MASK=0,
 800e534:	2300      	movs	r3, #0
 800e536:	84bb      	strh	r3, [r7, #36]	; 0x24
			 TX_BASE=0;
 800e538:	2300      	movs	r3, #0
 800e53a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t spi_Data[2];

	switch (socket)
 800e53c:	7afb      	ldrb	r3, [r7, #11]
 800e53e:	2b03      	cmp	r3, #3
 800e540:	d83e      	bhi.n	800e5c0 <eth_wr_SOCKET_DATA+0xc4>
 800e542:	a201      	add	r2, pc, #4	; (adr r2, 800e548 <eth_wr_SOCKET_DATA+0x4c>)
 800e544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e548:	0800e559 	.word	0x0800e559
 800e54c:	0800e573 	.word	0x0800e573
 800e550:	0800e58d 	.word	0x0800e58d
 800e554:	0800e5a7 	.word	0x0800e5a7
	{
		case 0 :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e55e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e562:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e56a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e56e:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e570:	e033      	b.n	800e5da <eth_wr_SOCKET_DATA+0xde>
		case 1 :
		{
			TX_MASK=ETH->gS1_TX_MASK;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e578:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e57c:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS1_TX_BASE;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e584:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e588:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e58a:	e026      	b.n	800e5da <eth_wr_SOCKET_DATA+0xde>
		case 2 :
		{
			TX_MASK=ETH->gS2_TX_MASK;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e592:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e596:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS2_TX_BASE;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e59e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e5a2:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e5a4:	e019      	b.n	800e5da <eth_wr_SOCKET_DATA+0xde>
		case 3 :
		{
			TX_MASK=ETH->gS3_TX_MASK;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5ac:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e5b0:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS3_TX_BASE;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e5bc:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e5be:	e00c      	b.n	800e5da <eth_wr_SOCKET_DATA+0xde>
		default :
		{
			TX_MASK=ETH->gS0_TX_MASK;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e5ca:	84bb      	strh	r3, [r7, #36]	; 0x24
			TX_BASE=ETH->gS0_TX_BASE;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e5d6:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		break;
 800e5d8:	bf00      	nop
	}

	while(get_free_size<send_size)
 800e5da:	e00e      	b.n	800e5fa <eth_wr_SOCKET_DATA+0xfe>
			{
				get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S0_TX_FSR	=   0x420,
 800e5dc:	7afb      	ldrb	r3, [r7, #11]
 800e5de:	3304      	adds	r3, #4
 800e5e0:	b2d9      	uxtb	r1, r3
 800e5e2:	2302      	movs	r3, #2
 800e5e4:	9301      	str	r3, [sp, #4]
 800e5e6:	f107 0310 	add.w	r3, r7, #16
 800e5ea:	9300      	str	r3, [sp, #0]
 800e5ec:	230f      	movs	r3, #15
 800e5ee:	2220      	movs	r2, #32
 800e5f0:	68f8      	ldr	r0, [r7, #12]
 800e5f2:	f7ff fc64 	bl	800debe <SPI_ETH_REG>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800e5fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e5fc:	893b      	ldrh	r3, [r7, #8]
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d3ec      	bcc.n	800e5dc <eth_wr_SOCKET_DATA+0xe0>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S0_TX_RD =   0x424,
 800e602:	7afb      	ldrb	r3, [r7, #11]
 800e604:	3304      	adds	r3, #4
 800e606:	b2d9      	uxtb	r1, r3
 800e608:	2302      	movs	r3, #2
 800e60a:	9301      	str	r3, [sp, #4]
 800e60c:	f107 0310 	add.w	r3, r7, #16
 800e610:	9300      	str	r3, [sp, #0]
 800e612:	230f      	movs	r3, #15
 800e614:	2224      	movs	r2, #36	; 0x24
 800e616:	68f8      	ldr	r0, [r7, #12]
 800e618:	f7ff fc51 	bl	800debe <SPI_ETH_REG>
 800e61c:	4603      	mov	r3, r0
 800e61e:	833b      	strh	r3, [r7, #24]
				get_offset= Sn_TX_WR & TX_MASK;
 800e620:	8b3a      	ldrh	r2, [r7, #24]
 800e622:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e624:	4013      	ands	r3, r2
 800e626:	82fb      	strh	r3, [r7, #22]
				get_start_address=TX_BASE + get_offset;
 800e628:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e62a:	8afb      	ldrh	r3, [r7, #22]
 800e62c:	4413      	add	r3, r2
 800e62e:	82bb      	strh	r3, [r7, #20]

				if((get_offset + send_size)>(TX_MASK + 1))
 800e630:	8afa      	ldrh	r2, [r7, #22]
 800e632:	893b      	ldrh	r3, [r7, #8]
 800e634:	441a      	add	r2, r3
 800e636:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e638:	3301      	adds	r3, #1
 800e63a:	429a      	cmp	r2, r3
 800e63c:	dd2c      	ble.n	800e698 <eth_wr_SOCKET_DATA+0x19c>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800e63e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e640:	8afb      	ldrh	r3, [r7, #22]
 800e642:	1ad3      	subs	r3, r2, r3
 800e644:	b29b      	uxth	r3, r3
 800e646:	3301      	adds	r3, #1
 800e648:	83bb      	strh	r3, [r7, #28]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, upper_size);
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	f103 021c 	add.w	r2, r3, #28
 800e650:	8c38      	ldrh	r0, [r7, #32]
 800e652:	8ab9      	ldrh	r1, [r7, #20]
 800e654:	8bbb      	ldrh	r3, [r7, #28]
 800e656:	9300      	str	r3, [sp, #0]
 800e658:	4603      	mov	r3, r0
 800e65a:	68f8      	ldr	r0, [r7, #12]
 800e65c:	f7ff fd20 	bl	800e0a0 <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800e660:	8b7a      	ldrh	r2, [r7, #26]
 800e662:	8bbb      	ldrh	r3, [r7, #28]
 800e664:	4413      	add	r3, r2
 800e666:	837b      	strh	r3, [r7, #26]
						left_size=send_size-upper_size;
 800e668:	893a      	ldrh	r2, [r7, #8]
 800e66a:	8bbb      	ldrh	r3, [r7, #28]
 800e66c:	1ad3      	subs	r3, r2, r3
 800e66e:	83fb      	strh	r3, [r7, #30]
						S0_bf_rcv_offset=upper_size;
 800e670:	8bbb      	ldrh	r3, [r7, #28]
 800e672:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S0_bf_rcv_offset, left_size);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f103 021c 	add.w	r2, r3, #28
 800e67a:	8c38      	ldrh	r0, [r7, #32]
 800e67c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800e67e:	8bfb      	ldrh	r3, [r7, #30]
 800e680:	9300      	str	r3, [sp, #0]
 800e682:	4603      	mov	r3, r0
 800e684:	68f8      	ldr	r0, [r7, #12]
 800e686:	f7ff fd0b 	bl	800e0a0 <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800e68a:	8b3a      	ldrh	r2, [r7, #24]
 800e68c:	893b      	ldrh	r3, [r7, #8]
 800e68e:	4413      	add	r3, r2
 800e690:	b29a      	uxth	r2, r3
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	801a      	strh	r2, [r3, #0]
 800e696:	e010      	b.n	800e6ba <eth_wr_SOCKET_DATA+0x1be>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S0_bf_rcv_offset, send_size);
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	f103 021c 	add.w	r2, r3, #28
 800e69e:	8c38      	ldrh	r0, [r7, #32]
 800e6a0:	8ab9      	ldrh	r1, [r7, #20]
 800e6a2:	893b      	ldrh	r3, [r7, #8]
 800e6a4:	9300      	str	r3, [sp, #0]
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	68f8      	ldr	r0, [r7, #12]
 800e6aa:	f7ff fcf9 	bl	800e0a0 <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800e6ae:	8b3a      	ldrh	r2, [r7, #24]
 800e6b0:	893b      	ldrh	r3, [r7, #8]
 800e6b2:	4413      	add	r3, r2
 800e6b4:	b29a      	uxth	r2, r3
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	801a      	strh	r2, [r3, #0]
					}

}
 800e6ba:	bf00      	nop
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3728      	adds	r7, #40	; 0x28
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int of, int tf)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b090      	sub	sp, #64	; 0x40
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	60f8      	str	r0, [r7, #12]
 800e6cc:	60b9      	str	r1, [r7, #8]
 800e6ce:	607a      	str	r2, [r7, #4]
 800e6d0:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	63bb      	str	r3, [r7, #56]	; 0x38
 800e6da:	2300      	movs	r3, #0
 800e6dc:	637b      	str	r3, [r7, #52]	; 0x34
 800e6de:	2300      	movs	r3, #0
 800e6e0:	633b      	str	r3, [r7, #48]	; 0x30
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	61fb      	str	r3, [r7, #28]
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	61bb      	str	r3, [r7, #24]
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	627b      	str	r3, [r7, #36]	; 0x24
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	617b      	str	r3, [r7, #20]
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	623b      	str	r3, [r7, #32]
 800e6fe:	2300      	movs	r3, #0
 800e700:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	61fb      	str	r3, [r7, #28]
	lngb=*bn;
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	61bb      	str	r3, [r7, #24]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800e70e:	69fa      	ldr	r2, [r7, #28]
 800e710:	69bb      	ldr	r3, [r7, #24]
 800e712:	429a      	cmp	r2, r3
 800e714:	f2c0 8315 	blt.w	800ed42 <FT_String_ND+0x67e>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800e718:	2300      	movs	r3, #0
 800e71a:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800e71c:	e00c      	b.n	800e738 <FT_String_ND+0x74>
							{
								n++;
 800e71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e720:	3301      	adds	r3, #1
 800e722:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800e724:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e726:	69bb      	ldr	r3, [r7, #24]
 800e728:	441a      	add	r2, r3
 800e72a:	69fb      	ldr	r3, [r7, #28]
 800e72c:	3301      	adds	r3, #1
 800e72e:	429a      	cmp	r2, r3
 800e730:	dd02      	ble.n	800e738 <FT_String_ND+0x74>
								{
									estado=0;
 800e732:	2300      	movs	r3, #0
 800e734:	623b      	str	r3, [r7, #32]
									break;
 800e736:	e009      	b.n	800e74c <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800e738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e73a:	68fa      	ldr	r2, [r7, #12]
 800e73c:	4413      	add	r3, r2
 800e73e:	781a      	ldrb	r2, [r3, #0]
 800e740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e742:	6879      	ldr	r1, [r7, #4]
 800e744:	440b      	add	r3, r1
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	429a      	cmp	r2, r3
 800e74a:	d1e8      	bne.n	800e71e <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800e74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e74e:	3301      	adds	r3, #1
 800e750:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800e752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e754:	3301      	adds	r3, #1
 800e756:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800e758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e75a:	69bb      	ldr	r3, [r7, #24]
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d108      	bne.n	800e772 <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800e760:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e762:	69bb      	ldr	r3, [r7, #24]
 800e764:	1ad3      	subs	r3, r2, r3
 800e766:	1c5a      	adds	r2, r3, #1
 800e768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e76a:	601a      	str	r2, [r3, #0]
									estado=1;
 800e76c:	2301      	movs	r3, #1
 800e76e:	623b      	str	r3, [r7, #32]
									break;
 800e770:	e010      	b.n	800e794 <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800e772:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e774:	69bb      	ldr	r3, [r7, #24]
 800e776:	429a      	cmp	r2, r3
 800e778:	dd02      	ble.n	800e780 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800e77a:	2300      	movs	r3, #0
 800e77c:	623b      	str	r3, [r7, #32]
									 break;
 800e77e:	e009      	b.n	800e794 <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800e780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e782:	68fa      	ldr	r2, [r7, #12]
 800e784:	4413      	add	r3, r2
 800e786:	781a      	ldrb	r2, [r3, #0]
 800e788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e78a:	6879      	ldr	r1, [r7, #4]
 800e78c:	440b      	add	r3, r1
 800e78e:	781b      	ldrb	r3, [r3, #0]
 800e790:	429a      	cmp	r2, r3
 800e792:	d0db      	beq.n	800e74c <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800e794:	69bb      	ldr	r3, [r7, #24]
 800e796:	1e5a      	subs	r2, r3, #1
 800e798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e79a:	4413      	add	r3, r2
 800e79c:	69fa      	ldr	r2, [r7, #28]
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	dd02      	ble.n	800e7a8 <FT_String_ND+0xe4>
 800e7a2:	6a3b      	ldr	r3, [r7, #32]
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d1b7      	bne.n	800e718 <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800e7a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d101      	bne.n	800e7b2 <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800e7ae:	6a3b      	ldr	r3, [r7, #32]
 800e7b0:	e2c8      	b.n	800ed44 <FT_String_ND+0x680>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800e7b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7b4:	2b01      	cmp	r3, #1
 800e7b6:	d12c      	bne.n	800e812 <FT_String_ND+0x14e>
 800e7b8:	6a3b      	ldr	r3, [r7, #32]
 800e7ba:	2b01      	cmp	r3, #1
 800e7bc:	d129      	bne.n	800e812 <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800e7be:	e014      	b.n	800e7ea <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800e7c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7c2:	681a      	ldr	r2, [r3, #0]
 800e7c4:	69bb      	ldr	r3, [r7, #24]
 800e7c6:	441a      	add	r2, r3
 800e7c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ca:	4413      	add	r3, r2
 800e7cc:	3b01      	subs	r3, #1
 800e7ce:	68fa      	ldr	r2, [r7, #12]
 800e7d0:	441a      	add	r2, r3
 800e7d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7d4:	6819      	ldr	r1, [r3, #0]
 800e7d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7d8:	440b      	add	r3, r1
 800e7da:	3b01      	subs	r3, #1
 800e7dc:	68f9      	ldr	r1, [r7, #12]
 800e7de:	440b      	add	r3, r1
 800e7e0:	7812      	ldrb	r2, [r2, #0]
 800e7e2:	701a      	strb	r2, [r3, #0]
										n3++;
 800e7e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7e6:	3301      	adds	r3, #1
 800e7e8:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800e7ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7ec:	681a      	ldr	r2, [r3, #0]
 800e7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f0:	441a      	add	r2, r3
 800e7f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7f4:	4413      	add	r3, r2
 800e7f6:	69fa      	ldr	r2, [r7, #28]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	dae1      	bge.n	800e7c0 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800e7fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7fe:	681a      	ldr	r2, [r3, #0]
 800e800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e802:	4413      	add	r3, r2
 800e804:	1e5a      	subs	r2, r3, #1
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	601a      	str	r2, [r3, #0]
							estado=3;
 800e80a:	2303      	movs	r3, #3
 800e80c:	623b      	str	r3, [r7, #32]
							return(estado);
 800e80e:	6a3b      	ldr	r3, [r7, #32]
 800e810:	e298      	b.n	800ed44 <FT_String_ND+0x680>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800e812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e814:	2b02      	cmp	r3, #2
 800e816:	f040 80be 	bne.w	800e996 <FT_String_ND+0x2d2>
 800e81a:	6a3b      	ldr	r3, [r7, #32]
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	f040 80ba 	bne.w	800e996 <FT_String_ND+0x2d2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e822:	e012      	b.n	800e84a <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e824:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e826:	69bb      	ldr	r3, [r7, #24]
 800e828:	1ad2      	subs	r2, r2, r3
 800e82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e82c:	4413      	add	r3, r2
 800e82e:	461a      	mov	r2, r3
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	441a      	add	r2, r3
 800e834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e836:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e838:	440b      	add	r3, r1
 800e83a:	7812      	ldrb	r2, [r2, #0]
 800e83c:	701a      	strb	r2, [r3, #0]
								n4++;
 800e83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e840:	3301      	adds	r3, #1
 800e842:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800e844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e848:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e84a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	1ad2      	subs	r2, r2, r3
 800e850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e852:	4413      	add	r3, r2
 800e854:	69fa      	ldr	r2, [r7, #28]
 800e856:	429a      	cmp	r2, r3
 800e858:	dae4      	bge.n	800e824 <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800e85a:	499d      	ldr	r1, [pc, #628]	; (800ead0 <FT_String_ND+0x40c>)
 800e85c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e85e:	f000 fd89 	bl	800f374 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800e862:	499c      	ldr	r1, [pc, #624]	; (800ead4 <FT_String_ND+0x410>)
 800e864:	2000      	movs	r0, #0
 800e866:	f000 fd85 	bl	800f374 <strtok>
 800e86a:	4603      	mov	r3, r0
 800e86c:	4618      	mov	r0, r3
 800e86e:	f000 fb66 	bl	800ef3e <atoi>
 800e872:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800e874:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e876:	3b01      	subs	r3, #1
 800e878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e87a:	429a      	cmp	r2, r3
 800e87c:	db02      	blt.n	800e884 <FT_String_ND+0x1c0>
							{
								lngd=of-1;
 800e87e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e880:	3b01      	subs	r3, #1
 800e882:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800e884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e886:	3306      	adds	r3, #6
 800e888:	222c      	movs	r2, #44	; 0x2c
 800e88a:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88e:	2b09      	cmp	r3, #9
 800e890:	dc0d      	bgt.n	800e8ae <FT_String_ND+0x1ea>
											{
												c[8]=':';
 800e892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e894:	3308      	adds	r3, #8
 800e896:	223a      	movs	r2, #58	; 0x3a
 800e898:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800e89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89c:	3309      	adds	r3, #9
 800e89e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8a0:	4413      	add	r3, r2
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800e8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a8:	3309      	adds	r3, #9
 800e8aa:	627b      	str	r3, [r7, #36]	; 0x24
 800e8ac:	e021      	b.n	800e8f2 <FT_String_ND+0x22e>
											}
											else{
														if (lngd< 100)
 800e8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b0:	2b63      	cmp	r3, #99	; 0x63
 800e8b2:	dc0d      	bgt.n	800e8d0 <FT_String_ND+0x20c>
														{
															c[9]=':';
 800e8b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8b6:	3309      	adds	r3, #9
 800e8b8:	223a      	movs	r2, #58	; 0x3a
 800e8ba:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800e8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8be:	330a      	adds	r3, #10
 800e8c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8c2:	4413      	add	r3, r2
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800e8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ca:	330a      	adds	r3, #10
 800e8cc:	627b      	str	r3, [r7, #36]	; 0x24
 800e8ce:	e010      	b.n	800e8f2 <FT_String_ND+0x22e>
														}
														else
														{
														if (lngd < 1000)
 800e8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e8d6:	da0c      	bge.n	800e8f2 <FT_String_ND+0x22e>
														{
															c[10]=':';
 800e8d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8da:	330a      	adds	r3, #10
 800e8dc:	223a      	movs	r2, #58	; 0x3a
 800e8de:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800e8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e2:	330b      	adds	r3, #11
 800e8e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8e6:	4413      	add	r3, r2
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800e8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ee:	330b      	adds	r3, #11
 800e8f0:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800e8f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8f6:	601a      	str	r2, [r3, #0]
							n4=0;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e8fc:	e016      	b.n	800e92c <FT_String_ND+0x268>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e8fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e900:	69bb      	ldr	r3, [r7, #24]
 800e902:	1ad2      	subs	r2, r2, r3
 800e904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e906:	441a      	add	r2, r3
 800e908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90a:	4413      	add	r3, r2
 800e90c:	461a      	mov	r2, r3
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	441a      	add	r2, r3
 800e912:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e914:	69bb      	ldr	r3, [r7, #24]
 800e916:	1ac9      	subs	r1, r1, r3
 800e918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e91a:	440b      	add	r3, r1
 800e91c:	4619      	mov	r1, r3
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	440b      	add	r3, r1
 800e922:	7812      	ldrb	r2, [r2, #0]
 800e924:	701a      	strb	r2, [r3, #0]
								n4++;
 800e926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e928:	3301      	adds	r3, #1
 800e92a:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e92c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e92e:	69bb      	ldr	r3, [r7, #24]
 800e930:	1ad2      	subs	r2, r2, r3
 800e932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e934:	441a      	add	r2, r3
 800e936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e938:	4413      	add	r3, r2
 800e93a:	69fa      	ldr	r2, [r7, #28]
 800e93c:	429a      	cmp	r2, r3
 800e93e:	dade      	bge.n	800e8fe <FT_String_ND+0x23a>
							}
							*an=n+n4-lngb-1;
 800e940:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e944:	441a      	add	r2, r3
 800e946:	69bb      	ldr	r3, [r7, #24]
 800e948:	1ad3      	subs	r3, r2, r3
 800e94a:	1e5a      	subs	r2, r3, #1
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800e950:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e952:	69bb      	ldr	r3, [r7, #24]
 800e954:	1ad2      	subs	r2, r2, r3
 800e956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e958:	441a      	add	r2, r3
 800e95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e95c:	4413      	add	r3, r2
 800e95e:	461a      	mov	r2, r3
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	4413      	add	r3, r2
 800e964:	2200      	movs	r2, #0
 800e966:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800e968:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e96a:	69bb      	ldr	r3, [r7, #24]
 800e96c:	1ad2      	subs	r2, r2, r3
 800e96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e970:	4413      	add	r3, r2
 800e972:	461a      	mov	r2, r3
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	4413      	add	r3, r2
 800e978:	2200      	movs	r2, #0
 800e97a:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800e97c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e97e:	69bb      	ldr	r3, [r7, #24]
 800e980:	1ad2      	subs	r2, r2, r3
 800e982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e986:	440b      	add	r3, r1
 800e988:	429a      	cmp	r2, r3
 800e98a:	d102      	bne.n	800e992 <FT_String_ND+0x2ce>
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2200      	movs	r2, #0
 800e990:	701a      	strb	r2, [r3, #0]
							estado=3;
 800e992:	2303      	movs	r3, #3
 800e994:	623b      	str	r3, [r7, #32]

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800e996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e998:	2b03      	cmp	r3, #3
 800e99a:	d146      	bne.n	800ea2a <FT_String_ND+0x366>
 800e99c:	6a3b      	ldr	r3, [r7, #32]
 800e99e:	2b01      	cmp	r3, #1
 800e9a0:	d143      	bne.n	800ea2a <FT_String_ND+0x366>
						{
						n3=0;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e9a6:	e00e      	b.n	800e9c6 <FT_String_ND+0x302>
									{
										c[n3]=a[*ubicacion+n3-1];
 800e9a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9aa:	681a      	ldr	r2, [r3, #0]
 800e9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9ae:	4413      	add	r3, r2
 800e9b0:	3b01      	subs	r3, #1
 800e9b2:	68fa      	ldr	r2, [r7, #12]
 800e9b4:	441a      	add	r2, r3
 800e9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e9ba:	440b      	add	r3, r1
 800e9bc:	7812      	ldrb	r2, [r2, #0]
 800e9be:	701a      	strb	r2, [r3, #0]
										n3++;
 800e9c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e9c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9c8:	69bb      	ldr	r3, [r7, #24]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	dbec      	blt.n	800e9a8 <FT_String_ND+0x2e4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e9d2:	e014      	b.n	800e9fe <FT_String_ND+0x33a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800e9d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9d6:	681a      	ldr	r2, [r3, #0]
 800e9d8:	69bb      	ldr	r3, [r7, #24]
 800e9da:	441a      	add	r2, r3
 800e9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9de:	4413      	add	r3, r2
 800e9e0:	3b01      	subs	r3, #1
 800e9e2:	68fa      	ldr	r2, [r7, #12]
 800e9e4:	441a      	add	r2, r3
 800e9e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9e8:	6819      	ldr	r1, [r3, #0]
 800e9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ec:	440b      	add	r3, r1
 800e9ee:	3b01      	subs	r3, #1
 800e9f0:	68f9      	ldr	r1, [r7, #12]
 800e9f2:	440b      	add	r3, r1
 800e9f4:	7812      	ldrb	r2, [r2, #0]
 800e9f6:	701a      	strb	r2, [r3, #0]
										n5++;
 800e9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e9fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	69bb      	ldr	r3, [r7, #24]
 800ea04:	441a      	add	r2, r3
 800ea06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea08:	441a      	add	r2, r3
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	dde0      	ble.n	800e9d4 <FT_String_ND+0x310>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800ea12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea14:	681a      	ldr	r2, [r3, #0]
 800ea16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea18:	4413      	add	r3, r2
 800ea1a:	1e5a      	subs	r2, r3, #1
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800ea20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea24:	601a      	str	r2, [r3, #0]
							estado=3;
 800ea26:	2303      	movs	r3, #3
 800ea28:	623b      	str	r3, [r7, #32]
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800ea2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea2c:	2b04      	cmp	r3, #4
 800ea2e:	f040 80bd 	bne.w	800ebac <FT_String_ND+0x4e8>
 800ea32:	6a3b      	ldr	r3, [r7, #32]
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	f040 80b9 	bne.w	800ebac <FT_String_ND+0x4e8>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ea3a:	e012      	b.n	800ea62 <FT_String_ND+0x39e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800ea3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea3e:	69bb      	ldr	r3, [r7, #24]
 800ea40:	1ad2      	subs	r2, r2, r3
 800ea42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea44:	4413      	add	r3, r2
 800ea46:	461a      	mov	r2, r3
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	441a      	add	r2, r3
 800ea4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea4e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ea50:	440b      	add	r3, r1
 800ea52:	7812      	ldrb	r2, [r2, #0]
 800ea54:	701a      	strb	r2, [r3, #0]
								n4++;
 800ea56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea58:	3301      	adds	r3, #1
 800ea5a:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XX:
 800ea5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea60:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ea62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea64:	69bb      	ldr	r3, [r7, #24]
 800ea66:	1ad2      	subs	r2, r2, r3
 800ea68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea6a:	4413      	add	r3, r2
 800ea6c:	69fa      	ldr	r2, [r7, #28]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	dae4      	bge.n	800ea3c <FT_String_ND+0x378>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800ea72:	4917      	ldr	r1, [pc, #92]	; (800ead0 <FT_String_ND+0x40c>)
 800ea74:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ea76:	f000 fc7d 	bl	800f374 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800ea7a:	4916      	ldr	r1, [pc, #88]	; (800ead4 <FT_String_ND+0x410>)
 800ea7c:	2000      	movs	r0, #0
 800ea7e:	f000 fc79 	bl	800f374 <strtok>
 800ea82:	4603      	mov	r3, r0
 800ea84:	4618      	mov	r0, r3
 800ea86:	f000 fa5a 	bl	800ef3e <atoi>
 800ea8a:	62b8      	str	r0, [r7, #40]	; 0x28

							if(lngd>=of-1)//if(lngd>=of-1)
 800ea8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea8e:	3b01      	subs	r3, #1
 800ea90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea92:	429a      	cmp	r2, r3
 800ea94:	db02      	blt.n	800ea9c <FT_String_ND+0x3d8>
							{
								lngd=of-1;
 800ea96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea98:	3b01      	subs	r3, #1
 800ea9a:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800ea9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea9e:	3306      	adds	r3, #6
 800eaa0:	222c      	movs	r2, #44	; 0x2c
 800eaa2:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800eaa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa6:	2b09      	cmp	r3, #9
 800eaa8:	dc07      	bgt.n	800eaba <FT_String_ND+0x3f6>
											{
												c[8]=':';
 800eaaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eaac:	3308      	adds	r3, #8
 800eaae:	223a      	movs	r2, #58	; 0x3a
 800eab0:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800eab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab4:	3309      	adds	r3, #9
 800eab6:	627b      	str	r3, [r7, #36]	; 0x24
 800eab8:	e019      	b.n	800eaee <FT_String_ND+0x42a>
											}
											else{
														if (lngd< 100)
 800eaba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eabc:	2b63      	cmp	r3, #99	; 0x63
 800eabe:	dc0b      	bgt.n	800ead8 <FT_String_ND+0x414>
														{
															c[9]=':';
 800eac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eac2:	3309      	adds	r3, #9
 800eac4:	223a      	movs	r2, #58	; 0x3a
 800eac6:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800eac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaca:	330a      	adds	r3, #10
 800eacc:	627b      	str	r3, [r7, #36]	; 0x24
 800eace:	e00e      	b.n	800eaee <FT_String_ND+0x42a>
 800ead0:	08010c34 	.word	0x08010c34
 800ead4:	08010c38 	.word	0x08010c38
														}
														else
														{
														if (lngd < 1000)
 800ead8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eade:	da06      	bge.n	800eaee <FT_String_ND+0x42a>
														{
															c[10]=':';
 800eae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eae2:	330a      	adds	r3, #10
 800eae4:	223a      	movs	r2, #58	; 0x3a
 800eae6:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800eae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaea:	330b      	adds	r3, #11
 800eaec:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800eaee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaf2:	601a      	str	r2, [r3, #0]
							n4=0;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800eaf8:	e016      	b.n	800eb28 <FT_String_ND+0x464>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800eafa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eafc:	69bb      	ldr	r3, [r7, #24]
 800eafe:	1ad2      	subs	r2, r2, r3
 800eb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb02:	441a      	add	r2, r3
 800eb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb06:	4413      	add	r3, r2
 800eb08:	461a      	mov	r2, r3
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	441a      	add	r2, r3
 800eb0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eb10:	69bb      	ldr	r3, [r7, #24]
 800eb12:	1ac9      	subs	r1, r1, r3
 800eb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb16:	440b      	add	r3, r1
 800eb18:	4619      	mov	r1, r3
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	440b      	add	r3, r1
 800eb1e:	7812      	ldrb	r2, [r2, #0]
 800eb20:	701a      	strb	r2, [r3, #0]
								n4++;
 800eb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb24:	3301      	adds	r3, #1
 800eb26:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800eb28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	1ad2      	subs	r2, r2, r3
 800eb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb30:	441a      	add	r2, r3
 800eb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb34:	4413      	add	r3, r2
 800eb36:	69fa      	ldr	r2, [r7, #28]
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	dade      	bge.n	800eafa <FT_String_ND+0x436>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800eb3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb40:	441a      	add	r2, r3
 800eb42:	69bb      	ldr	r3, [r7, #24]
 800eb44:	1ad3      	subs	r3, r2, r3
 800eb46:	1e5a      	subs	r2, r3, #1
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	601a      	str	r2, [r3, #0]
							n5=0;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800eb50:	e00f      	b.n	800eb72 <FT_String_ND+0x4ae>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800eb52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb56:	1ad2      	subs	r2, r2, r3
 800eb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb5a:	4413      	add	r3, r2
 800eb5c:	461a      	mov	r2, r3
 800eb5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb60:	441a      	add	r2, r3
 800eb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb64:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eb66:	440b      	add	r3, r1
 800eb68:	7812      	ldrb	r2, [r2, #0]
 800eb6a:	701a      	strb	r2, [r3, #0]
								n5++;
 800eb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb6e:	3301      	adds	r3, #1
 800eb70:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800eb72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb76:	1ad2      	subs	r2, r2, r3
 800eb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb7a:	441a      	add	r2, r3
 800eb7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	429a      	cmp	r2, r3
 800eb82:	dbe6      	blt.n	800eb52 <FT_String_ND+0x48e>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800eb84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb88:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800eb8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb8c:	681a      	ldr	r2, [r3, #0]
 800eb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb90:	441a      	add	r2, r3
 800eb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb94:	1ad2      	subs	r2, r2, r3
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	4413      	add	r3, r2
 800eb9c:	69fa      	ldr	r2, [r7, #28]
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d102      	bne.n	800eba8 <FT_String_ND+0x4e4>
							{
								estado=4;
 800eba2:	2304      	movs	r3, #4
 800eba4:	623b      	str	r3, [r7, #32]
 800eba6:	e001      	b.n	800ebac <FT_String_ND+0x4e8>

							}
							else
							{
								estado=5;
 800eba8:	2305      	movs	r3, #5
 800ebaa:	623b      	str	r3, [r7, #32]
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800ebac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ebae:	2b05      	cmp	r3, #5
 800ebb0:	f040 80c5 	bne.w	800ed3e <FT_String_ND+0x67a>
 800ebb4:	6a3b      	ldr	r3, [r7, #32]
 800ebb6:	2b01      	cmp	r3, #1
 800ebb8:	f040 80c1 	bne.w	800ed3e <FT_String_ND+0x67a>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ebbc:	e012      	b.n	800ebe4 <FT_String_ND+0x520>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800ebbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebc0:	69bb      	ldr	r3, [r7, #24]
 800ebc2:	1ad2      	subs	r2, r2, r3
 800ebc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc6:	4413      	add	r3, r2
 800ebc8:	461a      	mov	r2, r3
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	441a      	add	r2, r3
 800ebce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ebd2:	440b      	add	r3, r1
 800ebd4:	7812      	ldrb	r2, [r2, #0]
 800ebd6:	701a      	strb	r2, [r3, #0]
								n4++;
 800ebd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebda:	3301      	adds	r3, #1
 800ebdc:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800ebde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebe2:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ebe4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebe6:	69bb      	ldr	r3, [r7, #24]
 800ebe8:	1ad2      	subs	r2, r2, r3
 800ebea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebec:	4413      	add	r3, r2
 800ebee:	69fa      	ldr	r2, [r7, #28]
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	dae4      	bge.n	800ebbe <FT_String_ND+0x4fa>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800ebf4:	4955      	ldr	r1, [pc, #340]	; (800ed4c <FT_String_ND+0x688>)
 800ebf6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ebf8:	f000 fbbc 	bl	800f374 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800ebfc:	4954      	ldr	r1, [pc, #336]	; (800ed50 <FT_String_ND+0x68c>)
 800ebfe:	2000      	movs	r0, #0
 800ec00:	f000 fbb8 	bl	800f374 <strtok>
 800ec04:	4603      	mov	r3, r0
 800ec06:	4618      	mov	r0, r3
 800ec08:	f000 f999 	bl	800ef3e <atoi>
 800ec0c:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800ec0e:	4950      	ldr	r1, [pc, #320]	; (800ed50 <FT_String_ND+0x68c>)
 800ec10:	2000      	movs	r0, #0
 800ec12:	f000 fbaf 	bl	800f374 <strtok>
 800ec16:	4603      	mov	r3, r0
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f000 f990 	bl	800ef3e <atoi>
 800ec1e:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800ec20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec22:	3b01      	subs	r3, #1
 800ec24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec26:	429a      	cmp	r2, r3
 800ec28:	db02      	blt.n	800ec30 <FT_String_ND+0x56c>
							{
								lngd=of-1;
 800ec2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec2c:	3b01      	subs	r3, #1
 800ec2e:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800ec30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec32:	3306      	adds	r3, #6
 800ec34:	222c      	movs	r2, #44	; 0x2c
 800ec36:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ec38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec3a:	2b09      	cmp	r3, #9
 800ec3c:	dc07      	bgt.n	800ec4e <FT_String_ND+0x58a>
											{
												c[10]=':';
 800ec3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec40:	330a      	adds	r3, #10
 800ec42:	223a      	movs	r2, #58	; 0x3a
 800ec44:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800ec46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec48:	330b      	adds	r3, #11
 800ec4a:	627b      	str	r3, [r7, #36]	; 0x24
 800ec4c:	e015      	b.n	800ec7a <FT_String_ND+0x5b6>
											}
											else{
														if (lngd< 100)
 800ec4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec50:	2b63      	cmp	r3, #99	; 0x63
 800ec52:	dc07      	bgt.n	800ec64 <FT_String_ND+0x5a0>
														{
															c[11]=':';
 800ec54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec56:	330b      	adds	r3, #11
 800ec58:	223a      	movs	r2, #58	; 0x3a
 800ec5a:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800ec5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec5e:	330c      	adds	r3, #12
 800ec60:	627b      	str	r3, [r7, #36]	; 0x24
 800ec62:	e00a      	b.n	800ec7a <FT_String_ND+0x5b6>
														}
														else
														{
														if (lngd < 1000)
 800ec64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ec6a:	da06      	bge.n	800ec7a <FT_String_ND+0x5b6>
														{
															c[12]=':';
 800ec6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec6e:	330c      	adds	r3, #12
 800ec70:	223a      	movs	r2, #58	; 0x3a
 800ec72:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800ec74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec76:	330d      	adds	r3, #13
 800ec78:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800ec7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec7e:	601a      	str	r2, [r3, #0]
							n4=0;
 800ec80:	2300      	movs	r3, #0
 800ec82:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ec84:	e016      	b.n	800ecb4 <FT_String_ND+0x5f0>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ec86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec88:	69bb      	ldr	r3, [r7, #24]
 800ec8a:	1ad2      	subs	r2, r2, r3
 800ec8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8e:	441a      	add	r2, r3
 800ec90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec92:	4413      	add	r3, r2
 800ec94:	461a      	mov	r2, r3
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	441a      	add	r2, r3
 800ec9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ec9c:	69bb      	ldr	r3, [r7, #24]
 800ec9e:	1ac9      	subs	r1, r1, r3
 800eca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca2:	440b      	add	r3, r1
 800eca4:	4619      	mov	r1, r3
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	440b      	add	r3, r1
 800ecaa:	7812      	ldrb	r2, [r2, #0]
 800ecac:	701a      	strb	r2, [r3, #0]
								n4++;
 800ecae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb0:	3301      	adds	r3, #1
 800ecb2:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ecb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ecb6:	69bb      	ldr	r3, [r7, #24]
 800ecb8:	1ad2      	subs	r2, r2, r3
 800ecba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecbc:	441a      	add	r2, r3
 800ecbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc0:	4413      	add	r3, r2
 800ecc2:	69fa      	ldr	r2, [r7, #28]
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	dade      	bge.n	800ec86 <FT_String_ND+0x5c2>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800ecc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ecca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eccc:	441a      	add	r2, r3
 800ecce:	69bb      	ldr	r3, [r7, #24]
 800ecd0:	1ad3      	subs	r3, r2, r3
 800ecd2:	1e5a      	subs	r2, r3, #1
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	601a      	str	r2, [r3, #0]
							n5=0;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ecdc:	e00f      	b.n	800ecfe <FT_String_ND+0x63a>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800ecde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ece0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ece2:	1ad2      	subs	r2, r2, r3
 800ece4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece6:	4413      	add	r3, r2
 800ece8:	461a      	mov	r2, r3
 800ecea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecec:	441a      	add	r2, r3
 800ecee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ecf2:	440b      	add	r3, r1
 800ecf4:	7812      	ldrb	r2, [r2, #0]
 800ecf6:	701a      	strb	r2, [r3, #0]
								n5++;
 800ecf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ecfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed02:	1ad2      	subs	r2, r2, r3
 800ed04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed06:	441a      	add	r2, r3
 800ed08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	dbe6      	blt.n	800ecde <FT_String_ND+0x61a>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800ed10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed14:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800ed16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1c:	441a      	add	r2, r3
 800ed1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed20:	1ad2      	subs	r2, r2, r3
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	4413      	add	r3, r2
 800ed28:	69fa      	ldr	r2, [r7, #28]
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d105      	bne.n	800ed3a <FT_String_ND+0x676>
							{
								estado=4;
 800ed2e:	2304      	movs	r3, #4
 800ed30:	623b      	str	r3, [r7, #32]
								*idcom=cliente;
 800ed32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed34:	693a      	ldr	r2, [r7, #16]
 800ed36:	601a      	str	r2, [r3, #0]
 800ed38:	e001      	b.n	800ed3e <FT_String_ND+0x67a>
							}
							else
							{
								estado=5;
 800ed3a:	2305      	movs	r3, #5
 800ed3c:	623b      	str	r3, [r7, #32]
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800ed3e:	6a3b      	ldr	r3, [r7, #32]
 800ed40:	e000      	b.n	800ed44 <FT_String_ND+0x680>
					}
			}
			else
			{
				return(2);
 800ed42:	2302      	movs	r3, #2
			}
}
 800ed44:	4618      	mov	r0, r3
 800ed46:	3740      	adds	r7, #64	; 0x40
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}
 800ed4c:	08010c34 	.word	0x08010c34
 800ed50:	08010c38 	.word	0x08010c38

0800ed54 <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b088      	sub	sp, #32
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800ed5e:	2330      	movs	r3, #48	; 0x30
 800ed60:	60bb      	str	r3, [r7, #8]
 800ed62:	f107 030c 	add.w	r3, r7, #12
 800ed66:	2200      	movs	r2, #0
 800ed68:	601a      	str	r2, [r3, #0]
 800ed6a:	605a      	str	r2, [r3, #4]
 800ed6c:	609a      	str	r2, [r3, #8]
 800ed6e:	60da      	str	r2, [r3, #12]
int i=0;	
 800ed70:	2300      	movs	r3, #0
 800ed72:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800ed74:	f107 0308 	add.w	r3, r7, #8
 800ed78:	687a      	ldr	r2, [r7, #4]
 800ed7a:	490f      	ldr	r1, [pc, #60]	; (800edb8 <INTOA+0x64>)
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f000 fa7b 	bl	800f278 <siprintf>
		while(i<=strlen(origbuff))
 800ed82:	e00b      	b.n	800ed9c <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	1c5a      	adds	r2, r3, #1
 800ed88:	603a      	str	r2, [r7, #0]
 800ed8a:	f107 0108 	add.w	r1, r7, #8
 800ed8e:	69fa      	ldr	r2, [r7, #28]
 800ed90:	440a      	add	r2, r1
 800ed92:	7812      	ldrb	r2, [r2, #0]
 800ed94:	701a      	strb	r2, [r3, #0]
		i++;
 800ed96:	69fb      	ldr	r3, [r7, #28]
 800ed98:	3301      	adds	r3, #1
 800ed9a:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800ed9c:	f107 0308 	add.w	r3, r7, #8
 800eda0:	4618      	mov	r0, r3
 800eda2:	f7f1 fa27 	bl	80001f4 <strlen>
 800eda6:	4602      	mov	r2, r0
 800eda8:	69fb      	ldr	r3, [r7, #28]
 800edaa:	429a      	cmp	r2, r3
 800edac:	d2ea      	bcs.n	800ed84 <INTOA+0x30>
		}
		return(i);
 800edae:	69fb      	ldr	r3, [r7, #28]
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	3720      	adds	r7, #32
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bd80      	pop	{r7, pc}
 800edb8:	08010c3c 	.word	0x08010c3c

0800edbc <FTOA>:

int FTOA( int a,  unsigned char *v1, int comma)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b08c      	sub	sp, #48	; 0x30
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	60f8      	str	r0, [r7, #12]
 800edc4:	60b9      	str	r1, [r7, #8]
 800edc6:	607a      	str	r2, [r7, #4]
//char origbuff[20]="0";
char origbuff[20];
origbuff[0]='\0';
 800edc8:	2300      	movs	r3, #0
 800edca:	753b      	strb	r3, [r7, #20]

int i=0;
 800edcc:	2300      	movs	r3, #0
 800edce:	62fb      	str	r3, [r7, #44]	; 0x2c
int b=0;
 800edd0:	2300      	movs	r3, #0
 800edd2:	62bb      	str	r3, [r7, #40]	; 0x28

		sprintf(origbuff,"%i",a); 	//Paso el entreo a cadena de caracteres
 800edd4:	f107 0314 	add.w	r3, r7, #20
 800edd8:	68fa      	ldr	r2, [r7, #12]
 800edda:	4932      	ldr	r1, [pc, #200]	; (800eea4 <FTOA+0xe8>)
 800eddc:	4618      	mov	r0, r3
 800edde:	f000 fa4b 	bl	800f278 <siprintf>
		b=strlen(origbuff);
 800ede2:	f107 0314 	add.w	r3, r7, #20
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7f1 fa04 	bl	80001f4 <strlen>
 800edec:	4603      	mov	r3, r0
 800edee:	62bb      	str	r3, [r7, #40]	; 0x28
		if(comma<b)					//Si la posición de la coma es menor a la posición de los caracteres ejemplo int= 2 comma=0 resultado = 0,02
 800edf0:	687a      	ldr	r2, [r7, #4]
 800edf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf4:	429a      	cmp	r2, r3
 800edf6:	da25      	bge.n	800ee44 <FTOA+0x88>
		{
			while(i<=((b)+1))
 800edf8:	e01d      	b.n	800ee36 <FTOA+0x7a>
			{
				if((i==(b-comma))&&(comma<(b))&&(comma!=0))
 800edfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	1ad3      	subs	r3, r2, r3
 800ee00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d10b      	bne.n	800ee1e <FTOA+0x62>
 800ee06:	687a      	ldr	r2, [r7, #4]
 800ee08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	da07      	bge.n	800ee1e <FTOA+0x62>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d004      	beq.n	800ee1e <FTOA+0x62>
				{
					*v1++='.';
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	1c5a      	adds	r2, r3, #1
 800ee18:	60ba      	str	r2, [r7, #8]
 800ee1a:	222e      	movs	r2, #46	; 0x2e
 800ee1c:	701a      	strb	r2, [r3, #0]
				}
				*v1++=(unsigned char)origbuff[i];
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	1c5a      	adds	r2, r3, #1
 800ee22:	60ba      	str	r2, [r7, #8]
 800ee24:	f107 0114 	add.w	r1, r7, #20
 800ee28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee2a:	440a      	add	r2, r1
 800ee2c:	7812      	ldrb	r2, [r2, #0]
 800ee2e:	701a      	strb	r2, [r3, #0]
				i++;
 800ee30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee32:	3301      	adds	r3, #1
 800ee34:	62fb      	str	r3, [r7, #44]	; 0x2c
			while(i<=((b)+1))
 800ee36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee38:	3301      	adds	r3, #1
 800ee3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	dddc      	ble.n	800edfa <FTOA+0x3e>
			}
			//*v1++='\0';
			return(i);
 800ee40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee42:	e02a      	b.n	800ee9a <FTOA+0xde>
		  }
		else
		{
			if(b==1)
 800ee44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee46:	2b01      	cmp	r3, #1
 800ee48:	d10f      	bne.n	800ee6a <FTOA+0xae>
			{
				v1[0]='0';
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	2230      	movs	r2, #48	; 0x30
 800ee4e:	701a      	strb	r2, [r3, #0]
				v1[1]='.';
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	3301      	adds	r3, #1
 800ee54:	222e      	movs	r2, #46	; 0x2e
 800ee56:	701a      	strb	r2, [r3, #0]
				v1[2]=origbuff[0];
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	3302      	adds	r3, #2
 800ee5c:	7d3a      	ldrb	r2, [r7, #20]
 800ee5e:	701a      	strb	r2, [r3, #0]
				v1[3]='\0';
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	3303      	adds	r3, #3
 800ee64:	2200      	movs	r2, #0
 800ee66:	701a      	strb	r2, [r3, #0]
 800ee68:	e016      	b.n	800ee98 <FTOA+0xdc>
			}
			else
			{
				if(b==0)
 800ee6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d113      	bne.n	800ee98 <FTOA+0xdc>
				{
					*v1++='0';
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	1c5a      	adds	r2, r3, #1
 800ee74:	60ba      	str	r2, [r7, #8]
 800ee76:	2230      	movs	r2, #48	; 0x30
 800ee78:	701a      	strb	r2, [r3, #0]
					*v1++='.';
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	1c5a      	adds	r2, r3, #1
 800ee7e:	60ba      	str	r2, [r7, #8]
 800ee80:	222e      	movs	r2, #46	; 0x2e
 800ee82:	701a      	strb	r2, [r3, #0]
					*v1++='0';
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	1c5a      	adds	r2, r3, #1
 800ee88:	60ba      	str	r2, [r7, #8]
 800ee8a:	2230      	movs	r2, #48	; 0x30
 800ee8c:	701a      	strb	r2, [r3, #0]
					*v1++='\0';
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	1c5a      	adds	r2, r3, #1
 800ee92:	60ba      	str	r2, [r7, #8]
 800ee94:	2200      	movs	r2, #0
 800ee96:	701a      	strb	r2, [r3, #0]
				}
			}

		}

		return(0);
 800ee98:	2300      	movs	r3, #0
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3730      	adds	r7, #48	; 0x30
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	08010c3c 	.word	0x08010c3c

0800eea8 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b088      	sub	sp, #32
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	60f8      	str	r0, [r7, #12]
 800eeb0:	60b9      	str	r1, [r7, #8]
 800eeb2:	607a      	str	r2, [r7, #4]
 800eeb4:	603b      	str	r3, [r7, #0]
int x =0;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800eeba:	2300      	movs	r3, #0
 800eebc:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800eebe:	f107 0310 	add.w	r3, r7, #16
 800eec2:	617b      	str	r3, [r7, #20]
if (c==0) x=strlen(b);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d105      	bne.n	800eed6 <CopiaVector+0x2e>
 800eeca:	68b8      	ldr	r0, [r7, #8]
 800eecc:	f7f1 f992 	bl	80001f4 <strlen>
 800eed0:	4603      	mov	r3, r0
 800eed2:	61bb      	str	r3, [r7, #24]
 800eed4:	e02e      	b.n	800ef34 <CopiaVector+0x8c>
else
	{
		x=c;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800eeda:	69bb      	ldr	r3, [r7, #24]
 800eedc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eee0:	dd01      	ble.n	800eee6 <CopiaVector+0x3e>
			{
				return(1);
 800eee2:	2301      	movs	r3, #1
 800eee4:	e027      	b.n	800ef36 <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800eee6:	2300      	movs	r3, #0
 800eee8:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800eeea:	e00a      	b.n	800ef02 <CopiaVector+0x5a>
				{
					*a++=*b++;
 800eeec:	68ba      	ldr	r2, [r7, #8]
 800eeee:	1c53      	adds	r3, r2, #1
 800eef0:	60bb      	str	r3, [r7, #8]
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	1c59      	adds	r1, r3, #1
 800eef6:	60f9      	str	r1, [r7, #12]
 800eef8:	7812      	ldrb	r2, [r2, #0]
 800eefa:	701a      	strb	r2, [r3, #0]
					p++;
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	3301      	adds	r3, #1
 800ef00:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800ef02:	69fa      	ldr	r2, [r7, #28]
 800ef04:	69bb      	ldr	r3, [r7, #24]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	dbf0      	blt.n	800eeec <CopiaVector+0x44>
				}
				if (d==1)
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	d111      	bne.n	800ef34 <CopiaVector+0x8c>
				{
				  p=c;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800ef14:	e008      	b.n	800ef28 <CopiaVector+0x80>
				  {
					  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	1c5a      	adds	r2, r3, #1
 800ef1a:	60fa      	str	r2, [r7, #12]
 800ef1c:	697a      	ldr	r2, [r7, #20]
 800ef1e:	7812      	ldrb	r2, [r2, #0]
 800ef20:	701a      	strb	r2, [r3, #0]
					  p++;
 800ef22:	69fb      	ldr	r3, [r7, #28]
 800ef24:	3301      	adds	r3, #1
 800ef26:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800ef28:	687a      	ldr	r2, [r7, #4]
 800ef2a:	69fb      	ldr	r3, [r7, #28]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	daf2      	bge.n	800ef16 <CopiaVector+0x6e>
				  }
				return (0);
 800ef30:	2300      	movs	r3, #0
 800ef32:	e000      	b.n	800ef36 <CopiaVector+0x8e>
				}
			}
	}
return (1);
 800ef34:	2301      	movs	r3, #1
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3720      	adds	r7, #32
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}

0800ef3e <atoi>:
 800ef3e:	220a      	movs	r2, #10
 800ef40:	2100      	movs	r1, #0
 800ef42:	f000 b89d 	b.w	800f080 <strtol>

0800ef46 <__itoa>:
 800ef46:	1e93      	subs	r3, r2, #2
 800ef48:	2b22      	cmp	r3, #34	; 0x22
 800ef4a:	b510      	push	{r4, lr}
 800ef4c:	460c      	mov	r4, r1
 800ef4e:	d904      	bls.n	800ef5a <__itoa+0x14>
 800ef50:	2300      	movs	r3, #0
 800ef52:	700b      	strb	r3, [r1, #0]
 800ef54:	461c      	mov	r4, r3
 800ef56:	4620      	mov	r0, r4
 800ef58:	bd10      	pop	{r4, pc}
 800ef5a:	2a0a      	cmp	r2, #10
 800ef5c:	d109      	bne.n	800ef72 <__itoa+0x2c>
 800ef5e:	2800      	cmp	r0, #0
 800ef60:	da07      	bge.n	800ef72 <__itoa+0x2c>
 800ef62:	232d      	movs	r3, #45	; 0x2d
 800ef64:	700b      	strb	r3, [r1, #0]
 800ef66:	4240      	negs	r0, r0
 800ef68:	2101      	movs	r1, #1
 800ef6a:	4421      	add	r1, r4
 800ef6c:	f000 f892 	bl	800f094 <__utoa>
 800ef70:	e7f1      	b.n	800ef56 <__itoa+0x10>
 800ef72:	2100      	movs	r1, #0
 800ef74:	e7f9      	b.n	800ef6a <__itoa+0x24>

0800ef76 <itoa>:
 800ef76:	f7ff bfe6 	b.w	800ef46 <__itoa>
	...

0800ef7c <_strtol_l.constprop.0>:
 800ef7c:	2b01      	cmp	r3, #1
 800ef7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef82:	d001      	beq.n	800ef88 <_strtol_l.constprop.0+0xc>
 800ef84:	2b24      	cmp	r3, #36	; 0x24
 800ef86:	d906      	bls.n	800ef96 <_strtol_l.constprop.0+0x1a>
 800ef88:	f000 fa96 	bl	800f4b8 <__errno>
 800ef8c:	2316      	movs	r3, #22
 800ef8e:	6003      	str	r3, [r0, #0]
 800ef90:	2000      	movs	r0, #0
 800ef92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef96:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f07c <_strtol_l.constprop.0+0x100>
 800ef9a:	460d      	mov	r5, r1
 800ef9c:	462e      	mov	r6, r5
 800ef9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800efa2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800efa6:	f017 0708 	ands.w	r7, r7, #8
 800efaa:	d1f7      	bne.n	800ef9c <_strtol_l.constprop.0+0x20>
 800efac:	2c2d      	cmp	r4, #45	; 0x2d
 800efae:	d132      	bne.n	800f016 <_strtol_l.constprop.0+0x9a>
 800efb0:	782c      	ldrb	r4, [r5, #0]
 800efb2:	2701      	movs	r7, #1
 800efb4:	1cb5      	adds	r5, r6, #2
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d05b      	beq.n	800f072 <_strtol_l.constprop.0+0xf6>
 800efba:	2b10      	cmp	r3, #16
 800efbc:	d109      	bne.n	800efd2 <_strtol_l.constprop.0+0x56>
 800efbe:	2c30      	cmp	r4, #48	; 0x30
 800efc0:	d107      	bne.n	800efd2 <_strtol_l.constprop.0+0x56>
 800efc2:	782c      	ldrb	r4, [r5, #0]
 800efc4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800efc8:	2c58      	cmp	r4, #88	; 0x58
 800efca:	d14d      	bne.n	800f068 <_strtol_l.constprop.0+0xec>
 800efcc:	786c      	ldrb	r4, [r5, #1]
 800efce:	2310      	movs	r3, #16
 800efd0:	3502      	adds	r5, #2
 800efd2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800efd6:	f108 38ff 	add.w	r8, r8, #4294967295
 800efda:	f04f 0e00 	mov.w	lr, #0
 800efde:	fbb8 f9f3 	udiv	r9, r8, r3
 800efe2:	4676      	mov	r6, lr
 800efe4:	fb03 8a19 	mls	sl, r3, r9, r8
 800efe8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800efec:	f1bc 0f09 	cmp.w	ip, #9
 800eff0:	d816      	bhi.n	800f020 <_strtol_l.constprop.0+0xa4>
 800eff2:	4664      	mov	r4, ip
 800eff4:	42a3      	cmp	r3, r4
 800eff6:	dd24      	ble.n	800f042 <_strtol_l.constprop.0+0xc6>
 800eff8:	f1be 3fff 	cmp.w	lr, #4294967295
 800effc:	d008      	beq.n	800f010 <_strtol_l.constprop.0+0x94>
 800effe:	45b1      	cmp	r9, r6
 800f000:	d31c      	bcc.n	800f03c <_strtol_l.constprop.0+0xc0>
 800f002:	d101      	bne.n	800f008 <_strtol_l.constprop.0+0x8c>
 800f004:	45a2      	cmp	sl, r4
 800f006:	db19      	blt.n	800f03c <_strtol_l.constprop.0+0xc0>
 800f008:	fb06 4603 	mla	r6, r6, r3, r4
 800f00c:	f04f 0e01 	mov.w	lr, #1
 800f010:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f014:	e7e8      	b.n	800efe8 <_strtol_l.constprop.0+0x6c>
 800f016:	2c2b      	cmp	r4, #43	; 0x2b
 800f018:	bf04      	itt	eq
 800f01a:	782c      	ldrbeq	r4, [r5, #0]
 800f01c:	1cb5      	addeq	r5, r6, #2
 800f01e:	e7ca      	b.n	800efb6 <_strtol_l.constprop.0+0x3a>
 800f020:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f024:	f1bc 0f19 	cmp.w	ip, #25
 800f028:	d801      	bhi.n	800f02e <_strtol_l.constprop.0+0xb2>
 800f02a:	3c37      	subs	r4, #55	; 0x37
 800f02c:	e7e2      	b.n	800eff4 <_strtol_l.constprop.0+0x78>
 800f02e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f032:	f1bc 0f19 	cmp.w	ip, #25
 800f036:	d804      	bhi.n	800f042 <_strtol_l.constprop.0+0xc6>
 800f038:	3c57      	subs	r4, #87	; 0x57
 800f03a:	e7db      	b.n	800eff4 <_strtol_l.constprop.0+0x78>
 800f03c:	f04f 3eff 	mov.w	lr, #4294967295
 800f040:	e7e6      	b.n	800f010 <_strtol_l.constprop.0+0x94>
 800f042:	f1be 3fff 	cmp.w	lr, #4294967295
 800f046:	d105      	bne.n	800f054 <_strtol_l.constprop.0+0xd8>
 800f048:	2322      	movs	r3, #34	; 0x22
 800f04a:	6003      	str	r3, [r0, #0]
 800f04c:	4646      	mov	r6, r8
 800f04e:	b942      	cbnz	r2, 800f062 <_strtol_l.constprop.0+0xe6>
 800f050:	4630      	mov	r0, r6
 800f052:	e79e      	b.n	800ef92 <_strtol_l.constprop.0+0x16>
 800f054:	b107      	cbz	r7, 800f058 <_strtol_l.constprop.0+0xdc>
 800f056:	4276      	negs	r6, r6
 800f058:	2a00      	cmp	r2, #0
 800f05a:	d0f9      	beq.n	800f050 <_strtol_l.constprop.0+0xd4>
 800f05c:	f1be 0f00 	cmp.w	lr, #0
 800f060:	d000      	beq.n	800f064 <_strtol_l.constprop.0+0xe8>
 800f062:	1e69      	subs	r1, r5, #1
 800f064:	6011      	str	r1, [r2, #0]
 800f066:	e7f3      	b.n	800f050 <_strtol_l.constprop.0+0xd4>
 800f068:	2430      	movs	r4, #48	; 0x30
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d1b1      	bne.n	800efd2 <_strtol_l.constprop.0+0x56>
 800f06e:	2308      	movs	r3, #8
 800f070:	e7af      	b.n	800efd2 <_strtol_l.constprop.0+0x56>
 800f072:	2c30      	cmp	r4, #48	; 0x30
 800f074:	d0a5      	beq.n	800efc2 <_strtol_l.constprop.0+0x46>
 800f076:	230a      	movs	r3, #10
 800f078:	e7ab      	b.n	800efd2 <_strtol_l.constprop.0+0x56>
 800f07a:	bf00      	nop
 800f07c:	08010c7e 	.word	0x08010c7e

0800f080 <strtol>:
 800f080:	4613      	mov	r3, r2
 800f082:	460a      	mov	r2, r1
 800f084:	4601      	mov	r1, r0
 800f086:	4802      	ldr	r0, [pc, #8]	; (800f090 <strtol+0x10>)
 800f088:	6800      	ldr	r0, [r0, #0]
 800f08a:	f7ff bf77 	b.w	800ef7c <_strtol_l.constprop.0>
 800f08e:	bf00      	nop
 800f090:	20000194 	.word	0x20000194

0800f094 <__utoa>:
 800f094:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f096:	4c1f      	ldr	r4, [pc, #124]	; (800f114 <__utoa+0x80>)
 800f098:	b08b      	sub	sp, #44	; 0x2c
 800f09a:	4605      	mov	r5, r0
 800f09c:	460b      	mov	r3, r1
 800f09e:	466e      	mov	r6, sp
 800f0a0:	f104 0c20 	add.w	ip, r4, #32
 800f0a4:	6820      	ldr	r0, [r4, #0]
 800f0a6:	6861      	ldr	r1, [r4, #4]
 800f0a8:	4637      	mov	r7, r6
 800f0aa:	c703      	stmia	r7!, {r0, r1}
 800f0ac:	3408      	adds	r4, #8
 800f0ae:	4564      	cmp	r4, ip
 800f0b0:	463e      	mov	r6, r7
 800f0b2:	d1f7      	bne.n	800f0a4 <__utoa+0x10>
 800f0b4:	7921      	ldrb	r1, [r4, #4]
 800f0b6:	7139      	strb	r1, [r7, #4]
 800f0b8:	1e91      	subs	r1, r2, #2
 800f0ba:	6820      	ldr	r0, [r4, #0]
 800f0bc:	6038      	str	r0, [r7, #0]
 800f0be:	2922      	cmp	r1, #34	; 0x22
 800f0c0:	f04f 0100 	mov.w	r1, #0
 800f0c4:	d904      	bls.n	800f0d0 <__utoa+0x3c>
 800f0c6:	7019      	strb	r1, [r3, #0]
 800f0c8:	460b      	mov	r3, r1
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	b00b      	add	sp, #44	; 0x2c
 800f0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0d0:	1e58      	subs	r0, r3, #1
 800f0d2:	4684      	mov	ip, r0
 800f0d4:	fbb5 f7f2 	udiv	r7, r5, r2
 800f0d8:	fb02 5617 	mls	r6, r2, r7, r5
 800f0dc:	3628      	adds	r6, #40	; 0x28
 800f0de:	446e      	add	r6, sp
 800f0e0:	460c      	mov	r4, r1
 800f0e2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800f0e6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800f0ea:	462e      	mov	r6, r5
 800f0ec:	42b2      	cmp	r2, r6
 800f0ee:	f101 0101 	add.w	r1, r1, #1
 800f0f2:	463d      	mov	r5, r7
 800f0f4:	d9ee      	bls.n	800f0d4 <__utoa+0x40>
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	545a      	strb	r2, [r3, r1]
 800f0fa:	1919      	adds	r1, r3, r4
 800f0fc:	1aa5      	subs	r5, r4, r2
 800f0fe:	42aa      	cmp	r2, r5
 800f100:	dae3      	bge.n	800f0ca <__utoa+0x36>
 800f102:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800f106:	780e      	ldrb	r6, [r1, #0]
 800f108:	7006      	strb	r6, [r0, #0]
 800f10a:	3201      	adds	r2, #1
 800f10c:	f801 5901 	strb.w	r5, [r1], #-1
 800f110:	e7f4      	b.n	800f0fc <__utoa+0x68>
 800f112:	bf00      	nop
 800f114:	08010c58 	.word	0x08010c58

0800f118 <std>:
 800f118:	2300      	movs	r3, #0
 800f11a:	b510      	push	{r4, lr}
 800f11c:	4604      	mov	r4, r0
 800f11e:	e9c0 3300 	strd	r3, r3, [r0]
 800f122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f126:	6083      	str	r3, [r0, #8]
 800f128:	8181      	strh	r1, [r0, #12]
 800f12a:	6643      	str	r3, [r0, #100]	; 0x64
 800f12c:	81c2      	strh	r2, [r0, #14]
 800f12e:	6183      	str	r3, [r0, #24]
 800f130:	4619      	mov	r1, r3
 800f132:	2208      	movs	r2, #8
 800f134:	305c      	adds	r0, #92	; 0x5c
 800f136:	f000 f902 	bl	800f33e <memset>
 800f13a:	4b05      	ldr	r3, [pc, #20]	; (800f150 <std+0x38>)
 800f13c:	6263      	str	r3, [r4, #36]	; 0x24
 800f13e:	4b05      	ldr	r3, [pc, #20]	; (800f154 <std+0x3c>)
 800f140:	62a3      	str	r3, [r4, #40]	; 0x28
 800f142:	4b05      	ldr	r3, [pc, #20]	; (800f158 <std+0x40>)
 800f144:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f146:	4b05      	ldr	r3, [pc, #20]	; (800f15c <std+0x44>)
 800f148:	6224      	str	r4, [r4, #32]
 800f14a:	6323      	str	r3, [r4, #48]	; 0x30
 800f14c:	bd10      	pop	{r4, pc}
 800f14e:	bf00      	nop
 800f150:	0800f2b9 	.word	0x0800f2b9
 800f154:	0800f2db 	.word	0x0800f2db
 800f158:	0800f313 	.word	0x0800f313
 800f15c:	0800f337 	.word	0x0800f337

0800f160 <stdio_exit_handler>:
 800f160:	4a02      	ldr	r2, [pc, #8]	; (800f16c <stdio_exit_handler+0xc>)
 800f162:	4903      	ldr	r1, [pc, #12]	; (800f170 <stdio_exit_handler+0x10>)
 800f164:	4803      	ldr	r0, [pc, #12]	; (800f174 <stdio_exit_handler+0x14>)
 800f166:	f000 b869 	b.w	800f23c <_fwalk_sglue>
 800f16a:	bf00      	nop
 800f16c:	2000013c 	.word	0x2000013c
 800f170:	0800fe39 	.word	0x0800fe39
 800f174:	20000148 	.word	0x20000148

0800f178 <cleanup_stdio>:
 800f178:	6841      	ldr	r1, [r0, #4]
 800f17a:	4b0c      	ldr	r3, [pc, #48]	; (800f1ac <cleanup_stdio+0x34>)
 800f17c:	4299      	cmp	r1, r3
 800f17e:	b510      	push	{r4, lr}
 800f180:	4604      	mov	r4, r0
 800f182:	d001      	beq.n	800f188 <cleanup_stdio+0x10>
 800f184:	f000 fe58 	bl	800fe38 <_fflush_r>
 800f188:	68a1      	ldr	r1, [r4, #8]
 800f18a:	4b09      	ldr	r3, [pc, #36]	; (800f1b0 <cleanup_stdio+0x38>)
 800f18c:	4299      	cmp	r1, r3
 800f18e:	d002      	beq.n	800f196 <cleanup_stdio+0x1e>
 800f190:	4620      	mov	r0, r4
 800f192:	f000 fe51 	bl	800fe38 <_fflush_r>
 800f196:	68e1      	ldr	r1, [r4, #12]
 800f198:	4b06      	ldr	r3, [pc, #24]	; (800f1b4 <cleanup_stdio+0x3c>)
 800f19a:	4299      	cmp	r1, r3
 800f19c:	d004      	beq.n	800f1a8 <cleanup_stdio+0x30>
 800f19e:	4620      	mov	r0, r4
 800f1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1a4:	f000 be48 	b.w	800fe38 <_fflush_r>
 800f1a8:	bd10      	pop	{r4, pc}
 800f1aa:	bf00      	nop
 800f1ac:	200040c8 	.word	0x200040c8
 800f1b0:	20004130 	.word	0x20004130
 800f1b4:	20004198 	.word	0x20004198

0800f1b8 <global_stdio_init.part.0>:
 800f1b8:	b510      	push	{r4, lr}
 800f1ba:	4b0b      	ldr	r3, [pc, #44]	; (800f1e8 <global_stdio_init.part.0+0x30>)
 800f1bc:	4c0b      	ldr	r4, [pc, #44]	; (800f1ec <global_stdio_init.part.0+0x34>)
 800f1be:	4a0c      	ldr	r2, [pc, #48]	; (800f1f0 <global_stdio_init.part.0+0x38>)
 800f1c0:	601a      	str	r2, [r3, #0]
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	2104      	movs	r1, #4
 800f1c8:	f7ff ffa6 	bl	800f118 <std>
 800f1cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f1d0:	2201      	movs	r2, #1
 800f1d2:	2109      	movs	r1, #9
 800f1d4:	f7ff ffa0 	bl	800f118 <std>
 800f1d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f1dc:	2202      	movs	r2, #2
 800f1de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1e2:	2112      	movs	r1, #18
 800f1e4:	f7ff bf98 	b.w	800f118 <std>
 800f1e8:	20004200 	.word	0x20004200
 800f1ec:	200040c8 	.word	0x200040c8
 800f1f0:	0800f161 	.word	0x0800f161

0800f1f4 <__sfp_lock_acquire>:
 800f1f4:	4801      	ldr	r0, [pc, #4]	; (800f1fc <__sfp_lock_acquire+0x8>)
 800f1f6:	f000 b989 	b.w	800f50c <__retarget_lock_acquire_recursive>
 800f1fa:	bf00      	nop
 800f1fc:	20004209 	.word	0x20004209

0800f200 <__sfp_lock_release>:
 800f200:	4801      	ldr	r0, [pc, #4]	; (800f208 <__sfp_lock_release+0x8>)
 800f202:	f000 b984 	b.w	800f50e <__retarget_lock_release_recursive>
 800f206:	bf00      	nop
 800f208:	20004209 	.word	0x20004209

0800f20c <__sinit>:
 800f20c:	b510      	push	{r4, lr}
 800f20e:	4604      	mov	r4, r0
 800f210:	f7ff fff0 	bl	800f1f4 <__sfp_lock_acquire>
 800f214:	6a23      	ldr	r3, [r4, #32]
 800f216:	b11b      	cbz	r3, 800f220 <__sinit+0x14>
 800f218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f21c:	f7ff bff0 	b.w	800f200 <__sfp_lock_release>
 800f220:	4b04      	ldr	r3, [pc, #16]	; (800f234 <__sinit+0x28>)
 800f222:	6223      	str	r3, [r4, #32]
 800f224:	4b04      	ldr	r3, [pc, #16]	; (800f238 <__sinit+0x2c>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d1f5      	bne.n	800f218 <__sinit+0xc>
 800f22c:	f7ff ffc4 	bl	800f1b8 <global_stdio_init.part.0>
 800f230:	e7f2      	b.n	800f218 <__sinit+0xc>
 800f232:	bf00      	nop
 800f234:	0800f179 	.word	0x0800f179
 800f238:	20004200 	.word	0x20004200

0800f23c <_fwalk_sglue>:
 800f23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f240:	4607      	mov	r7, r0
 800f242:	4688      	mov	r8, r1
 800f244:	4614      	mov	r4, r2
 800f246:	2600      	movs	r6, #0
 800f248:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f24c:	f1b9 0901 	subs.w	r9, r9, #1
 800f250:	d505      	bpl.n	800f25e <_fwalk_sglue+0x22>
 800f252:	6824      	ldr	r4, [r4, #0]
 800f254:	2c00      	cmp	r4, #0
 800f256:	d1f7      	bne.n	800f248 <_fwalk_sglue+0xc>
 800f258:	4630      	mov	r0, r6
 800f25a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f25e:	89ab      	ldrh	r3, [r5, #12]
 800f260:	2b01      	cmp	r3, #1
 800f262:	d907      	bls.n	800f274 <_fwalk_sglue+0x38>
 800f264:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f268:	3301      	adds	r3, #1
 800f26a:	d003      	beq.n	800f274 <_fwalk_sglue+0x38>
 800f26c:	4629      	mov	r1, r5
 800f26e:	4638      	mov	r0, r7
 800f270:	47c0      	blx	r8
 800f272:	4306      	orrs	r6, r0
 800f274:	3568      	adds	r5, #104	; 0x68
 800f276:	e7e9      	b.n	800f24c <_fwalk_sglue+0x10>

0800f278 <siprintf>:
 800f278:	b40e      	push	{r1, r2, r3}
 800f27a:	b500      	push	{lr}
 800f27c:	b09c      	sub	sp, #112	; 0x70
 800f27e:	ab1d      	add	r3, sp, #116	; 0x74
 800f280:	9002      	str	r0, [sp, #8]
 800f282:	9006      	str	r0, [sp, #24]
 800f284:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f288:	4809      	ldr	r0, [pc, #36]	; (800f2b0 <siprintf+0x38>)
 800f28a:	9107      	str	r1, [sp, #28]
 800f28c:	9104      	str	r1, [sp, #16]
 800f28e:	4909      	ldr	r1, [pc, #36]	; (800f2b4 <siprintf+0x3c>)
 800f290:	f853 2b04 	ldr.w	r2, [r3], #4
 800f294:	9105      	str	r1, [sp, #20]
 800f296:	6800      	ldr	r0, [r0, #0]
 800f298:	9301      	str	r3, [sp, #4]
 800f29a:	a902      	add	r1, sp, #8
 800f29c:	f000 fab8 	bl	800f810 <_svfiprintf_r>
 800f2a0:	9b02      	ldr	r3, [sp, #8]
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	701a      	strb	r2, [r3, #0]
 800f2a6:	b01c      	add	sp, #112	; 0x70
 800f2a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2ac:	b003      	add	sp, #12
 800f2ae:	4770      	bx	lr
 800f2b0:	20000194 	.word	0x20000194
 800f2b4:	ffff0208 	.word	0xffff0208

0800f2b8 <__sread>:
 800f2b8:	b510      	push	{r4, lr}
 800f2ba:	460c      	mov	r4, r1
 800f2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2c0:	f000 f8d6 	bl	800f470 <_read_r>
 800f2c4:	2800      	cmp	r0, #0
 800f2c6:	bfab      	itete	ge
 800f2c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f2ca:	89a3      	ldrhlt	r3, [r4, #12]
 800f2cc:	181b      	addge	r3, r3, r0
 800f2ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f2d2:	bfac      	ite	ge
 800f2d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f2d6:	81a3      	strhlt	r3, [r4, #12]
 800f2d8:	bd10      	pop	{r4, pc}

0800f2da <__swrite>:
 800f2da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2de:	461f      	mov	r7, r3
 800f2e0:	898b      	ldrh	r3, [r1, #12]
 800f2e2:	05db      	lsls	r3, r3, #23
 800f2e4:	4605      	mov	r5, r0
 800f2e6:	460c      	mov	r4, r1
 800f2e8:	4616      	mov	r6, r2
 800f2ea:	d505      	bpl.n	800f2f8 <__swrite+0x1e>
 800f2ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2f0:	2302      	movs	r3, #2
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	f000 f8aa 	bl	800f44c <_lseek_r>
 800f2f8:	89a3      	ldrh	r3, [r4, #12]
 800f2fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f302:	81a3      	strh	r3, [r4, #12]
 800f304:	4632      	mov	r2, r6
 800f306:	463b      	mov	r3, r7
 800f308:	4628      	mov	r0, r5
 800f30a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f30e:	f000 b8c1 	b.w	800f494 <_write_r>

0800f312 <__sseek>:
 800f312:	b510      	push	{r4, lr}
 800f314:	460c      	mov	r4, r1
 800f316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f31a:	f000 f897 	bl	800f44c <_lseek_r>
 800f31e:	1c43      	adds	r3, r0, #1
 800f320:	89a3      	ldrh	r3, [r4, #12]
 800f322:	bf15      	itete	ne
 800f324:	6560      	strne	r0, [r4, #84]	; 0x54
 800f326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f32a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f32e:	81a3      	strheq	r3, [r4, #12]
 800f330:	bf18      	it	ne
 800f332:	81a3      	strhne	r3, [r4, #12]
 800f334:	bd10      	pop	{r4, pc}

0800f336 <__sclose>:
 800f336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f33a:	f000 b877 	b.w	800f42c <_close_r>

0800f33e <memset>:
 800f33e:	4402      	add	r2, r0
 800f340:	4603      	mov	r3, r0
 800f342:	4293      	cmp	r3, r2
 800f344:	d100      	bne.n	800f348 <memset+0xa>
 800f346:	4770      	bx	lr
 800f348:	f803 1b01 	strb.w	r1, [r3], #1
 800f34c:	e7f9      	b.n	800f342 <memset+0x4>

0800f34e <strncat>:
 800f34e:	b530      	push	{r4, r5, lr}
 800f350:	4604      	mov	r4, r0
 800f352:	7825      	ldrb	r5, [r4, #0]
 800f354:	4623      	mov	r3, r4
 800f356:	3401      	adds	r4, #1
 800f358:	2d00      	cmp	r5, #0
 800f35a:	d1fa      	bne.n	800f352 <strncat+0x4>
 800f35c:	3a01      	subs	r2, #1
 800f35e:	d304      	bcc.n	800f36a <strncat+0x1c>
 800f360:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f364:	f803 4b01 	strb.w	r4, [r3], #1
 800f368:	b904      	cbnz	r4, 800f36c <strncat+0x1e>
 800f36a:	bd30      	pop	{r4, r5, pc}
 800f36c:	2a00      	cmp	r2, #0
 800f36e:	d1f5      	bne.n	800f35c <strncat+0xe>
 800f370:	701a      	strb	r2, [r3, #0]
 800f372:	e7f3      	b.n	800f35c <strncat+0xe>

0800f374 <strtok>:
 800f374:	4b16      	ldr	r3, [pc, #88]	; (800f3d0 <strtok+0x5c>)
 800f376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f378:	681e      	ldr	r6, [r3, #0]
 800f37a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800f37c:	4605      	mov	r5, r0
 800f37e:	b9fc      	cbnz	r4, 800f3c0 <strtok+0x4c>
 800f380:	2050      	movs	r0, #80	; 0x50
 800f382:	9101      	str	r1, [sp, #4]
 800f384:	f000 f936 	bl	800f5f4 <malloc>
 800f388:	9901      	ldr	r1, [sp, #4]
 800f38a:	6470      	str	r0, [r6, #68]	; 0x44
 800f38c:	4602      	mov	r2, r0
 800f38e:	b920      	cbnz	r0, 800f39a <strtok+0x26>
 800f390:	4b10      	ldr	r3, [pc, #64]	; (800f3d4 <strtok+0x60>)
 800f392:	4811      	ldr	r0, [pc, #68]	; (800f3d8 <strtok+0x64>)
 800f394:	215b      	movs	r1, #91	; 0x5b
 800f396:	f000 f8c3 	bl	800f520 <__assert_func>
 800f39a:	e9c0 4400 	strd	r4, r4, [r0]
 800f39e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f3a2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f3a6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f3aa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f3ae:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f3b2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f3b6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f3ba:	6184      	str	r4, [r0, #24]
 800f3bc:	7704      	strb	r4, [r0, #28]
 800f3be:	6244      	str	r4, [r0, #36]	; 0x24
 800f3c0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	4628      	mov	r0, r5
 800f3c6:	b002      	add	sp, #8
 800f3c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3cc:	f000 b806 	b.w	800f3dc <__strtok_r>
 800f3d0:	20000194 	.word	0x20000194
 800f3d4:	08010d7e 	.word	0x08010d7e
 800f3d8:	08010d95 	.word	0x08010d95

0800f3dc <__strtok_r>:
 800f3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3de:	b908      	cbnz	r0, 800f3e4 <__strtok_r+0x8>
 800f3e0:	6810      	ldr	r0, [r2, #0]
 800f3e2:	b188      	cbz	r0, 800f408 <__strtok_r+0x2c>
 800f3e4:	4604      	mov	r4, r0
 800f3e6:	4620      	mov	r0, r4
 800f3e8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f3ec:	460f      	mov	r7, r1
 800f3ee:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f3f2:	b91e      	cbnz	r6, 800f3fc <__strtok_r+0x20>
 800f3f4:	b965      	cbnz	r5, 800f410 <__strtok_r+0x34>
 800f3f6:	6015      	str	r5, [r2, #0]
 800f3f8:	4628      	mov	r0, r5
 800f3fa:	e005      	b.n	800f408 <__strtok_r+0x2c>
 800f3fc:	42b5      	cmp	r5, r6
 800f3fe:	d1f6      	bne.n	800f3ee <__strtok_r+0x12>
 800f400:	2b00      	cmp	r3, #0
 800f402:	d1f0      	bne.n	800f3e6 <__strtok_r+0xa>
 800f404:	6014      	str	r4, [r2, #0]
 800f406:	7003      	strb	r3, [r0, #0]
 800f408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f40a:	461c      	mov	r4, r3
 800f40c:	e00c      	b.n	800f428 <__strtok_r+0x4c>
 800f40e:	b915      	cbnz	r5, 800f416 <__strtok_r+0x3a>
 800f410:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f414:	460e      	mov	r6, r1
 800f416:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f41a:	42ab      	cmp	r3, r5
 800f41c:	d1f7      	bne.n	800f40e <__strtok_r+0x32>
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d0f3      	beq.n	800f40a <__strtok_r+0x2e>
 800f422:	2300      	movs	r3, #0
 800f424:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f428:	6014      	str	r4, [r2, #0]
 800f42a:	e7ed      	b.n	800f408 <__strtok_r+0x2c>

0800f42c <_close_r>:
 800f42c:	b538      	push	{r3, r4, r5, lr}
 800f42e:	4d06      	ldr	r5, [pc, #24]	; (800f448 <_close_r+0x1c>)
 800f430:	2300      	movs	r3, #0
 800f432:	4604      	mov	r4, r0
 800f434:	4608      	mov	r0, r1
 800f436:	602b      	str	r3, [r5, #0]
 800f438:	f7f3 fb47 	bl	8002aca <_close>
 800f43c:	1c43      	adds	r3, r0, #1
 800f43e:	d102      	bne.n	800f446 <_close_r+0x1a>
 800f440:	682b      	ldr	r3, [r5, #0]
 800f442:	b103      	cbz	r3, 800f446 <_close_r+0x1a>
 800f444:	6023      	str	r3, [r4, #0]
 800f446:	bd38      	pop	{r3, r4, r5, pc}
 800f448:	20004204 	.word	0x20004204

0800f44c <_lseek_r>:
 800f44c:	b538      	push	{r3, r4, r5, lr}
 800f44e:	4d07      	ldr	r5, [pc, #28]	; (800f46c <_lseek_r+0x20>)
 800f450:	4604      	mov	r4, r0
 800f452:	4608      	mov	r0, r1
 800f454:	4611      	mov	r1, r2
 800f456:	2200      	movs	r2, #0
 800f458:	602a      	str	r2, [r5, #0]
 800f45a:	461a      	mov	r2, r3
 800f45c:	f7f3 fb5c 	bl	8002b18 <_lseek>
 800f460:	1c43      	adds	r3, r0, #1
 800f462:	d102      	bne.n	800f46a <_lseek_r+0x1e>
 800f464:	682b      	ldr	r3, [r5, #0]
 800f466:	b103      	cbz	r3, 800f46a <_lseek_r+0x1e>
 800f468:	6023      	str	r3, [r4, #0]
 800f46a:	bd38      	pop	{r3, r4, r5, pc}
 800f46c:	20004204 	.word	0x20004204

0800f470 <_read_r>:
 800f470:	b538      	push	{r3, r4, r5, lr}
 800f472:	4d07      	ldr	r5, [pc, #28]	; (800f490 <_read_r+0x20>)
 800f474:	4604      	mov	r4, r0
 800f476:	4608      	mov	r0, r1
 800f478:	4611      	mov	r1, r2
 800f47a:	2200      	movs	r2, #0
 800f47c:	602a      	str	r2, [r5, #0]
 800f47e:	461a      	mov	r2, r3
 800f480:	f7f3 faea 	bl	8002a58 <_read>
 800f484:	1c43      	adds	r3, r0, #1
 800f486:	d102      	bne.n	800f48e <_read_r+0x1e>
 800f488:	682b      	ldr	r3, [r5, #0]
 800f48a:	b103      	cbz	r3, 800f48e <_read_r+0x1e>
 800f48c:	6023      	str	r3, [r4, #0]
 800f48e:	bd38      	pop	{r3, r4, r5, pc}
 800f490:	20004204 	.word	0x20004204

0800f494 <_write_r>:
 800f494:	b538      	push	{r3, r4, r5, lr}
 800f496:	4d07      	ldr	r5, [pc, #28]	; (800f4b4 <_write_r+0x20>)
 800f498:	4604      	mov	r4, r0
 800f49a:	4608      	mov	r0, r1
 800f49c:	4611      	mov	r1, r2
 800f49e:	2200      	movs	r2, #0
 800f4a0:	602a      	str	r2, [r5, #0]
 800f4a2:	461a      	mov	r2, r3
 800f4a4:	f7f3 faf5 	bl	8002a92 <_write>
 800f4a8:	1c43      	adds	r3, r0, #1
 800f4aa:	d102      	bne.n	800f4b2 <_write_r+0x1e>
 800f4ac:	682b      	ldr	r3, [r5, #0]
 800f4ae:	b103      	cbz	r3, 800f4b2 <_write_r+0x1e>
 800f4b0:	6023      	str	r3, [r4, #0]
 800f4b2:	bd38      	pop	{r3, r4, r5, pc}
 800f4b4:	20004204 	.word	0x20004204

0800f4b8 <__errno>:
 800f4b8:	4b01      	ldr	r3, [pc, #4]	; (800f4c0 <__errno+0x8>)
 800f4ba:	6818      	ldr	r0, [r3, #0]
 800f4bc:	4770      	bx	lr
 800f4be:	bf00      	nop
 800f4c0:	20000194 	.word	0x20000194

0800f4c4 <__libc_init_array>:
 800f4c4:	b570      	push	{r4, r5, r6, lr}
 800f4c6:	4d0d      	ldr	r5, [pc, #52]	; (800f4fc <__libc_init_array+0x38>)
 800f4c8:	4c0d      	ldr	r4, [pc, #52]	; (800f500 <__libc_init_array+0x3c>)
 800f4ca:	1b64      	subs	r4, r4, r5
 800f4cc:	10a4      	asrs	r4, r4, #2
 800f4ce:	2600      	movs	r6, #0
 800f4d0:	42a6      	cmp	r6, r4
 800f4d2:	d109      	bne.n	800f4e8 <__libc_init_array+0x24>
 800f4d4:	4d0b      	ldr	r5, [pc, #44]	; (800f504 <__libc_init_array+0x40>)
 800f4d6:	4c0c      	ldr	r4, [pc, #48]	; (800f508 <__libc_init_array+0x44>)
 800f4d8:	f001 f800 	bl	80104dc <_init>
 800f4dc:	1b64      	subs	r4, r4, r5
 800f4de:	10a4      	asrs	r4, r4, #2
 800f4e0:	2600      	movs	r6, #0
 800f4e2:	42a6      	cmp	r6, r4
 800f4e4:	d105      	bne.n	800f4f2 <__libc_init_array+0x2e>
 800f4e6:	bd70      	pop	{r4, r5, r6, pc}
 800f4e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4ec:	4798      	blx	r3
 800f4ee:	3601      	adds	r6, #1
 800f4f0:	e7ee      	b.n	800f4d0 <__libc_init_array+0xc>
 800f4f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4f6:	4798      	blx	r3
 800f4f8:	3601      	adds	r6, #1
 800f4fa:	e7f2      	b.n	800f4e2 <__libc_init_array+0x1e>
 800f4fc:	08010e68 	.word	0x08010e68
 800f500:	08010e68 	.word	0x08010e68
 800f504:	08010e68 	.word	0x08010e68
 800f508:	08010e6c 	.word	0x08010e6c

0800f50c <__retarget_lock_acquire_recursive>:
 800f50c:	4770      	bx	lr

0800f50e <__retarget_lock_release_recursive>:
 800f50e:	4770      	bx	lr

0800f510 <strcpy>:
 800f510:	4603      	mov	r3, r0
 800f512:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f516:	f803 2b01 	strb.w	r2, [r3], #1
 800f51a:	2a00      	cmp	r2, #0
 800f51c:	d1f9      	bne.n	800f512 <strcpy+0x2>
 800f51e:	4770      	bx	lr

0800f520 <__assert_func>:
 800f520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f522:	4614      	mov	r4, r2
 800f524:	461a      	mov	r2, r3
 800f526:	4b09      	ldr	r3, [pc, #36]	; (800f54c <__assert_func+0x2c>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	4605      	mov	r5, r0
 800f52c:	68d8      	ldr	r0, [r3, #12]
 800f52e:	b14c      	cbz	r4, 800f544 <__assert_func+0x24>
 800f530:	4b07      	ldr	r3, [pc, #28]	; (800f550 <__assert_func+0x30>)
 800f532:	9100      	str	r1, [sp, #0]
 800f534:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f538:	4906      	ldr	r1, [pc, #24]	; (800f554 <__assert_func+0x34>)
 800f53a:	462b      	mov	r3, r5
 800f53c:	f000 fca4 	bl	800fe88 <fiprintf>
 800f540:	f000 fcec 	bl	800ff1c <abort>
 800f544:	4b04      	ldr	r3, [pc, #16]	; (800f558 <__assert_func+0x38>)
 800f546:	461c      	mov	r4, r3
 800f548:	e7f3      	b.n	800f532 <__assert_func+0x12>
 800f54a:	bf00      	nop
 800f54c:	20000194 	.word	0x20000194
 800f550:	08010def 	.word	0x08010def
 800f554:	08010dfc 	.word	0x08010dfc
 800f558:	08010e2a 	.word	0x08010e2a

0800f55c <_free_r>:
 800f55c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f55e:	2900      	cmp	r1, #0
 800f560:	d044      	beq.n	800f5ec <_free_r+0x90>
 800f562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f566:	9001      	str	r0, [sp, #4]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	f1a1 0404 	sub.w	r4, r1, #4
 800f56e:	bfb8      	it	lt
 800f570:	18e4      	addlt	r4, r4, r3
 800f572:	f000 f8e7 	bl	800f744 <__malloc_lock>
 800f576:	4a1e      	ldr	r2, [pc, #120]	; (800f5f0 <_free_r+0x94>)
 800f578:	9801      	ldr	r0, [sp, #4]
 800f57a:	6813      	ldr	r3, [r2, #0]
 800f57c:	b933      	cbnz	r3, 800f58c <_free_r+0x30>
 800f57e:	6063      	str	r3, [r4, #4]
 800f580:	6014      	str	r4, [r2, #0]
 800f582:	b003      	add	sp, #12
 800f584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f588:	f000 b8e2 	b.w	800f750 <__malloc_unlock>
 800f58c:	42a3      	cmp	r3, r4
 800f58e:	d908      	bls.n	800f5a2 <_free_r+0x46>
 800f590:	6825      	ldr	r5, [r4, #0]
 800f592:	1961      	adds	r1, r4, r5
 800f594:	428b      	cmp	r3, r1
 800f596:	bf01      	itttt	eq
 800f598:	6819      	ldreq	r1, [r3, #0]
 800f59a:	685b      	ldreq	r3, [r3, #4]
 800f59c:	1949      	addeq	r1, r1, r5
 800f59e:	6021      	streq	r1, [r4, #0]
 800f5a0:	e7ed      	b.n	800f57e <_free_r+0x22>
 800f5a2:	461a      	mov	r2, r3
 800f5a4:	685b      	ldr	r3, [r3, #4]
 800f5a6:	b10b      	cbz	r3, 800f5ac <_free_r+0x50>
 800f5a8:	42a3      	cmp	r3, r4
 800f5aa:	d9fa      	bls.n	800f5a2 <_free_r+0x46>
 800f5ac:	6811      	ldr	r1, [r2, #0]
 800f5ae:	1855      	adds	r5, r2, r1
 800f5b0:	42a5      	cmp	r5, r4
 800f5b2:	d10b      	bne.n	800f5cc <_free_r+0x70>
 800f5b4:	6824      	ldr	r4, [r4, #0]
 800f5b6:	4421      	add	r1, r4
 800f5b8:	1854      	adds	r4, r2, r1
 800f5ba:	42a3      	cmp	r3, r4
 800f5bc:	6011      	str	r1, [r2, #0]
 800f5be:	d1e0      	bne.n	800f582 <_free_r+0x26>
 800f5c0:	681c      	ldr	r4, [r3, #0]
 800f5c2:	685b      	ldr	r3, [r3, #4]
 800f5c4:	6053      	str	r3, [r2, #4]
 800f5c6:	440c      	add	r4, r1
 800f5c8:	6014      	str	r4, [r2, #0]
 800f5ca:	e7da      	b.n	800f582 <_free_r+0x26>
 800f5cc:	d902      	bls.n	800f5d4 <_free_r+0x78>
 800f5ce:	230c      	movs	r3, #12
 800f5d0:	6003      	str	r3, [r0, #0]
 800f5d2:	e7d6      	b.n	800f582 <_free_r+0x26>
 800f5d4:	6825      	ldr	r5, [r4, #0]
 800f5d6:	1961      	adds	r1, r4, r5
 800f5d8:	428b      	cmp	r3, r1
 800f5da:	bf04      	itt	eq
 800f5dc:	6819      	ldreq	r1, [r3, #0]
 800f5de:	685b      	ldreq	r3, [r3, #4]
 800f5e0:	6063      	str	r3, [r4, #4]
 800f5e2:	bf04      	itt	eq
 800f5e4:	1949      	addeq	r1, r1, r5
 800f5e6:	6021      	streq	r1, [r4, #0]
 800f5e8:	6054      	str	r4, [r2, #4]
 800f5ea:	e7ca      	b.n	800f582 <_free_r+0x26>
 800f5ec:	b003      	add	sp, #12
 800f5ee:	bd30      	pop	{r4, r5, pc}
 800f5f0:	2000420c 	.word	0x2000420c

0800f5f4 <malloc>:
 800f5f4:	4b02      	ldr	r3, [pc, #8]	; (800f600 <malloc+0xc>)
 800f5f6:	4601      	mov	r1, r0
 800f5f8:	6818      	ldr	r0, [r3, #0]
 800f5fa:	f000 b823 	b.w	800f644 <_malloc_r>
 800f5fe:	bf00      	nop
 800f600:	20000194 	.word	0x20000194

0800f604 <sbrk_aligned>:
 800f604:	b570      	push	{r4, r5, r6, lr}
 800f606:	4e0e      	ldr	r6, [pc, #56]	; (800f640 <sbrk_aligned+0x3c>)
 800f608:	460c      	mov	r4, r1
 800f60a:	6831      	ldr	r1, [r6, #0]
 800f60c:	4605      	mov	r5, r0
 800f60e:	b911      	cbnz	r1, 800f616 <sbrk_aligned+0x12>
 800f610:	f000 fc66 	bl	800fee0 <_sbrk_r>
 800f614:	6030      	str	r0, [r6, #0]
 800f616:	4621      	mov	r1, r4
 800f618:	4628      	mov	r0, r5
 800f61a:	f000 fc61 	bl	800fee0 <_sbrk_r>
 800f61e:	1c43      	adds	r3, r0, #1
 800f620:	d00a      	beq.n	800f638 <sbrk_aligned+0x34>
 800f622:	1cc4      	adds	r4, r0, #3
 800f624:	f024 0403 	bic.w	r4, r4, #3
 800f628:	42a0      	cmp	r0, r4
 800f62a:	d007      	beq.n	800f63c <sbrk_aligned+0x38>
 800f62c:	1a21      	subs	r1, r4, r0
 800f62e:	4628      	mov	r0, r5
 800f630:	f000 fc56 	bl	800fee0 <_sbrk_r>
 800f634:	3001      	adds	r0, #1
 800f636:	d101      	bne.n	800f63c <sbrk_aligned+0x38>
 800f638:	f04f 34ff 	mov.w	r4, #4294967295
 800f63c:	4620      	mov	r0, r4
 800f63e:	bd70      	pop	{r4, r5, r6, pc}
 800f640:	20004210 	.word	0x20004210

0800f644 <_malloc_r>:
 800f644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f648:	1ccd      	adds	r5, r1, #3
 800f64a:	f025 0503 	bic.w	r5, r5, #3
 800f64e:	3508      	adds	r5, #8
 800f650:	2d0c      	cmp	r5, #12
 800f652:	bf38      	it	cc
 800f654:	250c      	movcc	r5, #12
 800f656:	2d00      	cmp	r5, #0
 800f658:	4607      	mov	r7, r0
 800f65a:	db01      	blt.n	800f660 <_malloc_r+0x1c>
 800f65c:	42a9      	cmp	r1, r5
 800f65e:	d905      	bls.n	800f66c <_malloc_r+0x28>
 800f660:	230c      	movs	r3, #12
 800f662:	603b      	str	r3, [r7, #0]
 800f664:	2600      	movs	r6, #0
 800f666:	4630      	mov	r0, r6
 800f668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f66c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f740 <_malloc_r+0xfc>
 800f670:	f000 f868 	bl	800f744 <__malloc_lock>
 800f674:	f8d8 3000 	ldr.w	r3, [r8]
 800f678:	461c      	mov	r4, r3
 800f67a:	bb5c      	cbnz	r4, 800f6d4 <_malloc_r+0x90>
 800f67c:	4629      	mov	r1, r5
 800f67e:	4638      	mov	r0, r7
 800f680:	f7ff ffc0 	bl	800f604 <sbrk_aligned>
 800f684:	1c43      	adds	r3, r0, #1
 800f686:	4604      	mov	r4, r0
 800f688:	d155      	bne.n	800f736 <_malloc_r+0xf2>
 800f68a:	f8d8 4000 	ldr.w	r4, [r8]
 800f68e:	4626      	mov	r6, r4
 800f690:	2e00      	cmp	r6, #0
 800f692:	d145      	bne.n	800f720 <_malloc_r+0xdc>
 800f694:	2c00      	cmp	r4, #0
 800f696:	d048      	beq.n	800f72a <_malloc_r+0xe6>
 800f698:	6823      	ldr	r3, [r4, #0]
 800f69a:	4631      	mov	r1, r6
 800f69c:	4638      	mov	r0, r7
 800f69e:	eb04 0903 	add.w	r9, r4, r3
 800f6a2:	f000 fc1d 	bl	800fee0 <_sbrk_r>
 800f6a6:	4581      	cmp	r9, r0
 800f6a8:	d13f      	bne.n	800f72a <_malloc_r+0xe6>
 800f6aa:	6821      	ldr	r1, [r4, #0]
 800f6ac:	1a6d      	subs	r5, r5, r1
 800f6ae:	4629      	mov	r1, r5
 800f6b0:	4638      	mov	r0, r7
 800f6b2:	f7ff ffa7 	bl	800f604 <sbrk_aligned>
 800f6b6:	3001      	adds	r0, #1
 800f6b8:	d037      	beq.n	800f72a <_malloc_r+0xe6>
 800f6ba:	6823      	ldr	r3, [r4, #0]
 800f6bc:	442b      	add	r3, r5
 800f6be:	6023      	str	r3, [r4, #0]
 800f6c0:	f8d8 3000 	ldr.w	r3, [r8]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d038      	beq.n	800f73a <_malloc_r+0xf6>
 800f6c8:	685a      	ldr	r2, [r3, #4]
 800f6ca:	42a2      	cmp	r2, r4
 800f6cc:	d12b      	bne.n	800f726 <_malloc_r+0xe2>
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	605a      	str	r2, [r3, #4]
 800f6d2:	e00f      	b.n	800f6f4 <_malloc_r+0xb0>
 800f6d4:	6822      	ldr	r2, [r4, #0]
 800f6d6:	1b52      	subs	r2, r2, r5
 800f6d8:	d41f      	bmi.n	800f71a <_malloc_r+0xd6>
 800f6da:	2a0b      	cmp	r2, #11
 800f6dc:	d917      	bls.n	800f70e <_malloc_r+0xca>
 800f6de:	1961      	adds	r1, r4, r5
 800f6e0:	42a3      	cmp	r3, r4
 800f6e2:	6025      	str	r5, [r4, #0]
 800f6e4:	bf18      	it	ne
 800f6e6:	6059      	strne	r1, [r3, #4]
 800f6e8:	6863      	ldr	r3, [r4, #4]
 800f6ea:	bf08      	it	eq
 800f6ec:	f8c8 1000 	streq.w	r1, [r8]
 800f6f0:	5162      	str	r2, [r4, r5]
 800f6f2:	604b      	str	r3, [r1, #4]
 800f6f4:	4638      	mov	r0, r7
 800f6f6:	f104 060b 	add.w	r6, r4, #11
 800f6fa:	f000 f829 	bl	800f750 <__malloc_unlock>
 800f6fe:	f026 0607 	bic.w	r6, r6, #7
 800f702:	1d23      	adds	r3, r4, #4
 800f704:	1af2      	subs	r2, r6, r3
 800f706:	d0ae      	beq.n	800f666 <_malloc_r+0x22>
 800f708:	1b9b      	subs	r3, r3, r6
 800f70a:	50a3      	str	r3, [r4, r2]
 800f70c:	e7ab      	b.n	800f666 <_malloc_r+0x22>
 800f70e:	42a3      	cmp	r3, r4
 800f710:	6862      	ldr	r2, [r4, #4]
 800f712:	d1dd      	bne.n	800f6d0 <_malloc_r+0x8c>
 800f714:	f8c8 2000 	str.w	r2, [r8]
 800f718:	e7ec      	b.n	800f6f4 <_malloc_r+0xb0>
 800f71a:	4623      	mov	r3, r4
 800f71c:	6864      	ldr	r4, [r4, #4]
 800f71e:	e7ac      	b.n	800f67a <_malloc_r+0x36>
 800f720:	4634      	mov	r4, r6
 800f722:	6876      	ldr	r6, [r6, #4]
 800f724:	e7b4      	b.n	800f690 <_malloc_r+0x4c>
 800f726:	4613      	mov	r3, r2
 800f728:	e7cc      	b.n	800f6c4 <_malloc_r+0x80>
 800f72a:	230c      	movs	r3, #12
 800f72c:	603b      	str	r3, [r7, #0]
 800f72e:	4638      	mov	r0, r7
 800f730:	f000 f80e 	bl	800f750 <__malloc_unlock>
 800f734:	e797      	b.n	800f666 <_malloc_r+0x22>
 800f736:	6025      	str	r5, [r4, #0]
 800f738:	e7dc      	b.n	800f6f4 <_malloc_r+0xb0>
 800f73a:	605b      	str	r3, [r3, #4]
 800f73c:	deff      	udf	#255	; 0xff
 800f73e:	bf00      	nop
 800f740:	2000420c 	.word	0x2000420c

0800f744 <__malloc_lock>:
 800f744:	4801      	ldr	r0, [pc, #4]	; (800f74c <__malloc_lock+0x8>)
 800f746:	f7ff bee1 	b.w	800f50c <__retarget_lock_acquire_recursive>
 800f74a:	bf00      	nop
 800f74c:	20004208 	.word	0x20004208

0800f750 <__malloc_unlock>:
 800f750:	4801      	ldr	r0, [pc, #4]	; (800f758 <__malloc_unlock+0x8>)
 800f752:	f7ff bedc 	b.w	800f50e <__retarget_lock_release_recursive>
 800f756:	bf00      	nop
 800f758:	20004208 	.word	0x20004208

0800f75c <__ssputs_r>:
 800f75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f760:	688e      	ldr	r6, [r1, #8]
 800f762:	461f      	mov	r7, r3
 800f764:	42be      	cmp	r6, r7
 800f766:	680b      	ldr	r3, [r1, #0]
 800f768:	4682      	mov	sl, r0
 800f76a:	460c      	mov	r4, r1
 800f76c:	4690      	mov	r8, r2
 800f76e:	d82c      	bhi.n	800f7ca <__ssputs_r+0x6e>
 800f770:	898a      	ldrh	r2, [r1, #12]
 800f772:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f776:	d026      	beq.n	800f7c6 <__ssputs_r+0x6a>
 800f778:	6965      	ldr	r5, [r4, #20]
 800f77a:	6909      	ldr	r1, [r1, #16]
 800f77c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f780:	eba3 0901 	sub.w	r9, r3, r1
 800f784:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f788:	1c7b      	adds	r3, r7, #1
 800f78a:	444b      	add	r3, r9
 800f78c:	106d      	asrs	r5, r5, #1
 800f78e:	429d      	cmp	r5, r3
 800f790:	bf38      	it	cc
 800f792:	461d      	movcc	r5, r3
 800f794:	0553      	lsls	r3, r2, #21
 800f796:	d527      	bpl.n	800f7e8 <__ssputs_r+0x8c>
 800f798:	4629      	mov	r1, r5
 800f79a:	f7ff ff53 	bl	800f644 <_malloc_r>
 800f79e:	4606      	mov	r6, r0
 800f7a0:	b360      	cbz	r0, 800f7fc <__ssputs_r+0xa0>
 800f7a2:	6921      	ldr	r1, [r4, #16]
 800f7a4:	464a      	mov	r2, r9
 800f7a6:	f000 fbab 	bl	800ff00 <memcpy>
 800f7aa:	89a3      	ldrh	r3, [r4, #12]
 800f7ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f7b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7b4:	81a3      	strh	r3, [r4, #12]
 800f7b6:	6126      	str	r6, [r4, #16]
 800f7b8:	6165      	str	r5, [r4, #20]
 800f7ba:	444e      	add	r6, r9
 800f7bc:	eba5 0509 	sub.w	r5, r5, r9
 800f7c0:	6026      	str	r6, [r4, #0]
 800f7c2:	60a5      	str	r5, [r4, #8]
 800f7c4:	463e      	mov	r6, r7
 800f7c6:	42be      	cmp	r6, r7
 800f7c8:	d900      	bls.n	800f7cc <__ssputs_r+0x70>
 800f7ca:	463e      	mov	r6, r7
 800f7cc:	6820      	ldr	r0, [r4, #0]
 800f7ce:	4632      	mov	r2, r6
 800f7d0:	4641      	mov	r1, r8
 800f7d2:	f000 fb6b 	bl	800feac <memmove>
 800f7d6:	68a3      	ldr	r3, [r4, #8]
 800f7d8:	1b9b      	subs	r3, r3, r6
 800f7da:	60a3      	str	r3, [r4, #8]
 800f7dc:	6823      	ldr	r3, [r4, #0]
 800f7de:	4433      	add	r3, r6
 800f7e0:	6023      	str	r3, [r4, #0]
 800f7e2:	2000      	movs	r0, #0
 800f7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7e8:	462a      	mov	r2, r5
 800f7ea:	f000 fb9e 	bl	800ff2a <_realloc_r>
 800f7ee:	4606      	mov	r6, r0
 800f7f0:	2800      	cmp	r0, #0
 800f7f2:	d1e0      	bne.n	800f7b6 <__ssputs_r+0x5a>
 800f7f4:	6921      	ldr	r1, [r4, #16]
 800f7f6:	4650      	mov	r0, sl
 800f7f8:	f7ff feb0 	bl	800f55c <_free_r>
 800f7fc:	230c      	movs	r3, #12
 800f7fe:	f8ca 3000 	str.w	r3, [sl]
 800f802:	89a3      	ldrh	r3, [r4, #12]
 800f804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f808:	81a3      	strh	r3, [r4, #12]
 800f80a:	f04f 30ff 	mov.w	r0, #4294967295
 800f80e:	e7e9      	b.n	800f7e4 <__ssputs_r+0x88>

0800f810 <_svfiprintf_r>:
 800f810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f814:	4698      	mov	r8, r3
 800f816:	898b      	ldrh	r3, [r1, #12]
 800f818:	061b      	lsls	r3, r3, #24
 800f81a:	b09d      	sub	sp, #116	; 0x74
 800f81c:	4607      	mov	r7, r0
 800f81e:	460d      	mov	r5, r1
 800f820:	4614      	mov	r4, r2
 800f822:	d50e      	bpl.n	800f842 <_svfiprintf_r+0x32>
 800f824:	690b      	ldr	r3, [r1, #16]
 800f826:	b963      	cbnz	r3, 800f842 <_svfiprintf_r+0x32>
 800f828:	2140      	movs	r1, #64	; 0x40
 800f82a:	f7ff ff0b 	bl	800f644 <_malloc_r>
 800f82e:	6028      	str	r0, [r5, #0]
 800f830:	6128      	str	r0, [r5, #16]
 800f832:	b920      	cbnz	r0, 800f83e <_svfiprintf_r+0x2e>
 800f834:	230c      	movs	r3, #12
 800f836:	603b      	str	r3, [r7, #0]
 800f838:	f04f 30ff 	mov.w	r0, #4294967295
 800f83c:	e0d0      	b.n	800f9e0 <_svfiprintf_r+0x1d0>
 800f83e:	2340      	movs	r3, #64	; 0x40
 800f840:	616b      	str	r3, [r5, #20]
 800f842:	2300      	movs	r3, #0
 800f844:	9309      	str	r3, [sp, #36]	; 0x24
 800f846:	2320      	movs	r3, #32
 800f848:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f84c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f850:	2330      	movs	r3, #48	; 0x30
 800f852:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f9f8 <_svfiprintf_r+0x1e8>
 800f856:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f85a:	f04f 0901 	mov.w	r9, #1
 800f85e:	4623      	mov	r3, r4
 800f860:	469a      	mov	sl, r3
 800f862:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f866:	b10a      	cbz	r2, 800f86c <_svfiprintf_r+0x5c>
 800f868:	2a25      	cmp	r2, #37	; 0x25
 800f86a:	d1f9      	bne.n	800f860 <_svfiprintf_r+0x50>
 800f86c:	ebba 0b04 	subs.w	fp, sl, r4
 800f870:	d00b      	beq.n	800f88a <_svfiprintf_r+0x7a>
 800f872:	465b      	mov	r3, fp
 800f874:	4622      	mov	r2, r4
 800f876:	4629      	mov	r1, r5
 800f878:	4638      	mov	r0, r7
 800f87a:	f7ff ff6f 	bl	800f75c <__ssputs_r>
 800f87e:	3001      	adds	r0, #1
 800f880:	f000 80a9 	beq.w	800f9d6 <_svfiprintf_r+0x1c6>
 800f884:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f886:	445a      	add	r2, fp
 800f888:	9209      	str	r2, [sp, #36]	; 0x24
 800f88a:	f89a 3000 	ldrb.w	r3, [sl]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	f000 80a1 	beq.w	800f9d6 <_svfiprintf_r+0x1c6>
 800f894:	2300      	movs	r3, #0
 800f896:	f04f 32ff 	mov.w	r2, #4294967295
 800f89a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f89e:	f10a 0a01 	add.w	sl, sl, #1
 800f8a2:	9304      	str	r3, [sp, #16]
 800f8a4:	9307      	str	r3, [sp, #28]
 800f8a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f8aa:	931a      	str	r3, [sp, #104]	; 0x68
 800f8ac:	4654      	mov	r4, sl
 800f8ae:	2205      	movs	r2, #5
 800f8b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8b4:	4850      	ldr	r0, [pc, #320]	; (800f9f8 <_svfiprintf_r+0x1e8>)
 800f8b6:	f7f0 fcab 	bl	8000210 <memchr>
 800f8ba:	9a04      	ldr	r2, [sp, #16]
 800f8bc:	b9d8      	cbnz	r0, 800f8f6 <_svfiprintf_r+0xe6>
 800f8be:	06d0      	lsls	r0, r2, #27
 800f8c0:	bf44      	itt	mi
 800f8c2:	2320      	movmi	r3, #32
 800f8c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8c8:	0711      	lsls	r1, r2, #28
 800f8ca:	bf44      	itt	mi
 800f8cc:	232b      	movmi	r3, #43	; 0x2b
 800f8ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8d2:	f89a 3000 	ldrb.w	r3, [sl]
 800f8d6:	2b2a      	cmp	r3, #42	; 0x2a
 800f8d8:	d015      	beq.n	800f906 <_svfiprintf_r+0xf6>
 800f8da:	9a07      	ldr	r2, [sp, #28]
 800f8dc:	4654      	mov	r4, sl
 800f8de:	2000      	movs	r0, #0
 800f8e0:	f04f 0c0a 	mov.w	ip, #10
 800f8e4:	4621      	mov	r1, r4
 800f8e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8ea:	3b30      	subs	r3, #48	; 0x30
 800f8ec:	2b09      	cmp	r3, #9
 800f8ee:	d94d      	bls.n	800f98c <_svfiprintf_r+0x17c>
 800f8f0:	b1b0      	cbz	r0, 800f920 <_svfiprintf_r+0x110>
 800f8f2:	9207      	str	r2, [sp, #28]
 800f8f4:	e014      	b.n	800f920 <_svfiprintf_r+0x110>
 800f8f6:	eba0 0308 	sub.w	r3, r0, r8
 800f8fa:	fa09 f303 	lsl.w	r3, r9, r3
 800f8fe:	4313      	orrs	r3, r2
 800f900:	9304      	str	r3, [sp, #16]
 800f902:	46a2      	mov	sl, r4
 800f904:	e7d2      	b.n	800f8ac <_svfiprintf_r+0x9c>
 800f906:	9b03      	ldr	r3, [sp, #12]
 800f908:	1d19      	adds	r1, r3, #4
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	9103      	str	r1, [sp, #12]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	bfbb      	ittet	lt
 800f912:	425b      	neglt	r3, r3
 800f914:	f042 0202 	orrlt.w	r2, r2, #2
 800f918:	9307      	strge	r3, [sp, #28]
 800f91a:	9307      	strlt	r3, [sp, #28]
 800f91c:	bfb8      	it	lt
 800f91e:	9204      	strlt	r2, [sp, #16]
 800f920:	7823      	ldrb	r3, [r4, #0]
 800f922:	2b2e      	cmp	r3, #46	; 0x2e
 800f924:	d10c      	bne.n	800f940 <_svfiprintf_r+0x130>
 800f926:	7863      	ldrb	r3, [r4, #1]
 800f928:	2b2a      	cmp	r3, #42	; 0x2a
 800f92a:	d134      	bne.n	800f996 <_svfiprintf_r+0x186>
 800f92c:	9b03      	ldr	r3, [sp, #12]
 800f92e:	1d1a      	adds	r2, r3, #4
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	9203      	str	r2, [sp, #12]
 800f934:	2b00      	cmp	r3, #0
 800f936:	bfb8      	it	lt
 800f938:	f04f 33ff 	movlt.w	r3, #4294967295
 800f93c:	3402      	adds	r4, #2
 800f93e:	9305      	str	r3, [sp, #20]
 800f940:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fa08 <_svfiprintf_r+0x1f8>
 800f944:	7821      	ldrb	r1, [r4, #0]
 800f946:	2203      	movs	r2, #3
 800f948:	4650      	mov	r0, sl
 800f94a:	f7f0 fc61 	bl	8000210 <memchr>
 800f94e:	b138      	cbz	r0, 800f960 <_svfiprintf_r+0x150>
 800f950:	9b04      	ldr	r3, [sp, #16]
 800f952:	eba0 000a 	sub.w	r0, r0, sl
 800f956:	2240      	movs	r2, #64	; 0x40
 800f958:	4082      	lsls	r2, r0
 800f95a:	4313      	orrs	r3, r2
 800f95c:	3401      	adds	r4, #1
 800f95e:	9304      	str	r3, [sp, #16]
 800f960:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f964:	4825      	ldr	r0, [pc, #148]	; (800f9fc <_svfiprintf_r+0x1ec>)
 800f966:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f96a:	2206      	movs	r2, #6
 800f96c:	f7f0 fc50 	bl	8000210 <memchr>
 800f970:	2800      	cmp	r0, #0
 800f972:	d038      	beq.n	800f9e6 <_svfiprintf_r+0x1d6>
 800f974:	4b22      	ldr	r3, [pc, #136]	; (800fa00 <_svfiprintf_r+0x1f0>)
 800f976:	bb1b      	cbnz	r3, 800f9c0 <_svfiprintf_r+0x1b0>
 800f978:	9b03      	ldr	r3, [sp, #12]
 800f97a:	3307      	adds	r3, #7
 800f97c:	f023 0307 	bic.w	r3, r3, #7
 800f980:	3308      	adds	r3, #8
 800f982:	9303      	str	r3, [sp, #12]
 800f984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f986:	4433      	add	r3, r6
 800f988:	9309      	str	r3, [sp, #36]	; 0x24
 800f98a:	e768      	b.n	800f85e <_svfiprintf_r+0x4e>
 800f98c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f990:	460c      	mov	r4, r1
 800f992:	2001      	movs	r0, #1
 800f994:	e7a6      	b.n	800f8e4 <_svfiprintf_r+0xd4>
 800f996:	2300      	movs	r3, #0
 800f998:	3401      	adds	r4, #1
 800f99a:	9305      	str	r3, [sp, #20]
 800f99c:	4619      	mov	r1, r3
 800f99e:	f04f 0c0a 	mov.w	ip, #10
 800f9a2:	4620      	mov	r0, r4
 800f9a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9a8:	3a30      	subs	r2, #48	; 0x30
 800f9aa:	2a09      	cmp	r2, #9
 800f9ac:	d903      	bls.n	800f9b6 <_svfiprintf_r+0x1a6>
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d0c6      	beq.n	800f940 <_svfiprintf_r+0x130>
 800f9b2:	9105      	str	r1, [sp, #20]
 800f9b4:	e7c4      	b.n	800f940 <_svfiprintf_r+0x130>
 800f9b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9ba:	4604      	mov	r4, r0
 800f9bc:	2301      	movs	r3, #1
 800f9be:	e7f0      	b.n	800f9a2 <_svfiprintf_r+0x192>
 800f9c0:	ab03      	add	r3, sp, #12
 800f9c2:	9300      	str	r3, [sp, #0]
 800f9c4:	462a      	mov	r2, r5
 800f9c6:	4b0f      	ldr	r3, [pc, #60]	; (800fa04 <_svfiprintf_r+0x1f4>)
 800f9c8:	a904      	add	r1, sp, #16
 800f9ca:	4638      	mov	r0, r7
 800f9cc:	f3af 8000 	nop.w
 800f9d0:	1c42      	adds	r2, r0, #1
 800f9d2:	4606      	mov	r6, r0
 800f9d4:	d1d6      	bne.n	800f984 <_svfiprintf_r+0x174>
 800f9d6:	89ab      	ldrh	r3, [r5, #12]
 800f9d8:	065b      	lsls	r3, r3, #25
 800f9da:	f53f af2d 	bmi.w	800f838 <_svfiprintf_r+0x28>
 800f9de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9e0:	b01d      	add	sp, #116	; 0x74
 800f9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9e6:	ab03      	add	r3, sp, #12
 800f9e8:	9300      	str	r3, [sp, #0]
 800f9ea:	462a      	mov	r2, r5
 800f9ec:	4b05      	ldr	r3, [pc, #20]	; (800fa04 <_svfiprintf_r+0x1f4>)
 800f9ee:	a904      	add	r1, sp, #16
 800f9f0:	4638      	mov	r0, r7
 800f9f2:	f000 f879 	bl	800fae8 <_printf_i>
 800f9f6:	e7eb      	b.n	800f9d0 <_svfiprintf_r+0x1c0>
 800f9f8:	08010e2b 	.word	0x08010e2b
 800f9fc:	08010e35 	.word	0x08010e35
 800fa00:	00000000 	.word	0x00000000
 800fa04:	0800f75d 	.word	0x0800f75d
 800fa08:	08010e31 	.word	0x08010e31

0800fa0c <_printf_common>:
 800fa0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa10:	4616      	mov	r6, r2
 800fa12:	4699      	mov	r9, r3
 800fa14:	688a      	ldr	r2, [r1, #8]
 800fa16:	690b      	ldr	r3, [r1, #16]
 800fa18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	bfb8      	it	lt
 800fa20:	4613      	movlt	r3, r2
 800fa22:	6033      	str	r3, [r6, #0]
 800fa24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fa28:	4607      	mov	r7, r0
 800fa2a:	460c      	mov	r4, r1
 800fa2c:	b10a      	cbz	r2, 800fa32 <_printf_common+0x26>
 800fa2e:	3301      	adds	r3, #1
 800fa30:	6033      	str	r3, [r6, #0]
 800fa32:	6823      	ldr	r3, [r4, #0]
 800fa34:	0699      	lsls	r1, r3, #26
 800fa36:	bf42      	ittt	mi
 800fa38:	6833      	ldrmi	r3, [r6, #0]
 800fa3a:	3302      	addmi	r3, #2
 800fa3c:	6033      	strmi	r3, [r6, #0]
 800fa3e:	6825      	ldr	r5, [r4, #0]
 800fa40:	f015 0506 	ands.w	r5, r5, #6
 800fa44:	d106      	bne.n	800fa54 <_printf_common+0x48>
 800fa46:	f104 0a19 	add.w	sl, r4, #25
 800fa4a:	68e3      	ldr	r3, [r4, #12]
 800fa4c:	6832      	ldr	r2, [r6, #0]
 800fa4e:	1a9b      	subs	r3, r3, r2
 800fa50:	42ab      	cmp	r3, r5
 800fa52:	dc26      	bgt.n	800faa2 <_printf_common+0x96>
 800fa54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fa58:	1e13      	subs	r3, r2, #0
 800fa5a:	6822      	ldr	r2, [r4, #0]
 800fa5c:	bf18      	it	ne
 800fa5e:	2301      	movne	r3, #1
 800fa60:	0692      	lsls	r2, r2, #26
 800fa62:	d42b      	bmi.n	800fabc <_printf_common+0xb0>
 800fa64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa68:	4649      	mov	r1, r9
 800fa6a:	4638      	mov	r0, r7
 800fa6c:	47c0      	blx	r8
 800fa6e:	3001      	adds	r0, #1
 800fa70:	d01e      	beq.n	800fab0 <_printf_common+0xa4>
 800fa72:	6823      	ldr	r3, [r4, #0]
 800fa74:	6922      	ldr	r2, [r4, #16]
 800fa76:	f003 0306 	and.w	r3, r3, #6
 800fa7a:	2b04      	cmp	r3, #4
 800fa7c:	bf02      	ittt	eq
 800fa7e:	68e5      	ldreq	r5, [r4, #12]
 800fa80:	6833      	ldreq	r3, [r6, #0]
 800fa82:	1aed      	subeq	r5, r5, r3
 800fa84:	68a3      	ldr	r3, [r4, #8]
 800fa86:	bf0c      	ite	eq
 800fa88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa8c:	2500      	movne	r5, #0
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	bfc4      	itt	gt
 800fa92:	1a9b      	subgt	r3, r3, r2
 800fa94:	18ed      	addgt	r5, r5, r3
 800fa96:	2600      	movs	r6, #0
 800fa98:	341a      	adds	r4, #26
 800fa9a:	42b5      	cmp	r5, r6
 800fa9c:	d11a      	bne.n	800fad4 <_printf_common+0xc8>
 800fa9e:	2000      	movs	r0, #0
 800faa0:	e008      	b.n	800fab4 <_printf_common+0xa8>
 800faa2:	2301      	movs	r3, #1
 800faa4:	4652      	mov	r2, sl
 800faa6:	4649      	mov	r1, r9
 800faa8:	4638      	mov	r0, r7
 800faaa:	47c0      	blx	r8
 800faac:	3001      	adds	r0, #1
 800faae:	d103      	bne.n	800fab8 <_printf_common+0xac>
 800fab0:	f04f 30ff 	mov.w	r0, #4294967295
 800fab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fab8:	3501      	adds	r5, #1
 800faba:	e7c6      	b.n	800fa4a <_printf_common+0x3e>
 800fabc:	18e1      	adds	r1, r4, r3
 800fabe:	1c5a      	adds	r2, r3, #1
 800fac0:	2030      	movs	r0, #48	; 0x30
 800fac2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fac6:	4422      	add	r2, r4
 800fac8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800facc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fad0:	3302      	adds	r3, #2
 800fad2:	e7c7      	b.n	800fa64 <_printf_common+0x58>
 800fad4:	2301      	movs	r3, #1
 800fad6:	4622      	mov	r2, r4
 800fad8:	4649      	mov	r1, r9
 800fada:	4638      	mov	r0, r7
 800fadc:	47c0      	blx	r8
 800fade:	3001      	adds	r0, #1
 800fae0:	d0e6      	beq.n	800fab0 <_printf_common+0xa4>
 800fae2:	3601      	adds	r6, #1
 800fae4:	e7d9      	b.n	800fa9a <_printf_common+0x8e>
	...

0800fae8 <_printf_i>:
 800fae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800faec:	7e0f      	ldrb	r7, [r1, #24]
 800faee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800faf0:	2f78      	cmp	r7, #120	; 0x78
 800faf2:	4691      	mov	r9, r2
 800faf4:	4680      	mov	r8, r0
 800faf6:	460c      	mov	r4, r1
 800faf8:	469a      	mov	sl, r3
 800fafa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fafe:	d807      	bhi.n	800fb10 <_printf_i+0x28>
 800fb00:	2f62      	cmp	r7, #98	; 0x62
 800fb02:	d80a      	bhi.n	800fb1a <_printf_i+0x32>
 800fb04:	2f00      	cmp	r7, #0
 800fb06:	f000 80d4 	beq.w	800fcb2 <_printf_i+0x1ca>
 800fb0a:	2f58      	cmp	r7, #88	; 0x58
 800fb0c:	f000 80c0 	beq.w	800fc90 <_printf_i+0x1a8>
 800fb10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fb18:	e03a      	b.n	800fb90 <_printf_i+0xa8>
 800fb1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fb1e:	2b15      	cmp	r3, #21
 800fb20:	d8f6      	bhi.n	800fb10 <_printf_i+0x28>
 800fb22:	a101      	add	r1, pc, #4	; (adr r1, 800fb28 <_printf_i+0x40>)
 800fb24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fb28:	0800fb81 	.word	0x0800fb81
 800fb2c:	0800fb95 	.word	0x0800fb95
 800fb30:	0800fb11 	.word	0x0800fb11
 800fb34:	0800fb11 	.word	0x0800fb11
 800fb38:	0800fb11 	.word	0x0800fb11
 800fb3c:	0800fb11 	.word	0x0800fb11
 800fb40:	0800fb95 	.word	0x0800fb95
 800fb44:	0800fb11 	.word	0x0800fb11
 800fb48:	0800fb11 	.word	0x0800fb11
 800fb4c:	0800fb11 	.word	0x0800fb11
 800fb50:	0800fb11 	.word	0x0800fb11
 800fb54:	0800fc99 	.word	0x0800fc99
 800fb58:	0800fbc1 	.word	0x0800fbc1
 800fb5c:	0800fc53 	.word	0x0800fc53
 800fb60:	0800fb11 	.word	0x0800fb11
 800fb64:	0800fb11 	.word	0x0800fb11
 800fb68:	0800fcbb 	.word	0x0800fcbb
 800fb6c:	0800fb11 	.word	0x0800fb11
 800fb70:	0800fbc1 	.word	0x0800fbc1
 800fb74:	0800fb11 	.word	0x0800fb11
 800fb78:	0800fb11 	.word	0x0800fb11
 800fb7c:	0800fc5b 	.word	0x0800fc5b
 800fb80:	682b      	ldr	r3, [r5, #0]
 800fb82:	1d1a      	adds	r2, r3, #4
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	602a      	str	r2, [r5, #0]
 800fb88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb90:	2301      	movs	r3, #1
 800fb92:	e09f      	b.n	800fcd4 <_printf_i+0x1ec>
 800fb94:	6820      	ldr	r0, [r4, #0]
 800fb96:	682b      	ldr	r3, [r5, #0]
 800fb98:	0607      	lsls	r7, r0, #24
 800fb9a:	f103 0104 	add.w	r1, r3, #4
 800fb9e:	6029      	str	r1, [r5, #0]
 800fba0:	d501      	bpl.n	800fba6 <_printf_i+0xbe>
 800fba2:	681e      	ldr	r6, [r3, #0]
 800fba4:	e003      	b.n	800fbae <_printf_i+0xc6>
 800fba6:	0646      	lsls	r6, r0, #25
 800fba8:	d5fb      	bpl.n	800fba2 <_printf_i+0xba>
 800fbaa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fbae:	2e00      	cmp	r6, #0
 800fbb0:	da03      	bge.n	800fbba <_printf_i+0xd2>
 800fbb2:	232d      	movs	r3, #45	; 0x2d
 800fbb4:	4276      	negs	r6, r6
 800fbb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbba:	485a      	ldr	r0, [pc, #360]	; (800fd24 <_printf_i+0x23c>)
 800fbbc:	230a      	movs	r3, #10
 800fbbe:	e012      	b.n	800fbe6 <_printf_i+0xfe>
 800fbc0:	682b      	ldr	r3, [r5, #0]
 800fbc2:	6820      	ldr	r0, [r4, #0]
 800fbc4:	1d19      	adds	r1, r3, #4
 800fbc6:	6029      	str	r1, [r5, #0]
 800fbc8:	0605      	lsls	r5, r0, #24
 800fbca:	d501      	bpl.n	800fbd0 <_printf_i+0xe8>
 800fbcc:	681e      	ldr	r6, [r3, #0]
 800fbce:	e002      	b.n	800fbd6 <_printf_i+0xee>
 800fbd0:	0641      	lsls	r1, r0, #25
 800fbd2:	d5fb      	bpl.n	800fbcc <_printf_i+0xe4>
 800fbd4:	881e      	ldrh	r6, [r3, #0]
 800fbd6:	4853      	ldr	r0, [pc, #332]	; (800fd24 <_printf_i+0x23c>)
 800fbd8:	2f6f      	cmp	r7, #111	; 0x6f
 800fbda:	bf0c      	ite	eq
 800fbdc:	2308      	moveq	r3, #8
 800fbde:	230a      	movne	r3, #10
 800fbe0:	2100      	movs	r1, #0
 800fbe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fbe6:	6865      	ldr	r5, [r4, #4]
 800fbe8:	60a5      	str	r5, [r4, #8]
 800fbea:	2d00      	cmp	r5, #0
 800fbec:	bfa2      	ittt	ge
 800fbee:	6821      	ldrge	r1, [r4, #0]
 800fbf0:	f021 0104 	bicge.w	r1, r1, #4
 800fbf4:	6021      	strge	r1, [r4, #0]
 800fbf6:	b90e      	cbnz	r6, 800fbfc <_printf_i+0x114>
 800fbf8:	2d00      	cmp	r5, #0
 800fbfa:	d04b      	beq.n	800fc94 <_printf_i+0x1ac>
 800fbfc:	4615      	mov	r5, r2
 800fbfe:	fbb6 f1f3 	udiv	r1, r6, r3
 800fc02:	fb03 6711 	mls	r7, r3, r1, r6
 800fc06:	5dc7      	ldrb	r7, [r0, r7]
 800fc08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fc0c:	4637      	mov	r7, r6
 800fc0e:	42bb      	cmp	r3, r7
 800fc10:	460e      	mov	r6, r1
 800fc12:	d9f4      	bls.n	800fbfe <_printf_i+0x116>
 800fc14:	2b08      	cmp	r3, #8
 800fc16:	d10b      	bne.n	800fc30 <_printf_i+0x148>
 800fc18:	6823      	ldr	r3, [r4, #0]
 800fc1a:	07de      	lsls	r6, r3, #31
 800fc1c:	d508      	bpl.n	800fc30 <_printf_i+0x148>
 800fc1e:	6923      	ldr	r3, [r4, #16]
 800fc20:	6861      	ldr	r1, [r4, #4]
 800fc22:	4299      	cmp	r1, r3
 800fc24:	bfde      	ittt	le
 800fc26:	2330      	movle	r3, #48	; 0x30
 800fc28:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fc2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fc30:	1b52      	subs	r2, r2, r5
 800fc32:	6122      	str	r2, [r4, #16]
 800fc34:	f8cd a000 	str.w	sl, [sp]
 800fc38:	464b      	mov	r3, r9
 800fc3a:	aa03      	add	r2, sp, #12
 800fc3c:	4621      	mov	r1, r4
 800fc3e:	4640      	mov	r0, r8
 800fc40:	f7ff fee4 	bl	800fa0c <_printf_common>
 800fc44:	3001      	adds	r0, #1
 800fc46:	d14a      	bne.n	800fcde <_printf_i+0x1f6>
 800fc48:	f04f 30ff 	mov.w	r0, #4294967295
 800fc4c:	b004      	add	sp, #16
 800fc4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc52:	6823      	ldr	r3, [r4, #0]
 800fc54:	f043 0320 	orr.w	r3, r3, #32
 800fc58:	6023      	str	r3, [r4, #0]
 800fc5a:	4833      	ldr	r0, [pc, #204]	; (800fd28 <_printf_i+0x240>)
 800fc5c:	2778      	movs	r7, #120	; 0x78
 800fc5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fc62:	6823      	ldr	r3, [r4, #0]
 800fc64:	6829      	ldr	r1, [r5, #0]
 800fc66:	061f      	lsls	r7, r3, #24
 800fc68:	f851 6b04 	ldr.w	r6, [r1], #4
 800fc6c:	d402      	bmi.n	800fc74 <_printf_i+0x18c>
 800fc6e:	065f      	lsls	r7, r3, #25
 800fc70:	bf48      	it	mi
 800fc72:	b2b6      	uxthmi	r6, r6
 800fc74:	07df      	lsls	r7, r3, #31
 800fc76:	bf48      	it	mi
 800fc78:	f043 0320 	orrmi.w	r3, r3, #32
 800fc7c:	6029      	str	r1, [r5, #0]
 800fc7e:	bf48      	it	mi
 800fc80:	6023      	strmi	r3, [r4, #0]
 800fc82:	b91e      	cbnz	r6, 800fc8c <_printf_i+0x1a4>
 800fc84:	6823      	ldr	r3, [r4, #0]
 800fc86:	f023 0320 	bic.w	r3, r3, #32
 800fc8a:	6023      	str	r3, [r4, #0]
 800fc8c:	2310      	movs	r3, #16
 800fc8e:	e7a7      	b.n	800fbe0 <_printf_i+0xf8>
 800fc90:	4824      	ldr	r0, [pc, #144]	; (800fd24 <_printf_i+0x23c>)
 800fc92:	e7e4      	b.n	800fc5e <_printf_i+0x176>
 800fc94:	4615      	mov	r5, r2
 800fc96:	e7bd      	b.n	800fc14 <_printf_i+0x12c>
 800fc98:	682b      	ldr	r3, [r5, #0]
 800fc9a:	6826      	ldr	r6, [r4, #0]
 800fc9c:	6961      	ldr	r1, [r4, #20]
 800fc9e:	1d18      	adds	r0, r3, #4
 800fca0:	6028      	str	r0, [r5, #0]
 800fca2:	0635      	lsls	r5, r6, #24
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	d501      	bpl.n	800fcac <_printf_i+0x1c4>
 800fca8:	6019      	str	r1, [r3, #0]
 800fcaa:	e002      	b.n	800fcb2 <_printf_i+0x1ca>
 800fcac:	0670      	lsls	r0, r6, #25
 800fcae:	d5fb      	bpl.n	800fca8 <_printf_i+0x1c0>
 800fcb0:	8019      	strh	r1, [r3, #0]
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	6123      	str	r3, [r4, #16]
 800fcb6:	4615      	mov	r5, r2
 800fcb8:	e7bc      	b.n	800fc34 <_printf_i+0x14c>
 800fcba:	682b      	ldr	r3, [r5, #0]
 800fcbc:	1d1a      	adds	r2, r3, #4
 800fcbe:	602a      	str	r2, [r5, #0]
 800fcc0:	681d      	ldr	r5, [r3, #0]
 800fcc2:	6862      	ldr	r2, [r4, #4]
 800fcc4:	2100      	movs	r1, #0
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	f7f0 faa2 	bl	8000210 <memchr>
 800fccc:	b108      	cbz	r0, 800fcd2 <_printf_i+0x1ea>
 800fcce:	1b40      	subs	r0, r0, r5
 800fcd0:	6060      	str	r0, [r4, #4]
 800fcd2:	6863      	ldr	r3, [r4, #4]
 800fcd4:	6123      	str	r3, [r4, #16]
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcdc:	e7aa      	b.n	800fc34 <_printf_i+0x14c>
 800fcde:	6923      	ldr	r3, [r4, #16]
 800fce0:	462a      	mov	r2, r5
 800fce2:	4649      	mov	r1, r9
 800fce4:	4640      	mov	r0, r8
 800fce6:	47d0      	blx	sl
 800fce8:	3001      	adds	r0, #1
 800fcea:	d0ad      	beq.n	800fc48 <_printf_i+0x160>
 800fcec:	6823      	ldr	r3, [r4, #0]
 800fcee:	079b      	lsls	r3, r3, #30
 800fcf0:	d413      	bmi.n	800fd1a <_printf_i+0x232>
 800fcf2:	68e0      	ldr	r0, [r4, #12]
 800fcf4:	9b03      	ldr	r3, [sp, #12]
 800fcf6:	4298      	cmp	r0, r3
 800fcf8:	bfb8      	it	lt
 800fcfa:	4618      	movlt	r0, r3
 800fcfc:	e7a6      	b.n	800fc4c <_printf_i+0x164>
 800fcfe:	2301      	movs	r3, #1
 800fd00:	4632      	mov	r2, r6
 800fd02:	4649      	mov	r1, r9
 800fd04:	4640      	mov	r0, r8
 800fd06:	47d0      	blx	sl
 800fd08:	3001      	adds	r0, #1
 800fd0a:	d09d      	beq.n	800fc48 <_printf_i+0x160>
 800fd0c:	3501      	adds	r5, #1
 800fd0e:	68e3      	ldr	r3, [r4, #12]
 800fd10:	9903      	ldr	r1, [sp, #12]
 800fd12:	1a5b      	subs	r3, r3, r1
 800fd14:	42ab      	cmp	r3, r5
 800fd16:	dcf2      	bgt.n	800fcfe <_printf_i+0x216>
 800fd18:	e7eb      	b.n	800fcf2 <_printf_i+0x20a>
 800fd1a:	2500      	movs	r5, #0
 800fd1c:	f104 0619 	add.w	r6, r4, #25
 800fd20:	e7f5      	b.n	800fd0e <_printf_i+0x226>
 800fd22:	bf00      	nop
 800fd24:	08010e3c 	.word	0x08010e3c
 800fd28:	08010e4d 	.word	0x08010e4d

0800fd2c <__sflush_r>:
 800fd2c:	898a      	ldrh	r2, [r1, #12]
 800fd2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd32:	4605      	mov	r5, r0
 800fd34:	0710      	lsls	r0, r2, #28
 800fd36:	460c      	mov	r4, r1
 800fd38:	d458      	bmi.n	800fdec <__sflush_r+0xc0>
 800fd3a:	684b      	ldr	r3, [r1, #4]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	dc05      	bgt.n	800fd4c <__sflush_r+0x20>
 800fd40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	dc02      	bgt.n	800fd4c <__sflush_r+0x20>
 800fd46:	2000      	movs	r0, #0
 800fd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd4e:	2e00      	cmp	r6, #0
 800fd50:	d0f9      	beq.n	800fd46 <__sflush_r+0x1a>
 800fd52:	2300      	movs	r3, #0
 800fd54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fd58:	682f      	ldr	r7, [r5, #0]
 800fd5a:	6a21      	ldr	r1, [r4, #32]
 800fd5c:	602b      	str	r3, [r5, #0]
 800fd5e:	d032      	beq.n	800fdc6 <__sflush_r+0x9a>
 800fd60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fd62:	89a3      	ldrh	r3, [r4, #12]
 800fd64:	075a      	lsls	r2, r3, #29
 800fd66:	d505      	bpl.n	800fd74 <__sflush_r+0x48>
 800fd68:	6863      	ldr	r3, [r4, #4]
 800fd6a:	1ac0      	subs	r0, r0, r3
 800fd6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fd6e:	b10b      	cbz	r3, 800fd74 <__sflush_r+0x48>
 800fd70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd72:	1ac0      	subs	r0, r0, r3
 800fd74:	2300      	movs	r3, #0
 800fd76:	4602      	mov	r2, r0
 800fd78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd7a:	6a21      	ldr	r1, [r4, #32]
 800fd7c:	4628      	mov	r0, r5
 800fd7e:	47b0      	blx	r6
 800fd80:	1c43      	adds	r3, r0, #1
 800fd82:	89a3      	ldrh	r3, [r4, #12]
 800fd84:	d106      	bne.n	800fd94 <__sflush_r+0x68>
 800fd86:	6829      	ldr	r1, [r5, #0]
 800fd88:	291d      	cmp	r1, #29
 800fd8a:	d82b      	bhi.n	800fde4 <__sflush_r+0xb8>
 800fd8c:	4a29      	ldr	r2, [pc, #164]	; (800fe34 <__sflush_r+0x108>)
 800fd8e:	410a      	asrs	r2, r1
 800fd90:	07d6      	lsls	r6, r2, #31
 800fd92:	d427      	bmi.n	800fde4 <__sflush_r+0xb8>
 800fd94:	2200      	movs	r2, #0
 800fd96:	6062      	str	r2, [r4, #4]
 800fd98:	04d9      	lsls	r1, r3, #19
 800fd9a:	6922      	ldr	r2, [r4, #16]
 800fd9c:	6022      	str	r2, [r4, #0]
 800fd9e:	d504      	bpl.n	800fdaa <__sflush_r+0x7e>
 800fda0:	1c42      	adds	r2, r0, #1
 800fda2:	d101      	bne.n	800fda8 <__sflush_r+0x7c>
 800fda4:	682b      	ldr	r3, [r5, #0]
 800fda6:	b903      	cbnz	r3, 800fdaa <__sflush_r+0x7e>
 800fda8:	6560      	str	r0, [r4, #84]	; 0x54
 800fdaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fdac:	602f      	str	r7, [r5, #0]
 800fdae:	2900      	cmp	r1, #0
 800fdb0:	d0c9      	beq.n	800fd46 <__sflush_r+0x1a>
 800fdb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fdb6:	4299      	cmp	r1, r3
 800fdb8:	d002      	beq.n	800fdc0 <__sflush_r+0x94>
 800fdba:	4628      	mov	r0, r5
 800fdbc:	f7ff fbce 	bl	800f55c <_free_r>
 800fdc0:	2000      	movs	r0, #0
 800fdc2:	6360      	str	r0, [r4, #52]	; 0x34
 800fdc4:	e7c0      	b.n	800fd48 <__sflush_r+0x1c>
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	4628      	mov	r0, r5
 800fdca:	47b0      	blx	r6
 800fdcc:	1c41      	adds	r1, r0, #1
 800fdce:	d1c8      	bne.n	800fd62 <__sflush_r+0x36>
 800fdd0:	682b      	ldr	r3, [r5, #0]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d0c5      	beq.n	800fd62 <__sflush_r+0x36>
 800fdd6:	2b1d      	cmp	r3, #29
 800fdd8:	d001      	beq.n	800fdde <__sflush_r+0xb2>
 800fdda:	2b16      	cmp	r3, #22
 800fddc:	d101      	bne.n	800fde2 <__sflush_r+0xb6>
 800fdde:	602f      	str	r7, [r5, #0]
 800fde0:	e7b1      	b.n	800fd46 <__sflush_r+0x1a>
 800fde2:	89a3      	ldrh	r3, [r4, #12]
 800fde4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fde8:	81a3      	strh	r3, [r4, #12]
 800fdea:	e7ad      	b.n	800fd48 <__sflush_r+0x1c>
 800fdec:	690f      	ldr	r7, [r1, #16]
 800fdee:	2f00      	cmp	r7, #0
 800fdf0:	d0a9      	beq.n	800fd46 <__sflush_r+0x1a>
 800fdf2:	0793      	lsls	r3, r2, #30
 800fdf4:	680e      	ldr	r6, [r1, #0]
 800fdf6:	bf08      	it	eq
 800fdf8:	694b      	ldreq	r3, [r1, #20]
 800fdfa:	600f      	str	r7, [r1, #0]
 800fdfc:	bf18      	it	ne
 800fdfe:	2300      	movne	r3, #0
 800fe00:	eba6 0807 	sub.w	r8, r6, r7
 800fe04:	608b      	str	r3, [r1, #8]
 800fe06:	f1b8 0f00 	cmp.w	r8, #0
 800fe0a:	dd9c      	ble.n	800fd46 <__sflush_r+0x1a>
 800fe0c:	6a21      	ldr	r1, [r4, #32]
 800fe0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fe10:	4643      	mov	r3, r8
 800fe12:	463a      	mov	r2, r7
 800fe14:	4628      	mov	r0, r5
 800fe16:	47b0      	blx	r6
 800fe18:	2800      	cmp	r0, #0
 800fe1a:	dc06      	bgt.n	800fe2a <__sflush_r+0xfe>
 800fe1c:	89a3      	ldrh	r3, [r4, #12]
 800fe1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe22:	81a3      	strh	r3, [r4, #12]
 800fe24:	f04f 30ff 	mov.w	r0, #4294967295
 800fe28:	e78e      	b.n	800fd48 <__sflush_r+0x1c>
 800fe2a:	4407      	add	r7, r0
 800fe2c:	eba8 0800 	sub.w	r8, r8, r0
 800fe30:	e7e9      	b.n	800fe06 <__sflush_r+0xda>
 800fe32:	bf00      	nop
 800fe34:	dfbffffe 	.word	0xdfbffffe

0800fe38 <_fflush_r>:
 800fe38:	b538      	push	{r3, r4, r5, lr}
 800fe3a:	690b      	ldr	r3, [r1, #16]
 800fe3c:	4605      	mov	r5, r0
 800fe3e:	460c      	mov	r4, r1
 800fe40:	b913      	cbnz	r3, 800fe48 <_fflush_r+0x10>
 800fe42:	2500      	movs	r5, #0
 800fe44:	4628      	mov	r0, r5
 800fe46:	bd38      	pop	{r3, r4, r5, pc}
 800fe48:	b118      	cbz	r0, 800fe52 <_fflush_r+0x1a>
 800fe4a:	6a03      	ldr	r3, [r0, #32]
 800fe4c:	b90b      	cbnz	r3, 800fe52 <_fflush_r+0x1a>
 800fe4e:	f7ff f9dd 	bl	800f20c <__sinit>
 800fe52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d0f3      	beq.n	800fe42 <_fflush_r+0xa>
 800fe5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fe5c:	07d0      	lsls	r0, r2, #31
 800fe5e:	d404      	bmi.n	800fe6a <_fflush_r+0x32>
 800fe60:	0599      	lsls	r1, r3, #22
 800fe62:	d402      	bmi.n	800fe6a <_fflush_r+0x32>
 800fe64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe66:	f7ff fb51 	bl	800f50c <__retarget_lock_acquire_recursive>
 800fe6a:	4628      	mov	r0, r5
 800fe6c:	4621      	mov	r1, r4
 800fe6e:	f7ff ff5d 	bl	800fd2c <__sflush_r>
 800fe72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe74:	07da      	lsls	r2, r3, #31
 800fe76:	4605      	mov	r5, r0
 800fe78:	d4e4      	bmi.n	800fe44 <_fflush_r+0xc>
 800fe7a:	89a3      	ldrh	r3, [r4, #12]
 800fe7c:	059b      	lsls	r3, r3, #22
 800fe7e:	d4e1      	bmi.n	800fe44 <_fflush_r+0xc>
 800fe80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe82:	f7ff fb44 	bl	800f50e <__retarget_lock_release_recursive>
 800fe86:	e7dd      	b.n	800fe44 <_fflush_r+0xc>

0800fe88 <fiprintf>:
 800fe88:	b40e      	push	{r1, r2, r3}
 800fe8a:	b503      	push	{r0, r1, lr}
 800fe8c:	4601      	mov	r1, r0
 800fe8e:	ab03      	add	r3, sp, #12
 800fe90:	4805      	ldr	r0, [pc, #20]	; (800fea8 <fiprintf+0x20>)
 800fe92:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe96:	6800      	ldr	r0, [r0, #0]
 800fe98:	9301      	str	r3, [sp, #4]
 800fe9a:	f000 f89f 	bl	800ffdc <_vfiprintf_r>
 800fe9e:	b002      	add	sp, #8
 800fea0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fea4:	b003      	add	sp, #12
 800fea6:	4770      	bx	lr
 800fea8:	20000194 	.word	0x20000194

0800feac <memmove>:
 800feac:	4288      	cmp	r0, r1
 800feae:	b510      	push	{r4, lr}
 800feb0:	eb01 0402 	add.w	r4, r1, r2
 800feb4:	d902      	bls.n	800febc <memmove+0x10>
 800feb6:	4284      	cmp	r4, r0
 800feb8:	4623      	mov	r3, r4
 800feba:	d807      	bhi.n	800fecc <memmove+0x20>
 800febc:	1e43      	subs	r3, r0, #1
 800febe:	42a1      	cmp	r1, r4
 800fec0:	d008      	beq.n	800fed4 <memmove+0x28>
 800fec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800feca:	e7f8      	b.n	800febe <memmove+0x12>
 800fecc:	4402      	add	r2, r0
 800fece:	4601      	mov	r1, r0
 800fed0:	428a      	cmp	r2, r1
 800fed2:	d100      	bne.n	800fed6 <memmove+0x2a>
 800fed4:	bd10      	pop	{r4, pc}
 800fed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800feda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fede:	e7f7      	b.n	800fed0 <memmove+0x24>

0800fee0 <_sbrk_r>:
 800fee0:	b538      	push	{r3, r4, r5, lr}
 800fee2:	4d06      	ldr	r5, [pc, #24]	; (800fefc <_sbrk_r+0x1c>)
 800fee4:	2300      	movs	r3, #0
 800fee6:	4604      	mov	r4, r0
 800fee8:	4608      	mov	r0, r1
 800feea:	602b      	str	r3, [r5, #0]
 800feec:	f7f2 fe22 	bl	8002b34 <_sbrk>
 800fef0:	1c43      	adds	r3, r0, #1
 800fef2:	d102      	bne.n	800fefa <_sbrk_r+0x1a>
 800fef4:	682b      	ldr	r3, [r5, #0]
 800fef6:	b103      	cbz	r3, 800fefa <_sbrk_r+0x1a>
 800fef8:	6023      	str	r3, [r4, #0]
 800fefa:	bd38      	pop	{r3, r4, r5, pc}
 800fefc:	20004204 	.word	0x20004204

0800ff00 <memcpy>:
 800ff00:	440a      	add	r2, r1
 800ff02:	4291      	cmp	r1, r2
 800ff04:	f100 33ff 	add.w	r3, r0, #4294967295
 800ff08:	d100      	bne.n	800ff0c <memcpy+0xc>
 800ff0a:	4770      	bx	lr
 800ff0c:	b510      	push	{r4, lr}
 800ff0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff16:	4291      	cmp	r1, r2
 800ff18:	d1f9      	bne.n	800ff0e <memcpy+0xe>
 800ff1a:	bd10      	pop	{r4, pc}

0800ff1c <abort>:
 800ff1c:	b508      	push	{r3, lr}
 800ff1e:	2006      	movs	r0, #6
 800ff20:	f000 fa34 	bl	801038c <raise>
 800ff24:	2001      	movs	r0, #1
 800ff26:	f7f2 fd8d 	bl	8002a44 <_exit>

0800ff2a <_realloc_r>:
 800ff2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff2e:	4680      	mov	r8, r0
 800ff30:	4614      	mov	r4, r2
 800ff32:	460e      	mov	r6, r1
 800ff34:	b921      	cbnz	r1, 800ff40 <_realloc_r+0x16>
 800ff36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff3a:	4611      	mov	r1, r2
 800ff3c:	f7ff bb82 	b.w	800f644 <_malloc_r>
 800ff40:	b92a      	cbnz	r2, 800ff4e <_realloc_r+0x24>
 800ff42:	f7ff fb0b 	bl	800f55c <_free_r>
 800ff46:	4625      	mov	r5, r4
 800ff48:	4628      	mov	r0, r5
 800ff4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff4e:	f000 fa39 	bl	80103c4 <_malloc_usable_size_r>
 800ff52:	4284      	cmp	r4, r0
 800ff54:	4607      	mov	r7, r0
 800ff56:	d802      	bhi.n	800ff5e <_realloc_r+0x34>
 800ff58:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ff5c:	d812      	bhi.n	800ff84 <_realloc_r+0x5a>
 800ff5e:	4621      	mov	r1, r4
 800ff60:	4640      	mov	r0, r8
 800ff62:	f7ff fb6f 	bl	800f644 <_malloc_r>
 800ff66:	4605      	mov	r5, r0
 800ff68:	2800      	cmp	r0, #0
 800ff6a:	d0ed      	beq.n	800ff48 <_realloc_r+0x1e>
 800ff6c:	42bc      	cmp	r4, r7
 800ff6e:	4622      	mov	r2, r4
 800ff70:	4631      	mov	r1, r6
 800ff72:	bf28      	it	cs
 800ff74:	463a      	movcs	r2, r7
 800ff76:	f7ff ffc3 	bl	800ff00 <memcpy>
 800ff7a:	4631      	mov	r1, r6
 800ff7c:	4640      	mov	r0, r8
 800ff7e:	f7ff faed 	bl	800f55c <_free_r>
 800ff82:	e7e1      	b.n	800ff48 <_realloc_r+0x1e>
 800ff84:	4635      	mov	r5, r6
 800ff86:	e7df      	b.n	800ff48 <_realloc_r+0x1e>

0800ff88 <__sfputc_r>:
 800ff88:	6893      	ldr	r3, [r2, #8]
 800ff8a:	3b01      	subs	r3, #1
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	b410      	push	{r4}
 800ff90:	6093      	str	r3, [r2, #8]
 800ff92:	da08      	bge.n	800ffa6 <__sfputc_r+0x1e>
 800ff94:	6994      	ldr	r4, [r2, #24]
 800ff96:	42a3      	cmp	r3, r4
 800ff98:	db01      	blt.n	800ff9e <__sfputc_r+0x16>
 800ff9a:	290a      	cmp	r1, #10
 800ff9c:	d103      	bne.n	800ffa6 <__sfputc_r+0x1e>
 800ff9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffa2:	f000 b935 	b.w	8010210 <__swbuf_r>
 800ffa6:	6813      	ldr	r3, [r2, #0]
 800ffa8:	1c58      	adds	r0, r3, #1
 800ffaa:	6010      	str	r0, [r2, #0]
 800ffac:	7019      	strb	r1, [r3, #0]
 800ffae:	4608      	mov	r0, r1
 800ffb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffb4:	4770      	bx	lr

0800ffb6 <__sfputs_r>:
 800ffb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffb8:	4606      	mov	r6, r0
 800ffba:	460f      	mov	r7, r1
 800ffbc:	4614      	mov	r4, r2
 800ffbe:	18d5      	adds	r5, r2, r3
 800ffc0:	42ac      	cmp	r4, r5
 800ffc2:	d101      	bne.n	800ffc8 <__sfputs_r+0x12>
 800ffc4:	2000      	movs	r0, #0
 800ffc6:	e007      	b.n	800ffd8 <__sfputs_r+0x22>
 800ffc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffcc:	463a      	mov	r2, r7
 800ffce:	4630      	mov	r0, r6
 800ffd0:	f7ff ffda 	bl	800ff88 <__sfputc_r>
 800ffd4:	1c43      	adds	r3, r0, #1
 800ffd6:	d1f3      	bne.n	800ffc0 <__sfputs_r+0xa>
 800ffd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ffdc <_vfiprintf_r>:
 800ffdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe0:	460d      	mov	r5, r1
 800ffe2:	b09d      	sub	sp, #116	; 0x74
 800ffe4:	4614      	mov	r4, r2
 800ffe6:	4698      	mov	r8, r3
 800ffe8:	4606      	mov	r6, r0
 800ffea:	b118      	cbz	r0, 800fff4 <_vfiprintf_r+0x18>
 800ffec:	6a03      	ldr	r3, [r0, #32]
 800ffee:	b90b      	cbnz	r3, 800fff4 <_vfiprintf_r+0x18>
 800fff0:	f7ff f90c 	bl	800f20c <__sinit>
 800fff4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fff6:	07d9      	lsls	r1, r3, #31
 800fff8:	d405      	bmi.n	8010006 <_vfiprintf_r+0x2a>
 800fffa:	89ab      	ldrh	r3, [r5, #12]
 800fffc:	059a      	lsls	r2, r3, #22
 800fffe:	d402      	bmi.n	8010006 <_vfiprintf_r+0x2a>
 8010000:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010002:	f7ff fa83 	bl	800f50c <__retarget_lock_acquire_recursive>
 8010006:	89ab      	ldrh	r3, [r5, #12]
 8010008:	071b      	lsls	r3, r3, #28
 801000a:	d501      	bpl.n	8010010 <_vfiprintf_r+0x34>
 801000c:	692b      	ldr	r3, [r5, #16]
 801000e:	b99b      	cbnz	r3, 8010038 <_vfiprintf_r+0x5c>
 8010010:	4629      	mov	r1, r5
 8010012:	4630      	mov	r0, r6
 8010014:	f000 f93a 	bl	801028c <__swsetup_r>
 8010018:	b170      	cbz	r0, 8010038 <_vfiprintf_r+0x5c>
 801001a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801001c:	07dc      	lsls	r4, r3, #31
 801001e:	d504      	bpl.n	801002a <_vfiprintf_r+0x4e>
 8010020:	f04f 30ff 	mov.w	r0, #4294967295
 8010024:	b01d      	add	sp, #116	; 0x74
 8010026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801002a:	89ab      	ldrh	r3, [r5, #12]
 801002c:	0598      	lsls	r0, r3, #22
 801002e:	d4f7      	bmi.n	8010020 <_vfiprintf_r+0x44>
 8010030:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010032:	f7ff fa6c 	bl	800f50e <__retarget_lock_release_recursive>
 8010036:	e7f3      	b.n	8010020 <_vfiprintf_r+0x44>
 8010038:	2300      	movs	r3, #0
 801003a:	9309      	str	r3, [sp, #36]	; 0x24
 801003c:	2320      	movs	r3, #32
 801003e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010042:	f8cd 800c 	str.w	r8, [sp, #12]
 8010046:	2330      	movs	r3, #48	; 0x30
 8010048:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80101fc <_vfiprintf_r+0x220>
 801004c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010050:	f04f 0901 	mov.w	r9, #1
 8010054:	4623      	mov	r3, r4
 8010056:	469a      	mov	sl, r3
 8010058:	f813 2b01 	ldrb.w	r2, [r3], #1
 801005c:	b10a      	cbz	r2, 8010062 <_vfiprintf_r+0x86>
 801005e:	2a25      	cmp	r2, #37	; 0x25
 8010060:	d1f9      	bne.n	8010056 <_vfiprintf_r+0x7a>
 8010062:	ebba 0b04 	subs.w	fp, sl, r4
 8010066:	d00b      	beq.n	8010080 <_vfiprintf_r+0xa4>
 8010068:	465b      	mov	r3, fp
 801006a:	4622      	mov	r2, r4
 801006c:	4629      	mov	r1, r5
 801006e:	4630      	mov	r0, r6
 8010070:	f7ff ffa1 	bl	800ffb6 <__sfputs_r>
 8010074:	3001      	adds	r0, #1
 8010076:	f000 80a9 	beq.w	80101cc <_vfiprintf_r+0x1f0>
 801007a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801007c:	445a      	add	r2, fp
 801007e:	9209      	str	r2, [sp, #36]	; 0x24
 8010080:	f89a 3000 	ldrb.w	r3, [sl]
 8010084:	2b00      	cmp	r3, #0
 8010086:	f000 80a1 	beq.w	80101cc <_vfiprintf_r+0x1f0>
 801008a:	2300      	movs	r3, #0
 801008c:	f04f 32ff 	mov.w	r2, #4294967295
 8010090:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010094:	f10a 0a01 	add.w	sl, sl, #1
 8010098:	9304      	str	r3, [sp, #16]
 801009a:	9307      	str	r3, [sp, #28]
 801009c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80100a0:	931a      	str	r3, [sp, #104]	; 0x68
 80100a2:	4654      	mov	r4, sl
 80100a4:	2205      	movs	r2, #5
 80100a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100aa:	4854      	ldr	r0, [pc, #336]	; (80101fc <_vfiprintf_r+0x220>)
 80100ac:	f7f0 f8b0 	bl	8000210 <memchr>
 80100b0:	9a04      	ldr	r2, [sp, #16]
 80100b2:	b9d8      	cbnz	r0, 80100ec <_vfiprintf_r+0x110>
 80100b4:	06d1      	lsls	r1, r2, #27
 80100b6:	bf44      	itt	mi
 80100b8:	2320      	movmi	r3, #32
 80100ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100be:	0713      	lsls	r3, r2, #28
 80100c0:	bf44      	itt	mi
 80100c2:	232b      	movmi	r3, #43	; 0x2b
 80100c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100c8:	f89a 3000 	ldrb.w	r3, [sl]
 80100cc:	2b2a      	cmp	r3, #42	; 0x2a
 80100ce:	d015      	beq.n	80100fc <_vfiprintf_r+0x120>
 80100d0:	9a07      	ldr	r2, [sp, #28]
 80100d2:	4654      	mov	r4, sl
 80100d4:	2000      	movs	r0, #0
 80100d6:	f04f 0c0a 	mov.w	ip, #10
 80100da:	4621      	mov	r1, r4
 80100dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100e0:	3b30      	subs	r3, #48	; 0x30
 80100e2:	2b09      	cmp	r3, #9
 80100e4:	d94d      	bls.n	8010182 <_vfiprintf_r+0x1a6>
 80100e6:	b1b0      	cbz	r0, 8010116 <_vfiprintf_r+0x13a>
 80100e8:	9207      	str	r2, [sp, #28]
 80100ea:	e014      	b.n	8010116 <_vfiprintf_r+0x13a>
 80100ec:	eba0 0308 	sub.w	r3, r0, r8
 80100f0:	fa09 f303 	lsl.w	r3, r9, r3
 80100f4:	4313      	orrs	r3, r2
 80100f6:	9304      	str	r3, [sp, #16]
 80100f8:	46a2      	mov	sl, r4
 80100fa:	e7d2      	b.n	80100a2 <_vfiprintf_r+0xc6>
 80100fc:	9b03      	ldr	r3, [sp, #12]
 80100fe:	1d19      	adds	r1, r3, #4
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	9103      	str	r1, [sp, #12]
 8010104:	2b00      	cmp	r3, #0
 8010106:	bfbb      	ittet	lt
 8010108:	425b      	neglt	r3, r3
 801010a:	f042 0202 	orrlt.w	r2, r2, #2
 801010e:	9307      	strge	r3, [sp, #28]
 8010110:	9307      	strlt	r3, [sp, #28]
 8010112:	bfb8      	it	lt
 8010114:	9204      	strlt	r2, [sp, #16]
 8010116:	7823      	ldrb	r3, [r4, #0]
 8010118:	2b2e      	cmp	r3, #46	; 0x2e
 801011a:	d10c      	bne.n	8010136 <_vfiprintf_r+0x15a>
 801011c:	7863      	ldrb	r3, [r4, #1]
 801011e:	2b2a      	cmp	r3, #42	; 0x2a
 8010120:	d134      	bne.n	801018c <_vfiprintf_r+0x1b0>
 8010122:	9b03      	ldr	r3, [sp, #12]
 8010124:	1d1a      	adds	r2, r3, #4
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	9203      	str	r2, [sp, #12]
 801012a:	2b00      	cmp	r3, #0
 801012c:	bfb8      	it	lt
 801012e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010132:	3402      	adds	r4, #2
 8010134:	9305      	str	r3, [sp, #20]
 8010136:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801020c <_vfiprintf_r+0x230>
 801013a:	7821      	ldrb	r1, [r4, #0]
 801013c:	2203      	movs	r2, #3
 801013e:	4650      	mov	r0, sl
 8010140:	f7f0 f866 	bl	8000210 <memchr>
 8010144:	b138      	cbz	r0, 8010156 <_vfiprintf_r+0x17a>
 8010146:	9b04      	ldr	r3, [sp, #16]
 8010148:	eba0 000a 	sub.w	r0, r0, sl
 801014c:	2240      	movs	r2, #64	; 0x40
 801014e:	4082      	lsls	r2, r0
 8010150:	4313      	orrs	r3, r2
 8010152:	3401      	adds	r4, #1
 8010154:	9304      	str	r3, [sp, #16]
 8010156:	f814 1b01 	ldrb.w	r1, [r4], #1
 801015a:	4829      	ldr	r0, [pc, #164]	; (8010200 <_vfiprintf_r+0x224>)
 801015c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010160:	2206      	movs	r2, #6
 8010162:	f7f0 f855 	bl	8000210 <memchr>
 8010166:	2800      	cmp	r0, #0
 8010168:	d03f      	beq.n	80101ea <_vfiprintf_r+0x20e>
 801016a:	4b26      	ldr	r3, [pc, #152]	; (8010204 <_vfiprintf_r+0x228>)
 801016c:	bb1b      	cbnz	r3, 80101b6 <_vfiprintf_r+0x1da>
 801016e:	9b03      	ldr	r3, [sp, #12]
 8010170:	3307      	adds	r3, #7
 8010172:	f023 0307 	bic.w	r3, r3, #7
 8010176:	3308      	adds	r3, #8
 8010178:	9303      	str	r3, [sp, #12]
 801017a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801017c:	443b      	add	r3, r7
 801017e:	9309      	str	r3, [sp, #36]	; 0x24
 8010180:	e768      	b.n	8010054 <_vfiprintf_r+0x78>
 8010182:	fb0c 3202 	mla	r2, ip, r2, r3
 8010186:	460c      	mov	r4, r1
 8010188:	2001      	movs	r0, #1
 801018a:	e7a6      	b.n	80100da <_vfiprintf_r+0xfe>
 801018c:	2300      	movs	r3, #0
 801018e:	3401      	adds	r4, #1
 8010190:	9305      	str	r3, [sp, #20]
 8010192:	4619      	mov	r1, r3
 8010194:	f04f 0c0a 	mov.w	ip, #10
 8010198:	4620      	mov	r0, r4
 801019a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801019e:	3a30      	subs	r2, #48	; 0x30
 80101a0:	2a09      	cmp	r2, #9
 80101a2:	d903      	bls.n	80101ac <_vfiprintf_r+0x1d0>
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d0c6      	beq.n	8010136 <_vfiprintf_r+0x15a>
 80101a8:	9105      	str	r1, [sp, #20]
 80101aa:	e7c4      	b.n	8010136 <_vfiprintf_r+0x15a>
 80101ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80101b0:	4604      	mov	r4, r0
 80101b2:	2301      	movs	r3, #1
 80101b4:	e7f0      	b.n	8010198 <_vfiprintf_r+0x1bc>
 80101b6:	ab03      	add	r3, sp, #12
 80101b8:	9300      	str	r3, [sp, #0]
 80101ba:	462a      	mov	r2, r5
 80101bc:	4b12      	ldr	r3, [pc, #72]	; (8010208 <_vfiprintf_r+0x22c>)
 80101be:	a904      	add	r1, sp, #16
 80101c0:	4630      	mov	r0, r6
 80101c2:	f3af 8000 	nop.w
 80101c6:	4607      	mov	r7, r0
 80101c8:	1c78      	adds	r0, r7, #1
 80101ca:	d1d6      	bne.n	801017a <_vfiprintf_r+0x19e>
 80101cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101ce:	07d9      	lsls	r1, r3, #31
 80101d0:	d405      	bmi.n	80101de <_vfiprintf_r+0x202>
 80101d2:	89ab      	ldrh	r3, [r5, #12]
 80101d4:	059a      	lsls	r2, r3, #22
 80101d6:	d402      	bmi.n	80101de <_vfiprintf_r+0x202>
 80101d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101da:	f7ff f998 	bl	800f50e <__retarget_lock_release_recursive>
 80101de:	89ab      	ldrh	r3, [r5, #12]
 80101e0:	065b      	lsls	r3, r3, #25
 80101e2:	f53f af1d 	bmi.w	8010020 <_vfiprintf_r+0x44>
 80101e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101e8:	e71c      	b.n	8010024 <_vfiprintf_r+0x48>
 80101ea:	ab03      	add	r3, sp, #12
 80101ec:	9300      	str	r3, [sp, #0]
 80101ee:	462a      	mov	r2, r5
 80101f0:	4b05      	ldr	r3, [pc, #20]	; (8010208 <_vfiprintf_r+0x22c>)
 80101f2:	a904      	add	r1, sp, #16
 80101f4:	4630      	mov	r0, r6
 80101f6:	f7ff fc77 	bl	800fae8 <_printf_i>
 80101fa:	e7e4      	b.n	80101c6 <_vfiprintf_r+0x1ea>
 80101fc:	08010e2b 	.word	0x08010e2b
 8010200:	08010e35 	.word	0x08010e35
 8010204:	00000000 	.word	0x00000000
 8010208:	0800ffb7 	.word	0x0800ffb7
 801020c:	08010e31 	.word	0x08010e31

08010210 <__swbuf_r>:
 8010210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010212:	460e      	mov	r6, r1
 8010214:	4614      	mov	r4, r2
 8010216:	4605      	mov	r5, r0
 8010218:	b118      	cbz	r0, 8010222 <__swbuf_r+0x12>
 801021a:	6a03      	ldr	r3, [r0, #32]
 801021c:	b90b      	cbnz	r3, 8010222 <__swbuf_r+0x12>
 801021e:	f7fe fff5 	bl	800f20c <__sinit>
 8010222:	69a3      	ldr	r3, [r4, #24]
 8010224:	60a3      	str	r3, [r4, #8]
 8010226:	89a3      	ldrh	r3, [r4, #12]
 8010228:	071a      	lsls	r2, r3, #28
 801022a:	d525      	bpl.n	8010278 <__swbuf_r+0x68>
 801022c:	6923      	ldr	r3, [r4, #16]
 801022e:	b31b      	cbz	r3, 8010278 <__swbuf_r+0x68>
 8010230:	6823      	ldr	r3, [r4, #0]
 8010232:	6922      	ldr	r2, [r4, #16]
 8010234:	1a98      	subs	r0, r3, r2
 8010236:	6963      	ldr	r3, [r4, #20]
 8010238:	b2f6      	uxtb	r6, r6
 801023a:	4283      	cmp	r3, r0
 801023c:	4637      	mov	r7, r6
 801023e:	dc04      	bgt.n	801024a <__swbuf_r+0x3a>
 8010240:	4621      	mov	r1, r4
 8010242:	4628      	mov	r0, r5
 8010244:	f7ff fdf8 	bl	800fe38 <_fflush_r>
 8010248:	b9e0      	cbnz	r0, 8010284 <__swbuf_r+0x74>
 801024a:	68a3      	ldr	r3, [r4, #8]
 801024c:	3b01      	subs	r3, #1
 801024e:	60a3      	str	r3, [r4, #8]
 8010250:	6823      	ldr	r3, [r4, #0]
 8010252:	1c5a      	adds	r2, r3, #1
 8010254:	6022      	str	r2, [r4, #0]
 8010256:	701e      	strb	r6, [r3, #0]
 8010258:	6962      	ldr	r2, [r4, #20]
 801025a:	1c43      	adds	r3, r0, #1
 801025c:	429a      	cmp	r2, r3
 801025e:	d004      	beq.n	801026a <__swbuf_r+0x5a>
 8010260:	89a3      	ldrh	r3, [r4, #12]
 8010262:	07db      	lsls	r3, r3, #31
 8010264:	d506      	bpl.n	8010274 <__swbuf_r+0x64>
 8010266:	2e0a      	cmp	r6, #10
 8010268:	d104      	bne.n	8010274 <__swbuf_r+0x64>
 801026a:	4621      	mov	r1, r4
 801026c:	4628      	mov	r0, r5
 801026e:	f7ff fde3 	bl	800fe38 <_fflush_r>
 8010272:	b938      	cbnz	r0, 8010284 <__swbuf_r+0x74>
 8010274:	4638      	mov	r0, r7
 8010276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010278:	4621      	mov	r1, r4
 801027a:	4628      	mov	r0, r5
 801027c:	f000 f806 	bl	801028c <__swsetup_r>
 8010280:	2800      	cmp	r0, #0
 8010282:	d0d5      	beq.n	8010230 <__swbuf_r+0x20>
 8010284:	f04f 37ff 	mov.w	r7, #4294967295
 8010288:	e7f4      	b.n	8010274 <__swbuf_r+0x64>
	...

0801028c <__swsetup_r>:
 801028c:	b538      	push	{r3, r4, r5, lr}
 801028e:	4b2a      	ldr	r3, [pc, #168]	; (8010338 <__swsetup_r+0xac>)
 8010290:	4605      	mov	r5, r0
 8010292:	6818      	ldr	r0, [r3, #0]
 8010294:	460c      	mov	r4, r1
 8010296:	b118      	cbz	r0, 80102a0 <__swsetup_r+0x14>
 8010298:	6a03      	ldr	r3, [r0, #32]
 801029a:	b90b      	cbnz	r3, 80102a0 <__swsetup_r+0x14>
 801029c:	f7fe ffb6 	bl	800f20c <__sinit>
 80102a0:	89a3      	ldrh	r3, [r4, #12]
 80102a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80102a6:	0718      	lsls	r0, r3, #28
 80102a8:	d422      	bmi.n	80102f0 <__swsetup_r+0x64>
 80102aa:	06d9      	lsls	r1, r3, #27
 80102ac:	d407      	bmi.n	80102be <__swsetup_r+0x32>
 80102ae:	2309      	movs	r3, #9
 80102b0:	602b      	str	r3, [r5, #0]
 80102b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80102b6:	81a3      	strh	r3, [r4, #12]
 80102b8:	f04f 30ff 	mov.w	r0, #4294967295
 80102bc:	e034      	b.n	8010328 <__swsetup_r+0x9c>
 80102be:	0758      	lsls	r0, r3, #29
 80102c0:	d512      	bpl.n	80102e8 <__swsetup_r+0x5c>
 80102c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102c4:	b141      	cbz	r1, 80102d8 <__swsetup_r+0x4c>
 80102c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102ca:	4299      	cmp	r1, r3
 80102cc:	d002      	beq.n	80102d4 <__swsetup_r+0x48>
 80102ce:	4628      	mov	r0, r5
 80102d0:	f7ff f944 	bl	800f55c <_free_r>
 80102d4:	2300      	movs	r3, #0
 80102d6:	6363      	str	r3, [r4, #52]	; 0x34
 80102d8:	89a3      	ldrh	r3, [r4, #12]
 80102da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80102de:	81a3      	strh	r3, [r4, #12]
 80102e0:	2300      	movs	r3, #0
 80102e2:	6063      	str	r3, [r4, #4]
 80102e4:	6923      	ldr	r3, [r4, #16]
 80102e6:	6023      	str	r3, [r4, #0]
 80102e8:	89a3      	ldrh	r3, [r4, #12]
 80102ea:	f043 0308 	orr.w	r3, r3, #8
 80102ee:	81a3      	strh	r3, [r4, #12]
 80102f0:	6923      	ldr	r3, [r4, #16]
 80102f2:	b94b      	cbnz	r3, 8010308 <__swsetup_r+0x7c>
 80102f4:	89a3      	ldrh	r3, [r4, #12]
 80102f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80102fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80102fe:	d003      	beq.n	8010308 <__swsetup_r+0x7c>
 8010300:	4621      	mov	r1, r4
 8010302:	4628      	mov	r0, r5
 8010304:	f000 f88c 	bl	8010420 <__smakebuf_r>
 8010308:	89a0      	ldrh	r0, [r4, #12]
 801030a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801030e:	f010 0301 	ands.w	r3, r0, #1
 8010312:	d00a      	beq.n	801032a <__swsetup_r+0x9e>
 8010314:	2300      	movs	r3, #0
 8010316:	60a3      	str	r3, [r4, #8]
 8010318:	6963      	ldr	r3, [r4, #20]
 801031a:	425b      	negs	r3, r3
 801031c:	61a3      	str	r3, [r4, #24]
 801031e:	6923      	ldr	r3, [r4, #16]
 8010320:	b943      	cbnz	r3, 8010334 <__swsetup_r+0xa8>
 8010322:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010326:	d1c4      	bne.n	80102b2 <__swsetup_r+0x26>
 8010328:	bd38      	pop	{r3, r4, r5, pc}
 801032a:	0781      	lsls	r1, r0, #30
 801032c:	bf58      	it	pl
 801032e:	6963      	ldrpl	r3, [r4, #20]
 8010330:	60a3      	str	r3, [r4, #8]
 8010332:	e7f4      	b.n	801031e <__swsetup_r+0x92>
 8010334:	2000      	movs	r0, #0
 8010336:	e7f7      	b.n	8010328 <__swsetup_r+0x9c>
 8010338:	20000194 	.word	0x20000194

0801033c <_raise_r>:
 801033c:	291f      	cmp	r1, #31
 801033e:	b538      	push	{r3, r4, r5, lr}
 8010340:	4604      	mov	r4, r0
 8010342:	460d      	mov	r5, r1
 8010344:	d904      	bls.n	8010350 <_raise_r+0x14>
 8010346:	2316      	movs	r3, #22
 8010348:	6003      	str	r3, [r0, #0]
 801034a:	f04f 30ff 	mov.w	r0, #4294967295
 801034e:	bd38      	pop	{r3, r4, r5, pc}
 8010350:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010352:	b112      	cbz	r2, 801035a <_raise_r+0x1e>
 8010354:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010358:	b94b      	cbnz	r3, 801036e <_raise_r+0x32>
 801035a:	4620      	mov	r0, r4
 801035c:	f000 f830 	bl	80103c0 <_getpid_r>
 8010360:	462a      	mov	r2, r5
 8010362:	4601      	mov	r1, r0
 8010364:	4620      	mov	r0, r4
 8010366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801036a:	f000 b817 	b.w	801039c <_kill_r>
 801036e:	2b01      	cmp	r3, #1
 8010370:	d00a      	beq.n	8010388 <_raise_r+0x4c>
 8010372:	1c59      	adds	r1, r3, #1
 8010374:	d103      	bne.n	801037e <_raise_r+0x42>
 8010376:	2316      	movs	r3, #22
 8010378:	6003      	str	r3, [r0, #0]
 801037a:	2001      	movs	r0, #1
 801037c:	e7e7      	b.n	801034e <_raise_r+0x12>
 801037e:	2400      	movs	r4, #0
 8010380:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010384:	4628      	mov	r0, r5
 8010386:	4798      	blx	r3
 8010388:	2000      	movs	r0, #0
 801038a:	e7e0      	b.n	801034e <_raise_r+0x12>

0801038c <raise>:
 801038c:	4b02      	ldr	r3, [pc, #8]	; (8010398 <raise+0xc>)
 801038e:	4601      	mov	r1, r0
 8010390:	6818      	ldr	r0, [r3, #0]
 8010392:	f7ff bfd3 	b.w	801033c <_raise_r>
 8010396:	bf00      	nop
 8010398:	20000194 	.word	0x20000194

0801039c <_kill_r>:
 801039c:	b538      	push	{r3, r4, r5, lr}
 801039e:	4d07      	ldr	r5, [pc, #28]	; (80103bc <_kill_r+0x20>)
 80103a0:	2300      	movs	r3, #0
 80103a2:	4604      	mov	r4, r0
 80103a4:	4608      	mov	r0, r1
 80103a6:	4611      	mov	r1, r2
 80103a8:	602b      	str	r3, [r5, #0]
 80103aa:	f7f2 fb3b 	bl	8002a24 <_kill>
 80103ae:	1c43      	adds	r3, r0, #1
 80103b0:	d102      	bne.n	80103b8 <_kill_r+0x1c>
 80103b2:	682b      	ldr	r3, [r5, #0]
 80103b4:	b103      	cbz	r3, 80103b8 <_kill_r+0x1c>
 80103b6:	6023      	str	r3, [r4, #0]
 80103b8:	bd38      	pop	{r3, r4, r5, pc}
 80103ba:	bf00      	nop
 80103bc:	20004204 	.word	0x20004204

080103c0 <_getpid_r>:
 80103c0:	f7f2 bb28 	b.w	8002a14 <_getpid>

080103c4 <_malloc_usable_size_r>:
 80103c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103c8:	1f18      	subs	r0, r3, #4
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	bfbc      	itt	lt
 80103ce:	580b      	ldrlt	r3, [r1, r0]
 80103d0:	18c0      	addlt	r0, r0, r3
 80103d2:	4770      	bx	lr

080103d4 <__swhatbuf_r>:
 80103d4:	b570      	push	{r4, r5, r6, lr}
 80103d6:	460c      	mov	r4, r1
 80103d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103dc:	2900      	cmp	r1, #0
 80103de:	b096      	sub	sp, #88	; 0x58
 80103e0:	4615      	mov	r5, r2
 80103e2:	461e      	mov	r6, r3
 80103e4:	da0d      	bge.n	8010402 <__swhatbuf_r+0x2e>
 80103e6:	89a3      	ldrh	r3, [r4, #12]
 80103e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80103ec:	f04f 0100 	mov.w	r1, #0
 80103f0:	bf0c      	ite	eq
 80103f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80103f6:	2340      	movne	r3, #64	; 0x40
 80103f8:	2000      	movs	r0, #0
 80103fa:	6031      	str	r1, [r6, #0]
 80103fc:	602b      	str	r3, [r5, #0]
 80103fe:	b016      	add	sp, #88	; 0x58
 8010400:	bd70      	pop	{r4, r5, r6, pc}
 8010402:	466a      	mov	r2, sp
 8010404:	f000 f848 	bl	8010498 <_fstat_r>
 8010408:	2800      	cmp	r0, #0
 801040a:	dbec      	blt.n	80103e6 <__swhatbuf_r+0x12>
 801040c:	9901      	ldr	r1, [sp, #4]
 801040e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010412:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010416:	4259      	negs	r1, r3
 8010418:	4159      	adcs	r1, r3
 801041a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801041e:	e7eb      	b.n	80103f8 <__swhatbuf_r+0x24>

08010420 <__smakebuf_r>:
 8010420:	898b      	ldrh	r3, [r1, #12]
 8010422:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010424:	079d      	lsls	r5, r3, #30
 8010426:	4606      	mov	r6, r0
 8010428:	460c      	mov	r4, r1
 801042a:	d507      	bpl.n	801043c <__smakebuf_r+0x1c>
 801042c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010430:	6023      	str	r3, [r4, #0]
 8010432:	6123      	str	r3, [r4, #16]
 8010434:	2301      	movs	r3, #1
 8010436:	6163      	str	r3, [r4, #20]
 8010438:	b002      	add	sp, #8
 801043a:	bd70      	pop	{r4, r5, r6, pc}
 801043c:	ab01      	add	r3, sp, #4
 801043e:	466a      	mov	r2, sp
 8010440:	f7ff ffc8 	bl	80103d4 <__swhatbuf_r>
 8010444:	9900      	ldr	r1, [sp, #0]
 8010446:	4605      	mov	r5, r0
 8010448:	4630      	mov	r0, r6
 801044a:	f7ff f8fb 	bl	800f644 <_malloc_r>
 801044e:	b948      	cbnz	r0, 8010464 <__smakebuf_r+0x44>
 8010450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010454:	059a      	lsls	r2, r3, #22
 8010456:	d4ef      	bmi.n	8010438 <__smakebuf_r+0x18>
 8010458:	f023 0303 	bic.w	r3, r3, #3
 801045c:	f043 0302 	orr.w	r3, r3, #2
 8010460:	81a3      	strh	r3, [r4, #12]
 8010462:	e7e3      	b.n	801042c <__smakebuf_r+0xc>
 8010464:	89a3      	ldrh	r3, [r4, #12]
 8010466:	6020      	str	r0, [r4, #0]
 8010468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801046c:	81a3      	strh	r3, [r4, #12]
 801046e:	9b00      	ldr	r3, [sp, #0]
 8010470:	6163      	str	r3, [r4, #20]
 8010472:	9b01      	ldr	r3, [sp, #4]
 8010474:	6120      	str	r0, [r4, #16]
 8010476:	b15b      	cbz	r3, 8010490 <__smakebuf_r+0x70>
 8010478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801047c:	4630      	mov	r0, r6
 801047e:	f000 f81d 	bl	80104bc <_isatty_r>
 8010482:	b128      	cbz	r0, 8010490 <__smakebuf_r+0x70>
 8010484:	89a3      	ldrh	r3, [r4, #12]
 8010486:	f023 0303 	bic.w	r3, r3, #3
 801048a:	f043 0301 	orr.w	r3, r3, #1
 801048e:	81a3      	strh	r3, [r4, #12]
 8010490:	89a3      	ldrh	r3, [r4, #12]
 8010492:	431d      	orrs	r5, r3
 8010494:	81a5      	strh	r5, [r4, #12]
 8010496:	e7cf      	b.n	8010438 <__smakebuf_r+0x18>

08010498 <_fstat_r>:
 8010498:	b538      	push	{r3, r4, r5, lr}
 801049a:	4d07      	ldr	r5, [pc, #28]	; (80104b8 <_fstat_r+0x20>)
 801049c:	2300      	movs	r3, #0
 801049e:	4604      	mov	r4, r0
 80104a0:	4608      	mov	r0, r1
 80104a2:	4611      	mov	r1, r2
 80104a4:	602b      	str	r3, [r5, #0]
 80104a6:	f7f2 fb1c 	bl	8002ae2 <_fstat>
 80104aa:	1c43      	adds	r3, r0, #1
 80104ac:	d102      	bne.n	80104b4 <_fstat_r+0x1c>
 80104ae:	682b      	ldr	r3, [r5, #0]
 80104b0:	b103      	cbz	r3, 80104b4 <_fstat_r+0x1c>
 80104b2:	6023      	str	r3, [r4, #0]
 80104b4:	bd38      	pop	{r3, r4, r5, pc}
 80104b6:	bf00      	nop
 80104b8:	20004204 	.word	0x20004204

080104bc <_isatty_r>:
 80104bc:	b538      	push	{r3, r4, r5, lr}
 80104be:	4d06      	ldr	r5, [pc, #24]	; (80104d8 <_isatty_r+0x1c>)
 80104c0:	2300      	movs	r3, #0
 80104c2:	4604      	mov	r4, r0
 80104c4:	4608      	mov	r0, r1
 80104c6:	602b      	str	r3, [r5, #0]
 80104c8:	f7f2 fb1b 	bl	8002b02 <_isatty>
 80104cc:	1c43      	adds	r3, r0, #1
 80104ce:	d102      	bne.n	80104d6 <_isatty_r+0x1a>
 80104d0:	682b      	ldr	r3, [r5, #0]
 80104d2:	b103      	cbz	r3, 80104d6 <_isatty_r+0x1a>
 80104d4:	6023      	str	r3, [r4, #0]
 80104d6:	bd38      	pop	{r3, r4, r5, pc}
 80104d8:	20004204 	.word	0x20004204

080104dc <_init>:
 80104dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104de:	bf00      	nop
 80104e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104e2:	bc08      	pop	{r3}
 80104e4:	469e      	mov	lr, r3
 80104e6:	4770      	bx	lr

080104e8 <_fini>:
 80104e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ea:	bf00      	nop
 80104ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104ee:	bc08      	pop	{r3}
 80104f0:	469e      	mov	lr, r3
 80104f2:	4770      	bx	lr
